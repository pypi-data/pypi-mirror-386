# Copyright (c) 2025 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.

from __future__ import annotations

from typing import TYPE_CHECKING, ClassVar, Literal

from pyavd._eos_cli_config_gen.schema import EosCliConfigGen
from pyavd._schema.coerce_type import coerce_type
from pyavd._schema.models.avd_indexed_list import AvdIndexedList
from pyavd._schema.models.avd_list import AvdList
from pyavd._schema.models.avd_model import AvdModel
from pyavd._schema.models.eos_designs_root_model import EosDesignsRootModel

if TYPE_CHECKING:
    from pyavd._utils import Undefined, UndefinedType


class EosDesigns(EosDesignsRootModel):
    """Subclass of EosDesignsRootModel."""

    class AaaSettings(AvdModel):
        """Subclass of AvdModel."""

        class EnablePassword(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"password": {"type": str}}
            password: str | None
            """SHA512 hashed password."""

            if TYPE_CHECKING:

                def __init__(self, *, password: str | None | UndefinedType = Undefined) -> None:
                    """
                    EnablePassword.


                    Subclass of AvdModel.

                    Args:
                        password: SHA512 hashed password.

                    """

        class Tacacs(AvdModel):
            """Subclass of AvdModel."""

            class ServersItem(AvdModel):
                """Subclass of AvdModel."""

                class Groups(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Groups._item_type = str

                _fields: ClassVar[dict] = {
                    "host": {"type": str},
                    "groups": {"type": Groups},
                    "vrf": {"type": str},
                    "key": {"type": str},
                    "cleartext_key": {"type": str},
                }
                host: str
                """
                Host IP address or name.
                Combination of `host` and `vrf` should be unique.
                """
                groups: Groups
                """Subclass of AvdList with `str` items."""
                vrf: str | None
                """
                VRF name.
                The value will be interpreted according to these rules:
                - `use_mgmt_interface_vrf` will
                configure the TACACS host under the VRF set with `mgmt_interface_vrf`.
                  An error will be raised if
                `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                - `use_inband_mgmt_vrf` will
                configure the TACACS host under the VRF set with `inband_mgmt_vrf`.
                  An error will be raised if
                inband management is not configured for the device.
                - `use_default_mgmt_method_vrf` will configure
                the VRF and source-interface for one of the two options above depending on the value of
                `default_mgmt_method`.
                - Any other string will be used directly as the VRF name.
                """
                key: str | None
                """
                Encrypted Type 7 key.
                Takes precedence over `cleartext_key` if both are provided.
                Either `key` or
                `cleartext_key` must be set to render the configuration;
                otherwise, an error will be raised.
                """
                cleartext_key: str | None
                """
                Plaintext password that will be encrypted to Type 7 by AVD.
                To protect the password at rest it is
                strongly recommended to make use of a vault or similar.
                Either `key` or `cleartext_key` must be set
                to render the configuration;
                otherwise, an error will be raised.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        host: str | UndefinedType = Undefined,
                        groups: Groups | UndefinedType = Undefined,
                        vrf: str | None | UndefinedType = Undefined,
                        key: str | None | UndefinedType = Undefined,
                        cleartext_key: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        ServersItem.


                        Subclass of AvdModel.

                        Args:
                            host:
                               Host IP address or name.
                               Combination of `host` and `vrf` should be unique.
                            groups: Subclass of AvdList with `str` items.
                            vrf:
                               VRF name.
                               The value will be interpreted according to these rules:
                               - `use_mgmt_interface_vrf` will
                               configure the TACACS host under the VRF set with `mgmt_interface_vrf`.
                                 An error will be raised if
                               `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                               - `use_inband_mgmt_vrf` will
                               configure the TACACS host under the VRF set with `inband_mgmt_vrf`.
                                 An error will be raised if
                               inband management is not configured for the device.
                               - `use_default_mgmt_method_vrf` will configure
                               the VRF and source-interface for one of the two options above depending on the value of
                               `default_mgmt_method`.
                               - Any other string will be used directly as the VRF name.
                            key:
                               Encrypted Type 7 key.
                               Takes precedence over `cleartext_key` if both are provided.
                               Either `key` or
                               `cleartext_key` must be set to render the configuration;
                               otherwise, an error will be raised.
                            cleartext_key:
                               Plaintext password that will be encrypted to Type 7 by AVD.
                               To protect the password at rest it is
                               strongly recommended to make use of a vault or similar.
                               Either `key` or `cleartext_key` must be set
                               to render the configuration;
                               otherwise, an error will be raised.

                        """

            class Servers(AvdList[ServersItem]):
                """Subclass of AvdList with `ServersItem` items."""

            Servers._item_type = ServersItem

            class VrfsItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"name": {"type": str}, "source_interface": {"type": str}}
                name: str
                """VRF Name."""
                source_interface: str | None
                """
                Source interface to use for TACACS hosts in this VRF.
                If not set, the source interface may be set
                automatically when the TACACS server VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf`
                or `use_default_mgmt_method_vrf`.
                If set for the VRFs defined by `mgmt_interface_vrf` or
                `inband_mgmt_vrf`, this setting will take precedence.
                """

                if TYPE_CHECKING:

                    def __init__(self, *, name: str | UndefinedType = Undefined, source_interface: str | None | UndefinedType = Undefined) -> None:
                        """
                        VrfsItem.


                        Subclass of AvdModel.

                        Args:
                            name: VRF Name.
                            source_interface:
                               Source interface to use for TACACS hosts in this VRF.
                               If not set, the source interface may be set
                               automatically when the TACACS server VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf`
                               or `use_default_mgmt_method_vrf`.
                               If set for the VRFs defined by `mgmt_interface_vrf` or
                               `inband_mgmt_vrf`, this setting will take precedence.

                        """

            class Vrfs(AvdIndexedList[str, VrfsItem]):
                """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Vrfs._item_type = VrfsItem

            class Policy(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"ignore_unknown_mandatory_attribute": {"type": bool, "default": False}}
                ignore_unknown_mandatory_attribute: bool
                """Default value: `False`"""

                if TYPE_CHECKING:

                    def __init__(self, *, ignore_unknown_mandatory_attribute: bool | UndefinedType = Undefined) -> None:
                        """
                        Policy.


                        Subclass of AvdModel.

                        Args:
                            ignore_unknown_mandatory_attribute: ignore_unknown_mandatory_attribute

                        """

            _fields: ClassVar[dict] = {"servers": {"type": Servers}, "vrfs": {"type": Vrfs}, "policy": {"type": Policy}}
            servers: Servers
            """Subclass of AvdList with `ServersItem` items."""
            vrfs: Vrfs
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""
            policy: Policy
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(
                    self, *, servers: Servers | UndefinedType = Undefined, vrfs: Vrfs | UndefinedType = Undefined, policy: Policy | UndefinedType = Undefined
                ) -> None:
                    """
                    Tacacs.


                    Subclass of AvdModel.

                    Args:
                        servers: Subclass of AvdList with `ServersItem` items.
                        vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).
                        policy: Subclass of AvdModel.

                    """

        class Radius(AvdModel):
            """Subclass of AvdModel."""

            class ServersItem(AvdModel):
                """Subclass of AvdModel."""

                class Groups(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Groups._item_type = str

                _fields: ClassVar[dict] = {
                    "host": {"type": str},
                    "groups": {"type": Groups},
                    "vrf": {"type": str},
                    "key": {"type": str},
                    "cleartext_key": {"type": str},
                }
                host: str
                """
                Host IP address or name.
                Combination of `host` and `vrf` should be unique.
                """
                groups: Groups
                """Subclass of AvdList with `str` items."""
                vrf: str | None
                """
                VRF name.
                The value will be interpreted according to these rules:
                - `use_mgmt_interface_vrf` will
                configure the Radius host under the VRF set with `mgmt_interface_vrf`.
                  An error will be raised if
                `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                - `use_inband_mgmt_vrf` will
                configure the Radius host under the VRF set with `inband_mgmt_vrf`.
                  An error will be raised if
                inband management is not configured for the device.
                - `use_default_mgmt_method_vrf` will configure
                the VRF and source-interface for one of the two options above depending on the value of
                `default_mgmt_method`.
                - Any other string will be used directly as the VRF name.
                """
                key: str | None
                """
                Encrypted type-7 key.
                Takes precedence over `cleartext_key`.
                """
                cleartext_key: str | None
                """
                Cleartext password.
                Encrypted to Type 7 by AVD.
                To protect the password at rest it is strongly
                recommended to make use of a vault or similar.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        host: str | UndefinedType = Undefined,
                        groups: Groups | UndefinedType = Undefined,
                        vrf: str | None | UndefinedType = Undefined,
                        key: str | None | UndefinedType = Undefined,
                        cleartext_key: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        ServersItem.


                        Subclass of AvdModel.

                        Args:
                            host:
                               Host IP address or name.
                               Combination of `host` and `vrf` should be unique.
                            groups: Subclass of AvdList with `str` items.
                            vrf:
                               VRF name.
                               The value will be interpreted according to these rules:
                               - `use_mgmt_interface_vrf` will
                               configure the Radius host under the VRF set with `mgmt_interface_vrf`.
                                 An error will be raised if
                               `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                               - `use_inband_mgmt_vrf` will
                               configure the Radius host under the VRF set with `inband_mgmt_vrf`.
                                 An error will be raised if
                               inband management is not configured for the device.
                               - `use_default_mgmt_method_vrf` will configure
                               the VRF and source-interface for one of the two options above depending on the value of
                               `default_mgmt_method`.
                               - Any other string will be used directly as the VRF name.
                            key:
                               Encrypted type-7 key.
                               Takes precedence over `cleartext_key`.
                            cleartext_key:
                               Cleartext password.
                               Encrypted to Type 7 by AVD.
                               To protect the password at rest it is strongly
                               recommended to make use of a vault or similar.

                        """

            class Servers(AvdList[ServersItem]):
                """Subclass of AvdList with `ServersItem` items."""

            Servers._item_type = ServersItem

            class VrfsItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"name": {"type": str}, "source_interface": {"type": str}}
                name: str
                """VRF Name."""
                source_interface: str | None
                """
                Source interface to use for RADIUS hosts in this VRF.
                If not set, the source interface may be set
                automatically when the RADIUS server VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf`
                or `use_default_mgmt_method_vrf`.
                If set for the VRFs defined by `mgmt_interface_vrf` or
                `inband_mgmt_vrf`, this setting will take precedence.
                """

                if TYPE_CHECKING:

                    def __init__(self, *, name: str | UndefinedType = Undefined, source_interface: str | None | UndefinedType = Undefined) -> None:
                        """
                        VrfsItem.


                        Subclass of AvdModel.

                        Args:
                            name: VRF Name.
                            source_interface:
                               Source interface to use for RADIUS hosts in this VRF.
                               If not set, the source interface may be set
                               automatically when the RADIUS server VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf`
                               or `use_default_mgmt_method_vrf`.
                               If set for the VRFs defined by `mgmt_interface_vrf` or
                               `inband_mgmt_vrf`, this setting will take precedence.

                        """

            class Vrfs(AvdIndexedList[str, VrfsItem]):
                """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Vrfs._item_type = VrfsItem

            _fields: ClassVar[dict] = {"servers": {"type": Servers}, "vrfs": {"type": Vrfs}}
            servers: Servers
            """Subclass of AvdList with `ServersItem` items."""
            vrfs: Vrfs
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            if TYPE_CHECKING:

                def __init__(self, *, servers: Servers | UndefinedType = Undefined, vrfs: Vrfs | UndefinedType = Undefined) -> None:
                    """
                    Radius.


                    Subclass of AvdModel.

                    Args:
                        servers: Subclass of AvdList with `ServersItem` items.
                        vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).

                    """

        class RootLogin(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "sha512_password": {"type": str}}
            enabled: bool
            """Default value: `False`"""
            sha512_password: str | None

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, sha512_password: str | None | UndefinedType = Undefined) -> None:
                    """
                    RootLogin.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        sha512_password: sha512_password

                    """

        _fields: ClassVar[dict] = {
            "enable_password": {"type": EnablePassword},
            "tacacs": {"type": Tacacs},
            "radius": {"type": Radius},
            "authentication": {"type": EosCliConfigGen.AaaAuthentication},
            "authorization": {"type": EosCliConfigGen.AaaAuthorization},
            "accounting": {"type": EosCliConfigGen.AaaAccounting},
            "root_login": {"type": RootLogin},
            "local_users": {"type": EosCliConfigGen.LocalUsers},
        }
        enable_password: EnablePassword
        """Subclass of AvdModel."""
        tacacs: Tacacs
        """Subclass of AvdModel."""
        radius: Radius
        """Subclass of AvdModel."""
        authentication: EosCliConfigGen.AaaAuthentication
        authorization: EosCliConfigGen.AaaAuthorization
        accounting: EosCliConfigGen.AaaAccounting
        root_login: RootLogin
        """Subclass of AvdModel."""
        local_users: EosCliConfigGen.LocalUsers

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enable_password: EnablePassword | UndefinedType = Undefined,
                tacacs: Tacacs | UndefinedType = Undefined,
                radius: Radius | UndefinedType = Undefined,
                authentication: EosCliConfigGen.AaaAuthentication | UndefinedType = Undefined,
                authorization: EosCliConfigGen.AaaAuthorization | UndefinedType = Undefined,
                accounting: EosCliConfigGen.AaaAccounting | UndefinedType = Undefined,
                root_login: RootLogin | UndefinedType = Undefined,
                local_users: EosCliConfigGen.LocalUsers | UndefinedType = Undefined,
            ) -> None:
                """
                AaaSettings.


                Subclass of AvdModel.

                Args:
                    enable_password: Subclass of AvdModel.
                    tacacs: Subclass of AvdModel.
                    radius: Subclass of AvdModel.
                    authentication: authentication
                    authorization: authorization
                    accounting: accounting
                    root_login: Subclass of AvdModel.
                    local_users: local_users

                """

    class AddressLockingSettings(AvdModel):
        """Subclass of AvdModel."""

        class DhcpServersIpv4(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        DhcpServersIpv4._item_type = str

        class LeasesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"ip": {"type": str}, "mac": {"type": str}}
            ip: str
            """IP address."""
            mac: str
            """MAC address (hhhh.hhhh.hhhh or hh:hh:hh:hh:hh:hh)."""

            if TYPE_CHECKING:

                def __init__(self, *, ip: str | UndefinedType = Undefined, mac: str | UndefinedType = Undefined) -> None:
                    """
                    LeasesItem.


                    Subclass of AvdModel.

                    Args:
                        ip: IP address.
                        mac: MAC address (hhhh.hhhh.hhhh or hh:hh:hh:hh:hh:hh).

                    """

        class Leases(AvdList[LeasesItem]):
            """Subclass of AvdList with `LeasesItem` items."""

        Leases._item_type = LeasesItem

        class LockedAddress(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "expiration_mac_disabled": {"type": bool},
                "ipv4_enforcement_disabled": {"type": bool},
                "ipv6_enforcement_disabled": {"type": bool},
            }
            expiration_mac_disabled: bool | None
            """Configure deauthorizing locked addresses upon MAC aging out."""
            ipv4_enforcement_disabled: bool | None
            """Configure enforcement for locked IPv4 addresses."""
            ipv6_enforcement_disabled: bool | None
            """Configure enforcement for locked IPv6 addresses."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    expiration_mac_disabled: bool | None | UndefinedType = Undefined,
                    ipv4_enforcement_disabled: bool | None | UndefinedType = Undefined,
                    ipv6_enforcement_disabled: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    LockedAddress.


                    Subclass of AvdModel.

                    Args:
                        expiration_mac_disabled: Configure deauthorizing locked addresses upon MAC aging out.
                        ipv4_enforcement_disabled: Configure enforcement for locked IPv4 addresses.
                        ipv6_enforcement_disabled: Configure enforcement for locked IPv6 addresses.

                    """

        _fields: ClassVar[dict] = {
            "local_interface": {"type": str, "default": "use_default_mgmt_method_interface"},
            "local_users": {"type": EosCliConfigGen.LocalUsers},
            "dhcp_servers_ipv4": {"type": DhcpServersIpv4},
            "disabled": {"type": bool},
            "leases": {"type": Leases},
            "locked_address": {"type": LockedAddress},
        }
        local_interface: str
        """
        The value will be interpreted according to these rules:
          - `use_mgmt_interface` will configure the
        `mgmt_interface` as the local interface.
          - `use_inband_mgmt_interface` will configure the
        `inband_mgmt_interface` as the local interface.
          - `use_default_mgmt_method_interface` will
        configure `mgmt_interface` or `inband_mgmt_interface` as the local interface depending on the value
        of `default_mgmt_method`.
          - Any other string will be used directly as the local interface.

        Default value: `"use_default_mgmt_method_interface"`
        """
        local_users: EosCliConfigGen.LocalUsers
        dhcp_servers_ipv4: DhcpServersIpv4
        """Subclass of AvdList with `str` items."""
        disabled: bool | None
        """Disable IP locking on configured ports."""
        leases: Leases
        """Subclass of AvdList with `LeasesItem` items."""
        locked_address: LockedAddress
        """Subclass of AvdModel."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                local_interface: str | UndefinedType = Undefined,
                local_users: EosCliConfigGen.LocalUsers | UndefinedType = Undefined,
                dhcp_servers_ipv4: DhcpServersIpv4 | UndefinedType = Undefined,
                disabled: bool | None | UndefinedType = Undefined,
                leases: Leases | UndefinedType = Undefined,
                locked_address: LockedAddress | UndefinedType = Undefined,
            ) -> None:
                """
                AddressLockingSettings.


                Subclass of AvdModel.

                Args:
                    local_interface:
                       The value will be interpreted according to these rules:
                         - `use_mgmt_interface` will configure the
                       `mgmt_interface` as the local interface.
                         - `use_inband_mgmt_interface` will configure the
                       `inband_mgmt_interface` as the local interface.
                         - `use_default_mgmt_method_interface` will
                       configure `mgmt_interface` or `inband_mgmt_interface` as the local interface depending on the value
                       of `default_mgmt_method`.
                         - Any other string will be used directly as the local interface.
                    local_users: local_users
                    dhcp_servers_ipv4: Subclass of AvdList with `str` items.
                    disabled: Disable IP locking on configured ports.
                    leases: Subclass of AvdList with `LeasesItem` items.
                    locked_address: Subclass of AvdModel.

                """

    class Avd6Behaviors(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"snmp_settings_vrfs": {"type": bool, "default": False}, "inband_mgmt_attached_hosts": {"type": bool, "default": False}}
        snmp_settings_vrfs: bool
        """
        Opt-in to the new behavior for snmp_settings:
        - SNMP will only be enabled for VRFs specifically
        enabled under `snmp_settings.vrfs`.
          Note this means SNMP will be disabled for VRF "default" unless
        it is defined there.
        - `snmp_settings.hosts[].vrf` defaults to `use_default_mgmt_method_vrf`.
          If
        `default_mgmt_method` is 'none', the VRF must be specified. For VRF default set the string
        "default".

        Default value: `False`
        """
        inband_mgmt_attached_hosts: bool
        """
        Opt-in to the new behavior for inband management route export:
        - `ip attached-host route export`
        will only be rendered for inband management VLAN interfaces if the underlay protocol is BGP.

        Default value: `False`
        """

        if TYPE_CHECKING:

            def __init__(self, *, snmp_settings_vrfs: bool | UndefinedType = Undefined, inband_mgmt_attached_hosts: bool | UndefinedType = Undefined) -> None:
                """
                Avd6Behaviors.


                Subclass of AvdModel.

                Args:
                    snmp_settings_vrfs:
                       Opt-in to the new behavior for snmp_settings:
                       - SNMP will only be enabled for VRFs specifically
                       enabled under `snmp_settings.vrfs`.
                         Note this means SNMP will be disabled for VRF "default" unless
                       it is defined there.
                       - `snmp_settings.hosts[].vrf` defaults to `use_default_mgmt_method_vrf`.
                         If
                       `default_mgmt_method` is 'none', the VRF must be specified. For VRF default set the string
                       "default".
                    inband_mgmt_attached_hosts:
                       Opt-in to the new behavior for inband management route export:
                       - `ip attached-host route export`
                       will only be rendered for inband management VLAN interfaces if the underlay protocol is BGP.

                """

    class BfdMultihop(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"interval": {"type": int}, "min_rx": {"type": int}, "multiplier": {"type": int}}
        interval: int
        min_rx: int
        multiplier: int

        if TYPE_CHECKING:

            def __init__(
                self, *, interval: int | UndefinedType = Undefined, min_rx: int | UndefinedType = Undefined, multiplier: int | UndefinedType = Undefined
            ) -> None:
                """
                BfdMultihop.


                Subclass of AvdModel.

                Args:
                    interval: interval
                    min_rx: min_rx
                    multiplier: multiplier

                """

    class BgpGracefulRestart(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "restart_time": {"type": int, "default": 300}}
        enabled: bool
        """
        Enable or disable graceful-restart for all BGP peers.

        Default value: `False`
        """
        restart_time: int
        """
        Restart time in seconds.

        Default value: `300`
        """

        if TYPE_CHECKING:

            def __init__(self, *, enabled: bool | UndefinedType = Undefined, restart_time: int | UndefinedType = Undefined) -> None:
                """
                BgpGracefulRestart.


                Subclass of AvdModel.

                Args:
                    enabled: Enable or disable graceful-restart for all BGP peers.
                    restart_time: Restart time in seconds.

                """

    class BgpPeerGroups(AvdModel):
        """Subclass of AvdModel."""

        class Ipv4UnderlayPeers(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "IPv4-UNDERLAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": False},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"IPv4-UNDERLAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `False`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    Ipv4UnderlayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class MlagIpv4VrfsPeer(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": False},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """Name of peer group."""
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `False`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    MlagIpv4VrfsPeer.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class MlagIpv4UnderlayPeer(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "MLAG-IPv4-UNDERLAY-PEER"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": False},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"MLAG-IPv4-UNDERLAY-PEER"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `False`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    MlagIpv4UnderlayPeer.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class EvpnOverlayPeers(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "EVPN-OVERLAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"EVPN-OVERLAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `True`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    EvpnOverlayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class EvpnOverlayCore(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "EVPN-OVERLAY-CORE"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"EVPN-OVERLAY-CORE"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `True`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    EvpnOverlayCore.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class MplsOverlayPeers(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "MPLS-OVERLAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"MPLS-OVERLAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `True`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    MplsOverlayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class RrOverlayPeers(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "RR-OVERLAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"RR-OVERLAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `True`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    RrOverlayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class IpvpnGatewayPeers(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "IPVPN-GATEWAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"IPVPN-GATEWAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.
            """
            bfd: bool
            """Default value: `True`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    IpvpnGatewayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.
                        bfd: bfd
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class WanOverlayPeers(AvdModel):
            """Subclass of AvdModel."""

            class BfdTimers(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "interval": {"type": int, "default": 1000},
                    "min_rx": {"type": int, "default": 1000},
                    "multiplier": {"type": int, "default": 10},
                }
                interval: int
                """
                Interval in milliseconds.

                Default value: `1000`
                """
                min_rx: int
                """
                Rate in milliseconds.

                Default value: `1000`
                """
                multiplier: int
                """Default value: `10`"""

                if TYPE_CHECKING:

                    def __init__(
                        self, *, interval: int | UndefinedType = Undefined, min_rx: int | UndefinedType = Undefined, multiplier: int | UndefinedType = Undefined
                    ) -> None:
                        """
                        BfdTimers.


                        Subclass of AvdModel.

                        Args:
                            interval: Interval in milliseconds.
                            min_rx: Rate in milliseconds.
                            multiplier: multiplier

                        """

            class ListenRangePrefixes(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            ListenRangePrefixes._item_type = str

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "WAN-OVERLAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "bfd_timers": {"type": BfdTimers},
                "listen_range_prefixes": {"type": ListenRangePrefixes},
                "ttl_maximum_hops": {"type": int, "default": 1},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"WAN-OVERLAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.

            When
            configuring a password on the `wan_overlay_peers` BGP peer group,
            it may also be required to set a
            password for the `wan_rr_overlay_peers` BGP peer group.
            This is required in the case where one or
            more pathfinders use the same VTEP IP range as the edge routers.
            If the password is not set, the
            static BGP peerings between Pathfinders may not come up.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.

            When configuring a password on the `wan_overlay_peers` BGP peer
            group,
            it may also be required to set a password for the `wan_rr_overlay_peers` BGP peer group.
            This
            is required in the case where one or more pathfinders use the same VTEP IP range as the edge
            routers.
            If the password is not set, the static BGP peerings between Pathfinders may not come up.
            """
            bfd: bool
            """Default value: `True`"""
            bfd_timers: BfdTimers
            """
            Specify the BFD timers to override the default values.
            It is recommended to keep BFD total timeout
            longer than the DPS timeout.
            The Default BFD timeout is 10 x 1 seconds and the default DPS timeout
            is 5 x 1 seconds.

            Subclass of AvdModel.
            """
            listen_range_prefixes: ListenRangePrefixes
            """
            Only used for nodes where `wan_role` is `server` like AutoVPN RRs and Pathfinders.
            For clients, AVD
            will raise an error if the Loopback0 IP is not in any listen range.

            Subclass of AvdList with `str`
            items.
            """
            ttl_maximum_hops: int
            """Default value: `1`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    bfd_timers: BfdTimers | UndefinedType = Undefined,
                    listen_range_prefixes: ListenRangePrefixes | UndefinedType = Undefined,
                    ttl_maximum_hops: int | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    WanOverlayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.

                           When
                           configuring a password on the `wan_overlay_peers` BGP peer group,
                           it may also be required to set a
                           password for the `wan_rr_overlay_peers` BGP peer group.
                           This is required in the case where one or
                           more pathfinders use the same VTEP IP range as the edge routers.
                           If the password is not set, the
                           static BGP peerings between Pathfinders may not come up.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.

                           When configuring a password on the `wan_overlay_peers` BGP peer
                           group,
                           it may also be required to set a password for the `wan_rr_overlay_peers` BGP peer group.
                           This
                           is required in the case where one or more pathfinders use the same VTEP IP range as the edge
                           routers.
                           If the password is not set, the static BGP peerings between Pathfinders may not come up.
                        bfd: bfd
                        bfd_timers:
                           Specify the BFD timers to override the default values.
                           It is recommended to keep BFD total timeout
                           longer than the DPS timeout.
                           The Default BFD timeout is 10 x 1 seconds and the default DPS timeout
                           is 5 x 1 seconds.

                           Subclass of AvdModel.
                        listen_range_prefixes:
                           Only used for nodes where `wan_role` is `server` like AutoVPN RRs and Pathfinders.
                           For clients, AVD
                           will raise an error if the Loopback0 IP is not in any listen range.

                           Subclass of AvdList with `str`
                           items.
                        ttl_maximum_hops: ttl_maximum_hops
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        class WanRrOverlayPeers(AvdModel):
            """Subclass of AvdModel."""

            class BfdTimers(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "interval": {"type": int, "default": 1000},
                    "min_rx": {"type": int, "default": 1000},
                    "multiplier": {"type": int, "default": 10},
                }
                interval: int
                """
                Interval in milliseconds.

                Default value: `1000`
                """
                min_rx: int
                """
                Rate in milliseconds.

                Default value: `1000`
                """
                multiplier: int
                """Default value: `10`"""

                if TYPE_CHECKING:

                    def __init__(
                        self, *, interval: int | UndefinedType = Undefined, min_rx: int | UndefinedType = Undefined, multiplier: int | UndefinedType = Undefined
                    ) -> None:
                        """
                        BfdTimers.


                        Subclass of AvdModel.

                        Args:
                            interval: Interval in milliseconds.
                            min_rx: Rate in milliseconds.
                            multiplier: multiplier

                        """

            _fields: ClassVar[dict] = {
                "name": {"type": str, "default": "WAN-RR-OVERLAY-PEERS"},
                "password": {"type": str},
                "cleartext_password": {"type": str},
                "bfd": {"type": bool, "default": True},
                "bfd_timers": {"type": BfdTimers},
                "ttl_maximum_hops": {"type": int, "default": 1},
                "structured_config": {"type": EosCliConfigGen.RouterBgp.PeerGroupsItem},
            }
            name: str
            """
            Name of peer group.

            Default value: `"WAN-RR-OVERLAY-PEERS"`
            """
            password: str | None
            """
            BGP peer group Type 7 encrypted password.
            Takes precedence over `cleartext_password`.

            When
            configuring a password on the `wan_overlay_peers` BGP peer group,
            it may also be required to set a
            password for the `wan_rr_overlay_peers` BGP peer group.
            This is required in the case where one or
            more pathfinders use the same VTEP IP range as the edge routers.
            If the password is not set, the
            static BGP peerings between Pathfinders may not come up.
            """
            cleartext_password: str | None
            """
            BGP peer group cleartext password.
            To protect the password at rest it is strongly recommended to
            make use of a vault or similar.

            When configuring a password on the `wan_overlay_peers` BGP peer
            group,
            it may also be required to set a password for the `wan_rr_overlay_peers` BGP peer group.
            This
            is required in the case where one or more pathfinders use the same VTEP IP range as the edge
            routers.
            If the password is not set, the static BGP peerings between Pathfinders may not come up.
            """
            bfd: bool
            """Default value: `True`"""
            bfd_timers: BfdTimers
            """
            Specify the BFD timers to override the default values.
            It is recommended to keep BFD total timeout
            longer than the DPS timeout.
            The Default BFD timeout is 10 x 1 seconds and the default DPS timeout
            is 5 x 1 seconds.

            Subclass of AvdModel.
            """
            ttl_maximum_hops: int
            """Default value: `1`"""
            structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem
            """Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    password: str | None | UndefinedType = Undefined,
                    cleartext_password: str | None | UndefinedType = Undefined,
                    bfd: bool | UndefinedType = Undefined,
                    bfd_timers: BfdTimers | UndefinedType = Undefined,
                    ttl_maximum_hops: int | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.RouterBgp.PeerGroupsItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    WanRrOverlayPeers.


                    Subclass of AvdModel.

                    Args:
                        name: Name of peer group.
                        password:
                           BGP peer group Type 7 encrypted password.
                           Takes precedence over `cleartext_password`.

                           When
                           configuring a password on the `wan_overlay_peers` BGP peer group,
                           it may also be required to set a
                           password for the `wan_rr_overlay_peers` BGP peer group.
                           This is required in the case where one or
                           more pathfinders use the same VTEP IP range as the edge routers.
                           If the password is not set, the
                           static BGP peerings between Pathfinders may not come up.
                        cleartext_password:
                           BGP peer group cleartext password.
                           To protect the password at rest it is strongly recommended to
                           make use of a vault or similar.

                           When configuring a password on the `wan_overlay_peers` BGP peer
                           group,
                           it may also be required to set a password for the `wan_rr_overlay_peers` BGP peer group.
                           This
                           is required in the case where one or more pathfinders use the same VTEP IP range as the edge
                           routers.
                           If the password is not set, the static BGP peerings between Pathfinders may not come up.
                        bfd: bfd
                        bfd_timers:
                           Specify the BFD timers to override the default values.
                           It is recommended to keep BFD total timeout
                           longer than the DPS timeout.
                           The Default BFD timeout is 10 x 1 seconds and the default DPS timeout
                           is 5 x 1 seconds.

                           Subclass of AvdModel.
                        ttl_maximum_hops: ttl_maximum_hops
                        structured_config: Custom structured config added under router_bgp.peer_groups.[name=<name>] for eos_cli_config_gen.

                    """

        _fields: ClassVar[dict] = {
            "ipv4_underlay_peers": {"type": Ipv4UnderlayPeers},
            "mlag_ipv4_vrfs_peer": {"type": MlagIpv4VrfsPeer},
            "mlag_ipv4_underlay_peer": {"type": MlagIpv4UnderlayPeer},
            "evpn_overlay_peers": {"type": EvpnOverlayPeers},
            "evpn_overlay_core": {"type": EvpnOverlayCore},
            "mpls_overlay_peers": {"type": MplsOverlayPeers},
            "rr_overlay_peers": {"type": RrOverlayPeers},
            "ipvpn_gateway_peers": {"type": IpvpnGatewayPeers},
            "wan_overlay_peers": {"type": WanOverlayPeers},
            "wan_rr_overlay_peers": {"type": WanRrOverlayPeers},
        }
        ipv4_underlay_peers: Ipv4UnderlayPeers
        """Subclass of AvdModel."""
        mlag_ipv4_vrfs_peer: MlagIpv4VrfsPeer
        """
        Set this peer group name to use a different peer-group for MLAG peerings in VRFs.
        By default AVD
        uses the `mlag_ipv4_underlay_peer` peer group for the Underlay and for all the VRFs.

        If
        `mlag_ipv4_vrfs_peer.name` and `mlag_ipv4_underlay_peer.name` are the same,
        then all the attributes
        set here are ignored.

        Subclass of AvdModel.
        """
        mlag_ipv4_underlay_peer: MlagIpv4UnderlayPeer
        """Subclass of AvdModel."""
        evpn_overlay_peers: EvpnOverlayPeers
        """Subclass of AvdModel."""
        evpn_overlay_core: EvpnOverlayCore
        """Subclass of AvdModel."""
        mpls_overlay_peers: MplsOverlayPeers
        """Subclass of AvdModel."""
        rr_overlay_peers: RrOverlayPeers
        """Subclass of AvdModel."""
        ipvpn_gateway_peers: IpvpnGatewayPeers
        """Subclass of AvdModel."""
        wan_overlay_peers: WanOverlayPeers
        """Subclass of AvdModel."""
        wan_rr_overlay_peers: WanRrOverlayPeers
        """
        Configuration options for the peer-group created to peer between AutoVPN RRs or CV Pathfinders.
        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                ipv4_underlay_peers: Ipv4UnderlayPeers | UndefinedType = Undefined,
                mlag_ipv4_vrfs_peer: MlagIpv4VrfsPeer | UndefinedType = Undefined,
                mlag_ipv4_underlay_peer: MlagIpv4UnderlayPeer | UndefinedType = Undefined,
                evpn_overlay_peers: EvpnOverlayPeers | UndefinedType = Undefined,
                evpn_overlay_core: EvpnOverlayCore | UndefinedType = Undefined,
                mpls_overlay_peers: MplsOverlayPeers | UndefinedType = Undefined,
                rr_overlay_peers: RrOverlayPeers | UndefinedType = Undefined,
                ipvpn_gateway_peers: IpvpnGatewayPeers | UndefinedType = Undefined,
                wan_overlay_peers: WanOverlayPeers | UndefinedType = Undefined,
                wan_rr_overlay_peers: WanRrOverlayPeers | UndefinedType = Undefined,
            ) -> None:
                """
                BgpPeerGroups.


                Subclass of AvdModel.

                Args:
                    ipv4_underlay_peers: Subclass of AvdModel.
                    mlag_ipv4_vrfs_peer:
                       Set this peer group name to use a different peer-group for MLAG peerings in VRFs.
                       By default AVD
                       uses the `mlag_ipv4_underlay_peer` peer group for the Underlay and for all the VRFs.

                       If
                       `mlag_ipv4_vrfs_peer.name` and `mlag_ipv4_underlay_peer.name` are the same,
                       then all the attributes
                       set here are ignored.

                       Subclass of AvdModel.
                    mlag_ipv4_underlay_peer: Subclass of AvdModel.
                    evpn_overlay_peers: Subclass of AvdModel.
                    evpn_overlay_core: Subclass of AvdModel.
                    mpls_overlay_peers: Subclass of AvdModel.
                    rr_overlay_peers: Subclass of AvdModel.
                    ipvpn_gateway_peers: Subclass of AvdModel.
                    wan_overlay_peers: Subclass of AvdModel.
                    wan_rr_overlay_peers:
                       Configuration options for the peer-group created to peer between AutoVPN RRs or CV Pathfinders.
                       Subclass of AvdModel.

                """

    class CustomConnectedEndpointsKeysItem(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"key": {"type": str}, "type": {"type": str}, "description": {"type": str}}
        key: str
        type: str | None
        """Type used for documentation."""
        description: str | None
        """Description used for documentation."""

        if TYPE_CHECKING:

            def __init__(
                self, *, key: str | UndefinedType = Undefined, type: str | None | UndefinedType = Undefined, description: str | None | UndefinedType = Undefined
            ) -> None:
                """
                CustomConnectedEndpointsKeysItem.


                Subclass of AvdModel.

                Args:
                    key: key
                    type: Type used for documentation.
                    description: Description used for documentation.

                """

    class CustomConnectedEndpointsKeys(AvdIndexedList[str, CustomConnectedEndpointsKeysItem]):
        """
        Subclass of AvdIndexedList with `CustomConnectedEndpointsKeysItem` items. Primary key is `key`
        (`str`).
        """

        _primary_key: ClassVar[str] = "key"

    CustomConnectedEndpointsKeys._item_type = CustomConnectedEndpointsKeysItem

    class ConnectedEndpointsKeysItem(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"key": {"type": str}, "type": {"type": str}, "description": {"type": str}}
        key: str
        type: str | None
        """Type used for documentation."""
        description: str | None
        """Description used for documentation."""

        if TYPE_CHECKING:

            def __init__(
                self, *, key: str | UndefinedType = Undefined, type: str | None | UndefinedType = Undefined, description: str | None | UndefinedType = Undefined
            ) -> None:
                """
                ConnectedEndpointsKeysItem.


                Subclass of AvdModel.

                Args:
                    key: key
                    type: Type used for documentation.
                    description: Description used for documentation.

                """

    class ConnectedEndpointsKeys(AvdIndexedList[str, ConnectedEndpointsKeysItem]):
        """Subclass of AvdIndexedList with `ConnectedEndpointsKeysItem` items. Primary key is `key` (`str`)."""

        _primary_key: ClassVar[str] = "key"

    ConnectedEndpointsKeys._item_type = ConnectedEndpointsKeysItem

    class CoreInterfaces(AvdModel):
        """Subclass of AvdModel."""

        class P2pLinksIpPoolsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "ipv4_pool": {"type": str}, "prefix_size": {"type": int, "default": 31}}
            name: str
            """P2P pool name."""
            ipv4_pool: str | None
            """Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address)."""
            prefix_size: int
            """
            Subnet mask size.

            Default value: `31`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    ipv4_pool: str | None | UndefinedType = Undefined,
                    prefix_size: int | UndefinedType = Undefined,
                ) -> None:
                    """
                    P2pLinksIpPoolsItem.


                    Subclass of AvdModel.

                    Args:
                        name: P2P pool name.
                        ipv4_pool: Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        prefix_size: Subnet mask size.

                    """

        class P2pLinksIpPools(AvdIndexedList[str, P2pLinksIpPoolsItem]):
            """Subclass of AvdIndexedList with `P2pLinksIpPoolsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        P2pLinksIpPools._item_type = P2pLinksIpPoolsItem

        class P2pLinksProfilesItem(AvdModel):
            """Subclass of AvdModel."""

            class Ip(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Ip._item_type = str

            class Nodes(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Nodes._item_type = str

            class Interfaces(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Interfaces._item_type = str

            class As(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            As._item_type = str

            class Descriptions(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Descriptions._item_type = str

            class Ptp(AvdModel):
                """Subclass of AvdModel."""

                class Roles(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Roles._item_type = str

                _fields: ClassVar[dict] = {
                    "enabled": {"type": bool, "default": False},
                    "roles": {"type": Roles},
                    "profile": {"type": str, "default": "aes67-r16-2016"},
                }
                enabled: bool
                """
                Enable PTP.

                Default value: `False`
                """
                roles: Roles
                """
                Role in boundary clock mode for each node. Default is `dynamic`.

                Subclass of AvdList with `str`
                items.
                """
                profile: str
                """
                Default available profiles are:
                  - "aes67"
                  - "aes67-r16-2016"
                  - "smpte2059-2"

                Default value: `"aes67-r16-2016"`
                """

                if TYPE_CHECKING:

                    def __init__(
                        self, *, enabled: bool | UndefinedType = Undefined, roles: Roles | UndefinedType = Undefined, profile: str | UndefinedType = Undefined
                    ) -> None:
                        """
                        Ptp.


                        Subclass of AvdModel.

                        Args:
                            enabled: Enable PTP.
                            roles:
                               Role in boundary clock mode for each node. Default is `dynamic`.

                               Subclass of AvdList with `str`
                               items.
                            profile:
                               Default available profiles are:
                                 - "aes67"
                                 - "aes67-r16-2016"
                                 - "smpte2059-2"

                        """

            class FlowTracking(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                enabled: bool | None
                name: str | None
                """Flow tracker name as defined in flow_tracking_settings."""

                if TYPE_CHECKING:

                    def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                        """
                        FlowTracking.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled
                            name: Flow tracker name as defined in flow_tracking_settings.

                        """

            class PortChannel(AvdModel):
                """Subclass of AvdModel."""

                class NodesChildInterfacesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Interfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Interfaces._item_type = str

                    _fields: ClassVar[dict] = {"node": {"type": str}, "interfaces": {"type": Interfaces}, "channel_id": {"type": int}}
                    node: str
                    interfaces: Interfaces
                    """
                    List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                    Subclass of AvdList with
                    `str` items.
                    """
                    channel_id: int | None
                    """
                    Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                    `channel_id_algorithm`.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            node: str | UndefinedType = Undefined,
                            interfaces: Interfaces | UndefinedType = Undefined,
                            channel_id: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodesChildInterfacesItem.


                            Subclass of AvdModel.

                            Args:
                                node: node
                                interfaces:
                                   List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                                   Subclass of AvdList with
                                   `str` items.
                                channel_id:
                                   Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                                   `channel_id_algorithm`.

                            """

                class NodesChildInterfaces(AvdIndexedList[str, NodesChildInterfacesItem]):
                    """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                    _primary_key: ClassVar[str] = "node"

                NodesChildInterfaces._item_type = NodesChildInterfacesItem

                _fields: ClassVar[dict] = {
                    "description": {"type": str},
                    "mode": {"type": str, "default": "active"},
                    "channel_id_algorithm": {"type": str, "default": "first_port"},
                    "channel_id_offset": {"type": int},
                    "nodes_child_interfaces": {"type": NodesChildInterfaces},
                }
                description: str | None
                """
                Description or description template to be used on the port-channel interface.
                This can be a template
                using the AVD string formatter syntax:
                https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                descriptions-names.html#avd-string-formatter-syntax.
                The available template fields are:
                  - `peer`:
                The name of the peer.
                  - `interface`: The local port-channel interface name.
                  - `peer_interface`:
                The port-channel interface on the peer.
                  - `port_channel_id`: The local port-channel ID.
                  -
                `peer_port_channel_id`: The ID of the port-channel on the peer.

                Falls back to the description on
                the `p2p_link` if set. Otherwise default description is set by
                `default_underlay_p2p_port_channel_description`.
                By default the description is templated from the
                name and port_channel interface of the peer.
                """
                mode: Literal["on", "active", "passive"]
                """Default value: `"active"`"""
                channel_id_algorithm: Literal["first_port", "p2p_link_id"]
                """
                Configures how to derive the Port-Channel ID when not set.
                By default the ID is derived from the
                first switch port in node_child_interfaces[].interfaces.
                The `p2p_link_id` setting will use the `id`
                for each link plus the `channel_id_offset` to derive the Port-Channel ID.

                Default value: `"first_port"`
                """
                channel_id_offset: int | None
                """
                Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                `channel_id` is not set.
                """
                nodes_child_interfaces: NodesChildInterfaces
                """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        description: str | None | UndefinedType = Undefined,
                        mode: Literal["on", "active", "passive"] | UndefinedType = Undefined,
                        channel_id_algorithm: Literal["first_port", "p2p_link_id"] | UndefinedType = Undefined,
                        channel_id_offset: int | None | UndefinedType = Undefined,
                        nodes_child_interfaces: NodesChildInterfaces | UndefinedType = Undefined,
                    ) -> None:
                        """
                        PortChannel.


                        Subclass of AvdModel.

                        Args:
                            description:
                               Description or description template to be used on the port-channel interface.
                               This can be a template
                               using the AVD string formatter syntax:
                               https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                               descriptions-names.html#avd-string-formatter-syntax.
                               The available template fields are:
                                 - `peer`:
                               The name of the peer.
                                 - `interface`: The local port-channel interface name.
                                 - `peer_interface`:
                               The port-channel interface on the peer.
                                 - `port_channel_id`: The local port-channel ID.
                                 -
                               `peer_port_channel_id`: The ID of the port-channel on the peer.

                               Falls back to the description on
                               the `p2p_link` if set. Otherwise default description is set by
                               `default_underlay_p2p_port_channel_description`.
                               By default the description is templated from the
                               name and port_channel interface of the peer.
                            mode: mode
                            channel_id_algorithm:
                               Configures how to derive the Port-Channel ID when not set.
                               By default the ID is derived from the
                               first switch port in node_child_interfaces[].interfaces.
                               The `p2p_link_id` setting will use the `id`
                               for each link plus the `channel_id_offset` to derive the Port-Channel ID.
                            channel_id_offset:
                               Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                               `channel_id` is not set.
                            nodes_child_interfaces: Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`).

                        """

            class CampusLinkType(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            CampusLinkType._item_type = str

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "id": {"type": int},
                "speed": {"type": str},
                "ip_pool": {"type": str},
                "subnet": {"type": str},
                "ip": {"type": Ip},
                "ipv6_enable": {"type": bool, "default": False},
                "nodes": {"type": Nodes},
                "interfaces": {"type": Interfaces},
                "field_as": {"type": As},
                "descriptions": {"type": Descriptions},
                "include_in_underlay_protocol": {"type": bool, "default": True},
                "isis_hello_padding": {"type": bool, "default": True},
                "isis_metric": {"type": int},
                "isis_circuit_type": {"type": str},
                "isis_authentication_mode": {"type": str},
                "isis_authentication_key": {"type": str},
                "isis_authentication_cleartext_key": {"type": str},
                "isis_network_type": {"type": str, "default": "point-to-point"},
                "mpls_ip": {"type": bool},
                "mpls_ldp": {"type": bool},
                "mtu": {"type": int},
                "bfd": {"type": bool},
                "ptp": {"type": Ptp},
                "sflow": {"type": bool},
                "underlay_multicast": {"type": bool},
                "multicast_pim_sm": {"type": bool},
                "multicast_static": {"type": bool},
                "flow_tracking": {"type": FlowTracking},
                "qos_profile": {"type": str},
                "macsec_profile": {"type": str},
                "port_channel": {"type": PortChannel},
                "campus_link_type": {"type": CampusLinkType},
                "raw_eos_cli": {"type": str},
                "routing_protocol": {"type": str},
                "structured_config": {"type": dict},
                "ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                "port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
            }
            _field_to_key_map: ClassVar[dict] = {"field_as": "as"}
            _key_to_field_map: ClassVar[dict] = {"as": "field_as"}
            name: str
            """P2P profile name. Any variable supported under `p2p_links` can be inherited from a profile."""
            id: int | None
            """
            Unique id per subnet_summary. Used to calculate ip addresses.
            Required with ip_pool. ID starting
            from 1.
            """
            speed: str | None
            """
            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
            <interface_speed>`.
            """
            ip_pool: str | None
            """
            P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
            link.
            """
            subnet: str | None
            """IPv4 address/Mask. Subnet used on this P2P link."""
            ip: Ip
            """
            Specific IP addresses used on this P2P link.

            Subclass of AvdList with `str` items.
            """
            ipv6_enable: bool
            """
            Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
            include_in_underlay_protocol).

            Default value: `False`
            """
            nodes: Nodes
            """
            Nodes where this link should be configured.

            Subclass of AvdList with `str` items.
            """
            interfaces: Interfaces
            """
            Interfaces where this link should be configured and Required unless using port-channels.

            Subclass
            of AvdList with `str` items.
            """
            field_as: As
            """
            AS numbers for BGP.
            Required with bgp peering.


            Subclass of AvdList with `str` items.
            """
            descriptions: Descriptions
            """
            Interface descriptions.

            Subclass of AvdList with `str` items.
            """
            include_in_underlay_protocol: bool
            """
            Add this interface to underlay routing protocol.

            Default value: `True`
            """
            isis_hello_padding: bool
            """Default value: `True`"""
            isis_metric: int | None
            isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None
            isis_authentication_mode: Literal["md5", "text"] | None
            isis_authentication_key: str | None
            """
            Type-7 encrypted password.
            Takes precedence over 'underlay_isis_authentication_key',
            'underlay_isis_authentication_cleartext_key'
            and `isis_authentication_cleartext_key`.
            """
            isis_authentication_cleartext_key: str | None
            """
            Cleartext password.
            Encrypted to Type 7 by AVD.
            Takes precedence over
            'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
            To protect the
            password at rest it is strongly recommended to make use of a vault or similar.
            """
            isis_network_type: Literal["point-to-point", "broadcast"]
            """Default value: `"point-to-point"`"""
            mpls_ip: bool | None
            """MPLS parameters. Default value is true if switch.mpls_lsr is true."""
            mpls_ldp: bool | None
            """MPLS parameters. Default value is true for ldp underlay variants, otherwise false."""
            mtu: int | None
            """MTU for this P2P link. Default value same as p2p_uplinks_mtu."""
            bfd: bool | None
            """Enable BFD (only considered for BGP)."""
            ptp: Ptp
            """
            PTP parameters.

            Subclass of AvdModel.
            """
            sflow: bool | None
            """Enable sFlow. Overrides `fabric_sflow` setting."""
            underlay_multicast: bool | None
            """
            Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
            to be `true`.

            Note: The default value for this key is `false` when using either the new key
            `underlay_multicast.pim_sm.enabled: true
            or, if unset, global `underlay_multicast_pim_sm: true`
            """
            multicast_pim_sm: bool | None
            """
            Configure PIM sparse-mode on the P2P links.
            Requires node setting
            `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            multicast_static: bool | None
            """
            Configure static multicast on the P2P links.
            Requires node setting
            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            flow_tracking: FlowTracking
            """
            Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

            Subclass of AvdModel.
            """
            qos_profile: str | None
            """QOS service profile."""
            macsec_profile: str | None
            """MAC security profile."""
            port_channel: PortChannel
            """
            Port-channel parameters.

            Subclass of AvdModel.
            """
            campus_link_type: CampusLinkType
            """
            PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
            change at any time.
            Values for the CloudVision `Link-Type` user tags to be associated with an
            interface.
            Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
            in the same tags being associated with the parent Ethernet interface instead.
            Attempting to
            associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
            associated with the member Ethernet interfaces instead.

            Subclass of AvdList with `str` items.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the point-to-point interface in the final EOS configuration."""
            routing_protocol: Literal["ebgp"] | None
            """
            Enables deviation of the routing protocol used on this link from the fabric underlay default.
            -
            ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
            configured.
            """
            structured_config: dict
            """
            Custom structured config for interfaces.
            Note! The content of this dictionary is _not_ validated by
            the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
            """
            ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
            """Custom structured config for ethernet interfaces."""
            port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
            """Custom structured config for port-channel links."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    id: int | None | UndefinedType = Undefined,
                    speed: str | None | UndefinedType = Undefined,
                    ip_pool: str | None | UndefinedType = Undefined,
                    subnet: str | None | UndefinedType = Undefined,
                    ip: Ip | UndefinedType = Undefined,
                    ipv6_enable: bool | UndefinedType = Undefined,
                    nodes: Nodes | UndefinedType = Undefined,
                    interfaces: Interfaces | UndefinedType = Undefined,
                    field_as: As | UndefinedType = Undefined,
                    descriptions: Descriptions | UndefinedType = Undefined,
                    include_in_underlay_protocol: bool | UndefinedType = Undefined,
                    isis_hello_padding: bool | UndefinedType = Undefined,
                    isis_metric: int | None | UndefinedType = Undefined,
                    isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None | UndefinedType = Undefined,
                    isis_authentication_mode: Literal["md5", "text"] | None | UndefinedType = Undefined,
                    isis_authentication_key: str | None | UndefinedType = Undefined,
                    isis_authentication_cleartext_key: str | None | UndefinedType = Undefined,
                    isis_network_type: Literal["point-to-point", "broadcast"] | UndefinedType = Undefined,
                    mpls_ip: bool | None | UndefinedType = Undefined,
                    mpls_ldp: bool | None | UndefinedType = Undefined,
                    mtu: int | None | UndefinedType = Undefined,
                    bfd: bool | None | UndefinedType = Undefined,
                    ptp: Ptp | UndefinedType = Undefined,
                    sflow: bool | None | UndefinedType = Undefined,
                    underlay_multicast: bool | None | UndefinedType = Undefined,
                    multicast_pim_sm: bool | None | UndefinedType = Undefined,
                    multicast_static: bool | None | UndefinedType = Undefined,
                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                    qos_profile: str | None | UndefinedType = Undefined,
                    macsec_profile: str | None | UndefinedType = Undefined,
                    port_channel: PortChannel | UndefinedType = Undefined,
                    campus_link_type: CampusLinkType | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    routing_protocol: Literal["ebgp"] | None | UndefinedType = Undefined,
                    structured_config: dict | UndefinedType = Undefined,
                    ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                    port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    P2pLinksProfilesItem.


                    Subclass of AvdModel.

                    Args:
                        name: P2P profile name. Any variable supported under `p2p_links` can be inherited from a profile.
                        id:
                           Unique id per subnet_summary. Used to calculate ip addresses.
                           Required with ip_pool. ID starting
                           from 1.
                        speed:
                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                           <interface_speed>`.
                        ip_pool:
                           P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
                           link.
                        subnet: IPv4 address/Mask. Subnet used on this P2P link.
                        ip:
                           Specific IP addresses used on this P2P link.

                           Subclass of AvdList with `str` items.
                        ipv6_enable:
                           Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
                           include_in_underlay_protocol).
                        nodes:
                           Nodes where this link should be configured.

                           Subclass of AvdList with `str` items.
                        interfaces:
                           Interfaces where this link should be configured and Required unless using port-channels.

                           Subclass
                           of AvdList with `str` items.
                        field_as:
                           AS numbers for BGP.
                           Required with bgp peering.


                           Subclass of AvdList with `str` items.
                        descriptions:
                           Interface descriptions.

                           Subclass of AvdList with `str` items.
                        include_in_underlay_protocol: Add this interface to underlay routing protocol.
                        isis_hello_padding: isis_hello_padding
                        isis_metric: isis_metric
                        isis_circuit_type: isis_circuit_type
                        isis_authentication_mode: isis_authentication_mode
                        isis_authentication_key:
                           Type-7 encrypted password.
                           Takes precedence over 'underlay_isis_authentication_key',
                           'underlay_isis_authentication_cleartext_key'
                           and `isis_authentication_cleartext_key`.
                        isis_authentication_cleartext_key:
                           Cleartext password.
                           Encrypted to Type 7 by AVD.
                           Takes precedence over
                           'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
                           To protect the
                           password at rest it is strongly recommended to make use of a vault or similar.
                        isis_network_type: isis_network_type
                        mpls_ip: MPLS parameters. Default value is true if switch.mpls_lsr is true.
                        mpls_ldp: MPLS parameters. Default value is true for ldp underlay variants, otherwise false.
                        mtu: MTU for this P2P link. Default value same as p2p_uplinks_mtu.
                        bfd: Enable BFD (only considered for BGP).
                        ptp:
                           PTP parameters.

                           Subclass of AvdModel.
                        sflow: Enable sFlow. Overrides `fabric_sflow` setting.
                        underlay_multicast:
                           Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
                           to be `true`.

                           Note: The default value for this key is `false` when using either the new key
                           `underlay_multicast.pim_sm.enabled: true
                           or, if unset, global `underlay_multicast_pim_sm: true`
                        multicast_pim_sm:
                           Configure PIM sparse-mode on the P2P links.
                           Requires node setting
                           `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        multicast_static:
                           Configure static multicast on the P2P links.
                           Requires node setting
                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        flow_tracking:
                           Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

                           Subclass of AvdModel.
                        qos_profile: QOS service profile.
                        macsec_profile: MAC security profile.
                        port_channel:
                           Port-channel parameters.

                           Subclass of AvdModel.
                        campus_link_type:
                           PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                           change at any time.
                           Values for the CloudVision `Link-Type` user tags to be associated with an
                           interface.
                           Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                           in the same tags being associated with the parent Ethernet interface instead.
                           Attempting to
                           associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                           associated with the member Ethernet interfaces instead.

                           Subclass of AvdList with `str` items.
                        raw_eos_cli: EOS CLI rendered directly on the point-to-point interface in the final EOS configuration.
                        routing_protocol:
                           Enables deviation of the routing protocol used on this link from the fabric underlay default.
                           -
                           ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
                           configured.
                        structured_config:
                           Custom structured config for interfaces.
                           Note! The content of this dictionary is _not_ validated by
                           the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                        ethernet_structured_config: Custom structured config for ethernet interfaces.
                        port_channel_structured_config: Custom structured config for port-channel links.

                    """

        class P2pLinksProfiles(AvdIndexedList[str, P2pLinksProfilesItem]):
            """Subclass of AvdIndexedList with `P2pLinksProfilesItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        P2pLinksProfiles._item_type = P2pLinksProfilesItem

        class P2pLinksItem(AvdModel):
            """Subclass of AvdModel."""

            class Nodes(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Nodes._item_type = str

            class Ip(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Ip._item_type = str

            class Interfaces(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Interfaces._item_type = str

            class As(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            As._item_type = str

            class Descriptions(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Descriptions._item_type = str

            class Ptp(AvdModel):
                """Subclass of AvdModel."""

                class Roles(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Roles._item_type = str

                _fields: ClassVar[dict] = {
                    "enabled": {"type": bool, "default": False},
                    "roles": {"type": Roles},
                    "profile": {"type": str, "default": "aes67-r16-2016"},
                }
                enabled: bool
                """
                Enable PTP.

                Default value: `False`
                """
                roles: Roles
                """
                Role in boundary clock mode for each node. Default is `dynamic`.

                Subclass of AvdList with `str`
                items.
                """
                profile: str
                """
                Default available profiles are:
                  - "aes67"
                  - "aes67-r16-2016"
                  - "smpte2059-2"

                Default value: `"aes67-r16-2016"`
                """

                if TYPE_CHECKING:

                    def __init__(
                        self, *, enabled: bool | UndefinedType = Undefined, roles: Roles | UndefinedType = Undefined, profile: str | UndefinedType = Undefined
                    ) -> None:
                        """
                        Ptp.


                        Subclass of AvdModel.

                        Args:
                            enabled: Enable PTP.
                            roles:
                               Role in boundary clock mode for each node. Default is `dynamic`.

                               Subclass of AvdList with `str`
                               items.
                            profile:
                               Default available profiles are:
                                 - "aes67"
                                 - "aes67-r16-2016"
                                 - "smpte2059-2"

                        """

            class FlowTracking(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                enabled: bool | None
                name: str | None
                """Flow tracker name as defined in flow_tracking_settings."""

                if TYPE_CHECKING:

                    def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                        """
                        FlowTracking.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled
                            name: Flow tracker name as defined in flow_tracking_settings.

                        """

            class PortChannel(AvdModel):
                """Subclass of AvdModel."""

                class NodesChildInterfacesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Interfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Interfaces._item_type = str

                    _fields: ClassVar[dict] = {"node": {"type": str}, "interfaces": {"type": Interfaces}, "channel_id": {"type": int}}
                    node: str
                    interfaces: Interfaces
                    """
                    List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                    Subclass of AvdList with
                    `str` items.
                    """
                    channel_id: int | None
                    """
                    Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                    `channel_id_algorithm`.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            node: str | UndefinedType = Undefined,
                            interfaces: Interfaces | UndefinedType = Undefined,
                            channel_id: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodesChildInterfacesItem.


                            Subclass of AvdModel.

                            Args:
                                node: node
                                interfaces:
                                   List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                                   Subclass of AvdList with
                                   `str` items.
                                channel_id:
                                   Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                                   `channel_id_algorithm`.

                            """

                class NodesChildInterfaces(AvdIndexedList[str, NodesChildInterfacesItem]):
                    """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                    _primary_key: ClassVar[str] = "node"

                NodesChildInterfaces._item_type = NodesChildInterfacesItem

                _fields: ClassVar[dict] = {
                    "description": {"type": str},
                    "mode": {"type": str, "default": "active"},
                    "channel_id_algorithm": {"type": str, "default": "first_port"},
                    "channel_id_offset": {"type": int},
                    "nodes_child_interfaces": {"type": NodesChildInterfaces},
                }
                description: str | None
                """
                Description or description template to be used on the port-channel interface.
                This can be a template
                using the AVD string formatter syntax:
                https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                descriptions-names.html#avd-string-formatter-syntax.
                The available template fields are:
                  - `peer`:
                The name of the peer.
                  - `interface`: The local port-channel interface name.
                  - `peer_interface`:
                The port-channel interface on the peer.
                  - `port_channel_id`: The local port-channel ID.
                  -
                `peer_port_channel_id`: The ID of the port-channel on the peer.

                Falls back to the description on
                the `p2p_link` if set. Otherwise default description is set by
                `default_underlay_p2p_port_channel_description`.
                By default the description is templated from the
                name and port_channel interface of the peer.
                """
                mode: Literal["on", "active", "passive"]
                """Default value: `"active"`"""
                channel_id_algorithm: Literal["first_port", "p2p_link_id"]
                """
                Configures how to derive the Port-Channel ID when not set.
                By default the ID is derived from the
                first switch port in node_child_interfaces[].interfaces.
                The `p2p_link_id` setting will use the `id`
                for each link plus the `channel_id_offset` to derive the Port-Channel ID.

                Default value: `"first_port"`
                """
                channel_id_offset: int | None
                """
                Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                `channel_id` is not set.
                """
                nodes_child_interfaces: NodesChildInterfaces
                """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        description: str | None | UndefinedType = Undefined,
                        mode: Literal["on", "active", "passive"] | UndefinedType = Undefined,
                        channel_id_algorithm: Literal["first_port", "p2p_link_id"] | UndefinedType = Undefined,
                        channel_id_offset: int | None | UndefinedType = Undefined,
                        nodes_child_interfaces: NodesChildInterfaces | UndefinedType = Undefined,
                    ) -> None:
                        """
                        PortChannel.


                        Subclass of AvdModel.

                        Args:
                            description:
                               Description or description template to be used on the port-channel interface.
                               This can be a template
                               using the AVD string formatter syntax:
                               https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                               descriptions-names.html#avd-string-formatter-syntax.
                               The available template fields are:
                                 - `peer`:
                               The name of the peer.
                                 - `interface`: The local port-channel interface name.
                                 - `peer_interface`:
                               The port-channel interface on the peer.
                                 - `port_channel_id`: The local port-channel ID.
                                 -
                               `peer_port_channel_id`: The ID of the port-channel on the peer.

                               Falls back to the description on
                               the `p2p_link` if set. Otherwise default description is set by
                               `default_underlay_p2p_port_channel_description`.
                               By default the description is templated from the
                               name and port_channel interface of the peer.
                            mode: mode
                            channel_id_algorithm:
                               Configures how to derive the Port-Channel ID when not set.
                               By default the ID is derived from the
                               first switch port in node_child_interfaces[].interfaces.
                               The `p2p_link_id` setting will use the `id`
                               for each link plus the `channel_id_offset` to derive the Port-Channel ID.
                            channel_id_offset:
                               Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                               `channel_id` is not set.
                            nodes_child_interfaces: Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`).

                        """

            class CampusLinkType(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            CampusLinkType._item_type = str

            _fields: ClassVar[dict] = {
                "nodes": {"type": Nodes},
                "profile": {"type": str},
                "id": {"type": int},
                "speed": {"type": str},
                "ip_pool": {"type": str},
                "subnet": {"type": str},
                "ip": {"type": Ip},
                "ipv6_enable": {"type": bool, "default": False},
                "interfaces": {"type": Interfaces},
                "field_as": {"type": As},
                "descriptions": {"type": Descriptions},
                "include_in_underlay_protocol": {"type": bool, "default": True},
                "isis_hello_padding": {"type": bool, "default": True},
                "isis_metric": {"type": int},
                "isis_circuit_type": {"type": str},
                "isis_authentication_mode": {"type": str},
                "isis_authentication_key": {"type": str},
                "isis_authentication_cleartext_key": {"type": str},
                "isis_network_type": {"type": str, "default": "point-to-point"},
                "mpls_ip": {"type": bool},
                "mpls_ldp": {"type": bool},
                "mtu": {"type": int},
                "bfd": {"type": bool},
                "ptp": {"type": Ptp},
                "sflow": {"type": bool},
                "underlay_multicast": {"type": bool},
                "multicast_pim_sm": {"type": bool},
                "multicast_static": {"type": bool},
                "flow_tracking": {"type": FlowTracking},
                "qos_profile": {"type": str},
                "macsec_profile": {"type": str},
                "port_channel": {"type": PortChannel},
                "campus_link_type": {"type": CampusLinkType},
                "raw_eos_cli": {"type": str},
                "routing_protocol": {"type": str},
                "structured_config": {"type": dict},
                "ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                "port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
            }
            _field_to_key_map: ClassVar[dict] = {"field_as": "as"}
            _key_to_field_map: ClassVar[dict] = {"as": "field_as"}
            nodes: Nodes
            """
            Nodes where this link should be configured.

            Subclass of AvdList with `str` items.
            """
            profile: str | None
            """P2P profile name. Profile defined under p2p_profiles."""
            id: int | None
            """
            Unique id per subnet_summary. Used to calculate ip addresses.
            Required with ip_pool. ID starting
            from 1.
            """
            speed: str | None
            """
            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
            <interface_speed>`.
            """
            ip_pool: str | None
            """
            P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
            link.
            """
            subnet: str | None
            """IPv4 address/Mask. Subnet used on this P2P link."""
            ip: Ip
            """
            Specific IP addresses used on this P2P link.

            Subclass of AvdList with `str` items.
            """
            ipv6_enable: bool
            """
            Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
            include_in_underlay_protocol).

            Default value: `False`
            """
            interfaces: Interfaces
            """
            Interfaces where this link should be configured and Required unless using port-channels.

            Subclass
            of AvdList with `str` items.
            """
            field_as: As
            """
            AS numbers for BGP.
            Required with bgp peering.


            Subclass of AvdList with `str` items.
            """
            descriptions: Descriptions
            """
            Interface descriptions.

            Subclass of AvdList with `str` items.
            """
            include_in_underlay_protocol: bool
            """
            Add this interface to underlay routing protocol.

            Default value: `True`
            """
            isis_hello_padding: bool
            """Default value: `True`"""
            isis_metric: int | None
            isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None
            isis_authentication_mode: Literal["md5", "text"] | None
            isis_authentication_key: str | None
            """
            Type-7 encrypted password.
            Takes precedence over 'underlay_isis_authentication_key',
            'underlay_isis_authentication_cleartext_key'
            and `isis_authentication_cleartext_key`.
            """
            isis_authentication_cleartext_key: str | None
            """
            Cleartext password.
            Encrypted to Type 7 by AVD.
            Takes precedence over
            'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
            To protect the
            password at rest it is strongly recommended to make use of a vault or similar.
            """
            isis_network_type: Literal["point-to-point", "broadcast"]
            """Default value: `"point-to-point"`"""
            mpls_ip: bool | None
            """MPLS parameters. Default value is true if switch.mpls_lsr is true."""
            mpls_ldp: bool | None
            """MPLS parameters. Default value is true for ldp underlay variants, otherwise false."""
            mtu: int | None
            """MTU for this P2P link. Default value same as p2p_uplinks_mtu."""
            bfd: bool | None
            """Enable BFD (only considered for BGP)."""
            ptp: Ptp
            """
            PTP parameters.

            Subclass of AvdModel.
            """
            sflow: bool | None
            """Enable sFlow. Overrides `fabric_sflow` setting."""
            underlay_multicast: bool | None
            """
            Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
            to be `true`.

            Note: The default value for this key is `false` when using either the new key
            `underlay_multicast.pim_sm.enabled: true
            or, if unset, global `underlay_multicast_pim_sm: true`
            """
            multicast_pim_sm: bool | None
            """
            Configure PIM sparse-mode on the P2P links.
            Requires node setting
            `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            multicast_static: bool | None
            """
            Configure static multicast on the P2P links.
            Requires node setting
            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            flow_tracking: FlowTracking
            """
            Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

            Subclass of AvdModel.
            """
            qos_profile: str | None
            """QOS service profile."""
            macsec_profile: str | None
            """MAC security profile."""
            port_channel: PortChannel
            """
            Port-channel parameters.

            Subclass of AvdModel.
            """
            campus_link_type: CampusLinkType
            """
            PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
            change at any time.
            Values for the CloudVision `Link-Type` user tags to be associated with an
            interface.
            Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
            in the same tags being associated with the parent Ethernet interface instead.
            Attempting to
            associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
            associated with the member Ethernet interfaces instead.

            Subclass of AvdList with `str` items.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the point-to-point interface in the final EOS configuration."""
            routing_protocol: Literal["ebgp"] | None
            """
            Enables deviation of the routing protocol used on this link from the fabric underlay default.
            -
            ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
            configured.
            """
            structured_config: dict
            """
            Custom structured config for interfaces.
            Note! The content of this dictionary is _not_ validated by
            the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
            """
            ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
            """Custom structured config for ethernet interfaces."""
            port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
            """Custom structured config for port-channel links."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    nodes: Nodes | UndefinedType = Undefined,
                    profile: str | None | UndefinedType = Undefined,
                    id: int | None | UndefinedType = Undefined,
                    speed: str | None | UndefinedType = Undefined,
                    ip_pool: str | None | UndefinedType = Undefined,
                    subnet: str | None | UndefinedType = Undefined,
                    ip: Ip | UndefinedType = Undefined,
                    ipv6_enable: bool | UndefinedType = Undefined,
                    interfaces: Interfaces | UndefinedType = Undefined,
                    field_as: As | UndefinedType = Undefined,
                    descriptions: Descriptions | UndefinedType = Undefined,
                    include_in_underlay_protocol: bool | UndefinedType = Undefined,
                    isis_hello_padding: bool | UndefinedType = Undefined,
                    isis_metric: int | None | UndefinedType = Undefined,
                    isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None | UndefinedType = Undefined,
                    isis_authentication_mode: Literal["md5", "text"] | None | UndefinedType = Undefined,
                    isis_authentication_key: str | None | UndefinedType = Undefined,
                    isis_authentication_cleartext_key: str | None | UndefinedType = Undefined,
                    isis_network_type: Literal["point-to-point", "broadcast"] | UndefinedType = Undefined,
                    mpls_ip: bool | None | UndefinedType = Undefined,
                    mpls_ldp: bool | None | UndefinedType = Undefined,
                    mtu: int | None | UndefinedType = Undefined,
                    bfd: bool | None | UndefinedType = Undefined,
                    ptp: Ptp | UndefinedType = Undefined,
                    sflow: bool | None | UndefinedType = Undefined,
                    underlay_multicast: bool | None | UndefinedType = Undefined,
                    multicast_pim_sm: bool | None | UndefinedType = Undefined,
                    multicast_static: bool | None | UndefinedType = Undefined,
                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                    qos_profile: str | None | UndefinedType = Undefined,
                    macsec_profile: str | None | UndefinedType = Undefined,
                    port_channel: PortChannel | UndefinedType = Undefined,
                    campus_link_type: CampusLinkType | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    routing_protocol: Literal["ebgp"] | None | UndefinedType = Undefined,
                    structured_config: dict | UndefinedType = Undefined,
                    ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                    port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    P2pLinksItem.


                    Subclass of AvdModel.

                    Args:
                        nodes:
                           Nodes where this link should be configured.

                           Subclass of AvdList with `str` items.
                        profile: P2P profile name. Profile defined under p2p_profiles.
                        id:
                           Unique id per subnet_summary. Used to calculate ip addresses.
                           Required with ip_pool. ID starting
                           from 1.
                        speed:
                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                           <interface_speed>`.
                        ip_pool:
                           P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
                           link.
                        subnet: IPv4 address/Mask. Subnet used on this P2P link.
                        ip:
                           Specific IP addresses used on this P2P link.

                           Subclass of AvdList with `str` items.
                        ipv6_enable:
                           Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
                           include_in_underlay_protocol).
                        interfaces:
                           Interfaces where this link should be configured and Required unless using port-channels.

                           Subclass
                           of AvdList with `str` items.
                        field_as:
                           AS numbers for BGP.
                           Required with bgp peering.


                           Subclass of AvdList with `str` items.
                        descriptions:
                           Interface descriptions.

                           Subclass of AvdList with `str` items.
                        include_in_underlay_protocol: Add this interface to underlay routing protocol.
                        isis_hello_padding: isis_hello_padding
                        isis_metric: isis_metric
                        isis_circuit_type: isis_circuit_type
                        isis_authentication_mode: isis_authentication_mode
                        isis_authentication_key:
                           Type-7 encrypted password.
                           Takes precedence over 'underlay_isis_authentication_key',
                           'underlay_isis_authentication_cleartext_key'
                           and `isis_authentication_cleartext_key`.
                        isis_authentication_cleartext_key:
                           Cleartext password.
                           Encrypted to Type 7 by AVD.
                           Takes precedence over
                           'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
                           To protect the
                           password at rest it is strongly recommended to make use of a vault or similar.
                        isis_network_type: isis_network_type
                        mpls_ip: MPLS parameters. Default value is true if switch.mpls_lsr is true.
                        mpls_ldp: MPLS parameters. Default value is true for ldp underlay variants, otherwise false.
                        mtu: MTU for this P2P link. Default value same as p2p_uplinks_mtu.
                        bfd: Enable BFD (only considered for BGP).
                        ptp:
                           PTP parameters.

                           Subclass of AvdModel.
                        sflow: Enable sFlow. Overrides `fabric_sflow` setting.
                        underlay_multicast:
                           Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
                           to be `true`.

                           Note: The default value for this key is `false` when using either the new key
                           `underlay_multicast.pim_sm.enabled: true
                           or, if unset, global `underlay_multicast_pim_sm: true`
                        multicast_pim_sm:
                           Configure PIM sparse-mode on the P2P links.
                           Requires node setting
                           `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        multicast_static:
                           Configure static multicast on the P2P links.
                           Requires node setting
                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        flow_tracking:
                           Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

                           Subclass of AvdModel.
                        qos_profile: QOS service profile.
                        macsec_profile: MAC security profile.
                        port_channel:
                           Port-channel parameters.

                           Subclass of AvdModel.
                        campus_link_type:
                           PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                           change at any time.
                           Values for the CloudVision `Link-Type` user tags to be associated with an
                           interface.
                           Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                           in the same tags being associated with the parent Ethernet interface instead.
                           Attempting to
                           associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                           associated with the member Ethernet interfaces instead.

                           Subclass of AvdList with `str` items.
                        raw_eos_cli: EOS CLI rendered directly on the point-to-point interface in the final EOS configuration.
                        routing_protocol:
                           Enables deviation of the routing protocol used on this link from the fabric underlay default.
                           -
                           ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
                           configured.
                        structured_config:
                           Custom structured config for interfaces.
                           Note! The content of this dictionary is _not_ validated by
                           the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                        ethernet_structured_config: Custom structured config for ethernet interfaces.
                        port_channel_structured_config: Custom structured config for port-channel links.

                    """

        class P2pLinks(AvdList[P2pLinksItem]):
            """Subclass of AvdList with `P2pLinksItem` items."""

        P2pLinks._item_type = P2pLinksItem

        _fields: ClassVar[dict] = {
            "p2p_links_ip_pools": {"type": P2pLinksIpPools},
            "p2p_links_profiles": {"type": P2pLinksProfiles},
            "p2p_links": {"type": P2pLinks},
        }
        p2p_links_ip_pools: P2pLinksIpPools
        """Subclass of AvdIndexedList with `P2pLinksIpPoolsItem` items. Primary key is `name` (`str`)."""
        p2p_links_profiles: P2pLinksProfiles
        """Subclass of AvdIndexedList with `P2pLinksProfilesItem` items. Primary key is `name` (`str`)."""
        p2p_links: P2pLinks
        """Subclass of AvdList with `P2pLinksItem` items."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                p2p_links_ip_pools: P2pLinksIpPools | UndefinedType = Undefined,
                p2p_links_profiles: P2pLinksProfiles | UndefinedType = Undefined,
                p2p_links: P2pLinks | UndefinedType = Undefined,
            ) -> None:
                """
                CoreInterfaces.


                Subclass of AvdModel.

                Args:
                    p2p_links_ip_pools: Subclass of AvdIndexedList with `P2pLinksIpPoolsItem` items. Primary key is `name` (`str`).
                    p2p_links_profiles: Subclass of AvdIndexedList with `P2pLinksProfilesItem` items. Primary key is `name` (`str`).
                    p2p_links: Subclass of AvdList with `P2pLinksItem` items.

                """

    class CustomStructuredConfigurationPrefix(AvdList[str]):
        """Subclass of AvdList with `str` items."""

    CustomStructuredConfigurationPrefix._item_type = str

    class CvPathfinderGlobalSitesItem(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"name": {"type": str}, "description": {"type": str}, "location": {"type": str}}
        name: str
        """The site name."""
        description: str | None
        location: str | None
        """Location as a string is resolved on Cloudvision."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                location: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                CvPathfinderGlobalSitesItem.


                Subclass of AvdModel.

                Args:
                    name: The site name.
                    description: description
                    location: Location as a string is resolved on Cloudvision.

                """

    class CvPathfinderGlobalSites(AvdIndexedList[str, CvPathfinderGlobalSitesItem]):
        """Subclass of AvdIndexedList with `CvPathfinderGlobalSitesItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    CvPathfinderGlobalSites._item_type = CvPathfinderGlobalSitesItem

    class CvPathfinderInternetExitPoliciesItem(AvdModel):
        """Subclass of AvdModel."""

        class Zscaler(AvdModel):
            """Subclass of AvdModel."""

            class Firewall(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "ips": {"type": bool, "default": False}}
                enabled: bool
                """
                Enforce firewall controls.

                Default value: `False`
                """
                ips: bool
                """
                Enable IPS Controls for the firewall.

                Default value: `False`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, enabled: bool | UndefinedType = Undefined, ips: bool | UndefinedType = Undefined) -> None:
                        """
                        Firewall.


                        Subclass of AvdModel.

                        Args:
                            enabled: Enforce firewall controls.
                            ips: Enable IPS Controls for the firewall.

                        """

            _fields: ClassVar[dict] = {
                "ipsec_key_salt": {"type": str},
                "domain_name": {"type": str},
                "encrypt_traffic": {"type": bool, "default": True},
                "download_bandwidth": {"type": int},
                "upload_bandwidth": {"type": int},
                "firewall": {"type": Firewall},
                "acceptable_use_policy": {"type": bool, "default": False},
            }
            ipsec_key_salt: str
            """
            "Salt" used for auto generation of encryption keys for IPsec tunnels to Zscaler.
            The keys will be
            generated as a hash of `salt_<hostname>_<policy_name>`.
            Since this salt can be used to deduct the
            encryption key, it is recommended to use vault.
            """
            domain_name: str
            """Domain name as configured in Zscaler for the tenant. Used as UFQDN suffix for authentication."""
            encrypt_traffic: bool
            """
            When `true` the traffic going over the tunnels will be encrypted with AES-256-GCM. Otherwise the
            traffic will be using NULL encryption.
            Note that encryption requires a subscription on the Zscaler
            account.

            Default value: `True`
            """
            download_bandwidth: int | None
            """Maximum allowed download bandwidth in Mbps for each device using this policy."""
            upload_bandwidth: int | None
            """Maximum allowed upload bandwidth in Mbps for each device using this policy."""
            firewall: Firewall
            """Subclass of AvdModel."""
            acceptable_use_policy: bool
            """
            Display an Acceptable Use Policy (AUP) and require users to accept it.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ipsec_key_salt: str | UndefinedType = Undefined,
                    domain_name: str | UndefinedType = Undefined,
                    encrypt_traffic: bool | UndefinedType = Undefined,
                    download_bandwidth: int | None | UndefinedType = Undefined,
                    upload_bandwidth: int | None | UndefinedType = Undefined,
                    firewall: Firewall | UndefinedType = Undefined,
                    acceptable_use_policy: bool | UndefinedType = Undefined,
                ) -> None:
                    """
                    Zscaler.


                    Subclass of AvdModel.

                    Args:
                        ipsec_key_salt:
                           "Salt" used for auto generation of encryption keys for IPsec tunnels to Zscaler.
                           The keys will be
                           generated as a hash of `salt_<hostname>_<policy_name>`.
                           Since this salt can be used to deduct the
                           encryption key, it is recommended to use vault.
                        domain_name: Domain name as configured in Zscaler for the tenant. Used as UFQDN suffix for authentication.
                        encrypt_traffic:
                           When `true` the traffic going over the tunnels will be encrypted with AES-256-GCM. Otherwise the
                           traffic will be using NULL encryption.
                           Note that encryption requires a subscription on the Zscaler
                           account.
                        download_bandwidth: Maximum allowed download bandwidth in Mbps for each device using this policy.
                        upload_bandwidth: Maximum allowed upload bandwidth in Mbps for each device using this policy.
                        firewall: Subclass of AvdModel.
                        acceptable_use_policy: Display an Acceptable Use Policy (AUP) and require users to accept it.

                    """

        _fields: ClassVar[dict] = {
            "name": {"type": str},
            "type": {"type": str},
            "fallback_to_system_default": {"type": bool, "default": True},
            "zscaler": {"type": Zscaler},
        }
        name: str
        """Internet-exit policy name."""
        type: Literal["direct", "zscaler"]
        """
        Internet-exit policy type.
        direct: Exit directly over wan interfaces
        zscaler: Exit using Zscaler
        secure web gateway service
        """
        fallback_to_system_default: bool
        """
        Add system default exit-group at the end of the policy.

        Default value: `True`
        """
        zscaler: Zscaler
        """
        Zscaler information. Only used if `type` is 'zscaler'.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                type: Literal["direct", "zscaler"] | UndefinedType = Undefined,
                fallback_to_system_default: bool | UndefinedType = Undefined,
                zscaler: Zscaler | UndefinedType = Undefined,
            ) -> None:
                """
                CvPathfinderInternetExitPoliciesItem.


                Subclass of AvdModel.

                Args:
                    name: Internet-exit policy name.
                    type:
                       Internet-exit policy type.
                       direct: Exit directly over wan interfaces
                       zscaler: Exit using Zscaler
                       secure web gateway service
                    fallback_to_system_default: Add system default exit-group at the end of the policy.
                    zscaler:
                       Zscaler information. Only used if `type` is 'zscaler'.

                       Subclass of AvdModel.

                """

    class CvPathfinderInternetExitPolicies(AvdIndexedList[str, CvPathfinderInternetExitPoliciesItem]):
        """
        Subclass of AvdIndexedList with `CvPathfinderInternetExitPoliciesItem` items. Primary key is `name`
        (`str`).
        """

        _primary_key: ClassVar[str] = "name"

    CvPathfinderInternetExitPolicies._item_type = CvPathfinderInternetExitPoliciesItem

    class CvPathfinderRegionsItem(AvdModel):
        """Subclass of AvdModel."""

        class SitesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "description": {"type": str},
                "id": {"type": int},
                "location": {"type": str},
                "site_contact": {"type": str},
                "site_after_hours_contact": {"type": str},
            }
            name: str
            """The site name."""
            description: str | None
            id: int
            """
            The site ID must be unique within a zone.
            Given that all the sites are placed in a zone named after
            the region, the site ID must be unique within a region.
            """
            location: str | None
            """Location as a string is resolved on Cloudvision."""
            site_contact: str | None
            site_after_hours_contact: str | None

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    description: str | None | UndefinedType = Undefined,
                    id: int | UndefinedType = Undefined,
                    location: str | None | UndefinedType = Undefined,
                    site_contact: str | None | UndefinedType = Undefined,
                    site_after_hours_contact: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    SitesItem.


                    Subclass of AvdModel.

                    Args:
                        name: The site name.
                        description: description
                        id:
                           The site ID must be unique within a zone.
                           Given that all the sites are placed in a zone named after
                           the region, the site ID must be unique within a region.
                        location: Location as a string is resolved on Cloudvision.
                        site_contact: site_contact
                        site_after_hours_contact: site_after_hours_contact

                    """

        class Sites(AvdIndexedList[str, SitesItem]):
            """Subclass of AvdIndexedList with `SitesItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Sites._item_type = SitesItem

        _fields: ClassVar[dict] = {"name": {"type": str}, "description": {"type": str}, "id": {"type": int}, "sites": {"type": Sites}}
        name: str
        description: str | None
        id: int
        """The region ID must be unique for the whole WAN deployment."""
        sites: Sites
        """
        All sites are placed in a default zone "<region_name>-ZONE" with ID 1.

        Subclass of AvdIndexedList
        with `SitesItem` items. Primary key is `name` (`str`).
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                id: int | UndefinedType = Undefined,
                sites: Sites | UndefinedType = Undefined,
            ) -> None:
                """
                CvPathfinderRegionsItem.


                Subclass of AvdModel.

                Args:
                    name: name
                    description: description
                    id: The region ID must be unique for the whole WAN deployment.
                    sites:
                       All sites are placed in a default zone "<region_name>-ZONE" with ID 1.

                       Subclass of AvdIndexedList
                       with `SitesItem` items. Primary key is `name` (`str`).

                """

    class CvPathfinderRegions(AvdIndexedList[str, CvPathfinderRegionsItem]):
        """Subclass of AvdIndexedList with `CvPathfinderRegionsItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    CvPathfinderRegions._item_type = CvPathfinderRegionsItem

    class CvSettings(AvdModel):
        """Subclass of AvdModel."""

        class Cvaas(AvdModel):
            """Subclass of AvdModel."""

            class ClustersItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "name": {"type": str},
                    "region": {"type": str, "default": "auto"},
                    "vrf": {"type": str, "default": "use_default_mgmt_method_vrf"},
                    "token_file": {"type": str, "default": "/tmp/cv-onboarding-token"},
                    "source_interface": {"type": str},
                }
                name: str
                """Short name for the CVaaS cluster. Required here, but only used when configuring multiple clusters."""
                region: Literal[
                    "auto",
                    "us-central1-a",
                    "us-central1-b",
                    "us-central1-c",
                    "apnortheast-1",
                    "euwest-2",
                    "ausoutheast-1",
                    "na-northeast1-b",
                    "uk-1",
                    "india-1",
                    "staging",
                    "dev",
                    "play",
                ]
                """
                Optionally set the region to stream to.
                The "auto" region will use 'apiserver.arista.io:443' which
                will redirect to the correct region based on the device's serial number.
                "staging", "dev" and "play"
                are for internal Arista use.

                Default value: `"auto"`
                """
                vrf: str
                """
                The VRF used to connect to CloudVision.
                The value will be interpreted according to these rules:
                -
                `use_mgmt_interface_vrf` will configure the VRF set with `mgmt_interface_vrf` and configure the
                `mgmt_interface` as the source interface.
                  An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip`
                are not configured for the device.
                - `use_inband_mgmt_vrf` will configure the VRF set with
                `inband_mgmt_vrf` and configure the `inband_mgmt_interface` as the source interface.
                  An error will
                be raised if inband management is not configured for the device.
                - `use_default_mgmt_method_vrf`
                will configure the VRF and source-interface for one of the two options above depending on the value
                of `default_mgmt_method`.
                - Any other string will be used directly as the VRF name.

                Default value: `"use_default_mgmt_method_vrf"`
                """
                token_file: str
                """
                Path to the onboarding token used for certificate based authentication.
                The path is on the EOS
                device and the token file must be copied to the device first.

                Default value: `"/tmp/cv-onboarding-token"`
                """
                source_interface: str | None
                """
                Source-interface used to connect to CloudVision.
                If not set, the source interface may be set
                automatically when VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf` or
                `use_default_mgmt_method_vrf`.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        name: str | UndefinedType = Undefined,
                        region: Literal[
                            "auto",
                            "us-central1-a",
                            "us-central1-b",
                            "us-central1-c",
                            "apnortheast-1",
                            "euwest-2",
                            "ausoutheast-1",
                            "na-northeast1-b",
                            "uk-1",
                            "india-1",
                            "staging",
                            "dev",
                            "play",
                        ]
                        | UndefinedType = Undefined,
                        vrf: str | UndefinedType = Undefined,
                        token_file: str | UndefinedType = Undefined,
                        source_interface: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        ClustersItem.


                        Subclass of AvdModel.

                        Args:
                            name: Short name for the CVaaS cluster. Required here, but only used when configuring multiple clusters.
                            region:
                               Optionally set the region to stream to.
                               The "auto" region will use 'apiserver.arista.io:443' which
                               will redirect to the correct region based on the device's serial number.
                               "staging", "dev" and "play"
                               are for internal Arista use.
                            vrf:
                               The VRF used to connect to CloudVision.
                               The value will be interpreted according to these rules:
                               -
                               `use_mgmt_interface_vrf` will configure the VRF set with `mgmt_interface_vrf` and configure the
                               `mgmt_interface` as the source interface.
                                 An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip`
                               are not configured for the device.
                               - `use_inband_mgmt_vrf` will configure the VRF set with
                               `inband_mgmt_vrf` and configure the `inband_mgmt_interface` as the source interface.
                                 An error will
                               be raised if inband management is not configured for the device.
                               - `use_default_mgmt_method_vrf`
                               will configure the VRF and source-interface for one of the two options above depending on the value
                               of `default_mgmt_method`.
                               - Any other string will be used directly as the VRF name.
                            token_file:
                               Path to the onboarding token used for certificate based authentication.
                               The path is on the EOS
                               device and the token file must be copied to the device first.
                            source_interface:
                               Source-interface used to connect to CloudVision.
                               If not set, the source interface may be set
                               automatically when VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf` or
                               `use_default_mgmt_method_vrf`.

                        """

            class Clusters(AvdIndexedList[str, ClustersItem]):
                """Subclass of AvdIndexedList with `ClustersItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Clusters._item_type = ClustersItem

            _fields: ClassVar[dict] = {
                "enabled": {"type": bool},
                "clusters": {"type": Clusters, "default": lambda cls: coerce_type([{"name": "cvaas"}], target_type=cls)},
            }
            enabled: bool
            """
            Enable streaming to CVaaS.
            When enabled it will stream to 'apiserver.arista.io:443' using the VRF
            obtained from `default_mgmt_method` unless overridden under `clusters`.
            """
            clusters: Clusters
            """
            Subclass of AvdIndexedList with `ClustersItem` items. Primary key is `name` (`str`).

            Default value: `lambda cls: coerce_type([{"name": "cvaas"}], target_type=cls)`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, clusters: Clusters | UndefinedType = Undefined) -> None:
                    """
                    Cvaas.


                    Subclass of AvdModel.

                    Args:
                        enabled:
                           Enable streaming to CVaaS.
                           When enabled it will stream to 'apiserver.arista.io:443' using the VRF
                           obtained from `default_mgmt_method` unless overridden under `clusters`.
                        clusters: Subclass of AvdIndexedList with `ClustersItem` items. Primary key is `name` (`str`).

                    """

        class OnpremClustersItem(AvdModel):
            """Subclass of AvdModel."""

            class ServersItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"name": {"type": str}, "port": {"type": int, "default": 9910}}
                name: str
                """Server FQDN or IP address."""
                port: int
                """Default value: `9910`"""

                if TYPE_CHECKING:

                    def __init__(self, *, name: str | UndefinedType = Undefined, port: int | UndefinedType = Undefined) -> None:
                        """
                        ServersItem.


                        Subclass of AvdModel.

                        Args:
                            name: Server FQDN or IP address.
                            port: port

                        """

            class Servers(AvdIndexedList[str, ServersItem]):
                """Subclass of AvdIndexedList with `ServersItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Servers._item_type = ServersItem

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "servers": {"type": Servers},
                "vrf": {"type": str, "default": "use_default_mgmt_method_vrf"},
                "token_file": {"type": str, "default": "/tmp/token"},
                "source_interface": {"type": str},
            }
            name: str
            """Short name for the cluster. Required here, but only used when configuring multiple clusters."""
            servers: Servers
            """
            CloudVision servers that makes up one cluster.

            Subclass of AvdIndexedList with `ServersItem` items.
            Primary key is `name` (`str`).
            """
            vrf: str
            """
            The VRF used to connect to CloudVision.
            The value will be interpreted according to these rules:
            -
            `use_mgmt_interface_vrf` will configure the VRF set with `mgmt_interface_vrf` and configure the
            `mgmt_interface` as the source interface.
              An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip`
            are not configured for the device.
            - `use_inband_mgmt_vrf` will configure the VRF set with
            `inband_mgmt_vrf` and configure the `inband_mgmt_interface` as the source interface.
              An error will
            be raised if inband management is not configured for the device.
            - `use_default_mgmt_method_vrf`
            will configure the VRF and source-interface for one of the two options above depending on the value
            of `default_mgmt_method`.
            - Any other string will be used directly as the VRF name.

            Default value: `"use_default_mgmt_method_vrf"`
            """
            token_file: str
            """
            Path to the onboarding token used for certificate based authentication.
            The path is on the EOS
            device and the token file must be copied to the device first.

            Default value: `"/tmp/token"`
            """
            source_interface: str | None
            """
            Source-interface used to connect to CloudVision.
            If not set, the source interface may be set
            automatically when VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf` or
            `use_default_mgmt_method_vrf`.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    servers: Servers | UndefinedType = Undefined,
                    vrf: str | UndefinedType = Undefined,
                    token_file: str | UndefinedType = Undefined,
                    source_interface: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    OnpremClustersItem.


                    Subclass of AvdModel.

                    Args:
                        name: Short name for the cluster. Required here, but only used when configuring multiple clusters.
                        servers:
                           CloudVision servers that makes up one cluster.

                           Subclass of AvdIndexedList with `ServersItem` items.
                           Primary key is `name` (`str`).
                        vrf:
                           The VRF used to connect to CloudVision.
                           The value will be interpreted according to these rules:
                           -
                           `use_mgmt_interface_vrf` will configure the VRF set with `mgmt_interface_vrf` and configure the
                           `mgmt_interface` as the source interface.
                             An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip`
                           are not configured for the device.
                           - `use_inband_mgmt_vrf` will configure the VRF set with
                           `inband_mgmt_vrf` and configure the `inband_mgmt_interface` as the source interface.
                             An error will
                           be raised if inband management is not configured for the device.
                           - `use_default_mgmt_method_vrf`
                           will configure the VRF and source-interface for one of the two options above depending on the value
                           of `default_mgmt_method`.
                           - Any other string will be used directly as the VRF name.
                        token_file:
                           Path to the onboarding token used for certificate based authentication.
                           The path is on the EOS
                           device and the token file must be copied to the device first.
                        source_interface:
                           Source-interface used to connect to CloudVision.
                           If not set, the source interface may be set
                           automatically when VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf` or
                           `use_default_mgmt_method_vrf`.

                    """

        class OnpremClusters(AvdIndexedList[str, OnpremClustersItem]):
            """Subclass of AvdIndexedList with `OnpremClustersItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        OnpremClusters._item_type = OnpremClustersItem

        class Terminattr(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "ingestexclude": {"type": str},
                "smashexcludes": {"type": str, "default": "ale,flexCounter,hardware,kni,pulse,strata"},
                "disable_aaa": {"type": bool, "default": False},
            }
            ingestexclude: str | None
            """
            Exclude paths from Sysdb on the ingest side.
            e.g. "/Sysdb/cell/1/agent,/Sysdb/cell/2/agent"
            """
            smashexcludes: str
            """
            Exclude paths from the shared memory table.
            e.g. "ale,flexCounter,hardware,kni,pulse,strata"

            Default value: `"ale,flexCounter,hardware,kni,pulse,strata"`
            """
            disable_aaa: bool
            """
            Disable AAA authorization and accounting.
            When setting this flag, all commands pushed from
            CloudVision are applied directly to the CLI without authorization.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ingestexclude: str | None | UndefinedType = Undefined,
                    smashexcludes: str | UndefinedType = Undefined,
                    disable_aaa: bool | UndefinedType = Undefined,
                ) -> None:
                    """
                    Terminattr.


                    Subclass of AvdModel.

                    Args:
                        ingestexclude:
                           Exclude paths from Sysdb on the ingest side.
                           e.g. "/Sysdb/cell/1/agent,/Sysdb/cell/2/agent"
                        smashexcludes:
                           Exclude paths from the shared memory table.
                           e.g. "ale,flexCounter,hardware,kni,pulse,strata"
                        disable_aaa:
                           Disable AAA authorization and accounting.
                           When setting this flag, all commands pushed from
                           CloudVision are applied directly to the CLI without authorization.

                    """

        _fields: ClassVar[dict] = {
            "cvaas": {"type": Cvaas},
            "onprem_clusters": {"type": OnpremClusters},
            "terminattr": {"type": Terminattr},
            "set_source_interfaces": {"type": bool, "default": True},
        }
        cvaas: Cvaas
        """
        State streaming to CloudVision-as-a-Service.

        Subclass of AvdModel.
        """
        onprem_clusters: OnpremClusters
        """
        On-premise CloudVision clusters.

        Subclass of AvdIndexedList with `OnpremClustersItem` items.
        Primary key is `name` (`str`).
        """
        terminattr: Terminattr
        """
        Specific settings for the TerminAttr daemon.

        Subclass of AvdModel.
        """
        set_source_interfaces: bool
        """
        Automatically set source interface when VRF is set to `use_mgmt_interface_vrf`,
        `use_inband_mgmt_vrf` or `use_default_mgmt_method_vrf`.
        Can be set to `false` to avoid changes when
        migrating from the old `cv_instances` model.

        Default value: `True`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                cvaas: Cvaas | UndefinedType = Undefined,
                onprem_clusters: OnpremClusters | UndefinedType = Undefined,
                terminattr: Terminattr | UndefinedType = Undefined,
                set_source_interfaces: bool | UndefinedType = Undefined,
            ) -> None:
                """
                CvSettings.


                Subclass of AvdModel.

                Args:
                    cvaas:
                       State streaming to CloudVision-as-a-Service.

                       Subclass of AvdModel.
                    onprem_clusters:
                       On-premise CloudVision clusters.

                       Subclass of AvdIndexedList with `OnpremClustersItem` items.
                       Primary key is `name` (`str`).
                    terminattr:
                       Specific settings for the TerminAttr daemon.

                       Subclass of AvdModel.
                    set_source_interfaces:
                       Automatically set source interface when VRF is set to `use_mgmt_interface_vrf`,
                       `use_inband_mgmt_vrf` or `use_default_mgmt_method_vrf`.
                       Can be set to `false` to avoid changes when
                       migrating from the old `cv_instances` model.

                """

    class CvTopologyItem(AvdModel):
        """Subclass of AvdModel."""

        class InterfacesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "neighbor": {"type": str}, "neighbor_interface": {"type": str}}
            name: str
            neighbor: str | None
            neighbor_interface: str | None

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    neighbor: str | None | UndefinedType = Undefined,
                    neighbor_interface: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    InterfacesItem.


                    Subclass of AvdModel.

                    Args:
                        name: name
                        neighbor: neighbor
                        neighbor_interface: neighbor_interface

                    """

        class Interfaces(AvdIndexedList[str, InterfacesItem]):
            """Subclass of AvdIndexedList with `InterfacesItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Interfaces._item_type = InterfacesItem

        _fields: ClassVar[dict] = {"hostname": {"type": str}, "platform": {"type": str}, "interfaces": {"type": Interfaces}}
        hostname: str
        platform: str
        interfaces: Interfaces
        """Subclass of AvdIndexedList with `InterfacesItem` items. Primary key is `name` (`str`)."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                hostname: str | UndefinedType = Undefined,
                platform: str | UndefinedType = Undefined,
                interfaces: Interfaces | UndefinedType = Undefined,
            ) -> None:
                """
                CvTopologyItem.


                Subclass of AvdModel.

                Args:
                    hostname: hostname
                    platform: platform
                    interfaces: Subclass of AvdIndexedList with `InterfacesItem` items. Primary key is `name` (`str`).

                """

    class CvTopology(AvdIndexedList[str, CvTopologyItem]):
        """Subclass of AvdIndexedList with `CvTopologyItem` items. Primary key is `hostname` (`str`)."""

        _primary_key: ClassVar[str] = "hostname"

    CvTopology._item_type = CvTopologyItem

    class CvpInstanceIps(AvdList[str]):
        """Subclass of AvdList with `str` items."""

    CvpInstanceIps._item_type = str

    class DefaultInterfacesItem(AvdModel):
        """Subclass of AvdModel."""

        class Types(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Types._item_type = str

        class Platforms(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Platforms._item_type = str

        class UplinkInterfaces(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        UplinkInterfaces._item_type = str

        class MlagInterfaces(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        MlagInterfaces._item_type = str

        class DownlinkInterfaces(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        DownlinkInterfaces._item_type = str

        _fields: ClassVar[dict] = {
            "types": {"type": Types},
            "platforms": {"type": Platforms},
            "uplink_interfaces": {"type": UplinkInterfaces},
            "mlag_interfaces": {"type": MlagInterfaces},
            "mlag_interfaces_speed": {"type": str},
            "downlink_interfaces": {"type": DownlinkInterfaces},
            "uplink_interface_speed": {"type": str},
        }
        types: Types
        """
        List of node type keys.

        Subclass of AvdList with `str` items.
        """
        platforms: Platforms
        """
        List of platform families.
        This is defined as a Python regular expression that matches the full
        platform type.


        Subclass of AvdList with `str` items.
        """
        uplink_interfaces: UplinkInterfaces
        """
        List of uplink interfaces or uplink interface ranges.

        Subclass of AvdList with `str` items.
        """
        mlag_interfaces: MlagInterfaces
        """
        List of MLAG interfaces or MLAG interface ranges.

        Subclass of AvdList with `str` items.
        """
        mlag_interfaces_speed: str | None
        """
        Set MLAG interfaces speed.
        Speed should be set in the format `<interface_speed>` or `forced
        <interface_speed>` or `auto <interface_speed>`.
        """
        downlink_interfaces: DownlinkInterfaces
        """
        List of downlink interfaces or downlink interface ranges.

        Subclass of AvdList with `str` items.
        """
        uplink_interface_speed: str | None
        """Set point-to-Point uplink interface speed."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                types: Types | UndefinedType = Undefined,
                platforms: Platforms | UndefinedType = Undefined,
                uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                downlink_interfaces: DownlinkInterfaces | UndefinedType = Undefined,
                uplink_interface_speed: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                DefaultInterfacesItem.


                Subclass of AvdModel.

                Args:
                    types:
                       List of node type keys.

                       Subclass of AvdList with `str` items.
                    platforms:
                       List of platform families.
                       This is defined as a Python regular expression that matches the full
                       platform type.


                       Subclass of AvdList with `str` items.
                    uplink_interfaces:
                       List of uplink interfaces or uplink interface ranges.

                       Subclass of AvdList with `str` items.
                    mlag_interfaces:
                       List of MLAG interfaces or MLAG interface ranges.

                       Subclass of AvdList with `str` items.
                    mlag_interfaces_speed:
                       Set MLAG interfaces speed.
                       Speed should be set in the format `<interface_speed>` or `forced
                       <interface_speed>` or `auto <interface_speed>`.
                    downlink_interfaces:
                       List of downlink interfaces or downlink interface ranges.

                       Subclass of AvdList with `str` items.
                    uplink_interface_speed: Set point-to-Point uplink interface speed.

                """

    class DefaultInterfaces(AvdList[DefaultInterfacesItem]):
        """Subclass of AvdList with `DefaultInterfacesItem` items."""

    DefaultInterfaces._item_type = DefaultInterfacesItem

    class DefaultNodeTypesItem(AvdModel):
        """Subclass of AvdModel."""

        class MatchHostnames(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        MatchHostnames._item_type = str

        _fields: ClassVar[dict] = {"node_type": {"type": str}, "match_hostnames": {"type": MatchHostnames}}
        node_type: str
        """Resulting node type when regex matches."""
        match_hostnames: MatchHostnames
        """
        Regular expressions to match against hostnames.

        Subclass of AvdList with `str` items.
        """

        if TYPE_CHECKING:

            def __init__(self, *, node_type: str | UndefinedType = Undefined, match_hostnames: MatchHostnames | UndefinedType = Undefined) -> None:
                """
                DefaultNodeTypesItem.


                Subclass of AvdModel.

                Args:
                    node_type: Resulting node type when regex matches.
                    match_hostnames:
                       Regular expressions to match against hostnames.

                       Subclass of AvdList with `str` items.

                """

    class DefaultNodeTypes(AvdIndexedList[str, DefaultNodeTypesItem]):
        """Subclass of AvdIndexedList with `DefaultNodeTypesItem` items. Primary key is `node_type` (`str`)."""

        _primary_key: ClassVar[str] = "node_type"

    DefaultNodeTypes._item_type = DefaultNodeTypesItem

    class Design(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"type": {"type": str, "default": "l3ls-evpn"}}
        type: Literal["l3ls-evpn", "mpls", "l2ls"]
        """
        By setting the design.type variable, the default node-types and templates described in these
        documents will be used.

        Default value: `"l3ls-evpn"`
        """

        if TYPE_CHECKING:

            def __init__(self, *, type: Literal["l3ls-evpn", "mpls", "l2ls"] | UndefinedType = Undefined) -> None:
                """
                Design.


                Subclass of AvdModel.

                Args:
                    type:
                       By setting the design.type variable, the default node-types and templates described in these
                       documents will be used.

                """

    class DigitalTwin(AvdModel):
        """Subclass of AvdModel."""

        class Fabric(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "act_os_version": {"type": str},
                "act_username": {"type": str, "default": "cvpadmin"},
                "act_password": {"type": str, "default": "cvp123!"},
                "act_internet_access": {"type": bool, "default": False},
                "act_ensure_eapi_access": {"type": bool, "default": False},
            }
            act_os_version: str | None
            """OS version for ACT Digital Twin fabric devices."""
            act_username: str
            """
            Username for ACT Digital Twin fabric devices.

            Default value: `"cvpadmin"`
            """
            act_password: str
            """
            Cleartext password for ACT Digital Twin fabric devices.

            Default value: `"cvp123!"`
            """
            act_internet_access: bool
            """
            Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
            This option
            applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
            types.
            ACT does not provide direct Internet access to cloudeos or veos devices by default.

            Default value: `False`
            """
            act_ensure_eapi_access: bool
            """
            Ensures eAPI remains accessible for automation and testing via ACT.
            Clients connecting to device
            eAPI though ACT rely on access in the default VRF. If eAPI is reconfigured for a dedicated
            management VRF, this primary eAPI connectivity can be unintentionally broken.
            Set this to `true` to
            enforce the required EOS configuration, guaranteeing eAPI over HTTPS is always enabled in the
            default VRF and preserving this connectivity.
            This setting is only applicable to ACT `veos` and
            `cloudeos` node types.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    act_os_version: str | None | UndefinedType = Undefined,
                    act_username: str | UndefinedType = Undefined,
                    act_password: str | UndefinedType = Undefined,
                    act_internet_access: bool | UndefinedType = Undefined,
                    act_ensure_eapi_access: bool | UndefinedType = Undefined,
                ) -> None:
                    """
                    Fabric.


                    Subclass of AvdModel.

                    Args:
                        act_os_version: OS version for ACT Digital Twin fabric devices.
                        act_username: Username for ACT Digital Twin fabric devices.
                        act_password: Cleartext password for ACT Digital Twin fabric devices.
                        act_internet_access:
                           Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                           This option
                           applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                           types.
                           ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        act_ensure_eapi_access:
                           Ensures eAPI remains accessible for automation and testing via ACT.
                           Clients connecting to device
                           eAPI though ACT rely on access in the default VRF. If eAPI is reconfigured for a dedicated
                           management VRF, this primary eAPI connectivity can be unintentionally broken.
                           Set this to `true` to
                           enforce the required EOS configuration, guaranteeing eAPI over HTTPS is always enabled in the
                           default VRF and preserving this connectivity.
                           This setting is only applicable to ACT `veos` and
                           `cloudeos` node types.

                    """

        _fields: ClassVar[dict] = {
            "environment": {"type": str, "default": "act"},
            "fabric": {"type": Fabric},
            "use_default_interfaces_of_digital_twin_platform": {"type": bool, "default": False},
        }
        environment: Literal["act"]
        """
        Targeted Digital Twin environment.

        Default value: `"act"`
        """
        fabric: Fabric
        """
        Settings for Digital Twin fabric devices.

        Subclass of AvdModel.
        """
        use_default_interfaces_of_digital_twin_platform: bool
        """
        In Digital Twin mode, AVD can either use the default interfaces of the original or the digital twin
        platform (as set in `platform_settings.[].digital_twin.platform`).

        Default value: `False`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                environment: Literal["act"] | UndefinedType = Undefined,
                fabric: Fabric | UndefinedType = Undefined,
                use_default_interfaces_of_digital_twin_platform: bool | UndefinedType = Undefined,
            ) -> None:
                """
                DigitalTwin.


                Subclass of AvdModel.

                Args:
                    environment: Targeted Digital Twin environment.
                    fabric:
                       Settings for Digital Twin fabric devices.

                       Subclass of AvdModel.
                    use_default_interfaces_of_digital_twin_platform:
                       In Digital Twin mode, AVD can either use the default interfaces of the original or the digital twin
                       platform (as set in `platform_settings.[].digital_twin.platform`).

                """

    class DnsSettings(AvdModel):
        """Subclass of AvdModel."""

        class ServersItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"vrf": {"type": str, "default": "use_default_mgmt_method_vrf"}, "ip_address": {"type": str}, "priority": {"type": int}}
            vrf: str
            """
            The value of `vrf` will be interpreted according to these rules:
            - `use_mgmt_interface_vrf` will
            configure the DNS server under the VRF set with `mgmt_interface_vrf` and set the `mgmt_interface` as
            DNS lookup source-interface.
              An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip` are not
            configured for the device.
            - `use_inband_mgmt_vrf` will configure the DNS server under the VRF set
            with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as DNS lookup source-interface.
              An
            error will be raised if inband management is not configured for the device.
            -
            `use_default_mgmt_method_vrf` will configure the VRF and source-interface for one of the two options
            above depending on the value of `default_mgmt_method`.
            - Any other string will be used directly as
            the VRF name. Remember to set the `dns_settings.vrfs[].source_interface` if needed.

            Default value: `"use_default_mgmt_method_vrf"`
            """
            ip_address: str
            """IPv4 or IPv6 address for DNS server."""
            priority: int | None
            """Priority value (lower is first)."""

            if TYPE_CHECKING:

                def __init__(
                    self, *, vrf: str | UndefinedType = Undefined, ip_address: str | UndefinedType = Undefined, priority: int | None | UndefinedType = Undefined
                ) -> None:
                    """
                    ServersItem.


                    Subclass of AvdModel.

                    Args:
                        vrf:
                           The value of `vrf` will be interpreted according to these rules:
                           - `use_mgmt_interface_vrf` will
                           configure the DNS server under the VRF set with `mgmt_interface_vrf` and set the `mgmt_interface` as
                           DNS lookup source-interface.
                             An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip` are not
                           configured for the device.
                           - `use_inband_mgmt_vrf` will configure the DNS server under the VRF set
                           with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as DNS lookup source-interface.
                             An
                           error will be raised if inband management is not configured for the device.
                           -
                           `use_default_mgmt_method_vrf` will configure the VRF and source-interface for one of the two options
                           above depending on the value of `default_mgmt_method`.
                           - Any other string will be used directly as
                           the VRF name. Remember to set the `dns_settings.vrfs[].source_interface` if needed.
                        ip_address: IPv4 or IPv6 address for DNS server.
                        priority: Priority value (lower is first).

                    """

        class Servers(AvdList[ServersItem]):
            """Subclass of AvdList with `ServersItem` items."""

        Servers._item_type = ServersItem

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "source_interface": {"type": str}}
            name: str
            """VRF name."""
            source_interface: str | None
            """
            Source interface to use for DNS lookups in this VRF.
            If set for the VRFs defined by
            `mgmt_interface_vrf` or `inband_mgmt_vrf`, this setting will take precedence.
            """

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined, source_interface: str | None | UndefinedType = Undefined) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name: VRF name.
                        source_interface:
                           Source interface to use for DNS lookups in this VRF.
                           If set for the VRFs defined by
                           `mgmt_interface_vrf` or `inband_mgmt_vrf`, this setting will take precedence.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        _fields: ClassVar[dict] = {
            "domain": {"type": str},
            "servers": {"type": Servers},
            "vrfs": {"type": Vrfs},
            "set_source_interfaces": {"type": bool, "default": True},
        }
        domain: str | None
        """DNS domain name like 'fabric.local'"""
        servers: Servers
        """Subclass of AvdList with `ServersItem` items."""
        vrfs: Vrfs
        """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""
        set_source_interfaces: bool
        """
        Automatically set source interface when VRF is set to `use_mgmt_interface_vrf`,
        `use_inband_mgmt_vrf` or `use_default_mgmt_method_vrf`.
        Can be set to `false` to avoid changes when
        migrating from the old `name_servers` model.

        Default value: `True`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                domain: str | None | UndefinedType = Undefined,
                servers: Servers | UndefinedType = Undefined,
                vrfs: Vrfs | UndefinedType = Undefined,
                set_source_interfaces: bool | UndefinedType = Undefined,
            ) -> None:
                """
                DnsSettings.


                Subclass of AvdModel.

                Args:
                    domain: DNS domain name like 'fabric.local'
                    servers: Subclass of AvdList with `ServersItem` items.
                    vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).
                    set_source_interfaces:
                       Automatically set source interface when VRF is set to `use_mgmt_interface_vrf`,
                       `use_inband_mgmt_vrf` or `use_default_mgmt_method_vrf`.
                       Can be set to `false` to avoid changes when
                       migrating from the old `name_servers` model.

                """

    class EosDesignsCustomTemplatesItem(AvdModel):
        """Subclass of AvdModel."""

        class Options(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"list_merge": {"type": str, "default": "append_rp"}, "strip_empty_keys": {"type": bool, "default": True}}
            list_merge: str
            """
            Merge strategy for lists.

            Default value: `"append_rp"`
            """
            strip_empty_keys: bool
            """
            Filter out keys from the generated output if value is null/none/undefined.

            Default value: `True`
            """

            if TYPE_CHECKING:

                def __init__(self, *, list_merge: str | UndefinedType = Undefined, strip_empty_keys: bool | UndefinedType = Undefined) -> None:
                    """
                    Options.


                    Subclass of AvdModel.

                    Args:
                        list_merge: Merge strategy for lists.
                        strip_empty_keys: Filter out keys from the generated output if value is null/none/undefined.

                    """

        _fields: ClassVar[dict] = {"template": {"type": str}, "options": {"type": Options}}
        template: str
        """Template file."""
        options: Options
        """
        Template options.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(self, *, template: str | UndefinedType = Undefined, options: Options | UndefinedType = Undefined) -> None:
                """
                EosDesignsCustomTemplatesItem.


                Subclass of AvdModel.

                Args:
                    template: Template file.
                    options:
                       Template options.

                       Subclass of AvdModel.

                """

    class EosDesignsCustomTemplates(AvdList[EosDesignsCustomTemplatesItem]):
        """Subclass of AvdList with `EosDesignsCustomTemplatesItem` items."""

    EosDesignsCustomTemplates._item_type = EosDesignsCustomTemplatesItem

    class EosDesignsDocumentation(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "enable": {"type": bool, "default": True},
            "connected_endpoints": {"type": bool, "default": False},
            "topology_csv": {"type": bool, "default": False},
            "p2p_links_csv": {"type": bool, "default": False},
            "toc": {"type": bool, "default": True},
        }
        enable: bool
        """
        Generate fabric-wide documentation.

        Default value: `True`
        """
        connected_endpoints: bool
        """
        Include connected endpoints in the fabric-wide documentation.
        This is `false` by default to avoid
        cluttering documentation for projects with thousands of endpoints.

        Default value: `False`
        """
        topology_csv: bool
        """
        Generate Topology CSV with all interfaces towards other devices.

        Default value: `False`
        """
        p2p_links_csv: bool
        """
        Generate P2P links CSV with all routed point-to-point links between devices.

        Default value: `False`
        """
        toc: bool
        """
        Generate the table of content(TOC) on fabric documentation.

        Default value: `True`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enable: bool | UndefinedType = Undefined,
                connected_endpoints: bool | UndefinedType = Undefined,
                topology_csv: bool | UndefinedType = Undefined,
                p2p_links_csv: bool | UndefinedType = Undefined,
                toc: bool | UndefinedType = Undefined,
            ) -> None:
                """
                EosDesignsDocumentation.


                Subclass of AvdModel.

                Args:
                    enable: Generate fabric-wide documentation.
                    connected_endpoints:
                       Include connected endpoints in the fabric-wide documentation.
                       This is `false` by default to avoid
                       cluttering documentation for projects with thousands of endpoints.
                    topology_csv: Generate Topology CSV with all interfaces towards other devices.
                    p2p_links_csv: Generate P2P links CSV with all routed point-to-point links between devices.
                    toc: Generate the table of content(TOC) on fabric documentation.

                """

    class EvpnHostflapDetection(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "enabled": {"type": bool, "default": True},
            "threshold": {"type": int, "default": 5},
            "window": {"type": int, "default": 180},
            "expiry_timeout": {"type": int},
        }
        enabled: bool
        """
        If set to false it will disable EVPN host-flap detection.

        Default value: `True`
        """
        threshold: int
        """
        Minimum number of MAC moves that indicate a MAC duplication issue.

        Default value: `5`
        """
        window: int
        """
        Time (in seconds) to detect a MAC duplication issue.

        Default value: `180`
        """
        expiry_timeout: int | None
        """Time (in seconds) to purge a MAC duplication issue."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enabled: bool | UndefinedType = Undefined,
                threshold: int | UndefinedType = Undefined,
                window: int | UndefinedType = Undefined,
                expiry_timeout: int | None | UndefinedType = Undefined,
            ) -> None:
                """
                EvpnHostflapDetection.


                Subclass of AvdModel.

                Args:
                    enabled: If set to false it will disable EVPN host-flap detection.
                    threshold: Minimum number of MAC moves that indicate a MAC duplication issue.
                    window: Time (in seconds) to detect a MAC duplication issue.
                    expiry_timeout: Time (in seconds) to purge a MAC duplication issue.

                """

    class EvpnVlanBundlesItem(AvdModel):
        """Subclass of AvdModel."""

        class Bgp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"raw_eos_cli": {"type": str}}
            raw_eos_cli: str | None
            """EOS cli commands rendered on router_bgp.vlans-aware-bundle."""

            if TYPE_CHECKING:

                def __init__(self, *, raw_eos_cli: str | None | UndefinedType = Undefined) -> None:
                    """
                    Bgp.


                    Subclass of AvdModel.

                    Args:
                        raw_eos_cli: EOS cli commands rendered on router_bgp.vlans-aware-bundle.

                    """

        _fields: ClassVar[dict] = {
            "name": {"type": str},
            "id": {"type": int},
            "rt_override": {"type": str},
            "rd_override": {"type": str},
            "evpn_l2_multi_domain": {"type": bool},
            "bgp": {"type": Bgp},
        }
        name: str
        """
        Specify an EVPN vlan-aware-bundle name.
        EVPN vlan-aware-bundles group VLANs and define common
        settings.
        """
        id: int
        """
        "id" may be used for vlan-aware-bundle RD/RT ID so it should not overlap with l2vlan IDs which are
        not part of this bundle.
        See "overlay_rd_type" and "overlay_rt_type" for details.
        """
        rt_override: str | None
        """
        By default the MAC VRF bundle RT will be derived from mac_vrf_id_base + bundle_id.
        The rt_override
        allows us to override this value and statically define it.
        rt_override will default to vni_override
        if set.

        rt_override supports two formats:
          - A single number which will be used in the RT fields
        instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
          - A full RT string with
        colon separator which will override the full RT.
        """
        rd_override: str | None
        """
        By default the MAC VRF bundle RD will be derived from mac_vrf_id_base + bundle_id.
        The rt_override
        allows us to override this value and statically define it.
        rd_override will default to rt_override
        or vni_override if set.

        rd_override supports two formats:
          - A single number which will be used in
        the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
        - A full RD string with colon separator which will override the full RD.
        """
        evpn_l2_multi_domain: bool | None
        """
        Explicitly extend VLAN-Aware Bundle to remote EVPN domains.
        Overrides
        `<network_services_key>.[].evpn_l2_multi_domain`.
        """
        bgp: Bgp
        """Subclass of AvdModel."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                id: int | UndefinedType = Undefined,
                rt_override: str | None | UndefinedType = Undefined,
                rd_override: str | None | UndefinedType = Undefined,
                evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                bgp: Bgp | UndefinedType = Undefined,
            ) -> None:
                """
                EvpnVlanBundlesItem.


                Subclass of AvdModel.

                Args:
                    name:
                       Specify an EVPN vlan-aware-bundle name.
                       EVPN vlan-aware-bundles group VLANs and define common
                       settings.
                    id:
                       "id" may be used for vlan-aware-bundle RD/RT ID so it should not overlap with l2vlan IDs which are
                       not part of this bundle.
                       See "overlay_rd_type" and "overlay_rt_type" for details.
                    rt_override:
                       By default the MAC VRF bundle RT will be derived from mac_vrf_id_base + bundle_id.
                       The rt_override
                       allows us to override this value and statically define it.
                       rt_override will default to vni_override
                       if set.

                       rt_override supports two formats:
                         - A single number which will be used in the RT fields
                       instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                         - A full RT string with
                       colon separator which will override the full RT.
                    rd_override:
                       By default the MAC VRF bundle RD will be derived from mac_vrf_id_base + bundle_id.
                       The rt_override
                       allows us to override this value and statically define it.
                       rd_override will default to rt_override
                       or vni_override if set.

                       rd_override supports two formats:
                         - A single number which will be used in
                       the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                       - A full RD string with colon separator which will override the full RD.
                    evpn_l2_multi_domain:
                       Explicitly extend VLAN-Aware Bundle to remote EVPN domains.
                       Overrides
                       `<network_services_key>.[].evpn_l2_multi_domain`.
                    bgp: Subclass of AvdModel.

                """

    class EvpnVlanBundles(AvdIndexedList[str, EvpnVlanBundlesItem]):
        """Subclass of AvdIndexedList with `EvpnVlanBundlesItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    EvpnVlanBundles._item_type = EvpnVlanBundlesItem

    class FabricFlowTracking(AvdModel):
        """Subclass of AvdModel."""

        class Uplinks(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    Uplinks.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class Downlinks(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    Downlinks.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class Endpoints(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    Endpoints.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class L3Edge(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    L3Edge.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class CoreInterfaces(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    CoreInterfaces.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class MlagInterfaces(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    MlagInterfaces.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class L3Interfaces(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    L3Interfaces.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class L3PortChannels(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    L3PortChannels.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class DpsInterfaces(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": True}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `True`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    DpsInterfaces.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class DirectWanHaLinks(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "name": {"type": str, "default": "FLOW-TRACKER"}}
            enabled: bool
            """Default value: `False`"""
            name: str
            """
            Flow tracker name as defined in flow_tracking_settings.

            Default value: `"FLOW-TRACKER"`
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | UndefinedType = Undefined, name: str | UndefinedType = Undefined) -> None:
                    """
                    DirectWanHaLinks.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        _fields: ClassVar[dict] = {
            "uplinks": {"type": Uplinks},
            "downlinks": {"type": Downlinks},
            "endpoints": {"type": Endpoints},
            "l3_edge": {"type": L3Edge},
            "core_interfaces": {"type": CoreInterfaces},
            "mlag_interfaces": {"type": MlagInterfaces},
            "l3_interfaces": {"type": L3Interfaces},
            "l3_port_channels": {"type": L3PortChannels},
            "dps_interfaces": {"type": DpsInterfaces},
            "direct_wan_ha_links": {"type": DirectWanHaLinks},
        }
        uplinks: Uplinks
        """
        Enable flow-tracking on all fabric uplinks.

        Subclass of AvdModel.
        """
        downlinks: Downlinks
        """
        Enable flow-tracking on all fabric downlinks.

        Subclass of AvdModel.
        """
        endpoints: Endpoints
        """
        Enable flow-tracking on all endpoints ports.

        Subclass of AvdModel.
        """
        l3_edge: L3Edge
        """
        Enable flow-tracking on all p2p_links defined under l3_edge.

        Subclass of AvdModel.
        """
        core_interfaces: CoreInterfaces
        """
        Enable flow-tracking on all p2p_links defined under core_interfaces.

        Subclass of AvdModel.
        """
        mlag_interfaces: MlagInterfaces
        """
        Enable flow-tracking on all MLAG peer interfaces.

        Subclass of AvdModel.
        """
        l3_interfaces: L3Interfaces
        """
        Enable flow-tracking on all node.l3_interfaces and network-services tenants.vrfs.l3_interfaces.
        Subclass of AvdModel.
        """
        l3_port_channels: L3PortChannels
        """
        Enable flow-tracking on all node.l3_port_channels.

        Subclass of AvdModel.
        """
        dps_interfaces: DpsInterfaces
        """
        Enable flow-tracking on all dps_interfaces.

        Subclass of AvdModel.
        """
        direct_wan_ha_links: DirectWanHaLinks
        """
        Enable flow-tracking on all direct WAN HA links.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                uplinks: Uplinks | UndefinedType = Undefined,
                downlinks: Downlinks | UndefinedType = Undefined,
                endpoints: Endpoints | UndefinedType = Undefined,
                l3_edge: L3Edge | UndefinedType = Undefined,
                core_interfaces: CoreInterfaces | UndefinedType = Undefined,
                mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                dps_interfaces: DpsInterfaces | UndefinedType = Undefined,
                direct_wan_ha_links: DirectWanHaLinks | UndefinedType = Undefined,
            ) -> None:
                """
                FabricFlowTracking.


                Subclass of AvdModel.

                Args:
                    uplinks:
                       Enable flow-tracking on all fabric uplinks.

                       Subclass of AvdModel.
                    downlinks:
                       Enable flow-tracking on all fabric downlinks.

                       Subclass of AvdModel.
                    endpoints:
                       Enable flow-tracking on all endpoints ports.

                       Subclass of AvdModel.
                    l3_edge:
                       Enable flow-tracking on all p2p_links defined under l3_edge.

                       Subclass of AvdModel.
                    core_interfaces:
                       Enable flow-tracking on all p2p_links defined under core_interfaces.

                       Subclass of AvdModel.
                    mlag_interfaces:
                       Enable flow-tracking on all MLAG peer interfaces.

                       Subclass of AvdModel.
                    l3_interfaces:
                       Enable flow-tracking on all node.l3_interfaces and network-services tenants.vrfs.l3_interfaces.
                       Subclass of AvdModel.
                    l3_port_channels:
                       Enable flow-tracking on all node.l3_port_channels.

                       Subclass of AvdModel.
                    dps_interfaces:
                       Enable flow-tracking on all dps_interfaces.

                       Subclass of AvdModel.
                    direct_wan_ha_links:
                       Enable flow-tracking on all direct WAN HA links.

                       Subclass of AvdModel.

                """

    class FabricIpAddressing(AvdModel):
        """Subclass of AvdModel."""

        class Loopback(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"ipv6_prefix_length": {"type": int, "default": 128}}
            ipv6_prefix_length: Literal[64, 128]
            """
            IPv6 prefix length used for Router ID, VTEP and diagnostic loopbacks.

            Default value: `128`
            """

            if TYPE_CHECKING:

                def __init__(self, *, ipv6_prefix_length: Literal[64, 128] | UndefinedType = Undefined) -> None:
                    """
                    Loopback.


                    Subclass of AvdModel.

                    Args:
                        ipv6_prefix_length: IPv6 prefix length used for Router ID, VTEP and diagnostic loopbacks.

                    """

        class Mlag(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "algorithm": {"type": str, "default": "first_id"},
                "ipv4_prefix_length": {"type": int, "default": 31},
                "ipv6_prefix_length": {"type": int, "default": 64},
            }
            algorithm: Literal["first_id", "odd_id", "same_subnet"]
            """
            This variable defines the Multi-chassis Link Aggregation (MLAG) algorithm used.
            Each MLAG link will
            have a /31¹ subnet with each subnet allocated from the relevant MLAG pool via a calculated offset.
            The offset is calculated using one of the following algorithms:
              - first_id: `(mlag_primary_id - 1)
            * 2` where `mlag_primary_id` is the ID of the first node defined under the node_group.
                This
            allocation method will skip every other /31¹ subnet making it less space efficient than `odd_id`.
            - odd_id: `(odd_id - 1) / 2`. Requires the node_group to have a node with an odd ID and a node with
            an even ID.
              - same_subnet: the offset will always be zero.
                This allocation method will use the
            first /31¹ subnet from the pool for all MLAG links.
            ¹ The prefix length is configurable with a
            default of /31.

            Default value: `"first_id"`
            """
            ipv4_prefix_length: int
            """
            IPv4 prefix length used for MLAG peer-vlan and L3 point-to-point SVIs over the MLAG peer-link.

            Default value: `31`
            """
            ipv6_prefix_length: int
            """
            IPv6 prefix length used for MLAG peer-vlan and L3 point-to-point SVIs over the MLAG peer-link.

            Default value: `64`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    algorithm: Literal["first_id", "odd_id", "same_subnet"] | UndefinedType = Undefined,
                    ipv4_prefix_length: int | UndefinedType = Undefined,
                    ipv6_prefix_length: int | UndefinedType = Undefined,
                ) -> None:
                    """
                    Mlag.


                    Subclass of AvdModel.

                    Args:
                        algorithm:
                           This variable defines the Multi-chassis Link Aggregation (MLAG) algorithm used.
                           Each MLAG link will
                           have a /31¹ subnet with each subnet allocated from the relevant MLAG pool via a calculated offset.
                           The offset is calculated using one of the following algorithms:
                             - first_id: `(mlag_primary_id - 1)
                           * 2` where `mlag_primary_id` is the ID of the first node defined under the node_group.
                               This
                           allocation method will skip every other /31¹ subnet making it less space efficient than `odd_id`.
                           - odd_id: `(odd_id - 1) / 2`. Requires the node_group to have a node with an odd ID and a node with
                           an even ID.
                             - same_subnet: the offset will always be zero.
                               This allocation method will use the
                           first /31¹ subnet from the pool for all MLAG links.
                           ¹ The prefix length is configurable with a
                           default of /31.
                        ipv4_prefix_length: IPv4 prefix length used for MLAG peer-vlan and L3 point-to-point SVIs over the MLAG peer-link.
                        ipv6_prefix_length: IPv6 prefix length used for MLAG peer-vlan and L3 point-to-point SVIs over the MLAG peer-link.

                    """

        class P2pUplinks(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"ipv4_prefix_length": {"type": int, "default": 31}, "ipv6_prefix_length": {"type": int, "default": 64}}
            ipv4_prefix_length: int
            """
            IPv4 prefix length used for L3 point-to-point uplinks.

            Default value: `31`
            """
            ipv6_prefix_length: int
            """
            IPv6 prefix length used for L3 point-to-point uplinks.

            Default value: `64`
            """

            if TYPE_CHECKING:

                def __init__(self, *, ipv4_prefix_length: int | UndefinedType = Undefined, ipv6_prefix_length: int | UndefinedType = Undefined) -> None:
                    """
                    P2pUplinks.


                    Subclass of AvdModel.

                    Args:
                        ipv4_prefix_length: IPv4 prefix length used for L3 point-to-point uplinks.
                        ipv6_prefix_length: IPv6 prefix length used for L3 point-to-point uplinks.

                    """

        class WanHa(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"ipv4_prefix_length": {"type": int, "default": 31}}
            ipv4_prefix_length: int
            """
            IPv4 prefix length used for point-to-point interface for direct WAN HA link.

            Default value: `31`
            """

            if TYPE_CHECKING:

                def __init__(self, *, ipv4_prefix_length: int | UndefinedType = Undefined) -> None:
                    """
                    WanHa.


                    Subclass of AvdModel.

                    Args:
                        ipv4_prefix_length: IPv4 prefix length used for point-to-point interface for direct WAN HA link.

                    """

        _fields: ClassVar[dict] = {"loopback": {"type": Loopback}, "mlag": {"type": Mlag}, "p2p_uplinks": {"type": P2pUplinks}, "wan_ha": {"type": WanHa}}
        loopback: Loopback
        """Subclass of AvdModel."""
        mlag: Mlag
        """Subclass of AvdModel."""
        p2p_uplinks: P2pUplinks
        """Subclass of AvdModel."""
        wan_ha: WanHa
        """
        Allow to manipulate the IP addressing scheme for WAN HA direct subnets.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                loopback: Loopback | UndefinedType = Undefined,
                mlag: Mlag | UndefinedType = Undefined,
                p2p_uplinks: P2pUplinks | UndefinedType = Undefined,
                wan_ha: WanHa | UndefinedType = Undefined,
            ) -> None:
                """
                FabricIpAddressing.


                Subclass of AvdModel.

                Args:
                    loopback: Subclass of AvdModel.
                    mlag: Subclass of AvdModel.
                    p2p_uplinks: Subclass of AvdModel.
                    wan_ha:
                       Allow to manipulate the IP addressing scheme for WAN HA direct subnets.

                       Subclass of AvdModel.

                """

    class FabricNumbering(AvdModel):
        """Subclass of AvdModel."""

        class NodeId(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"algorithm": {"type": str, "default": "static"}, "pools_file": {"type": str}}
            algorithm: Literal["static", "pool_manager"]
            """
            IDs will be automatically assigned according to the configured algorithm.
            - `static` will use the
            statically set IDs under node setting.
            - `pool_manager` will activate the pool manager for ID pools.
            Any statically set ID under node settings will be reserved in the pool if possible.
              Otherwise an
            error will be raised.

            Default value: `"static"`
            """
            pools_file: str | None
            """
            Path to file to use for storing ID pool data when using "pool_manager" as algorithm.
            This can be an
            absolute path or a path relative to current working directory.

            By default the path is:
            `<root_dir>/intended/data/<fabric_name>-ids.yml`.

            Note: Since the pool manager will remove stale
            entries after every run, each fabric should be using its own file.
            """

            if TYPE_CHECKING:

                def __init__(
                    self, *, algorithm: Literal["static", "pool_manager"] | UndefinedType = Undefined, pools_file: str | None | UndefinedType = Undefined
                ) -> None:
                    """
                    NodeId.


                    Subclass of AvdModel.

                    Args:
                        algorithm:
                           IDs will be automatically assigned according to the configured algorithm.
                           - `static` will use the
                           statically set IDs under node setting.
                           - `pool_manager` will activate the pool manager for ID pools.
                           Any statically set ID under node settings will be reserved in the pool if possible.
                             Otherwise an
                           error will be raised.
                        pools_file:
                           Path to file to use for storing ID pool data when using "pool_manager" as algorithm.
                           This can be an
                           absolute path or a path relative to current working directory.

                           By default the path is:
                           `<root_dir>/intended/data/<fabric_name>-ids.yml`.

                           Note: Since the pool manager will remove stale
                           entries after every run, each fabric should be using its own file.

                    """

        _fields: ClassVar[dict] = {"node_id": {"type": NodeId}}
        node_id: NodeId
        """
        Assignment policy for Node ID.
        Node ID is mainly used for IP address assignment but can also affect
        BGP AS and/or
        interface assignments depending on other settings.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(self, *, node_id: NodeId | UndefinedType = Undefined) -> None:
                """
                FabricNumbering.


                Subclass of AvdModel.

                Args:
                    node_id:
                       Assignment policy for Node ID.
                       Node ID is mainly used for IP address assignment but can also affect
                       BGP AS and/or
                       interface assignments depending on other settings.

                       Subclass of AvdModel.

                """

    class FabricSflow(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "uplinks": {"type": bool},
            "downlinks": {"type": bool},
            "endpoints": {"type": bool},
            "l3_edge": {"type": bool},
            "core_interfaces": {"type": bool},
            "mlag_interfaces": {"type": bool},
            "l3_interfaces": {"type": bool},
        }
        uplinks: bool | None
        """Enable sFlow on all fabric uplinks."""
        downlinks: bool | None
        """Enable sFlow on all fabric downlinks."""
        endpoints: bool | None
        """Enable sFlow on all endpoints ports."""
        l3_edge: bool | None
        """Enable sFlow on all p2p_links defined under l3_edge."""
        core_interfaces: bool | None
        """Enable sFlow on all p2p_links defined under core_interfaces."""
        mlag_interfaces: bool | None
        """Enable sFlow on all MLAG peer interfaces."""
        l3_interfaces: bool | None
        """Enable sFlow on all l3 interfaces."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                uplinks: bool | None | UndefinedType = Undefined,
                downlinks: bool | None | UndefinedType = Undefined,
                endpoints: bool | None | UndefinedType = Undefined,
                l3_edge: bool | None | UndefinedType = Undefined,
                core_interfaces: bool | None | UndefinedType = Undefined,
                mlag_interfaces: bool | None | UndefinedType = Undefined,
                l3_interfaces: bool | None | UndefinedType = Undefined,
            ) -> None:
                """
                FabricSflow.


                Subclass of AvdModel.

                Args:
                    uplinks: Enable sFlow on all fabric uplinks.
                    downlinks: Enable sFlow on all fabric downlinks.
                    endpoints: Enable sFlow on all endpoints ports.
                    l3_edge: Enable sFlow on all p2p_links defined under l3_edge.
                    core_interfaces: Enable sFlow on all p2p_links defined under core_interfaces.
                    mlag_interfaces: Enable sFlow on all MLAG peer interfaces.
                    l3_interfaces: Enable sFlow on all l3 interfaces.

                """

    class FlowTrackingSettings(AvdModel):
        """Subclass of AvdModel."""

        class Sampled(AvdModel):
            """Subclass of AvdModel."""

            class Encapsulation(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"ipv4_ipv6": {"type": bool}, "mpls": {"type": bool}}
                ipv4_ipv6: bool | None
                mpls: bool | None

                if TYPE_CHECKING:

                    def __init__(self, *, ipv4_ipv6: bool | None | UndefinedType = Undefined, mpls: bool | None | UndefinedType = Undefined) -> None:
                        """
                        Encapsulation.


                        Subclass of AvdModel.

                        Args:
                            ipv4_ipv6: ipv4_ipv6
                            mpls: mpls

                        """

            class HardwareOffload(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"ipv4": {"type": bool}, "ipv6": {"type": bool}, "threshold_minimum": {"type": int}}
                ipv4: bool | None
                """Configure hardware offload for IPv4 traffic."""
                ipv6: bool | None
                """Configure hardware offload for IPv6 traffic."""
                threshold_minimum: int | None
                """Minimum number of samples."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        ipv4: bool | None | UndefinedType = Undefined,
                        ipv6: bool | None | UndefinedType = Undefined,
                        threshold_minimum: int | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        HardwareOffload.


                        Subclass of AvdModel.

                        Args:
                            ipv4: Configure hardware offload for IPv4 traffic.
                            ipv6: Configure hardware offload for IPv6 traffic.
                            threshold_minimum: Minimum number of samples.

                        """

            _fields: ClassVar[dict] = {
                "encapsulation": {"type": Encapsulation},
                "sample": {"type": int, "default": 10000},
                "hardware_offload": {"type": HardwareOffload},
            }
            encapsulation: Encapsulation
            """Subclass of AvdModel."""
            sample: int
            """Default value: `10000`"""
            hardware_offload: HardwareOffload
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    encapsulation: Encapsulation | UndefinedType = Undefined,
                    sample: int | UndefinedType = Undefined,
                    hardware_offload: HardwareOffload | UndefinedType = Undefined,
                ) -> None:
                    """
                    Sampled.


                    Subclass of AvdModel.

                    Args:
                        encapsulation: Subclass of AvdModel.
                        sample: sample
                        hardware_offload: Subclass of AvdModel.

                    """

        class Hardware(AvdModel):
            """Subclass of AvdModel."""

            class Record(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"format_ipfix_standard_timestamps_counters": {"type": bool}}
                format_ipfix_standard_timestamps_counters: bool | None
                """Enable software export of IPFIX data records."""

                if TYPE_CHECKING:

                    def __init__(self, *, format_ipfix_standard_timestamps_counters: bool | None | UndefinedType = Undefined) -> None:
                        """
                        Record.


                        Subclass of AvdModel.

                        Args:
                            format_ipfix_standard_timestamps_counters: Enable software export of IPFIX data records.

                        """

            _fields: ClassVar[dict] = {"record": {"type": Record}}
            record: Record
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(self, *, record: Record | UndefinedType = Undefined) -> None:
                    """
                    Hardware.


                    Subclass of AvdModel.

                    Args:
                        record: Subclass of AvdModel.

                    """

        class TrackersItem(AvdModel):
            """Subclass of AvdModel."""

            class Sampled(AvdModel):
                """Subclass of AvdModel."""

                class RecordExport(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"mpls": {"type": bool}}
                    mpls: bool | None
                    """Export MPLS forwarding information."""

                    if TYPE_CHECKING:

                        def __init__(self, *, mpls: bool | None | UndefinedType = Undefined) -> None:
                            """
                            RecordExport.


                            Subclass of AvdModel.

                            Args:
                                mpls: Export MPLS forwarding information.

                            """

                _fields: ClassVar[dict] = {"table_size": {"type": int}, "record_export": {"type": RecordExport}}
                table_size: int | None
                """Maximum number of entries in flow table."""
                record_export: RecordExport
                """Subclass of AvdModel."""

                if TYPE_CHECKING:

                    def __init__(self, *, table_size: int | None | UndefinedType = Undefined, record_export: RecordExport | UndefinedType = Undefined) -> None:
                        """
                        Sampled.


                        Subclass of AvdModel.

                        Args:
                            table_size: Maximum number of entries in flow table.
                            record_export: Subclass of AvdModel.

                        """

            class RecordExport(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"on_inactive_timeout": {"type": int}, "on_interval": {"type": int}}
                on_inactive_timeout: int | None
                """Flow record inactive export timeout in milliseconds"""
                on_interval: int | None
                """Flow record export interval in milliseconds"""

                if TYPE_CHECKING:

                    def __init__(
                        self, *, on_inactive_timeout: int | None | UndefinedType = Undefined, on_interval: int | None | UndefinedType = Undefined
                    ) -> None:
                        """
                        RecordExport.


                        Subclass of AvdModel.

                        Args:
                            on_inactive_timeout: Flow record inactive export timeout in milliseconds
                            on_interval: Flow record export interval in milliseconds

                        """

            class ExportersItem(AvdModel):
                """Subclass of AvdModel."""

                class Collector(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"host": {"type": str}, "port": {"type": int}}
                    host: str | None
                    """Collector IPv4 address or IPv6 address or fully qualified domain name"""
                    port: int | None
                    """Collector Port Number"""

                    if TYPE_CHECKING:

                        def __init__(self, *, host: str | None | UndefinedType = Undefined, port: int | None | UndefinedType = Undefined) -> None:
                            """
                            Collector.


                            Subclass of AvdModel.

                            Args:
                                host: Collector IPv4 address or IPv6 address or fully qualified domain name
                                port: Collector Port Number

                            """

                class CollectorsItem(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"host": {"type": str}, "port": {"type": int}}
                    host: str
                    """
                    Flow collector name.
                    The collector name can be an IPv4 address, IPv6 address and fully qualified
                    domain name.
                    """
                    port: int | None
                    """Collector Port Number."""

                    if TYPE_CHECKING:

                        def __init__(self, *, host: str | UndefinedType = Undefined, port: int | None | UndefinedType = Undefined) -> None:
                            """
                            CollectorsItem.


                            Subclass of AvdModel.

                            Args:
                                host:
                                   Flow collector name.
                                   The collector name can be an IPv4 address, IPv6 address and fully qualified
                                   domain name.
                                port: Collector Port Number.

                            """

                class Collectors(AvdIndexedList[str, CollectorsItem]):
                    """Subclass of AvdIndexedList with `CollectorsItem` items. Primary key is `host` (`str`)."""

                    _primary_key: ClassVar[str] = "host"

                Collectors._item_type = CollectorsItem

                class Format(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"ipfix_version": {"type": int}}
                    ipfix_version: int | None

                    if TYPE_CHECKING:

                        def __init__(self, *, ipfix_version: int | None | UndefinedType = Undefined) -> None:
                            """
                            Format.


                            Subclass of AvdModel.

                            Args:
                                ipfix_version: ipfix_version

                            """

                _fields: ClassVar[dict] = {
                    "name": {"type": str},
                    "collector": {"type": Collector},
                    "collectors": {"type": Collectors},
                    "format": {"type": Format},
                    "local_interface": {"type": str},
                    "template_interval": {"type": int},
                }
                name: str
                """Exporter Name"""
                collector: Collector
                """Subclass of AvdModel."""
                collectors: Collectors
                """Subclass of AvdIndexedList with `CollectorsItem` items. Primary key is `host` (`str`)."""
                format: Format
                """Subclass of AvdModel."""
                local_interface: str | None
                """Local Source Interface"""
                template_interval: int | None
                """Template interval in milliseconds"""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        name: str | UndefinedType = Undefined,
                        collector: Collector | UndefinedType = Undefined,
                        collectors: Collectors | UndefinedType = Undefined,
                        format: Format | UndefinedType = Undefined,
                        local_interface: str | None | UndefinedType = Undefined,
                        template_interval: int | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        ExportersItem.


                        Subclass of AvdModel.

                        Args:
                            name: Exporter Name
                            collector: Subclass of AvdModel.
                            collectors: Subclass of AvdIndexedList with `CollectorsItem` items. Primary key is `host` (`str`).
                            format: Subclass of AvdModel.
                            local_interface: Local Source Interface
                            template_interval: Template interval in milliseconds

                        """

            class Exporters(AvdIndexedList[str, ExportersItem]):
                """Subclass of AvdIndexedList with `ExportersItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Exporters._item_type = ExportersItem

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "sampled": {"type": Sampled},
                "record_export": {"type": RecordExport},
                "exporters": {"type": Exporters},
            }
            name: str
            """Tracker Name"""
            sampled: Sampled
            """
            The options relevant only for flow tracker type sampled.

            Subclass of AvdModel.
            """
            record_export: RecordExport
            """Subclass of AvdModel."""
            exporters: Exporters
            """Subclass of AvdIndexedList with `ExportersItem` items. Primary key is `name` (`str`)."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    sampled: Sampled | UndefinedType = Undefined,
                    record_export: RecordExport | UndefinedType = Undefined,
                    exporters: Exporters | UndefinedType = Undefined,
                ) -> None:
                    """
                    TrackersItem.


                    Subclass of AvdModel.

                    Args:
                        name: Tracker Name
                        sampled:
                           The options relevant only for flow tracker type sampled.

                           Subclass of AvdModel.
                        record_export: Subclass of AvdModel.
                        exporters: Subclass of AvdIndexedList with `ExportersItem` items. Primary key is `name` (`str`).

                    """

        class Trackers(AvdIndexedList[str, TrackersItem]):
            """Subclass of AvdIndexedList with `TrackersItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Trackers._item_type = TrackersItem

        _fields: ClassVar[dict] = {
            "sampled": {"type": Sampled},
            "hardware": {"type": Hardware},
            "trackers": {
                "type": Trackers,
                "default": lambda cls: coerce_type(
                    [
                        {
                            "name": "FLOW-TRACKER",
                            "record_export": {"on_inactive_timeout": 70000, "on_interval": 300000},
                            "exporters": [
                                {"name": "CV-TELEMETRY", "collectors": [{"host": "127.0.0.1"}], "local_interface": "Loopback0", "template_interval": 3600000}
                            ],
                        }
                    ],
                    target_type=cls,
                ),
            },
        }
        sampled: Sampled
        """
        The options relevant only for flow tracker type sampled.

        Subclass of AvdModel.
        """
        hardware: Hardware
        """
        The options relevant only for flow tracker type hardware.

        Subclass of AvdModel.
        """
        trackers: Trackers
        """
        Subclass of AvdIndexedList with `TrackersItem` items. Primary key is `name` (`str`).

        Default value: `lambda cls: coerce_type([{"name": "FLOW-TRACKER", "record_export": {"on_inactive_timeout": 70000, "on_interval": 300000}, "exporters": [{"name": "CV-TELEMETRY", "collectors": [{"host": "127.0.0.1"}], "local_interface": "Loopback0", "template_interval": 3600000}]}], target_type=cls)`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                sampled: Sampled | UndefinedType = Undefined,
                hardware: Hardware | UndefinedType = Undefined,
                trackers: Trackers | UndefinedType = Undefined,
            ) -> None:
                """
                FlowTrackingSettings.


                Subclass of AvdModel.

                Args:
                    sampled:
                       The options relevant only for flow tracker type sampled.

                       Subclass of AvdModel.
                    hardware:
                       The options relevant only for flow tracker type hardware.

                       Subclass of AvdModel.
                    trackers: Subclass of AvdIndexedList with `TrackersItem` items. Primary key is `name` (`str`).

                """

    class GenerateCvTags(AvdModel):
        """Subclass of AvdModel."""

        class InterfaceTagsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "data_path": {"type": str}, "value": {"type": str}}
            name: str
            """Tag name to be assigned to generated tags."""
            data_path: str | None
            """
            Structured config field/key path to be used to find the value for the tag. Dot notation is supported
            to reference values inside dictionaries.
            For Example: 'data_path: channel_group.id' would set the
            tag with the value of the channel id of the interface. If there is no channel id, the tag is not
            created.
            `data_path` is ignored if `value` is set.
            """
            value: str | None
            """Value to be assigned to the tag."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    data_path: str | None | UndefinedType = Undefined,
                    value: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    InterfaceTagsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Tag name to be assigned to generated tags.
                        data_path:
                           Structured config field/key path to be used to find the value for the tag. Dot notation is supported
                           to reference values inside dictionaries.
                           For Example: 'data_path: channel_group.id' would set the
                           tag with the value of the channel id of the interface. If there is no channel id, the tag is not
                           created.
                           `data_path` is ignored if `value` is set.
                        value: Value to be assigned to the tag.

                    """

        class InterfaceTags(AvdIndexedList[str, InterfaceTagsItem]):
            """Subclass of AvdIndexedList with `InterfaceTagsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        InterfaceTags._item_type = InterfaceTagsItem

        class DeviceTagsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "data_path": {"type": str}, "value": {"type": str}}
            name: str
            """Tag name to be assigned to generated tags."""
            data_path: str | None
            """
            Structured config field/key path to be used to find the value for the tag. Dot notation is supported
            to reference values inside dictionaries.
            For Example: 'data_path: router_bfd.multihop.interval'
            would set the tag with the value of the interval for multihop bfd. If this value is not specified in
            the structured config, the tag is not created.
            `data_path` is ignored if `value` is set.
            """
            value: str | None
            """Value to be assigned to the tag."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    data_path: str | None | UndefinedType = Undefined,
                    value: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    DeviceTagsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Tag name to be assigned to generated tags.
                        data_path:
                           Structured config field/key path to be used to find the value for the tag. Dot notation is supported
                           to reference values inside dictionaries.
                           For Example: 'data_path: router_bfd.multihop.interval'
                           would set the tag with the value of the interval for multihop bfd. If this value is not specified in
                           the structured config, the tag is not created.
                           `data_path` is ignored if `value` is set.
                        value: Value to be assigned to the tag.

                    """

        class DeviceTags(AvdList[DeviceTagsItem]):
            """Subclass of AvdList with `DeviceTagsItem` items."""

        DeviceTags._item_type = DeviceTagsItem

        _fields: ClassVar[dict] = {
            "topology_hints": {"type": bool, "default": False},
            "campus_fabric": {"type": bool, "default": False},
            "interface_tags": {"type": InterfaceTags},
            "device_tags": {"type": DeviceTags},
        }
        topology_hints: bool
        """
        Enable the generation of CloudVision Topology Tags (hints).

        Default value: `False`
        """
        campus_fabric: bool
        """
        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
        change at any time.
        Generate CloudVision device and interface Topology Tags for Campus fabric
        devices.
        Device is treated as a Campus fabric device if:
          - The `campus` variable is assigned,
        either as native Ansible variable or as part of the `<node_type_keys.key>` AVD data construct.
          -
        The `generate_cv_tags.campus_fabric` variable is set to `True`.
        When campus-related tags are
        generated for a device, generation of the DC-related tags is automatically disabled for that device.
        AVD generates the following device tags for the Campus fabric devices based on the provided Campus-
        related input variables:
          - `Campus`
          - `Campus-Pod`
          - `Access-Pod`
          - `topology_hint_type`
          -
        `Role`
        These tags are later used by CloudVision to render the correct network layout in the Topology
        view (`campusV2` network hierarchy) and Campus dashboards.

        Default value: `False`
        """
        interface_tags: InterfaceTags
        """
        List of interface tags that should be generated.

        Subclass of AvdIndexedList with
        `InterfaceTagsItem` items. Primary key is `name` (`str`).
        """
        device_tags: DeviceTags
        """
        List of device tags that should be generated.

        Subclass of AvdList with `DeviceTagsItem` items.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                topology_hints: bool | UndefinedType = Undefined,
                campus_fabric: bool | UndefinedType = Undefined,
                interface_tags: InterfaceTags | UndefinedType = Undefined,
                device_tags: DeviceTags | UndefinedType = Undefined,
            ) -> None:
                """
                GenerateCvTags.


                Subclass of AvdModel.

                Args:
                    topology_hints: Enable the generation of CloudVision Topology Tags (hints).
                    campus_fabric:
                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                       change at any time.
                       Generate CloudVision device and interface Topology Tags for Campus fabric
                       devices.
                       Device is treated as a Campus fabric device if:
                         - The `campus` variable is assigned,
                       either as native Ansible variable or as part of the `<node_type_keys.key>` AVD data construct.
                         -
                       The `generate_cv_tags.campus_fabric` variable is set to `True`.
                       When campus-related tags are
                       generated for a device, generation of the DC-related tags is automatically disabled for that device.
                       AVD generates the following device tags for the Campus fabric devices based on the provided Campus-
                       related input variables:
                         - `Campus`
                         - `Campus-Pod`
                         - `Access-Pod`
                         - `topology_hint_type`
                         -
                       `Role`
                       These tags are later used by CloudVision to render the correct network layout in the Topology
                       view (`campusV2` network hierarchy) and Campus dashboards.
                    interface_tags:
                       List of interface tags that should be generated.

                       Subclass of AvdIndexedList with
                       `InterfaceTagsItem` items. Primary key is `name` (`str`).
                    device_tags:
                       List of device tags that should be generated.

                       Subclass of AvdList with `DeviceTagsItem` items.

                """

    class InternalVlanOrder(AvdModel):
        """Subclass of AvdModel."""

        class Range(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"beginning": {"type": int}, "ending": {"type": int}}
            beginning: int
            """First VLAN ID."""
            ending: int
            """Last VLAN ID."""

            if TYPE_CHECKING:

                def __init__(self, *, beginning: int | UndefinedType = Undefined, ending: int | UndefinedType = Undefined) -> None:
                    """
                    Range.


                    Subclass of AvdModel.

                    Args:
                        beginning: First VLAN ID.
                        ending: Last VLAN ID.

                    """

        _fields: ClassVar[dict] = {"allocation": {"type": str}, "range": {"type": Range}}
        allocation: Literal["ascending", "descending"]
        range: Range
        """Subclass of AvdModel."""

        if TYPE_CHECKING:

            def __init__(self, *, allocation: Literal["ascending", "descending"] | UndefinedType = Undefined, range: Range | UndefinedType = Undefined) -> None:
                """
                InternalVlanOrder.


                Subclass of AvdModel.

                Args:
                    allocation: allocation
                    range: Subclass of AvdModel.

                """

    class IpsecSettings(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"bind_connection_to_interface": {"type": bool, "default": False}}
        bind_connection_to_interface: bool
        """
        Allow IPsec connections to be bound to the source interface.
        Enabling this prevents IPsec
        connections from using ECMP paths.

        Default value: `False`
        """

        if TYPE_CHECKING:

            def __init__(self, *, bind_connection_to_interface: bool | UndefinedType = Undefined) -> None:
                """
                IpsecSettings.


                Subclass of AvdModel.

                Args:
                    bind_connection_to_interface:
                       Allow IPsec connections to be bound to the source interface.
                       Enabling this prevents IPsec
                       connections from using ECMP paths.

                """

    class Ipv4AclsItem(AvdModel):
        """Subclass of AvdModel."""

        class EntriesItem(AvdModel):
            """Subclass of AvdModel."""

            class SourcePorts(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            SourcePorts._item_type = str

            class DestinationPorts(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            DestinationPorts._item_type = str

            class TcpFlags(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            TcpFlags._item_type = str

            _fields: ClassVar[dict] = {
                "source": {"type": str},
                "destination": {"type": str},
                "sequence": {"type": int},
                "remark": {"type": str},
                "action": {"type": str},
                "protocol": {"type": str},
                "source_ports_match": {"type": str, "default": "eq"},
                "source_ports": {"type": SourcePorts},
                "destination_ports_match": {"type": str, "default": "eq"},
                "destination_ports": {"type": DestinationPorts},
                "tcp_flags": {"type": TcpFlags},
                "fragments": {"type": bool},
                "log": {"type": bool},
                "ttl": {"type": int},
                "ttl_match": {"type": str, "default": "eq"},
                "icmp_type": {"type": str},
                "icmp_code": {"type": str},
                "nexthop_group": {"type": str},
                "tracked": {"type": bool},
                "dscp": {"type": str},
                "vlan_number": {"type": int},
                "vlan_inner": {"type": bool, "default": False},
                "vlan_mask": {"type": str},
            }
            source: str | None
            """
            This field supports substitution of the fields "interface_ip" for SVIs and both "interface_ip" and
            "peer_ip" for Layer 3 interfaces.
            Alternatively it can be set with a static value of "any",
            "<ip>/<mask>" or "<ip>".
            "<ip>" without a mask means host.
            Required except for remarks.
            """
            destination: str | None
            """
            This field supports substitution of the fields "interface_ip" for SVIs and both "interface_ip" and
            "peer_ip" for Layer 3 interfaces.
            Alternatively it can be set with a static value of "any",
            "<ip>/<mask>" or "<ip>".
            "<ip>" without a mask means host.
            Required except for remarks.
            """
            sequence: int | None
            """ACL entry sequence number."""
            remark: str | None
            """
            Comment up to 100 characters.
            If remark is defined, other keys in the ACL entry will be ignored.
            """
            action: Literal["permit", "deny"] | None
            """
            ACL action.
            Required except for remarks.
            """
            protocol: str | None
            """
            "ip", "tcp", "udp", "icmp" or other protocol name or number.
            Required except for remarks.
            """
            source_ports_match: Literal["eq", "gt", "lt", "neq", "range"]
            """Default value: `"eq"`"""
            source_ports: SourcePorts
            """Subclass of AvdList with `str` items."""
            destination_ports_match: Literal["eq", "gt", "lt", "neq", "range"]
            """Default value: `"eq"`"""
            destination_ports: DestinationPorts
            """Subclass of AvdList with `str` items."""
            tcp_flags: TcpFlags
            """Subclass of AvdList with `str` items."""
            fragments: bool | None
            """Match non-head fragment packets."""
            log: bool | None
            """Log matches against this rule."""
            ttl: int | None
            """TTL value."""
            ttl_match: Literal["eq", "gt", "lt", "neq"]
            """Default value: `"eq"`"""
            icmp_type: str | None
            """Message type name/number for ICMP packets."""
            icmp_code: str | None
            """Message code for ICMP packets."""
            nexthop_group: str | None
            """nexthop-group name."""
            tracked: bool | None
            """Match packets in existing ICMP/UDP/TCP connections."""
            dscp: str | None
            """DSCP value or name."""
            vlan_number: int | None
            vlan_inner: bool
            """Default value: `False`"""
            vlan_mask: str | None
            """0x000-0xFFF VLAN mask."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    source: str | None | UndefinedType = Undefined,
                    destination: str | None | UndefinedType = Undefined,
                    sequence: int | None | UndefinedType = Undefined,
                    remark: str | None | UndefinedType = Undefined,
                    action: Literal["permit", "deny"] | None | UndefinedType = Undefined,
                    protocol: str | None | UndefinedType = Undefined,
                    source_ports_match: Literal["eq", "gt", "lt", "neq", "range"] | UndefinedType = Undefined,
                    source_ports: SourcePorts | UndefinedType = Undefined,
                    destination_ports_match: Literal["eq", "gt", "lt", "neq", "range"] | UndefinedType = Undefined,
                    destination_ports: DestinationPorts | UndefinedType = Undefined,
                    tcp_flags: TcpFlags | UndefinedType = Undefined,
                    fragments: bool | None | UndefinedType = Undefined,
                    log: bool | None | UndefinedType = Undefined,
                    ttl: int | None | UndefinedType = Undefined,
                    ttl_match: Literal["eq", "gt", "lt", "neq"] | UndefinedType = Undefined,
                    icmp_type: str | None | UndefinedType = Undefined,
                    icmp_code: str | None | UndefinedType = Undefined,
                    nexthop_group: str | None | UndefinedType = Undefined,
                    tracked: bool | None | UndefinedType = Undefined,
                    dscp: str | None | UndefinedType = Undefined,
                    vlan_number: int | None | UndefinedType = Undefined,
                    vlan_inner: bool | UndefinedType = Undefined,
                    vlan_mask: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    EntriesItem.


                    Subclass of AvdModel.

                    Args:
                        source:
                           This field supports substitution of the fields "interface_ip" for SVIs and both "interface_ip" and
                           "peer_ip" for Layer 3 interfaces.
                           Alternatively it can be set with a static value of "any",
                           "<ip>/<mask>" or "<ip>".
                           "<ip>" without a mask means host.
                           Required except for remarks.
                        destination:
                           This field supports substitution of the fields "interface_ip" for SVIs and both "interface_ip" and
                           "peer_ip" for Layer 3 interfaces.
                           Alternatively it can be set with a static value of "any",
                           "<ip>/<mask>" or "<ip>".
                           "<ip>" without a mask means host.
                           Required except for remarks.
                        sequence: ACL entry sequence number.
                        remark:
                           Comment up to 100 characters.
                           If remark is defined, other keys in the ACL entry will be ignored.
                        action:
                           ACL action.
                           Required except for remarks.
                        protocol:
                           "ip", "tcp", "udp", "icmp" or other protocol name or number.
                           Required except for remarks.
                        source_ports_match: source_ports_match
                        source_ports: Subclass of AvdList with `str` items.
                        destination_ports_match: destination_ports_match
                        destination_ports: Subclass of AvdList with `str` items.
                        tcp_flags: Subclass of AvdList with `str` items.
                        fragments: Match non-head fragment packets.
                        log: Log matches against this rule.
                        ttl: TTL value.
                        ttl_match: ttl_match
                        icmp_type: Message type name/number for ICMP packets.
                        icmp_code: Message code for ICMP packets.
                        nexthop_group: nexthop-group name.
                        tracked: Match packets in existing ICMP/UDP/TCP connections.
                        dscp: DSCP value or name.
                        vlan_number: vlan_number
                        vlan_inner: vlan_inner
                        vlan_mask: 0x000-0xFFF VLAN mask.

                    """

        class Entries(AvdList[EntriesItem]):
            """Subclass of AvdList with `EntriesItem` items."""

        Entries._item_type = EntriesItem

        _fields: ClassVar[dict] = {
            "name": {"type": str},
            "entries": {"type": Entries},
            "counters_per_entry": {"type": bool},
            "permit_response_traffic": {"type": str},
        }
        name: str
        """
        Access-list name.
        When using substitution for any fields, the interface name will be appended to the
        ACL name.
        """
        entries: Entries
        """
        ACL Entries.

        Subclass of AvdList with `EntriesItem` items.
        """
        counters_per_entry: bool | None
        permit_response_traffic: Literal["nat"] | None
        """
        Permit response traffic automatically based on NAT translations.
        Minimum EOS version requirement
        4.32.2F.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                entries: Entries | UndefinedType = Undefined,
                counters_per_entry: bool | None | UndefinedType = Undefined,
                permit_response_traffic: Literal["nat"] | None | UndefinedType = Undefined,
            ) -> None:
                """
                Ipv4AclsItem.


                Subclass of AvdModel.

                Args:
                    name:
                       Access-list name.
                       When using substitution for any fields, the interface name will be appended to the
                       ACL name.
                    entries:
                       ACL Entries.

                       Subclass of AvdList with `EntriesItem` items.
                    counters_per_entry: counters_per_entry
                    permit_response_traffic:
                       Permit response traffic automatically based on NAT translations.
                       Minimum EOS version requirement
                       4.32.2F.

                """

    class Ipv4Acls(AvdIndexedList[str, Ipv4AclsItem]):
        """Subclass of AvdIndexedList with `Ipv4AclsItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    Ipv4Acls._item_type = Ipv4AclsItem

    class Ipv4PrefixListCatalogItem(AvdModel):
        """Subclass of AvdModel."""

        class SequenceNumbersItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"sequence": {"type": int}, "action": {"type": str}}
            sequence: int
            """Sequence ID."""
            action: str
            """
            Action as string.
            Example: "permit 10.255.0.0/27 eq 32"
            """

            if TYPE_CHECKING:

                def __init__(self, *, sequence: int | UndefinedType = Undefined, action: str | UndefinedType = Undefined) -> None:
                    """
                    SequenceNumbersItem.


                    Subclass of AvdModel.

                    Args:
                        sequence: Sequence ID.
                        action:
                           Action as string.
                           Example: "permit 10.255.0.0/27 eq 32"

                    """

        class SequenceNumbers(AvdIndexedList[int, SequenceNumbersItem]):
            """Subclass of AvdIndexedList with `SequenceNumbersItem` items. Primary key is `sequence` (`int`)."""

            _primary_key: ClassVar[str] = "sequence"

        SequenceNumbers._item_type = SequenceNumbersItem

        _fields: ClassVar[dict] = {"name": {"type": str}, "sequence_numbers": {"type": SequenceNumbers}}
        name: str
        """Prefix-list Name."""
        sequence_numbers: SequenceNumbers
        """Subclass of AvdIndexedList with `SequenceNumbersItem` items. Primary key is `sequence` (`int`)."""

        if TYPE_CHECKING:

            def __init__(self, *, name: str | UndefinedType = Undefined, sequence_numbers: SequenceNumbers | UndefinedType = Undefined) -> None:
                """
                Ipv4PrefixListCatalogItem.


                Subclass of AvdModel.

                Args:
                    name: Prefix-list Name.
                    sequence_numbers: Subclass of AvdIndexedList with `SequenceNumbersItem` items. Primary key is `sequence` (`int`).

                """

    class Ipv4PrefixListCatalog(AvdIndexedList[str, Ipv4PrefixListCatalogItem]):
        """Subclass of AvdIndexedList with `Ipv4PrefixListCatalogItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    Ipv4PrefixListCatalog._item_type = Ipv4PrefixListCatalogItem

    class Ipv6MgmtDestinationNetworks(AvdList[str]):
        """Subclass of AvdList with `str` items."""

    Ipv6MgmtDestinationNetworks._item_type = str

    class IsisTiLfa(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "enabled": {"type": bool, "default": False},
            "protection": {"type": str},
            "local_convergence_delay": {"type": int, "default": 10000},
        }
        enabled: bool
        """Default value: `False`"""
        protection: Literal["link", "node"] | None
        local_convergence_delay: int
        """
        Local convergence delay in milliseconds.

        Default value: `10000`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enabled: bool | UndefinedType = Undefined,
                protection: Literal["link", "node"] | None | UndefinedType = Undefined,
                local_convergence_delay: int | UndefinedType = Undefined,
            ) -> None:
                """
                IsisTiLfa.


                Subclass of AvdModel.

                Args:
                    enabled: enabled
                    protection: protection
                    local_convergence_delay: Local convergence delay in milliseconds.

                """

    class L2vlanProfilesItem(AvdModel):
        """Subclass of AvdModel."""

        class TrunkGroups(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        TrunkGroups._item_type = str

        class EvpnL2Multicast(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}}
            enabled: bool | None

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                    """
                    EvpnL2Multicast.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled

                    """

        class VxlanFloodMulticast(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "underlay_multicast_group": {"type": str}}
            enabled: bool | None
            """
            Explicitly enable or disable vxlan_flood_multicast to override setting of
            `<network_services_key>.[].vxlan_flood_multicast.enabled`.
            """
            underlay_multicast_group: str | None
            """Specific multicast group to use for this VLAN."""

            if TYPE_CHECKING:

                def __init__(
                    self, *, enabled: bool | None | UndefinedType = Undefined, underlay_multicast_group: str | None | UndefinedType = Undefined
                ) -> None:
                    """
                    VxlanFloodMulticast.


                    Subclass of AvdModel.

                    Args:
                        enabled:
                           Explicitly enable or disable vxlan_flood_multicast to override setting of
                           `<network_services_key>.[].vxlan_flood_multicast.enabled`.
                        underlay_multicast_group: Specific multicast group to use for this VLAN.

                    """

        class IgmpSnoopingQuerier(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "source_address": {"type": str}, "version": {"type": int}, "fast_leave": {"type": bool}}
            enabled: bool | None
            """Will be enabled automatically if evpn_l2_multicast is enabled."""
            source_address: str | None
            """
            IPv4_address
            If not set, IP address of "Loopback0" will be used.
            """
            version: Literal[1, 2, 3] | None
            """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""
            fast_leave: bool | None
            """Enable IGMP snooping fast-leave feature."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    enabled: bool | None | UndefinedType = Undefined,
                    source_address: str | None | UndefinedType = Undefined,
                    version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                    fast_leave: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    IgmpSnoopingQuerier.


                    Subclass of AvdModel.

                    Args:
                        enabled: Will be enabled automatically if evpn_l2_multicast is enabled.
                        source_address:
                           IPv4_address
                           If not set, IP address of "Loopback0" will be used.
                        version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).
                        fast_leave: Enable IGMP snooping fast-leave feature.

                    """

        class Bgp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.RouterBgp.VlansItem}, "raw_eos_cli": {"type": str}}
            structured_config: EosCliConfigGen.RouterBgp.VlansItem
            """
            Custom structured config added under router_bgp.vlans.[id=<vlan>] for eos_cli_config_gen.
            This
            configuration will not be applied to vlan aware bundles.
            """
            raw_eos_cli: str | None
            """
            EOS cli commands rendered on router_bgp.vlans.
            This configuration will not be applied to vlan aware
            bundles.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    structured_config: EosCliConfigGen.RouterBgp.VlansItem | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    Bgp.


                    Subclass of AvdModel.

                    Args:
                        structured_config:
                           Custom structured config added under router_bgp.vlans.[id=<vlan>] for eos_cli_config_gen.
                           This
                           configuration will not be applied to vlan aware bundles.
                        raw_eos_cli:
                           EOS cli commands rendered on router_bgp.vlans.
                           This configuration will not be applied to vlan aware
                           bundles.

                    """

        class PrivateVlan(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"type": {"type": str}, "primary_vlan": {"type": int}}
            type: Literal["community", "isolated"]
            primary_vlan: int
            """Primary VLAN ID."""

            if TYPE_CHECKING:

                def __init__(
                    self, *, type: Literal["community", "isolated"] | UndefinedType = Undefined, primary_vlan: int | UndefinedType = Undefined
                ) -> None:
                    """
                    PrivateVlan.


                    Subclass of AvdModel.

                    Args:
                        type: type
                        primary_vlan: Primary VLAN ID.

                    """

        _fields: ClassVar[dict] = {
            "profile": {"type": str},
            "parent_profile": {"type": str},
            "address_locking": {"type": EosCliConfigGen.VlansItem.AddressLocking.AddressFamily},
            "vni_override": {"type": int},
            "rt_override": {"type": str},
            "rd_override": {"type": str},
            "vxlan": {"type": bool, "default": True},
            "spanning_tree_priority": {"type": int},
            "evpn_vlan_bundle": {"type": str},
            "trunk_groups": {"type": TrunkGroups},
            "evpn_l2_multi_domain": {"type": bool},
            "evpn_l2_multicast": {"type": EvpnL2Multicast},
            "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
            "igmp_snooping_enabled": {"type": bool},
            "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
            "bgp": {"type": Bgp},
            "private_vlan": {"type": PrivateVlan},
        }
        profile: str
        """Profile name."""
        parent_profile: str | None
        """
        Name of parent L2VLAN profile to apply.
        l2vlan_profiles can refer to another l2vlan_profile to
        inherit settings in up to two levels (l2vlan -> l2vlan_profile -> l2vlan_parent_profile).
        """
        address_locking: EosCliConfigGen.VlansItem.AddressLocking.AddressFamily
        vni_override: int | None
        """
        By default the VNI will be derived from mac_vrf_vni_base.
        The vni_override, allows to override this
        value and statically define it.
        """
        rt_override: str | None
        """
        By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
        The rt_override allows us
        to override this value and statically define it.
        rt_override will default to vni_override if set.
        rt_override supports two formats:
          - A single number which will be used in the RT fields instead of
        mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
          - A full RT string with colon
        separator which will override the full RT.
        """
        rd_override: str | None
        """
        By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
        The rt_override allows us
        to override this value and statically define it.
        rd_override will default to rt_override or
        vni_override if set.
        rd_override supports two formats:
          - A single number which will be used in the
        RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
          -
        A full RD string with colon separator which will override the full RD.
        """
        vxlan: bool
        """
        Extend this L2VLAN over VXLAN.

        Default value: `True`
        """
        spanning_tree_priority: int | None
        """
        Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
        under node type settings.
        The default priority for rapid-PVST is set under the node type settings
        with `spanning_tree_priority` (default=32768).
        """
        evpn_vlan_bundle: str | None
        """
        Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
        This setting overrides
        "evpn_vlan_bundle" set at tenant level.
        The common option "evpn_vlan_aware_bundles" is disregarded
        for this option.
        """
        trunk_groups: TrunkGroups
        """Subclass of AvdList with `str` items."""
        evpn_l2_multi_domain: bool | None
        """
        Explicitly extend this VLAN to remote EVPN domains.
        Overrides
        `<network_services_key>[].evpn_l2_multi_domain`.
        """
        evpn_l2_multicast: EvpnL2Multicast
        """
        Explicitly enable or disable evpn_l2_multicast to override setting of
        `<network_services_key>.[].evpn_l2_multicast.enabled`.
        When evpn_l2_multicast.enabled is set to true
        for a vlan or a tenant, igmp snooping and igmp snooping querier will always be enabled, overriding
        those individual settings.
        Requires `evpn_multicast` to also be set to `true`.


        Subclass of
        AvdModel.
        """
        vxlan_flood_multicast: VxlanFloodMulticast
        """Subclass of AvdModel."""
        igmp_snooping_enabled: bool | None
        """Enable or disable IGMP snooping (Enabled by default on EOS)."""
        igmp_snooping_querier: IgmpSnoopingQuerier
        """
        Enable igmp snooping querier, by default using IP address of Loopback 0.
        When enabled, igmp snooping
        querier will only be configured on l3 devices, i.e., uplink_type: p2p.


        Subclass of AvdModel.
        """
        bgp: Bgp
        """Subclass of AvdModel."""
        private_vlan: PrivateVlan
        """Subclass of AvdModel."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                profile: str | UndefinedType = Undefined,
                parent_profile: str | None | UndefinedType = Undefined,
                address_locking: EosCliConfigGen.VlansItem.AddressLocking.AddressFamily | UndefinedType = Undefined,
                vni_override: int | None | UndefinedType = Undefined,
                rt_override: str | None | UndefinedType = Undefined,
                rd_override: str | None | UndefinedType = Undefined,
                vxlan: bool | UndefinedType = Undefined,
                spanning_tree_priority: int | None | UndefinedType = Undefined,
                evpn_vlan_bundle: str | None | UndefinedType = Undefined,
                trunk_groups: TrunkGroups | UndefinedType = Undefined,
                evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                bgp: Bgp | UndefinedType = Undefined,
                private_vlan: PrivateVlan | UndefinedType = Undefined,
            ) -> None:
                """
                L2vlanProfilesItem.


                Subclass of AvdModel.

                Args:
                    profile: Profile name.
                    parent_profile:
                       Name of parent L2VLAN profile to apply.
                       l2vlan_profiles can refer to another l2vlan_profile to
                       inherit settings in up to two levels (l2vlan -> l2vlan_profile -> l2vlan_parent_profile).
                    address_locking: address_locking
                    vni_override:
                       By default the VNI will be derived from mac_vrf_vni_base.
                       The vni_override, allows to override this
                       value and statically define it.
                    rt_override:
                       By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                       The rt_override allows us
                       to override this value and statically define it.
                       rt_override will default to vni_override if set.
                       rt_override supports two formats:
                         - A single number which will be used in the RT fields instead of
                       mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                         - A full RT string with colon
                       separator which will override the full RT.
                    rd_override:
                       By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                       The rt_override allows us
                       to override this value and statically define it.
                       rd_override will default to rt_override or
                       vni_override if set.
                       rd_override supports two formats:
                         - A single number which will be used in the
                       RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                         -
                       A full RD string with colon separator which will override the full RD.
                    vxlan: Extend this L2VLAN over VXLAN.
                    spanning_tree_priority:
                       Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                       under node type settings.
                       The default priority for rapid-PVST is set under the node type settings
                       with `spanning_tree_priority` (default=32768).
                    evpn_vlan_bundle:
                       Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                       This setting overrides
                       "evpn_vlan_bundle" set at tenant level.
                       The common option "evpn_vlan_aware_bundles" is disregarded
                       for this option.
                    trunk_groups: Subclass of AvdList with `str` items.
                    evpn_l2_multi_domain:
                       Explicitly extend this VLAN to remote EVPN domains.
                       Overrides
                       `<network_services_key>[].evpn_l2_multi_domain`.
                    evpn_l2_multicast:
                       Explicitly enable or disable evpn_l2_multicast to override setting of
                       `<network_services_key>.[].evpn_l2_multicast.enabled`.
                       When evpn_l2_multicast.enabled is set to true
                       for a vlan or a tenant, igmp snooping and igmp snooping querier will always be enabled, overriding
                       those individual settings.
                       Requires `evpn_multicast` to also be set to `true`.


                       Subclass of
                       AvdModel.
                    vxlan_flood_multicast: Subclass of AvdModel.
                    igmp_snooping_enabled: Enable or disable IGMP snooping (Enabled by default on EOS).
                    igmp_snooping_querier:
                       Enable igmp snooping querier, by default using IP address of Loopback 0.
                       When enabled, igmp snooping
                       querier will only be configured on l3 devices, i.e., uplink_type: p2p.


                       Subclass of AvdModel.
                    bgp: Subclass of AvdModel.
                    private_vlan: Subclass of AvdModel.

                """

    class L2vlanProfiles(AvdIndexedList[str, L2vlanProfilesItem]):
        """Subclass of AvdIndexedList with `L2vlanProfilesItem` items. Primary key is `profile` (`str`)."""

        _primary_key: ClassVar[str] = "profile"

    L2vlanProfiles._item_type = L2vlanProfilesItem

    class L3Edge(AvdModel):
        """Subclass of AvdModel."""

        class P2pLinksIpPoolsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "ipv4_pool": {"type": str}, "prefix_size": {"type": int, "default": 31}}
            name: str
            """P2P pool name."""
            ipv4_pool: str | None
            """Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address)."""
            prefix_size: int
            """
            Subnet mask size.

            Default value: `31`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    ipv4_pool: str | None | UndefinedType = Undefined,
                    prefix_size: int | UndefinedType = Undefined,
                ) -> None:
                    """
                    P2pLinksIpPoolsItem.


                    Subclass of AvdModel.

                    Args:
                        name: P2P pool name.
                        ipv4_pool: Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        prefix_size: Subnet mask size.

                    """

        class P2pLinksIpPools(AvdIndexedList[str, P2pLinksIpPoolsItem]):
            """Subclass of AvdIndexedList with `P2pLinksIpPoolsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        P2pLinksIpPools._item_type = P2pLinksIpPoolsItem

        class P2pLinksProfilesItem(AvdModel):
            """Subclass of AvdModel."""

            class Ip(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Ip._item_type = str

            class Nodes(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Nodes._item_type = str

            class Interfaces(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Interfaces._item_type = str

            class As(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            As._item_type = str

            class Descriptions(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Descriptions._item_type = str

            class Ptp(AvdModel):
                """Subclass of AvdModel."""

                class Roles(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Roles._item_type = str

                _fields: ClassVar[dict] = {
                    "enabled": {"type": bool, "default": False},
                    "roles": {"type": Roles},
                    "profile": {"type": str, "default": "aes67-r16-2016"},
                }
                enabled: bool
                """
                Enable PTP.

                Default value: `False`
                """
                roles: Roles
                """
                Role in boundary clock mode for each node. Default is `dynamic`.

                Subclass of AvdList with `str`
                items.
                """
                profile: str
                """
                Default available profiles are:
                  - "aes67"
                  - "aes67-r16-2016"
                  - "smpte2059-2"

                Default value: `"aes67-r16-2016"`
                """

                if TYPE_CHECKING:

                    def __init__(
                        self, *, enabled: bool | UndefinedType = Undefined, roles: Roles | UndefinedType = Undefined, profile: str | UndefinedType = Undefined
                    ) -> None:
                        """
                        Ptp.


                        Subclass of AvdModel.

                        Args:
                            enabled: Enable PTP.
                            roles:
                               Role in boundary clock mode for each node. Default is `dynamic`.

                               Subclass of AvdList with `str`
                               items.
                            profile:
                               Default available profiles are:
                                 - "aes67"
                                 - "aes67-r16-2016"
                                 - "smpte2059-2"

                        """

            class FlowTracking(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                enabled: bool | None
                name: str | None
                """Flow tracker name as defined in flow_tracking_settings."""

                if TYPE_CHECKING:

                    def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                        """
                        FlowTracking.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled
                            name: Flow tracker name as defined in flow_tracking_settings.

                        """

            class PortChannel(AvdModel):
                """Subclass of AvdModel."""

                class NodesChildInterfacesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Interfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Interfaces._item_type = str

                    _fields: ClassVar[dict] = {"node": {"type": str}, "interfaces": {"type": Interfaces}, "channel_id": {"type": int}}
                    node: str
                    interfaces: Interfaces
                    """
                    List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                    Subclass of AvdList with
                    `str` items.
                    """
                    channel_id: int | None
                    """
                    Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                    `channel_id_algorithm`.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            node: str | UndefinedType = Undefined,
                            interfaces: Interfaces | UndefinedType = Undefined,
                            channel_id: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodesChildInterfacesItem.


                            Subclass of AvdModel.

                            Args:
                                node: node
                                interfaces:
                                   List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                                   Subclass of AvdList with
                                   `str` items.
                                channel_id:
                                   Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                                   `channel_id_algorithm`.

                            """

                class NodesChildInterfaces(AvdIndexedList[str, NodesChildInterfacesItem]):
                    """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                    _primary_key: ClassVar[str] = "node"

                NodesChildInterfaces._item_type = NodesChildInterfacesItem

                _fields: ClassVar[dict] = {
                    "description": {"type": str},
                    "mode": {"type": str, "default": "active"},
                    "channel_id_algorithm": {"type": str, "default": "first_port"},
                    "channel_id_offset": {"type": int},
                    "nodes_child_interfaces": {"type": NodesChildInterfaces},
                }
                description: str | None
                """
                Description or description template to be used on the port-channel interface.
                This can be a template
                using the AVD string formatter syntax:
                https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                descriptions-names.html#avd-string-formatter-syntax.
                The available template fields are:
                  - `peer`:
                The name of the peer.
                  - `interface`: The local port-channel interface name.
                  - `peer_interface`:
                The port-channel interface on the peer.
                  - `port_channel_id`: The local port-channel ID.
                  -
                `peer_port_channel_id`: The ID of the port-channel on the peer.

                Falls back to the description on
                the `p2p_link` if set. Otherwise default description is set by
                `default_underlay_p2p_port_channel_description`.
                By default the description is templated from the
                name and port_channel interface of the peer.
                """
                mode: Literal["on", "active", "passive"]
                """Default value: `"active"`"""
                channel_id_algorithm: Literal["first_port", "p2p_link_id"]
                """
                Configures how to derive the Port-Channel ID when not set.
                By default the ID is derived from the
                first switch port in node_child_interfaces[].interfaces.
                The `p2p_link_id` setting will use the `id`
                for each link plus the `channel_id_offset` to derive the Port-Channel ID.

                Default value: `"first_port"`
                """
                channel_id_offset: int | None
                """
                Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                `channel_id` is not set.
                """
                nodes_child_interfaces: NodesChildInterfaces
                """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        description: str | None | UndefinedType = Undefined,
                        mode: Literal["on", "active", "passive"] | UndefinedType = Undefined,
                        channel_id_algorithm: Literal["first_port", "p2p_link_id"] | UndefinedType = Undefined,
                        channel_id_offset: int | None | UndefinedType = Undefined,
                        nodes_child_interfaces: NodesChildInterfaces | UndefinedType = Undefined,
                    ) -> None:
                        """
                        PortChannel.


                        Subclass of AvdModel.

                        Args:
                            description:
                               Description or description template to be used on the port-channel interface.
                               This can be a template
                               using the AVD string formatter syntax:
                               https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                               descriptions-names.html#avd-string-formatter-syntax.
                               The available template fields are:
                                 - `peer`:
                               The name of the peer.
                                 - `interface`: The local port-channel interface name.
                                 - `peer_interface`:
                               The port-channel interface on the peer.
                                 - `port_channel_id`: The local port-channel ID.
                                 -
                               `peer_port_channel_id`: The ID of the port-channel on the peer.

                               Falls back to the description on
                               the `p2p_link` if set. Otherwise default description is set by
                               `default_underlay_p2p_port_channel_description`.
                               By default the description is templated from the
                               name and port_channel interface of the peer.
                            mode: mode
                            channel_id_algorithm:
                               Configures how to derive the Port-Channel ID when not set.
                               By default the ID is derived from the
                               first switch port in node_child_interfaces[].interfaces.
                               The `p2p_link_id` setting will use the `id`
                               for each link plus the `channel_id_offset` to derive the Port-Channel ID.
                            channel_id_offset:
                               Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                               `channel_id` is not set.
                            nodes_child_interfaces: Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`).

                        """

            class CampusLinkType(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            CampusLinkType._item_type = str

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "id": {"type": int},
                "speed": {"type": str},
                "ip_pool": {"type": str},
                "subnet": {"type": str},
                "ip": {"type": Ip},
                "ipv6_enable": {"type": bool, "default": False},
                "nodes": {"type": Nodes},
                "interfaces": {"type": Interfaces},
                "field_as": {"type": As},
                "descriptions": {"type": Descriptions},
                "include_in_underlay_protocol": {"type": bool, "default": True},
                "isis_hello_padding": {"type": bool, "default": True},
                "isis_metric": {"type": int},
                "isis_circuit_type": {"type": str},
                "isis_authentication_mode": {"type": str},
                "isis_authentication_key": {"type": str},
                "isis_authentication_cleartext_key": {"type": str},
                "isis_network_type": {"type": str, "default": "point-to-point"},
                "mpls_ip": {"type": bool},
                "mpls_ldp": {"type": bool},
                "mtu": {"type": int},
                "bfd": {"type": bool},
                "ptp": {"type": Ptp},
                "sflow": {"type": bool},
                "underlay_multicast": {"type": bool},
                "multicast_pim_sm": {"type": bool},
                "multicast_static": {"type": bool},
                "flow_tracking": {"type": FlowTracking},
                "qos_profile": {"type": str},
                "macsec_profile": {"type": str},
                "port_channel": {"type": PortChannel},
                "campus_link_type": {"type": CampusLinkType},
                "raw_eos_cli": {"type": str},
                "routing_protocol": {"type": str},
                "structured_config": {"type": dict},
                "ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                "port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
            }
            _field_to_key_map: ClassVar[dict] = {"field_as": "as"}
            _key_to_field_map: ClassVar[dict] = {"as": "field_as"}
            name: str
            """P2P profile name. Any variable supported under `p2p_links` can be inherited from a profile."""
            id: int | None
            """
            Unique id per subnet_summary. Used to calculate ip addresses.
            Required with ip_pool. ID starting
            from 1.
            """
            speed: str | None
            """
            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
            <interface_speed>`.
            """
            ip_pool: str | None
            """
            P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
            link.
            """
            subnet: str | None
            """IPv4 address/Mask. Subnet used on this P2P link."""
            ip: Ip
            """
            Specific IP addresses used on this P2P link.

            Subclass of AvdList with `str` items.
            """
            ipv6_enable: bool
            """
            Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
            include_in_underlay_protocol).

            Default value: `False`
            """
            nodes: Nodes
            """
            Nodes where this link should be configured.

            Subclass of AvdList with `str` items.
            """
            interfaces: Interfaces
            """
            Interfaces where this link should be configured and Required unless using port-channels.

            Subclass
            of AvdList with `str` items.
            """
            field_as: As
            """
            AS numbers for BGP.
            Required with bgp peering.


            Subclass of AvdList with `str` items.
            """
            descriptions: Descriptions
            """
            Interface descriptions.

            Subclass of AvdList with `str` items.
            """
            include_in_underlay_protocol: bool
            """
            Add this interface to underlay routing protocol.

            Default value: `True`
            """
            isis_hello_padding: bool
            """Default value: `True`"""
            isis_metric: int | None
            isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None
            isis_authentication_mode: Literal["md5", "text"] | None
            isis_authentication_key: str | None
            """
            Type-7 encrypted password.
            Takes precedence over 'underlay_isis_authentication_key',
            'underlay_isis_authentication_cleartext_key'
            and `isis_authentication_cleartext_key`.
            """
            isis_authentication_cleartext_key: str | None
            """
            Cleartext password.
            Encrypted to Type 7 by AVD.
            Takes precedence over
            'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
            To protect the
            password at rest it is strongly recommended to make use of a vault or similar.
            """
            isis_network_type: Literal["point-to-point", "broadcast"]
            """Default value: `"point-to-point"`"""
            mpls_ip: bool | None
            """MPLS parameters. Default value is true if switch.mpls_lsr is true."""
            mpls_ldp: bool | None
            """MPLS parameters. Default value is true for ldp underlay variants, otherwise false."""
            mtu: int | None
            """MTU for this P2P link. Default value same as p2p_uplinks_mtu."""
            bfd: bool | None
            """Enable BFD (only considered for BGP)."""
            ptp: Ptp
            """
            PTP parameters.

            Subclass of AvdModel.
            """
            sflow: bool | None
            """Enable sFlow. Overrides `fabric_sflow` setting."""
            underlay_multicast: bool | None
            """
            Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
            to be `true`.

            Note: The default value for this key is `false` when using either the new key
            `underlay_multicast.pim_sm.enabled: true
            or, if unset, global `underlay_multicast_pim_sm: true`
            """
            multicast_pim_sm: bool | None
            """
            Configure PIM sparse-mode on the P2P links.
            Requires node setting
            `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            multicast_static: bool | None
            """
            Configure static multicast on the P2P links.
            Requires node setting
            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            flow_tracking: FlowTracking
            """
            Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

            Subclass of AvdModel.
            """
            qos_profile: str | None
            """QOS service profile."""
            macsec_profile: str | None
            """MAC security profile."""
            port_channel: PortChannel
            """
            Port-channel parameters.

            Subclass of AvdModel.
            """
            campus_link_type: CampusLinkType
            """
            PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
            change at any time.
            Values for the CloudVision `Link-Type` user tags to be associated with an
            interface.
            Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
            in the same tags being associated with the parent Ethernet interface instead.
            Attempting to
            associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
            associated with the member Ethernet interfaces instead.

            Subclass of AvdList with `str` items.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the point-to-point interface in the final EOS configuration."""
            routing_protocol: Literal["ebgp"] | None
            """
            Enables deviation of the routing protocol used on this link from the fabric underlay default.
            -
            ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
            configured.
            """
            structured_config: dict
            """
            Custom structured config for interfaces.
            Note! The content of this dictionary is _not_ validated by
            the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
            """
            ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
            """Custom structured config for ethernet interfaces."""
            port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
            """Custom structured config for port-channel links."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    id: int | None | UndefinedType = Undefined,
                    speed: str | None | UndefinedType = Undefined,
                    ip_pool: str | None | UndefinedType = Undefined,
                    subnet: str | None | UndefinedType = Undefined,
                    ip: Ip | UndefinedType = Undefined,
                    ipv6_enable: bool | UndefinedType = Undefined,
                    nodes: Nodes | UndefinedType = Undefined,
                    interfaces: Interfaces | UndefinedType = Undefined,
                    field_as: As | UndefinedType = Undefined,
                    descriptions: Descriptions | UndefinedType = Undefined,
                    include_in_underlay_protocol: bool | UndefinedType = Undefined,
                    isis_hello_padding: bool | UndefinedType = Undefined,
                    isis_metric: int | None | UndefinedType = Undefined,
                    isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None | UndefinedType = Undefined,
                    isis_authentication_mode: Literal["md5", "text"] | None | UndefinedType = Undefined,
                    isis_authentication_key: str | None | UndefinedType = Undefined,
                    isis_authentication_cleartext_key: str | None | UndefinedType = Undefined,
                    isis_network_type: Literal["point-to-point", "broadcast"] | UndefinedType = Undefined,
                    mpls_ip: bool | None | UndefinedType = Undefined,
                    mpls_ldp: bool | None | UndefinedType = Undefined,
                    mtu: int | None | UndefinedType = Undefined,
                    bfd: bool | None | UndefinedType = Undefined,
                    ptp: Ptp | UndefinedType = Undefined,
                    sflow: bool | None | UndefinedType = Undefined,
                    underlay_multicast: bool | None | UndefinedType = Undefined,
                    multicast_pim_sm: bool | None | UndefinedType = Undefined,
                    multicast_static: bool | None | UndefinedType = Undefined,
                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                    qos_profile: str | None | UndefinedType = Undefined,
                    macsec_profile: str | None | UndefinedType = Undefined,
                    port_channel: PortChannel | UndefinedType = Undefined,
                    campus_link_type: CampusLinkType | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    routing_protocol: Literal["ebgp"] | None | UndefinedType = Undefined,
                    structured_config: dict | UndefinedType = Undefined,
                    ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                    port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    P2pLinksProfilesItem.


                    Subclass of AvdModel.

                    Args:
                        name: P2P profile name. Any variable supported under `p2p_links` can be inherited from a profile.
                        id:
                           Unique id per subnet_summary. Used to calculate ip addresses.
                           Required with ip_pool. ID starting
                           from 1.
                        speed:
                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                           <interface_speed>`.
                        ip_pool:
                           P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
                           link.
                        subnet: IPv4 address/Mask. Subnet used on this P2P link.
                        ip:
                           Specific IP addresses used on this P2P link.

                           Subclass of AvdList with `str` items.
                        ipv6_enable:
                           Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
                           include_in_underlay_protocol).
                        nodes:
                           Nodes where this link should be configured.

                           Subclass of AvdList with `str` items.
                        interfaces:
                           Interfaces where this link should be configured and Required unless using port-channels.

                           Subclass
                           of AvdList with `str` items.
                        field_as:
                           AS numbers for BGP.
                           Required with bgp peering.


                           Subclass of AvdList with `str` items.
                        descriptions:
                           Interface descriptions.

                           Subclass of AvdList with `str` items.
                        include_in_underlay_protocol: Add this interface to underlay routing protocol.
                        isis_hello_padding: isis_hello_padding
                        isis_metric: isis_metric
                        isis_circuit_type: isis_circuit_type
                        isis_authentication_mode: isis_authentication_mode
                        isis_authentication_key:
                           Type-7 encrypted password.
                           Takes precedence over 'underlay_isis_authentication_key',
                           'underlay_isis_authentication_cleartext_key'
                           and `isis_authentication_cleartext_key`.
                        isis_authentication_cleartext_key:
                           Cleartext password.
                           Encrypted to Type 7 by AVD.
                           Takes precedence over
                           'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
                           To protect the
                           password at rest it is strongly recommended to make use of a vault or similar.
                        isis_network_type: isis_network_type
                        mpls_ip: MPLS parameters. Default value is true if switch.mpls_lsr is true.
                        mpls_ldp: MPLS parameters. Default value is true for ldp underlay variants, otherwise false.
                        mtu: MTU for this P2P link. Default value same as p2p_uplinks_mtu.
                        bfd: Enable BFD (only considered for BGP).
                        ptp:
                           PTP parameters.

                           Subclass of AvdModel.
                        sflow: Enable sFlow. Overrides `fabric_sflow` setting.
                        underlay_multicast:
                           Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
                           to be `true`.

                           Note: The default value for this key is `false` when using either the new key
                           `underlay_multicast.pim_sm.enabled: true
                           or, if unset, global `underlay_multicast_pim_sm: true`
                        multicast_pim_sm:
                           Configure PIM sparse-mode on the P2P links.
                           Requires node setting
                           `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        multicast_static:
                           Configure static multicast on the P2P links.
                           Requires node setting
                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        flow_tracking:
                           Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

                           Subclass of AvdModel.
                        qos_profile: QOS service profile.
                        macsec_profile: MAC security profile.
                        port_channel:
                           Port-channel parameters.

                           Subclass of AvdModel.
                        campus_link_type:
                           PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                           change at any time.
                           Values for the CloudVision `Link-Type` user tags to be associated with an
                           interface.
                           Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                           in the same tags being associated with the parent Ethernet interface instead.
                           Attempting to
                           associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                           associated with the member Ethernet interfaces instead.

                           Subclass of AvdList with `str` items.
                        raw_eos_cli: EOS CLI rendered directly on the point-to-point interface in the final EOS configuration.
                        routing_protocol:
                           Enables deviation of the routing protocol used on this link from the fabric underlay default.
                           -
                           ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
                           configured.
                        structured_config:
                           Custom structured config for interfaces.
                           Note! The content of this dictionary is _not_ validated by
                           the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                        ethernet_structured_config: Custom structured config for ethernet interfaces.
                        port_channel_structured_config: Custom structured config for port-channel links.

                    """

        class P2pLinksProfiles(AvdIndexedList[str, P2pLinksProfilesItem]):
            """Subclass of AvdIndexedList with `P2pLinksProfilesItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        P2pLinksProfiles._item_type = P2pLinksProfilesItem

        class P2pLinksItem(AvdModel):
            """Subclass of AvdModel."""

            class Nodes(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Nodes._item_type = str

            class Ip(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Ip._item_type = str

            class Interfaces(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Interfaces._item_type = str

            class As(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            As._item_type = str

            class Descriptions(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Descriptions._item_type = str

            class Ptp(AvdModel):
                """Subclass of AvdModel."""

                class Roles(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Roles._item_type = str

                _fields: ClassVar[dict] = {
                    "enabled": {"type": bool, "default": False},
                    "roles": {"type": Roles},
                    "profile": {"type": str, "default": "aes67-r16-2016"},
                }
                enabled: bool
                """
                Enable PTP.

                Default value: `False`
                """
                roles: Roles
                """
                Role in boundary clock mode for each node. Default is `dynamic`.

                Subclass of AvdList with `str`
                items.
                """
                profile: str
                """
                Default available profiles are:
                  - "aes67"
                  - "aes67-r16-2016"
                  - "smpte2059-2"

                Default value: `"aes67-r16-2016"`
                """

                if TYPE_CHECKING:

                    def __init__(
                        self, *, enabled: bool | UndefinedType = Undefined, roles: Roles | UndefinedType = Undefined, profile: str | UndefinedType = Undefined
                    ) -> None:
                        """
                        Ptp.


                        Subclass of AvdModel.

                        Args:
                            enabled: Enable PTP.
                            roles:
                               Role in boundary clock mode for each node. Default is `dynamic`.

                               Subclass of AvdList with `str`
                               items.
                            profile:
                               Default available profiles are:
                                 - "aes67"
                                 - "aes67-r16-2016"
                                 - "smpte2059-2"

                        """

            class FlowTracking(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                enabled: bool | None
                name: str | None
                """Flow tracker name as defined in flow_tracking_settings."""

                if TYPE_CHECKING:

                    def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                        """
                        FlowTracking.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled
                            name: Flow tracker name as defined in flow_tracking_settings.

                        """

            class PortChannel(AvdModel):
                """Subclass of AvdModel."""

                class NodesChildInterfacesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Interfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Interfaces._item_type = str

                    _fields: ClassVar[dict] = {"node": {"type": str}, "interfaces": {"type": Interfaces}, "channel_id": {"type": int}}
                    node: str
                    interfaces: Interfaces
                    """
                    List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                    Subclass of AvdList with
                    `str` items.
                    """
                    channel_id: int | None
                    """
                    Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                    `channel_id_algorithm`.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            node: str | UndefinedType = Undefined,
                            interfaces: Interfaces | UndefinedType = Undefined,
                            channel_id: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodesChildInterfacesItem.


                            Subclass of AvdModel.

                            Args:
                                node: node
                                interfaces:
                                   List of node interfaces. Ex.- [ 'node1 interface1', 'node1 interface2' ].

                                   Subclass of AvdList with
                                   `str` items.
                                channel_id:
                                   Port-Channel ID. If no `channel_id` is specified, an id is generated using the
                                   `channel_id_algorithm`.

                            """

                class NodesChildInterfaces(AvdIndexedList[str, NodesChildInterfacesItem]):
                    """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                    _primary_key: ClassVar[str] = "node"

                NodesChildInterfaces._item_type = NodesChildInterfacesItem

                _fields: ClassVar[dict] = {
                    "description": {"type": str},
                    "mode": {"type": str, "default": "active"},
                    "channel_id_algorithm": {"type": str, "default": "first_port"},
                    "channel_id_offset": {"type": int},
                    "nodes_child_interfaces": {"type": NodesChildInterfaces},
                }
                description: str | None
                """
                Description or description template to be used on the port-channel interface.
                This can be a template
                using the AVD string formatter syntax:
                https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                descriptions-names.html#avd-string-formatter-syntax.
                The available template fields are:
                  - `peer`:
                The name of the peer.
                  - `interface`: The local port-channel interface name.
                  - `peer_interface`:
                The port-channel interface on the peer.
                  - `port_channel_id`: The local port-channel ID.
                  -
                `peer_port_channel_id`: The ID of the port-channel on the peer.

                Falls back to the description on
                the `p2p_link` if set. Otherwise default description is set by
                `default_underlay_p2p_port_channel_description`.
                By default the description is templated from the
                name and port_channel interface of the peer.
                """
                mode: Literal["on", "active", "passive"]
                """Default value: `"active"`"""
                channel_id_algorithm: Literal["first_port", "p2p_link_id"]
                """
                Configures how to derive the Port-Channel ID when not set.
                By default the ID is derived from the
                first switch port in node_child_interfaces[].interfaces.
                The `p2p_link_id` setting will use the `id`
                for each link plus the `channel_id_offset` to derive the Port-Channel ID.

                Default value: `"first_port"`
                """
                channel_id_offset: int | None
                """
                Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                `channel_id` is not set.
                """
                nodes_child_interfaces: NodesChildInterfaces
                """Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`)."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        description: str | None | UndefinedType = Undefined,
                        mode: Literal["on", "active", "passive"] | UndefinedType = Undefined,
                        channel_id_algorithm: Literal["first_port", "p2p_link_id"] | UndefinedType = Undefined,
                        channel_id_offset: int | None | UndefinedType = Undefined,
                        nodes_child_interfaces: NodesChildInterfaces | UndefinedType = Undefined,
                    ) -> None:
                        """
                        PortChannel.


                        Subclass of AvdModel.

                        Args:
                            description:
                               Description or description template to be used on the port-channel interface.
                               This can be a template
                               using the AVD string formatter syntax:
                               https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                               descriptions-names.html#avd-string-formatter-syntax.
                               The available template fields are:
                                 - `peer`:
                               The name of the peer.
                                 - `interface`: The local port-channel interface name.
                                 - `peer_interface`:
                               The port-channel interface on the peer.
                                 - `port_channel_id`: The local port-channel ID.
                                 -
                               `peer_port_channel_id`: The ID of the port-channel on the peer.

                               Falls back to the description on
                               the `p2p_link` if set. Otherwise default description is set by
                               `default_underlay_p2p_port_channel_description`.
                               By default the description is templated from the
                               name and port_channel interface of the peer.
                            mode: mode
                            channel_id_algorithm:
                               Configures how to derive the Port-Channel ID when not set.
                               By default the ID is derived from the
                               first switch port in node_child_interfaces[].interfaces.
                               The `p2p_link_id` setting will use the `id`
                               for each link plus the `channel_id_offset` to derive the Port-Channel ID.
                            channel_id_offset:
                               Offset added to the ID of the p2p_link when `channel_id_algorithm` is set to `p2p_link_id` and
                               `channel_id` is not set.
                            nodes_child_interfaces: Subclass of AvdIndexedList with `NodesChildInterfacesItem` items. Primary key is `node` (`str`).

                        """

            class CampusLinkType(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            CampusLinkType._item_type = str

            _fields: ClassVar[dict] = {
                "nodes": {"type": Nodes},
                "profile": {"type": str},
                "id": {"type": int},
                "speed": {"type": str},
                "ip_pool": {"type": str},
                "subnet": {"type": str},
                "ip": {"type": Ip},
                "ipv6_enable": {"type": bool, "default": False},
                "interfaces": {"type": Interfaces},
                "field_as": {"type": As},
                "descriptions": {"type": Descriptions},
                "include_in_underlay_protocol": {"type": bool, "default": True},
                "isis_hello_padding": {"type": bool, "default": True},
                "isis_metric": {"type": int},
                "isis_circuit_type": {"type": str},
                "isis_authentication_mode": {"type": str},
                "isis_authentication_key": {"type": str},
                "isis_authentication_cleartext_key": {"type": str},
                "isis_network_type": {"type": str, "default": "point-to-point"},
                "mpls_ip": {"type": bool},
                "mpls_ldp": {"type": bool},
                "mtu": {"type": int},
                "bfd": {"type": bool},
                "ptp": {"type": Ptp},
                "sflow": {"type": bool},
                "underlay_multicast": {"type": bool},
                "multicast_pim_sm": {"type": bool},
                "multicast_static": {"type": bool},
                "flow_tracking": {"type": FlowTracking},
                "qos_profile": {"type": str},
                "macsec_profile": {"type": str},
                "port_channel": {"type": PortChannel},
                "campus_link_type": {"type": CampusLinkType},
                "raw_eos_cli": {"type": str},
                "routing_protocol": {"type": str},
                "structured_config": {"type": dict},
                "ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                "port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
            }
            _field_to_key_map: ClassVar[dict] = {"field_as": "as"}
            _key_to_field_map: ClassVar[dict] = {"as": "field_as"}
            nodes: Nodes
            """
            Nodes where this link should be configured.

            Subclass of AvdList with `str` items.
            """
            profile: str | None
            """P2P profile name. Profile defined under p2p_profiles."""
            id: int | None
            """
            Unique id per subnet_summary. Used to calculate ip addresses.
            Required with ip_pool. ID starting
            from 1.
            """
            speed: str | None
            """
            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
            <interface_speed>`.
            """
            ip_pool: str | None
            """
            P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
            link.
            """
            subnet: str | None
            """IPv4 address/Mask. Subnet used on this P2P link."""
            ip: Ip
            """
            Specific IP addresses used on this P2P link.

            Subclass of AvdList with `str` items.
            """
            ipv6_enable: bool
            """
            Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
            include_in_underlay_protocol).

            Default value: `False`
            """
            interfaces: Interfaces
            """
            Interfaces where this link should be configured and Required unless using port-channels.

            Subclass
            of AvdList with `str` items.
            """
            field_as: As
            """
            AS numbers for BGP.
            Required with bgp peering.


            Subclass of AvdList with `str` items.
            """
            descriptions: Descriptions
            """
            Interface descriptions.

            Subclass of AvdList with `str` items.
            """
            include_in_underlay_protocol: bool
            """
            Add this interface to underlay routing protocol.

            Default value: `True`
            """
            isis_hello_padding: bool
            """Default value: `True`"""
            isis_metric: int | None
            isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None
            isis_authentication_mode: Literal["md5", "text"] | None
            isis_authentication_key: str | None
            """
            Type-7 encrypted password.
            Takes precedence over 'underlay_isis_authentication_key',
            'underlay_isis_authentication_cleartext_key'
            and `isis_authentication_cleartext_key`.
            """
            isis_authentication_cleartext_key: str | None
            """
            Cleartext password.
            Encrypted to Type 7 by AVD.
            Takes precedence over
            'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
            To protect the
            password at rest it is strongly recommended to make use of a vault or similar.
            """
            isis_network_type: Literal["point-to-point", "broadcast"]
            """Default value: `"point-to-point"`"""
            mpls_ip: bool | None
            """MPLS parameters. Default value is true if switch.mpls_lsr is true."""
            mpls_ldp: bool | None
            """MPLS parameters. Default value is true for ldp underlay variants, otherwise false."""
            mtu: int | None
            """MTU for this P2P link. Default value same as p2p_uplinks_mtu."""
            bfd: bool | None
            """Enable BFD (only considered for BGP)."""
            ptp: Ptp
            """
            PTP parameters.

            Subclass of AvdModel.
            """
            sflow: bool | None
            """Enable sFlow. Overrides `fabric_sflow` setting."""
            underlay_multicast: bool | None
            """
            Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
            to be `true`.

            Note: The default value for this key is `false` when using either the new key
            `underlay_multicast.pim_sm.enabled: true
            or, if unset, global `underlay_multicast_pim_sm: true`
            """
            multicast_pim_sm: bool | None
            """
            Configure PIM sparse-mode on the P2P links.
            Requires node setting
            `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            multicast_static: bool | None
            """
            Configure static multicast on the P2P links.
            Requires node setting
            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
            The
            default value depends on the value of `include_in_underlay_protocol`:
            * when
            `include_in_underlay_protocol: true`, the default value is `true`
            * when
            `include_in_underlay_protocol: false`, the default value is `false`.
            """
            flow_tracking: FlowTracking
            """
            Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

            Subclass of AvdModel.
            """
            qos_profile: str | None
            """QOS service profile."""
            macsec_profile: str | None
            """MAC security profile."""
            port_channel: PortChannel
            """
            Port-channel parameters.

            Subclass of AvdModel.
            """
            campus_link_type: CampusLinkType
            """
            PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
            change at any time.
            Values for the CloudVision `Link-Type` user tags to be associated with an
            interface.
            Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
            in the same tags being associated with the parent Ethernet interface instead.
            Attempting to
            associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
            associated with the member Ethernet interfaces instead.

            Subclass of AvdList with `str` items.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the point-to-point interface in the final EOS configuration."""
            routing_protocol: Literal["ebgp"] | None
            """
            Enables deviation of the routing protocol used on this link from the fabric underlay default.
            -
            ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
            configured.
            """
            structured_config: dict
            """
            Custom structured config for interfaces.
            Note! The content of this dictionary is _not_ validated by
            the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
            """
            ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
            """Custom structured config for ethernet interfaces."""
            port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
            """Custom structured config for port-channel links."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    nodes: Nodes | UndefinedType = Undefined,
                    profile: str | None | UndefinedType = Undefined,
                    id: int | None | UndefinedType = Undefined,
                    speed: str | None | UndefinedType = Undefined,
                    ip_pool: str | None | UndefinedType = Undefined,
                    subnet: str | None | UndefinedType = Undefined,
                    ip: Ip | UndefinedType = Undefined,
                    ipv6_enable: bool | UndefinedType = Undefined,
                    interfaces: Interfaces | UndefinedType = Undefined,
                    field_as: As | UndefinedType = Undefined,
                    descriptions: Descriptions | UndefinedType = Undefined,
                    include_in_underlay_protocol: bool | UndefinedType = Undefined,
                    isis_hello_padding: bool | UndefinedType = Undefined,
                    isis_metric: int | None | UndefinedType = Undefined,
                    isis_circuit_type: Literal["level-1", "level-2", "level-1-2"] | None | UndefinedType = Undefined,
                    isis_authentication_mode: Literal["md5", "text"] | None | UndefinedType = Undefined,
                    isis_authentication_key: str | None | UndefinedType = Undefined,
                    isis_authentication_cleartext_key: str | None | UndefinedType = Undefined,
                    isis_network_type: Literal["point-to-point", "broadcast"] | UndefinedType = Undefined,
                    mpls_ip: bool | None | UndefinedType = Undefined,
                    mpls_ldp: bool | None | UndefinedType = Undefined,
                    mtu: int | None | UndefinedType = Undefined,
                    bfd: bool | None | UndefinedType = Undefined,
                    ptp: Ptp | UndefinedType = Undefined,
                    sflow: bool | None | UndefinedType = Undefined,
                    underlay_multicast: bool | None | UndefinedType = Undefined,
                    multicast_pim_sm: bool | None | UndefinedType = Undefined,
                    multicast_static: bool | None | UndefinedType = Undefined,
                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                    qos_profile: str | None | UndefinedType = Undefined,
                    macsec_profile: str | None | UndefinedType = Undefined,
                    port_channel: PortChannel | UndefinedType = Undefined,
                    campus_link_type: CampusLinkType | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    routing_protocol: Literal["ebgp"] | None | UndefinedType = Undefined,
                    structured_config: dict | UndefinedType = Undefined,
                    ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                    port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    P2pLinksItem.


                    Subclass of AvdModel.

                    Args:
                        nodes:
                           Nodes where this link should be configured.

                           Subclass of AvdList with `str` items.
                        profile: P2P profile name. Profile defined under p2p_profiles.
                        id:
                           Unique id per subnet_summary. Used to calculate ip addresses.
                           Required with ip_pool. ID starting
                           from 1.
                        speed:
                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                           <interface_speed>`.
                        ip_pool:
                           P2P pool name. IP Pool defined under p2p_links_ip_pools. A /31 will be taken from the pool per P2P
                           link.
                        subnet: IPv4 address/Mask. Subnet used on this P2P link.
                        ip:
                           Specific IP addresses used on this P2P link.

                           Subclass of AvdList with `str` items.
                        ipv6_enable:
                           Allows turning on ipv6 for the link or profile (also autodetected based on underlay_rfc5549 and
                           include_in_underlay_protocol).
                        interfaces:
                           Interfaces where this link should be configured and Required unless using port-channels.

                           Subclass
                           of AvdList with `str` items.
                        field_as:
                           AS numbers for BGP.
                           Required with bgp peering.


                           Subclass of AvdList with `str` items.
                        descriptions:
                           Interface descriptions.

                           Subclass of AvdList with `str` items.
                        include_in_underlay_protocol: Add this interface to underlay routing protocol.
                        isis_hello_padding: isis_hello_padding
                        isis_metric: isis_metric
                        isis_circuit_type: isis_circuit_type
                        isis_authentication_mode: isis_authentication_mode
                        isis_authentication_key:
                           Type-7 encrypted password.
                           Takes precedence over 'underlay_isis_authentication_key',
                           'underlay_isis_authentication_cleartext_key'
                           and `isis_authentication_cleartext_key`.
                        isis_authentication_cleartext_key:
                           Cleartext password.
                           Encrypted to Type 7 by AVD.
                           Takes precedence over
                           'underlay_isis_authentication_key' and 'underlay_isis_authentication_cleartext_key'.
                           To protect the
                           password at rest it is strongly recommended to make use of a vault or similar.
                        isis_network_type: isis_network_type
                        mpls_ip: MPLS parameters. Default value is true if switch.mpls_lsr is true.
                        mpls_ldp: MPLS parameters. Default value is true for ldp underlay variants, otherwise false.
                        mtu: MTU for this P2P link. Default value same as p2p_uplinks_mtu.
                        bfd: Enable BFD (only considered for BGP).
                        ptp:
                           PTP parameters.

                           Subclass of AvdModel.
                        sflow: Enable sFlow. Overrides `fabric_sflow` setting.
                        underlay_multicast:
                           Enable PIM sparse mode. Requires `include_in_underlay_protocol` and the global `underlay_multicast`
                           to be `true`.

                           Note: The default value for this key is `false` when using either the new key
                           `underlay_multicast.pim_sm.enabled: true
                           or, if unset, global `underlay_multicast_pim_sm: true`
                        multicast_pim_sm:
                           Configure PIM sparse-mode on the P2P links.
                           Requires node setting
                           `underlay_multicast.pim_sm.enabled: true` or, if unset, global `underlay_multicast_pim_sm: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        multicast_static:
                           Configure static multicast on the P2P links.
                           Requires node setting
                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                           The
                           default value depends on the value of `include_in_underlay_protocol`:
                           * when
                           `include_in_underlay_protocol: true`, the default value is `true`
                           * when
                           `include_in_underlay_protocol: false`, the default value is `false`.
                        flow_tracking:
                           Enable flow-tracking. Overrides `fabric_flow_tracking` setting.

                           Subclass of AvdModel.
                        qos_profile: QOS service profile.
                        macsec_profile: MAC security profile.
                        port_channel:
                           Port-channel parameters.

                           Subclass of AvdModel.
                        campus_link_type:
                           PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                           change at any time.
                           Values for the CloudVision `Link-Type` user tags to be associated with an
                           interface.
                           Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                           in the same tags being associated with the parent Ethernet interface instead.
                           Attempting to
                           associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                           associated with the member Ethernet interfaces instead.

                           Subclass of AvdList with `str` items.
                        raw_eos_cli: EOS CLI rendered directly on the point-to-point interface in the final EOS configuration.
                        routing_protocol:
                           Enables deviation of the routing protocol used on this link from the fabric underlay default.
                           -
                           ebgp: Enforce plain IPv4 BGP peering and exempt the neighbor from the RFC5549 underlay if
                           configured.
                        structured_config:
                           Custom structured config for interfaces.
                           Note! The content of this dictionary is _not_ validated by
                           the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                        ethernet_structured_config: Custom structured config for ethernet interfaces.
                        port_channel_structured_config: Custom structured config for port-channel links.

                    """

        class P2pLinks(AvdList[P2pLinksItem]):
            """Subclass of AvdList with `P2pLinksItem` items."""

        P2pLinks._item_type = P2pLinksItem

        _fields: ClassVar[dict] = {
            "p2p_links_ip_pools": {"type": P2pLinksIpPools},
            "p2p_links_profiles": {"type": P2pLinksProfiles},
            "p2p_links": {"type": P2pLinks},
        }
        p2p_links_ip_pools: P2pLinksIpPools
        """Subclass of AvdIndexedList with `P2pLinksIpPoolsItem` items. Primary key is `name` (`str`)."""
        p2p_links_profiles: P2pLinksProfiles
        """Subclass of AvdIndexedList with `P2pLinksProfilesItem` items. Primary key is `name` (`str`)."""
        p2p_links: P2pLinks
        """Subclass of AvdList with `P2pLinksItem` items."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                p2p_links_ip_pools: P2pLinksIpPools | UndefinedType = Undefined,
                p2p_links_profiles: P2pLinksProfiles | UndefinedType = Undefined,
                p2p_links: P2pLinks | UndefinedType = Undefined,
            ) -> None:
                """
                L3Edge.


                Subclass of AvdModel.

                Args:
                    p2p_links_ip_pools: Subclass of AvdIndexedList with `P2pLinksIpPoolsItem` items. Primary key is `name` (`str`).
                    p2p_links_profiles: Subclass of AvdIndexedList with `P2pLinksProfilesItem` items. Primary key is `name` (`str`).
                    p2p_links: Subclass of AvdList with `P2pLinksItem` items.

                """

    class L3InterfaceProfilesItem(AvdModel):
        """Subclass of AvdModel."""

        class Bgp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
            peer_as: str
            """
            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
            For asdot notation in
            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
            number.
            """
            ipv4_prefix_list_in: str | None
            """
            Prefix List Name. Accept routes for only these prefixes from the peer.
            Required for wan interfaces.
            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
            """
            ipv4_prefix_list_out: str | None
            """
            Prefix List Name. Advertise routes for only these prefixes.
            If not specified, nothing would be
            advertised.
            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    peer_as: str | UndefinedType = Undefined,
                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    Bgp.


                    Subclass of AvdModel.

                    Args:
                        peer_as:
                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                           For asdot notation in
                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                           number.
                        ipv4_prefix_list_in:
                           Prefix List Name. Accept routes for only these prefixes from the peer.
                           Required for wan interfaces.
                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                        ipv4_prefix_list_out:
                           Prefix List Name. Advertise routes for only these prefixes.
                           If not specified, nothing would be
                           advertised.
                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                    """

        class StaticRoutesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"prefix": {"type": str}}
            prefix: str
            """IPv4_network/Mask."""

            if TYPE_CHECKING:

                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                    """
                    StaticRoutesItem.


                    Subclass of AvdModel.

                    Args:
                        prefix: IPv4_network/Mask.

                    """

        class StaticRoutes(AvdList[StaticRoutesItem]):
            """Subclass of AvdList with `StaticRoutesItem` items."""

        StaticRoutes._item_type = StaticRoutesItem

        class CvPathfinderInternetExit(AvdModel):
            """Subclass of AvdModel."""

            class PoliciesItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                name: str
                """Internet-exit policy name."""
                tunnel_interface_numbers: str | None
                """
                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                interface.
                Examples: '1-3' or '100,200,300'
                """

                if TYPE_CHECKING:

                    def __init__(self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined) -> None:
                        """
                        PoliciesItem.


                        Subclass of AvdModel.

                        Args:
                            name: Internet-exit policy name.
                            tunnel_interface_numbers:
                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                               interface.
                               Examples: '1-3' or '100,200,300'

                        """

            class Policies(AvdIndexedList[str, PoliciesItem]):
                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Policies._item_type = PoliciesItem

            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
            policies: Policies
            """
            List of Internet-exit policies using this interface as exit.

            Subclass of AvdIndexedList with
            `PoliciesItem` items. Primary key is `name` (`str`).
            """

            if TYPE_CHECKING:

                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                    """
                    CvPathfinderInternetExit.


                    Subclass of AvdModel.

                    Args:
                        policies:
                           List of Internet-exit policies using this interface as exit.

                           Subclass of AvdIndexedList with
                           `PoliciesItem` items. Primary key is `name` (`str`).

                    """

        class RxQueue(AvdModel):
            """Subclass of AvdModel."""

            class Workers(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Workers._item_type = str

            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
            count: int | None
            """
            Number of receive queues.
            The maximum value is determined by
            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
            `platform` set on this device.
            """
            workers: Workers
            """Subclass of AvdList with `str` items."""
            mode: Literal["shared", "exclusive"] | None
            """Mode applicable to the workers."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    count: int | None | UndefinedType = Undefined,
                    workers: Workers | UndefinedType = Undefined,
                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    RxQueue.


                    Subclass of AvdModel.

                    Args:
                        count:
                           Number of receive queues.
                           The maximum value is determined by
                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                           `platform` set on this device.
                        workers: Subclass of AvdList with `str` items.
                        mode: Mode applicable to the workers.

                    """

        class FlowTracking(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
            enabled: bool | None
            name: str | None
            """Flow tracker name as defined in flow_tracking_settings."""

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                    """
                    FlowTracking.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        _fields: ClassVar[dict] = {
            "profile": {"type": str},
            "name": {"type": str},
            "description": {"type": str},
            "ip_address": {"type": str},
            "dhcp_ip": {"type": str},
            "public_ip": {"type": str},
            "encapsulation_dot1q_vlan": {"type": int},
            "dhcp_accept_default_route": {"type": bool, "default": True},
            "enabled": {"type": bool, "default": True},
            "speed": {"type": str},
            "receive_bandwidth": {"type": int},
            "transmit_bandwidth": {"type": int},
            "peer": {"type": str},
            "peer_interface": {"type": str},
            "peer_ip": {"type": str},
            "bgp": {"type": Bgp},
            "ipv4_acl_in": {"type": str},
            "ipv4_acl_out": {"type": str},
            "static_routes": {"type": StaticRoutes},
            "qos_profile": {"type": str},
            "wan_carrier": {"type": str},
            "wan_circuit_id": {"type": str},
            "connected_to_pathfinder": {"type": bool, "default": True},
            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
            "rx_queue": {"type": RxQueue},
            "raw_eos_cli": {"type": str},
            "flow_tracking": {"type": FlowTracking},
            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
        }
        profile: str
        """
        L3 interface profile name. Any variable supported under `l3_interfaces` can be inherited from a
        profile.
        """
        name: str | None
        """
        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
        For a
        subinterface, the parent physical interface is automatically created.
        """
        description: str | None
        """
        Interface description.
        If not set a default description will be configured with '[<peer>[
        <peer_interface>]]'.
        """
        ip_address: str | None
        """Node IPv4 address/Mask or 'dhcp'."""
        dhcp_ip: str | None
        """
        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
        IPv4 address
        (without mask) to be allocated on the interface if known.
        This is not rendered in the configuration
        but can be used for substitution of 'interface_ip' in the Access-list
        set under `ipv4_acl_in` and
        `ipv4_acl_out`.
        """
        public_ip: str | None
        """
        Node IPv4 address (no mask).

        This is used to get the public IP (if known) when the device is behind
        NAT.
        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
        with the following preference:
          `wan_route_servers.path_groups.interfaces.ip_address`
              ->
        `l3_interfaces.public_ip`
                  -> `l3_interfaces.ip_address`

        The determined Public IP is used
        by WAN routers when peering with this interface.
        """
        encapsulation_dot1q_vlan: int | None
        """
        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
        specified.
        """
        dhcp_accept_default_route: bool
        """
        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

        Default value: `True`
        """
        enabled: bool
        """
        Enable or Shutdown the interface.

        Default value: `True`
        """
        speed: str | None
        """
        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
        <interface_speed>`.
        """
        receive_bandwidth: int | None
        """
        Maximum allowed receive bandwidth (download) in Mbps for this interface.
        This is currently used on
        CVaaS to provide more information in the visualization.
        """
        transmit_bandwidth: int | None
        """
        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
        This is currently used on
        CVaaS to provide more information in the visualization.
        """
        peer: str | None
        """The peer device name. Used for description and documentation."""
        peer_interface: str | None
        """The peer device interface. Used for description and documentation."""
        peer_ip: str | None
        """
        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
        and `ip` is an IP address.
        """
        bgp: Bgp
        """
        Enforce IPv4 BGP peering for the peer

        Subclass of AvdModel.
        """
        ipv4_acl_in: str | None
        """
        Name of the IPv4 access-list to be assigned in the ingress direction.
        The access-list must be
        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
        Required
        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
        `wan_carriers`.
        """
        ipv4_acl_out: str | None
        """
        Name of the IPv4 Access-list to be assigned in the egress direction.
        The access-list must be defined
        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
        """
        static_routes: StaticRoutes
        """
        Configure IPv4 static routes pointing to `peer_ip`.

        Subclass of AvdList with `StaticRoutesItem`
        items.
        """
        qos_profile: str | None
        """QOS service profile."""
        wan_carrier: str | None
        """
        The WAN carrier this interface is connected to.
        This is used to infer the path-groups in which this
        interface should be configured.
        Unless the carrier is marked as 'trusted' under `wan_carriers`,
        `ipv4_acl_in` is also required on all WAN interfaces.
        """
        wan_circuit_id: str | None
        """
        The WAN circuit ID for this interface.
        This is not rendered in the configuration but used for WAN
        designs.
        """
        connected_to_pathfinder: bool
        """
        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

        Default value: `True`
        """
        cv_pathfinder_internet_exit: CvPathfinderInternetExit
        """
        PREVIEW: This key is in preview mode

        Subclass of AvdModel.
        """
        rx_queue: RxQueue
        """
        Receive queue parameters for platform SFE interface profile.
        This setting is ignored unless the
        `platform_sfe_interface_profile.supported` is set as `true` under
        `platform_settings.feature_support` for the `platform` set on this device.

        Subclass of AvdModel.
        """
        raw_eos_cli: str | None
        """EOS CLI rendered directly on the interface in the final EOS configuration."""
        flow_tracking: FlowTracking
        """
        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
        Subclass of AvdModel.
        """
        structured_config: EosCliConfigGen.EthernetInterfacesItem
        """Custom structured config for the Ethernet interface."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                profile: str | UndefinedType = Undefined,
                name: str | None | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                ip_address: str | None | UndefinedType = Undefined,
                dhcp_ip: str | None | UndefinedType = Undefined,
                public_ip: str | None | UndefinedType = Undefined,
                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                enabled: bool | UndefinedType = Undefined,
                speed: str | None | UndefinedType = Undefined,
                receive_bandwidth: int | None | UndefinedType = Undefined,
                transmit_bandwidth: int | None | UndefinedType = Undefined,
                peer: str | None | UndefinedType = Undefined,
                peer_interface: str | None | UndefinedType = Undefined,
                peer_ip: str | None | UndefinedType = Undefined,
                bgp: Bgp | UndefinedType = Undefined,
                ipv4_acl_in: str | None | UndefinedType = Undefined,
                ipv4_acl_out: str | None | UndefinedType = Undefined,
                static_routes: StaticRoutes | UndefinedType = Undefined,
                qos_profile: str | None | UndefinedType = Undefined,
                wan_carrier: str | None | UndefinedType = Undefined,
                wan_circuit_id: str | None | UndefinedType = Undefined,
                connected_to_pathfinder: bool | UndefinedType = Undefined,
                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                rx_queue: RxQueue | UndefinedType = Undefined,
                raw_eos_cli: str | None | UndefinedType = Undefined,
                flow_tracking: FlowTracking | UndefinedType = Undefined,
                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
            ) -> None:
                """
                L3InterfaceProfilesItem.


                Subclass of AvdModel.

                Args:
                    profile:
                       L3 interface profile name. Any variable supported under `l3_interfaces` can be inherited from a
                       profile.
                    name:
                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                       For a
                       subinterface, the parent physical interface is automatically created.
                    description:
                       Interface description.
                       If not set a default description will be configured with '[<peer>[
                       <peer_interface>]]'.
                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                    dhcp_ip:
                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                       IPv4 address
                       (without mask) to be allocated on the interface if known.
                       This is not rendered in the configuration
                       but can be used for substitution of 'interface_ip' in the Access-list
                       set under `ipv4_acl_in` and
                       `ipv4_acl_out`.
                    public_ip:
                       Node IPv4 address (no mask).

                       This is used to get the public IP (if known) when the device is behind
                       NAT.
                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                       with the following preference:
                         `wan_route_servers.path_groups.interfaces.ip_address`
                             ->
                       `l3_interfaces.public_ip`
                                 -> `l3_interfaces.ip_address`

                       The determined Public IP is used
                       by WAN routers when peering with this interface.
                    encapsulation_dot1q_vlan:
                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                       specified.
                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                    enabled: Enable or Shutdown the interface.
                    speed:
                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                       <interface_speed>`.
                    receive_bandwidth:
                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                       This is currently used on
                       CVaaS to provide more information in the visualization.
                    transmit_bandwidth:
                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                       This is currently used on
                       CVaaS to provide more information in the visualization.
                    peer: The peer device name. Used for description and documentation.
                    peer_interface: The peer device interface. Used for description and documentation.
                    peer_ip:
                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                       and `ip` is an IP address.
                    bgp:
                       Enforce IPv4 BGP peering for the peer

                       Subclass of AvdModel.
                    ipv4_acl_in:
                       Name of the IPv4 access-list to be assigned in the ingress direction.
                       The access-list must be
                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                       Required
                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                       `wan_carriers`.
                    ipv4_acl_out:
                       Name of the IPv4 Access-list to be assigned in the egress direction.
                       The access-list must be defined
                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                    static_routes:
                       Configure IPv4 static routes pointing to `peer_ip`.

                       Subclass of AvdList with `StaticRoutesItem`
                       items.
                    qos_profile: QOS service profile.
                    wan_carrier:
                       The WAN carrier this interface is connected to.
                       This is used to infer the path-groups in which this
                       interface should be configured.
                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                       `ipv4_acl_in` is also required on all WAN interfaces.
                    wan_circuit_id:
                       The WAN circuit ID for this interface.
                       This is not rendered in the configuration but used for WAN
                       designs.
                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                    cv_pathfinder_internet_exit:
                       PREVIEW: This key is in preview mode

                       Subclass of AvdModel.
                    rx_queue:
                       Receive queue parameters for platform SFE interface profile.
                       This setting is ignored unless the
                       `platform_sfe_interface_profile.supported` is set as `true` under
                       `platform_settings.feature_support` for the `platform` set on this device.

                       Subclass of AvdModel.
                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                    flow_tracking:
                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                       Subclass of AvdModel.
                    structured_config: Custom structured config for the Ethernet interface.

                """

    class L3InterfaceProfiles(AvdIndexedList[str, L3InterfaceProfilesItem]):
        """Subclass of AvdIndexedList with `L3InterfaceProfilesItem` items. Primary key is `profile` (`str`)."""

        _primary_key: ClassVar[str] = "profile"

    L3InterfaceProfiles._item_type = L3InterfaceProfilesItem

    class LoggingSettings(AvdModel):
        """Subclass of AvdModel."""

        class HostsItem(AvdModel):
            """Subclass of AvdModel."""

            class Ports(AvdList[int]):
                """Subclass of AvdList with `int` items."""

            Ports._item_type = int

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "vrf": {"type": str, "default": "use_default_mgmt_method_vrf"},
                "protocol": {"type": str, "default": "udp"},
                "ports": {"type": Ports},
                "ssl_profile": {"type": str},
            }
            name: str
            """Syslog server name."""
            vrf: str
            """
            The value of `vrf` will be interpreted according to these rules:
            - `use_mgmt_interface_vrf` will
            configure the logging destination under the VRF set with `mgmt_interface_vrf` and set the
            `mgmt_interface` as logging source-interface.
              An error will be raised if `mgmt_ip` or
            `ipv6_mgmt_ip` are not configured for the device.
            - `use_inband_mgmt_vrf` will configure the logging
            destination under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as logging
            source-interface.
              An error will be raised if inband management is not configured for the device.
            -
            `use_default_mgmt_method_vrf` will configure the VRF and source-interface for one of the two options
            above depending on the value of `default_mgmt_method`.
            - Any other string will be used directly as
            the VRF name. Remember to set the `logging_settings.vrfs[].source_interface` if needed.

            Default value: `"use_default_mgmt_method_vrf"`
            """
            protocol: Literal["tcp", "udp", "tls"]
            """Default value: `"udp"`"""
            ports: Ports
            """Subclass of AvdList with `int` items."""
            ssl_profile: str | None
            """Used when host protocol is 'tls'. Profiles are defined under `management_security.ssl_profiles`."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    vrf: str | UndefinedType = Undefined,
                    protocol: Literal["tcp", "udp", "tls"] | UndefinedType = Undefined,
                    ports: Ports | UndefinedType = Undefined,
                    ssl_profile: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    HostsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Syslog server name.
                        vrf:
                           The value of `vrf` will be interpreted according to these rules:
                           - `use_mgmt_interface_vrf` will
                           configure the logging destination under the VRF set with `mgmt_interface_vrf` and set the
                           `mgmt_interface` as logging source-interface.
                             An error will be raised if `mgmt_ip` or
                           `ipv6_mgmt_ip` are not configured for the device.
                           - `use_inband_mgmt_vrf` will configure the logging
                           destination under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as logging
                           source-interface.
                             An error will be raised if inband management is not configured for the device.
                           -
                           `use_default_mgmt_method_vrf` will configure the VRF and source-interface for one of the two options
                           above depending on the value of `default_mgmt_method`.
                           - Any other string will be used directly as
                           the VRF name. Remember to set the `logging_settings.vrfs[].source_interface` if needed.
                        protocol: protocol
                        ports: Subclass of AvdList with `int` items.
                        ssl_profile: Used when host protocol is 'tls'. Profiles are defined under `management_security.ssl_profiles`.

                    """

        class Hosts(AvdList[HostsItem]):
            """Subclass of AvdList with `HostsItem` items."""

        Hosts._item_type = HostsItem

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "source_interface": {"type": str}}
            name: str
            """VRF name."""
            source_interface: str | None
            """
            Source interface to use for logging destinations in this VRF.
            If set for the VRFs defined by
            `mgmt_interface_vrf` or `inband_mgmt_vrf`, this setting will take precedence.
            """

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined, source_interface: str | None | UndefinedType = Undefined) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name: VRF name.
                        source_interface:
                           Source interface to use for logging destinations in this VRF.
                           If set for the VRFs defined by
                           `mgmt_interface_vrf` or `inband_mgmt_vrf`, this setting will take precedence.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        _fields: ClassVar[dict] = {
            "hosts": {"type": Hosts},
            "vrfs": {"type": Vrfs},
            "console": {"type": str},
            "monitor": {"type": str},
            "buffered": {"type": EosCliConfigGen.Logging.Buffered},
            "repeat_messages": {"type": bool},
            "trap": {"type": str},
            "synchronous": {"type": EosCliConfigGen.Logging.Synchronous},
            "format": {"type": EosCliConfigGen.Logging.Format},
            "facility": {"type": str},
            "policy": {"type": EosCliConfigGen.Logging.Policy},
            "event": {"type": EosCliConfigGen.Logging.Event},
            "level": {"type": EosCliConfigGen.Logging.Level},
        }
        hosts: Hosts
        """Subclass of AvdList with `HostsItem` items."""
        vrfs: Vrfs
        """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""
        console: Literal["debugging", "informational", "notifications", "warnings", "errors", "critical", "alerts", "emergencies", "disabled"] | None
        """Console logging severity level."""
        monitor: Literal["debugging", "informational", "notifications", "warnings", "errors", "critical", "alerts", "emergencies", "disabled"] | None
        """Monitor logging severity level."""
        buffered: EosCliConfigGen.Logging.Buffered
        repeat_messages: bool | None
        """Summarize concurrent repeat messages."""
        trap: Literal["alerts", "critical", "debugging", "emergencies", "errors", "informational", "notifications", "system", "warnings", "disabled"] | None
        """Trap logging severity level."""
        synchronous: EosCliConfigGen.Logging.Synchronous
        format: EosCliConfigGen.Logging.Format
        facility: (
            Literal[
                "auth",
                "cron",
                "daemon",
                "kern",
                "local0",
                "local1",
                "local2",
                "local3",
                "local4",
                "local5",
                "local6",
                "local7",
                "lpr",
                "mail",
                "news",
                "sys9",
                "sys10",
                "sys11",
                "sys12",
                "sys13",
                "sys14",
                "syslog",
                "user",
                "uucp",
            ]
            | None
        )
        policy: EosCliConfigGen.Logging.Policy
        event: EosCliConfigGen.Logging.Event
        level: EosCliConfigGen.Logging.Level
        """Configure logging severity."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                hosts: Hosts | UndefinedType = Undefined,
                vrfs: Vrfs | UndefinedType = Undefined,
                console: Literal["debugging", "informational", "notifications", "warnings", "errors", "critical", "alerts", "emergencies", "disabled"]
                | None
                | UndefinedType = Undefined,
                monitor: Literal["debugging", "informational", "notifications", "warnings", "errors", "critical", "alerts", "emergencies", "disabled"]
                | None
                | UndefinedType = Undefined,
                buffered: EosCliConfigGen.Logging.Buffered | UndefinedType = Undefined,
                repeat_messages: bool | None | UndefinedType = Undefined,
                trap: Literal["alerts", "critical", "debugging", "emergencies", "errors", "informational", "notifications", "system", "warnings", "disabled"]
                | None
                | UndefinedType = Undefined,
                synchronous: EosCliConfigGen.Logging.Synchronous | UndefinedType = Undefined,
                format: EosCliConfigGen.Logging.Format | UndefinedType = Undefined,
                facility: Literal[
                    "auth",
                    "cron",
                    "daemon",
                    "kern",
                    "local0",
                    "local1",
                    "local2",
                    "local3",
                    "local4",
                    "local5",
                    "local6",
                    "local7",
                    "lpr",
                    "mail",
                    "news",
                    "sys9",
                    "sys10",
                    "sys11",
                    "sys12",
                    "sys13",
                    "sys14",
                    "syslog",
                    "user",
                    "uucp",
                ]
                | None
                | UndefinedType = Undefined,
                policy: EosCliConfigGen.Logging.Policy | UndefinedType = Undefined,
                event: EosCliConfigGen.Logging.Event | UndefinedType = Undefined,
                level: EosCliConfigGen.Logging.Level | UndefinedType = Undefined,
            ) -> None:
                """
                LoggingSettings.


                Subclass of AvdModel.

                Args:
                    hosts: Subclass of AvdList with `HostsItem` items.
                    vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).
                    console: Console logging severity level.
                    monitor: Monitor logging severity level.
                    buffered: buffered
                    repeat_messages: Summarize concurrent repeat messages.
                    trap: Trap logging severity level.
                    synchronous: synchronous
                    format: format
                    facility: facility
                    policy: policy
                    event: event
                    level: Configure logging severity.

                """

    class ManagementEapi(AvdModel):
        """Subclass of AvdModel."""

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "enabled": {"type": bool}, "ipv4_acl": {"type": str}, "ipv6_acl": {"type": str}}
            name: str
            """
            VRF name.
            The value will be interpreted according to these rules:
            - `use_mgmt_interface_vrf` will
            configure the eAPI under the VRF set with `mgmt_interface_vrf`.
              An error will be raised if
            `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
            - `use_inband_mgmt_vrf` will
            configure the eAPI under the VRF set with `inband_mgmt_vrf`.
              An error will be raised if inband
            management is not configured for the device.
            - `use_default_mgmt_method_vrf` will configure the eAPI
            under VRF for one of the two options above depending on the value of `default_mgmt_method`.
            - Any
            other string will be used directly as the VRF name.
            """
            enabled: bool
            """Enable/disable Management eAPI for this VRF."""
            ipv4_acl: str | None
            """IPv4 access-list name."""
            ipv6_acl: str | None
            """IPv6 access-list name."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    enabled: bool | UndefinedType = Undefined,
                    ipv4_acl: str | None | UndefinedType = Undefined,
                    ipv6_acl: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name:
                           VRF name.
                           The value will be interpreted according to these rules:
                           - `use_mgmt_interface_vrf` will
                           configure the eAPI under the VRF set with `mgmt_interface_vrf`.
                             An error will be raised if
                           `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                           - `use_inband_mgmt_vrf` will
                           configure the eAPI under the VRF set with `inband_mgmt_vrf`.
                             An error will be raised if inband
                           management is not configured for the device.
                           - `use_default_mgmt_method_vrf` will configure the eAPI
                           under VRF for one of the two options above depending on the value of `default_mgmt_method`.
                           - Any
                           other string will be used directly as the VRF name.
                        enabled: Enable/disable Management eAPI for this VRF.
                        ipv4_acl: IPv4 access-list name.
                        ipv6_acl: IPv6 access-list name.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        _fields: ClassVar[dict] = {
            "enabled": {"type": bool, "default": True},
            "enable_http": {"type": bool},
            "enable_https": {"type": bool, "default": True},
            "default_services": {"type": bool},
            "vrfs": {"type": Vrfs, "default": lambda cls: coerce_type([{"name": "use_mgmt_interface_vrf", "enabled": True}], target_type=cls)},
        }
        enabled: bool
        """
        Enable/Disable api http-commands.

        Default value: `True`
        """
        enable_http: bool | None
        enable_https: bool
        """Default value: `True`"""
        default_services: bool | None
        vrfs: Vrfs
        """
        Note: For backward compatibility, `mgmt_ip` presence is not enforced when `vrfs` is **not**
        configured and the default value of `use_mgmt_interface_vrf` is used.
        To enforce the presence of
        `mgmt_ip` for the VRF defined by `mgmt_interface_vrf`, explicitly define an entry in `vrfs` using
        `name: use_mgmt_interface_vrf`.
        This behavior will be removed in AVD 6.0.

        Subclass of
        AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).

        Default value: `lambda cls: coerce_type([{"name": "use_mgmt_interface_vrf", "enabled": True}], target_type=cls)`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enabled: bool | UndefinedType = Undefined,
                enable_http: bool | None | UndefinedType = Undefined,
                enable_https: bool | UndefinedType = Undefined,
                default_services: bool | None | UndefinedType = Undefined,
                vrfs: Vrfs | UndefinedType = Undefined,
            ) -> None:
                """
                ManagementEapi.


                Subclass of AvdModel.

                Args:
                    enabled: Enable/Disable api http-commands.
                    enable_http: enable_http
                    enable_https: enable_https
                    default_services: default_services
                    vrfs:
                       Note: For backward compatibility, `mgmt_ip` presence is not enforced when `vrfs` is **not**
                       configured and the default value of `use_mgmt_interface_vrf` is used.
                       To enforce the presence of
                       `mgmt_ip` for the VRF defined by `mgmt_interface_vrf`, explicitly define an entry in `vrfs` using
                       `name: use_mgmt_interface_vrf`.
                       This behavior will be removed in AVD 6.0.

                       Subclass of
                       AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).

                """

    class MgmtDestinationNetworks(AvdList[str]):
        """Subclass of AvdList with `str` items."""

    MgmtDestinationNetworks._item_type = str

    class MlagIbgpPeeringVrfs(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"base_vlan": {"type": int, "default": 3000}}
        base_vlan: int
        """Default value: `3000`"""

        if TYPE_CHECKING:

            def __init__(self, *, base_vlan: int | UndefinedType = Undefined) -> None:
                """
                MlagIbgpPeeringVrfs.


                Subclass of AvdModel.

                Args:
                    base_vlan: base_vlan

                """

    class NameServers(AvdList[str]):
        """Subclass of AvdList with `str` items."""

    NameServers._item_type = str

    class NetworkPortsItem(AvdModel):
        """Subclass of AvdModel."""

        class Switches(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Switches._item_type = str

        class Platforms(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Platforms._item_type = str

        class SwitchPorts(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        SwitchPorts._item_type = str

        class TrunkGroups(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        TrunkGroups._item_type = str

        class Ptp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "enabled": {"type": bool, "default": False},
                "endpoint_role": {"type": str, "default": "follower"},
                "profile": {"type": str, "default": "aes67-r16-2016"},
            }
            enabled: bool
            """Default value: `False`"""
            endpoint_role: Literal["follower", "dynamic", "bmca", "default"]
            """
            PTP role of the endpoint.
            `follower` will configure the switch port as `ptp role master`.
            `dynamic`
            will use BMCA.
            `default` is deprecated in favor of `follower`.
            `bmca` is deprecated in favor of
            `dynamic`.

            Default value: `"follower"`
            """
            profile: str
            """
            Default available profiles are:
              - "aes67"
              - "aes67-r16-2016"
              - "smpte2059-2"

            Default value: `"aes67-r16-2016"`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    enabled: bool | UndefinedType = Undefined,
                    endpoint_role: Literal["follower", "dynamic", "bmca", "default"] | UndefinedType = Undefined,
                    profile: str | UndefinedType = Undefined,
                ) -> None:
                    """
                    Ptp.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        endpoint_role:
                           PTP role of the endpoint.
                           `follower` will configure the switch port as `ptp role master`.
                           `dynamic`
                           will use BMCA.
                           `default` is deprecated in favor of `follower`.
                           `bmca` is deprecated in favor of
                           `dynamic`.
                        profile:
                           Default available profiles are:
                             - "aes67"
                             - "aes67-r16-2016"
                             - "smpte2059-2"

                    """

        class FlowTracking(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
            enabled: bool | None
            name: str | None
            """Flow tracker name as defined in flow_tracking_settings."""

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                    """
                    FlowTracking.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class LinkTracking(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
            enabled: bool | None
            name: str | None
            """
            Tracking group name.
            The default group name is taken from fabric variable of the switch,
            `link_tracking.groups[0].name` with default value being "LT_GROUP1".
            Optional if default
            link_tracking settings are configured on the node.
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                    """
                    LinkTracking.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name:
                           Tracking group name.
                           The default group name is taken from fabric variable of the switch,
                           `link_tracking.groups[0].name` with default value being "LT_GROUP1".
                           Optional if default
                           link_tracking settings are configured on the node.

                    """

        class StormControl(AvdModel):
            """Subclass of AvdModel."""

            class All(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        All.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            class Broadcast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        Broadcast.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            class Multicast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        Multicast.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            class UnknownUnicast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        UnknownUnicast.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            _fields: ClassVar[dict] = {
                "all": {"type": All},
                "broadcast": {"type": Broadcast},
                "multicast": {"type": Multicast},
                "unknown_unicast": {"type": UnknownUnicast},
            }
            all: All
            """Subclass of AvdModel."""
            broadcast: Broadcast
            """Subclass of AvdModel."""
            multicast: Multicast
            """Subclass of AvdModel."""
            unknown_unicast: UnknownUnicast
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    all: All | UndefinedType = Undefined,
                    broadcast: Broadcast | UndefinedType = Undefined,
                    multicast: Multicast | UndefinedType = Undefined,
                    unknown_unicast: UnknownUnicast | UndefinedType = Undefined,
                ) -> None:
                    """
                    StormControl.


                    Subclass of AvdModel.

                    Args:
                        all: Subclass of AvdModel.
                        broadcast: Subclass of AvdModel.
                        multicast: Subclass of AvdModel.
                        unknown_unicast: Subclass of AvdModel.

                    """

        class MonitorSessionsItem(AvdModel):
            """Subclass of AvdModel."""

            class SourceSettings(AvdModel):
                """Subclass of AvdModel."""

                class AccessGroup(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}, "priority": {"type": int}}
                    type: Literal["ip", "ipv6", "mac"] | None
                    name: str | None
                    """ACL name."""
                    priority: int | None

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                            name: str | None | UndefinedType = Undefined,
                            priority: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            AccessGroup.


                            Subclass of AvdModel.

                            Args:
                                type: type
                                name: ACL name.
                                priority: priority

                            """

                _fields: ClassVar[dict] = {"direction": {"type": str}, "access_group": {"type": AccessGroup}}
                direction: Literal["rx", "tx", "both"] | None
                access_group: AccessGroup
                """
                This can only be set when `session_settings.access_group` is not set.

                Subclass of AvdModel.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        direction: Literal["rx", "tx", "both"] | None | UndefinedType = Undefined,
                        access_group: AccessGroup | UndefinedType = Undefined,
                    ) -> None:
                        """
                        SourceSettings.


                        Subclass of AvdModel.

                        Args:
                            direction: direction
                            access_group:
                               This can only be set when `session_settings.access_group` is not set.

                               Subclass of AvdModel.

                        """

            class SessionSettings(AvdModel):
                """Subclass of AvdModel."""

                class AccessGroup(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}}
                    type: Literal["ip", "ipv6", "mac"] | None
                    name: str | None
                    """ACL name."""

                    if TYPE_CHECKING:

                        def __init__(
                            self, *, type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                        ) -> None:
                            """
                            AccessGroup.


                            Subclass of AvdModel.

                            Args:
                                type: type
                                name: ACL name.

                            """

                class Truncate(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"enabled": {"type": bool}, "size": {"type": int}}
                    enabled: bool | None
                    size: int | None
                    """Size in bytes."""

                    if TYPE_CHECKING:

                        def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, size: int | None | UndefinedType = Undefined) -> None:
                            """
                            Truncate.


                            Subclass of AvdModel.

                            Args:
                                enabled: enabled
                                size: Size in bytes.

                            """

                _fields: ClassVar[dict] = {
                    "encapsulation_gre_metadata_tx": {"type": bool},
                    "header_remove_size": {"type": int},
                    "access_group": {"type": AccessGroup},
                    "rate_limit_per_ingress_chip": {"type": str},
                    "rate_limit_per_egress_chip": {"type": str},
                    "sample": {"type": int},
                    "truncate": {"type": Truncate},
                }
                encapsulation_gre_metadata_tx: bool | None
                header_remove_size: int | None
                """Number of bytes to remove from header."""
                access_group: AccessGroup
                """Subclass of AvdModel."""
                rate_limit_per_ingress_chip: str | None
                """
                Ratelimit and unit as string.
                Examples:
                  "100000 bps"
                  "100 kbps"
                  "10 mbps"
                """
                rate_limit_per_egress_chip: str | None
                """
                Ratelimit and unit as string.
                Examples:
                  "100000 bps"
                  "100 kbps"
                  "10 mbps"
                """
                sample: int | None
                truncate: Truncate
                """Subclass of AvdModel."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        encapsulation_gre_metadata_tx: bool | None | UndefinedType = Undefined,
                        header_remove_size: int | None | UndefinedType = Undefined,
                        access_group: AccessGroup | UndefinedType = Undefined,
                        rate_limit_per_ingress_chip: str | None | UndefinedType = Undefined,
                        rate_limit_per_egress_chip: str | None | UndefinedType = Undefined,
                        sample: int | None | UndefinedType = Undefined,
                        truncate: Truncate | UndefinedType = Undefined,
                    ) -> None:
                        """
                        SessionSettings.


                        Subclass of AvdModel.

                        Args:
                            encapsulation_gre_metadata_tx: encapsulation_gre_metadata_tx
                            header_remove_size: Number of bytes to remove from header.
                            access_group: Subclass of AvdModel.
                            rate_limit_per_ingress_chip:
                               Ratelimit and unit as string.
                               Examples:  # fmt: skip
                                 "100000 bps"
                                 "100 kbps"
                                 "10 mbps"
                            rate_limit_per_egress_chip:
                               Ratelimit and unit as string.
                               Examples:  # fmt: skip
                                 "100000 bps"
                                 "100 kbps"
                                 "10 mbps"
                            sample: sample
                            truncate: Subclass of AvdModel.

                        """

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "role": {"type": str},
                "source_settings": {"type": SourceSettings},
                "session_settings": {"type": SessionSettings},
            }
            name: str
            """Session name."""
            role: Literal["source", "destination"] | None
            source_settings: SourceSettings
            """Subclass of AvdModel."""
            session_settings: SessionSettings
            """
            Session settings are defined per session name.
            Different session_settings for the same session name
            will be combined/merged.


            Subclass of AvdModel.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    role: Literal["source", "destination"] | None | UndefinedType = Undefined,
                    source_settings: SourceSettings | UndefinedType = Undefined,
                    session_settings: SessionSettings | UndefinedType = Undefined,
                ) -> None:
                    """
                    MonitorSessionsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Session name.
                        role: role
                        source_settings: Subclass of AvdModel.
                        session_settings:
                           Session settings are defined per session name.
                           Different session_settings for the same session name
                           will be combined/merged.


                           Subclass of AvdModel.

                    """

        class MonitorSessions(AvdList[MonitorSessionsItem]):
            """Subclass of AvdList with `MonitorSessionsItem` items."""

        MonitorSessions._item_type = MonitorSessionsItem

        class EthernetSegment(AvdModel):
            """Subclass of AvdModel."""

            class DesignatedForwarderPreferences(AvdList[int]):
                """Subclass of AvdList with `int` items."""

            DesignatedForwarderPreferences._item_type = int

            _fields: ClassVar[dict] = {
                "short_esi": {"type": str},
                "redundancy": {"type": str},
                "designated_forwarder_algorithm": {"type": str},
                "designated_forwarder_preferences": {"type": DesignatedForwarderPreferences},
                "dont_preempt": {"type": bool},
            }
            short_esi: str
            """
            In format xxxx:xxxx:xxxx or "auto".
            Define a manual short-esi (be careful using this on profiles) or
            set the value to "auto" to automatically generate the value.
            Please see the notes under "EVPN A/A
            ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
            """
            redundancy: Literal["all-active", "single-active"] | None
            """
            If omitted, Port-Channels use the EOS default of all-active.
            If omitted, Ethernet interfaces are
            configured as single-active.
            """
            designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None
            """
            Configure DF algorithm and preferences.
            - auto: Use preference-based algorithm and assign preference
            based on position of device in the 'switches' list,
              e.g., assuming a list of three switches, this
            would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
            -
            preference: Set preference for each switch manually using designated_forwarder_preferences key.
            -
            modulus: Use the default modulus-based algorithm.
            If omitted, Port-Channels use the EOS default of
            modulus.
            If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
            """
            designated_forwarder_preferences: DesignatedForwarderPreferences
            """
            Manual preference as described above, required only for preference algorithm.

            Subclass of AvdList
            with `int` items.
            """
            dont_preempt: bool | None
            """Disable preemption for single-active forwarding when auto/manual DF preference is configured."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    short_esi: str | UndefinedType = Undefined,
                    redundancy: Literal["all-active", "single-active"] | None | UndefinedType = Undefined,
                    designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None | UndefinedType = Undefined,
                    designated_forwarder_preferences: DesignatedForwarderPreferences | UndefinedType = Undefined,
                    dont_preempt: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    EthernetSegment.


                    Subclass of AvdModel.

                    Args:
                        short_esi:
                           In format xxxx:xxxx:xxxx or "auto".
                           Define a manual short-esi (be careful using this on profiles) or
                           set the value to "auto" to automatically generate the value.
                           Please see the notes under "EVPN A/A
                           ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
                        redundancy:
                           If omitted, Port-Channels use the EOS default of all-active.
                           If omitted, Ethernet interfaces are
                           configured as single-active.
                        designated_forwarder_algorithm:
                           Configure DF algorithm and preferences.
                           - auto: Use preference-based algorithm and assign preference
                           based on position of device in the 'switches' list,
                             e.g., assuming a list of three switches, this
                           would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
                           -
                           preference: Set preference for each switch manually using designated_forwarder_preferences key.
                           -
                           modulus: Use the default modulus-based algorithm.
                           If omitted, Port-Channels use the EOS default of
                           modulus.
                           If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
                        designated_forwarder_preferences:
                           Manual preference as described above, required only for preference algorithm.

                           Subclass of AvdList
                           with `int` items.
                        dont_preempt: Disable preemption for single-active forwarding when auto/manual DF preference is configured.

                    """

        class PortChannel(AvdModel):
            """Subclass of AvdModel."""

            class LacpFallback(AvdModel):
                """Subclass of AvdModel."""

                class Individual(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"profile": {"type": str}, "vlans": {"type": str}, "native_vlan": {"type": int}, "mode": {"type": str}}
                    profile: str | None
                    """Port-profile name to inherit configuration."""
                    vlans: str | None
                    """Allowed VLANs on the port-channel member interfaces when in fallback individual."""
                    native_vlan: int | None
                    """Native VLAN on the port-channel member interfaces when in fallback individual."""
                    mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
                    """Interface mode on the port-channel member interfaces when in fallback individual."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            profile: str | None | UndefinedType = Undefined,
                            vlans: str | None | UndefinedType = Undefined,
                            native_vlan: int | None | UndefinedType = Undefined,
                            mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            Individual.


                            Subclass of AvdModel.

                            Args:
                                profile: Port-profile name to inherit configuration.
                                vlans: Allowed VLANs on the port-channel member interfaces when in fallback individual.
                                native_vlan: Native VLAN on the port-channel member interfaces when in fallback individual.
                                mode: Interface mode on the port-channel member interfaces when in fallback individual.

                            """

                _fields: ClassVar[dict] = {"mode": {"type": str}, "individual": {"type": Individual}, "timeout": {"type": int, "default": 90}}
                mode: Literal["static", "individual"] | None
                """
                Either static or individual mode is supported.
                If the mode is set to "individual" either 'profile'
                or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                """
                individual: Individual
                """
                Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                "individual".

                Subclass of AvdModel.
                """
                timeout: int
                """
                Timeout in seconds.

                Default value: `90`
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        mode: Literal["static", "individual"] | None | UndefinedType = Undefined,
                        individual: Individual | UndefinedType = Undefined,
                        timeout: int | UndefinedType = Undefined,
                    ) -> None:
                        """
                        LacpFallback.


                        Subclass of AvdModel.

                        Args:
                            mode:
                               Either static or individual mode is supported.
                               If the mode is set to "individual" either 'profile'
                               or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                            individual:
                               Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                               "individual".

                               Subclass of AvdModel.
                            timeout: Timeout in seconds.

                        """

            class LacpTimer(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"mode": {"type": str}, "multiplier": {"type": int}}
                mode: Literal["normal", "fast"] | None
                """LACP mode for interface members."""
                multiplier: int | None
                """Number of LACP BPDUs lost before deeming the peer down. EOS default is 3."""

                if TYPE_CHECKING:

                    def __init__(
                        self, *, mode: Literal["normal", "fast"] | None | UndefinedType = Undefined, multiplier: int | None | UndefinedType = Undefined
                    ) -> None:
                        """
                        LacpTimer.


                        Subclass of AvdModel.

                        Args:
                            mode: LACP mode for interface members.
                            multiplier: Number of LACP BPDUs lost before deeming the peer down. EOS default is 3.

                        """

            class SubinterfacesItem(AvdModel):
                """Subclass of AvdModel."""

                class EncapsulationVlan(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"client_dot1q": {"type": int}}
                    client_dot1q: int | None

                    if TYPE_CHECKING:

                        def __init__(self, *, client_dot1q: int | None | UndefinedType = Undefined) -> None:
                            """
                            EncapsulationVlan.


                            Subclass of AvdModel.

                            Args:
                                client_dot1q: client_dot1q

                            """

                _fields: ClassVar[dict] = {
                    "number": {"type": int},
                    "short_esi": {"type": str},
                    "vlan_id": {"type": int},
                    "encapsulation_vlan": {"type": EncapsulationVlan},
                    "raw_eos_cli": {"type": str},
                    "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                }
                number: int | None
                """Subinterface number."""
                short_esi: str | None
                """
                In format xxxx:xxxx:xxxx or "auto".
                Required for multihomed port-channels with subinterfaces.
                """
                vlan_id: int | None
                """
                VLAN ID to bridge.
                Default is subinterface number.
                """
                encapsulation_vlan: EncapsulationVlan
                """
                Client VLAN ID encapsulation.
                Default is subinterface number.


                Subclass of AvdModel.
                """
                raw_eos_cli: str | None
                """EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration."""
                structured_config: EosCliConfigGen.PortChannelInterfacesItem
                """
                Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                eos_cli_config_gen.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        number: int | None | UndefinedType = Undefined,
                        short_esi: str | None | UndefinedType = Undefined,
                        vlan_id: int | None | UndefinedType = Undefined,
                        encapsulation_vlan: EncapsulationVlan | UndefinedType = Undefined,
                        raw_eos_cli: str | None | UndefinedType = Undefined,
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                    ) -> None:
                        """
                        SubinterfacesItem.


                        Subclass of AvdModel.

                        Args:
                            number: Subinterface number.
                            short_esi:
                               In format xxxx:xxxx:xxxx or "auto".
                               Required for multihomed port-channels with subinterfaces.
                            vlan_id:
                               VLAN ID to bridge.
                               Default is subinterface number.
                            encapsulation_vlan:
                               Client VLAN ID encapsulation.
                               Default is subinterface number.


                               Subclass of AvdModel.
                            raw_eos_cli: EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration.
                            structured_config:
                               Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                               eos_cli_config_gen.

                        """

            class Subinterfaces(AvdList[SubinterfacesItem]):
                """Subclass of AvdList with `SubinterfacesItem` items."""

            Subinterfaces._item_type = SubinterfacesItem

            _fields: ClassVar[dict] = {
                "mode": {"type": str},
                "channel_id": {"type": int},
                "description": {"type": str},
                "endpoint_port_channel": {"type": str},
                "enabled": {"type": bool, "default": True},
                "ptp_mpass": {"type": bool, "default": False},
                "lacp_fallback": {"type": LacpFallback},
                "lacp_timer": {"type": LacpTimer},
                "subinterfaces": {"type": Subinterfaces},
                "raw_eos_cli": {"type": str},
                "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
            }
            mode: Literal["active", "passive", "on"] | None
            """Port-Channel Mode."""
            channel_id: int | None
            """
            Port-Channel ID.
            If no channel_id is specified, an id is generated from the first switch port in the
            port channel.
            """
            description: str | None
            """
            Description or description template to be used on the port-channel interface.
            This can be a template
            using the AVD string formatter syntax:
            https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
            descriptions-names.html#avd-string-formatter-syntax.
            The available template fields are:
              -
            `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
              -
            `endpoint` - The name of the connected endpoint
              - `endpoint_port_channel` - The value from
            `endpoint_port_channel` if set.
              - `port_channel_id` - The port-channel number for the switch.
              -
            `adapter_description` - The adapter's description if set.
              - `adapter_description_or_endpoint` -
            Helper alias of the adapter_description or endpoint.

            The default description is set by
            `default_connected_endpoints_port_channel_description`.
            By default the description is templated from
            the type, name and port_channel interface of the endpoint if set.
            """
            endpoint_port_channel: str | None
            """
            Name of the port-channel interface on the endpoint.
            Used for the port-channel description template
            with the field name `peer_interface`
            """
            enabled: bool
            """
            Port-Channel administrative state.
            Setting to false will set port to 'shutdown' in intended
            configuration.

            Default value: `True`
            """
            ptp_mpass: bool
            """
            When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
            logical device.
            Arista PTP enabled devices always place PTP messages on the same physical link
            within the port-channel.
            Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
            devices.

            Default value: `False`
            """
            lacp_fallback: LacpFallback
            """
            LACP fallback configuration.

            Subclass of AvdModel.
            """
            lacp_timer: LacpTimer
            """
            LACP timer configuration. Applies only when Port-channel mode is not "on".

            Subclass of AvdModel.
            """
            subinterfaces: Subinterfaces
            """
            Port-Channel L2 Subinterfaces
            Subinterfaces are only supported on routed port-channels, which means
            they cannot be configured on MLAG port-channels.
            Setting short_esi: auto generates the short_esi
            automatically using a hash of configuration elements.
            Please see the notes under "EVPN A/A ESI dual-
            attached endpoint scenario" before setting short_esi: auto.


            Subclass of AvdList with
            `SubinterfacesItem` items.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the port-channel interface in the final EOS configuration."""
            structured_config: EosCliConfigGen.PortChannelInterfacesItem
            """
            Custom structured config added under port_channel_interfaces.[name=<interface>] for
            eos_cli_config_gen.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    mode: Literal["active", "passive", "on"] | None | UndefinedType = Undefined,
                    channel_id: int | None | UndefinedType = Undefined,
                    description: str | None | UndefinedType = Undefined,
                    endpoint_port_channel: str | None | UndefinedType = Undefined,
                    enabled: bool | UndefinedType = Undefined,
                    ptp_mpass: bool | UndefinedType = Undefined,
                    lacp_fallback: LacpFallback | UndefinedType = Undefined,
                    lacp_timer: LacpTimer | UndefinedType = Undefined,
                    subinterfaces: Subinterfaces | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    PortChannel.


                    Subclass of AvdModel.

                    Args:
                        mode: Port-Channel Mode.
                        channel_id:
                           Port-Channel ID.
                           If no channel_id is specified, an id is generated from the first switch port in the
                           port channel.
                        description:
                           Description or description template to be used on the port-channel interface.
                           This can be a template
                           using the AVD string formatter syntax:
                           https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                           descriptions-names.html#avd-string-formatter-syntax.
                           The available template fields are:
                             -
                           `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                             -
                           `endpoint` - The name of the connected endpoint
                             - `endpoint_port_channel` - The value from
                           `endpoint_port_channel` if set.
                             - `port_channel_id` - The port-channel number for the switch.
                             -
                           `adapter_description` - The adapter's description if set.
                             - `adapter_description_or_endpoint` -
                           Helper alias of the adapter_description or endpoint.

                           The default description is set by
                           `default_connected_endpoints_port_channel_description`.
                           By default the description is templated from
                           the type, name and port_channel interface of the endpoint if set.
                        endpoint_port_channel:
                           Name of the port-channel interface on the endpoint.
                           Used for the port-channel description template
                           with the field name `peer_interface`
                        enabled:
                           Port-Channel administrative state.
                           Setting to false will set port to 'shutdown' in intended
                           configuration.
                        ptp_mpass:
                           When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
                           logical device.
                           Arista PTP enabled devices always place PTP messages on the same physical link
                           within the port-channel.
                           Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
                           devices.
                        lacp_fallback:
                           LACP fallback configuration.

                           Subclass of AvdModel.
                        lacp_timer:
                           LACP timer configuration. Applies only when Port-channel mode is not "on".

                           Subclass of AvdModel.
                        subinterfaces:
                           Port-Channel L2 Subinterfaces
                           Subinterfaces are only supported on routed port-channels, which means
                           they cannot be configured on MLAG port-channels.
                           Setting short_esi: auto generates the short_esi
                           automatically using a hash of configuration elements.
                           Please see the notes under "EVPN A/A ESI dual-
                           attached endpoint scenario" before setting short_esi: auto.


                           Subclass of AvdList with
                           `SubinterfacesItem` items.
                        raw_eos_cli: EOS CLI rendered directly on the port-channel interface in the final EOS configuration.
                        structured_config:
                           Custom structured config added under port_channel_interfaces.[name=<interface>] for
                           eos_cli_config_gen.

                    """

        class CampusLinkType(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        CampusLinkType._item_type = str

        _fields: ClassVar[dict] = {
            "switches": {"type": Switches},
            "platforms": {"type": Platforms},
            "switch_ports": {"type": SwitchPorts},
            "description": {"type": str},
            "endpoint": {"type": str},
            "speed": {"type": str},
            "profile": {"type": str},
            "enabled": {"type": bool, "default": True},
            "mode": {"type": str},
            "mtu": {"type": int},
            "l2_mtu": {"type": int},
            "l2_mru": {"type": int},
            "native_vlan": {"type": int},
            "native_vlan_tag": {"type": bool},
            "phone_vlan": {"type": int},
            "phone_trunk_mode": {"type": str},
            "trunk_groups": {"type": TrunkGroups},
            "vlans": {"type": str},
            "spanning_tree_portfast": {"type": str},
            "spanning_tree_bpdufilter": {"type": str},
            "spanning_tree_bpduguard": {"type": str},
            "flowcontrol": {"type": EosCliConfigGen.EthernetInterfacesItem.Flowcontrol},
            "qos_profile": {"type": str},
            "ptp": {"type": Ptp},
            "sflow": {"type": bool},
            "flow_tracking": {"type": FlowTracking},
            "link_tracking": {"type": LinkTracking},
            "dot1x": {"type": EosCliConfigGen.EthernetInterfacesItem.Dot1x},
            "poe": {"type": EosCliConfigGen.EthernetInterfacesItem.Poe},
            "storm_control": {"type": StormControl},
            "monitor_sessions": {"type": MonitorSessions},
            "ethernet_segment": {"type": EthernetSegment},
            "port_channel": {"type": PortChannel},
            "validate_state": {"type": bool},
            "validate_lldp": {"type": bool},
            "campus_link_type": {"type": CampusLinkType},
            "raw_eos_cli": {"type": str},
            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
        }
        switches: Switches
        """
        Regex matching the full hostname of one or more switches.
        The regular expression must match the full
        hostname.


        Subclass of AvdList with `str` items.
        """
        platforms: Platforms
        """
        Regex matching the full platform name of one or more switches. If used in combination with switch
        hostname matching, both criteria must match for configuration.
        If you need to add custom platforms
        to match specific port quantities, create them under `custom_platform_settings`. Entries under
        `custom_platform_settings` should
        match the platform match criteria.

        For example, `720XP-48Y6`
        would require a custom platform type:

        platforms:
          - 720XP
          - 720XP-48Y6

        Subclass of AvdList with
        `str` items.
        """
        switch_ports: SwitchPorts
        """
        List of ranges using AVD range_expand syntax.
        For example:

        switch_ports:
          - Ethernet1
          -
        Ethernet2-48

        All switch_ports ranges are expanded into individual port configurations.

        For more
        details and examples of the `range_expand` syntax, see the [`arista.avd.range_expand`
        documentation](../../../../../../docs/plugins/Filter_plugins/range_expand.md).


        Subclass of AvdList
        with `str` items.
        """
        description: str | None
        """
        Description or description template to be used on all ports.
        This can be a template using the AVD
        string formatter syntax:
        https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
        descriptions-names.html#avd-string-formatter-syntax.
        The available template fields are:
          -
        `endpoint_type` - always set to `network_port`.
          - `endpoint` - content of the `endpoint` key if
        set.
          - `port_channel_id`: The port-channel number for the switch.

        The default description is set
        by `default_network_ports_description`.
        By default the description is templated from the `endpoint`
        key if set.
        """
        endpoint: str | None
        """Name or description of the endpoints connected to these ports."""
        speed: str | None
        """
        Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
        <interface_speed>`.
        If not specified speed will be auto.
        """
        profile: str | None
        """Port-profile name to inherit configuration."""
        enabled: bool
        """
        Administrative state, setting to false will set the port to 'shutdown' in the intended
        configuration.

        Default value: `True`
        """
        mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
        """Interface mode."""
        mtu: int | None
        l2_mtu: int | None
        """"l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI."""
        l2_mru: int | None
        """"l2_mru" should only be defined for platforms supporting the "l2 mru" CLI."""
        native_vlan: int | None
        """
        Native VLAN for a trunk port.
        If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
        takes precedence.
        """
        native_vlan_tag: bool | None
        """If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence."""
        phone_vlan: int | None
        """
        Phone VLAN for a mode `trunk phone` port.
        Requires `mode: trunk phone` to be set.
        """
        phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None
        """
        Specify if the phone traffic is tagged or untagged.
        If both data and phone traffic are untagged,
        MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
        """
        trunk_groups: TrunkGroups
        """
        Required with `enable_trunk_groups: true`.
        Trunk Groups are used for limiting VLANs on trunk ports
        to VLANs with the same Trunk Group.


        Subclass of AvdList with `str` items.
        """
        vlans: str | None
        """
        Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
        VLAN 1 will be used for access ports.
        """
        spanning_tree_portfast: Literal["edge", "network"] | None
        spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
        spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
        flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol
        qos_profile: str | None
        """QOS profile name."""
        ptp: Ptp
        """
        The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
        enabled.
        `ptp role master` is set to ensure control over the PTP topology.


        Subclass of AvdModel.
        """
        sflow: bool | None
        """Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting."""
        flow_tracking: FlowTracking
        """
        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
        Subclass of AvdModel.
        """
        link_tracking: LinkTracking
        """
        Configure the downstream interfaces of a respective Link Tracking Group.
        If `port_channel` is
        defined in an adapter, then the port-channel interface is configured to be the downstream.
        Else all
        the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
        multihomed networks.


        Subclass of AvdModel.
        """
        dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x
        """802.1x"""
        poe: EosCliConfigGen.EthernetInterfacesItem.Poe
        """Power Over Ethernet settings applied on port. Only configured if platform supports PoE."""
        storm_control: StormControl
        """
        Storm control settings applied on port toward the endpoint.

        Subclass of AvdModel.
        """
        monitor_sessions: MonitorSessions
        """
        Used to define interfaces as source or destination for monitoring sessions.

        Subclass of AvdList
        with `MonitorSessionsItem` items.
        """
        ethernet_segment: EthernetSegment
        """
        Settings for all or single-active EVPN multihoming.

        Subclass of AvdModel.
        """
        port_channel: PortChannel
        """
        Used for port-channel adapter.

        Subclass of AvdModel.
        """
        validate_state: bool | None
        """
        Set to false to disable interface state and LLDP topology validation performed by the
        `eos_validate_state` role.
        """
        validate_lldp: bool | None
        """Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role."""
        campus_link_type: CampusLinkType
        """
        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
        change at any time.
        Values for the CloudVision `Link-Type` user tags to be associated with an
        interface.
        Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
        in the same tags being associated with the parent Ethernet interface instead.
        Attempting to
        associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
        associated with the member Ethernet interfaces instead.

        Subclass of AvdList with `str` items.
        """
        raw_eos_cli: str | None
        """EOS CLI rendered directly on the ethernet interface in the final EOS configuration."""
        structured_config: EosCliConfigGen.EthernetInterfacesItem
        """Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                switches: Switches | UndefinedType = Undefined,
                platforms: Platforms | UndefinedType = Undefined,
                switch_ports: SwitchPorts | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                endpoint: str | None | UndefinedType = Undefined,
                speed: str | None | UndefinedType = Undefined,
                profile: str | None | UndefinedType = Undefined,
                enabled: bool | UndefinedType = Undefined,
                mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                mtu: int | None | UndefinedType = Undefined,
                l2_mtu: int | None | UndefinedType = Undefined,
                l2_mru: int | None | UndefinedType = Undefined,
                native_vlan: int | None | UndefinedType = Undefined,
                native_vlan_tag: bool | None | UndefinedType = Undefined,
                phone_vlan: int | None | UndefinedType = Undefined,
                phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None | UndefinedType = Undefined,
                trunk_groups: TrunkGroups | UndefinedType = Undefined,
                vlans: str | None | UndefinedType = Undefined,
                spanning_tree_portfast: Literal["edge", "network"] | None | UndefinedType = Undefined,
                spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol | UndefinedType = Undefined,
                qos_profile: str | None | UndefinedType = Undefined,
                ptp: Ptp | UndefinedType = Undefined,
                sflow: bool | None | UndefinedType = Undefined,
                flow_tracking: FlowTracking | UndefinedType = Undefined,
                link_tracking: LinkTracking | UndefinedType = Undefined,
                dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x | UndefinedType = Undefined,
                poe: EosCliConfigGen.EthernetInterfacesItem.Poe | UndefinedType = Undefined,
                storm_control: StormControl | UndefinedType = Undefined,
                monitor_sessions: MonitorSessions | UndefinedType = Undefined,
                ethernet_segment: EthernetSegment | UndefinedType = Undefined,
                port_channel: PortChannel | UndefinedType = Undefined,
                validate_state: bool | None | UndefinedType = Undefined,
                validate_lldp: bool | None | UndefinedType = Undefined,
                campus_link_type: CampusLinkType | UndefinedType = Undefined,
                raw_eos_cli: str | None | UndefinedType = Undefined,
                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
            ) -> None:
                """
                NetworkPortsItem.


                Subclass of AvdModel.

                Args:
                    switches:
                       Regex matching the full hostname of one or more switches.
                       The regular expression must match the full
                       hostname.


                       Subclass of AvdList with `str` items.
                    platforms:
                       Regex matching the full platform name of one or more switches. If used in combination with switch
                       hostname matching, both criteria must match for configuration.
                       If you need to add custom platforms
                       to match specific port quantities, create them under `custom_platform_settings`. Entries under
                       `custom_platform_settings` should
                       match the platform match criteria.

                       For example, `720XP-48Y6`
                       would require a custom platform type:

                       platforms:
                         - 720XP
                         - 720XP-48Y6

                       Subclass of AvdList with
                       `str` items.
                    switch_ports:
                       List of ranges using AVD range_expand syntax.
                       For example:

                       switch_ports:
                         - Ethernet1
                         -
                       Ethernet2-48

                       All switch_ports ranges are expanded into individual port configurations.

                       For more
                       details and examples of the `range_expand` syntax, see the [`arista.avd.range_expand`
                       documentation](../../../../../../docs/plugins/Filter_plugins/range_expand.md).


                       Subclass of AvdList
                       with `str` items.
                    description:
                       Description or description template to be used on all ports.
                       This can be a template using the AVD
                       string formatter syntax:
                       https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                       descriptions-names.html#avd-string-formatter-syntax.
                       The available template fields are:
                         -
                       `endpoint_type` - always set to `network_port`.
                         - `endpoint` - content of the `endpoint` key if
                       set.
                         - `port_channel_id`: The port-channel number for the switch.

                       The default description is set
                       by `default_network_ports_description`.
                       By default the description is templated from the `endpoint`
                       key if set.
                    endpoint: Name or description of the endpoints connected to these ports.
                    speed:
                       Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                       <interface_speed>`.
                       If not specified speed will be auto.
                    profile: Port-profile name to inherit configuration.
                    enabled:
                       Administrative state, setting to false will set the port to 'shutdown' in the intended
                       configuration.
                    mode: Interface mode.
                    mtu: mtu
                    l2_mtu: "l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI.
                    l2_mru: "l2_mru" should only be defined for platforms supporting the "l2 mru" CLI.
                    native_vlan:
                       Native VLAN for a trunk port.
                       If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
                       takes precedence.
                    native_vlan_tag: If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence.
                    phone_vlan:
                       Phone VLAN for a mode `trunk phone` port.
                       Requires `mode: trunk phone` to be set.
                    phone_trunk_mode:
                       Specify if the phone traffic is tagged or untagged.
                       If both data and phone traffic are untagged,
                       MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
                    trunk_groups:
                       Required with `enable_trunk_groups: true`.
                       Trunk Groups are used for limiting VLANs on trunk ports
                       to VLANs with the same Trunk Group.


                       Subclass of AvdList with `str` items.
                    vlans:
                       Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
                       VLAN 1 will be used for access ports.
                    spanning_tree_portfast: spanning_tree_portfast
                    spanning_tree_bpdufilter: spanning_tree_bpdufilter
                    spanning_tree_bpduguard: spanning_tree_bpduguard
                    flowcontrol: flowcontrol
                    qos_profile: QOS profile name.
                    ptp:
                       The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
                       enabled.
                       `ptp role master` is set to ensure control over the PTP topology.


                       Subclass of AvdModel.
                    sflow: Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting.
                    flow_tracking:
                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
                       Subclass of AvdModel.
                    link_tracking:
                       Configure the downstream interfaces of a respective Link Tracking Group.
                       If `port_channel` is
                       defined in an adapter, then the port-channel interface is configured to be the downstream.
                       Else all
                       the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
                       multihomed networks.


                       Subclass of AvdModel.
                    dot1x: 802.1x
                    poe: Power Over Ethernet settings applied on port. Only configured if platform supports PoE.
                    storm_control:
                       Storm control settings applied on port toward the endpoint.

                       Subclass of AvdModel.
                    monitor_sessions:
                       Used to define interfaces as source or destination for monitoring sessions.

                       Subclass of AvdList
                       with `MonitorSessionsItem` items.
                    ethernet_segment:
                       Settings for all or single-active EVPN multihoming.

                       Subclass of AvdModel.
                    port_channel:
                       Used for port-channel adapter.

                       Subclass of AvdModel.
                    validate_state:
                       Set to false to disable interface state and LLDP topology validation performed by the
                       `eos_validate_state` role.
                    validate_lldp: Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role.
                    campus_link_type:
                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                       change at any time.
                       Values for the CloudVision `Link-Type` user tags to be associated with an
                       interface.
                       Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                       in the same tags being associated with the parent Ethernet interface instead.
                       Attempting to
                       associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                       associated with the member Ethernet interfaces instead.

                       Subclass of AvdList with `str` items.
                    raw_eos_cli: EOS CLI rendered directly on the ethernet interface in the final EOS configuration.
                    structured_config: Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen.

                """

    class NetworkPorts(AvdList[NetworkPortsItem]):
        """Subclass of AvdList with `NetworkPortsItem` items."""

    NetworkPorts._item_type = NetworkPortsItem

    class NetworkServicesKeysItem(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"name": {"type": str}}
        name: str

        if TYPE_CHECKING:

            def __init__(self, *, name: str | UndefinedType = Undefined) -> None:
                """
                NetworkServicesKeysItem.


                Subclass of AvdModel.

                Args:
                    name: name

                """

    class NetworkServicesKeys(AvdIndexedList[str, NetworkServicesKeysItem]):
        """Subclass of AvdIndexedList with `NetworkServicesKeysItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    NetworkServicesKeys._item_type = NetworkServicesKeysItem

    class CustomNodeTypeKeysItem(AvdModel):
        """Subclass of AvdModel."""

        class DefaultOverlayAddressFamilies(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        DefaultOverlayAddressFamilies._item_type = str

        class NetworkServices(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"l1": {"type": bool, "default": False}, "l2": {"type": bool, "default": False}, "l3": {"type": bool, "default": False}}
            l1: bool
            """
            Point-to-point services

            Default value: `False`
            """
            l2: bool
            """
            Vlans

            Default value: `False`
            """
            l3: bool
            """
            VRFs, SVIs (if l2 is true).
            Only supported with underlay_router.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, l1: bool | UndefinedType = Undefined, l2: bool | UndefinedType = Undefined, l3: bool | UndefinedType = Undefined) -> None:
                    """
                    NetworkServices.


                    Subclass of AvdModel.

                    Args:
                        l1: Point-to-point services
                        l2: Vlans
                        l3:
                           VRFs, SVIs (if l2 is true).
                           Only supported with underlay_router.

                    """

        class IpAddressing(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "python_module": {"type": str},
                "python_class_name": {"type": str, "default": "AvdIpAddressing"},
                "router_id": {"type": str},
                "router_id_ipv6": {"type": str},
                "mlag_ip_primary": {"type": str},
                "mlag_ip_secondary": {"type": str},
                "mlag_l3_ip_primary": {"type": str},
                "mlag_l3_ip_secondary": {"type": str},
                "mlag_ibgp_peering_ip_primary": {"type": str},
                "mlag_ibgp_peering_ip_secondary": {"type": str},
                "p2p_uplinks_ip": {"type": str},
                "p2p_uplinks_peer_ip": {"type": str},
                "vtep_ip_mlag": {"type": str},
                "vtep_ip": {"type": str},
            }
            python_module: str | None
            """Custom Python Module to import for IP addressing."""
            python_class_name: str
            """
            Name of Custom Python Class to import for IP addressing.

            Default value: `"AvdIpAddressing"`
            """
            router_id: str | None
            """Path to Custom J2 template."""
            router_id_ipv6: str | None
            """Path to Custom J2 template."""
            mlag_ip_primary: str | None
            """Path to Custom J2 template."""
            mlag_ip_secondary: str | None
            """Path to Custom J2 template."""
            mlag_l3_ip_primary: str | None
            """Path to Custom J2 template."""
            mlag_l3_ip_secondary: str | None
            """Path to Custom J2 template."""
            mlag_ibgp_peering_ip_primary: str | None
            """Path to Custom J2 template."""
            mlag_ibgp_peering_ip_secondary: str | None
            """Path to Custom J2 template."""
            p2p_uplinks_ip: str | None
            """Path to Custom J2 template."""
            p2p_uplinks_peer_ip: str | None
            """Path to Custom J2 template."""
            vtep_ip_mlag: str | None
            """Path to Custom J2 template."""
            vtep_ip: str | None
            """Path to Custom J2 template."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    python_module: str | None | UndefinedType = Undefined,
                    python_class_name: str | UndefinedType = Undefined,
                    router_id: str | None | UndefinedType = Undefined,
                    router_id_ipv6: str | None | UndefinedType = Undefined,
                    mlag_ip_primary: str | None | UndefinedType = Undefined,
                    mlag_ip_secondary: str | None | UndefinedType = Undefined,
                    mlag_l3_ip_primary: str | None | UndefinedType = Undefined,
                    mlag_l3_ip_secondary: str | None | UndefinedType = Undefined,
                    mlag_ibgp_peering_ip_primary: str | None | UndefinedType = Undefined,
                    mlag_ibgp_peering_ip_secondary: str | None | UndefinedType = Undefined,
                    p2p_uplinks_ip: str | None | UndefinedType = Undefined,
                    p2p_uplinks_peer_ip: str | None | UndefinedType = Undefined,
                    vtep_ip_mlag: str | None | UndefinedType = Undefined,
                    vtep_ip: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    IpAddressing.


                    Subclass of AvdModel.

                    Args:
                        python_module: Custom Python Module to import for IP addressing.
                        python_class_name: Name of Custom Python Class to import for IP addressing.
                        router_id: Path to Custom J2 template.
                        router_id_ipv6: Path to Custom J2 template.
                        mlag_ip_primary: Path to Custom J2 template.
                        mlag_ip_secondary: Path to Custom J2 template.
                        mlag_l3_ip_primary: Path to Custom J2 template.
                        mlag_l3_ip_secondary: Path to Custom J2 template.
                        mlag_ibgp_peering_ip_primary: Path to Custom J2 template.
                        mlag_ibgp_peering_ip_secondary: Path to Custom J2 template.
                        p2p_uplinks_ip: Path to Custom J2 template.
                        p2p_uplinks_peer_ip: Path to Custom J2 template.
                        vtep_ip_mlag: Path to Custom J2 template.
                        vtep_ip: Path to Custom J2 template.

                    """

        class InterfaceDescriptions(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "python_module": {"type": str},
                "python_class_name": {"type": str, "default": "AvdInterfaceDescriptions"},
                "underlay_ethernet_interfaces": {"type": str},
                "underlay_port_channel_interfaces": {"type": str},
                "mlag_ethernet_interfaces": {"type": str},
                "mlag_port_channel_interfaces": {"type": str},
                "connected_endpoints_ethernet_interfaces": {"type": str},
                "connected_endpoints_port_channel_interfaces": {"type": str},
                "router_id_loopback_interface": {"type": str},
                "vtep_loopback_interface": {"type": str},
                "overlay_loopback_interface": {"type": str},
            }
            python_module: str | None
            """Custom Python Module to import for interface descriptions."""
            python_class_name: str
            """
            Name of Custom Python Class to import for interface descriptions.

            Default value: `"AvdInterfaceDescriptions"`
            """
            underlay_ethernet_interfaces: str | None
            """Path to Custom J2 template."""
            underlay_port_channel_interfaces: str | None
            """Path to Custom J2 template."""
            mlag_ethernet_interfaces: str | None
            """Path to Custom J2 template."""
            mlag_port_channel_interfaces: str | None
            """Path to Custom J2 template."""
            connected_endpoints_ethernet_interfaces: str | None
            """Path to Custom J2 template."""
            connected_endpoints_port_channel_interfaces: str | None
            """Path to Custom J2 template."""
            router_id_loopback_interface: str | None
            """Path to Custom J2 template."""
            vtep_loopback_interface: str | None
            """Path to Custom J2 template."""
            overlay_loopback_interface: str | None
            """Path to Custom J2 template."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    python_module: str | None | UndefinedType = Undefined,
                    python_class_name: str | UndefinedType = Undefined,
                    underlay_ethernet_interfaces: str | None | UndefinedType = Undefined,
                    underlay_port_channel_interfaces: str | None | UndefinedType = Undefined,
                    mlag_ethernet_interfaces: str | None | UndefinedType = Undefined,
                    mlag_port_channel_interfaces: str | None | UndefinedType = Undefined,
                    connected_endpoints_ethernet_interfaces: str | None | UndefinedType = Undefined,
                    connected_endpoints_port_channel_interfaces: str | None | UndefinedType = Undefined,
                    router_id_loopback_interface: str | None | UndefinedType = Undefined,
                    vtep_loopback_interface: str | None | UndefinedType = Undefined,
                    overlay_loopback_interface: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    InterfaceDescriptions.


                    Subclass of AvdModel.

                    Args:
                        python_module: Custom Python Module to import for interface descriptions.
                        python_class_name: Name of Custom Python Class to import for interface descriptions.
                        underlay_ethernet_interfaces: Path to Custom J2 template.
                        underlay_port_channel_interfaces: Path to Custom J2 template.
                        mlag_ethernet_interfaces: Path to Custom J2 template.
                        mlag_port_channel_interfaces: Path to Custom J2 template.
                        connected_endpoints_ethernet_interfaces: Path to Custom J2 template.
                        connected_endpoints_port_channel_interfaces: Path to Custom J2 template.
                        router_id_loopback_interface: Path to Custom J2 template.
                        vtep_loopback_interface: Path to Custom J2 template.
                        overlay_loopback_interface: Path to Custom J2 template.

                    """

        _fields: ClassVar[dict] = {
            "key": {"type": str},
            "type": {"type": str},
            "connected_endpoints": {"type": bool, "default": False},
            "default_evpn_role": {"type": str, "default": "none"},
            "default_ptp_priority1": {"type": int, "default": 127},
            "default_underlay_routing_protocol": {"type": str, "default": "ebgp"},
            "default_overlay_routing_protocol": {"type": str, "default": "ebgp"},
            "default_mpls_overlay_role": {"type": str},
            "default_overlay_address_families": {"type": DefaultOverlayAddressFamilies, "default": lambda cls: coerce_type(["evpn"], target_type=cls)},
            "default_evpn_encapsulation": {"type": str, "default": "vxlan"},
            "default_wan_role": {"type": str},
            "default_flow_tracker_type": {"type": str, "default": "sampled"},
            "mlag_support": {"type": bool, "default": False},
            "network_services": {"type": NetworkServices},
            "underlay_router": {"type": bool, "default": True},
            "uplink_type": {"type": str, "default": "p2p"},
            "vtep": {"type": bool, "default": False},
            "mpls_lsr": {"type": bool, "default": False},
            "ip_addressing": {"type": IpAddressing},
            "interface_descriptions": {"type": InterfaceDescriptions},
            "cv_tags_topology_type": {"type": str},
        }
        key: str
        type: str | None
        """Type value matching this node_type_key."""
        connected_endpoints: bool
        """
        Are endpoints connected to this node type.

        Default value: `False`
        """
        default_evpn_role: Literal["none", "client", "server"]
        """
        Default evpn_role. Can be overridden in topology vars.

        Default value: `"none"`
        """
        default_ptp_priority1: int
        """
        Default PTP priority 1

        Default value: `127`
        """
        default_underlay_routing_protocol: Literal["ebgp", "ospf", "ospf-ldp", "isis", "isis-sr", "isis-ldp", "isis-sr-ldp", "none"]
        """
        Set the default underlay routing_protocol.
        Can be overridden by setting "underlay_routing_protocol"
        host/group_vars.

        Default value: `"ebgp"`
        """
        default_overlay_routing_protocol: Literal["ebgp", "ibgp", "her", "cvx", "none"]
        """
        Set the default overlay routing_protocol.
        Can be overridden by setting "overlay_routing_protocol"
        host/group_vars.

        Default value: `"ebgp"`
        """
        default_mpls_overlay_role: Literal["client", "server", "none"] | None
        """
        Set the default mpls overlay role.
        Acting role in overlay control plane.
        """
        default_overlay_address_families: DefaultOverlayAddressFamilies
        """
        Set the default overlay address families.


        Subclass of AvdList with `str` items.

        Default value: `lambda cls: coerce_type(["evpn"], target_type=cls)`
        """
        default_evpn_encapsulation: Literal["mpls", "vxlan"]
        """
        Set the default evpn encapsulation.

        Default value: `"vxlan"`
        """
        default_wan_role: Literal["client", "server"] | None
        """
        Set the default WAN role.

        This is used both for AutoVPN and Pathfinder designs.
        That means if
        `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
        `server` indicates that the router is a
        route-reflector.
        """
        default_flow_tracker_type: Literal["sampled", "hardware"]
        """
        Set the default flow tracker type.

        Default value: `"sampled"`
        """
        mlag_support: bool
        """
        Can this node type support mlag.

        Default value: `False`
        """
        network_services: NetworkServices
        """
        Will network services be deployed on this node type.

        Subclass of AvdModel.
        """
        underlay_router: bool
        """
        Is this node type a L3 device.

        Default value: `True`
        """
        uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"]
        """
        `uplink_type` must be `p2p`, `p2p-vrfs` or `lan` if `vtep` or `underlay_router` is true.

        For
        `p2p-vrfs`, the uplinks are configured as L3 interfaces with a subinterface for each VRF
        in
        `network_services` present on both the uplink and the downlink switch.
        The subinterface ID is the
        `vrf_id`.
        'underlay_router' and 'network_services.l3' must be set to true.
        VRF `default` is always
        configured on the physical interface using the underlay routing protocol.
        All subinterfaces use the
        same IP address as the physical interface.
        Multicast is not supported.
        Only BGP is supported for
        subinterfaces.

        For `lan`, a single uplink interface is supported and will be configured as an L3
        Interface with
        subinterfaces for each SVI defined under the VRFs in `network_services` as long as
        the uplink switch also
        has the VLAN permitted by tag/tenant filtering.

        Default value: `"p2p"`
        """
        vtep: bool
        """
        Is this switch an EVPN VTEP.

        Default value: `False`
        """
        mpls_lsr: bool
        """
        Is this switch an MPLS LSR.

        Default value: `False`
        """
        ip_addressing: IpAddressing
        """
        Override ip_addressing templates.

        Subclass of AvdModel.
        """
        interface_descriptions: InterfaceDescriptions
        """
        Override interface_descriptions templates.
        If description templates use Jinja2, they have to strip
        whitespaces using {%- -%} on any code blocks.


        Subclass of AvdModel.
        """
        cv_tags_topology_type: str | None
        """
        Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
        "edge" or "member-leaf".
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                key: str | UndefinedType = Undefined,
                type: str | None | UndefinedType = Undefined,
                connected_endpoints: bool | UndefinedType = Undefined,
                default_evpn_role: Literal["none", "client", "server"] | UndefinedType = Undefined,
                default_ptp_priority1: int | UndefinedType = Undefined,
                default_underlay_routing_protocol: Literal["ebgp", "ospf", "ospf-ldp", "isis", "isis-sr", "isis-ldp", "isis-sr-ldp", "none"]
                | UndefinedType = Undefined,
                default_overlay_routing_protocol: Literal["ebgp", "ibgp", "her", "cvx", "none"] | UndefinedType = Undefined,
                default_mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                default_overlay_address_families: DefaultOverlayAddressFamilies | UndefinedType = Undefined,
                default_evpn_encapsulation: Literal["mpls", "vxlan"] | UndefinedType = Undefined,
                default_wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                default_flow_tracker_type: Literal["sampled", "hardware"] | UndefinedType = Undefined,
                mlag_support: bool | UndefinedType = Undefined,
                network_services: NetworkServices | UndefinedType = Undefined,
                underlay_router: bool | UndefinedType = Undefined,
                uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | UndefinedType = Undefined,
                vtep: bool | UndefinedType = Undefined,
                mpls_lsr: bool | UndefinedType = Undefined,
                ip_addressing: IpAddressing | UndefinedType = Undefined,
                interface_descriptions: InterfaceDescriptions | UndefinedType = Undefined,
                cv_tags_topology_type: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                CustomNodeTypeKeysItem.


                Subclass of AvdModel.

                Args:
                    key: key
                    type: Type value matching this node_type_key.
                    connected_endpoints: Are endpoints connected to this node type.
                    default_evpn_role: Default evpn_role. Can be overridden in topology vars.
                    default_ptp_priority1: Default PTP priority 1
                    default_underlay_routing_protocol:
                       Set the default underlay routing_protocol.
                       Can be overridden by setting "underlay_routing_protocol"
                       host/group_vars.
                    default_overlay_routing_protocol:
                       Set the default overlay routing_protocol.
                       Can be overridden by setting "overlay_routing_protocol"
                       host/group_vars.
                    default_mpls_overlay_role:
                       Set the default mpls overlay role.
                       Acting role in overlay control plane.
                    default_overlay_address_families:
                       Set the default overlay address families.


                       Subclass of AvdList with `str` items.
                    default_evpn_encapsulation: Set the default evpn encapsulation.
                    default_wan_role:
                       Set the default WAN role.

                       This is used both for AutoVPN and Pathfinder designs.
                       That means if
                       `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                       `server` indicates that the router is a
                       route-reflector.
                    default_flow_tracker_type: Set the default flow tracker type.
                    mlag_support: Can this node type support mlag.
                    network_services:
                       Will network services be deployed on this node type.

                       Subclass of AvdModel.
                    underlay_router: Is this node type a L3 device.
                    uplink_type:
                       `uplink_type` must be `p2p`, `p2p-vrfs` or `lan` if `vtep` or `underlay_router` is true.

                       For
                       `p2p-vrfs`, the uplinks are configured as L3 interfaces with a subinterface for each VRF
                       in
                       `network_services` present on both the uplink and the downlink switch.
                       The subinterface ID is the
                       `vrf_id`.
                       'underlay_router' and 'network_services.l3' must be set to true.
                       VRF `default` is always
                       configured on the physical interface using the underlay routing protocol.
                       All subinterfaces use the
                       same IP address as the physical interface.
                       Multicast is not supported.
                       Only BGP is supported for
                       subinterfaces.

                       For `lan`, a single uplink interface is supported and will be configured as an L3
                       Interface with
                       subinterfaces for each SVI defined under the VRFs in `network_services` as long as
                       the uplink switch also
                       has the VLAN permitted by tag/tenant filtering.
                    vtep: Is this switch an EVPN VTEP.
                    mpls_lsr: Is this switch an MPLS LSR.
                    ip_addressing:
                       Override ip_addressing templates.

                       Subclass of AvdModel.
                    interface_descriptions:
                       Override interface_descriptions templates.
                       If description templates use Jinja2, they have to strip
                       whitespaces using {%- -%} on any code blocks.


                       Subclass of AvdModel.
                    cv_tags_topology_type:
                       Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                       "edge" or "member-leaf".

                """

    class CustomNodeTypeKeys(AvdIndexedList[str, CustomNodeTypeKeysItem]):
        """Subclass of AvdIndexedList with `CustomNodeTypeKeysItem` items. Primary key is `key` (`str`)."""

        _primary_key: ClassVar[str] = "key"

    CustomNodeTypeKeys._item_type = CustomNodeTypeKeysItem

    class NodeTypeKeysItem(AvdModel):
        """Subclass of AvdModel."""

        class DefaultOverlayAddressFamilies(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        DefaultOverlayAddressFamilies._item_type = str

        class NetworkServices(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"l1": {"type": bool, "default": False}, "l2": {"type": bool, "default": False}, "l3": {"type": bool, "default": False}}
            l1: bool
            """
            Point-to-point services

            Default value: `False`
            """
            l2: bool
            """
            Vlans

            Default value: `False`
            """
            l3: bool
            """
            VRFs, SVIs (if l2 is true).
            Only supported with underlay_router.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, l1: bool | UndefinedType = Undefined, l2: bool | UndefinedType = Undefined, l3: bool | UndefinedType = Undefined) -> None:
                    """
                    NetworkServices.


                    Subclass of AvdModel.

                    Args:
                        l1: Point-to-point services
                        l2: Vlans
                        l3:
                           VRFs, SVIs (if l2 is true).
                           Only supported with underlay_router.

                    """

        class IpAddressing(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "python_module": {"type": str},
                "python_class_name": {"type": str, "default": "AvdIpAddressing"},
                "router_id": {"type": str},
                "router_id_ipv6": {"type": str},
                "mlag_ip_primary": {"type": str},
                "mlag_ip_secondary": {"type": str},
                "mlag_l3_ip_primary": {"type": str},
                "mlag_l3_ip_secondary": {"type": str},
                "mlag_ibgp_peering_ip_primary": {"type": str},
                "mlag_ibgp_peering_ip_secondary": {"type": str},
                "p2p_uplinks_ip": {"type": str},
                "p2p_uplinks_peer_ip": {"type": str},
                "vtep_ip_mlag": {"type": str},
                "vtep_ip": {"type": str},
            }
            python_module: str | None
            """Custom Python Module to import for IP addressing."""
            python_class_name: str
            """
            Name of Custom Python Class to import for IP addressing.

            Default value: `"AvdIpAddressing"`
            """
            router_id: str | None
            """Path to Custom J2 template."""
            router_id_ipv6: str | None
            """Path to Custom J2 template."""
            mlag_ip_primary: str | None
            """Path to Custom J2 template."""
            mlag_ip_secondary: str | None
            """Path to Custom J2 template."""
            mlag_l3_ip_primary: str | None
            """Path to Custom J2 template."""
            mlag_l3_ip_secondary: str | None
            """Path to Custom J2 template."""
            mlag_ibgp_peering_ip_primary: str | None
            """Path to Custom J2 template."""
            mlag_ibgp_peering_ip_secondary: str | None
            """Path to Custom J2 template."""
            p2p_uplinks_ip: str | None
            """Path to Custom J2 template."""
            p2p_uplinks_peer_ip: str | None
            """Path to Custom J2 template."""
            vtep_ip_mlag: str | None
            """Path to Custom J2 template."""
            vtep_ip: str | None
            """Path to Custom J2 template."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    python_module: str | None | UndefinedType = Undefined,
                    python_class_name: str | UndefinedType = Undefined,
                    router_id: str | None | UndefinedType = Undefined,
                    router_id_ipv6: str | None | UndefinedType = Undefined,
                    mlag_ip_primary: str | None | UndefinedType = Undefined,
                    mlag_ip_secondary: str | None | UndefinedType = Undefined,
                    mlag_l3_ip_primary: str | None | UndefinedType = Undefined,
                    mlag_l3_ip_secondary: str | None | UndefinedType = Undefined,
                    mlag_ibgp_peering_ip_primary: str | None | UndefinedType = Undefined,
                    mlag_ibgp_peering_ip_secondary: str | None | UndefinedType = Undefined,
                    p2p_uplinks_ip: str | None | UndefinedType = Undefined,
                    p2p_uplinks_peer_ip: str | None | UndefinedType = Undefined,
                    vtep_ip_mlag: str | None | UndefinedType = Undefined,
                    vtep_ip: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    IpAddressing.


                    Subclass of AvdModel.

                    Args:
                        python_module: Custom Python Module to import for IP addressing.
                        python_class_name: Name of Custom Python Class to import for IP addressing.
                        router_id: Path to Custom J2 template.
                        router_id_ipv6: Path to Custom J2 template.
                        mlag_ip_primary: Path to Custom J2 template.
                        mlag_ip_secondary: Path to Custom J2 template.
                        mlag_l3_ip_primary: Path to Custom J2 template.
                        mlag_l3_ip_secondary: Path to Custom J2 template.
                        mlag_ibgp_peering_ip_primary: Path to Custom J2 template.
                        mlag_ibgp_peering_ip_secondary: Path to Custom J2 template.
                        p2p_uplinks_ip: Path to Custom J2 template.
                        p2p_uplinks_peer_ip: Path to Custom J2 template.
                        vtep_ip_mlag: Path to Custom J2 template.
                        vtep_ip: Path to Custom J2 template.

                    """

        class InterfaceDescriptions(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "python_module": {"type": str},
                "python_class_name": {"type": str, "default": "AvdInterfaceDescriptions"},
                "underlay_ethernet_interfaces": {"type": str},
                "underlay_port_channel_interfaces": {"type": str},
                "mlag_ethernet_interfaces": {"type": str},
                "mlag_port_channel_interfaces": {"type": str},
                "connected_endpoints_ethernet_interfaces": {"type": str},
                "connected_endpoints_port_channel_interfaces": {"type": str},
                "router_id_loopback_interface": {"type": str},
                "vtep_loopback_interface": {"type": str},
                "overlay_loopback_interface": {"type": str},
            }
            python_module: str | None
            """Custom Python Module to import for interface descriptions."""
            python_class_name: str
            """
            Name of Custom Python Class to import for interface descriptions.

            Default value: `"AvdInterfaceDescriptions"`
            """
            underlay_ethernet_interfaces: str | None
            """Path to Custom J2 template."""
            underlay_port_channel_interfaces: str | None
            """Path to Custom J2 template."""
            mlag_ethernet_interfaces: str | None
            """Path to Custom J2 template."""
            mlag_port_channel_interfaces: str | None
            """Path to Custom J2 template."""
            connected_endpoints_ethernet_interfaces: str | None
            """Path to Custom J2 template."""
            connected_endpoints_port_channel_interfaces: str | None
            """Path to Custom J2 template."""
            router_id_loopback_interface: str | None
            """Path to Custom J2 template."""
            vtep_loopback_interface: str | None
            """Path to Custom J2 template."""
            overlay_loopback_interface: str | None
            """Path to Custom J2 template."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    python_module: str | None | UndefinedType = Undefined,
                    python_class_name: str | UndefinedType = Undefined,
                    underlay_ethernet_interfaces: str | None | UndefinedType = Undefined,
                    underlay_port_channel_interfaces: str | None | UndefinedType = Undefined,
                    mlag_ethernet_interfaces: str | None | UndefinedType = Undefined,
                    mlag_port_channel_interfaces: str | None | UndefinedType = Undefined,
                    connected_endpoints_ethernet_interfaces: str | None | UndefinedType = Undefined,
                    connected_endpoints_port_channel_interfaces: str | None | UndefinedType = Undefined,
                    router_id_loopback_interface: str | None | UndefinedType = Undefined,
                    vtep_loopback_interface: str | None | UndefinedType = Undefined,
                    overlay_loopback_interface: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    InterfaceDescriptions.


                    Subclass of AvdModel.

                    Args:
                        python_module: Custom Python Module to import for interface descriptions.
                        python_class_name: Name of Custom Python Class to import for interface descriptions.
                        underlay_ethernet_interfaces: Path to Custom J2 template.
                        underlay_port_channel_interfaces: Path to Custom J2 template.
                        mlag_ethernet_interfaces: Path to Custom J2 template.
                        mlag_port_channel_interfaces: Path to Custom J2 template.
                        connected_endpoints_ethernet_interfaces: Path to Custom J2 template.
                        connected_endpoints_port_channel_interfaces: Path to Custom J2 template.
                        router_id_loopback_interface: Path to Custom J2 template.
                        vtep_loopback_interface: Path to Custom J2 template.
                        overlay_loopback_interface: Path to Custom J2 template.

                    """

        _fields: ClassVar[dict] = {
            "key": {"type": str},
            "type": {"type": str},
            "connected_endpoints": {"type": bool, "default": False},
            "default_evpn_role": {"type": str, "default": "none"},
            "default_ptp_priority1": {"type": int, "default": 127},
            "default_underlay_routing_protocol": {"type": str, "default": "ebgp"},
            "default_overlay_routing_protocol": {"type": str, "default": "ebgp"},
            "default_mpls_overlay_role": {"type": str},
            "default_overlay_address_families": {"type": DefaultOverlayAddressFamilies, "default": lambda cls: coerce_type(["evpn"], target_type=cls)},
            "default_evpn_encapsulation": {"type": str, "default": "vxlan"},
            "default_wan_role": {"type": str},
            "default_flow_tracker_type": {"type": str, "default": "sampled"},
            "mlag_support": {"type": bool, "default": False},
            "network_services": {"type": NetworkServices},
            "underlay_router": {"type": bool, "default": True},
            "uplink_type": {"type": str, "default": "p2p"},
            "vtep": {"type": bool, "default": False},
            "mpls_lsr": {"type": bool, "default": False},
            "ip_addressing": {"type": IpAddressing},
            "interface_descriptions": {"type": InterfaceDescriptions},
            "cv_tags_topology_type": {"type": str},
        }
        key: str
        type: str | None
        """Type value matching this node_type_key."""
        connected_endpoints: bool
        """
        Are endpoints connected to this node type.

        Default value: `False`
        """
        default_evpn_role: Literal["none", "client", "server"]
        """
        Default evpn_role. Can be overridden in topology vars.

        Default value: `"none"`
        """
        default_ptp_priority1: int
        """
        Default PTP priority 1

        Default value: `127`
        """
        default_underlay_routing_protocol: Literal["ebgp", "ospf", "ospf-ldp", "isis", "isis-sr", "isis-ldp", "isis-sr-ldp", "none"]
        """
        Set the default underlay routing_protocol.
        Can be overridden by setting "underlay_routing_protocol"
        host/group_vars.

        Default value: `"ebgp"`
        """
        default_overlay_routing_protocol: Literal["ebgp", "ibgp", "her", "cvx", "none"]
        """
        Set the default overlay routing_protocol.
        Can be overridden by setting "overlay_routing_protocol"
        host/group_vars.

        Default value: `"ebgp"`
        """
        default_mpls_overlay_role: Literal["client", "server", "none"] | None
        """
        Set the default mpls overlay role.
        Acting role in overlay control plane.
        """
        default_overlay_address_families: DefaultOverlayAddressFamilies
        """
        Set the default overlay address families.


        Subclass of AvdList with `str` items.

        Default value: `lambda cls: coerce_type(["evpn"], target_type=cls)`
        """
        default_evpn_encapsulation: Literal["mpls", "vxlan"]
        """
        Set the default evpn encapsulation.

        Default value: `"vxlan"`
        """
        default_wan_role: Literal["client", "server"] | None
        """
        Set the default WAN role.

        This is used both for AutoVPN and Pathfinder designs.
        That means if
        `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
        `server` indicates that the router is a
        route-reflector.
        """
        default_flow_tracker_type: Literal["sampled", "hardware"]
        """
        Set the default flow tracker type.

        Default value: `"sampled"`
        """
        mlag_support: bool
        """
        Can this node type support mlag.

        Default value: `False`
        """
        network_services: NetworkServices
        """
        Will network services be deployed on this node type.

        Subclass of AvdModel.
        """
        underlay_router: bool
        """
        Is this node type a L3 device.

        Default value: `True`
        """
        uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"]
        """
        `uplink_type` must be `p2p`, `p2p-vrfs` or `lan` if `vtep` or `underlay_router` is true.

        For
        `p2p-vrfs`, the uplinks are configured as L3 interfaces with a subinterface for each VRF
        in
        `network_services` present on both the uplink and the downlink switch.
        The subinterface ID is the
        `vrf_id`.
        'underlay_router' and 'network_services.l3' must be set to true.
        VRF `default` is always
        configured on the physical interface using the underlay routing protocol.
        All subinterfaces use the
        same IP address as the physical interface.
        Multicast is not supported.
        Only BGP is supported for
        subinterfaces.

        For `lan`, a single uplink interface is supported and will be configured as an L3
        Interface with
        subinterfaces for each SVI defined under the VRFs in `network_services` as long as
        the uplink switch also
        has the VLAN permitted by tag/tenant filtering.

        Default value: `"p2p"`
        """
        vtep: bool
        """
        Is this switch an EVPN VTEP.

        Default value: `False`
        """
        mpls_lsr: bool
        """
        Is this switch an MPLS LSR.

        Default value: `False`
        """
        ip_addressing: IpAddressing
        """
        Override ip_addressing templates.

        Subclass of AvdModel.
        """
        interface_descriptions: InterfaceDescriptions
        """
        Override interface_descriptions templates.
        If description templates use Jinja2, they have to strip
        whitespaces using {%- -%} on any code blocks.


        Subclass of AvdModel.
        """
        cv_tags_topology_type: str | None
        """
        Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
        "edge" or "member-leaf".
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                key: str | UndefinedType = Undefined,
                type: str | None | UndefinedType = Undefined,
                connected_endpoints: bool | UndefinedType = Undefined,
                default_evpn_role: Literal["none", "client", "server"] | UndefinedType = Undefined,
                default_ptp_priority1: int | UndefinedType = Undefined,
                default_underlay_routing_protocol: Literal["ebgp", "ospf", "ospf-ldp", "isis", "isis-sr", "isis-ldp", "isis-sr-ldp", "none"]
                | UndefinedType = Undefined,
                default_overlay_routing_protocol: Literal["ebgp", "ibgp", "her", "cvx", "none"] | UndefinedType = Undefined,
                default_mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                default_overlay_address_families: DefaultOverlayAddressFamilies | UndefinedType = Undefined,
                default_evpn_encapsulation: Literal["mpls", "vxlan"] | UndefinedType = Undefined,
                default_wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                default_flow_tracker_type: Literal["sampled", "hardware"] | UndefinedType = Undefined,
                mlag_support: bool | UndefinedType = Undefined,
                network_services: NetworkServices | UndefinedType = Undefined,
                underlay_router: bool | UndefinedType = Undefined,
                uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | UndefinedType = Undefined,
                vtep: bool | UndefinedType = Undefined,
                mpls_lsr: bool | UndefinedType = Undefined,
                ip_addressing: IpAddressing | UndefinedType = Undefined,
                interface_descriptions: InterfaceDescriptions | UndefinedType = Undefined,
                cv_tags_topology_type: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                NodeTypeKeysItem.


                Subclass of AvdModel.

                Args:
                    key: key
                    type: Type value matching this node_type_key.
                    connected_endpoints: Are endpoints connected to this node type.
                    default_evpn_role: Default evpn_role. Can be overridden in topology vars.
                    default_ptp_priority1: Default PTP priority 1
                    default_underlay_routing_protocol:
                       Set the default underlay routing_protocol.
                       Can be overridden by setting "underlay_routing_protocol"
                       host/group_vars.
                    default_overlay_routing_protocol:
                       Set the default overlay routing_protocol.
                       Can be overridden by setting "overlay_routing_protocol"
                       host/group_vars.
                    default_mpls_overlay_role:
                       Set the default mpls overlay role.
                       Acting role in overlay control plane.
                    default_overlay_address_families:
                       Set the default overlay address families.


                       Subclass of AvdList with `str` items.
                    default_evpn_encapsulation: Set the default evpn encapsulation.
                    default_wan_role:
                       Set the default WAN role.

                       This is used both for AutoVPN and Pathfinder designs.
                       That means if
                       `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                       `server` indicates that the router is a
                       route-reflector.
                    default_flow_tracker_type: Set the default flow tracker type.
                    mlag_support: Can this node type support mlag.
                    network_services:
                       Will network services be deployed on this node type.

                       Subclass of AvdModel.
                    underlay_router: Is this node type a L3 device.
                    uplink_type:
                       `uplink_type` must be `p2p`, `p2p-vrfs` or `lan` if `vtep` or `underlay_router` is true.

                       For
                       `p2p-vrfs`, the uplinks are configured as L3 interfaces with a subinterface for each VRF
                       in
                       `network_services` present on both the uplink and the downlink switch.
                       The subinterface ID is the
                       `vrf_id`.
                       'underlay_router' and 'network_services.l3' must be set to true.
                       VRF `default` is always
                       configured on the physical interface using the underlay routing protocol.
                       All subinterfaces use the
                       same IP address as the physical interface.
                       Multicast is not supported.
                       Only BGP is supported for
                       subinterfaces.

                       For `lan`, a single uplink interface is supported and will be configured as an L3
                       Interface with
                       subinterfaces for each SVI defined under the VRFs in `network_services` as long as
                       the uplink switch also
                       has the VLAN permitted by tag/tenant filtering.
                    vtep: Is this switch an EVPN VTEP.
                    mpls_lsr: Is this switch an MPLS LSR.
                    ip_addressing:
                       Override ip_addressing templates.

                       Subclass of AvdModel.
                    interface_descriptions:
                       Override interface_descriptions templates.
                       If description templates use Jinja2, they have to strip
                       whitespaces using {%- -%} on any code blocks.


                       Subclass of AvdModel.
                    cv_tags_topology_type:
                       Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                       "edge" or "member-leaf".

                """

    class NodeTypeKeys(AvdIndexedList[str, NodeTypeKeysItem]):
        """Subclass of AvdIndexedList with `NodeTypeKeysItem` items. Primary key is `key` (`str`)."""

        _primary_key: ClassVar[str] = "key"

    NodeTypeKeys._item_type = NodeTypeKeysItem

    class NtpSettings(AvdModel):
        """Subclass of AvdModel."""

        class ServersItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "burst": {"type": bool},
                "iburst": {"type": bool},
                "key": {"type": int},
                "maxpoll": {"type": int},
                "minpoll": {"type": int},
                "version": {"type": int},
            }
            name: str | None
            """IP or hostname e.g., 2.2.2.55, 2001:db8::55, ie.pool.ntp.org."""
            burst: bool | None
            iburst: bool | None
            key: int | None
            maxpoll: int | None
            """Value of maxpoll between 3 - 17 (Logarithmic)."""
            minpoll: int | None
            """Value of minpoll between 3 - 17 (Logarithmic)."""
            version: int | None

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | None | UndefinedType = Undefined,
                    burst: bool | None | UndefinedType = Undefined,
                    iburst: bool | None | UndefinedType = Undefined,
                    key: int | None | UndefinedType = Undefined,
                    maxpoll: int | None | UndefinedType = Undefined,
                    minpoll: int | None | UndefinedType = Undefined,
                    version: int | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    ServersItem.


                    Subclass of AvdModel.

                    Args:
                        name: IP or hostname e.g., 2.2.2.55, 2001:db8::55, ie.pool.ntp.org.
                        burst: burst
                        iburst: iburst
                        key: key
                        maxpoll: Value of maxpoll between 3 - 17 (Logarithmic).
                        minpoll: Value of minpoll between 3 - 17 (Logarithmic).
                        version: version

                    """

        class Servers(AvdList[ServersItem]):
            """Subclass of AvdList with `ServersItem` items."""

        Servers._item_type = ServersItem

        class AuthenticationKeysItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "key": {"type": str},
                "cleartext_key": {"type": str},
                "key_type": {"type": str},
                "id": {"type": int},
                "hash_algorithm": {"type": str},
            }
            key: str | None
            """
            Authentication provided using the `key_type` format.
            Will be rendered as such.
            Takes precedence over
            `cleartext_key`.
            """
            cleartext_key: str | None
            """
            Cleartext key for the NTP authentication key. Encrypted to Type 7 by AVD.
            `key_type` does not
            influence this key.
            To protect the password at rest it is strongly recommended to make use of a
            vault or similar.
            """
            key_type: Literal["0", "7", "8a"] | None
            """
            Key type of the `key`.
            Does not have any influence on `cleartext_key`.
            """
            id: int
            """Key identifier."""
            hash_algorithm: Literal["md5", "sha1"]

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    key: str | None | UndefinedType = Undefined,
                    cleartext_key: str | None | UndefinedType = Undefined,
                    key_type: Literal["0", "7", "8a"] | None | UndefinedType = Undefined,
                    id: int | UndefinedType = Undefined,
                    hash_algorithm: Literal["md5", "sha1"] | UndefinedType = Undefined,
                ) -> None:
                    """
                    AuthenticationKeysItem.


                    Subclass of AvdModel.

                    Args:
                        key:
                           Authentication provided using the `key_type` format.
                           Will be rendered as such.
                           Takes precedence over
                           `cleartext_key`.
                        cleartext_key:
                           Cleartext key for the NTP authentication key. Encrypted to Type 7 by AVD.
                           `key_type` does not
                           influence this key.
                           To protect the password at rest it is strongly recommended to make use of a
                           vault or similar.
                        key_type:
                           Key type of the `key`.
                           Does not have any influence on `cleartext_key`.
                        id: Key identifier.
                        hash_algorithm: hash_algorithm

                    """

        class AuthenticationKeys(AvdIndexedList[int, AuthenticationKeysItem]):
            """Subclass of AvdIndexedList with `AuthenticationKeysItem` items. Primary key is `id` (`int`)."""

            _primary_key: ClassVar[str] = "id"

        AuthenticationKeys._item_type = AuthenticationKeysItem

        _fields: ClassVar[dict] = {
            "server_vrf": {"type": str},
            "servers": {"type": Servers},
            "authenticate": {"type": bool},
            "authenticate_servers_only": {"type": bool},
            "authentication_keys": {"type": AuthenticationKeys},
            "trusted_keys": {"type": str},
        }
        server_vrf: str | None
        """
        EOS only supports NTP servers in one VRF, so this VRF is used for all NTP servers and one local-
        interface.
        - `use_mgmt_interface_vrf` will configure the NTP server(s) under the VRF set with
        `mgmt_interface_vrf` and set the `mgmt_interface` as NTP local-interface.
          An error will be raised
        if `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
        - `use_inband_mgmt_vrf` will
        configure the NTP server(s) under the VRF set with `inband_mgmt_vrf` and set the
        `inband_mgmt_interface` as NTP local-interface.
          An error will be raised if inband management is
        not configured for the device.
        - Any other string will be used directly as the VRF name but local
        interface must be set with `custom_structured_configuration_ntp` if needed.
        If not set, the VRF is
        automatically picked up from the global setting `default_mgmt_method`.
        """
        servers: Servers
        """
        The first server is always set as "preferred".

        Subclass of AvdList with `ServersItem` items.
        """
        authenticate: bool | None
        authenticate_servers_only: bool | None
        authentication_keys: AuthenticationKeys
        """Subclass of AvdIndexedList with `AuthenticationKeysItem` items. Primary key is `id` (`int`)."""
        trusted_keys: str | None
        """List of trusted-keys as string ex. 10-12,15."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                server_vrf: str | None | UndefinedType = Undefined,
                servers: Servers | UndefinedType = Undefined,
                authenticate: bool | None | UndefinedType = Undefined,
                authenticate_servers_only: bool | None | UndefinedType = Undefined,
                authentication_keys: AuthenticationKeys | UndefinedType = Undefined,
                trusted_keys: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                NtpSettings.


                Subclass of AvdModel.

                Args:
                    server_vrf:
                       EOS only supports NTP servers in one VRF, so this VRF is used for all NTP servers and one local-
                       interface.
                       - `use_mgmt_interface_vrf` will configure the NTP server(s) under the VRF set with
                       `mgmt_interface_vrf` and set the `mgmt_interface` as NTP local-interface.
                         An error will be raised
                       if `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                       - `use_inband_mgmt_vrf` will
                       configure the NTP server(s) under the VRF set with `inband_mgmt_vrf` and set the
                       `inband_mgmt_interface` as NTP local-interface.
                         An error will be raised if inband management is
                       not configured for the device.
                       - Any other string will be used directly as the VRF name but local
                       interface must be set with `custom_structured_configuration_ntp` if needed.
                       If not set, the VRF is
                       automatically picked up from the global setting `default_mgmt_method`.
                    servers:
                       The first server is always set as "preferred".

                       Subclass of AvdList with `ServersItem` items.
                    authenticate: authenticate
                    authenticate_servers_only: authenticate_servers_only
                    authentication_keys: Subclass of AvdIndexedList with `AuthenticationKeysItem` items. Primary key is `id` (`int`).
                    trusted_keys: List of trusted-keys as string ex. 10-12,15.

                """

    class OverlayCvxServers(AvdList[str]):
        """Subclass of AvdList with `str` items."""

    OverlayCvxServers._item_type = str

    class OverlayRdType(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "admin_subfield": {"type": str, "default": "router_id"},
            "admin_subfield_offset": {"type": int, "default": 0},
            "vrf_admin_subfield": {"type": str},
            "vrf_admin_subfield_offset": {"type": int},
            "vlan_assigned_number_subfield": {"type": str, "default": "mac_vrf_id"},
        }
        admin_subfield: str
        """
        The method for deriving RD Administrator subfield (first part of RD):
        - 'router_id' means the IP
        address of Loopback0.
        - 'vtep_loopback' means the IP address of the VTEP loopback interface.
        -
        'bgp_as' means the AS number of the device.
        - 'switch_id' means the 'id' value of the device.
        - Any
        <IPv4 Address> without mask.
        - Integer between <0-65535>.
        - Integer between <0-4294967295>.
        -
        'overlay_loopback_ip' means the IP address of Loopback0. (deprecated - use 'router_id' instead)

        Default value: `"router_id"`
        """
        admin_subfield_offset: int
        """
        Offset can only be used if admin_subfield is an integer between <0-4294967295> or 'switch_id'.
        Total
        value of admin_subfield + admin_subfield_offset must be <= 4294967295.

        Default value: `0`
        """
        vrf_admin_subfield: str | None
        """
        The method for deriving RD Administrator subfield (first part of RD) for VRF services:
        - 'router_id'
        means the IP address of Loopback0.
        - 'vrf_router_id' means the Router ID assigned for the BGP in the
        VRF - falling back to IP address of Loopback0.
        - 'vtep_loopback' means the IP address of the VTEP
        loopback interface.
        - 'bgp_as' means the AS number of the device.
        - 'switch_id' means the 'id' value
        of the device.
        - Any <IPv4 Address> without mask.
        - Integer between <0-65535>.
        - Integer between
        <0-4294967295>.
        - 'overlay_loopback_ip' means the IP address of Loopback0. (deprecated - use
        'router_id' instead)

        'vrf_admin_subfield' takes precedence for VRF RDs if set. Otherwise the
        'admin_subfield' value will be used.
        """
        vrf_admin_subfield_offset: int | None
        """
        Offset can only be used if 'vrf_admin_subfield' is an integer between <0-4294967295> or 'switch_id'.
        Total value of 'vrf_admin_subfield' + 'vrf_admin_subfield_offset' must be <= 4294967295.
        'vrf_admin_subfield_offset' takes precedence for VRF RDs if set. Otherwise the
        'admin_subfield_offset' value will be used.
        """
        vlan_assigned_number_subfield: Literal["mac_vrf_id", "mac_vrf_vni", "vlan_id"]
        """
        The method for deriving RD Assigned Number subfield for VLAN services (second part of RD):
        -
        'mac_vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id`.
        - 'mac_vrf_vni' means
        `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id`.
        - 'vlan_id' will only use the 'vlan_id' and
        ignores all base values.

        These methods can be overridden per VLAN if either 'rd_override',
        'rt_override' or 'vni_override' is set (preferred in this order).

        Default value: `"mac_vrf_id"`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                admin_subfield: str | UndefinedType = Undefined,
                admin_subfield_offset: int | UndefinedType = Undefined,
                vrf_admin_subfield: str | None | UndefinedType = Undefined,
                vrf_admin_subfield_offset: int | None | UndefinedType = Undefined,
                vlan_assigned_number_subfield: Literal["mac_vrf_id", "mac_vrf_vni", "vlan_id"] | UndefinedType = Undefined,
            ) -> None:
                """
                OverlayRdType.


                Subclass of AvdModel.

                Args:
                    admin_subfield:
                       The method for deriving RD Administrator subfield (first part of RD):
                       - 'router_id' means the IP
                       address of Loopback0.
                       - 'vtep_loopback' means the IP address of the VTEP loopback interface.
                       -
                       'bgp_as' means the AS number of the device.
                       - 'switch_id' means the 'id' value of the device.
                       - Any
                       <IPv4 Address> without mask.
                       - Integer between <0-65535>.
                       - Integer between <0-4294967295>.
                       -
                       'overlay_loopback_ip' means the IP address of Loopback0. (deprecated - use 'router_id' instead)
                    admin_subfield_offset:
                       Offset can only be used if admin_subfield is an integer between <0-4294967295> or 'switch_id'.
                       Total
                       value of admin_subfield + admin_subfield_offset must be <= 4294967295.
                    vrf_admin_subfield:
                       The method for deriving RD Administrator subfield (first part of RD) for VRF services:
                       - 'router_id'
                       means the IP address of Loopback0.
                       - 'vrf_router_id' means the Router ID assigned for the BGP in the
                       VRF - falling back to IP address of Loopback0.
                       - 'vtep_loopback' means the IP address of the VTEP
                       loopback interface.
                       - 'bgp_as' means the AS number of the device.
                       - 'switch_id' means the 'id' value
                       of the device.
                       - Any <IPv4 Address> without mask.
                       - Integer between <0-65535>.
                       - Integer between
                       <0-4294967295>.
                       - 'overlay_loopback_ip' means the IP address of Loopback0. (deprecated - use
                       'router_id' instead)

                       'vrf_admin_subfield' takes precedence for VRF RDs if set. Otherwise the
                       'admin_subfield' value will be used.
                    vrf_admin_subfield_offset:
                       Offset can only be used if 'vrf_admin_subfield' is an integer between <0-4294967295> or 'switch_id'.
                       Total value of 'vrf_admin_subfield' + 'vrf_admin_subfield_offset' must be <= 4294967295.
                       'vrf_admin_subfield_offset' takes precedence for VRF RDs if set. Otherwise the
                       'admin_subfield_offset' value will be used.
                    vlan_assigned_number_subfield:
                       The method for deriving RD Assigned Number subfield for VLAN services (second part of RD):
                       -
                       'mac_vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id`.
                       - 'mac_vrf_vni' means
                       `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id`.
                       - 'vlan_id' will only use the 'vlan_id' and
                       ignores all base values.

                       These methods can be overridden per VLAN if either 'rd_override',
                       'rt_override' or 'vni_override' is set (preferred in this order).

                """

    class OverlayRtType(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "admin_subfield": {"type": str, "default": "vrf_id"},
            "vrf_admin_subfield": {"type": str},
            "vlan_assigned_number_subfield": {"type": str, "default": "mac_vrf_id"},
        }
        admin_subfield: str
        """
        The method for deriving RT Administrator subfield (first part of RT):
        - 'vrf_id' means
        `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id` for VLANs, `(vrf_id or vrf_vni)` for VRFs and `id`
        for bundles defined under 'evpn_vlan_bundles'.
        - 'vrf_vni' means `(mac_vrf_vni_base or
        mac_vrf_id_base) + vlan_id` for VLANs, `(vrf_vni or vrf_id)` for VRFs and `id` for bundles defined
        under 'evpn_vlan_bundles'.
        - 'id' means `vlan_id` for VLANs, `(vrf_id or vrf_vni)` for VRFs and `id`
        for bundles defined under 'evpn_vlan_bundles'.
        - 'bgp_as' means the AS number of the device.
        -
        Integer between <0-65535>.
        - Integer between <0-4294967295>.

        The 'vrf_id' and 'vrf_vni' methods can
        be overridden per VLAN if either 'rt_override' or 'vni_override' is set (preferred in this order).
        The 'vrf_id', 'vrf_vni' and 'id' methods can be overridden per bundle defined under
        `evpn_vlan_bundles` using 'rt_override'.

        Default value: `"vrf_id"`
        """
        vrf_admin_subfield: str | None
        """
        The method for deriving RT Administrator subfield (first part of RT) for VRF services:
        - 'id' means
        `(vrf_id or vrf_vni)`.
        - 'vrf_id' means `(vrf_id or vrf_vni)`.
        - 'vrf_vni' means `(vrf_vni or
        vrf_id)`.
        - 'bgp_as' means the AS number of the device.
        - Integer between <0-65535>.
        - Integer
        between <0-4294967295>.

        'vrf_admin_subfield' takes precedence for VRF RDs if set. Otherwise the
        'admin_subfield' value will be used.
        """
        vlan_assigned_number_subfield: Literal["mac_vrf_id", "mac_vrf_vni", "vlan_id"]
        """
        The method for deriving RT Assigned Number subfield for VLAN services (second part of RT):
        -
        'mac_vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id`.
        - 'mac_vrf_vni' means
        `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id`.
        - 'vlan_id' will only use the 'vlan_id' and
        ignores all base values.

        These methods can be overridden per VLAN if either 'rt_override' or
        'vni_override' is set (preferred in this order).

        Default value: `"mac_vrf_id"`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                admin_subfield: str | UndefinedType = Undefined,
                vrf_admin_subfield: str | None | UndefinedType = Undefined,
                vlan_assigned_number_subfield: Literal["mac_vrf_id", "mac_vrf_vni", "vlan_id"] | UndefinedType = Undefined,
            ) -> None:
                """
                OverlayRtType.


                Subclass of AvdModel.

                Args:
                    admin_subfield:
                       The method for deriving RT Administrator subfield (first part of RT):
                       - 'vrf_id' means
                       `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id` for VLANs, `(vrf_id or vrf_vni)` for VRFs and `id`
                       for bundles defined under 'evpn_vlan_bundles'.
                       - 'vrf_vni' means `(mac_vrf_vni_base or
                       mac_vrf_id_base) + vlan_id` for VLANs, `(vrf_vni or vrf_id)` for VRFs and `id` for bundles defined
                       under 'evpn_vlan_bundles'.
                       - 'id' means `vlan_id` for VLANs, `(vrf_id or vrf_vni)` for VRFs and `id`
                       for bundles defined under 'evpn_vlan_bundles'.
                       - 'bgp_as' means the AS number of the device.
                       -
                       Integer between <0-65535>.
                       - Integer between <0-4294967295>.

                       The 'vrf_id' and 'vrf_vni' methods can
                       be overridden per VLAN if either 'rt_override' or 'vni_override' is set (preferred in this order).
                       The 'vrf_id', 'vrf_vni' and 'id' methods can be overridden per bundle defined under
                       `evpn_vlan_bundles` using 'rt_override'.
                    vrf_admin_subfield:
                       The method for deriving RT Administrator subfield (first part of RT) for VRF services:
                       - 'id' means
                       `(vrf_id or vrf_vni)`.
                       - 'vrf_id' means `(vrf_id or vrf_vni)`.
                       - 'vrf_vni' means `(vrf_vni or
                       vrf_id)`.
                       - 'bgp_as' means the AS number of the device.
                       - Integer between <0-65535>.
                       - Integer
                       between <0-4294967295>.

                       'vrf_admin_subfield' takes precedence for VRF RDs if set. Otherwise the
                       'admin_subfield' value will be used.
                    vlan_assigned_number_subfield:
                       The method for deriving RT Assigned Number subfield for VLAN services (second part of RT):
                       -
                       'mac_vrf_id' means `(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id`.
                       - 'mac_vrf_vni' means
                       `(mac_vrf_vni_base or mac_vrf_id_base) + vlan_id`.
                       - 'vlan_id' will only use the 'vlan_id' and
                       ignores all base values.

                       These methods can be overridden per VLAN if either 'rt_override' or
                       'vni_override' is set (preferred in this order).

                """

    class CustomPlatformSettingsItem(AvdModel):
        """Subclass of AvdModel."""

        class Platforms(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Platforms._item_type = str

        class ReloadDelay(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mlag": {"type": int}, "non_mlag": {"type": int}}
            mlag: int | None
            """In seconds."""
            non_mlag: int | None
            """In seconds."""

            if TYPE_CHECKING:

                def __init__(self, *, mlag: int | None | UndefinedType = Undefined, non_mlag: int | None | UndefinedType = Undefined) -> None:
                    """
                    ReloadDelay.


                    Subclass of AvdModel.

                    Args:
                        mlag: In seconds.
                        non_mlag: In seconds.

                    """

        class FeatureSupport(AvdModel):
            """Subclass of AvdModel."""

            class PlatformSfeInterfaceProfile(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"supported": {"type": bool, "default": False}, "max_rx_queues": {"type": int, "default": 6}}
                supported: bool
                """
                Capability flag for generation of SFE interface profile.

                Default value: `False`
                """
                max_rx_queues: int
                """
                Maximum rx_queue count supported on any interface.

                Default value: `6`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, supported: bool | UndefinedType = Undefined, max_rx_queues: int | UndefinedType = Undefined) -> None:
                        """
                        PlatformSfeInterfaceProfile.


                        Subclass of AvdModel.

                        Args:
                            supported: Capability flag for generation of SFE interface profile.
                            max_rx_queues: Maximum rx_queue count supported on any interface.

                        """

            class HardwareCounterFeatures(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "acl": {"type": bool, "default": True},
                    "decap_group": {"type": bool, "default": True},
                    "directflow": {"type": bool, "default": True},
                    "ecn": {"type": bool, "default": True},
                    "flow_spec": {"type": bool, "default": True},
                    "gre_tunnel_interface": {"type": bool, "default": True},
                    "ip": {"type": bool, "default": True},
                    "mpls_interface": {"type": bool, "default": True},
                    "mpls_lfib": {"type": bool, "default": True},
                    "mpls_tunnel": {"type": bool, "default": True},
                    "multicast": {"type": bool, "default": True},
                    "nexthop": {"type": bool, "default": True},
                    "pbr": {"type": bool, "default": True},
                    "pdp": {"type": bool, "default": True},
                    "policing_interface": {"type": bool, "default": True},
                    "qos": {"type": bool, "default": True},
                    "qos_dual_rate_policer": {"type": bool, "default": True},
                    "route": {"type": bool, "default": True},
                    "routed_port": {"type": bool, "default": True},
                    "segment_security": {"type": bool, "default": True},
                    "subinterface": {"type": bool, "default": True},
                    "tapagg": {"type": bool, "default": True},
                    "traffic_class": {"type": bool, "default": True},
                    "traffic_policy": {"type": bool, "default": True},
                    "vlan": {"type": bool, "default": True},
                    "vlan_interface": {"type": bool, "default": True},
                    "vni_decap": {"type": bool, "default": True},
                    "vni_encap": {"type": bool, "default": True},
                    "vtep_decap": {"type": bool, "default": True},
                    "vtep_encap": {"type": bool, "default": True},
                }
                acl: bool
                """Default value: `True`"""
                decap_group: bool
                """Default value: `True`"""
                directflow: bool
                """Default value: `True`"""
                ecn: bool
                """Default value: `True`"""
                flow_spec: bool
                """Default value: `True`"""
                gre_tunnel_interface: bool
                """Default value: `True`"""
                ip: bool
                """Default value: `True`"""
                mpls_interface: bool
                """Default value: `True`"""
                mpls_lfib: bool
                """Default value: `True`"""
                mpls_tunnel: bool
                """Default value: `True`"""
                multicast: bool
                """Default value: `True`"""
                nexthop: bool
                """Default value: `True`"""
                pbr: bool
                """Default value: `True`"""
                pdp: bool
                """Default value: `True`"""
                policing_interface: bool
                """Default value: `True`"""
                qos: bool
                """Default value: `True`"""
                qos_dual_rate_policer: bool
                """Default value: `True`"""
                route: bool
                """Default value: `True`"""
                routed_port: bool
                """Default value: `True`"""
                segment_security: bool
                """Default value: `True`"""
                subinterface: bool
                """Default value: `True`"""
                tapagg: bool
                """Default value: `True`"""
                traffic_class: bool
                """Default value: `True`"""
                traffic_policy: bool
                """Default value: `True`"""
                vlan: bool
                """Default value: `True`"""
                vlan_interface: bool
                """Default value: `True`"""
                vni_decap: bool
                """Default value: `True`"""
                vni_encap: bool
                """Default value: `True`"""
                vtep_decap: bool
                """Default value: `True`"""
                vtep_encap: bool
                """Default value: `True`"""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        acl: bool | UndefinedType = Undefined,
                        decap_group: bool | UndefinedType = Undefined,
                        directflow: bool | UndefinedType = Undefined,
                        ecn: bool | UndefinedType = Undefined,
                        flow_spec: bool | UndefinedType = Undefined,
                        gre_tunnel_interface: bool | UndefinedType = Undefined,
                        ip: bool | UndefinedType = Undefined,
                        mpls_interface: bool | UndefinedType = Undefined,
                        mpls_lfib: bool | UndefinedType = Undefined,
                        mpls_tunnel: bool | UndefinedType = Undefined,
                        multicast: bool | UndefinedType = Undefined,
                        nexthop: bool | UndefinedType = Undefined,
                        pbr: bool | UndefinedType = Undefined,
                        pdp: bool | UndefinedType = Undefined,
                        policing_interface: bool | UndefinedType = Undefined,
                        qos: bool | UndefinedType = Undefined,
                        qos_dual_rate_policer: bool | UndefinedType = Undefined,
                        route: bool | UndefinedType = Undefined,
                        routed_port: bool | UndefinedType = Undefined,
                        segment_security: bool | UndefinedType = Undefined,
                        subinterface: bool | UndefinedType = Undefined,
                        tapagg: bool | UndefinedType = Undefined,
                        traffic_class: bool | UndefinedType = Undefined,
                        traffic_policy: bool | UndefinedType = Undefined,
                        vlan: bool | UndefinedType = Undefined,
                        vlan_interface: bool | UndefinedType = Undefined,
                        vni_decap: bool | UndefinedType = Undefined,
                        vni_encap: bool | UndefinedType = Undefined,
                        vtep_decap: bool | UndefinedType = Undefined,
                        vtep_encap: bool | UndefinedType = Undefined,
                    ) -> None:
                        """
                        HardwareCounterFeatures.


                        Subclass of AvdModel.

                        Args:
                            acl: acl
                            decap_group: decap_group
                            directflow: directflow
                            ecn: ecn
                            flow_spec: flow_spec
                            gre_tunnel_interface: gre_tunnel_interface
                            ip: ip
                            mpls_interface: mpls_interface
                            mpls_lfib: mpls_lfib
                            mpls_tunnel: mpls_tunnel
                            multicast: multicast
                            nexthop: nexthop
                            pbr: pbr
                            pdp: pdp
                            policing_interface: policing_interface
                            qos: qos
                            qos_dual_rate_policer: qos_dual_rate_policer
                            route: route
                            routed_port: routed_port
                            segment_security: segment_security
                            subinterface: subinterface
                            tapagg: tapagg
                            traffic_class: traffic_class
                            traffic_policy: traffic_policy
                            vlan: vlan
                            vlan_interface: vlan_interface
                            vni_decap: vni_decap
                            vni_encap: vni_encap
                            vtep_decap: vtep_decap
                            vtep_encap: vtep_encap

                        """

            _fields: ClassVar[dict] = {
                "queue_monitor": {"type": bool, "default": True},
                "queue_monitor_length_notify": {"type": bool, "default": True},
                "interface_storm_control": {"type": bool, "default": True},
                "poe": {"type": bool, "default": False},
                "subinterface_mtu": {"type": bool, "default": True},
                "per_interface_mtu": {"type": bool, "default": True},
                "per_interface_l2_mtu": {"type": bool, "default": True},
                "per_interface_l2_mru": {"type": bool, "default": True},
                "bgp_update_wait_install": {"type": bool, "default": True},
                "bgp_update_wait_for_convergence": {"type": bool, "default": True},
                "platform_sfe_interface_profile": {"type": PlatformSfeInterfaceProfile},
                "evpn_gateway_all_active_multihoming": {"type": bool, "default": False},
                "hardware_counters": {"type": bool, "default": True},
                "hardware_counter_features": {"type": HardwareCounterFeatures},
                "hardware_speed_group": {"type": bool, "default": True},
                "private_vlan": {"type": bool, "default": True},
                "sflow": {"type": bool, "default": True},
                "sflow_subinterfaces": {"type": bool, "default": True},
                "wan": {"type": bool, "default": True},
                "ptp": {"type": bool, "default": True},
            }
            queue_monitor: bool
            """
            Support for LANZ.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            queue_monitor_length_notify: bool
            """
            Support for LANZ notifying mode. Requires the parent `queue_monitor` feature to be enabled.
            The
            feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            interface_storm_control: bool
            """
            Support for storm-control.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            poe: bool
            """
            Support for PoE.
            The feature will be ignored on platforms where this is false.

            Default value: `False`
            """
            subinterface_mtu: bool
            """
            Support for MTU configuration under sub-interfaces.
            When this key is set to False, MTU is not
            rendered under sub-interfaces even if it is set in the inputs.

            Default value: `True`
            """
            per_interface_mtu: bool
            """
            Support for configuration of per interface MTU for p2p links, MLAG SVIs and Network Services.
            Effectively this means that all settings regarding interface MTU will be ignored if this is false.
            Platforms without support for per interface MTU can use a single default interface MTU setting. Set
            this via "default_interface_mtu"

            Default value: `True`
            """
            per_interface_l2_mtu: bool
            """
            Support for configuration of per interface L2 MTU on Ethernet or Port-channel interfaces.
            The
            feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            per_interface_l2_mru: bool
            """
            Support for configuration of per interface L2 MRU (maximum receive unit) on Ethernet and Port-
            Channel interfaces.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            bgp_update_wait_install: bool
            """
            Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP
            convergence state is reached.
            Can be overridden by setting "bgp_update_wait_install"
            host/group_vars.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            bgp_update_wait_for_convergence: bool
            """
            Do not advertise reachability to a prefix until that prefix has been installed in hardware.
            This
            will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix
            that may not yet be installed into the forwarding plane.
            Can be overridden by setting
            "bgp_update_wait_for_convergence" host/group_vars.
            The feature will be ignored on platforms where
            this is false.

            Default value: `True`
            """
            platform_sfe_interface_profile: PlatformSfeInterfaceProfile
            """
            Support for Platform SFE Interface Profiles.

            Subclass of AvdModel.
            """
            evpn_gateway_all_active_multihoming: bool
            """
            Support for all-active EVPN gateway redundancy.
            An error will be raised if the feature is enabled
            and this is false.

            Default value: `False`
            """
            hardware_counters: bool
            """
            Support for enabling counters using programmable hardware counter resources.
            Setting this key to
            `false` for the specific platform will ignore all hardware counter features for this platform.

            Default value: `True`
            """
            hardware_counter_features: HardwareCounterFeatures
            """
            Per-feature support for the hardware counters.
            Features set to `false` will be ignored for this
            platform.

            Subclass of AvdModel.
            """
            hardware_speed_group: bool
            """
            Support for configurable speeds per speed-group.
            The feature will be ignored on platforms where this
            is false.

            Default value: `True`
            """
            private_vlan: bool
            """
            Support for PVLAN feature.
            On platforms with additional requirements to use PVLAN, ex. 7280R/R2/R3
            set this via "private_vlan" in the specific platform settings.
            See the TOI at
            https://www.arista.com/en/support/toi/eos-4-25-0f/14609-support-for-private-vlan.

            Default value: `True`
            """
            sflow: bool
            """
            Support for sFlow.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            sflow_subinterfaces: bool
            """
            Support for sFlow on sub-interfaces.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            wan: bool
            """
            Support for Arista WAN features.
            An error will be raised if the feature is enabled and this is
            false.

            Default value: `True`
            """
            ptp: bool
            """
            Support for Precision Time Protocol (PTP).
            The feature will be ignored on platforms where this is
            false.

            Default value: `True`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    queue_monitor: bool | UndefinedType = Undefined,
                    queue_monitor_length_notify: bool | UndefinedType = Undefined,
                    interface_storm_control: bool | UndefinedType = Undefined,
                    poe: bool | UndefinedType = Undefined,
                    subinterface_mtu: bool | UndefinedType = Undefined,
                    per_interface_mtu: bool | UndefinedType = Undefined,
                    per_interface_l2_mtu: bool | UndefinedType = Undefined,
                    per_interface_l2_mru: bool | UndefinedType = Undefined,
                    bgp_update_wait_install: bool | UndefinedType = Undefined,
                    bgp_update_wait_for_convergence: bool | UndefinedType = Undefined,
                    platform_sfe_interface_profile: PlatformSfeInterfaceProfile | UndefinedType = Undefined,
                    evpn_gateway_all_active_multihoming: bool | UndefinedType = Undefined,
                    hardware_counters: bool | UndefinedType = Undefined,
                    hardware_counter_features: HardwareCounterFeatures | UndefinedType = Undefined,
                    hardware_speed_group: bool | UndefinedType = Undefined,
                    private_vlan: bool | UndefinedType = Undefined,
                    sflow: bool | UndefinedType = Undefined,
                    sflow_subinterfaces: bool | UndefinedType = Undefined,
                    wan: bool | UndefinedType = Undefined,
                    ptp: bool | UndefinedType = Undefined,
                ) -> None:
                    """
                    FeatureSupport.


                    Subclass of AvdModel.

                    Args:
                        queue_monitor:
                           Support for LANZ.
                           The feature will be ignored on platforms where this is false.
                        queue_monitor_length_notify:
                           Support for LANZ notifying mode. Requires the parent `queue_monitor` feature to be enabled.
                           The
                           feature will be ignored on platforms where this is false.
                        interface_storm_control:
                           Support for storm-control.
                           The feature will be ignored on platforms where this is false.
                        poe:
                           Support for PoE.
                           The feature will be ignored on platforms where this is false.
                        subinterface_mtu:
                           Support for MTU configuration under sub-interfaces.
                           When this key is set to False, MTU is not
                           rendered under sub-interfaces even if it is set in the inputs.
                        per_interface_mtu:
                           Support for configuration of per interface MTU for p2p links, MLAG SVIs and Network Services.
                           Effectively this means that all settings regarding interface MTU will be ignored if this is false.
                           Platforms without support for per interface MTU can use a single default interface MTU setting. Set
                           this via "default_interface_mtu"
                        per_interface_l2_mtu:
                           Support for configuration of per interface L2 MTU on Ethernet or Port-channel interfaces.
                           The
                           feature will be ignored on platforms where this is false.
                        per_interface_l2_mru:
                           Support for configuration of per interface L2 MRU (maximum receive unit) on Ethernet and Port-
                           Channel interfaces.
                           The feature will be ignored on platforms where this is false.
                        bgp_update_wait_install:
                           Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP
                           convergence state is reached.
                           Can be overridden by setting "bgp_update_wait_install"
                           host/group_vars.
                           The feature will be ignored on platforms where this is false.
                        bgp_update_wait_for_convergence:
                           Do not advertise reachability to a prefix until that prefix has been installed in hardware.
                           This
                           will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix
                           that may not yet be installed into the forwarding plane.
                           Can be overridden by setting
                           "bgp_update_wait_for_convergence" host/group_vars.
                           The feature will be ignored on platforms where
                           this is false.
                        platform_sfe_interface_profile:
                           Support for Platform SFE Interface Profiles.

                           Subclass of AvdModel.
                        evpn_gateway_all_active_multihoming:
                           Support for all-active EVPN gateway redundancy.
                           An error will be raised if the feature is enabled
                           and this is false.
                        hardware_counters:
                           Support for enabling counters using programmable hardware counter resources.
                           Setting this key to
                           `false` for the specific platform will ignore all hardware counter features for this platform.
                        hardware_counter_features:
                           Per-feature support for the hardware counters.
                           Features set to `false` will be ignored for this
                           platform.

                           Subclass of AvdModel.
                        hardware_speed_group:
                           Support for configurable speeds per speed-group.
                           The feature will be ignored on platforms where this
                           is false.
                        private_vlan:
                           Support for PVLAN feature.
                           On platforms with additional requirements to use PVLAN, ex. 7280R/R2/R3
                           set this via "private_vlan" in the specific platform settings.
                           See the TOI at
                           https://www.arista.com/en/support/toi/eos-4-25-0f/14609-support-for-private-vlan.
                        sflow:
                           Support for sFlow.
                           The feature will be ignored on platforms where this is false.
                        sflow_subinterfaces:
                           Support for sFlow on sub-interfaces.
                           The feature will be ignored on platforms where this is false.
                        wan:
                           Support for Arista WAN features.
                           An error will be raised if the feature is enabled and this is
                           false.
                        ptp:
                           Support for Precision Time Protocol (PTP).
                           The feature will be ignored on platforms where this is
                           false.

                    """

        class SecurityEntropySources(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "hardware": {"type": bool},
                "haveged": {"type": bool},
                "cpu_jitter": {"type": bool},
                "hardware_exclusive": {"type": bool},
            }
            hardware: bool | None
            """Use a hardware based source."""
            haveged: bool | None
            """Use the HAVEGE algorithm."""
            cpu_jitter: bool | None
            """Use the Jitter RNG algorithm of a CPU based source."""
            hardware_exclusive: bool | None
            """Only use entropy from the hardware source."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    hardware: bool | None | UndefinedType = Undefined,
                    haveged: bool | None | UndefinedType = Undefined,
                    cpu_jitter: bool | None | UndefinedType = Undefined,
                    hardware_exclusive: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    SecurityEntropySources.


                    Subclass of AvdModel.

                    Args:
                        hardware: Use a hardware based source.
                        haveged: Use the HAVEGE algorithm.
                        cpu_jitter: Use the Jitter RNG algorithm of a CPU based source.
                        hardware_exclusive: Only use entropy from the hardware source.

                    """

        class DigitalTwin(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"platform": {"type": str}, "act_node_type": {"type": str}}
            platform: str | None
            """
            Name of an alternate `platform_settings` platform used when running in Digital Twin mode.
            The
            `platform_settings` for the regular `platform` is used if this is not set.
            """
            act_node_type: Literal["cloudeos", "cvp", "generic", "third-party", "tools-server", "veos"] | None
            """ACT node type."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    platform: str | None | UndefinedType = Undefined,
                    act_node_type: Literal["cloudeos", "cvp", "generic", "third-party", "tools-server", "veos"] | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    DigitalTwin.


                    Subclass of AvdModel.

                    Args:
                        platform:
                           Name of an alternate `platform_settings` platform used when running in Digital Twin mode.
                           The
                           `platform_settings` for the regular `platform` is used if this is not set.
                        act_node_type: ACT node type.

                    """

        _fields: ClassVar[dict] = {
            "platforms": {"type": Platforms},
            "trident_forwarding_table_partition": {"type": str},
            "reload_delay": {"type": ReloadDelay},
            "tcam_profile": {"type": str},
            "lag_hardware_only": {"type": bool},
            "default_interface_mtu": {"type": int},
            "p2p_uplinks_mtu": {"type": int},
            "feature_support": {"type": FeatureSupport},
            "management_interface": {"type": str, "default": "Management1"},
            "security_entropy_sources": {"type": SecurityEntropySources},
            "digital_twin": {"type": DigitalTwin},
            "structured_config": {"type": EosCliConfigGen},
            "raw_eos_cli": {"type": str},
        }
        platforms: Platforms
        """Subclass of AvdList with `str` items."""
        trident_forwarding_table_partition: str | None
        """Only applied when evpn_multicast is true."""
        reload_delay: ReloadDelay
        """Subclass of AvdModel."""
        tcam_profile: str | None
        lag_hardware_only: bool | None
        default_interface_mtu: int | None
        """
        Default interface MTU configured on EOS under "interface defaults".
        Takes precedence over the root
        key "default_interface_mtu".
        """
        p2p_uplinks_mtu: int | None
        """
        Set MTU on point to point uplink interfaces.
        Takes precedence over the root key "p2p_uplinks_mtu".
        <node_type>.uplink_mtu -> platform_settings.p2p_uplinks_mtu -> p2p_uplinks_mtu -> 9214.
        """
        feature_support: FeatureSupport
        """Subclass of AvdModel."""
        management_interface: str
        """Default value: `"Management1"`"""
        security_entropy_sources: SecurityEntropySources
        """
        Entropy source improves the randomness of the numbers used to generate MACsec's cryptographic keys.
        Subclass of AvdModel.
        """
        digital_twin: DigitalTwin
        """
        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
        change at any time.
        Digital Twin settings applied when `avd_digital_twin_mode` is `true`.

        Subclass
        of AvdModel.
        """
        structured_config: EosCliConfigGen
        """Custom structured config for eos_cli_config_gen."""
        raw_eos_cli: str | None
        """EOS CLI rendered directly on the root level of the final EOS configuration."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                platforms: Platforms | UndefinedType = Undefined,
                trident_forwarding_table_partition: str | None | UndefinedType = Undefined,
                reload_delay: ReloadDelay | UndefinedType = Undefined,
                tcam_profile: str | None | UndefinedType = Undefined,
                lag_hardware_only: bool | None | UndefinedType = Undefined,
                default_interface_mtu: int | None | UndefinedType = Undefined,
                p2p_uplinks_mtu: int | None | UndefinedType = Undefined,
                feature_support: FeatureSupport | UndefinedType = Undefined,
                management_interface: str | UndefinedType = Undefined,
                security_entropy_sources: SecurityEntropySources | UndefinedType = Undefined,
                digital_twin: DigitalTwin | UndefinedType = Undefined,
                structured_config: EosCliConfigGen | UndefinedType = Undefined,
                raw_eos_cli: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                CustomPlatformSettingsItem.


                Subclass of AvdModel.

                Args:
                    platforms: Subclass of AvdList with `str` items.
                    trident_forwarding_table_partition: Only applied when evpn_multicast is true.
                    reload_delay: Subclass of AvdModel.
                    tcam_profile: tcam_profile
                    lag_hardware_only: lag_hardware_only
                    default_interface_mtu:
                       Default interface MTU configured on EOS under "interface defaults".
                       Takes precedence over the root
                       key "default_interface_mtu".
                    p2p_uplinks_mtu:
                       Set MTU on point to point uplink interfaces.
                       Takes precedence over the root key "p2p_uplinks_mtu".
                       <node_type>.uplink_mtu -> platform_settings.p2p_uplinks_mtu -> p2p_uplinks_mtu -> 9214.
                    feature_support: Subclass of AvdModel.
                    management_interface: management_interface
                    security_entropy_sources:
                       Entropy source improves the randomness of the numbers used to generate MACsec's cryptographic keys.
                       Subclass of AvdModel.
                    digital_twin:
                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                       change at any time.
                       Digital Twin settings applied when `avd_digital_twin_mode` is `true`.

                       Subclass
                       of AvdModel.
                    structured_config: Custom structured config for eos_cli_config_gen.
                    raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.

                """

    class CustomPlatformSettings(AvdList[CustomPlatformSettingsItem]):
        """Subclass of AvdList with `CustomPlatformSettingsItem` items."""

    CustomPlatformSettings._item_type = CustomPlatformSettingsItem

    class PlatformSettingsItem(AvdModel):
        """Subclass of AvdModel."""

        class Platforms(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Platforms._item_type = str

        class ReloadDelay(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mlag": {"type": int}, "non_mlag": {"type": int}}
            mlag: int | None
            """In seconds."""
            non_mlag: int | None
            """In seconds."""

            if TYPE_CHECKING:

                def __init__(self, *, mlag: int | None | UndefinedType = Undefined, non_mlag: int | None | UndefinedType = Undefined) -> None:
                    """
                    ReloadDelay.


                    Subclass of AvdModel.

                    Args:
                        mlag: In seconds.
                        non_mlag: In seconds.

                    """

        class FeatureSupport(AvdModel):
            """Subclass of AvdModel."""

            class PlatformSfeInterfaceProfile(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"supported": {"type": bool, "default": False}, "max_rx_queues": {"type": int, "default": 6}}
                supported: bool
                """
                Capability flag for generation of SFE interface profile.

                Default value: `False`
                """
                max_rx_queues: int
                """
                Maximum rx_queue count supported on any interface.

                Default value: `6`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, supported: bool | UndefinedType = Undefined, max_rx_queues: int | UndefinedType = Undefined) -> None:
                        """
                        PlatformSfeInterfaceProfile.


                        Subclass of AvdModel.

                        Args:
                            supported: Capability flag for generation of SFE interface profile.
                            max_rx_queues: Maximum rx_queue count supported on any interface.

                        """

            class HardwareCounterFeatures(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "acl": {"type": bool, "default": True},
                    "decap_group": {"type": bool, "default": True},
                    "directflow": {"type": bool, "default": True},
                    "ecn": {"type": bool, "default": True},
                    "flow_spec": {"type": bool, "default": True},
                    "gre_tunnel_interface": {"type": bool, "default": True},
                    "ip": {"type": bool, "default": True},
                    "mpls_interface": {"type": bool, "default": True},
                    "mpls_lfib": {"type": bool, "default": True},
                    "mpls_tunnel": {"type": bool, "default": True},
                    "multicast": {"type": bool, "default": True},
                    "nexthop": {"type": bool, "default": True},
                    "pbr": {"type": bool, "default": True},
                    "pdp": {"type": bool, "default": True},
                    "policing_interface": {"type": bool, "default": True},
                    "qos": {"type": bool, "default": True},
                    "qos_dual_rate_policer": {"type": bool, "default": True},
                    "route": {"type": bool, "default": True},
                    "routed_port": {"type": bool, "default": True},
                    "segment_security": {"type": bool, "default": True},
                    "subinterface": {"type": bool, "default": True},
                    "tapagg": {"type": bool, "default": True},
                    "traffic_class": {"type": bool, "default": True},
                    "traffic_policy": {"type": bool, "default": True},
                    "vlan": {"type": bool, "default": True},
                    "vlan_interface": {"type": bool, "default": True},
                    "vni_decap": {"type": bool, "default": True},
                    "vni_encap": {"type": bool, "default": True},
                    "vtep_decap": {"type": bool, "default": True},
                    "vtep_encap": {"type": bool, "default": True},
                }
                acl: bool
                """Default value: `True`"""
                decap_group: bool
                """Default value: `True`"""
                directflow: bool
                """Default value: `True`"""
                ecn: bool
                """Default value: `True`"""
                flow_spec: bool
                """Default value: `True`"""
                gre_tunnel_interface: bool
                """Default value: `True`"""
                ip: bool
                """Default value: `True`"""
                mpls_interface: bool
                """Default value: `True`"""
                mpls_lfib: bool
                """Default value: `True`"""
                mpls_tunnel: bool
                """Default value: `True`"""
                multicast: bool
                """Default value: `True`"""
                nexthop: bool
                """Default value: `True`"""
                pbr: bool
                """Default value: `True`"""
                pdp: bool
                """Default value: `True`"""
                policing_interface: bool
                """Default value: `True`"""
                qos: bool
                """Default value: `True`"""
                qos_dual_rate_policer: bool
                """Default value: `True`"""
                route: bool
                """Default value: `True`"""
                routed_port: bool
                """Default value: `True`"""
                segment_security: bool
                """Default value: `True`"""
                subinterface: bool
                """Default value: `True`"""
                tapagg: bool
                """Default value: `True`"""
                traffic_class: bool
                """Default value: `True`"""
                traffic_policy: bool
                """Default value: `True`"""
                vlan: bool
                """Default value: `True`"""
                vlan_interface: bool
                """Default value: `True`"""
                vni_decap: bool
                """Default value: `True`"""
                vni_encap: bool
                """Default value: `True`"""
                vtep_decap: bool
                """Default value: `True`"""
                vtep_encap: bool
                """Default value: `True`"""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        acl: bool | UndefinedType = Undefined,
                        decap_group: bool | UndefinedType = Undefined,
                        directflow: bool | UndefinedType = Undefined,
                        ecn: bool | UndefinedType = Undefined,
                        flow_spec: bool | UndefinedType = Undefined,
                        gre_tunnel_interface: bool | UndefinedType = Undefined,
                        ip: bool | UndefinedType = Undefined,
                        mpls_interface: bool | UndefinedType = Undefined,
                        mpls_lfib: bool | UndefinedType = Undefined,
                        mpls_tunnel: bool | UndefinedType = Undefined,
                        multicast: bool | UndefinedType = Undefined,
                        nexthop: bool | UndefinedType = Undefined,
                        pbr: bool | UndefinedType = Undefined,
                        pdp: bool | UndefinedType = Undefined,
                        policing_interface: bool | UndefinedType = Undefined,
                        qos: bool | UndefinedType = Undefined,
                        qos_dual_rate_policer: bool | UndefinedType = Undefined,
                        route: bool | UndefinedType = Undefined,
                        routed_port: bool | UndefinedType = Undefined,
                        segment_security: bool | UndefinedType = Undefined,
                        subinterface: bool | UndefinedType = Undefined,
                        tapagg: bool | UndefinedType = Undefined,
                        traffic_class: bool | UndefinedType = Undefined,
                        traffic_policy: bool | UndefinedType = Undefined,
                        vlan: bool | UndefinedType = Undefined,
                        vlan_interface: bool | UndefinedType = Undefined,
                        vni_decap: bool | UndefinedType = Undefined,
                        vni_encap: bool | UndefinedType = Undefined,
                        vtep_decap: bool | UndefinedType = Undefined,
                        vtep_encap: bool | UndefinedType = Undefined,
                    ) -> None:
                        """
                        HardwareCounterFeatures.


                        Subclass of AvdModel.

                        Args:
                            acl: acl
                            decap_group: decap_group
                            directflow: directflow
                            ecn: ecn
                            flow_spec: flow_spec
                            gre_tunnel_interface: gre_tunnel_interface
                            ip: ip
                            mpls_interface: mpls_interface
                            mpls_lfib: mpls_lfib
                            mpls_tunnel: mpls_tunnel
                            multicast: multicast
                            nexthop: nexthop
                            pbr: pbr
                            pdp: pdp
                            policing_interface: policing_interface
                            qos: qos
                            qos_dual_rate_policer: qos_dual_rate_policer
                            route: route
                            routed_port: routed_port
                            segment_security: segment_security
                            subinterface: subinterface
                            tapagg: tapagg
                            traffic_class: traffic_class
                            traffic_policy: traffic_policy
                            vlan: vlan
                            vlan_interface: vlan_interface
                            vni_decap: vni_decap
                            vni_encap: vni_encap
                            vtep_decap: vtep_decap
                            vtep_encap: vtep_encap

                        """

            _fields: ClassVar[dict] = {
                "queue_monitor": {"type": bool, "default": True},
                "queue_monitor_length_notify": {"type": bool, "default": True},
                "interface_storm_control": {"type": bool, "default": True},
                "poe": {"type": bool, "default": False},
                "subinterface_mtu": {"type": bool, "default": True},
                "per_interface_mtu": {"type": bool, "default": True},
                "per_interface_l2_mtu": {"type": bool, "default": True},
                "per_interface_l2_mru": {"type": bool, "default": True},
                "bgp_update_wait_install": {"type": bool, "default": True},
                "bgp_update_wait_for_convergence": {"type": bool, "default": True},
                "platform_sfe_interface_profile": {"type": PlatformSfeInterfaceProfile},
                "evpn_gateway_all_active_multihoming": {"type": bool, "default": False},
                "hardware_counters": {"type": bool, "default": True},
                "hardware_counter_features": {"type": HardwareCounterFeatures},
                "hardware_speed_group": {"type": bool, "default": True},
                "private_vlan": {"type": bool, "default": True},
                "sflow": {"type": bool, "default": True},
                "sflow_subinterfaces": {"type": bool, "default": True},
                "wan": {"type": bool, "default": True},
                "ptp": {"type": bool, "default": True},
            }
            queue_monitor: bool
            """
            Support for LANZ.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            queue_monitor_length_notify: bool
            """
            Support for LANZ notifying mode. Requires the parent `queue_monitor` feature to be enabled.
            The
            feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            interface_storm_control: bool
            """
            Support for storm-control.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            poe: bool
            """
            Support for PoE.
            The feature will be ignored on platforms where this is false.

            Default value: `False`
            """
            subinterface_mtu: bool
            """
            Support for MTU configuration under sub-interfaces.
            When this key is set to False, MTU is not
            rendered under sub-interfaces even if it is set in the inputs.

            Default value: `True`
            """
            per_interface_mtu: bool
            """
            Support for configuration of per interface MTU for p2p links, MLAG SVIs and Network Services.
            Effectively this means that all settings regarding interface MTU will be ignored if this is false.
            Platforms without support for per interface MTU can use a single default interface MTU setting. Set
            this via "default_interface_mtu"

            Default value: `True`
            """
            per_interface_l2_mtu: bool
            """
            Support for configuration of per interface L2 MTU on Ethernet or Port-channel interfaces.
            The
            feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            per_interface_l2_mru: bool
            """
            Support for configuration of per interface L2 MRU (maximum receive unit) on Ethernet and Port-
            Channel interfaces.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            bgp_update_wait_install: bool
            """
            Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP
            convergence state is reached.
            Can be overridden by setting "bgp_update_wait_install"
            host/group_vars.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            bgp_update_wait_for_convergence: bool
            """
            Do not advertise reachability to a prefix until that prefix has been installed in hardware.
            This
            will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix
            that may not yet be installed into the forwarding plane.
            Can be overridden by setting
            "bgp_update_wait_for_convergence" host/group_vars.
            The feature will be ignored on platforms where
            this is false.

            Default value: `True`
            """
            platform_sfe_interface_profile: PlatformSfeInterfaceProfile
            """
            Support for Platform SFE Interface Profiles.

            Subclass of AvdModel.
            """
            evpn_gateway_all_active_multihoming: bool
            """
            Support for all-active EVPN gateway redundancy.
            An error will be raised if the feature is enabled
            and this is false.

            Default value: `False`
            """
            hardware_counters: bool
            """
            Support for enabling counters using programmable hardware counter resources.
            Setting this key to
            `false` for the specific platform will ignore all hardware counter features for this platform.

            Default value: `True`
            """
            hardware_counter_features: HardwareCounterFeatures
            """
            Per-feature support for the hardware counters.
            Features set to `false` will be ignored for this
            platform.

            Subclass of AvdModel.
            """
            hardware_speed_group: bool
            """
            Support for configurable speeds per speed-group.
            The feature will be ignored on platforms where this
            is false.

            Default value: `True`
            """
            private_vlan: bool
            """
            Support for PVLAN feature.
            On platforms with additional requirements to use PVLAN, ex. 7280R/R2/R3
            set this via "private_vlan" in the specific platform settings.
            See the TOI at
            https://www.arista.com/en/support/toi/eos-4-25-0f/14609-support-for-private-vlan.

            Default value: `True`
            """
            sflow: bool
            """
            Support for sFlow.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            sflow_subinterfaces: bool
            """
            Support for sFlow on sub-interfaces.
            The feature will be ignored on platforms where this is false.

            Default value: `True`
            """
            wan: bool
            """
            Support for Arista WAN features.
            An error will be raised if the feature is enabled and this is
            false.

            Default value: `True`
            """
            ptp: bool
            """
            Support for Precision Time Protocol (PTP).
            The feature will be ignored on platforms where this is
            false.

            Default value: `True`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    queue_monitor: bool | UndefinedType = Undefined,
                    queue_monitor_length_notify: bool | UndefinedType = Undefined,
                    interface_storm_control: bool | UndefinedType = Undefined,
                    poe: bool | UndefinedType = Undefined,
                    subinterface_mtu: bool | UndefinedType = Undefined,
                    per_interface_mtu: bool | UndefinedType = Undefined,
                    per_interface_l2_mtu: bool | UndefinedType = Undefined,
                    per_interface_l2_mru: bool | UndefinedType = Undefined,
                    bgp_update_wait_install: bool | UndefinedType = Undefined,
                    bgp_update_wait_for_convergence: bool | UndefinedType = Undefined,
                    platform_sfe_interface_profile: PlatformSfeInterfaceProfile | UndefinedType = Undefined,
                    evpn_gateway_all_active_multihoming: bool | UndefinedType = Undefined,
                    hardware_counters: bool | UndefinedType = Undefined,
                    hardware_counter_features: HardwareCounterFeatures | UndefinedType = Undefined,
                    hardware_speed_group: bool | UndefinedType = Undefined,
                    private_vlan: bool | UndefinedType = Undefined,
                    sflow: bool | UndefinedType = Undefined,
                    sflow_subinterfaces: bool | UndefinedType = Undefined,
                    wan: bool | UndefinedType = Undefined,
                    ptp: bool | UndefinedType = Undefined,
                ) -> None:
                    """
                    FeatureSupport.


                    Subclass of AvdModel.

                    Args:
                        queue_monitor:
                           Support for LANZ.
                           The feature will be ignored on platforms where this is false.
                        queue_monitor_length_notify:
                           Support for LANZ notifying mode. Requires the parent `queue_monitor` feature to be enabled.
                           The
                           feature will be ignored on platforms where this is false.
                        interface_storm_control:
                           Support for storm-control.
                           The feature will be ignored on platforms where this is false.
                        poe:
                           Support for PoE.
                           The feature will be ignored on platforms where this is false.
                        subinterface_mtu:
                           Support for MTU configuration under sub-interfaces.
                           When this key is set to False, MTU is not
                           rendered under sub-interfaces even if it is set in the inputs.
                        per_interface_mtu:
                           Support for configuration of per interface MTU for p2p links, MLAG SVIs and Network Services.
                           Effectively this means that all settings regarding interface MTU will be ignored if this is false.
                           Platforms without support for per interface MTU can use a single default interface MTU setting. Set
                           this via "default_interface_mtu"
                        per_interface_l2_mtu:
                           Support for configuration of per interface L2 MTU on Ethernet or Port-channel interfaces.
                           The
                           feature will be ignored on platforms where this is false.
                        per_interface_l2_mru:
                           Support for configuration of per interface L2 MRU (maximum receive unit) on Ethernet and Port-
                           Channel interfaces.
                           The feature will be ignored on platforms where this is false.
                        bgp_update_wait_install:
                           Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP
                           convergence state is reached.
                           Can be overridden by setting "bgp_update_wait_install"
                           host/group_vars.
                           The feature will be ignored on platforms where this is false.
                        bgp_update_wait_for_convergence:
                           Do not advertise reachability to a prefix until that prefix has been installed in hardware.
                           This
                           will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix
                           that may not yet be installed into the forwarding plane.
                           Can be overridden by setting
                           "bgp_update_wait_for_convergence" host/group_vars.
                           The feature will be ignored on platforms where
                           this is false.
                        platform_sfe_interface_profile:
                           Support for Platform SFE Interface Profiles.

                           Subclass of AvdModel.
                        evpn_gateway_all_active_multihoming:
                           Support for all-active EVPN gateway redundancy.
                           An error will be raised if the feature is enabled
                           and this is false.
                        hardware_counters:
                           Support for enabling counters using programmable hardware counter resources.
                           Setting this key to
                           `false` for the specific platform will ignore all hardware counter features for this platform.
                        hardware_counter_features:
                           Per-feature support for the hardware counters.
                           Features set to `false` will be ignored for this
                           platform.

                           Subclass of AvdModel.
                        hardware_speed_group:
                           Support for configurable speeds per speed-group.
                           The feature will be ignored on platforms where this
                           is false.
                        private_vlan:
                           Support for PVLAN feature.
                           On platforms with additional requirements to use PVLAN, ex. 7280R/R2/R3
                           set this via "private_vlan" in the specific platform settings.
                           See the TOI at
                           https://www.arista.com/en/support/toi/eos-4-25-0f/14609-support-for-private-vlan.
                        sflow:
                           Support for sFlow.
                           The feature will be ignored on platforms where this is false.
                        sflow_subinterfaces:
                           Support for sFlow on sub-interfaces.
                           The feature will be ignored on platforms where this is false.
                        wan:
                           Support for Arista WAN features.
                           An error will be raised if the feature is enabled and this is
                           false.
                        ptp:
                           Support for Precision Time Protocol (PTP).
                           The feature will be ignored on platforms where this is
                           false.

                    """

        class SecurityEntropySources(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "hardware": {"type": bool},
                "haveged": {"type": bool},
                "cpu_jitter": {"type": bool},
                "hardware_exclusive": {"type": bool},
            }
            hardware: bool | None
            """Use a hardware based source."""
            haveged: bool | None
            """Use the HAVEGE algorithm."""
            cpu_jitter: bool | None
            """Use the Jitter RNG algorithm of a CPU based source."""
            hardware_exclusive: bool | None
            """Only use entropy from the hardware source."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    hardware: bool | None | UndefinedType = Undefined,
                    haveged: bool | None | UndefinedType = Undefined,
                    cpu_jitter: bool | None | UndefinedType = Undefined,
                    hardware_exclusive: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    SecurityEntropySources.


                    Subclass of AvdModel.

                    Args:
                        hardware: Use a hardware based source.
                        haveged: Use the HAVEGE algorithm.
                        cpu_jitter: Use the Jitter RNG algorithm of a CPU based source.
                        hardware_exclusive: Only use entropy from the hardware source.

                    """

        class DigitalTwin(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"platform": {"type": str}, "act_node_type": {"type": str}}
            platform: str | None
            """
            Name of an alternate `platform_settings` platform used when running in Digital Twin mode.
            The
            `platform_settings` for the regular `platform` is used if this is not set.
            """
            act_node_type: Literal["cloudeos", "cvp", "generic", "third-party", "tools-server", "veos"] | None
            """ACT node type."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    platform: str | None | UndefinedType = Undefined,
                    act_node_type: Literal["cloudeos", "cvp", "generic", "third-party", "tools-server", "veos"] | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    DigitalTwin.


                    Subclass of AvdModel.

                    Args:
                        platform:
                           Name of an alternate `platform_settings` platform used when running in Digital Twin mode.
                           The
                           `platform_settings` for the regular `platform` is used if this is not set.
                        act_node_type: ACT node type.

                    """

        _fields: ClassVar[dict] = {
            "platforms": {"type": Platforms},
            "trident_forwarding_table_partition": {"type": str},
            "reload_delay": {"type": ReloadDelay},
            "tcam_profile": {"type": str},
            "lag_hardware_only": {"type": bool},
            "default_interface_mtu": {"type": int},
            "p2p_uplinks_mtu": {"type": int},
            "feature_support": {"type": FeatureSupport},
            "management_interface": {"type": str, "default": "Management1"},
            "security_entropy_sources": {"type": SecurityEntropySources},
            "digital_twin": {"type": DigitalTwin},
            "structured_config": {"type": EosCliConfigGen},
            "raw_eos_cli": {"type": str},
        }
        platforms: Platforms
        """Subclass of AvdList with `str` items."""
        trident_forwarding_table_partition: str | None
        """Only applied when evpn_multicast is true."""
        reload_delay: ReloadDelay
        """Subclass of AvdModel."""
        tcam_profile: str | None
        lag_hardware_only: bool | None
        default_interface_mtu: int | None
        """
        Default interface MTU configured on EOS under "interface defaults".
        Takes precedence over the root
        key "default_interface_mtu".
        """
        p2p_uplinks_mtu: int | None
        """
        Set MTU on point to point uplink interfaces.
        Takes precedence over the root key "p2p_uplinks_mtu".
        <node_type>.uplink_mtu -> platform_settings.p2p_uplinks_mtu -> p2p_uplinks_mtu -> 9214.
        """
        feature_support: FeatureSupport
        """Subclass of AvdModel."""
        management_interface: str
        """Default value: `"Management1"`"""
        security_entropy_sources: SecurityEntropySources
        """
        Entropy source improves the randomness of the numbers used to generate MACsec's cryptographic keys.
        Subclass of AvdModel.
        """
        digital_twin: DigitalTwin
        """
        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
        change at any time.
        Digital Twin settings applied when `avd_digital_twin_mode` is `true`.

        Subclass
        of AvdModel.
        """
        structured_config: EosCliConfigGen
        """Custom structured config for eos_cli_config_gen."""
        raw_eos_cli: str | None
        """EOS CLI rendered directly on the root level of the final EOS configuration."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                platforms: Platforms | UndefinedType = Undefined,
                trident_forwarding_table_partition: str | None | UndefinedType = Undefined,
                reload_delay: ReloadDelay | UndefinedType = Undefined,
                tcam_profile: str | None | UndefinedType = Undefined,
                lag_hardware_only: bool | None | UndefinedType = Undefined,
                default_interface_mtu: int | None | UndefinedType = Undefined,
                p2p_uplinks_mtu: int | None | UndefinedType = Undefined,
                feature_support: FeatureSupport | UndefinedType = Undefined,
                management_interface: str | UndefinedType = Undefined,
                security_entropy_sources: SecurityEntropySources | UndefinedType = Undefined,
                digital_twin: DigitalTwin | UndefinedType = Undefined,
                structured_config: EosCliConfigGen | UndefinedType = Undefined,
                raw_eos_cli: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                PlatformSettingsItem.


                Subclass of AvdModel.

                Args:
                    platforms: Subclass of AvdList with `str` items.
                    trident_forwarding_table_partition: Only applied when evpn_multicast is true.
                    reload_delay: Subclass of AvdModel.
                    tcam_profile: tcam_profile
                    lag_hardware_only: lag_hardware_only
                    default_interface_mtu:
                       Default interface MTU configured on EOS under "interface defaults".
                       Takes precedence over the root
                       key "default_interface_mtu".
                    p2p_uplinks_mtu:
                       Set MTU on point to point uplink interfaces.
                       Takes precedence over the root key "p2p_uplinks_mtu".
                       <node_type>.uplink_mtu -> platform_settings.p2p_uplinks_mtu -> p2p_uplinks_mtu -> 9214.
                    feature_support: Subclass of AvdModel.
                    management_interface: management_interface
                    security_entropy_sources:
                       Entropy source improves the randomness of the numbers used to generate MACsec's cryptographic keys.
                       Subclass of AvdModel.
                    digital_twin:
                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                       change at any time.
                       Digital Twin settings applied when `avd_digital_twin_mode` is `true`.

                       Subclass
                       of AvdModel.
                    structured_config: Custom structured config for eos_cli_config_gen.
                    raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.

                """

    class PlatformSettings(AvdList[PlatformSettingsItem]):
        """Subclass of AvdList with `PlatformSettingsItem` items."""

    PlatformSettings._item_type = PlatformSettingsItem

    class PlatformSpeedGroupsItem(AvdModel):
        """Subclass of AvdModel."""

        class SpeedsItem(AvdModel):
            """Subclass of AvdModel."""

            class SpeedGroups(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            SpeedGroups._item_type = str

            _fields: ClassVar[dict] = {"speed": {"type": str}, "speed_groups": {"type": SpeedGroups}}
            speed: str
            speed_groups: SpeedGroups
            """Subclass of AvdList with `str` items."""

            if TYPE_CHECKING:

                def __init__(self, *, speed: str | UndefinedType = Undefined, speed_groups: SpeedGroups | UndefinedType = Undefined) -> None:
                    """
                    SpeedsItem.


                    Subclass of AvdModel.

                    Args:
                        speed: speed
                        speed_groups: Subclass of AvdList with `str` items.

                    """

        class Speeds(AvdIndexedList[str, SpeedsItem]):
            """Subclass of AvdIndexedList with `SpeedsItem` items. Primary key is `speed` (`str`)."""

            _primary_key: ClassVar[str] = "speed"

        Speeds._item_type = SpeedsItem

        _fields: ClassVar[dict] = {"platform": {"type": str}, "speeds": {"type": Speeds}}
        platform: str
        speeds: Speeds
        """Subclass of AvdIndexedList with `SpeedsItem` items. Primary key is `speed` (`str`)."""

        if TYPE_CHECKING:

            def __init__(self, *, platform: str | UndefinedType = Undefined, speeds: Speeds | UndefinedType = Undefined) -> None:
                """
                PlatformSpeedGroupsItem.


                Subclass of AvdModel.

                Args:
                    platform: platform
                    speeds: Subclass of AvdIndexedList with `SpeedsItem` items. Primary key is `speed` (`str`).

                """

    class PlatformSpeedGroups(AvdIndexedList[str, PlatformSpeedGroupsItem]):
        """Subclass of AvdIndexedList with `PlatformSpeedGroupsItem` items. Primary key is `platform` (`str`)."""

        _primary_key: ClassVar[str] = "platform"

    PlatformSpeedGroups._item_type = PlatformSpeedGroupsItem

    class PortProfilesItem(AvdModel):
        """Subclass of AvdModel."""

        class TrunkGroups(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        TrunkGroups._item_type = str

        class Ptp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "enabled": {"type": bool, "default": False},
                "endpoint_role": {"type": str, "default": "follower"},
                "profile": {"type": str, "default": "aes67-r16-2016"},
            }
            enabled: bool
            """Default value: `False`"""
            endpoint_role: Literal["follower", "dynamic", "bmca", "default"]
            """
            PTP role of the endpoint.
            `follower` will configure the switch port as `ptp role master`.
            `dynamic`
            will use BMCA.
            `default` is deprecated in favor of `follower`.
            `bmca` is deprecated in favor of
            `dynamic`.

            Default value: `"follower"`
            """
            profile: str
            """
            Default available profiles are:
              - "aes67"
              - "aes67-r16-2016"
              - "smpte2059-2"

            Default value: `"aes67-r16-2016"`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    enabled: bool | UndefinedType = Undefined,
                    endpoint_role: Literal["follower", "dynamic", "bmca", "default"] | UndefinedType = Undefined,
                    profile: str | UndefinedType = Undefined,
                ) -> None:
                    """
                    Ptp.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        endpoint_role:
                           PTP role of the endpoint.
                           `follower` will configure the switch port as `ptp role master`.
                           `dynamic`
                           will use BMCA.
                           `default` is deprecated in favor of `follower`.
                           `bmca` is deprecated in favor of
                           `dynamic`.
                        profile:
                           Default available profiles are:
                             - "aes67"
                             - "aes67-r16-2016"
                             - "smpte2059-2"

                    """

        class FlowTracking(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
            enabled: bool | None
            name: str | None
            """Flow tracker name as defined in flow_tracking_settings."""

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                    """
                    FlowTracking.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name: Flow tracker name as defined in flow_tracking_settings.

                    """

        class LinkTracking(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
            enabled: bool | None
            name: str | None
            """
            Tracking group name.
            The default group name is taken from fabric variable of the switch,
            `link_tracking.groups[0].name` with default value being "LT_GROUP1".
            Optional if default
            link_tracking settings are configured on the node.
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                    """
                    LinkTracking.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        name:
                           Tracking group name.
                           The default group name is taken from fabric variable of the switch,
                           `link_tracking.groups[0].name` with default value being "LT_GROUP1".
                           Optional if default
                           link_tracking settings are configured on the node.

                    """

        class StormControl(AvdModel):
            """Subclass of AvdModel."""

            class All(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        All.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            class Broadcast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        Broadcast.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            class Multicast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        Multicast.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            class UnknownUnicast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                level: str | None
                """Configure maximum storm-control level."""
                unit: Literal["percent", "pps"]
                """
                Optional variable and is hardware dependent.

                Default value: `"percent"`
                """

                if TYPE_CHECKING:

                    def __init__(self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined) -> None:
                        """
                        UnknownUnicast.


                        Subclass of AvdModel.

                        Args:
                            level: Configure maximum storm-control level.
                            unit: Optional variable and is hardware dependent.

                        """

            _fields: ClassVar[dict] = {
                "all": {"type": All},
                "broadcast": {"type": Broadcast},
                "multicast": {"type": Multicast},
                "unknown_unicast": {"type": UnknownUnicast},
            }
            all: All
            """Subclass of AvdModel."""
            broadcast: Broadcast
            """Subclass of AvdModel."""
            multicast: Multicast
            """Subclass of AvdModel."""
            unknown_unicast: UnknownUnicast
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    all: All | UndefinedType = Undefined,
                    broadcast: Broadcast | UndefinedType = Undefined,
                    multicast: Multicast | UndefinedType = Undefined,
                    unknown_unicast: UnknownUnicast | UndefinedType = Undefined,
                ) -> None:
                    """
                    StormControl.


                    Subclass of AvdModel.

                    Args:
                        all: Subclass of AvdModel.
                        broadcast: Subclass of AvdModel.
                        multicast: Subclass of AvdModel.
                        unknown_unicast: Subclass of AvdModel.

                    """

        class MonitorSessionsItem(AvdModel):
            """Subclass of AvdModel."""

            class SourceSettings(AvdModel):
                """Subclass of AvdModel."""

                class AccessGroup(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}, "priority": {"type": int}}
                    type: Literal["ip", "ipv6", "mac"] | None
                    name: str | None
                    """ACL name."""
                    priority: int | None

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                            name: str | None | UndefinedType = Undefined,
                            priority: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            AccessGroup.


                            Subclass of AvdModel.

                            Args:
                                type: type
                                name: ACL name.
                                priority: priority

                            """

                _fields: ClassVar[dict] = {"direction": {"type": str}, "access_group": {"type": AccessGroup}}
                direction: Literal["rx", "tx", "both"] | None
                access_group: AccessGroup
                """
                This can only be set when `session_settings.access_group` is not set.

                Subclass of AvdModel.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        direction: Literal["rx", "tx", "both"] | None | UndefinedType = Undefined,
                        access_group: AccessGroup | UndefinedType = Undefined,
                    ) -> None:
                        """
                        SourceSettings.


                        Subclass of AvdModel.

                        Args:
                            direction: direction
                            access_group:
                               This can only be set when `session_settings.access_group` is not set.

                               Subclass of AvdModel.

                        """

            class SessionSettings(AvdModel):
                """Subclass of AvdModel."""

                class AccessGroup(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}}
                    type: Literal["ip", "ipv6", "mac"] | None
                    name: str | None
                    """ACL name."""

                    if TYPE_CHECKING:

                        def __init__(
                            self, *, type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                        ) -> None:
                            """
                            AccessGroup.


                            Subclass of AvdModel.

                            Args:
                                type: type
                                name: ACL name.

                            """

                class Truncate(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"enabled": {"type": bool}, "size": {"type": int}}
                    enabled: bool | None
                    size: int | None
                    """Size in bytes."""

                    if TYPE_CHECKING:

                        def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, size: int | None | UndefinedType = Undefined) -> None:
                            """
                            Truncate.


                            Subclass of AvdModel.

                            Args:
                                enabled: enabled
                                size: Size in bytes.

                            """

                _fields: ClassVar[dict] = {
                    "encapsulation_gre_metadata_tx": {"type": bool},
                    "header_remove_size": {"type": int},
                    "access_group": {"type": AccessGroup},
                    "rate_limit_per_ingress_chip": {"type": str},
                    "rate_limit_per_egress_chip": {"type": str},
                    "sample": {"type": int},
                    "truncate": {"type": Truncate},
                }
                encapsulation_gre_metadata_tx: bool | None
                header_remove_size: int | None
                """Number of bytes to remove from header."""
                access_group: AccessGroup
                """Subclass of AvdModel."""
                rate_limit_per_ingress_chip: str | None
                """
                Ratelimit and unit as string.
                Examples:
                  "100000 bps"
                  "100 kbps"
                  "10 mbps"
                """
                rate_limit_per_egress_chip: str | None
                """
                Ratelimit and unit as string.
                Examples:
                  "100000 bps"
                  "100 kbps"
                  "10 mbps"
                """
                sample: int | None
                truncate: Truncate
                """Subclass of AvdModel."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        encapsulation_gre_metadata_tx: bool | None | UndefinedType = Undefined,
                        header_remove_size: int | None | UndefinedType = Undefined,
                        access_group: AccessGroup | UndefinedType = Undefined,
                        rate_limit_per_ingress_chip: str | None | UndefinedType = Undefined,
                        rate_limit_per_egress_chip: str | None | UndefinedType = Undefined,
                        sample: int | None | UndefinedType = Undefined,
                        truncate: Truncate | UndefinedType = Undefined,
                    ) -> None:
                        """
                        SessionSettings.


                        Subclass of AvdModel.

                        Args:
                            encapsulation_gre_metadata_tx: encapsulation_gre_metadata_tx
                            header_remove_size: Number of bytes to remove from header.
                            access_group: Subclass of AvdModel.
                            rate_limit_per_ingress_chip:
                               Ratelimit and unit as string.
                               Examples:  # fmt: skip
                                 "100000 bps"
                                 "100 kbps"
                                 "10 mbps"
                            rate_limit_per_egress_chip:
                               Ratelimit and unit as string.
                               Examples:  # fmt: skip
                                 "100000 bps"
                                 "100 kbps"
                                 "10 mbps"
                            sample: sample
                            truncate: Subclass of AvdModel.

                        """

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "role": {"type": str},
                "source_settings": {"type": SourceSettings},
                "session_settings": {"type": SessionSettings},
            }
            name: str
            """Session name."""
            role: Literal["source", "destination"] | None
            source_settings: SourceSettings
            """Subclass of AvdModel."""
            session_settings: SessionSettings
            """
            Session settings are defined per session name.
            Different session_settings for the same session name
            will be combined/merged.


            Subclass of AvdModel.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    role: Literal["source", "destination"] | None | UndefinedType = Undefined,
                    source_settings: SourceSettings | UndefinedType = Undefined,
                    session_settings: SessionSettings | UndefinedType = Undefined,
                ) -> None:
                    """
                    MonitorSessionsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Session name.
                        role: role
                        source_settings: Subclass of AvdModel.
                        session_settings:
                           Session settings are defined per session name.
                           Different session_settings for the same session name
                           will be combined/merged.


                           Subclass of AvdModel.

                    """

        class MonitorSessions(AvdList[MonitorSessionsItem]):
            """Subclass of AvdList with `MonitorSessionsItem` items."""

        MonitorSessions._item_type = MonitorSessionsItem

        class EthernetSegment(AvdModel):
            """Subclass of AvdModel."""

            class DesignatedForwarderPreferences(AvdList[int]):
                """Subclass of AvdList with `int` items."""

            DesignatedForwarderPreferences._item_type = int

            _fields: ClassVar[dict] = {
                "short_esi": {"type": str},
                "redundancy": {"type": str},
                "designated_forwarder_algorithm": {"type": str},
                "designated_forwarder_preferences": {"type": DesignatedForwarderPreferences},
                "dont_preempt": {"type": bool},
            }
            short_esi: str
            """
            In format xxxx:xxxx:xxxx or "auto".
            Define a manual short-esi (be careful using this on profiles) or
            set the value to "auto" to automatically generate the value.
            Please see the notes under "EVPN A/A
            ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
            """
            redundancy: Literal["all-active", "single-active"] | None
            """
            If omitted, Port-Channels use the EOS default of all-active.
            If omitted, Ethernet interfaces are
            configured as single-active.
            """
            designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None
            """
            Configure DF algorithm and preferences.
            - auto: Use preference-based algorithm and assign preference
            based on position of device in the 'switches' list,
              e.g., assuming a list of three switches, this
            would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
            -
            preference: Set preference for each switch manually using designated_forwarder_preferences key.
            -
            modulus: Use the default modulus-based algorithm.
            If omitted, Port-Channels use the EOS default of
            modulus.
            If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
            """
            designated_forwarder_preferences: DesignatedForwarderPreferences
            """
            Manual preference as described above, required only for preference algorithm.

            Subclass of AvdList
            with `int` items.
            """
            dont_preempt: bool | None
            """Disable preemption for single-active forwarding when auto/manual DF preference is configured."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    short_esi: str | UndefinedType = Undefined,
                    redundancy: Literal["all-active", "single-active"] | None | UndefinedType = Undefined,
                    designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None | UndefinedType = Undefined,
                    designated_forwarder_preferences: DesignatedForwarderPreferences | UndefinedType = Undefined,
                    dont_preempt: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    EthernetSegment.


                    Subclass of AvdModel.

                    Args:
                        short_esi:
                           In format xxxx:xxxx:xxxx or "auto".
                           Define a manual short-esi (be careful using this on profiles) or
                           set the value to "auto" to automatically generate the value.
                           Please see the notes under "EVPN A/A
                           ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
                        redundancy:
                           If omitted, Port-Channels use the EOS default of all-active.
                           If omitted, Ethernet interfaces are
                           configured as single-active.
                        designated_forwarder_algorithm:
                           Configure DF algorithm and preferences.
                           - auto: Use preference-based algorithm and assign preference
                           based on position of device in the 'switches' list,
                             e.g., assuming a list of three switches, this
                           would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
                           -
                           preference: Set preference for each switch manually using designated_forwarder_preferences key.
                           -
                           modulus: Use the default modulus-based algorithm.
                           If omitted, Port-Channels use the EOS default of
                           modulus.
                           If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
                        designated_forwarder_preferences:
                           Manual preference as described above, required only for preference algorithm.

                           Subclass of AvdList
                           with `int` items.
                        dont_preempt: Disable preemption for single-active forwarding when auto/manual DF preference is configured.

                    """

        class PortChannel(AvdModel):
            """Subclass of AvdModel."""

            class LacpFallback(AvdModel):
                """Subclass of AvdModel."""

                class Individual(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"profile": {"type": str}, "vlans": {"type": str}, "native_vlan": {"type": int}, "mode": {"type": str}}
                    profile: str | None
                    """Port-profile name to inherit configuration."""
                    vlans: str | None
                    """Allowed VLANs on the port-channel member interfaces when in fallback individual."""
                    native_vlan: int | None
                    """Native VLAN on the port-channel member interfaces when in fallback individual."""
                    mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
                    """Interface mode on the port-channel member interfaces when in fallback individual."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            profile: str | None | UndefinedType = Undefined,
                            vlans: str | None | UndefinedType = Undefined,
                            native_vlan: int | None | UndefinedType = Undefined,
                            mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            Individual.


                            Subclass of AvdModel.

                            Args:
                                profile: Port-profile name to inherit configuration.
                                vlans: Allowed VLANs on the port-channel member interfaces when in fallback individual.
                                native_vlan: Native VLAN on the port-channel member interfaces when in fallback individual.
                                mode: Interface mode on the port-channel member interfaces when in fallback individual.

                            """

                _fields: ClassVar[dict] = {"mode": {"type": str}, "individual": {"type": Individual}, "timeout": {"type": int, "default": 90}}
                mode: Literal["static", "individual"] | None
                """
                Either static or individual mode is supported.
                If the mode is set to "individual" either 'profile'
                or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                """
                individual: Individual
                """
                Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                "individual".

                Subclass of AvdModel.
                """
                timeout: int
                """
                Timeout in seconds.

                Default value: `90`
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        mode: Literal["static", "individual"] | None | UndefinedType = Undefined,
                        individual: Individual | UndefinedType = Undefined,
                        timeout: int | UndefinedType = Undefined,
                    ) -> None:
                        """
                        LacpFallback.


                        Subclass of AvdModel.

                        Args:
                            mode:
                               Either static or individual mode is supported.
                               If the mode is set to "individual" either 'profile'
                               or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                            individual:
                               Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                               "individual".

                               Subclass of AvdModel.
                            timeout: Timeout in seconds.

                        """

            class LacpTimer(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"mode": {"type": str}, "multiplier": {"type": int}}
                mode: Literal["normal", "fast"] | None
                """LACP mode for interface members."""
                multiplier: int | None
                """Number of LACP BPDUs lost before deeming the peer down. EOS default is 3."""

                if TYPE_CHECKING:

                    def __init__(
                        self, *, mode: Literal["normal", "fast"] | None | UndefinedType = Undefined, multiplier: int | None | UndefinedType = Undefined
                    ) -> None:
                        """
                        LacpTimer.


                        Subclass of AvdModel.

                        Args:
                            mode: LACP mode for interface members.
                            multiplier: Number of LACP BPDUs lost before deeming the peer down. EOS default is 3.

                        """

            class SubinterfacesItem(AvdModel):
                """Subclass of AvdModel."""

                class EncapsulationVlan(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"client_dot1q": {"type": int}}
                    client_dot1q: int | None

                    if TYPE_CHECKING:

                        def __init__(self, *, client_dot1q: int | None | UndefinedType = Undefined) -> None:
                            """
                            EncapsulationVlan.


                            Subclass of AvdModel.

                            Args:
                                client_dot1q: client_dot1q

                            """

                _fields: ClassVar[dict] = {
                    "number": {"type": int},
                    "short_esi": {"type": str},
                    "vlan_id": {"type": int},
                    "encapsulation_vlan": {"type": EncapsulationVlan},
                    "raw_eos_cli": {"type": str},
                    "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                }
                number: int | None
                """Subinterface number."""
                short_esi: str | None
                """
                In format xxxx:xxxx:xxxx or "auto".
                Required for multihomed port-channels with subinterfaces.
                """
                vlan_id: int | None
                """
                VLAN ID to bridge.
                Default is subinterface number.
                """
                encapsulation_vlan: EncapsulationVlan
                """
                Client VLAN ID encapsulation.
                Default is subinterface number.


                Subclass of AvdModel.
                """
                raw_eos_cli: str | None
                """EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration."""
                structured_config: EosCliConfigGen.PortChannelInterfacesItem
                """
                Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                eos_cli_config_gen.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        number: int | None | UndefinedType = Undefined,
                        short_esi: str | None | UndefinedType = Undefined,
                        vlan_id: int | None | UndefinedType = Undefined,
                        encapsulation_vlan: EncapsulationVlan | UndefinedType = Undefined,
                        raw_eos_cli: str | None | UndefinedType = Undefined,
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                    ) -> None:
                        """
                        SubinterfacesItem.


                        Subclass of AvdModel.

                        Args:
                            number: Subinterface number.
                            short_esi:
                               In format xxxx:xxxx:xxxx or "auto".
                               Required for multihomed port-channels with subinterfaces.
                            vlan_id:
                               VLAN ID to bridge.
                               Default is subinterface number.
                            encapsulation_vlan:
                               Client VLAN ID encapsulation.
                               Default is subinterface number.


                               Subclass of AvdModel.
                            raw_eos_cli: EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration.
                            structured_config:
                               Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                               eos_cli_config_gen.

                        """

            class Subinterfaces(AvdList[SubinterfacesItem]):
                """Subclass of AvdList with `SubinterfacesItem` items."""

            Subinterfaces._item_type = SubinterfacesItem

            _fields: ClassVar[dict] = {
                "mode": {"type": str},
                "channel_id": {"type": int},
                "description": {"type": str},
                "endpoint_port_channel": {"type": str},
                "enabled": {"type": bool, "default": True},
                "ptp_mpass": {"type": bool, "default": False},
                "lacp_fallback": {"type": LacpFallback},
                "lacp_timer": {"type": LacpTimer},
                "subinterfaces": {"type": Subinterfaces},
                "raw_eos_cli": {"type": str},
                "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
            }
            mode: Literal["active", "passive", "on"] | None
            """Port-Channel Mode."""
            channel_id: int | None
            """
            Port-Channel ID.
            If no channel_id is specified, an id is generated from the first switch port in the
            port channel.
            """
            description: str | None
            """
            Description or description template to be used on the port-channel interface.
            This can be a template
            using the AVD string formatter syntax:
            https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
            descriptions-names.html#avd-string-formatter-syntax.
            The available template fields are:
              -
            `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
              -
            `endpoint` - The name of the connected endpoint
              - `endpoint_port_channel` - The value from
            `endpoint_port_channel` if set.
              - `port_channel_id` - The port-channel number for the switch.
              -
            `adapter_description` - The adapter's description if set.
              - `adapter_description_or_endpoint` -
            Helper alias of the adapter_description or endpoint.

            The default description is set by
            `default_connected_endpoints_port_channel_description`.
            By default the description is templated from
            the type, name and port_channel interface of the endpoint if set.
            """
            endpoint_port_channel: str | None
            """
            Name of the port-channel interface on the endpoint.
            Used for the port-channel description template
            with the field name `peer_interface`
            """
            enabled: bool
            """
            Port-Channel administrative state.
            Setting to false will set port to 'shutdown' in intended
            configuration.

            Default value: `True`
            """
            ptp_mpass: bool
            """
            When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
            logical device.
            Arista PTP enabled devices always place PTP messages on the same physical link
            within the port-channel.
            Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
            devices.

            Default value: `False`
            """
            lacp_fallback: LacpFallback
            """
            LACP fallback configuration.

            Subclass of AvdModel.
            """
            lacp_timer: LacpTimer
            """
            LACP timer configuration. Applies only when Port-channel mode is not "on".

            Subclass of AvdModel.
            """
            subinterfaces: Subinterfaces
            """
            Port-Channel L2 Subinterfaces
            Subinterfaces are only supported on routed port-channels, which means
            they cannot be configured on MLAG port-channels.
            Setting short_esi: auto generates the short_esi
            automatically using a hash of configuration elements.
            Please see the notes under "EVPN A/A ESI dual-
            attached endpoint scenario" before setting short_esi: auto.


            Subclass of AvdList with
            `SubinterfacesItem` items.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the port-channel interface in the final EOS configuration."""
            structured_config: EosCliConfigGen.PortChannelInterfacesItem
            """
            Custom structured config added under port_channel_interfaces.[name=<interface>] for
            eos_cli_config_gen.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    mode: Literal["active", "passive", "on"] | None | UndefinedType = Undefined,
                    channel_id: int | None | UndefinedType = Undefined,
                    description: str | None | UndefinedType = Undefined,
                    endpoint_port_channel: str | None | UndefinedType = Undefined,
                    enabled: bool | UndefinedType = Undefined,
                    ptp_mpass: bool | UndefinedType = Undefined,
                    lacp_fallback: LacpFallback | UndefinedType = Undefined,
                    lacp_timer: LacpTimer | UndefinedType = Undefined,
                    subinterfaces: Subinterfaces | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                ) -> None:
                    """
                    PortChannel.


                    Subclass of AvdModel.

                    Args:
                        mode: Port-Channel Mode.
                        channel_id:
                           Port-Channel ID.
                           If no channel_id is specified, an id is generated from the first switch port in the
                           port channel.
                        description:
                           Description or description template to be used on the port-channel interface.
                           This can be a template
                           using the AVD string formatter syntax:
                           https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                           descriptions-names.html#avd-string-formatter-syntax.
                           The available template fields are:
                             -
                           `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                             -
                           `endpoint` - The name of the connected endpoint
                             - `endpoint_port_channel` - The value from
                           `endpoint_port_channel` if set.
                             - `port_channel_id` - The port-channel number for the switch.
                             -
                           `adapter_description` - The adapter's description if set.
                             - `adapter_description_or_endpoint` -
                           Helper alias of the adapter_description or endpoint.

                           The default description is set by
                           `default_connected_endpoints_port_channel_description`.
                           By default the description is templated from
                           the type, name and port_channel interface of the endpoint if set.
                        endpoint_port_channel:
                           Name of the port-channel interface on the endpoint.
                           Used for the port-channel description template
                           with the field name `peer_interface`
                        enabled:
                           Port-Channel administrative state.
                           Setting to false will set port to 'shutdown' in intended
                           configuration.
                        ptp_mpass:
                           When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
                           logical device.
                           Arista PTP enabled devices always place PTP messages on the same physical link
                           within the port-channel.
                           Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
                           devices.
                        lacp_fallback:
                           LACP fallback configuration.

                           Subclass of AvdModel.
                        lacp_timer:
                           LACP timer configuration. Applies only when Port-channel mode is not "on".

                           Subclass of AvdModel.
                        subinterfaces:
                           Port-Channel L2 Subinterfaces
                           Subinterfaces are only supported on routed port-channels, which means
                           they cannot be configured on MLAG port-channels.
                           Setting short_esi: auto generates the short_esi
                           automatically using a hash of configuration elements.
                           Please see the notes under "EVPN A/A ESI dual-
                           attached endpoint scenario" before setting short_esi: auto.


                           Subclass of AvdList with
                           `SubinterfacesItem` items.
                        raw_eos_cli: EOS CLI rendered directly on the port-channel interface in the final EOS configuration.
                        structured_config:
                           Custom structured config added under port_channel_interfaces.[name=<interface>] for
                           eos_cli_config_gen.

                    """

        class CampusLinkType(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        CampusLinkType._item_type = str

        _fields: ClassVar[dict] = {
            "profile": {"type": str},
            "parent_profile": {"type": str},
            "speed": {"type": str},
            "description": {"type": str},
            "enabled": {"type": bool, "default": True},
            "mode": {"type": str},
            "mtu": {"type": int},
            "l2_mtu": {"type": int},
            "l2_mru": {"type": int},
            "native_vlan": {"type": int},
            "native_vlan_tag": {"type": bool},
            "phone_vlan": {"type": int},
            "phone_trunk_mode": {"type": str},
            "trunk_groups": {"type": TrunkGroups},
            "vlans": {"type": str},
            "spanning_tree_portfast": {"type": str},
            "spanning_tree_bpdufilter": {"type": str},
            "spanning_tree_bpduguard": {"type": str},
            "flowcontrol": {"type": EosCliConfigGen.EthernetInterfacesItem.Flowcontrol},
            "qos_profile": {"type": str},
            "ptp": {"type": Ptp},
            "sflow": {"type": bool},
            "flow_tracking": {"type": FlowTracking},
            "link_tracking": {"type": LinkTracking},
            "dot1x": {"type": EosCliConfigGen.EthernetInterfacesItem.Dot1x},
            "poe": {"type": EosCliConfigGen.EthernetInterfacesItem.Poe},
            "storm_control": {"type": StormControl},
            "monitor_sessions": {"type": MonitorSessions},
            "ethernet_segment": {"type": EthernetSegment},
            "port_channel": {"type": PortChannel},
            "validate_state": {"type": bool},
            "validate_lldp": {"type": bool},
            "campus_link_type": {"type": CampusLinkType},
            "raw_eos_cli": {"type": str},
            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
        }
        profile: str
        """Port profile name."""
        parent_profile: str | None
        """
        Parent profile is optional.
        Port_profiles can refer to another port_profile to inherit settings in
        up to two levels (adapter->profile->parent_profile).
        """
        speed: str | None
        """
        Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
        <interface_speed>`.
        If not specified speed will be auto.
        """
        description: str | None
        """
        Description or description template to be used on all ports.
        This can be a template using the AVD
        string formatter syntax:
        https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
        descriptions-names.html#avd-string-formatter-syntax.
        The available template fields are:
          -
        `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
          -
        `endpoint` - The name of the connected endpoint
          - `endpoint_port` - The value from
        `endpoint_ports` for this switch port if set.

        The default description is set by
        `default_connected_endpoints_description`.
        By default the description is templated from the type,
        name and port of the endpoint if set.
        """
        enabled: bool
        """
        Administrative state, setting to false will set the port to 'shutdown' in the intended
        configuration.

        Default value: `True`
        """
        mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
        """Interface mode."""
        mtu: int | None
        l2_mtu: int | None
        """"l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI."""
        l2_mru: int | None
        """"l2_mru" should only be defined for platforms supporting the "l2 mru" CLI."""
        native_vlan: int | None
        """
        Native VLAN for a trunk port.
        If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
        takes precedence.
        """
        native_vlan_tag: bool | None
        """If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence."""
        phone_vlan: int | None
        """
        Phone VLAN for a mode `trunk phone` port.
        Requires `mode: trunk phone` to be set.
        """
        phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None
        """
        Specify if the phone traffic is tagged or untagged.
        If both data and phone traffic are untagged,
        MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
        """
        trunk_groups: TrunkGroups
        """
        Required with `enable_trunk_groups: true`.
        Trunk Groups are used for limiting VLANs on trunk ports
        to VLANs with the same Trunk Group.


        Subclass of AvdList with `str` items.
        """
        vlans: str | None
        """
        Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
        VLAN 1 will be used for access ports.
        """
        spanning_tree_portfast: Literal["edge", "network"] | None
        spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
        spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
        flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol
        qos_profile: str | None
        """QOS profile name."""
        ptp: Ptp
        """
        The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
        enabled.
        `ptp role master` is set to ensure control over the PTP topology.


        Subclass of AvdModel.
        """
        sflow: bool | None
        """Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting."""
        flow_tracking: FlowTracking
        """
        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
        Subclass of AvdModel.
        """
        link_tracking: LinkTracking
        """
        Configure the downstream interfaces of a respective Link Tracking Group.
        If `port_channel` is
        defined in an adapter, then the port-channel interface is configured to be the downstream.
        Else all
        the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
        multihomed networks.


        Subclass of AvdModel.
        """
        dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x
        """802.1x"""
        poe: EosCliConfigGen.EthernetInterfacesItem.Poe
        """Power Over Ethernet settings applied on port. Only configured if platform supports PoE."""
        storm_control: StormControl
        """
        Storm control settings applied on port toward the endpoint.

        Subclass of AvdModel.
        """
        monitor_sessions: MonitorSessions
        """
        Used to define interfaces as source or destination for monitoring sessions.

        Subclass of AvdList
        with `MonitorSessionsItem` items.
        """
        ethernet_segment: EthernetSegment
        """
        Settings for all or single-active EVPN multihoming.

        Subclass of AvdModel.
        """
        port_channel: PortChannel
        """
        Used for port-channel adapter.

        Subclass of AvdModel.
        """
        validate_state: bool | None
        """
        Set to false to disable interface state and LLDP topology validation performed by the
        `eos_validate_state` role.
        """
        validate_lldp: bool | None
        """Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role."""
        campus_link_type: CampusLinkType
        """
        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
        change at any time.
        Values for the CloudVision `Link-Type` user tags to be associated with an
        interface.
        Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
        in the same tags being associated with the parent Ethernet interface instead.
        Attempting to
        associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
        associated with the member Ethernet interfaces instead.

        Subclass of AvdList with `str` items.
        """
        raw_eos_cli: str | None
        """EOS CLI rendered directly on the ethernet interface in the final EOS configuration."""
        structured_config: EosCliConfigGen.EthernetInterfacesItem
        """Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                profile: str | UndefinedType = Undefined,
                parent_profile: str | None | UndefinedType = Undefined,
                speed: str | None | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                enabled: bool | UndefinedType = Undefined,
                mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                mtu: int | None | UndefinedType = Undefined,
                l2_mtu: int | None | UndefinedType = Undefined,
                l2_mru: int | None | UndefinedType = Undefined,
                native_vlan: int | None | UndefinedType = Undefined,
                native_vlan_tag: bool | None | UndefinedType = Undefined,
                phone_vlan: int | None | UndefinedType = Undefined,
                phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None | UndefinedType = Undefined,
                trunk_groups: TrunkGroups | UndefinedType = Undefined,
                vlans: str | None | UndefinedType = Undefined,
                spanning_tree_portfast: Literal["edge", "network"] | None | UndefinedType = Undefined,
                spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol | UndefinedType = Undefined,
                qos_profile: str | None | UndefinedType = Undefined,
                ptp: Ptp | UndefinedType = Undefined,
                sflow: bool | None | UndefinedType = Undefined,
                flow_tracking: FlowTracking | UndefinedType = Undefined,
                link_tracking: LinkTracking | UndefinedType = Undefined,
                dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x | UndefinedType = Undefined,
                poe: EosCliConfigGen.EthernetInterfacesItem.Poe | UndefinedType = Undefined,
                storm_control: StormControl | UndefinedType = Undefined,
                monitor_sessions: MonitorSessions | UndefinedType = Undefined,
                ethernet_segment: EthernetSegment | UndefinedType = Undefined,
                port_channel: PortChannel | UndefinedType = Undefined,
                validate_state: bool | None | UndefinedType = Undefined,
                validate_lldp: bool | None | UndefinedType = Undefined,
                campus_link_type: CampusLinkType | UndefinedType = Undefined,
                raw_eos_cli: str | None | UndefinedType = Undefined,
                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
            ) -> None:
                """
                PortProfilesItem.


                Subclass of AvdModel.

                Args:
                    profile: Port profile name.
                    parent_profile:
                       Parent profile is optional.
                       Port_profiles can refer to another port_profile to inherit settings in
                       up to two levels (adapter->profile->parent_profile).
                    speed:
                       Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                       <interface_speed>`.
                       If not specified speed will be auto.
                    description:
                       Description or description template to be used on all ports.
                       This can be a template using the AVD
                       string formatter syntax:
                       https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                       descriptions-names.html#avd-string-formatter-syntax.
                       The available template fields are:
                         -
                       `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                         -
                       `endpoint` - The name of the connected endpoint
                         - `endpoint_port` - The value from
                       `endpoint_ports` for this switch port if set.

                       The default description is set by
                       `default_connected_endpoints_description`.
                       By default the description is templated from the type,
                       name and port of the endpoint if set.
                    enabled:
                       Administrative state, setting to false will set the port to 'shutdown' in the intended
                       configuration.
                    mode: Interface mode.
                    mtu: mtu
                    l2_mtu: "l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI.
                    l2_mru: "l2_mru" should only be defined for platforms supporting the "l2 mru" CLI.
                    native_vlan:
                       Native VLAN for a trunk port.
                       If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
                       takes precedence.
                    native_vlan_tag: If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence.
                    phone_vlan:
                       Phone VLAN for a mode `trunk phone` port.
                       Requires `mode: trunk phone` to be set.
                    phone_trunk_mode:
                       Specify if the phone traffic is tagged or untagged.
                       If both data and phone traffic are untagged,
                       MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
                    trunk_groups:
                       Required with `enable_trunk_groups: true`.
                       Trunk Groups are used for limiting VLANs on trunk ports
                       to VLANs with the same Trunk Group.


                       Subclass of AvdList with `str` items.
                    vlans:
                       Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
                       VLAN 1 will be used for access ports.
                    spanning_tree_portfast: spanning_tree_portfast
                    spanning_tree_bpdufilter: spanning_tree_bpdufilter
                    spanning_tree_bpduguard: spanning_tree_bpduguard
                    flowcontrol: flowcontrol
                    qos_profile: QOS profile name.
                    ptp:
                       The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
                       enabled.
                       `ptp role master` is set to ensure control over the PTP topology.


                       Subclass of AvdModel.
                    sflow: Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting.
                    flow_tracking:
                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
                       Subclass of AvdModel.
                    link_tracking:
                       Configure the downstream interfaces of a respective Link Tracking Group.
                       If `port_channel` is
                       defined in an adapter, then the port-channel interface is configured to be the downstream.
                       Else all
                       the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
                       multihomed networks.


                       Subclass of AvdModel.
                    dot1x: 802.1x
                    poe: Power Over Ethernet settings applied on port. Only configured if platform supports PoE.
                    storm_control:
                       Storm control settings applied on port toward the endpoint.

                       Subclass of AvdModel.
                    monitor_sessions:
                       Used to define interfaces as source or destination for monitoring sessions.

                       Subclass of AvdList
                       with `MonitorSessionsItem` items.
                    ethernet_segment:
                       Settings for all or single-active EVPN multihoming.

                       Subclass of AvdModel.
                    port_channel:
                       Used for port-channel adapter.

                       Subclass of AvdModel.
                    validate_state:
                       Set to false to disable interface state and LLDP topology validation performed by the
                       `eos_validate_state` role.
                    validate_lldp: Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role.
                    campus_link_type:
                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                       change at any time.
                       Values for the CloudVision `Link-Type` user tags to be associated with an
                       interface.
                       Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                       in the same tags being associated with the parent Ethernet interface instead.
                       Attempting to
                       associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                       associated with the member Ethernet interfaces instead.

                       Subclass of AvdList with `str` items.
                    raw_eos_cli: EOS CLI rendered directly on the ethernet interface in the final EOS configuration.
                    structured_config: Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen.

                """

    class PortProfiles(AvdIndexedList[str, PortProfilesItem]):
        """Subclass of AvdIndexedList with `PortProfilesItem` items. Primary key is `profile` (`str`)."""

        _primary_key: ClassVar[str] = "profile"

    PortProfiles._item_type = PortProfilesItem

    class PtpProfilesItem(AvdModel):
        """Subclass of AvdModel."""

        class Announce(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"interval": {"type": int}, "timeout": {"type": int}}
            interval: int | None
            timeout: int | None

            if TYPE_CHECKING:

                def __init__(self, *, interval: int | None | UndefinedType = Undefined, timeout: int | None | UndefinedType = Undefined) -> None:
                    """
                    Announce.


                    Subclass of AvdModel.

                    Args:
                        interval: interval
                        timeout: timeout

                    """

        class SyncMessage(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"interval": {"type": int}}
            interval: int | None

            if TYPE_CHECKING:

                def __init__(self, *, interval: int | None | UndefinedType = Undefined) -> None:
                    """
                    SyncMessage.


                    Subclass of AvdModel.

                    Args:
                        interval: interval

                    """

        _fields: ClassVar[dict] = {
            "profile": {"type": str},
            "announce": {"type": Announce},
            "delay_req": {"type": int},
            "sync_message": {"type": SyncMessage},
            "transport": {"type": str},
        }
        profile: str
        """PTP profile."""
        announce: Announce
        """
        PTP announce interval.

        Subclass of AvdModel.
        """
        delay_req: int | None
        sync_message: SyncMessage
        """
        PTP sync message interval.

        Subclass of AvdModel.
        """
        transport: Literal["ipv4"] | None

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                profile: str | UndefinedType = Undefined,
                announce: Announce | UndefinedType = Undefined,
                delay_req: int | None | UndefinedType = Undefined,
                sync_message: SyncMessage | UndefinedType = Undefined,
                transport: Literal["ipv4"] | None | UndefinedType = Undefined,
            ) -> None:
                """
                PtpProfilesItem.


                Subclass of AvdModel.

                Args:
                    profile: PTP profile.
                    announce:
                       PTP announce interval.

                       Subclass of AvdModel.
                    delay_req: delay_req
                    sync_message:
                       PTP sync message interval.

                       Subclass of AvdModel.
                    transport: transport

                """

    class PtpProfiles(AvdIndexedList[str, PtpProfilesItem]):
        """Subclass of AvdIndexedList with `PtpProfilesItem` items. Primary key is `profile` (`str`)."""

        _primary_key: ClassVar[str] = "profile"

    PtpProfiles._item_type = PtpProfilesItem

    class PtpSettings(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "enabled": {"type": bool},
            "profile": {"type": str, "default": "aes67-r16-2016"},
            "domain": {"type": int, "default": 127},
            "auto_clock_identity": {"type": bool, "default": True},
            "forward_v1": {"type": bool, "default": False},
        }
        enabled: bool | None
        profile: str
        """
        Default available profiles are:
          - "aes67"
          - "aes67-r16-2016"
          - "smpte2059-2"

        Default value: `"aes67-r16-2016"`
        """
        domain: int
        """Default value: `127`"""
        auto_clock_identity: bool
        """Default value: `True`"""
        forward_v1: bool
        """
        Forward dataplane PTP V1 packets.

        Default value: `False`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enabled: bool | None | UndefinedType = Undefined,
                profile: str | UndefinedType = Undefined,
                domain: int | UndefinedType = Undefined,
                auto_clock_identity: bool | UndefinedType = Undefined,
                forward_v1: bool | UndefinedType = Undefined,
            ) -> None:
                """
                PtpSettings.


                Subclass of AvdModel.

                Args:
                    enabled: enabled
                    profile:
                       Default available profiles are:
                         - "aes67"
                         - "aes67-r16-2016"
                         - "smpte2059-2"
                    domain: domain
                    auto_clock_identity: auto_clock_identity
                    forward_v1: Forward dataplane PTP V1 packets.

                """

    class QueueMonitorLength(AvdModel):
        """Subclass of AvdModel."""

        class DefaultThresholds(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"high": {"type": int}, "low": {"type": int}}
            high: int
            """Default high threshold for Ethernet Interfaces."""
            low: int | None
            """
            Default low threshold for Ethernet Interfaces.
            Low threshold support is platform dependent.
            """

            if TYPE_CHECKING:

                def __init__(self, *, high: int | UndefinedType = Undefined, low: int | None | UndefinedType = Undefined) -> None:
                    """
                    DefaultThresholds.


                    Subclass of AvdModel.

                    Args:
                        high: Default high threshold for Ethernet Interfaces.
                        low:
                           Default low threshold for Ethernet Interfaces.
                           Low threshold support is platform dependent.

                    """

        class Cpu(AvdModel):
            """Subclass of AvdModel."""

            class Thresholds(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"high": {"type": int}, "low": {"type": int}}
                high: int
                low: int | None

                if TYPE_CHECKING:

                    def __init__(self, *, high: int | UndefinedType = Undefined, low: int | None | UndefinedType = Undefined) -> None:
                        """
                        Thresholds.


                        Subclass of AvdModel.

                        Args:
                            high: high
                            low: low

                        """

            _fields: ClassVar[dict] = {"thresholds": {"type": Thresholds}}
            thresholds: Thresholds
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(self, *, thresholds: Thresholds | UndefinedType = Undefined) -> None:
                    """
                    Cpu.


                    Subclass of AvdModel.

                    Args:
                        thresholds: Subclass of AvdModel.

                    """

        class Mirror(AvdModel):
            """Subclass of AvdModel."""

            class Destination(AvdModel):
                """Subclass of AvdModel."""

                class EthernetInterfaces(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                EthernetInterfaces._item_type = str

                class TunnelModeGre(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {
                        "source": {"type": str},
                        "destination": {"type": str},
                        "dscp": {"type": int},
                        "ttl": {"type": int},
                        "protocol": {"type": str},
                        "vrf": {"type": str},
                    }
                    source: str
                    """Source IP address of GRE tunnel."""
                    destination: str
                    """Destination IP address of GRE tunnel."""
                    dscp: int | None
                    """DSCP of the GRE tunnel. EOS default is 0."""
                    ttl: int | None
                    """TTL range. EOS default is 128."""
                    protocol: str | None
                    """
                    Protocol type in GRE header. Protocol range - 0x0000-0xFFFF.
                    EOS default is 0x88BE.
                    """
                    vrf: str | None
                    """VRF name of the GRE tunnel. EOS default is "default"."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            source: str | UndefinedType = Undefined,
                            destination: str | UndefinedType = Undefined,
                            dscp: int | None | UndefinedType = Undefined,
                            ttl: int | None | UndefinedType = Undefined,
                            protocol: str | None | UndefinedType = Undefined,
                            vrf: str | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            TunnelModeGre.


                            Subclass of AvdModel.

                            Args:
                                source: Source IP address of GRE tunnel.
                                destination: Destination IP address of GRE tunnel.
                                dscp: DSCP of the GRE tunnel. EOS default is 0.
                                ttl: TTL range. EOS default is 128.
                                protocol:
                                   Protocol type in GRE header. Protocol range - 0x0000-0xFFFF.
                                   EOS default is 0x88BE.
                                vrf: VRF name of the GRE tunnel. EOS default is "default".

                            """

                _fields: ClassVar[dict] = {
                    "cpu": {"type": bool},
                    "ethernet_interfaces": {"type": EthernetInterfaces},
                    "tunnel_mode_gre": {"type": TunnelModeGre},
                }
                cpu: bool | None
                """CPU ports."""
                ethernet_interfaces: EthernetInterfaces
                """Subclass of AvdList with `str` items."""
                tunnel_mode_gre: TunnelModeGre
                """Subclass of AvdModel."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        cpu: bool | None | UndefinedType = Undefined,
                        ethernet_interfaces: EthernetInterfaces | UndefinedType = Undefined,
                        tunnel_mode_gre: TunnelModeGre | UndefinedType = Undefined,
                    ) -> None:
                        """
                        Destination.


                        Subclass of AvdModel.

                        Args:
                            cpu: CPU ports.
                            ethernet_interfaces: Subclass of AvdList with `str` items.
                            tunnel_mode_gre: Subclass of AvdModel.

                        """

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "destination": {"type": Destination}}
            enabled: bool | None
            destination: Destination
            """
            Mirror destination.

            Subclass of AvdModel.
            """

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, destination: Destination | UndefinedType = Undefined) -> None:
                    """
                    Mirror.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        destination:
                           Mirror destination.

                           Subclass of AvdModel.

                    """

        _fields: ClassVar[dict] = {
            "enabled": {"type": bool},
            "notifying": {"type": bool},
            "default_thresholds": {"type": DefaultThresholds},
            "log": {"type": int},
            "cpu": {"type": Cpu},
            "tx_latency": {"type": bool},
            "mirror": {"type": Mirror},
        }
        enabled: bool
        notifying: bool | None
        """
        If True, `eos_designs` will configure `queue-monitor length notifying` according to the
        `platform_settings.[].feature_support.queue_monitor_length_notify` setting.
        """
        default_thresholds: DefaultThresholds
        """Subclass of AvdModel."""
        log: int | None
        """Logging interval in seconds."""
        cpu: Cpu
        """Subclass of AvdModel."""
        tx_latency: bool | None
        """Enable tx-latency mode."""
        mirror: Mirror
        """
        Enable frame mirroring during congestion.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                enabled: bool | UndefinedType = Undefined,
                notifying: bool | None | UndefinedType = Undefined,
                default_thresholds: DefaultThresholds | UndefinedType = Undefined,
                log: int | None | UndefinedType = Undefined,
                cpu: Cpu | UndefinedType = Undefined,
                tx_latency: bool | None | UndefinedType = Undefined,
                mirror: Mirror | UndefinedType = Undefined,
            ) -> None:
                """
                QueueMonitorLength.


                Subclass of AvdModel.

                Args:
                    enabled: enabled
                    notifying:
                       If True, `eos_designs` will configure `queue-monitor length notifying` according to the
                       `platform_settings.[].feature_support.queue_monitor_length_notify` setting.
                    default_thresholds: Subclass of AvdModel.
                    log: Logging interval in seconds.
                    cpu: Subclass of AvdModel.
                    tx_latency: Enable tx-latency mode.
                    mirror:
                       Enable frame mirroring during congestion.

                       Subclass of AvdModel.

                """

    class Redundancy(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"protocol": {"type": str}}
        protocol: Literal["sso", "rpr"] | None

        if TYPE_CHECKING:

            def __init__(self, *, protocol: Literal["sso", "rpr"] | None | UndefinedType = Undefined) -> None:
                """
                Redundancy.


                Subclass of AvdModel.

                Args:
                    protocol: protocol

                """

    class SflowSettings(AvdModel):
        """Subclass of AvdModel."""

        class Sample(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"rate": {"type": int}}
            rate: int | None
            """
            Packet sampling rate that defines the average number of ingress packets that pass through an
            interface for every packet that is sampled.
            A rate of 16384 corresponds to an average sample of one
            per 16384 packets.
            """

            if TYPE_CHECKING:

                def __init__(self, *, rate: int | None | UndefinedType = Undefined) -> None:
                    """
                    Sample.


                    Subclass of AvdModel.

                    Args:
                        rate:
                           Packet sampling rate that defines the average number of ingress packets that pass through an
                           interface for every packet that is sampled.
                           A rate of 16384 corresponds to an average sample of one
                           per 16384 packets.

                    """

        class DestinationsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"destination": {"type": str}, "port": {"type": int}, "vrf": {"type": str}}
            destination: str
            """sFlow destination name or IP address."""
            port: int | None
            """UDP Port number. The default port number for sFlow is 6343."""
            vrf: str | None
            """
            If not set, the VRF is automatically picked up from the global setting `default_mgmt_method`.
            The
            value of `vrf` will be interpreted according to these rules:
            - `use_mgmt_interface_vrf` will
            configure the sFlow destination under the VRF set with `mgmt_interface_vrf` and set the
            `mgmt_interface` as sFlow source-interface.
              An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip`
            are not configured for the device.
            - `use_inband_mgmt_vrf` will configure the sFlow destination
            under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as sFlow source-
            interface.
              An error will be raised if inband management is not configured for the device.
            - Any
            other string will be used directly as the VRF name. Remember to set the
            `sflow_settings.vrfs[].source_interface` if needed.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    destination: str | UndefinedType = Undefined,
                    port: int | None | UndefinedType = Undefined,
                    vrf: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    DestinationsItem.


                    Subclass of AvdModel.

                    Args:
                        destination: sFlow destination name or IP address.
                        port: UDP Port number. The default port number for sFlow is 6343.
                        vrf:
                           If not set, the VRF is automatically picked up from the global setting `default_mgmt_method`.
                           The
                           value of `vrf` will be interpreted according to these rules:
                           - `use_mgmt_interface_vrf` will
                           configure the sFlow destination under the VRF set with `mgmt_interface_vrf` and set the
                           `mgmt_interface` as sFlow source-interface.
                             An error will be raised if `mgmt_ip` or `ipv6_mgmt_ip`
                           are not configured for the device.
                           - `use_inband_mgmt_vrf` will configure the sFlow destination
                           under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as sFlow source-
                           interface.
                             An error will be raised if inband management is not configured for the device.
                           - Any
                           other string will be used directly as the VRF name. Remember to set the
                           `sflow_settings.vrfs[].source_interface` if needed.

                    """

        class Destinations(AvdList[DestinationsItem]):
            """Subclass of AvdList with `DestinationsItem` items."""

        Destinations._item_type = DestinationsItem

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "source_interface": {"type": str}}
            name: str
            """VRF name."""
            source_interface: str | None
            """
            Source interface to use for sFlow destinations in this VRF.
            If set for the VRFs defined by
            `mgmt_interface_vrf` or `inband_mgmt_vrf`, this setting will take precedence.
            """

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined, source_interface: str | None | UndefinedType = Undefined) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name: VRF name.
                        source_interface:
                           Source interface to use for sFlow destinations in this VRF.
                           If set for the VRFs defined by
                           `mgmt_interface_vrf` or `inband_mgmt_vrf`, this setting will take precedence.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        _fields: ClassVar[dict] = {
            "polling_interval": {"type": int},
            "sample": {"type": Sample},
            "destinations": {"type": Destinations},
            "vrfs": {"type": Vrfs},
        }
        polling_interval: int | None
        """Interval in seconds for sending counter data to the sFlow collector."""
        sample: Sample
        """Subclass of AvdModel."""
        destinations: Destinations
        """Subclass of AvdList with `DestinationsItem` items."""
        vrfs: Vrfs
        """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                polling_interval: int | None | UndefinedType = Undefined,
                sample: Sample | UndefinedType = Undefined,
                destinations: Destinations | UndefinedType = Undefined,
                vrfs: Vrfs | UndefinedType = Undefined,
            ) -> None:
                """
                SflowSettings.


                Subclass of AvdModel.

                Args:
                    polling_interval: Interval in seconds for sending counter data to the sFlow collector.
                    sample: Subclass of AvdModel.
                    destinations: Subclass of AvdList with `DestinationsItem` items.
                    vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).

                """

    class SnmpSettings(AvdModel):
        """Subclass of AvdModel."""

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "enable": {"type": bool},
                "source_interface": {"type": str},
                "ipv4_acl": {"type": str},
                "ipv6_acl": {"type": str},
            }
            name: str
            """
            VRF name.
            The value will be interpreted according to these rules:
            - `use_mgmt_interface_vrf` will
            configure the SNMP ACL under the VRF set with `mgmt_interface_vrf`.
              An error will be raised if
            `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
            - `use_inband_mgmt_vrf` will
            configure the SNMP ACL under the VRF set with `inband_mgmt_vrf`.
              An error will be raised if inband
            management is not configured for the device.
            - `use_default_mgmt_method_vrf` will configure the SNMP
            ACL under the VRF for one of the two options above depending on the value of `default_mgmt_method`.
            - Any other string will be used directly as the VRF name.
            """
            enable: bool | None
            """Enable/disable SNMP for this VRF."""
            source_interface: str | None
            """
            Source interface to use for SNMP hosts in this VRF.
            If not set, the source interface may be set
            automatically when VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf` or
            `use_default_mgmt_method_vrf`.
            If set for the VRFs defined by `mgmt_interface_vrf` or
            `inband_mgmt_vrf`, this setting will take precedence.
            """
            ipv4_acl: str | None
            """IPv4 access-list name."""
            ipv6_acl: str | None
            """IPv6 access-list name."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    enable: bool | None | UndefinedType = Undefined,
                    source_interface: str | None | UndefinedType = Undefined,
                    ipv4_acl: str | None | UndefinedType = Undefined,
                    ipv6_acl: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name:
                           VRF name.
                           The value will be interpreted according to these rules:
                           - `use_mgmt_interface_vrf` will
                           configure the SNMP ACL under the VRF set with `mgmt_interface_vrf`.
                             An error will be raised if
                           `mgmt_ip` or `ipv6_mgmt_ip` are not configured for the device.
                           - `use_inband_mgmt_vrf` will
                           configure the SNMP ACL under the VRF set with `inband_mgmt_vrf`.
                             An error will be raised if inband
                           management is not configured for the device.
                           - `use_default_mgmt_method_vrf` will configure the SNMP
                           ACL under the VRF for one of the two options above depending on the value of `default_mgmt_method`.
                           - Any other string will be used directly as the VRF name.
                        enable: Enable/disable SNMP for this VRF.
                        source_interface:
                           Source interface to use for SNMP hosts in this VRF.
                           If not set, the source interface may be set
                           automatically when VRF is set to `use_mgmt_interface_vrf`, `use_inband_mgmt_vrf` or
                           `use_default_mgmt_method_vrf`.
                           If set for the VRFs defined by `mgmt_interface_vrf` or
                           `inband_mgmt_vrf`, this setting will take precedence.
                        ipv4_acl: IPv4 access-list name.
                        ipv6_acl: IPv6 access-list name.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        class UsersItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "group": {"type": str},
                "version": {"type": str},
                "auth": {"type": str},
                "auth_passphrase": {"type": str},
                "priv": {"type": str},
                "priv_passphrase": {"type": str},
            }
            name: str | None
            """Username."""
            group: str | None
            """Group name."""
            version: Literal["v1", "v2c", "v3"] | None
            auth: Literal["md5", "sha", "sha256", "sha384", "sha512"] | None
            auth_passphrase: str | None
            """Cleartext passphrase so the recommendation is to use vault. Requires 'auth' to be set."""
            priv: Literal["des", "aes", "aes192", "aes256"] | None
            priv_passphrase: str | None
            """Cleartext passphrase so the recommendation is to use vault. Requires 'priv' to be set."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | None | UndefinedType = Undefined,
                    group: str | None | UndefinedType = Undefined,
                    version: Literal["v1", "v2c", "v3"] | None | UndefinedType = Undefined,
                    auth: Literal["md5", "sha", "sha256", "sha384", "sha512"] | None | UndefinedType = Undefined,
                    auth_passphrase: str | None | UndefinedType = Undefined,
                    priv: Literal["des", "aes", "aes192", "aes256"] | None | UndefinedType = Undefined,
                    priv_passphrase: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    UsersItem.


                    Subclass of AvdModel.

                    Args:
                        name: Username.
                        group: Group name.
                        version: version
                        auth: auth
                        auth_passphrase: Cleartext passphrase so the recommendation is to use vault. Requires 'auth' to be set.
                        priv: priv
                        priv_passphrase: Cleartext passphrase so the recommendation is to use vault. Requires 'priv' to be set.

                    """

        class Users(AvdList[UsersItem]):
            """Subclass of AvdList with `UsersItem` items."""

        Users._item_type = UsersItem

        class HostsItem(AvdModel):
            """Subclass of AvdModel."""

            class UsersItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"username": {"type": str}, "authentication_level": {"type": str}}
                username: str | None
                authentication_level: Literal["auth", "noauth", "priv"] | None

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        username: str | None | UndefinedType = Undefined,
                        authentication_level: Literal["auth", "noauth", "priv"] | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        UsersItem.


                        Subclass of AvdModel.

                        Args:
                            username: username
                            authentication_level: authentication_level

                        """

            class Users(AvdList[UsersItem]):
                """Subclass of AvdList with `UsersItem` items."""

            Users._item_type = UsersItem

            _fields: ClassVar[dict] = {
                "host": {"type": str},
                "vrf": {"type": str},
                "use_mgmt_interface_vrf": {"type": bool},
                "use_inband_mgmt_vrf": {"type": bool},
                "version": {"type": str},
                "community": {"type": str},
                "users": {"type": Users},
            }
            host: str | None
            """Host IP address or name."""
            vrf: str | None
            """
            VRF Name.
            The value of `vrf` will be interpreted according to these rules:
            -
            `use_mgmt_interface_vrf` will configure the SNMP host under the VRF set with `mgmt_interface_vrf`
            and set the `mgmt_interface` as SNMP source-interface.
              An error will be raised if `mgmt_ip` or
            `ipv6_mgmt_ip` are not configured for the device.
            - `use_inband_mgmt_vrf` will configure the SNMP
            host under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as SNMP source-
            interface.
              An error will be raised if inband management is not configured for the device.
            -
            `use_default_mgmt_method_vrf` will configure the SNMP host under the VRF and set the source-
            interface for one of the two options above depending on the value of `default_mgmt_method`.
            - Any
            other string will be used directly as the VRF name. Remember to set the
            `snmp_settings.vrfs[].source_interface` if needed.
            """
            use_mgmt_interface_vrf: bool | None
            """
            Configure the SNMP host under the VRF set with "mgmt_interface_vrf".
            Ignored if 'mgmt_ip' or
            'ipv6_mgmt_ip' are not configured for the device, so if the host is only configured with this VRF,
            the host will not be configured at all.
            Can be used in combination with "vrf" and
            "use_inband_mgmt_vrf" to configure the SNMP host under multiple VRFs.
            """
            use_inband_mgmt_vrf: bool | None
            """
            Configure the SNMP host under the VRF set with "inband_mgmt_vrf".
            Ignored if inband management is
            not configured for the device, so if the host is only configured with this VRF, the host will not be
            configured at all.
            Can be used in combination with "vrf" and "use_mgmt_interface_vrf" to configure
            the SNMP host under multiple VRFs.
            """
            version: Literal["1", "2c", "3"] | None
            community: str | None
            """Community name. Required with version "1" or "2c"."""
            users: Users
            """Subclass of AvdList with `UsersItem` items."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    host: str | None | UndefinedType = Undefined,
                    vrf: str | None | UndefinedType = Undefined,
                    use_mgmt_interface_vrf: bool | None | UndefinedType = Undefined,
                    use_inband_mgmt_vrf: bool | None | UndefinedType = Undefined,
                    version: Literal["1", "2c", "3"] | None | UndefinedType = Undefined,
                    community: str | None | UndefinedType = Undefined,
                    users: Users | UndefinedType = Undefined,
                ) -> None:
                    """
                    HostsItem.


                    Subclass of AvdModel.

                    Args:
                        host: Host IP address or name.
                        vrf:
                           VRF Name.
                           The value of `vrf` will be interpreted according to these rules:
                           -
                           `use_mgmt_interface_vrf` will configure the SNMP host under the VRF set with `mgmt_interface_vrf`
                           and set the `mgmt_interface` as SNMP source-interface.
                             An error will be raised if `mgmt_ip` or
                           `ipv6_mgmt_ip` are not configured for the device.
                           - `use_inband_mgmt_vrf` will configure the SNMP
                           host under the VRF set with `inband_mgmt_vrf` and set the `inband_mgmt_interface` as SNMP source-
                           interface.
                             An error will be raised if inband management is not configured for the device.
                           -
                           `use_default_mgmt_method_vrf` will configure the SNMP host under the VRF and set the source-
                           interface for one of the two options above depending on the value of `default_mgmt_method`.
                           - Any
                           other string will be used directly as the VRF name. Remember to set the
                           `snmp_settings.vrfs[].source_interface` if needed.
                        use_mgmt_interface_vrf:
                           Configure the SNMP host under the VRF set with "mgmt_interface_vrf".
                           Ignored if 'mgmt_ip' or
                           'ipv6_mgmt_ip' are not configured for the device, so if the host is only configured with this VRF,
                           the host will not be configured at all.
                           Can be used in combination with "vrf" and
                           "use_inband_mgmt_vrf" to configure the SNMP host under multiple VRFs.
                        use_inband_mgmt_vrf:
                           Configure the SNMP host under the VRF set with "inband_mgmt_vrf".
                           Ignored if inband management is
                           not configured for the device, so if the host is only configured with this VRF, the host will not be
                           configured at all.
                           Can be used in combination with "vrf" and "use_mgmt_interface_vrf" to configure
                           the SNMP host under multiple VRFs.
                        version: version
                        community: Community name. Required with version "1" or "2c".
                        users: Subclass of AvdList with `UsersItem` items.

                    """

        class Hosts(AvdList[HostsItem]):
            """Subclass of AvdList with `HostsItem` items."""

        Hosts._item_type = HostsItem

        class Ipv4AclsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "vrf": {"type": str}}
            name: str | None
            """IPv4 access list name."""
            vrf: str | None

            if TYPE_CHECKING:

                def __init__(self, *, name: str | None | UndefinedType = Undefined, vrf: str | None | UndefinedType = Undefined) -> None:
                    """
                    Ipv4AclsItem.


                    Subclass of AvdModel.

                    Args:
                        name: IPv4 access list name.
                        vrf: vrf

                    """

        class Ipv4Acls(AvdList[Ipv4AclsItem]):
            """Subclass of AvdList with `Ipv4AclsItem` items."""

        Ipv4Acls._item_type = Ipv4AclsItem

        class Ipv6AclsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "vrf": {"type": str}}
            name: str | None
            """IPv6 access list name."""
            vrf: str | None

            if TYPE_CHECKING:

                def __init__(self, *, name: str | None | UndefinedType = Undefined, vrf: str | None | UndefinedType = Undefined) -> None:
                    """
                    Ipv6AclsItem.


                    Subclass of AvdModel.

                    Args:
                        name: IPv6 access list name.
                        vrf: vrf

                    """

        class Ipv6Acls(AvdList[Ipv6AclsItem]):
            """Subclass of AvdList with `Ipv6AclsItem` items."""

        Ipv6Acls._item_type = Ipv6AclsItem

        class ViewsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "mib_family_name": {"type": str}, "included": {"type": bool}}
            name: str | None
            """SNMP view name."""
            mib_family_name: str | None
            included: bool | None

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | None | UndefinedType = Undefined,
                    mib_family_name: str | None | UndefinedType = Undefined,
                    included: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    ViewsItem.


                    Subclass of AvdModel.

                    Args:
                        name: SNMP view name.
                        mib_family_name: mib_family_name
                        included: included

                    """

        class Views(AvdList[ViewsItem]):
            """Subclass of AvdList with `ViewsItem` items."""

        Views._item_type = ViewsItem

        class GroupsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "version": {"type": str},
                "authentication": {"type": str},
                "read": {"type": str},
                "write": {"type": str},
                "notify": {"type": str},
            }
            name: str | None
            """Group name."""
            version: Literal["v1", "v2c", "v3"] | None
            authentication: Literal["auth", "noauth", "priv"] | None
            read: str | None
            """Read view."""
            write: str | None
            """Write view."""
            notify: str | None
            """Notify view."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | None | UndefinedType = Undefined,
                    version: Literal["v1", "v2c", "v3"] | None | UndefinedType = Undefined,
                    authentication: Literal["auth", "noauth", "priv"] | None | UndefinedType = Undefined,
                    read: str | None | UndefinedType = Undefined,
                    write: str | None | UndefinedType = Undefined,
                    notify: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    GroupsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Group name.
                        version: version
                        authentication: authentication
                        read: Read view.
                        write: Write view.
                        notify: Notify view.

                    """

        class Groups(AvdList[GroupsItem]):
            """Subclass of AvdList with `GroupsItem` items."""

        Groups._item_type = GroupsItem

        _fields: ClassVar[dict] = {
            "contact": {"type": str},
            "location": {"type": bool, "default": False},
            "vrfs": {"type": Vrfs},
            "enable_mgmt_interface_vrf": {"type": bool},
            "enable_inband_mgmt_vrf": {"type": bool},
            "compute_local_engineid": {"type": bool, "default": False},
            "compute_local_engineid_source": {"type": str, "default": "hostname_and_ip"},
            "compute_v3_user_localized_key": {"type": bool, "default": False},
            "users": {"type": Users},
            "hosts": {"type": Hosts},
            "communities": {"type": EosCliConfigGen.SnmpServer.Communities},
            "ipv4_acls": {"type": Ipv4Acls},
            "ipv6_acls": {"type": Ipv6Acls},
            "views": {"type": Views},
            "groups": {"type": Groups},
            "traps": {"type": EosCliConfigGen.SnmpServer.Traps},
        }
        contact: str | None
        """SNMP contact."""
        location: bool
        """
        Set SNMP location. Formatted as "<fabric_name> <dc_name> <pod_name> <switch_rack>
        <inventory_hostname>".

        Default value: `False`
        """
        vrfs: Vrfs
        """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""
        enable_mgmt_interface_vrf: bool | None
        """
        Enable/disable SNMP for the VRF set with "mgmt_interface_vrf".
        Ignored if 'mgmt_ip' or
        'ipv6_mgmt_ip' are not configured for the device.
        Can be used in combination with "vrfs" and
        "enable_inband_mgmt_vrf".
        """
        enable_inband_mgmt_vrf: bool | None
        """
        Enable/disable SNMP for the VRF set with "inband_mgmt_vrf".
        Ignored if inband management is not
        configured for the device.
        Can be used in combination with "vrfs" and "enable_mgmt_interface_vrf".
        """
        compute_local_engineid: bool
        """
        Generate a local engineId for SNMP using the 'compute_local_engineid_source' method.

        Default value: `False`
        """
        compute_local_engineid_source: Literal["hostname_and_ip", "system_mac"]
        """
        `compute_local_engineid_source` supports:
        - `hostname_and_ip` generate a local engineId for SNMP by
        hashing via SHA1
          the string generated via the concatenation of the hostname plus the management
        IP.
          {{ inventory_hostname }} + {{ switch.mgmt_ip }}.
        - `system_mac` generate the switch default
        engine id for AVD usage.
          To use this, `system_mac_address` MUST be set for the device.
          The
        formula is f5717f + system_mac_address + 00.

        Default value: `"hostname_and_ip"`
        """
        compute_v3_user_localized_key: bool
        """
        Requires compute_local_engineid to be `true`.
        If enabled, the SNMPv3 passphrases for auth and priv
        are transformed using RFC 2574, matching the value they would take in EOS CLI.
        The algorithm
        requires a local engineId, which is unknown to AVD, hence the necessity to generate one beforehand.

        Default value: `False`
        """
        users: Users
        """
        Configuration of local SNMP users.
        Configuration of remote SNMP users are currently only possible
        using `structured_config`.

        Subclass of AvdList with `UsersItem` items.
        """
        hosts: Hosts
        """Subclass of AvdList with `HostsItem` items."""
        communities: EosCliConfigGen.SnmpServer.Communities
        ipv4_acls: Ipv4Acls
        """Subclass of AvdList with `Ipv4AclsItem` items."""
        ipv6_acls: Ipv6Acls
        """Subclass of AvdList with `Ipv6AclsItem` items."""
        views: Views
        """Subclass of AvdList with `ViewsItem` items."""
        groups: Groups
        """Subclass of AvdList with `GroupsItem` items."""
        traps: EosCliConfigGen.SnmpServer.Traps

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                contact: str | None | UndefinedType = Undefined,
                location: bool | UndefinedType = Undefined,
                vrfs: Vrfs | UndefinedType = Undefined,
                enable_mgmt_interface_vrf: bool | None | UndefinedType = Undefined,
                enable_inband_mgmt_vrf: bool | None | UndefinedType = Undefined,
                compute_local_engineid: bool | UndefinedType = Undefined,
                compute_local_engineid_source: Literal["hostname_and_ip", "system_mac"] | UndefinedType = Undefined,
                compute_v3_user_localized_key: bool | UndefinedType = Undefined,
                users: Users | UndefinedType = Undefined,
                hosts: Hosts | UndefinedType = Undefined,
                communities: EosCliConfigGen.SnmpServer.Communities | UndefinedType = Undefined,
                ipv4_acls: Ipv4Acls | UndefinedType = Undefined,
                ipv6_acls: Ipv6Acls | UndefinedType = Undefined,
                views: Views | UndefinedType = Undefined,
                groups: Groups | UndefinedType = Undefined,
                traps: EosCliConfigGen.SnmpServer.Traps | UndefinedType = Undefined,
            ) -> None:
                """
                SnmpSettings.


                Subclass of AvdModel.

                Args:
                    contact: SNMP contact.
                    location:
                       Set SNMP location. Formatted as "<fabric_name> <dc_name> <pod_name> <switch_rack>
                       <inventory_hostname>".
                    vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).
                    enable_mgmt_interface_vrf:
                       Enable/disable SNMP for the VRF set with "mgmt_interface_vrf".
                       Ignored if 'mgmt_ip' or
                       'ipv6_mgmt_ip' are not configured for the device.
                       Can be used in combination with "vrfs" and
                       "enable_inband_mgmt_vrf".
                    enable_inband_mgmt_vrf:
                       Enable/disable SNMP for the VRF set with "inband_mgmt_vrf".
                       Ignored if inband management is not
                       configured for the device.
                       Can be used in combination with "vrfs" and "enable_mgmt_interface_vrf".
                    compute_local_engineid: Generate a local engineId for SNMP using the 'compute_local_engineid_source' method.
                    compute_local_engineid_source:
                       `compute_local_engineid_source` supports:
                       - `hostname_and_ip` generate a local engineId for SNMP by
                       hashing via SHA1
                         the string generated via the concatenation of the hostname plus the management
                       IP.
                         {{ inventory_hostname }} + {{ switch.mgmt_ip }}.
                       - `system_mac` generate the switch default
                       engine id for AVD usage.
                         To use this, `system_mac_address` MUST be set for the device.
                         The
                       formula is f5717f + system_mac_address + 00.
                    compute_v3_user_localized_key:
                       Requires compute_local_engineid to be `true`.
                       If enabled, the SNMPv3 passphrases for auth and priv
                       are transformed using RFC 2574, matching the value they would take in EOS CLI.
                       The algorithm
                       requires a local engineId, which is unknown to AVD, hence the necessity to generate one beforehand.
                    users:
                       Configuration of local SNMP users.
                       Configuration of remote SNMP users are currently only possible
                       using `structured_config`.

                       Subclass of AvdList with `UsersItem` items.
                    hosts: Subclass of AvdList with `HostsItem` items.
                    communities: communities
                    ipv4_acls: Subclass of AvdList with `Ipv4AclsItem` items.
                    ipv6_acls: Subclass of AvdList with `Ipv6AclsItem` items.
                    views: Subclass of AvdList with `ViewsItem` items.
                    groups: Subclass of AvdList with `GroupsItem` items.
                    traps: traps

                """

    class SourceInterfaces(AvdModel):
        """Subclass of AvdModel."""

        class DomainLookup(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mgmt_interface": {"type": bool, "default": False}, "inband_mgmt_interface": {"type": bool, "default": False}}
            mgmt_interface: bool
            """
            Configure an IP Domain Lookup source-interface with the interface set by `mgmt_interface` for the
            VRF set by `mgmt_interface_vrf`.
            `mgmt_interface` is typically the out-of-band Management interface,
            and can be set under the node settings, platform settings or as a group/host var.

            Default value: `False`
            """
            inband_mgmt_interface: bool
            """
            Configure an IP Domain Lookup source-interface with the interface set by `inband_mgmt_interface` for
            the VRF set by `inband_mgmt_vrf`.
            `inband_mgmt_interface` is typically a loopback or SVI interface,
            and can be set under the node settings.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, mgmt_interface: bool | UndefinedType = Undefined, inband_mgmt_interface: bool | UndefinedType = Undefined) -> None:
                    """
                    DomainLookup.


                    Subclass of AvdModel.

                    Args:
                        mgmt_interface:
                           Configure an IP Domain Lookup source-interface with the interface set by `mgmt_interface` for the
                           VRF set by `mgmt_interface_vrf`.
                           `mgmt_interface` is typically the out-of-band Management interface,
                           and can be set under the node settings, platform settings or as a group/host var.
                        inband_mgmt_interface:
                           Configure an IP Domain Lookup source-interface with the interface set by `inband_mgmt_interface` for
                           the VRF set by `inband_mgmt_vrf`.
                           `inband_mgmt_interface` is typically a loopback or SVI interface,
                           and can be set under the node settings.

                    """

        class HttpClient(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mgmt_interface": {"type": bool, "default": False}, "inband_mgmt_interface": {"type": bool, "default": False}}
            mgmt_interface: bool
            """
            Configure an IP HTTP Client source-interface with the interface set by `mgmt_interface` for the VRF
            set by `mgmt_interface_vrf`.
            `mgmt_interface` is typically the out-of-band Management interface, and
            can be set under the node settings, platform settings or as a group/host var.

            Default value: `False`
            """
            inband_mgmt_interface: bool
            """
            Configure an IP HTTP Client source-interface with the interface set by `inband_mgmt_interface` for
            the VRF set by `inband_mgmt_vrf`.
            `inband_mgmt_interface` is typically a loopback or SVI interface,
            and can be set under the node settings.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, mgmt_interface: bool | UndefinedType = Undefined, inband_mgmt_interface: bool | UndefinedType = Undefined) -> None:
                    """
                    HttpClient.


                    Subclass of AvdModel.

                    Args:
                        mgmt_interface:
                           Configure an IP HTTP Client source-interface with the interface set by `mgmt_interface` for the VRF
                           set by `mgmt_interface_vrf`.
                           `mgmt_interface` is typically the out-of-band Management interface, and
                           can be set under the node settings, platform settings or as a group/host var.
                        inband_mgmt_interface:
                           Configure an IP HTTP Client source-interface with the interface set by `inband_mgmt_interface` for
                           the VRF set by `inband_mgmt_vrf`.
                           `inband_mgmt_interface` is typically a loopback or SVI interface,
                           and can be set under the node settings.

                    """

        class Radius(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mgmt_interface": {"type": bool, "default": False}, "inband_mgmt_interface": {"type": bool, "default": False}}
            mgmt_interface: bool
            """
            Configure an IP Radius source-interface with the interface set by `mgmt_interface` for the VRF set
            by `mgmt_interface_vrf`.
            `mgmt_interface` is typically the out-of-band Management interface, and can
            be set under the node settings, platform settings or as a group/host var.

            Default value: `False`
            """
            inband_mgmt_interface: bool
            """
            Configure an IP Radius source-interface with the interface set by `inband_mgmt_interface` for the
            VRF set by `inband_mgmt_vrf`.
            `inband_mgmt_interface` is typically a loopback or SVI interface, and
            can be set under the node settings.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, mgmt_interface: bool | UndefinedType = Undefined, inband_mgmt_interface: bool | UndefinedType = Undefined) -> None:
                    """
                    Radius.


                    Subclass of AvdModel.

                    Args:
                        mgmt_interface:
                           Configure an IP Radius source-interface with the interface set by `mgmt_interface` for the VRF set
                           by `mgmt_interface_vrf`.
                           `mgmt_interface` is typically the out-of-band Management interface, and can
                           be set under the node settings, platform settings or as a group/host var.
                        inband_mgmt_interface:
                           Configure an IP Radius source-interface with the interface set by `inband_mgmt_interface` for the
                           VRF set by `inband_mgmt_vrf`.
                           `inband_mgmt_interface` is typically a loopback or SVI interface, and
                           can be set under the node settings.

                    """

        class Snmp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mgmt_interface": {"type": bool, "default": False}, "inband_mgmt_interface": {"type": bool, "default": False}}
            mgmt_interface: bool
            """
            Configure a SNMP local-interface with the interface set by `mgmt_interface` for the VRF set by
            `mgmt_interface_vrf`.
            `mgmt_interface` is typically the out-of-band Management interface, and can be
            set under the node settings, platform settings or as a group/host var.

            Default value: `False`
            """
            inband_mgmt_interface: bool
            """
            Configure a SNMP local-interface with the interface set by `inband_mgmt_interface` for the VRF set
            by `inband_mgmt_vrf`.
            `inband_mgmt_interface` is typically a loopback or SVI interface, and can be
            set under the node settings.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, mgmt_interface: bool | UndefinedType = Undefined, inband_mgmt_interface: bool | UndefinedType = Undefined) -> None:
                    """
                    Snmp.


                    Subclass of AvdModel.

                    Args:
                        mgmt_interface:
                           Configure a SNMP local-interface with the interface set by `mgmt_interface` for the VRF set by
                           `mgmt_interface_vrf`.
                           `mgmt_interface` is typically the out-of-band Management interface, and can be
                           set under the node settings, platform settings or as a group/host var.
                        inband_mgmt_interface:
                           Configure a SNMP local-interface with the interface set by `inband_mgmt_interface` for the VRF set
                           by `inband_mgmt_vrf`.
                           `inband_mgmt_interface` is typically a loopback or SVI interface, and can be
                           set under the node settings.

                    """

        class SshClient(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mgmt_interface": {"type": bool, "default": False}, "inband_mgmt_interface": {"type": bool, "default": False}}
            mgmt_interface: bool
            """
            Configure an IP SSH Client source-interface with the interface set by `mgmt_interface` for the VRF
            set by `mgmt_interface_vrf`.
            `mgmt_interface` is typically the out-of-band Management interface, and
            can be set under the node settings, platform settings or as a group/host var.

            Default value: `False`
            """
            inband_mgmt_interface: bool
            """
            Configure an IP SSH Client source-interface with the interface set by `inband_mgmt_interface` for
            the VRF set by `inband_mgmt_vrf`.
            `inband_mgmt_interface` is typically a loopback or SVI interface,
            and can be set under the node settings.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, mgmt_interface: bool | UndefinedType = Undefined, inband_mgmt_interface: bool | UndefinedType = Undefined) -> None:
                    """
                    SshClient.


                    Subclass of AvdModel.

                    Args:
                        mgmt_interface:
                           Configure an IP SSH Client source-interface with the interface set by `mgmt_interface` for the VRF
                           set by `mgmt_interface_vrf`.
                           `mgmt_interface` is typically the out-of-band Management interface, and
                           can be set under the node settings, platform settings or as a group/host var.
                        inband_mgmt_interface:
                           Configure an IP SSH Client source-interface with the interface set by `inband_mgmt_interface` for
                           the VRF set by `inband_mgmt_vrf`.
                           `inband_mgmt_interface` is typically a loopback or SVI interface,
                           and can be set under the node settings.

                    """

        class Tacacs(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"mgmt_interface": {"type": bool, "default": False}, "inband_mgmt_interface": {"type": bool, "default": False}}
            mgmt_interface: bool
            """
            Configure an IP Tacacs source-interface with the interface set by `mgmt_interface` for the VRF set
            by `mgmt_interface_vrf`.
            `mgmt_interface` is typically the out-of-band Management interface, and can
            be set under the node settings, platform settings or as a group/host var.

            Default value: `False`
            """
            inband_mgmt_interface: bool
            """
            Configure an IP Tacacs source-interface with the interface set by `inband_mgmt_interface` for the
            VRF set by `inband_mgmt_vrf`.
            `inband_mgmt_interface` is typically a loopback or SVI interface, and
            can be set under the node settings.

            Default value: `False`
            """

            if TYPE_CHECKING:

                def __init__(self, *, mgmt_interface: bool | UndefinedType = Undefined, inband_mgmt_interface: bool | UndefinedType = Undefined) -> None:
                    """
                    Tacacs.


                    Subclass of AvdModel.

                    Args:
                        mgmt_interface:
                           Configure an IP Tacacs source-interface with the interface set by `mgmt_interface` for the VRF set
                           by `mgmt_interface_vrf`.
                           `mgmt_interface` is typically the out-of-band Management interface, and can
                           be set under the node settings, platform settings or as a group/host var.
                        inband_mgmt_interface:
                           Configure an IP Tacacs source-interface with the interface set by `inband_mgmt_interface` for the
                           VRF set by `inband_mgmt_vrf`.
                           `inband_mgmt_interface` is typically a loopback or SVI interface, and
                           can be set under the node settings.

                    """

        _fields: ClassVar[dict] = {
            "domain_lookup": {"type": DomainLookup},
            "http_client": {"type": HttpClient},
            "radius": {"type": Radius},
            "snmp": {"type": Snmp},
            "ssh_client": {"type": SshClient},
            "tacacs": {"type": Tacacs},
        }
        domain_lookup: DomainLookup
        """
        IP Domain Lookup source-interfaces.

        Subclass of AvdModel.
        """
        http_client: HttpClient
        """
        IP HTTP Client source-interfaces.

        Subclass of AvdModel.
        """
        radius: Radius
        """
        IP Radius source-interfaces.

        Subclass of AvdModel.
        """
        snmp: Snmp
        """
        SNMP local-interfaces.

        Subclass of AvdModel.
        """
        ssh_client: SshClient
        """
        IP SSH Client source-interfaces.

        Subclass of AvdModel.
        """
        tacacs: Tacacs
        """
        IP Tacacs source-interfaces.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                domain_lookup: DomainLookup | UndefinedType = Undefined,
                http_client: HttpClient | UndefinedType = Undefined,
                radius: Radius | UndefinedType = Undefined,
                snmp: Snmp | UndefinedType = Undefined,
                ssh_client: SshClient | UndefinedType = Undefined,
                tacacs: Tacacs | UndefinedType = Undefined,
            ) -> None:
                """
                SourceInterfaces.


                Subclass of AvdModel.

                Args:
                    domain_lookup:
                       IP Domain Lookup source-interfaces.

                       Subclass of AvdModel.
                    http_client:
                       IP HTTP Client source-interfaces.

                       Subclass of AvdModel.
                    radius:
                       IP Radius source-interfaces.

                       Subclass of AvdModel.
                    snmp:
                       SNMP local-interfaces.

                       Subclass of AvdModel.
                    ssh_client:
                       IP SSH Client source-interfaces.

                       Subclass of AvdModel.
                    tacacs:
                       IP Tacacs source-interfaces.

                       Subclass of AvdModel.

                """

    class SshSettings(AvdModel):
        """Subclass of AvdModel."""

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "enabled": {"type": bool}, "ipv4_acl": {"type": str}, "ipv6_acl": {"type": str}}
            name: str
            """
            VRF name.
            The value will be interpreted according to these rules:
            - `use_mgmt_interface_vrf` will
            configure SSH for the VRF set with `mgmt_interface_vrf`.
              An error will be raised if `mgmt_ip` or
            `ipv6_mgmt_ip` are not configured for the device.
            - `use_inband_mgmt_vrf` will configure SSH for the
            VRF set with `inband_mgmt_vrf`.
              An error will be raised if inband management is not configured for
            the device.
            - `use_default_mgmt_method_vrf` will configure the VRF for one of the two options above
            depending on the value of `default_mgmt_method`.
            - Any other string will be used directly as the VRF
            name.
            """
            enabled: bool
            """Enable SSH in VRF."""
            ipv4_acl: str | None
            """IPv4 access-list name."""
            ipv6_acl: str | None
            """IPv6 access-list name."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    enabled: bool | UndefinedType = Undefined,
                    ipv4_acl: str | None | UndefinedType = Undefined,
                    ipv6_acl: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name:
                           VRF name.
                           The value will be interpreted according to these rules:
                           - `use_mgmt_interface_vrf` will
                           configure SSH for the VRF set with `mgmt_interface_vrf`.
                             An error will be raised if `mgmt_ip` or
                           `ipv6_mgmt_ip` are not configured for the device.
                           - `use_inband_mgmt_vrf` will configure SSH for the
                           VRF set with `inband_mgmt_vrf`.
                             An error will be raised if inband management is not configured for
                           the device.
                           - `use_default_mgmt_method_vrf` will configure the VRF for one of the two options above
                           depending on the value of `default_mgmt_method`.
                           - Any other string will be used directly as the VRF
                           name.
                        enabled: Enable SSH in VRF.
                        ipv4_acl: IPv4 access-list name.
                        ipv6_acl: IPv6 access-list name.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        _fields: ClassVar[dict] = {"vrfs": {"type": Vrfs}, "idle_timeout": {"type": int}}
        vrfs: Vrfs
        """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""
        idle_timeout: int | None
        """Idle timeout in minutes."""

        if TYPE_CHECKING:

            def __init__(self, *, vrfs: Vrfs | UndefinedType = Undefined, idle_timeout: int | None | UndefinedType = Undefined) -> None:
                """
                SshSettings.


                Subclass of AvdModel.

                Args:
                    vrfs: Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`).
                    idle_timeout: Idle timeout in minutes.

                """

    class SviProfilesItem(AvdModel):
        """Subclass of AvdModel."""

        class NodesItem(AvdModel):
            """Subclass of AvdModel."""

            class Ipv6AddressVirtuals(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Ipv6AddressVirtuals._item_type = str

            class IpAddressVirtualSecondaries(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            IpAddressVirtualSecondaries._item_type = str

            class IpVirtualRouterAddresses(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            IpVirtualRouterAddresses._item_type = str

            class Ipv6VirtualRouterAddresses(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            Ipv6VirtualRouterAddresses._item_type = str

            class IpHelpersItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"ip_helper": {"type": str}, "source_interface": {"type": str}, "source_vrf": {"type": str}}
                ip_helper: str
                """IPv4 DHCP server IP."""
                source_interface: str | None
                """Interface name to originate DHCP relay packets to DHCP server."""
                source_vrf: str | None
                """VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        ip_helper: str | UndefinedType = Undefined,
                        source_interface: str | None | UndefinedType = Undefined,
                        source_vrf: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        IpHelpersItem.


                        Subclass of AvdModel.

                        Args:
                            ip_helper: IPv4 DHCP server IP.
                            source_interface: Interface name to originate DHCP relay packets to DHCP server.
                            source_vrf: VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI.

                        """

            class IpHelpers(AvdIndexedList[str, IpHelpersItem]):
                """Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is `ip_helper` (`str`)."""

                _primary_key: ClassVar[str] = "ip_helper"

            IpHelpers._item_type = IpHelpersItem

            class StaticRoutesItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "prefix": {"type": str},
                    "next_hop": {"type": str},
                    "track_bfd": {"type": bool},
                    "distance": {"type": int},
                    "tag": {"type": int},
                    "name": {"type": str},
                    "metric": {"type": int},
                    "interface": {"type": str},
                }
                prefix: str | None
                next_hop: str | None
                track_bfd: bool | None
                """Track next-hop using BFD."""
                distance: int | None
                tag: int | None
                name: str | None
                """description."""
                metric: int | None
                interface: str | None

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        prefix: str | None | UndefinedType = Undefined,
                        next_hop: str | None | UndefinedType = Undefined,
                        track_bfd: bool | None | UndefinedType = Undefined,
                        distance: int | None | UndefinedType = Undefined,
                        tag: int | None | UndefinedType = Undefined,
                        name: str | None | UndefinedType = Undefined,
                        metric: int | None | UndefinedType = Undefined,
                        interface: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        StaticRoutesItem.


                        Subclass of AvdModel.

                        Args:
                            prefix: prefix
                            next_hop: next_hop
                            track_bfd: Track next-hop using BFD.
                            distance: distance
                            tag: tag
                            name: description.
                            metric: metric
                            interface: interface

                        """

            class StaticRoutes(AvdList[StaticRoutesItem]):
                """Subclass of AvdList with `StaticRoutesItem` items."""

            StaticRoutes._item_type = StaticRoutesItem

            class Ipv6StaticRoutesItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "prefix": {"type": str},
                    "next_hop": {"type": str},
                    "track_bfd": {"type": bool},
                    "distance": {"type": int},
                    "tag": {"type": int},
                    "name": {"type": str},
                    "metric": {"type": int},
                    "interface": {"type": str},
                }
                prefix: str | None
                next_hop: str | None
                track_bfd: bool | None
                """Track next-hop using BFD."""
                distance: int | None
                tag: int | None
                name: str | None
                """description."""
                metric: int | None
                interface: str | None

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        prefix: str | None | UndefinedType = Undefined,
                        next_hop: str | None | UndefinedType = Undefined,
                        track_bfd: bool | None | UndefinedType = Undefined,
                        distance: int | None | UndefinedType = Undefined,
                        tag: int | None | UndefinedType = Undefined,
                        name: str | None | UndefinedType = Undefined,
                        metric: int | None | UndefinedType = Undefined,
                        interface: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        Ipv6StaticRoutesItem.


                        Subclass of AvdModel.

                        Args:
                            prefix: prefix
                            next_hop: next_hop
                            track_bfd: Track next-hop using BFD.
                            distance: distance
                            tag: tag
                            name: description.
                            metric: metric
                            interface: interface

                        """

            class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
                """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

            Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

            class TrunkGroups(AvdList[str]):
                """Subclass of AvdList with `str` items."""

            TrunkGroups._item_type = str

            class EvpnL2Multicast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "always_redistribute_igmp": {"type": bool}}
                enabled: bool | None
                always_redistribute_igmp: bool | None
                """
                Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                By default `redistribute
                igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                False.
                Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                additional control-plane and data-plane resources,
                but it is required to support forwarding of TTL=1
                multicast traffic within the VLAN.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self, *, enabled: bool | None | UndefinedType = Undefined, always_redistribute_igmp: bool | None | UndefinedType = Undefined
                    ) -> None:
                        """
                        EvpnL2Multicast.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled
                            always_redistribute_igmp:
                               Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                               `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                               By default `redistribute
                               igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                               False.
                               Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                               additional control-plane and data-plane resources,
                               but it is required to support forwarding of TTL=1
                               multicast traffic within the VLAN.

                        """

            class VxlanFloodMulticast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "underlay_multicast_group": {"type": str}}
                enabled: bool | None
                """
                Explicitly enable or disable vxlan_flood_multicast to override settings of
                `<network_services_key>.[].vxlan_flood_multicast`.
                """
                underlay_multicast_group: str | None
                """Specific multicast group to use for this SVI."""

                if TYPE_CHECKING:

                    def __init__(
                        self, *, enabled: bool | None | UndefinedType = Undefined, underlay_multicast_group: str | None | UndefinedType = Undefined
                    ) -> None:
                        """
                        VxlanFloodMulticast.


                        Subclass of AvdModel.

                        Args:
                            enabled:
                               Explicitly enable or disable vxlan_flood_multicast to override settings of
                               `<network_services_key>.[].vxlan_flood_multicast`.
                            underlay_multicast_group: Specific multicast group to use for this SVI.

                        """

            class EvpnL3Multicast(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}}
                enabled: bool | None

                if TYPE_CHECKING:

                    def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                        """
                        EvpnL3Multicast.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled

                        """

            class IgmpSnoopingQuerier(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "source_address": {"type": str}, "version": {"type": int}, "fast_leave": {"type": bool}}
                enabled: bool | None
                """Will be enabled automatically if evpn_l2_multicast is enabled."""
                source_address: str | None
                """
                IPv4_address
                If not set, IP address of "Loopback0" will be used.
                """
                version: Literal[1, 2, 3] | None
                """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""
                fast_leave: bool | None
                """Enable IGMP snooping fast-leave feature."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        enabled: bool | None | UndefinedType = Undefined,
                        source_address: str | None | UndefinedType = Undefined,
                        version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                        fast_leave: bool | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        IgmpSnoopingQuerier.


                        Subclass of AvdModel.

                        Args:
                            enabled: Will be enabled automatically if evpn_l2_multicast is enabled.
                            source_address:
                               IPv4_address
                               If not set, IP address of "Loopback0" will be used.
                            version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).
                            fast_leave: Enable IGMP snooping fast-leave feature.

                        """

            class Ospf(AvdModel):
                """Subclass of AvdModel."""

                class MessageDigestKeysItem(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {
                        "id": {"type": int},
                        "hash_algorithm": {"type": str, "default": "sha512"},
                        "key": {"type": str},
                        "cleartext_key": {"type": str},
                    }
                    id: int | None
                    hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                    """Default value: `"sha512"`"""
                    key: str | None
                    """
                    Type 7 encrypted key for OSPF message-digest authentication.
                    Takes precedence over `cleartext_key`.
                    """
                    cleartext_key: str | None
                    """
                    Cleartext key for OSPF message-digest authentication
                    To protect the password at rest it is strongly
                    recommended to make use of a vault or similar.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            id: int | None | UndefinedType = Undefined,
                            hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                            key: str | None | UndefinedType = Undefined,
                            cleartext_key: str | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            MessageDigestKeysItem.


                            Subclass of AvdModel.

                            Args:
                                id: id
                                hash_algorithm: hash_algorithm
                                key:
                                   Type 7 encrypted key for OSPF message-digest authentication.
                                   Takes precedence over `cleartext_key`.
                                cleartext_key:
                                   Cleartext key for OSPF message-digest authentication
                                   To protect the password at rest it is strongly
                                   recommended to make use of a vault or similar.

                            """

                class MessageDigestKeys(AvdList[MessageDigestKeysItem]):
                    """Subclass of AvdList with `MessageDigestKeysItem` items."""

                MessageDigestKeys._item_type = MessageDigestKeysItem

                _fields: ClassVar[dict] = {
                    "enabled": {"type": bool},
                    "point_to_point": {"type": bool, "default": False},
                    "area": {"type": str, "default": "0.0.0.0"},
                    "cost": {"type": int},
                    "authentication": {"type": str},
                    "simple_auth_key": {"type": str},
                    "cleartext_simple_auth_key": {"type": str},
                    "message_digest_keys": {"type": MessageDigestKeys},
                }
                enabled: bool | None
                point_to_point: bool
                """Default value: `False`"""
                area: str
                """
                OSPF area ID.

                Default value: `"0.0.0.0"`
                """
                cost: int | None
                """OSPF link cost."""
                authentication: Literal["simple", "message-digest"] | None
                simple_auth_key: str | None
                """
                Type 7 encrypted key for OSPF simple authentication.
                Takes precedence over
                `cleartext_simple_auth_key`
                """
                cleartext_simple_auth_key: str | None
                """
                Cleartext key for OSPF simple authentication.
                To protect the password at rest it is strongly
                recommended to make use of a vault or similar.
                """
                message_digest_keys: MessageDigestKeys
                """Subclass of AvdList with `MessageDigestKeysItem` items."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        enabled: bool | None | UndefinedType = Undefined,
                        point_to_point: bool | UndefinedType = Undefined,
                        area: str | UndefinedType = Undefined,
                        cost: int | None | UndefinedType = Undefined,
                        authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                        simple_auth_key: str | None | UndefinedType = Undefined,
                        cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                        message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                    ) -> None:
                        """
                        Ospf.


                        Subclass of AvdModel.

                        Args:
                            enabled: enabled
                            point_to_point: point_to_point
                            area: OSPF area ID.
                            cost: OSPF link cost.
                            authentication: authentication
                            simple_auth_key:
                               Type 7 encrypted key for OSPF simple authentication.
                               Takes precedence over
                               `cleartext_simple_auth_key`
                            cleartext_simple_auth_key:
                               Cleartext key for OSPF simple authentication.
                               To protect the password at rest it is strongly
                               recommended to make use of a vault or similar.
                            message_digest_keys: Subclass of AvdList with `MessageDigestKeysItem` items.

                        """

            class Bgp(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.RouterBgp.VlansItem}, "raw_eos_cli": {"type": str}}
                structured_config: EosCliConfigGen.RouterBgp.VlansItem
                """
                Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                This
                configuration will not be applied to vlan aware bundles.
                """
                raw_eos_cli: str | None
                """EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        structured_config: EosCliConfigGen.RouterBgp.VlansItem | UndefinedType = Undefined,
                        raw_eos_cli: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        Bgp.


                        Subclass of AvdModel.

                        Args:
                            structured_config:
                               Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                               This
                               configuration will not be applied to vlan aware bundles.
                            raw_eos_cli: EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration.

                        """

            _fields: ClassVar[dict] = {
                "node": {"type": str},
                "name": {"type": str},
                "enabled": {"type": bool},
                "description": {"type": str},
                "arp_gratuitous_accept": {"type": bool},
                "ip_address": {"type": str},
                "ipv6_address": {"type": str},
                "ipv6_enable": {"type": bool},
                "ip_address_virtual": {"type": str},
                "ipv6_address_virtuals": {"type": Ipv6AddressVirtuals},
                "ip_address_virtual_secondaries": {"type": IpAddressVirtualSecondaries},
                "ip_virtual_router_addresses": {"type": IpVirtualRouterAddresses},
                "ipv6_virtual_router_addresses": {"type": Ipv6VirtualRouterAddresses},
                "ipv4_acl_in": {"type": str},
                "ipv4_acl_out": {"type": str},
                "ip_helpers": {"type": IpHelpers},
                "static_routes": {"type": StaticRoutes},
                "ipv6_static_routes": {"type": Ipv6StaticRoutes},
                "vni_override": {"type": int},
                "rt_override": {"type": str},
                "rd_override": {"type": str},
                "trunk_groups": {"type": TrunkGroups},
                "evpn_l2_multicast": {"type": EvpnL2Multicast},
                "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
                "evpn_l3_multicast": {"type": EvpnL3Multicast},
                "igmp_snooping_enabled": {"type": bool},
                "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
                "vxlan": {"type": bool, "default": True},
                "spanning_tree_priority": {"type": int},
                "mtu": {"type": int},
                "ospf": {"type": Ospf},
                "bgp": {"type": Bgp},
                "raw_eos_cli": {"type": str},
                "structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                "evpn_l2_multi_domain": {"type": bool},
            }
            node: str
            """Node inventory hostname."""
            name: str | None
            """VLAN name."""
            enabled: bool | None
            """Enable or disable interface."""
            description: str | None
            """SVI description. By default set to VLAN name."""
            arp_gratuitous_accept: bool | None
            """Accept gratuitous ARP."""
            ip_address: str | None
            """IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node."""
            ipv6_address: str | None
            """IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node."""
            ipv6_enable: bool | None
            """Explicitly enable/disable link-local IPv6 addressing."""
            ip_address_virtual: str | None
            """
            IPv4_address/Mask.
            IPv4 VXLAN Anycast IP address.
            Conserves IP addresses in VXLAN deployments as it
            doesn't require unique IP addresses on each node.
            """
            ipv6_address_virtuals: Ipv6AddressVirtuals
            """
            IPv6 VXLAN Anycast IP addresses.
            Conserves IPv6 addresses in VXLAN deployments as it doesn't require
            unique IPv6 addresses on each node.


            Subclass of AvdList with `str` items.
            """
            ip_address_virtual_secondaries: IpAddressVirtualSecondaries
            """
            Secondary IPv4 VXLAN Anycast IP addresses.

            Subclass of AvdList with `str` items.
            """
            ip_virtual_router_addresses: IpVirtualRouterAddresses
            """
            IPv4 VARP addresses.
            Requires an IP address to be configured on the SVI.
            If ip_address_virtual is
            also set, ip_virtual_router_addresses will take precedence
            _if_ there is an ip_address configured
            for the node.


            Subclass of AvdList with `str` items.
            """
            ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses
            """
            IPv6 VARP addresses.
            Requires an IPv6 address to be configured on the SVI.
            If ipv6_address_virtuals
            is also set, ipv6_virtual_router_addresses will take precedence
            _if_ there is an ipv6_address
            configured for the node.


            Subclass of AvdList with `str` items.
            """
            ipv4_acl_in: str | None
            """
            Name of the IPv4 access-list to be assigned in the ingress direction.
            The access-list must be
            defined under `ipv4_acls` and supports substitution of the field "interface_ip".
            """
            ipv4_acl_out: str | None
            """
            Name of the IPv4 Access-list to be assigned in the egress direction.
            The access-list must be defined
            under `ipv4_acls` and supports substitution of the field "interface_ip".
            """
            ip_helpers: IpHelpers
            """
            IP helper for DHCP relay.

            Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
            `ip_helper` (`str`).
            """
            static_routes: StaticRoutes
            """
            Static routes to be configured on every device where the SVI is configured.

            Subclass of AvdList
            with `StaticRoutesItem` items.
            """
            ipv6_static_routes: Ipv6StaticRoutes
            """
            IPv6 static routes to be configured on every device where the SVI is configured.

            Subclass of
            AvdList with `Ipv6StaticRoutesItem` items.
            """
            vni_override: int | None
            """
            By default the VNI will be derived from "mac_vrf_vni_base".
            The vni_override allows us to override
            this value and statically define it (optional).
            """
            rt_override: str | None
            """
            By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
            The rt_override allows us
            to override this value and statically define it.
            rt_override will default to vni_override if set.
            rt_override supports two formats:
              - A single number which will be used in the RT fields instead of
            mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
              - A full RT string with colon
            separator which will override the full RT.
            """
            rd_override: str | None
            """
            By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
            The rt_override allows us
            to override this value and statically define it.
            rd_override will default to rt_override or
            vni_override if set.

            rd_override supports two formats:
              - A single number which will be used in
            the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
            - A full RD string with colon separator which will override the full RD.
            """
            trunk_groups: TrunkGroups
            """Subclass of AvdList with `str` items."""
            evpn_l2_multicast: EvpnL2Multicast
            """
            Explicitly enable or disable evpn_l2_multicast to override setting of
            `<network_services_key>.[].evpn_l2_multicast.enabled`.
            When evpn_l2_multicast.enabled is set to true
            for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
            overriding those individual settings.
            Requires `evpn_multicast` to also be set to `true`.


            Subclass
            of AvdModel.
            """
            vxlan_flood_multicast: VxlanFloodMulticast
            """Subclass of AvdModel."""
            evpn_l3_multicast: EvpnL3Multicast
            """
            Explicitly enable or disable evpn_l3_multicast to override setting of
            `<network_services_key>.[].evpn_l3_multicast.enabled` and
            `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
            Requires `evpn_multicast` to also be
            set to `true`.


            Subclass of AvdModel.
            """
            igmp_snooping_enabled: bool | None
            """Enable or disable IGMP snooping (Enabled by default on EOS)."""
            igmp_snooping_querier: IgmpSnoopingQuerier
            """Subclass of AvdModel."""
            vxlan: bool
            """
            Extend this SVI over VXLAN.

            Default value: `True`
            """
            spanning_tree_priority: int | None
            """
            Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
            under node type settings.
            The default priority for rapid-PVST is set under the node type settings
            with `spanning_tree_priority` (default=32768).
            """
            mtu: int | None
            """Interface MTU."""
            ospf: Ospf
            """
            OSPF interface configuration.

            Subclass of AvdModel.
            """
            bgp: Bgp
            """Subclass of AvdModel."""
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the VLAN interface in the final EOS configuration."""
            structured_config: EosCliConfigGen.VlanInterfacesItem
            """Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen."""
            evpn_l2_multi_domain: bool | None
            """
            Explicitly extend SVI to remote EVPN domains.
            Overrides
            `<network_services_key>[].evpn_l2_multi_domain` and
            `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
            Not supported in conjunction with EVPN vlan
            aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
            or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    node: str | UndefinedType = Undefined,
                    name: str | None | UndefinedType = Undefined,
                    enabled: bool | None | UndefinedType = Undefined,
                    description: str | None | UndefinedType = Undefined,
                    arp_gratuitous_accept: bool | None | UndefinedType = Undefined,
                    ip_address: str | None | UndefinedType = Undefined,
                    ipv6_address: str | None | UndefinedType = Undefined,
                    ipv6_enable: bool | None | UndefinedType = Undefined,
                    ip_address_virtual: str | None | UndefinedType = Undefined,
                    ipv6_address_virtuals: Ipv6AddressVirtuals | UndefinedType = Undefined,
                    ip_address_virtual_secondaries: IpAddressVirtualSecondaries | UndefinedType = Undefined,
                    ip_virtual_router_addresses: IpVirtualRouterAddresses | UndefinedType = Undefined,
                    ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses | UndefinedType = Undefined,
                    ipv4_acl_in: str | None | UndefinedType = Undefined,
                    ipv4_acl_out: str | None | UndefinedType = Undefined,
                    ip_helpers: IpHelpers | UndefinedType = Undefined,
                    static_routes: StaticRoutes | UndefinedType = Undefined,
                    ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                    vni_override: int | None | UndefinedType = Undefined,
                    rt_override: str | None | UndefinedType = Undefined,
                    rd_override: str | None | UndefinedType = Undefined,
                    trunk_groups: TrunkGroups | UndefinedType = Undefined,
                    evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                    vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                    evpn_l3_multicast: EvpnL3Multicast | UndefinedType = Undefined,
                    igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                    igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                    vxlan: bool | UndefinedType = Undefined,
                    spanning_tree_priority: int | None | UndefinedType = Undefined,
                    mtu: int | None | UndefinedType = Undefined,
                    ospf: Ospf | UndefinedType = Undefined,
                    bgp: Bgp | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                    structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                    evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    NodesItem.


                    Subclass of AvdModel.

                    Args:
                        node: Node inventory hostname.
                        name: VLAN name.
                        enabled: Enable or disable interface.
                        description: SVI description. By default set to VLAN name.
                        arp_gratuitous_accept: Accept gratuitous ARP.
                        ip_address: IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node.
                        ipv6_address: IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node.
                        ipv6_enable: Explicitly enable/disable link-local IPv6 addressing.
                        ip_address_virtual:
                           IPv4_address/Mask.
                           IPv4 VXLAN Anycast IP address.
                           Conserves IP addresses in VXLAN deployments as it
                           doesn't require unique IP addresses on each node.
                        ipv6_address_virtuals:
                           IPv6 VXLAN Anycast IP addresses.
                           Conserves IPv6 addresses in VXLAN deployments as it doesn't require
                           unique IPv6 addresses on each node.


                           Subclass of AvdList with `str` items.
                        ip_address_virtual_secondaries:
                           Secondary IPv4 VXLAN Anycast IP addresses.

                           Subclass of AvdList with `str` items.
                        ip_virtual_router_addresses:
                           IPv4 VARP addresses.
                           Requires an IP address to be configured on the SVI.
                           If ip_address_virtual is
                           also set, ip_virtual_router_addresses will take precedence
                           _if_ there is an ip_address configured
                           for the node.


                           Subclass of AvdList with `str` items.
                        ipv6_virtual_router_addresses:
                           IPv6 VARP addresses.
                           Requires an IPv6 address to be configured on the SVI.
                           If ipv6_address_virtuals
                           is also set, ipv6_virtual_router_addresses will take precedence
                           _if_ there is an ipv6_address
                           configured for the node.


                           Subclass of AvdList with `str` items.
                        ipv4_acl_in:
                           Name of the IPv4 access-list to be assigned in the ingress direction.
                           The access-list must be
                           defined under `ipv4_acls` and supports substitution of the field "interface_ip".
                        ipv4_acl_out:
                           Name of the IPv4 Access-list to be assigned in the egress direction.
                           The access-list must be defined
                           under `ipv4_acls` and supports substitution of the field "interface_ip".
                        ip_helpers:
                           IP helper for DHCP relay.

                           Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                           `ip_helper` (`str`).
                        static_routes:
                           Static routes to be configured on every device where the SVI is configured.

                           Subclass of AvdList
                           with `StaticRoutesItem` items.
                        ipv6_static_routes:
                           IPv6 static routes to be configured on every device where the SVI is configured.

                           Subclass of
                           AvdList with `Ipv6StaticRoutesItem` items.
                        vni_override:
                           By default the VNI will be derived from "mac_vrf_vni_base".
                           The vni_override allows us to override
                           this value and statically define it (optional).
                        rt_override:
                           By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                           The rt_override allows us
                           to override this value and statically define it.
                           rt_override will default to vni_override if set.
                           rt_override supports two formats:
                             - A single number which will be used in the RT fields instead of
                           mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                             - A full RT string with colon
                           separator which will override the full RT.
                        rd_override:
                           By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                           The rt_override allows us
                           to override this value and statically define it.
                           rd_override will default to rt_override or
                           vni_override if set.

                           rd_override supports two formats:
                             - A single number which will be used in
                           the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                           - A full RD string with colon separator which will override the full RD.
                        trunk_groups: Subclass of AvdList with `str` items.
                        evpn_l2_multicast:
                           Explicitly enable or disable evpn_l2_multicast to override setting of
                           `<network_services_key>.[].evpn_l2_multicast.enabled`.
                           When evpn_l2_multicast.enabled is set to true
                           for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
                           overriding those individual settings.
                           Requires `evpn_multicast` to also be set to `true`.


                           Subclass
                           of AvdModel.
                        vxlan_flood_multicast: Subclass of AvdModel.
                        evpn_l3_multicast:
                           Explicitly enable or disable evpn_l3_multicast to override setting of
                           `<network_services_key>.[].evpn_l3_multicast.enabled` and
                           `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
                           Requires `evpn_multicast` to also be
                           set to `true`.


                           Subclass of AvdModel.
                        igmp_snooping_enabled: Enable or disable IGMP snooping (Enabled by default on EOS).
                        igmp_snooping_querier: Subclass of AvdModel.
                        vxlan: Extend this SVI over VXLAN.
                        spanning_tree_priority:
                           Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                           under node type settings.
                           The default priority for rapid-PVST is set under the node type settings
                           with `spanning_tree_priority` (default=32768).
                        mtu: Interface MTU.
                        ospf:
                           OSPF interface configuration.

                           Subclass of AvdModel.
                        bgp: Subclass of AvdModel.
                        raw_eos_cli: EOS CLI rendered directly on the VLAN interface in the final EOS configuration.
                        structured_config: Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                        evpn_l2_multi_domain:
                           Explicitly extend SVI to remote EVPN domains.
                           Overrides
                           `<network_services_key>[].evpn_l2_multi_domain` and
                           `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
                           Not supported in conjunction with EVPN vlan
                           aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
                           or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.

                    """

        class Nodes(AvdIndexedList[str, NodesItem]):
            """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `node` (`str`)."""

            _primary_key: ClassVar[str] = "node"

        Nodes._item_type = NodesItem

        class Ipv6AddressVirtuals(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Ipv6AddressVirtuals._item_type = str

        class IpAddressVirtualSecondaries(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        IpAddressVirtualSecondaries._item_type = str

        class IpVirtualRouterAddresses(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        IpVirtualRouterAddresses._item_type = str

        class Ipv6VirtualRouterAddresses(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Ipv6VirtualRouterAddresses._item_type = str

        class IpHelpersItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"ip_helper": {"type": str}, "source_interface": {"type": str}, "source_vrf": {"type": str}}
            ip_helper: str
            """IPv4 DHCP server IP."""
            source_interface: str | None
            """Interface name to originate DHCP relay packets to DHCP server."""
            source_vrf: str | None
            """VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ip_helper: str | UndefinedType = Undefined,
                    source_interface: str | None | UndefinedType = Undefined,
                    source_vrf: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    IpHelpersItem.


                    Subclass of AvdModel.

                    Args:
                        ip_helper: IPv4 DHCP server IP.
                        source_interface: Interface name to originate DHCP relay packets to DHCP server.
                        source_vrf: VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI.

                    """

        class IpHelpers(AvdIndexedList[str, IpHelpersItem]):
            """Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is `ip_helper` (`str`)."""

            _primary_key: ClassVar[str] = "ip_helper"

        IpHelpers._item_type = IpHelpersItem

        class StaticRoutesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "prefix": {"type": str},
                "next_hop": {"type": str},
                "track_bfd": {"type": bool},
                "distance": {"type": int},
                "tag": {"type": int},
                "name": {"type": str},
                "metric": {"type": int},
                "interface": {"type": str},
            }
            prefix: str | None
            next_hop: str | None
            track_bfd: bool | None
            """Track next-hop using BFD."""
            distance: int | None
            tag: int | None
            name: str | None
            """description."""
            metric: int | None
            interface: str | None

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    prefix: str | None | UndefinedType = Undefined,
                    next_hop: str | None | UndefinedType = Undefined,
                    track_bfd: bool | None | UndefinedType = Undefined,
                    distance: int | None | UndefinedType = Undefined,
                    tag: int | None | UndefinedType = Undefined,
                    name: str | None | UndefinedType = Undefined,
                    metric: int | None | UndefinedType = Undefined,
                    interface: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    StaticRoutesItem.


                    Subclass of AvdModel.

                    Args:
                        prefix: prefix
                        next_hop: next_hop
                        track_bfd: Track next-hop using BFD.
                        distance: distance
                        tag: tag
                        name: description.
                        metric: metric
                        interface: interface

                    """

        class StaticRoutes(AvdList[StaticRoutesItem]):
            """Subclass of AvdList with `StaticRoutesItem` items."""

        StaticRoutes._item_type = StaticRoutesItem

        class Ipv6StaticRoutesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "prefix": {"type": str},
                "next_hop": {"type": str},
                "track_bfd": {"type": bool},
                "distance": {"type": int},
                "tag": {"type": int},
                "name": {"type": str},
                "metric": {"type": int},
                "interface": {"type": str},
            }
            prefix: str | None
            next_hop: str | None
            track_bfd: bool | None
            """Track next-hop using BFD."""
            distance: int | None
            tag: int | None
            name: str | None
            """description."""
            metric: int | None
            interface: str | None

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    prefix: str | None | UndefinedType = Undefined,
                    next_hop: str | None | UndefinedType = Undefined,
                    track_bfd: bool | None | UndefinedType = Undefined,
                    distance: int | None | UndefinedType = Undefined,
                    tag: int | None | UndefinedType = Undefined,
                    name: str | None | UndefinedType = Undefined,
                    metric: int | None | UndefinedType = Undefined,
                    interface: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    Ipv6StaticRoutesItem.


                    Subclass of AvdModel.

                    Args:
                        prefix: prefix
                        next_hop: next_hop
                        track_bfd: Track next-hop using BFD.
                        distance: distance
                        tag: tag
                        name: description.
                        metric: metric
                        interface: interface

                    """

        class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
            """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

        Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

        class TrunkGroups(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        TrunkGroups._item_type = str

        class EvpnL2Multicast(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "always_redistribute_igmp": {"type": bool}}
            enabled: bool | None
            always_redistribute_igmp: bool | None
            """
            Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
            `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
            By default `redistribute
            igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
            False.
            Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
            additional control-plane and data-plane resources,
            but it is required to support forwarding of TTL=1
            multicast traffic within the VLAN.
            """

            if TYPE_CHECKING:

                def __init__(
                    self, *, enabled: bool | None | UndefinedType = Undefined, always_redistribute_igmp: bool | None | UndefinedType = Undefined
                ) -> None:
                    """
                    EvpnL2Multicast.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        always_redistribute_igmp:
                           Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                           `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                           By default `redistribute
                           igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                           False.
                           Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                           additional control-plane and data-plane resources,
                           but it is required to support forwarding of TTL=1
                           multicast traffic within the VLAN.

                    """

        class VxlanFloodMulticast(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "underlay_multicast_group": {"type": str}}
            enabled: bool | None
            """
            Explicitly enable or disable vxlan_flood_multicast to override settings of
            `<network_services_key>.[].vxlan_flood_multicast`.
            """
            underlay_multicast_group: str | None
            """Specific multicast group to use for this SVI."""

            if TYPE_CHECKING:

                def __init__(
                    self, *, enabled: bool | None | UndefinedType = Undefined, underlay_multicast_group: str | None | UndefinedType = Undefined
                ) -> None:
                    """
                    VxlanFloodMulticast.


                    Subclass of AvdModel.

                    Args:
                        enabled:
                           Explicitly enable or disable vxlan_flood_multicast to override settings of
                           `<network_services_key>.[].vxlan_flood_multicast`.
                        underlay_multicast_group: Specific multicast group to use for this SVI.

                    """

        class EvpnL3Multicast(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}}
            enabled: bool | None

            if TYPE_CHECKING:

                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                    """
                    EvpnL3Multicast.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled

                    """

        class IgmpSnoopingQuerier(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "source_address": {"type": str}, "version": {"type": int}, "fast_leave": {"type": bool}}
            enabled: bool | None
            """Will be enabled automatically if evpn_l2_multicast is enabled."""
            source_address: str | None
            """
            IPv4_address
            If not set, IP address of "Loopback0" will be used.
            """
            version: Literal[1, 2, 3] | None
            """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""
            fast_leave: bool | None
            """Enable IGMP snooping fast-leave feature."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    enabled: bool | None | UndefinedType = Undefined,
                    source_address: str | None | UndefinedType = Undefined,
                    version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                    fast_leave: bool | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    IgmpSnoopingQuerier.


                    Subclass of AvdModel.

                    Args:
                        enabled: Will be enabled automatically if evpn_l2_multicast is enabled.
                        source_address:
                           IPv4_address
                           If not set, IP address of "Loopback0" will be used.
                        version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).
                        fast_leave: Enable IGMP snooping fast-leave feature.

                    """

        class Ospf(AvdModel):
            """Subclass of AvdModel."""

            class MessageDigestKeysItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {
                    "id": {"type": int},
                    "hash_algorithm": {"type": str, "default": "sha512"},
                    "key": {"type": str},
                    "cleartext_key": {"type": str},
                }
                id: int | None
                hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                """Default value: `"sha512"`"""
                key: str | None
                """
                Type 7 encrypted key for OSPF message-digest authentication.
                Takes precedence over `cleartext_key`.
                """
                cleartext_key: str | None
                """
                Cleartext key for OSPF message-digest authentication
                To protect the password at rest it is strongly
                recommended to make use of a vault or similar.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        id: int | None | UndefinedType = Undefined,
                        hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                        key: str | None | UndefinedType = Undefined,
                        cleartext_key: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        MessageDigestKeysItem.


                        Subclass of AvdModel.

                        Args:
                            id: id
                            hash_algorithm: hash_algorithm
                            key:
                               Type 7 encrypted key for OSPF message-digest authentication.
                               Takes precedence over `cleartext_key`.
                            cleartext_key:
                               Cleartext key for OSPF message-digest authentication
                               To protect the password at rest it is strongly
                               recommended to make use of a vault or similar.

                        """

            class MessageDigestKeys(AvdList[MessageDigestKeysItem]):
                """Subclass of AvdList with `MessageDigestKeysItem` items."""

            MessageDigestKeys._item_type = MessageDigestKeysItem

            _fields: ClassVar[dict] = {
                "enabled": {"type": bool},
                "point_to_point": {"type": bool, "default": False},
                "area": {"type": str, "default": "0.0.0.0"},
                "cost": {"type": int},
                "authentication": {"type": str},
                "simple_auth_key": {"type": str},
                "cleartext_simple_auth_key": {"type": str},
                "message_digest_keys": {"type": MessageDigestKeys},
            }
            enabled: bool | None
            point_to_point: bool
            """Default value: `False`"""
            area: str
            """
            OSPF area ID.

            Default value: `"0.0.0.0"`
            """
            cost: int | None
            """OSPF link cost."""
            authentication: Literal["simple", "message-digest"] | None
            simple_auth_key: str | None
            """
            Type 7 encrypted key for OSPF simple authentication.
            Takes precedence over
            `cleartext_simple_auth_key`
            """
            cleartext_simple_auth_key: str | None
            """
            Cleartext key for OSPF simple authentication.
            To protect the password at rest it is strongly
            recommended to make use of a vault or similar.
            """
            message_digest_keys: MessageDigestKeys
            """Subclass of AvdList with `MessageDigestKeysItem` items."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    enabled: bool | None | UndefinedType = Undefined,
                    point_to_point: bool | UndefinedType = Undefined,
                    area: str | UndefinedType = Undefined,
                    cost: int | None | UndefinedType = Undefined,
                    authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                    simple_auth_key: str | None | UndefinedType = Undefined,
                    cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                    message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                ) -> None:
                    """
                    Ospf.


                    Subclass of AvdModel.

                    Args:
                        enabled: enabled
                        point_to_point: point_to_point
                        area: OSPF area ID.
                        cost: OSPF link cost.
                        authentication: authentication
                        simple_auth_key:
                           Type 7 encrypted key for OSPF simple authentication.
                           Takes precedence over
                           `cleartext_simple_auth_key`
                        cleartext_simple_auth_key:
                           Cleartext key for OSPF simple authentication.
                           To protect the password at rest it is strongly
                           recommended to make use of a vault or similar.
                        message_digest_keys: Subclass of AvdList with `MessageDigestKeysItem` items.

                    """

        class Bgp(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.RouterBgp.VlansItem}, "raw_eos_cli": {"type": str}}
            structured_config: EosCliConfigGen.RouterBgp.VlansItem
            """
            Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
            This
            configuration will not be applied to vlan aware bundles.
            """
            raw_eos_cli: str | None
            """EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    structured_config: EosCliConfigGen.RouterBgp.VlansItem | UndefinedType = Undefined,
                    raw_eos_cli: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    Bgp.


                    Subclass of AvdModel.

                    Args:
                        structured_config:
                           Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                           This
                           configuration will not be applied to vlan aware bundles.
                        raw_eos_cli: EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration.

                    """

        _fields: ClassVar[dict] = {
            "profile": {"type": str},
            "parent_profile": {"type": str},
            "nodes": {"type": Nodes},
            "name": {"type": str},
            "enabled": {"type": bool},
            "description": {"type": str},
            "arp_gratuitous_accept": {"type": bool},
            "ip_address": {"type": str},
            "ipv6_address": {"type": str},
            "ipv6_enable": {"type": bool},
            "ip_address_virtual": {"type": str},
            "ipv6_address_virtuals": {"type": Ipv6AddressVirtuals},
            "ip_address_virtual_secondaries": {"type": IpAddressVirtualSecondaries},
            "ip_virtual_router_addresses": {"type": IpVirtualRouterAddresses},
            "ipv6_virtual_router_addresses": {"type": Ipv6VirtualRouterAddresses},
            "ipv4_acl_in": {"type": str},
            "ipv4_acl_out": {"type": str},
            "ip_helpers": {"type": IpHelpers},
            "static_routes": {"type": StaticRoutes},
            "ipv6_static_routes": {"type": Ipv6StaticRoutes},
            "vni_override": {"type": int},
            "rt_override": {"type": str},
            "rd_override": {"type": str},
            "trunk_groups": {"type": TrunkGroups},
            "evpn_l2_multicast": {"type": EvpnL2Multicast},
            "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
            "evpn_l3_multicast": {"type": EvpnL3Multicast},
            "igmp_snooping_enabled": {"type": bool},
            "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
            "vxlan": {"type": bool, "default": True},
            "spanning_tree_priority": {"type": int},
            "mtu": {"type": int},
            "ospf": {"type": Ospf},
            "bgp": {"type": Bgp},
            "raw_eos_cli": {"type": str},
            "structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
            "evpn_l2_multi_domain": {"type": bool},
        }
        profile: str
        """Profile name."""
        parent_profile: str | None
        """
        Parent SVI profile name to apply.
        svi_profiles can refer to another svi_profile to inherit settings
        in up to two levels (svi -> svi_profile -> svi_parent_profile).
        """
        nodes: Nodes
        """
        Define node specific configuration, such as unique IP addresses.
        Any keys set here will be merged
        onto the SVI config, except `structured_config` keys which will replace the `structured_config` set
        on SVI level.


        Subclass of AvdIndexedList with `NodesItem` items. Primary key is `node` (`str`).
        """
        name: str | None
        """VLAN name."""
        enabled: bool | None
        """Enable or disable interface."""
        description: str | None
        """SVI description. By default set to VLAN name."""
        arp_gratuitous_accept: bool | None
        """Accept gratuitous ARP."""
        ip_address: str | None
        """IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node."""
        ipv6_address: str | None
        """IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node."""
        ipv6_enable: bool | None
        """Explicitly enable/disable link-local IPv6 addressing."""
        ip_address_virtual: str | None
        """
        IPv4_address/Mask.
        IPv4 VXLAN Anycast IP address.
        Conserves IP addresses in VXLAN deployments as it
        doesn't require unique IP addresses on each node.
        """
        ipv6_address_virtuals: Ipv6AddressVirtuals
        """
        IPv6 VXLAN Anycast IP addresses.
        Conserves IPv6 addresses in VXLAN deployments as it doesn't require
        unique IPv6 addresses on each node.


        Subclass of AvdList with `str` items.
        """
        ip_address_virtual_secondaries: IpAddressVirtualSecondaries
        """
        Secondary IPv4 VXLAN Anycast IP addresses.

        Subclass of AvdList with `str` items.
        """
        ip_virtual_router_addresses: IpVirtualRouterAddresses
        """
        IPv4 VARP addresses.
        Requires an IP address to be configured on the SVI.
        If ip_address_virtual is
        also set, ip_virtual_router_addresses will take precedence
        _if_ there is an ip_address configured
        for the node.


        Subclass of AvdList with `str` items.
        """
        ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses
        """
        IPv6 VARP addresses.
        Requires an IPv6 address to be configured on the SVI.
        If ipv6_address_virtuals
        is also set, ipv6_virtual_router_addresses will take precedence
        _if_ there is an ipv6_address
        configured for the node.


        Subclass of AvdList with `str` items.
        """
        ipv4_acl_in: str | None
        """
        Name of the IPv4 access-list to be assigned in the ingress direction.
        The access-list must be
        defined under `ipv4_acls` and supports substitution of the field "interface_ip".
        """
        ipv4_acl_out: str | None
        """
        Name of the IPv4 Access-list to be assigned in the egress direction.
        The access-list must be defined
        under `ipv4_acls` and supports substitution of the field "interface_ip".
        """
        ip_helpers: IpHelpers
        """
        IP helper for DHCP relay.

        Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
        `ip_helper` (`str`).
        """
        static_routes: StaticRoutes
        """
        Static routes to be configured on every device where the SVI is configured.

        Subclass of AvdList
        with `StaticRoutesItem` items.
        """
        ipv6_static_routes: Ipv6StaticRoutes
        """
        IPv6 static routes to be configured on every device where the SVI is configured.

        Subclass of
        AvdList with `Ipv6StaticRoutesItem` items.
        """
        vni_override: int | None
        """
        By default the VNI will be derived from "mac_vrf_vni_base".
        The vni_override allows us to override
        this value and statically define it (optional).
        """
        rt_override: str | None
        """
        By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
        The rt_override allows us
        to override this value and statically define it.
        rt_override will default to vni_override if set.
        rt_override supports two formats:
          - A single number which will be used in the RT fields instead of
        mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
          - A full RT string with colon
        separator which will override the full RT.
        """
        rd_override: str | None
        """
        By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
        The rt_override allows us
        to override this value and statically define it.
        rd_override will default to rt_override or
        vni_override if set.

        rd_override supports two formats:
          - A single number which will be used in
        the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
        - A full RD string with colon separator which will override the full RD.
        """
        trunk_groups: TrunkGroups
        """Subclass of AvdList with `str` items."""
        evpn_l2_multicast: EvpnL2Multicast
        """
        Explicitly enable or disable evpn_l2_multicast to override setting of
        `<network_services_key>.[].evpn_l2_multicast.enabled`.
        When evpn_l2_multicast.enabled is set to true
        for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
        overriding those individual settings.
        Requires `evpn_multicast` to also be set to `true`.


        Subclass
        of AvdModel.
        """
        vxlan_flood_multicast: VxlanFloodMulticast
        """Subclass of AvdModel."""
        evpn_l3_multicast: EvpnL3Multicast
        """
        Explicitly enable or disable evpn_l3_multicast to override setting of
        `<network_services_key>.[].evpn_l3_multicast.enabled` and
        `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
        Requires `evpn_multicast` to also be
        set to `true`.


        Subclass of AvdModel.
        """
        igmp_snooping_enabled: bool | None
        """Enable or disable IGMP snooping (Enabled by default on EOS)."""
        igmp_snooping_querier: IgmpSnoopingQuerier
        """Subclass of AvdModel."""
        vxlan: bool
        """
        Extend this SVI over VXLAN.

        Default value: `True`
        """
        spanning_tree_priority: int | None
        """
        Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
        under node type settings.
        The default priority for rapid-PVST is set under the node type settings
        with `spanning_tree_priority` (default=32768).
        """
        mtu: int | None
        """Interface MTU."""
        ospf: Ospf
        """
        OSPF interface configuration.

        Subclass of AvdModel.
        """
        bgp: Bgp
        """Subclass of AvdModel."""
        raw_eos_cli: str | None
        """EOS CLI rendered directly on the VLAN interface in the final EOS configuration."""
        structured_config: EosCliConfigGen.VlanInterfacesItem
        """Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen."""
        evpn_l2_multi_domain: bool | None
        """
        Explicitly extend SVI to remote EVPN domains.
        Overrides
        `<network_services_key>[].evpn_l2_multi_domain` and
        `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
        Not supported in conjunction with EVPN vlan
        aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
        or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                profile: str | UndefinedType = Undefined,
                parent_profile: str | None | UndefinedType = Undefined,
                nodes: Nodes | UndefinedType = Undefined,
                name: str | None | UndefinedType = Undefined,
                enabled: bool | None | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                arp_gratuitous_accept: bool | None | UndefinedType = Undefined,
                ip_address: str | None | UndefinedType = Undefined,
                ipv6_address: str | None | UndefinedType = Undefined,
                ipv6_enable: bool | None | UndefinedType = Undefined,
                ip_address_virtual: str | None | UndefinedType = Undefined,
                ipv6_address_virtuals: Ipv6AddressVirtuals | UndefinedType = Undefined,
                ip_address_virtual_secondaries: IpAddressVirtualSecondaries | UndefinedType = Undefined,
                ip_virtual_router_addresses: IpVirtualRouterAddresses | UndefinedType = Undefined,
                ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses | UndefinedType = Undefined,
                ipv4_acl_in: str | None | UndefinedType = Undefined,
                ipv4_acl_out: str | None | UndefinedType = Undefined,
                ip_helpers: IpHelpers | UndefinedType = Undefined,
                static_routes: StaticRoutes | UndefinedType = Undefined,
                ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                vni_override: int | None | UndefinedType = Undefined,
                rt_override: str | None | UndefinedType = Undefined,
                rd_override: str | None | UndefinedType = Undefined,
                trunk_groups: TrunkGroups | UndefinedType = Undefined,
                evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                evpn_l3_multicast: EvpnL3Multicast | UndefinedType = Undefined,
                igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                vxlan: bool | UndefinedType = Undefined,
                spanning_tree_priority: int | None | UndefinedType = Undefined,
                mtu: int | None | UndefinedType = Undefined,
                ospf: Ospf | UndefinedType = Undefined,
                bgp: Bgp | UndefinedType = Undefined,
                raw_eos_cli: str | None | UndefinedType = Undefined,
                structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
            ) -> None:
                """
                SviProfilesItem.


                Subclass of AvdModel.

                Args:
                    profile: Profile name.
                    parent_profile:
                       Parent SVI profile name to apply.
                       svi_profiles can refer to another svi_profile to inherit settings
                       in up to two levels (svi -> svi_profile -> svi_parent_profile).
                    nodes:
                       Define node specific configuration, such as unique IP addresses.
                       Any keys set here will be merged
                       onto the SVI config, except `structured_config` keys which will replace the `structured_config` set
                       on SVI level.


                       Subclass of AvdIndexedList with `NodesItem` items. Primary key is `node` (`str`).
                    name: VLAN name.
                    enabled: Enable or disable interface.
                    description: SVI description. By default set to VLAN name.
                    arp_gratuitous_accept: Accept gratuitous ARP.
                    ip_address: IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node.
                    ipv6_address: IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node.
                    ipv6_enable: Explicitly enable/disable link-local IPv6 addressing.
                    ip_address_virtual:
                       IPv4_address/Mask.
                       IPv4 VXLAN Anycast IP address.
                       Conserves IP addresses in VXLAN deployments as it
                       doesn't require unique IP addresses on each node.
                    ipv6_address_virtuals:
                       IPv6 VXLAN Anycast IP addresses.
                       Conserves IPv6 addresses in VXLAN deployments as it doesn't require
                       unique IPv6 addresses on each node.


                       Subclass of AvdList with `str` items.
                    ip_address_virtual_secondaries:
                       Secondary IPv4 VXLAN Anycast IP addresses.

                       Subclass of AvdList with `str` items.
                    ip_virtual_router_addresses:
                       IPv4 VARP addresses.
                       Requires an IP address to be configured on the SVI.
                       If ip_address_virtual is
                       also set, ip_virtual_router_addresses will take precedence
                       _if_ there is an ip_address configured
                       for the node.


                       Subclass of AvdList with `str` items.
                    ipv6_virtual_router_addresses:
                       IPv6 VARP addresses.
                       Requires an IPv6 address to be configured on the SVI.
                       If ipv6_address_virtuals
                       is also set, ipv6_virtual_router_addresses will take precedence
                       _if_ there is an ipv6_address
                       configured for the node.


                       Subclass of AvdList with `str` items.
                    ipv4_acl_in:
                       Name of the IPv4 access-list to be assigned in the ingress direction.
                       The access-list must be
                       defined under `ipv4_acls` and supports substitution of the field "interface_ip".
                    ipv4_acl_out:
                       Name of the IPv4 Access-list to be assigned in the egress direction.
                       The access-list must be defined
                       under `ipv4_acls` and supports substitution of the field "interface_ip".
                    ip_helpers:
                       IP helper for DHCP relay.

                       Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                       `ip_helper` (`str`).
                    static_routes:
                       Static routes to be configured on every device where the SVI is configured.

                       Subclass of AvdList
                       with `StaticRoutesItem` items.
                    ipv6_static_routes:
                       IPv6 static routes to be configured on every device where the SVI is configured.

                       Subclass of
                       AvdList with `Ipv6StaticRoutesItem` items.
                    vni_override:
                       By default the VNI will be derived from "mac_vrf_vni_base".
                       The vni_override allows us to override
                       this value and statically define it (optional).
                    rt_override:
                       By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                       The rt_override allows us
                       to override this value and statically define it.
                       rt_override will default to vni_override if set.
                       rt_override supports two formats:
                         - A single number which will be used in the RT fields instead of
                       mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                         - A full RT string with colon
                       separator which will override the full RT.
                    rd_override:
                       By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                       The rt_override allows us
                       to override this value and statically define it.
                       rd_override will default to rt_override or
                       vni_override if set.

                       rd_override supports two formats:
                         - A single number which will be used in
                       the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                       - A full RD string with colon separator which will override the full RD.
                    trunk_groups: Subclass of AvdList with `str` items.
                    evpn_l2_multicast:
                       Explicitly enable or disable evpn_l2_multicast to override setting of
                       `<network_services_key>.[].evpn_l2_multicast.enabled`.
                       When evpn_l2_multicast.enabled is set to true
                       for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
                       overriding those individual settings.
                       Requires `evpn_multicast` to also be set to `true`.


                       Subclass
                       of AvdModel.
                    vxlan_flood_multicast: Subclass of AvdModel.
                    evpn_l3_multicast:
                       Explicitly enable or disable evpn_l3_multicast to override setting of
                       `<network_services_key>.[].evpn_l3_multicast.enabled` and
                       `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
                       Requires `evpn_multicast` to also be
                       set to `true`.


                       Subclass of AvdModel.
                    igmp_snooping_enabled: Enable or disable IGMP snooping (Enabled by default on EOS).
                    igmp_snooping_querier: Subclass of AvdModel.
                    vxlan: Extend this SVI over VXLAN.
                    spanning_tree_priority:
                       Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                       under node type settings.
                       The default priority for rapid-PVST is set under the node type settings
                       with `spanning_tree_priority` (default=32768).
                    mtu: Interface MTU.
                    ospf:
                       OSPF interface configuration.

                       Subclass of AvdModel.
                    bgp: Subclass of AvdModel.
                    raw_eos_cli: EOS CLI rendered directly on the VLAN interface in the final EOS configuration.
                    structured_config: Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    evpn_l2_multi_domain:
                       Explicitly extend SVI to remote EVPN domains.
                       Overrides
                       `<network_services_key>[].evpn_l2_multi_domain` and
                       `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
                       Not supported in conjunction with EVPN vlan
                       aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
                       or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.

                """

    class SviProfiles(AvdIndexedList[str, SviProfilesItem]):
        """Subclass of AvdIndexedList with `SviProfilesItem` items. Primary key is `profile` (`str`)."""

        _primary_key: ClassVar[str] = "profile"

    SviProfiles._item_type = SviProfilesItem

    class TrunkGroups(AvdModel):
        """Subclass of AvdModel."""

        class Mlag(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str, "default": "MLAG"}}
            name: str
            """Default value: `"MLAG"`"""

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined) -> None:
                    """
                    Mlag.


                    Subclass of AvdModel.

                    Args:
                        name: name

                    """

        class MlagL3(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str, "default": "MLAG"}}
            name: str
            """Default value: `"MLAG"`"""

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined) -> None:
                    """
                    MlagL3.


                    Subclass of AvdModel.

                    Args:
                        name: name

                    """

        class Uplink(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str, "default": "UPLINK"}}
            name: str
            """Default value: `"UPLINK"`"""

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined) -> None:
                    """
                    Uplink.


                    Subclass of AvdModel.

                    Args:
                        name: name

                    """

        _fields: ClassVar[dict] = {"mlag": {"type": Mlag}, "mlag_l3": {"type": MlagL3}, "uplink": {"type": Uplink}}
        mlag: Mlag
        """
        Trunk Group used for MLAG VLAN (Typically VLAN 4094).


        Subclass of AvdModel.
        """
        mlag_l3: MlagL3
        """
        Trunk Group used for MLAG L3 peering VLAN and for VRF L3 peering VLANs (Typically VLAN 4093).
        Subclass of AvdModel.
        """
        uplink: Uplink
        """
        Trunk Group used on L2 Leaf switches when "enable_trunk_groups" is set.


        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self, *, mlag: Mlag | UndefinedType = Undefined, mlag_l3: MlagL3 | UndefinedType = Undefined, uplink: Uplink | UndefinedType = Undefined
            ) -> None:
                """
                TrunkGroups.


                Subclass of AvdModel.

                Args:
                    mlag:
                       Trunk Group used for MLAG VLAN (Typically VLAN 4094).


                       Subclass of AvdModel.
                    mlag_l3:
                       Trunk Group used for MLAG L3 peering VLAN and for VRF L3 peering VLANs (Typically VLAN 4093).
                       Subclass of AvdModel.
                    uplink:
                       Trunk Group used on L2 Leaf switches when "enable_trunk_groups" is set.


                       Subclass of AvdModel.

                """

    class UnderlayMulticastAnycastRp(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"mode": {"type": str, "default": "pim"}}
        mode: Literal["pim", "msdp"]
        """Default value: `"pim"`"""

        if TYPE_CHECKING:

            def __init__(self, *, mode: Literal["pim", "msdp"] | UndefinedType = Undefined) -> None:
                """
                UnderlayMulticastAnycastRp.


                Subclass of AvdModel.

                Args:
                    mode: mode

                """

    class UnderlayMulticastRpsItem(AvdModel):
        """Subclass of AvdModel."""

        class NodesItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "loopback_number": {"type": int}, "description": {"type": str, "default": "PIM RP"}}
            name: str
            """Hostname."""
            loopback_number: int
            description: str
            """
            Interface description.

            Default value: `"PIM RP"`
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    loopback_number: int | UndefinedType = Undefined,
                    description: str | UndefinedType = Undefined,
                ) -> None:
                    """
                    NodesItem.


                    Subclass of AvdModel.

                    Args:
                        name: Hostname.
                        loopback_number: loopback_number
                        description: Interface description.

                    """

        class Nodes(AvdIndexedList[str, NodesItem]):
            """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Nodes._item_type = NodesItem

        class Groups(AvdList[str]):
            """Subclass of AvdList with `str` items."""

        Groups._item_type = str

        _fields: ClassVar[dict] = {"rp": {"type": str}, "nodes": {"type": Nodes}, "groups": {"type": Groups}, "access_list_name": {"type": str}}
        rp: str
        """RP IPv4 address."""
        nodes: Nodes
        """
        List of nodes where a Loopback interface with the RP address will be configured.


        Subclass of
        AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`).
        """
        groups: Groups
        """
        List of groups to associate with the RP address set in 'rp'.
        If access_list_name is set, a standard
        access-list will be configured matching these groups.
        Otherwise the groups are configured directly
        on the RP command.


        Subclass of AvdList with `str` items.
        """
        access_list_name: str | None
        """Name of standard Access-List."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                rp: str | UndefinedType = Undefined,
                nodes: Nodes | UndefinedType = Undefined,
                groups: Groups | UndefinedType = Undefined,
                access_list_name: str | None | UndefinedType = Undefined,
            ) -> None:
                """
                UnderlayMulticastRpsItem.


                Subclass of AvdModel.

                Args:
                    rp: RP IPv4 address.
                    nodes:
                       List of nodes where a Loopback interface with the RP address will be configured.


                       Subclass of
                       AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`).
                    groups:
                       List of groups to associate with the RP address set in 'rp'.
                       If access_list_name is set, a standard
                       access-list will be configured matching these groups.
                       Otherwise the groups are configured directly
                       on the RP command.


                       Subclass of AvdList with `str` items.
                    access_list_name: Name of standard Access-List.

                """

    class UnderlayMulticastRps(AvdIndexedList[str, UnderlayMulticastRpsItem]):
        """Subclass of AvdIndexedList with `UnderlayMulticastRpsItem` items. Primary key is `rp` (`str`)."""

        _primary_key: ClassVar[str] = "rp"

    UnderlayMulticastRps._item_type = UnderlayMulticastRpsItem

    class UnderlayOspfAuthentication(AvdModel):
        """Subclass of AvdModel."""

        class MessageDigestKeysItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "id": {"type": int},
                "hash_algorithm": {"type": str, "default": "sha512"},
                "key": {"type": str},
                "cleartext_key": {"type": str},
            }
            id: int
            hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
            """Default value: `"sha512"`"""
            key: str | None
            """
            Cleartext key.
            To protect the password at rest it is strongly recommended to make use of a vault or
            similar.
            """
            cleartext_key: str | None
            """
            Cleartext key for OSPF message-digest authentication
            To protect the password at rest it is strongly
            recommended to make use of a vault or similar.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    id: int | UndefinedType = Undefined,
                    hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                    key: str | None | UndefinedType = Undefined,
                    cleartext_key: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    MessageDigestKeysItem.


                    Subclass of AvdModel.

                    Args:
                        id: id
                        hash_algorithm: hash_algorithm
                        key:
                           Cleartext key.
                           To protect the password at rest it is strongly recommended to make use of a vault or
                           similar.
                        cleartext_key:
                           Cleartext key for OSPF message-digest authentication
                           To protect the password at rest it is strongly
                           recommended to make use of a vault or similar.

                    """

        class MessageDigestKeys(AvdIndexedList[int, MessageDigestKeysItem]):
            """Subclass of AvdIndexedList with `MessageDigestKeysItem` items. Primary key is `id` (`int`)."""

            _primary_key: ClassVar[str] = "id"

        MessageDigestKeys._item_type = MessageDigestKeysItem

        _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "message_digest_keys": {"type": MessageDigestKeys}}
        enabled: bool
        """Default value: `False`"""
        message_digest_keys: MessageDigestKeys
        """Subclass of AvdIndexedList with `MessageDigestKeysItem` items. Primary key is `id` (`int`)."""

        if TYPE_CHECKING:

            def __init__(self, *, enabled: bool | UndefinedType = Undefined, message_digest_keys: MessageDigestKeys | UndefinedType = Undefined) -> None:
                """
                UnderlayOspfAuthentication.


                Subclass of AvdModel.

                Args:
                    enabled: enabled
                    message_digest_keys: Subclass of AvdIndexedList with `MessageDigestKeysItem` items. Primary key is `id` (`int`).

                """

    class UplinkPtp(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
        enable: bool
        """Default value: `False`"""

        if TYPE_CHECKING:

            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                """
                UplinkPtp.


                Subclass of AvdModel.

                Args:
                    enable: enable

                """

    class WanCarriersItem(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {
            "name": {"type": str},
            "description": {"type": str},
            "path_group": {"type": str},
            "trusted": {"type": bool, "default": False},
        }
        name: str
        """Carrier name."""
        description: str | None
        """Additional information about the carrier for documentation purposes."""
        path_group: str
        """The path-group to which this carrier belongs."""
        trusted: bool
        """
        Set this to `true` to mark this carrier as "trusted".
        WAN interfaces require an inbound access-list
        to be set unless the carrier is "trusted".

        Default value: `False`
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                path_group: str | UndefinedType = Undefined,
                trusted: bool | UndefinedType = Undefined,
            ) -> None:
                """
                WanCarriersItem.


                Subclass of AvdModel.

                Args:
                    name: Carrier name.
                    description: Additional information about the carrier for documentation purposes.
                    path_group: The path-group to which this carrier belongs.
                    trusted:
                       Set this to `true` to mark this carrier as "trusted".
                       WAN interfaces require an inbound access-list
                       to be set unless the carrier is "trusted".

                """

    class WanCarriers(AvdIndexedList[str, WanCarriersItem]):
        """Subclass of AvdIndexedList with `WanCarriersItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    WanCarriers._item_type = WanCarriersItem

    class WanHa(AvdModel):
        """Subclass of AvdModel."""

        _fields: ClassVar[dict] = {"lan_ha_path_group_name": {"type": str, "default": "LAN_HA"}}
        lan_ha_path_group_name: str
        """
        When WAN HA is enabled for a site if `wan_mode: cv-pathfinder`, a default path-group is injected to
        form DPS tunnels over LAN.
        This key allows to overwrite the default LAN HA path-group name.

        Default value: `"LAN_HA"`
        """

        if TYPE_CHECKING:

            def __init__(self, *, lan_ha_path_group_name: str | UndefinedType = Undefined) -> None:
                """
                WanHa.


                Subclass of AvdModel.

                Args:
                    lan_ha_path_group_name:
                       When WAN HA is enabled for a site if `wan_mode: cv-pathfinder`, a default path-group is injected to
                       form DPS tunnels over LAN.
                       This key allows to overwrite the default LAN HA path-group name.

                """

    class WanIpsecProfiles(AvdModel):
        """Subclass of AvdModel."""

        class ControlPlane(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "ike_policy_name": {"type": str, "default": "CP-IKE-POLICY"},
                "sa_policy_name": {"type": str, "default": "CP-SA-POLICY"},
                "profile_name": {"type": str, "default": "CP-PROFILE"},
                "shared_key": {"type": str},
                "cleartext_shared_key": {"type": str},
            }
            ike_policy_name: str
            """
            Name of the IKE policy.

            Default value: `"CP-IKE-POLICY"`
            """
            sa_policy_name: str
            """
            Name of the SA policy.

            Default value: `"CP-SA-POLICY"`
            """
            profile_name: str
            """
            Name of the IPSec profile.

            Default value: `"CP-PROFILE"`
            """
            shared_key: str | None
            """
            Type 7 obfuscated IPSec shared key.
            Takes precedence over `cleartext_shared_key`.
            This variable is
            sensitive and SHOULD be configured using some vault mechanism.
            """
            cleartext_shared_key: str | None
            """
            Cleartext IPSec shared key.
            This variable is sensitive and SHOULD be configured using some vault
            mechanism.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ike_policy_name: str | UndefinedType = Undefined,
                    sa_policy_name: str | UndefinedType = Undefined,
                    profile_name: str | UndefinedType = Undefined,
                    shared_key: str | None | UndefinedType = Undefined,
                    cleartext_shared_key: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    ControlPlane.


                    Subclass of AvdModel.

                    Args:
                        ike_policy_name: Name of the IKE policy.
                        sa_policy_name: Name of the SA policy.
                        profile_name: Name of the IPSec profile.
                        shared_key:
                           Type 7 obfuscated IPSec shared key.
                           Takes precedence over `cleartext_shared_key`.
                           This variable is
                           sensitive and SHOULD be configured using some vault mechanism.
                        cleartext_shared_key:
                           Cleartext IPSec shared key.
                           This variable is sensitive and SHOULD be configured using some vault
                           mechanism.

                    """

        class DataPlane(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "ike_policy_name": {"type": str, "default": "DP-IKE-POLICY"},
                "sa_policy_name": {"type": str, "default": "DP-SA-POLICY"},
                "profile_name": {"type": str, "default": "DP-PROFILE"},
                "shared_key": {"type": str},
                "cleartext_shared_key": {"type": str},
            }
            ike_policy_name: str
            """
            Name of the IKE policy.

            Default value: `"DP-IKE-POLICY"`
            """
            sa_policy_name: str
            """
            Name of the SA policy.

            Default value: `"DP-SA-POLICY"`
            """
            profile_name: str
            """
            Name of the IPSec profile.

            Default value: `"DP-PROFILE"`
            """
            shared_key: str | None
            """
            Type 7 obfuscated IPSec shared key.
            Takes precedence over `cleartext_shared_key`.
            This variable is
            sensitive and SHOULD be configured using some vault mechanism.
            """
            cleartext_shared_key: str | None
            """
            Cleartext IPSec shared key.
            This variable is sensitive and SHOULD be configured using some vault
            mechanism.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ike_policy_name: str | UndefinedType = Undefined,
                    sa_policy_name: str | UndefinedType = Undefined,
                    profile_name: str | UndefinedType = Undefined,
                    shared_key: str | None | UndefinedType = Undefined,
                    cleartext_shared_key: str | None | UndefinedType = Undefined,
                ) -> None:
                    """
                    DataPlane.


                    Subclass of AvdModel.

                    Args:
                        ike_policy_name: Name of the IKE policy.
                        sa_policy_name: Name of the SA policy.
                        profile_name: Name of the IPSec profile.
                        shared_key:
                           Type 7 obfuscated IPSec shared key.
                           Takes precedence over `cleartext_shared_key`.
                           This variable is
                           sensitive and SHOULD be configured using some vault mechanism.
                        cleartext_shared_key:
                           Cleartext IPSec shared key.
                           This variable is sensitive and SHOULD be configured using some vault
                           mechanism.

                    """

        _fields: ClassVar[dict] = {"control_plane": {"type": ControlPlane}, "data_plane": {"type": DataPlane}}
        control_plane: ControlPlane
        """Subclass of AvdModel."""
        data_plane: DataPlane
        """
        If `data_plane` is not defined, `control_plane` information is used for both.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(self, *, control_plane: ControlPlane | UndefinedType = Undefined, data_plane: DataPlane | UndefinedType = Undefined) -> None:
                """
                WanIpsecProfiles.


                Subclass of AvdModel.

                Args:
                    control_plane: Subclass of AvdModel.
                    data_plane:
                       If `data_plane` is not defined, `control_plane` information is used for both.

                       Subclass of AvdModel.

                """

    class WanPathGroupsItem(AvdModel):
        """Subclass of AvdModel."""

        class Ipsec(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"dynamic_peers": {"type": bool, "default": True}, "static_peers": {"type": bool, "default": True}}
            dynamic_peers: bool
            """
            Enable IPSec for dynamic peers.

            Default value: `True`
            """
            static_peers: bool
            """
            Enable IPSec for static peers.

            Default value: `True`
            """

            if TYPE_CHECKING:

                def __init__(self, *, dynamic_peers: bool | UndefinedType = Undefined, static_peers: bool | UndefinedType = Undefined) -> None:
                    """
                    Ipsec.


                    Subclass of AvdModel.

                    Args:
                        dynamic_peers: Enable IPSec for dynamic peers.
                        static_peers: Enable IPSec for static peers.

                    """

        class ImportPathGroupsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"remote": {"type": str}, "local": {"type": str}}
            remote: str | None
            """Remote path-group to import."""
            local: str | None
            """Optional, if not set, the path-group `name` is used as local."""

            if TYPE_CHECKING:

                def __init__(self, *, remote: str | None | UndefinedType = Undefined, local: str | None | UndefinedType = Undefined) -> None:
                    """
                    ImportPathGroupsItem.


                    Subclass of AvdModel.

                    Args:
                        remote: Remote path-group to import.
                        local: Optional, if not set, the path-group `name` is used as local.

                    """

        class ImportPathGroups(AvdList[ImportPathGroupsItem]):
            """Subclass of AvdList with `ImportPathGroupsItem` items."""

        ImportPathGroups._item_type = ImportPathGroupsItem

        class DpsKeepalive(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"interval": {"type": str}, "failure_threshold": {"type": int, "default": 5}}
            interval: str | None
            """
            Interval in milliseconds. Valid values are 50-60000 | "auto".

            When auto, the interval and
            failure_threshold are automatically determined based on
            path state.
            """
            failure_threshold: int
            """
            Failure threshold in number of lost keep-alive messages.

            Default value: `5`
            """

            if TYPE_CHECKING:

                def __init__(self, *, interval: str | None | UndefinedType = Undefined, failure_threshold: int | UndefinedType = Undefined) -> None:
                    """
                    DpsKeepalive.


                    Subclass of AvdModel.

                    Args:
                        interval:
                           Interval in milliseconds. Valid values are 50-60000 | "auto".

                           When auto, the interval and
                           failure_threshold are automatically determined based on
                           path state.
                        failure_threshold: Failure threshold in number of lost keep-alive messages.

                    """

        _fields: ClassVar[dict] = {
            "name": {"type": str},
            "id": {"type": int},
            "description": {"type": str},
            "ipsec": {"type": Ipsec},
            "import_path_groups": {"type": ImportPathGroups},
            "default_preference": {"type": str, "default": "preferred"},
            "excluded_from_default_policy": {"type": bool, "default": False},
            "dps_keepalive": {"type": DpsKeepalive},
        }
        name: str
        """Path-group name."""
        id: int
        """
        Path-group id.
        Required until an auto ID algorithm is implemented.
        """
        description: str | None
        """Additional information about the path-group for documentation purposes."""
        ipsec: Ipsec
        """
        Configuration of IPSec at the path-group level.

        Subclass of AvdModel.
        """
        import_path_groups: ImportPathGroups
        """
        List of path-groups to import in this path-group.

        Subclass of AvdList with `ImportPathGroupsItem`
        items.
        """
        default_preference: str
        """
        Preference value used when a preference is not given for a path-group in the
        `wan_virtual_topologies.policies` input or when
        the path-group is used in an auto generated policy
        except if `excluded_from_default_policy` is set to `true.

        Valid values are 1-65535 | "preferred" |
        "alternate".

        `preferred` is converted to priority 1.
        `alternate` is converted to priority 2.

        Default value: `"preferred"`
        """
        excluded_from_default_policy: bool
        """
        When set to `true`, the path-group is excluded from AVD auto generated policies.

        Default value: `False`
        """
        dps_keepalive: DpsKeepalive
        """
        Period between the transmission of consecutive keepalive messages, and failure threshold.

        Subclass
        of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                name: str | UndefinedType = Undefined,
                id: int | UndefinedType = Undefined,
                description: str | None | UndefinedType = Undefined,
                ipsec: Ipsec | UndefinedType = Undefined,
                import_path_groups: ImportPathGroups | UndefinedType = Undefined,
                default_preference: str | UndefinedType = Undefined,
                excluded_from_default_policy: bool | UndefinedType = Undefined,
                dps_keepalive: DpsKeepalive | UndefinedType = Undefined,
            ) -> None:
                """
                WanPathGroupsItem.


                Subclass of AvdModel.

                Args:
                    name: Path-group name.
                    id:
                       Path-group id.
                       Required until an auto ID algorithm is implemented.
                    description: Additional information about the path-group for documentation purposes.
                    ipsec:
                       Configuration of IPSec at the path-group level.

                       Subclass of AvdModel.
                    import_path_groups:
                       List of path-groups to import in this path-group.

                       Subclass of AvdList with `ImportPathGroupsItem`
                       items.
                    default_preference:
                       Preference value used when a preference is not given for a path-group in the
                       `wan_virtual_topologies.policies` input or when
                       the path-group is used in an auto generated policy
                       except if `excluded_from_default_policy` is set to `true.

                       Valid values are 1-65535 | "preferred" |
                       "alternate".

                       `preferred` is converted to priority 1.
                       `alternate` is converted to priority 2.
                    excluded_from_default_policy: When set to `true`, the path-group is excluded from AVD auto generated policies.
                    dps_keepalive:
                       Period between the transmission of consecutive keepalive messages, and failure threshold.

                       Subclass
                       of AvdModel.

                """

    class WanPathGroups(AvdIndexedList[str, WanPathGroupsItem]):
        """Subclass of AvdIndexedList with `WanPathGroupsItem` items. Primary key is `name` (`str`)."""

        _primary_key: ClassVar[str] = "name"

    WanPathGroups._item_type = WanPathGroupsItem

    class WanRouteServersItem(AvdModel):
        """Subclass of AvdModel."""

        class PathGroupsItem(AvdModel):
            """Subclass of AvdModel."""

            class InterfacesItem(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"name": {"type": str}, "public_ip": {"type": str}}
                name: str
                """Interface name."""
                public_ip: str | None
                """The public IPv4 address (without mask) of the Route Reflector for this path-group."""

                if TYPE_CHECKING:

                    def __init__(self, *, name: str | UndefinedType = Undefined, public_ip: str | None | UndefinedType = Undefined) -> None:
                        """
                        InterfacesItem.


                        Subclass of AvdModel.

                        Args:
                            name: Interface name.
                            public_ip: The public IPv4 address (without mask) of the Route Reflector for this path-group.

                        """

            class Interfaces(AvdIndexedList[str, InterfacesItem]):
                """Subclass of AvdIndexedList with `InterfacesItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            Interfaces._item_type = InterfacesItem

            _fields: ClassVar[dict] = {"name": {"type": str}, "interfaces": {"type": Interfaces}}
            name: str
            """Path-group name."""
            interfaces: Interfaces
            """Subclass of AvdIndexedList with `InterfacesItem` items. Primary key is `name` (`str`)."""

            if TYPE_CHECKING:

                def __init__(self, *, name: str | UndefinedType = Undefined, interfaces: Interfaces | UndefinedType = Undefined) -> None:
                    """
                    PathGroupsItem.


                    Subclass of AvdModel.

                    Args:
                        name: Path-group name.
                        interfaces: Subclass of AvdIndexedList with `InterfacesItem` items. Primary key is `name` (`str`).

                    """

        class PathGroups(AvdIndexedList[str, PathGroupsItem]):
            """Subclass of AvdIndexedList with `PathGroupsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        PathGroups._item_type = PathGroupsItem

        _fields: ClassVar[dict] = {"hostname": {"type": str}, "vtep_ip": {"type": str}, "path_groups": {"type": PathGroups}}
        hostname: str
        """Route-Reflector hostname."""
        vtep_ip: str | None
        """Route-Reflector VTEP IP Address. This is usually the IP address under `interface Dps1`."""
        path_groups: PathGroups
        """
        Path-groups through which the Route Reflector/Pathfinder is reached.

        Subclass of AvdIndexedList
        with `PathGroupsItem` items. Primary key is `name` (`str`).
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                hostname: str | UndefinedType = Undefined,
                vtep_ip: str | None | UndefinedType = Undefined,
                path_groups: PathGroups | UndefinedType = Undefined,
            ) -> None:
                """
                WanRouteServersItem.


                Subclass of AvdModel.

                Args:
                    hostname: Route-Reflector hostname.
                    vtep_ip: Route-Reflector VTEP IP Address. This is usually the IP address under `interface Dps1`.
                    path_groups:
                       Path-groups through which the Route Reflector/Pathfinder is reached.

                       Subclass of AvdIndexedList
                       with `PathGroupsItem` items. Primary key is `name` (`str`).

                """

    class WanRouteServers(AvdIndexedList[str, WanRouteServersItem]):
        """Subclass of AvdIndexedList with `WanRouteServersItem` items. Primary key is `hostname` (`str`)."""

        _primary_key: ClassVar[str] = "hostname"

    WanRouteServers._item_type = WanRouteServersItem

    class WanVirtualTopologies(AvdModel):
        """Subclass of AvdModel."""

        class VrfsItem(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"name": {"type": str}, "policy": {"type": str, "default": "DEFAULT-POLICY"}, "wan_vni": {"type": int}}
            name: str
            """VRF name."""
            policy: str
            """
            Name of the policy to apply to this VRF.
            AVD will auto generate a default policy DEFAULT-POLICY and
            apply it to the VRF(s)
            where the `policy` key is not set.
            It is possible to overwrite the default
            policy for all VRFs using it
            by redefining it in the `wan_virtual_topologies.policies` list using
            the
            default name `DEFAULT-POLICY`.

            Default value: `"DEFAULT-POLICY"`
            """
            wan_vni: int
            """
            Required for VRFs carried over AutoVPN or CV Pathfinder WAN.

            A VRF can have different VNIs between
            the Datacenters and the WAN.
            Note that if no VRF default is configured for WAN, AVD will
            automatically inject the VRF default with
            `wan_vni` set to `1`.
            In addition either `vrf_id` or
            `vrf_vni` must be set to enforce consistent route-targets across domains.
            """

            if TYPE_CHECKING:

                def __init__(
                    self, *, name: str | UndefinedType = Undefined, policy: str | UndefinedType = Undefined, wan_vni: int | UndefinedType = Undefined
                ) -> None:
                    """
                    VrfsItem.


                    Subclass of AvdModel.

                    Args:
                        name: VRF name.
                        policy:
                           Name of the policy to apply to this VRF.
                           AVD will auto generate a default policy DEFAULT-POLICY and
                           apply it to the VRF(s)
                           where the `policy` key is not set.
                           It is possible to overwrite the default
                           policy for all VRFs using it
                           by redefining it in the `wan_virtual_topologies.policies` list using
                           the
                           default name `DEFAULT-POLICY`.
                        wan_vni:
                           Required for VRFs carried over AutoVPN or CV Pathfinder WAN.

                           A VRF can have different VNIs between
                           the Datacenters and the WAN.
                           Note that if no VRF default is configured for WAN, AVD will
                           automatically inject the VRF default with
                           `wan_vni` set to `1`.
                           In addition either `vrf_id` or
                           `vrf_vni` must be set to enforce consistent route-targets across domains.

                    """

        class Vrfs(AvdIndexedList[str, VrfsItem]):
            """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Vrfs._item_type = VrfsItem

        class ControlPlaneVirtualTopology(AvdModel):
            """Subclass of AvdModel."""

            class Constraints(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"jitter": {"type": int}, "latency": {"type": int}, "loss_rate": {"type": str}}
                jitter: int | None
                """Jitter requirement for this load balance policy in milliseconds."""
                latency: int | None
                """One way delay requirement for this load balance policy in milliseconds."""
                loss_rate: str | None
                """
                Loss Rate requirement in percentage for this load balance policy.
                Value between 0.00 and 100.00.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        jitter: int | None | UndefinedType = Undefined,
                        latency: int | None | UndefinedType = Undefined,
                        loss_rate: str | None | UndefinedType = Undefined,
                    ) -> None:
                        """
                        Constraints.


                        Subclass of AvdModel.

                        Args:
                            jitter: Jitter requirement for this load balance policy in milliseconds.
                            latency: One way delay requirement for this load balance policy in milliseconds.
                            loss_rate:
                               Loss Rate requirement in percentage for this load balance policy.
                               Value between 0.00 and 100.00.

                        """

            class PathGroupsItem(AvdModel):
                """Subclass of AvdModel."""

                class Names(AvdList[str]):
                    """Subclass of AvdList with `str` items."""

                Names._item_type = str

                _fields: ClassVar[dict] = {"names": {"type": Names}, "preference": {"type": str}}
                names: Names
                """
                List of path-group names.

                Subclass of AvdList with `str` items.
                """
                preference: str | None
                """
                Valid values are 1-65535 | "preferred" | "alternate".

                "preferred" is converted to priority 1.
                "alternate" is converted to priority 2.

                If not set, each path-group in `names` will be attributed
                its `default_preference`.
                """

                if TYPE_CHECKING:

                    def __init__(self, *, names: Names | UndefinedType = Undefined, preference: str | None | UndefinedType = Undefined) -> None:
                        """
                        PathGroupsItem.


                        Subclass of AvdModel.

                        Args:
                            names:
                               List of path-group names.

                               Subclass of AvdList with `str` items.
                            preference:
                               Valid values are 1-65535 | "preferred" | "alternate".

                               "preferred" is converted to priority 1.
                               "alternate" is converted to priority 2.

                               If not set, each path-group in `names` will be attributed
                               its `default_preference`.

                        """

            class PathGroups(AvdList[PathGroupsItem]):
                """Subclass of AvdList with `PathGroupsItem` items."""

            PathGroups._item_type = PathGroupsItem

            class InternetExit(AvdModel):
                """Subclass of AvdModel."""

                _fields: ClassVar[dict] = {"policy": {"type": str}}
                policy: str | None
                """
                PREVIEW: This key is in preview mode.

                Internet-exit policy name associated with this
                virtual_topology.
                The policy must be defined under `cv_pathfinder_internet_exit_policies`.
                """

                if TYPE_CHECKING:

                    def __init__(self, *, policy: str | None | UndefinedType = Undefined) -> None:
                        """
                        InternetExit.


                        Subclass of AvdModel.

                        Args:
                            policy:
                               PREVIEW: This key is in preview mode.

                               Internet-exit policy name associated with this
                               virtual_topology.
                               The policy must be defined under `cv_pathfinder_internet_exit_policies`.

                        """

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "application_profile": {"type": str, "default": "APP-PROFILE-CONTROL-PLANE"},
                "traffic_class": {"type": int},
                "dscp": {"type": int},
                "lowest_hop_count": {"type": bool},
                "constraints": {"type": Constraints},
                "outlier_elimination": {"type": EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination},
                "metric_order": {"type": EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder},
                "path_groups": {"type": PathGroups},
                "internet_exit": {"type": InternetExit},
            }
            name: str | None
            """Optional name, if not set `CONTROL-PLANE-PROFILE` is used."""
            application_profile: str
            """
            The application profile to use for control plane traffic.

            The application profile should be defined
            under `application_classification.application_profiles`.
            If not defined AVD will auto generate an
            application profile using the provided name or the default value.

            If not overwritten elsewhere, the
            application profile is generated matching one application matching the control plane traffic either
            sourced from or destined to the WAN route servers.

            Default value: `"APP-PROFILE-CONTROL-PLANE"`
            """
            traffic_class: int | None
            """Set traffic-class for matched traffic."""
            dscp: int | None
            """Set DSCP for matched traffic."""
            lowest_hop_count: bool | None
            """
            Prefer paths with lowest hop-count.
            Only applicable for `wan_mode: "cv-pathfinder"`.
            """
            constraints: Constraints
            """Subclass of AvdModel."""
            outlier_elimination: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination
            """AVT path outlier elimination."""
            metric_order: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder
            """Metric order to be used for path comparison."""
            path_groups: PathGroups
            """Subclass of AvdList with `PathGroupsItem` items."""
            internet_exit: InternetExit
            """Subclass of AvdModel."""

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | None | UndefinedType = Undefined,
                    application_profile: str | UndefinedType = Undefined,
                    traffic_class: int | None | UndefinedType = Undefined,
                    dscp: int | None | UndefinedType = Undefined,
                    lowest_hop_count: bool | None | UndefinedType = Undefined,
                    constraints: Constraints | UndefinedType = Undefined,
                    outlier_elimination: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination | UndefinedType = Undefined,
                    metric_order: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder | UndefinedType = Undefined,
                    path_groups: PathGroups | UndefinedType = Undefined,
                    internet_exit: InternetExit | UndefinedType = Undefined,
                ) -> None:
                    """
                    ControlPlaneVirtualTopology.


                    Subclass of AvdModel.

                    Args:
                        name: Optional name, if not set `CONTROL-PLANE-PROFILE` is used.
                        application_profile:
                           The application profile to use for control plane traffic.

                           The application profile should be defined
                           under `application_classification.application_profiles`.
                           If not defined AVD will auto generate an
                           application profile using the provided name or the default value.

                           If not overwritten elsewhere, the
                           application profile is generated matching one application matching the control plane traffic either
                           sourced from or destined to the WAN route servers.
                        traffic_class: Set traffic-class for matched traffic.
                        dscp: Set DSCP for matched traffic.
                        lowest_hop_count:
                           Prefer paths with lowest hop-count.
                           Only applicable for `wan_mode: "cv-pathfinder"`.
                        constraints: Subclass of AvdModel.
                        outlier_elimination: AVT path outlier elimination.
                        metric_order: Metric order to be used for path comparison.
                        path_groups: Subclass of AvdList with `PathGroupsItem` items.
                        internet_exit: Subclass of AvdModel.

                    """

        class PoliciesItem(AvdModel):
            """Subclass of AvdModel."""

            class ApplicationVirtualTopologiesItem(AvdModel):
                """Subclass of AvdModel."""

                class Constraints(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"jitter": {"type": int}, "latency": {"type": int}, "loss_rate": {"type": str}}
                    jitter: int | None
                    """Jitter requirement for this load balance policy in milliseconds."""
                    latency: int | None
                    """One way delay requirement for this load balance policy in milliseconds."""
                    loss_rate: str | None
                    """
                    Loss Rate requirement in percentage for this load balance policy.
                    Value between 0.00 and 100.00.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            jitter: int | None | UndefinedType = Undefined,
                            latency: int | None | UndefinedType = Undefined,
                            loss_rate: str | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            Constraints.


                            Subclass of AvdModel.

                            Args:
                                jitter: Jitter requirement for this load balance policy in milliseconds.
                                latency: One way delay requirement for this load balance policy in milliseconds.
                                loss_rate:
                                   Loss Rate requirement in percentage for this load balance policy.
                                   Value between 0.00 and 100.00.

                            """

                class PathGroupsItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Names(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Names._item_type = str

                    _fields: ClassVar[dict] = {"names": {"type": Names}, "preference": {"type": str}}
                    names: Names
                    """
                    List of path-group names.

                    Subclass of AvdList with `str` items.
                    """
                    preference: str | None
                    """
                    Valid values are 1-65535 | "preferred" | "alternate".

                    "preferred" is converted to priority 1.
                    "alternate" is converted to priority 2.

                    If not set, each path-group in `names` will be attributed
                    its `default_preference`.
                    """

                    if TYPE_CHECKING:

                        def __init__(self, *, names: Names | UndefinedType = Undefined, preference: str | None | UndefinedType = Undefined) -> None:
                            """
                            PathGroupsItem.


                            Subclass of AvdModel.

                            Args:
                                names:
                                   List of path-group names.

                                   Subclass of AvdList with `str` items.
                                preference:
                                   Valid values are 1-65535 | "preferred" | "alternate".

                                   "preferred" is converted to priority 1.
                                   "alternate" is converted to priority 2.

                                   If not set, each path-group in `names` will be attributed
                                   its `default_preference`.

                            """

                class PathGroups(AvdList[PathGroupsItem]):
                    """Subclass of AvdList with `PathGroupsItem` items."""

                PathGroups._item_type = PathGroupsItem

                class InternetExit(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"policy": {"type": str}}
                    policy: str | None
                    """
                    PREVIEW: This key is in preview mode.

                    Internet-exit policy name associated with this
                    virtual_topology.
                    The policy must be defined under `cv_pathfinder_internet_exit_policies`.
                    """

                    if TYPE_CHECKING:

                        def __init__(self, *, policy: str | None | UndefinedType = Undefined) -> None:
                            """
                            InternetExit.


                            Subclass of AvdModel.

                            Args:
                                policy:
                                   PREVIEW: This key is in preview mode.

                                   Internet-exit policy name associated with this
                                   virtual_topology.
                                   The policy must be defined under `cv_pathfinder_internet_exit_policies`.

                            """

                _fields: ClassVar[dict] = {
                    "application_profile": {"type": str},
                    "name": {"type": str},
                    "id": {"type": int},
                    "traffic_class": {"type": int},
                    "dscp": {"type": int},
                    "lowest_hop_count": {"type": bool},
                    "constraints": {"type": Constraints},
                    "outlier_elimination": {"type": EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination},
                    "metric_order": {"type": EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder},
                    "path_groups": {"type": PathGroups},
                    "internet_exit": {"type": InternetExit},
                }
                application_profile: str
                """
                The application profile to use for this virtual topology. It must be a defined
                `application_classification.application_profile`.
                """
                name: str | None
                """Optional name, if not set `<policy_name>-<application_profile>` is used."""
                id: int | None
                """
                ID of the AVT in each VRFs. ID must be unique across all virtual topologies in a policy.
                ID 1 is
                reserved for the default_virtual_toplogy.
                ID 254 is reserved for the control_plane_virtual_topology.
                `id` is required when `wan_mode` is 'cv-pathfinder'.
                """
                traffic_class: int | None
                """Set traffic-class for matched traffic."""
                dscp: int | None
                """Set DSCP for matched traffic."""
                lowest_hop_count: bool | None
                """
                Prefer paths with lowest hop-count.
                Only applicable for `wan_mode: "cv-pathfinder"`.
                """
                constraints: Constraints
                """Subclass of AvdModel."""
                outlier_elimination: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination
                """AVT path outlier elimination."""
                metric_order: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder
                """Metric order to be used for path comparison."""
                path_groups: PathGroups
                """Subclass of AvdList with `PathGroupsItem` items."""
                internet_exit: InternetExit
                """Subclass of AvdModel."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        application_profile: str | UndefinedType = Undefined,
                        name: str | None | UndefinedType = Undefined,
                        id: int | None | UndefinedType = Undefined,
                        traffic_class: int | None | UndefinedType = Undefined,
                        dscp: int | None | UndefinedType = Undefined,
                        lowest_hop_count: bool | None | UndefinedType = Undefined,
                        constraints: Constraints | UndefinedType = Undefined,
                        outlier_elimination: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination | UndefinedType = Undefined,
                        metric_order: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder | UndefinedType = Undefined,
                        path_groups: PathGroups | UndefinedType = Undefined,
                        internet_exit: InternetExit | UndefinedType = Undefined,
                    ) -> None:
                        """
                        ApplicationVirtualTopologiesItem.


                        Subclass of AvdModel.

                        Args:
                            application_profile:
                               The application profile to use for this virtual topology. It must be a defined
                               `application_classification.application_profile`.
                            name: Optional name, if not set `<policy_name>-<application_profile>` is used.
                            id:
                               ID of the AVT in each VRFs. ID must be unique across all virtual topologies in a policy.
                               ID 1 is
                               reserved for the default_virtual_toplogy.
                               ID 254 is reserved for the control_plane_virtual_topology.
                               `id` is required when `wan_mode` is 'cv-pathfinder'.
                            traffic_class: Set traffic-class for matched traffic.
                            dscp: Set DSCP for matched traffic.
                            lowest_hop_count:
                               Prefer paths with lowest hop-count.
                               Only applicable for `wan_mode: "cv-pathfinder"`.
                            constraints: Subclass of AvdModel.
                            outlier_elimination: AVT path outlier elimination.
                            metric_order: Metric order to be used for path comparison.
                            path_groups: Subclass of AvdList with `PathGroupsItem` items.
                            internet_exit: Subclass of AvdModel.

                        """

            class ApplicationVirtualTopologies(AvdIndexedList[str, ApplicationVirtualTopologiesItem]):
                """
                Subclass of AvdIndexedList with `ApplicationVirtualTopologiesItem` items. Primary key is
                `application_profile` (`str`).
                """

                _primary_key: ClassVar[str] = "application_profile"

            ApplicationVirtualTopologies._item_type = ApplicationVirtualTopologiesItem

            class DefaultVirtualTopology(AvdModel):
                """Subclass of AvdModel."""

                class Constraints(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"jitter": {"type": int}, "latency": {"type": int}, "loss_rate": {"type": str}}
                    jitter: int | None
                    """Jitter requirement for this load balance policy in milliseconds."""
                    latency: int | None
                    """One way delay requirement for this load balance policy in milliseconds."""
                    loss_rate: str | None
                    """
                    Loss Rate requirement in percentage for this load balance policy.
                    Value between 0.00 and 100.00.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            jitter: int | None | UndefinedType = Undefined,
                            latency: int | None | UndefinedType = Undefined,
                            loss_rate: str | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            Constraints.


                            Subclass of AvdModel.

                            Args:
                                jitter: Jitter requirement for this load balance policy in milliseconds.
                                latency: One way delay requirement for this load balance policy in milliseconds.
                                loss_rate:
                                   Loss Rate requirement in percentage for this load balance policy.
                                   Value between 0.00 and 100.00.

                            """

                class PathGroupsItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Names(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Names._item_type = str

                    _fields: ClassVar[dict] = {"names": {"type": Names}, "preference": {"type": str}}
                    names: Names
                    """
                    List of path-group names.

                    Subclass of AvdList with `str` items.
                    """
                    preference: str | None
                    """
                    Valid values are 1-65535 | "preferred" | "alternate".

                    "preferred" is converted to priority 1.
                    "alternate" is converted to priority 2.

                    If not set, each path-group in `names` will be attributed
                    its `default_preference`.
                    """

                    if TYPE_CHECKING:

                        def __init__(self, *, names: Names | UndefinedType = Undefined, preference: str | None | UndefinedType = Undefined) -> None:
                            """
                            PathGroupsItem.


                            Subclass of AvdModel.

                            Args:
                                names:
                                   List of path-group names.

                                   Subclass of AvdList with `str` items.
                                preference:
                                   Valid values are 1-65535 | "preferred" | "alternate".

                                   "preferred" is converted to priority 1.
                                   "alternate" is converted to priority 2.

                                   If not set, each path-group in `names` will be attributed
                                   its `default_preference`.

                            """

                class PathGroups(AvdList[PathGroupsItem]):
                    """Subclass of AvdList with `PathGroupsItem` items."""

                PathGroups._item_type = PathGroupsItem

                class InternetExit(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"policy": {"type": str}}
                    policy: str | None
                    """
                    PREVIEW: This key is in preview mode.

                    Internet-exit policy name associated with this
                    virtual_topology.
                    The policy must be defined under `cv_pathfinder_internet_exit_policies`.
                    """

                    if TYPE_CHECKING:

                        def __init__(self, *, policy: str | None | UndefinedType = Undefined) -> None:
                            """
                            InternetExit.


                            Subclass of AvdModel.

                            Args:
                                policy:
                                   PREVIEW: This key is in preview mode.

                                   Internet-exit policy name associated with this
                                   virtual_topology.
                                   The policy must be defined under `cv_pathfinder_internet_exit_policies`.

                            """

                _fields: ClassVar[dict] = {
                    "name": {"type": str},
                    "drop_unmatched": {"type": bool, "default": False},
                    "traffic_class": {"type": int},
                    "dscp": {"type": int},
                    "lowest_hop_count": {"type": bool},
                    "constraints": {"type": Constraints},
                    "outlier_elimination": {"type": EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination},
                    "metric_order": {"type": EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder},
                    "path_groups": {"type": PathGroups},
                    "internet_exit": {"type": InternetExit},
                }
                name: str | None
                """Optional name, if not set `<policy_name>-DEFAULT` is used."""
                drop_unmatched: bool
                """
                When set, no `catch-all` match is configured for the policy and unmatched traffic is dropped.

                Default value: `False`
                """
                traffic_class: int | None
                """Set traffic-class for matched traffic."""
                dscp: int | None
                """Set DSCP for matched traffic."""
                lowest_hop_count: bool | None
                """
                Prefer paths with lowest hop-count.
                Only applicable for `wan_mode: "cv-pathfinder"`.
                """
                constraints: Constraints
                """Subclass of AvdModel."""
                outlier_elimination: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination
                """AVT path outlier elimination."""
                metric_order: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder
                """Metric order to be used for path comparison."""
                path_groups: PathGroups
                """Subclass of AvdList with `PathGroupsItem` items."""
                internet_exit: InternetExit
                """Subclass of AvdModel."""

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        name: str | None | UndefinedType = Undefined,
                        drop_unmatched: bool | UndefinedType = Undefined,
                        traffic_class: int | None | UndefinedType = Undefined,
                        dscp: int | None | UndefinedType = Undefined,
                        lowest_hop_count: bool | None | UndefinedType = Undefined,
                        constraints: Constraints | UndefinedType = Undefined,
                        outlier_elimination: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.OutlierElimination | UndefinedType = Undefined,
                        metric_order: EosCliConfigGen.RouterAdaptiveVirtualTopology.ProfilesItem.MetricOrder | UndefinedType = Undefined,
                        path_groups: PathGroups | UndefinedType = Undefined,
                        internet_exit: InternetExit | UndefinedType = Undefined,
                    ) -> None:
                        """
                        DefaultVirtualTopology.


                        Subclass of AvdModel.

                        Args:
                            name: Optional name, if not set `<policy_name>-DEFAULT` is used.
                            drop_unmatched: When set, no `catch-all` match is configured for the policy and unmatched traffic is dropped.
                            traffic_class: Set traffic-class for matched traffic.
                            dscp: Set DSCP for matched traffic.
                            lowest_hop_count:
                               Prefer paths with lowest hop-count.
                               Only applicable for `wan_mode: "cv-pathfinder"`.
                            constraints: Subclass of AvdModel.
                            outlier_elimination: AVT path outlier elimination.
                            metric_order: Metric order to be used for path comparison.
                            path_groups: Subclass of AvdList with `PathGroupsItem` items.
                            internet_exit: Subclass of AvdModel.

                        """

            _fields: ClassVar[dict] = {
                "name": {"type": str},
                "application_virtual_topologies": {"type": ApplicationVirtualTopologies},
                "default_virtual_topology": {"type": DefaultVirtualTopology},
            }
            name: str
            """Name of the AVT policy."""
            application_virtual_topologies: ApplicationVirtualTopologies
            """
            List of application specific virtual topologies.

            Subclass of AvdIndexedList with
            `ApplicationVirtualTopologiesItem` items. Primary key is `application_profile` (`str`).
            """
            default_virtual_topology: DefaultVirtualTopology
            """
            Default match for the policy.
            If no default match should be configured, set `drop_unmatched` to
            `true`.
            Otherwise, in CV Pathfinder mode, a default AVT profile will be configured with ID 1.
            Subclass of AvdModel.
            """

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    name: str | UndefinedType = Undefined,
                    application_virtual_topologies: ApplicationVirtualTopologies | UndefinedType = Undefined,
                    default_virtual_topology: DefaultVirtualTopology | UndefinedType = Undefined,
                ) -> None:
                    """
                    PoliciesItem.


                    Subclass of AvdModel.

                    Args:
                        name: Name of the AVT policy.
                        application_virtual_topologies:
                           List of application specific virtual topologies.

                           Subclass of AvdIndexedList with
                           `ApplicationVirtualTopologiesItem` items. Primary key is `application_profile` (`str`).
                        default_virtual_topology:
                           Default match for the policy.
                           If no default match should be configured, set `drop_unmatched` to
                           `true`.
                           Otherwise, in CV Pathfinder mode, a default AVT profile will be configured with ID 1.
                           Subclass of AvdModel.

                    """

        class Policies(AvdIndexedList[str, PoliciesItem]):
            """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

            _primary_key: ClassVar[str] = "name"

        Policies._item_type = PoliciesItem

        _fields: ClassVar[dict] = {
            "vrfs": {"type": Vrfs},
            "control_plane_virtual_topology": {"type": ControlPlaneVirtualTopology},
            "policies": {"type": Policies},
        }
        vrfs: Vrfs
        """
        Map a VRF that exists in network_services to an AVT policy.

        Subclass of AvdIndexedList with
        `VrfsItem` items. Primary key is `name` (`str`).
        """
        control_plane_virtual_topology: ControlPlaneVirtualTopology
        """
        Always injected into the default VRF policy as the first entry.

        By default, if no path-groups are
        specified, all locally available path-groups
        are used in the generated load-balance policy.
        ID is
        hardcoded to 254 for the AVT profile in CV Pathfinder mode.

        Subclass of AvdModel.
        """
        policies: Policies
        """
        List of virtual topologies policies.

        For AutoVPN, each item in the list creates:
          * one policy
        with:
              * one `match` entry per `application_virtual_topologies` item
                they are indexed
        using `10 * <list_index>` where `list_index` starts at `1`.
              * one `default-match`
          * one
        load-balance policy per `application_virtual_topologies` and one for the `default_virtual_topology`.
        * if the policy is associated with the default VRF, a special control-plane rule is injected
            in
        the policy with index `1` referring to a control-plane load-balance policy as defined under
        `control_plane_virtual_topology` or if not set, the default one.

        For CV Pathfinder, each item in
        the list creates:
          * one policy with:
              * one `match` entry per
        `application_virtual_topologies` item ordered as in the data.
              * one last match entry for the
        `default` application-profile using `default_virtual_topology` information.
          * one profile per
        `application_virtual_topologies` item.
          * one profile for the `default_virtual_topology`.
          * one
        load-balance policy per `application_virtual_topologies`.
          * one load_balance policy for the
        `default_virtual_topology`.
          * if the policy is associated with the default VRF, a special control-
        plane profile is configured
            and injected first in the policy assigned to the `default` VRF. This
        profile points to a
            control-plane load-balance policy as defined under
        `control_plane_virtual_topology` or if not set, the default one.

        Subclass of AvdIndexedList with
        `PoliciesItem` items. Primary key is `name` (`str`).
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                vrfs: Vrfs | UndefinedType = Undefined,
                control_plane_virtual_topology: ControlPlaneVirtualTopology | UndefinedType = Undefined,
                policies: Policies | UndefinedType = Undefined,
            ) -> None:
                """
                WanVirtualTopologies.


                Subclass of AvdModel.

                Args:
                    vrfs:
                       Map a VRF that exists in network_services to an AVT policy.

                       Subclass of AvdIndexedList with
                       `VrfsItem` items. Primary key is `name` (`str`).
                    control_plane_virtual_topology:
                       Always injected into the default VRF policy as the first entry.

                       By default, if no path-groups are
                       specified, all locally available path-groups
                       are used in the generated load-balance policy.
                       ID is
                       hardcoded to 254 for the AVT profile in CV Pathfinder mode.

                       Subclass of AvdModel.
                    policies:
                       List of virtual topologies policies.

                       For AutoVPN, each item in the list creates:
                         * one policy
                       with:
                             * one `match` entry per `application_virtual_topologies` item
                               they are indexed
                       using `10 * <list_index>` where `list_index` starts at `1`.
                             * one `default-match`
                         * one
                       load-balance policy per `application_virtual_topologies` and one for the `default_virtual_topology`.
                       * if the policy is associated with the default VRF, a special control-plane rule is injected
                           in
                       the policy with index `1` referring to a control-plane load-balance policy as defined under
                       `control_plane_virtual_topology` or if not set, the default one.

                       For CV Pathfinder, each item in
                       the list creates:
                         * one policy with:
                             * one `match` entry per
                       `application_virtual_topologies` item ordered as in the data.
                             * one last match entry for the
                       `default` application-profile using `default_virtual_topology` information.
                         * one profile per
                       `application_virtual_topologies` item.
                         * one profile for the `default_virtual_topology`.
                         * one
                       load-balance policy per `application_virtual_topologies`.
                         * one load_balance policy for the
                       `default_virtual_topology`.
                         * if the policy is associated with the default VRF, a special control-
                       plane profile is configured
                           and injected first in the policy assigned to the `default` VRF. This
                       profile points to a
                           control-plane load-balance policy as defined under
                       `control_plane_virtual_topology` or if not set, the default one.

                       Subclass of AvdIndexedList with
                       `PoliciesItem` items. Primary key is `name` (`str`).

                """

    class ZscalerEndpoints(AvdModel):
        """Subclass of AvdModel."""

        class Primary(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "ip_address": {"type": str},
                "datacenter": {"type": str},
                "city": {"type": str},
                "country": {"type": str},
                "region": {"type": str},
                "latitude": {"type": str},
                "longitude": {"type": str},
            }
            ip_address: str
            datacenter: str
            city: str
            country: str
            region: str
            latitude: str
            longitude: str

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ip_address: str | UndefinedType = Undefined,
                    datacenter: str | UndefinedType = Undefined,
                    city: str | UndefinedType = Undefined,
                    country: str | UndefinedType = Undefined,
                    region: str | UndefinedType = Undefined,
                    latitude: str | UndefinedType = Undefined,
                    longitude: str | UndefinedType = Undefined,
                ) -> None:
                    """
                    Primary.


                    Subclass of AvdModel.

                    Args:
                        ip_address: ip_address
                        datacenter: datacenter
                        city: city
                        country: country
                        region: region
                        latitude: latitude
                        longitude: longitude

                    """

        class Secondary(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "ip_address": {"type": str},
                "datacenter": {"type": str},
                "city": {"type": str},
                "country": {"type": str},
                "region": {"type": str},
                "latitude": {"type": str},
                "longitude": {"type": str},
            }
            ip_address: str
            datacenter: str
            city: str
            country: str
            region: str
            latitude: str
            longitude: str

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ip_address: str | UndefinedType = Undefined,
                    datacenter: str | UndefinedType = Undefined,
                    city: str | UndefinedType = Undefined,
                    country: str | UndefinedType = Undefined,
                    region: str | UndefinedType = Undefined,
                    latitude: str | UndefinedType = Undefined,
                    longitude: str | UndefinedType = Undefined,
                ) -> None:
                    """
                    Secondary.


                    Subclass of AvdModel.

                    Args:
                        ip_address: ip_address
                        datacenter: datacenter
                        city: city
                        country: country
                        region: region
                        latitude: latitude
                        longitude: longitude

                    """

        class Tertiary(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {
                "ip_address": {"type": str},
                "datacenter": {"type": str},
                "city": {"type": str},
                "country": {"type": str},
                "region": {"type": str},
                "latitude": {"type": str},
                "longitude": {"type": str},
            }
            ip_address: str
            datacenter: str
            city: str
            country: str
            region: str
            latitude: str
            longitude: str

            if TYPE_CHECKING:

                def __init__(
                    self,
                    *,
                    ip_address: str | UndefinedType = Undefined,
                    datacenter: str | UndefinedType = Undefined,
                    city: str | UndefinedType = Undefined,
                    country: str | UndefinedType = Undefined,
                    region: str | UndefinedType = Undefined,
                    latitude: str | UndefinedType = Undefined,
                    longitude: str | UndefinedType = Undefined,
                ) -> None:
                    """
                    Tertiary.


                    Subclass of AvdModel.

                    Args:
                        ip_address: ip_address
                        datacenter: datacenter
                        city: city
                        country: country
                        region: region
                        latitude: latitude
                        longitude: longitude

                    """

        class DeviceLocation(AvdModel):
            """Subclass of AvdModel."""

            _fields: ClassVar[dict] = {"city": {"type": str}, "country": {"type": str}}
            city: str
            country: str

            if TYPE_CHECKING:

                def __init__(self, *, city: str | UndefinedType = Undefined, country: str | UndefinedType = Undefined) -> None:
                    """
                    DeviceLocation.


                    Subclass of AvdModel.

                    Args:
                        city: city
                        country: country

                    """

        _fields: ClassVar[dict] = {
            "primary": {"type": Primary},
            "secondary": {"type": Secondary},
            "tertiary": {"type": Tertiary},
            "cloud_name": {"type": str},
            "device_location": {"type": DeviceLocation},
        }
        primary: Primary
        """Subclass of AvdModel."""
        secondary: Secondary
        """Subclass of AvdModel."""
        tertiary: Tertiary
        """Subclass of AvdModel."""
        cloud_name: str
        """
        The name of the Zscaler cloud the CloudVision cluster is integrated with like 'zscaler1' or
        'zscalerbeta'.
        """
        device_location: DeviceLocation
        """
        The location of the calling device after being resolved by Zscaler location APIs. This is required
        since Zscaler only accepts their own variants of City and Country.

        Subclass of AvdModel.
        """

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                primary: Primary | UndefinedType = Undefined,
                secondary: Secondary | UndefinedType = Undefined,
                tertiary: Tertiary | UndefinedType = Undefined,
                cloud_name: str | UndefinedType = Undefined,
                device_location: DeviceLocation | UndefinedType = Undefined,
            ) -> None:
                """
                ZscalerEndpoints.


                Subclass of AvdModel.

                Args:
                    primary: Subclass of AvdModel.
                    secondary: Subclass of AvdModel.
                    tertiary: Subclass of AvdModel.
                    cloud_name:
                       The name of the Zscaler cloud the CloudVision cluster is integrated with like 'zscaler1' or
                       'zscalerbeta'.
                    device_location:
                       The location of the calling device after being resolved by Zscaler location APIs. This is required
                       since Zscaler only accepts their own variants of City and Country.

                       Subclass of AvdModel.

                """

    class _CustomStructuredConfigurationsItem(AvdModel):
        _fields: ClassVar[dict] = {"key": {"type": str}, "value": {"type": EosCliConfigGen}}
        key: str
        """Complete key including prefix"""
        value: EosCliConfigGen
        """Structured config including the suffix part of the key."""

        if TYPE_CHECKING:

            def __init__(self, *, key: str | UndefinedType = Undefined, value: EosCliConfigGen | UndefinedType = Undefined) -> None:
                """
                _CustomStructuredConfigurationsItem.


                Args:
                    key: Complete key including prefix
                    value: Structured config including the suffix part of the key.

                """

    class _CustomStructuredConfigurations(AvdIndexedList[str, _CustomStructuredConfigurationsItem]):
        _primary_key: ClassVar[str] = "key"

    _CustomStructuredConfigurations._item_type = _CustomStructuredConfigurationsItem

    class _DynamicKeys(AvdModel):
        """Data models for dynamic keys."""

        class DynamicConnectedEndpointsItem(AvdModel):
            class ConnectedEndpointsItem(AvdModel):
                """Subclass of AvdModel."""

                class AdaptersItem(AvdModel):
                    """Subclass of AvdModel."""

                    class SwitchPorts(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    SwitchPorts._item_type = str

                    class Switches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Switches._item_type = str

                    class EndpointPorts(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EndpointPorts._item_type = str

                    class Descriptions(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Descriptions._item_type = str

                    class TrunkGroups(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    TrunkGroups._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "endpoint_role": {"type": str, "default": "follower"},
                            "profile": {"type": str, "default": "aes67-r16-2016"},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        endpoint_role: Literal["follower", "dynamic", "bmca", "default"]
                        """
                        PTP role of the endpoint.
                        `follower` will configure the switch port as `ptp role master`.
                        `dynamic`
                        will use BMCA.
                        `default` is deprecated in favor of `follower`.
                        `bmca` is deprecated in favor of
                        `dynamic`.

                        Default value: `"follower"`
                        """
                        profile: str
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"

                        Default value: `"aes67-r16-2016"`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                endpoint_role: Literal["follower", "dynamic", "bmca", "default"] | UndefinedType = Undefined,
                                profile: str | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    endpoint_role:
                                       PTP role of the endpoint.
                                       `follower` will configure the switch port as `ptp role master`.
                                       `dynamic`
                                       will use BMCA.
                                       `default` is deprecated in favor of `follower`.
                                       `bmca` is deprecated in favor of
                                       `dynamic`.
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"

                                """

                    class FlowTracking(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                        enabled: bool | None
                        name: str | None
                        """Flow tracker name as defined in flow_tracking_settings."""

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                """
                                FlowTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    name: Flow tracker name as defined in flow_tracking_settings.

                                """

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                        enabled: bool | None
                        name: str | None
                        """
                        Tracking group name.
                        The default group name is taken from fabric variable of the switch,
                        `link_tracking.groups[0].name` with default value being "LT_GROUP1".
                        Optional if default
                        link_tracking settings are configured on the node.
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    name:
                                       Tracking group name.
                                       The default group name is taken from fabric variable of the switch,
                                       `link_tracking.groups[0].name` with default value being "LT_GROUP1".
                                       Optional if default
                                       link_tracking settings are configured on the node.

                                """

                    class StormControl(AvdModel):
                        """Subclass of AvdModel."""

                        class All(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    All.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        class Broadcast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Broadcast.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        class Multicast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Multicast.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        class UnknownUnicast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    UnknownUnicast.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        _fields: ClassVar[dict] = {
                            "all": {"type": All},
                            "broadcast": {"type": Broadcast},
                            "multicast": {"type": Multicast},
                            "unknown_unicast": {"type": UnknownUnicast},
                        }
                        all: All
                        """Subclass of AvdModel."""
                        broadcast: Broadcast
                        """Subclass of AvdModel."""
                        multicast: Multicast
                        """Subclass of AvdModel."""
                        unknown_unicast: UnknownUnicast
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                all: All | UndefinedType = Undefined,
                                broadcast: Broadcast | UndefinedType = Undefined,
                                multicast: Multicast | UndefinedType = Undefined,
                                unknown_unicast: UnknownUnicast | UndefinedType = Undefined,
                            ) -> None:
                                """
                                StormControl.


                                Subclass of AvdModel.

                                Args:
                                    all: Subclass of AvdModel.
                                    broadcast: Subclass of AvdModel.
                                    multicast: Subclass of AvdModel.
                                    unknown_unicast: Subclass of AvdModel.

                                """

                    class MonitorSessionsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class SourceSettings(AvdModel):
                            """Subclass of AvdModel."""

                            class AccessGroup(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}, "priority": {"type": int}}
                                type: Literal["ip", "ipv6", "mac"] | None
                                name: str | None
                                """ACL name."""
                                priority: int | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                                        name: str | None | UndefinedType = Undefined,
                                        priority: int | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        AccessGroup.


                                        Subclass of AvdModel.

                                        Args:
                                            type: type
                                            name: ACL name.
                                            priority: priority

                                        """

                            _fields: ClassVar[dict] = {"direction": {"type": str}, "access_group": {"type": AccessGroup}}
                            direction: Literal["rx", "tx", "both"] | None
                            access_group: AccessGroup
                            """
                            This can only be set when `session_settings.access_group` is not set.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    direction: Literal["rx", "tx", "both"] | None | UndefinedType = Undefined,
                                    access_group: AccessGroup | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SourceSettings.


                                    Subclass of AvdModel.

                                    Args:
                                        direction: direction
                                        access_group:
                                           This can only be set when `session_settings.access_group` is not set.

                                           Subclass of AvdModel.

                                    """

                        class SessionSettings(AvdModel):
                            """Subclass of AvdModel."""

                            class AccessGroup(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}}
                                type: Literal["ip", "ipv6", "mac"] | None
                                name: str | None
                                """ACL name."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                                        name: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        AccessGroup.


                                        Subclass of AvdModel.

                                        Args:
                                            type: type
                                            name: ACL name.

                                        """

                            class Truncate(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "size": {"type": int}}
                                enabled: bool | None
                                size: int | None
                                """Size in bytes."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, size: int | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        Truncate.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            size: Size in bytes.

                                        """

                            _fields: ClassVar[dict] = {
                                "encapsulation_gre_metadata_tx": {"type": bool},
                                "header_remove_size": {"type": int},
                                "access_group": {"type": AccessGroup},
                                "rate_limit_per_ingress_chip": {"type": str},
                                "rate_limit_per_egress_chip": {"type": str},
                                "sample": {"type": int},
                                "truncate": {"type": Truncate},
                            }
                            encapsulation_gre_metadata_tx: bool | None
                            header_remove_size: int | None
                            """Number of bytes to remove from header."""
                            access_group: AccessGroup
                            """Subclass of AvdModel."""
                            rate_limit_per_ingress_chip: str | None
                            """
                            Ratelimit and unit as string.
                            Examples:
                              "100000 bps"
                              "100 kbps"
                              "10 mbps"
                            """
                            rate_limit_per_egress_chip: str | None
                            """
                            Ratelimit and unit as string.
                            Examples:
                              "100000 bps"
                              "100 kbps"
                              "10 mbps"
                            """
                            sample: int | None
                            truncate: Truncate
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    encapsulation_gre_metadata_tx: bool | None | UndefinedType = Undefined,
                                    header_remove_size: int | None | UndefinedType = Undefined,
                                    access_group: AccessGroup | UndefinedType = Undefined,
                                    rate_limit_per_ingress_chip: str | None | UndefinedType = Undefined,
                                    rate_limit_per_egress_chip: str | None | UndefinedType = Undefined,
                                    sample: int | None | UndefinedType = Undefined,
                                    truncate: Truncate | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SessionSettings.


                                    Subclass of AvdModel.

                                    Args:
                                        encapsulation_gre_metadata_tx: encapsulation_gre_metadata_tx
                                        header_remove_size: Number of bytes to remove from header.
                                        access_group: Subclass of AvdModel.
                                        rate_limit_per_ingress_chip:
                                           Ratelimit and unit as string.
                                           Examples:  # fmt: skip
                                             "100000 bps"
                                             "100 kbps"
                                             "10 mbps"
                                        rate_limit_per_egress_chip:
                                           Ratelimit and unit as string.
                                           Examples:  # fmt: skip
                                             "100000 bps"
                                             "100 kbps"
                                             "10 mbps"
                                        sample: sample
                                        truncate: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "role": {"type": str},
                            "source_settings": {"type": SourceSettings},
                            "session_settings": {"type": SessionSettings},
                        }
                        name: str
                        """Session name."""
                        role: Literal["source", "destination"] | None
                        source_settings: SourceSettings
                        """Subclass of AvdModel."""
                        session_settings: SessionSettings
                        """
                        Session settings are defined per session name.
                        Different session_settings for the same session name
                        will be combined/merged.


                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                role: Literal["source", "destination"] | None | UndefinedType = Undefined,
                                source_settings: SourceSettings | UndefinedType = Undefined,
                                session_settings: SessionSettings | UndefinedType = Undefined,
                            ) -> None:
                                """
                                MonitorSessionsItem.


                                Subclass of AvdModel.

                                Args:
                                    name: Session name.
                                    role: role
                                    source_settings: Subclass of AvdModel.
                                    session_settings:
                                       Session settings are defined per session name.
                                       Different session_settings for the same session name
                                       will be combined/merged.


                                       Subclass of AvdModel.

                                """

                    class MonitorSessions(AvdList[MonitorSessionsItem]):
                        """Subclass of AvdList with `MonitorSessionsItem` items."""

                    MonitorSessions._item_type = MonitorSessionsItem

                    class EthernetSegment(AvdModel):
                        """Subclass of AvdModel."""

                        class DesignatedForwarderPreferences(AvdList[int]):
                            """Subclass of AvdList with `int` items."""

                        DesignatedForwarderPreferences._item_type = int

                        _fields: ClassVar[dict] = {
                            "short_esi": {"type": str},
                            "redundancy": {"type": str},
                            "designated_forwarder_algorithm": {"type": str},
                            "designated_forwarder_preferences": {"type": DesignatedForwarderPreferences},
                            "dont_preempt": {"type": bool},
                        }
                        short_esi: str
                        """
                        In format xxxx:xxxx:xxxx or "auto".
                        Define a manual short-esi (be careful using this on profiles) or
                        set the value to "auto" to automatically generate the value.
                        Please see the notes under "EVPN A/A
                        ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
                        """
                        redundancy: Literal["all-active", "single-active"] | None
                        """
                        If omitted, Port-Channels use the EOS default of all-active.
                        If omitted, Ethernet interfaces are
                        configured as single-active.
                        """
                        designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None
                        """
                        Configure DF algorithm and preferences.
                        - auto: Use preference-based algorithm and assign preference
                        based on position of device in the 'switches' list,
                          e.g., assuming a list of three switches, this
                        would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
                        -
                        preference: Set preference for each switch manually using designated_forwarder_preferences key.
                        -
                        modulus: Use the default modulus-based algorithm.
                        If omitted, Port-Channels use the EOS default of
                        modulus.
                        If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
                        """
                        designated_forwarder_preferences: DesignatedForwarderPreferences
                        """
                        Manual preference as described above, required only for preference algorithm.

                        Subclass of AvdList
                        with `int` items.
                        """
                        dont_preempt: bool | None
                        """Disable preemption for single-active forwarding when auto/manual DF preference is configured."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                short_esi: str | UndefinedType = Undefined,
                                redundancy: Literal["all-active", "single-active"] | None | UndefinedType = Undefined,
                                designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None | UndefinedType = Undefined,
                                designated_forwarder_preferences: DesignatedForwarderPreferences | UndefinedType = Undefined,
                                dont_preempt: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EthernetSegment.


                                Subclass of AvdModel.

                                Args:
                                    short_esi:
                                       In format xxxx:xxxx:xxxx or "auto".
                                       Define a manual short-esi (be careful using this on profiles) or
                                       set the value to "auto" to automatically generate the value.
                                       Please see the notes under "EVPN A/A
                                       ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
                                    redundancy:
                                       If omitted, Port-Channels use the EOS default of all-active.
                                       If omitted, Ethernet interfaces are
                                       configured as single-active.
                                    designated_forwarder_algorithm:
                                       Configure DF algorithm and preferences.
                                       - auto: Use preference-based algorithm and assign preference
                                       based on position of device in the 'switches' list,
                                         e.g., assuming a list of three switches, this
                                       would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
                                       -
                                       preference: Set preference for each switch manually using designated_forwarder_preferences key.
                                       -
                                       modulus: Use the default modulus-based algorithm.
                                       If omitted, Port-Channels use the EOS default of
                                       modulus.
                                       If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
                                    designated_forwarder_preferences:
                                       Manual preference as described above, required only for preference algorithm.

                                       Subclass of AvdList
                                       with `int` items.
                                    dont_preempt: Disable preemption for single-active forwarding when auto/manual DF preference is configured.

                                """

                    class PortChannel(AvdModel):
                        """Subclass of AvdModel."""

                        class LacpFallback(AvdModel):
                            """Subclass of AvdModel."""

                            class Individual(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "profile": {"type": str},
                                    "vlans": {"type": str},
                                    "native_vlan": {"type": int},
                                    "mode": {"type": str},
                                }
                                profile: str | None
                                """Port-profile name to inherit configuration."""
                                vlans: str | None
                                """Allowed VLANs on the port-channel member interfaces when in fallback individual."""
                                native_vlan: int | None
                                """Native VLAN on the port-channel member interfaces when in fallback individual."""
                                mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
                                """Interface mode on the port-channel member interfaces when in fallback individual."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        profile: str | None | UndefinedType = Undefined,
                                        vlans: str | None | UndefinedType = Undefined,
                                        native_vlan: int | None | UndefinedType = Undefined,
                                        mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Individual.


                                        Subclass of AvdModel.

                                        Args:
                                            profile: Port-profile name to inherit configuration.
                                            vlans: Allowed VLANs on the port-channel member interfaces when in fallback individual.
                                            native_vlan: Native VLAN on the port-channel member interfaces when in fallback individual.
                                            mode: Interface mode on the port-channel member interfaces when in fallback individual.

                                        """

                            _fields: ClassVar[dict] = {"mode": {"type": str}, "individual": {"type": Individual}, "timeout": {"type": int, "default": 90}}
                            mode: Literal["static", "individual"] | None
                            """
                            Either static or individual mode is supported.
                            If the mode is set to "individual" either 'profile'
                            or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                            """
                            individual: Individual
                            """
                            Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                            "individual".

                            Subclass of AvdModel.
                            """
                            timeout: int
                            """
                            Timeout in seconds.

                            Default value: `90`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    mode: Literal["static", "individual"] | None | UndefinedType = Undefined,
                                    individual: Individual | UndefinedType = Undefined,
                                    timeout: int | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LacpFallback.


                                    Subclass of AvdModel.

                                    Args:
                                        mode:
                                           Either static or individual mode is supported.
                                           If the mode is set to "individual" either 'profile'
                                           or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                                        individual:
                                           Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                                           "individual".

                                           Subclass of AvdModel.
                                        timeout: Timeout in seconds.

                                    """

                        class LacpTimer(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"mode": {"type": str}, "multiplier": {"type": int}}
                            mode: Literal["normal", "fast"] | None
                            """LACP mode for interface members."""
                            multiplier: int | None
                            """Number of LACP BPDUs lost before deeming the peer down. EOS default is 3."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    mode: Literal["normal", "fast"] | None | UndefinedType = Undefined,
                                    multiplier: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LacpTimer.


                                    Subclass of AvdModel.

                                    Args:
                                        mode: LACP mode for interface members.
                                        multiplier: Number of LACP BPDUs lost before deeming the peer down. EOS default is 3.

                                    """

                        class SubinterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class EncapsulationVlan(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"client_dot1q": {"type": int}}
                                client_dot1q: int | None

                                if TYPE_CHECKING:

                                    def __init__(self, *, client_dot1q: int | None | UndefinedType = Undefined) -> None:
                                        """
                                        EncapsulationVlan.


                                        Subclass of AvdModel.

                                        Args:
                                            client_dot1q: client_dot1q

                                        """

                            _fields: ClassVar[dict] = {
                                "number": {"type": int},
                                "short_esi": {"type": str},
                                "vlan_id": {"type": int},
                                "encapsulation_vlan": {"type": EncapsulationVlan},
                                "raw_eos_cli": {"type": str},
                                "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            }
                            number: int | None
                            """Subinterface number."""
                            short_esi: str | None
                            """
                            In format xxxx:xxxx:xxxx or "auto".
                            Required for multihomed port-channels with subinterfaces.
                            """
                            vlan_id: int | None
                            """
                            VLAN ID to bridge.
                            Default is subinterface number.
                            """
                            encapsulation_vlan: EncapsulationVlan
                            """
                            Client VLAN ID encapsulation.
                            Default is subinterface number.


                            Subclass of AvdModel.
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration."""
                            structured_config: EosCliConfigGen.PortChannelInterfacesItem
                            """
                            Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                            eos_cli_config_gen.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    number: int | None | UndefinedType = Undefined,
                                    short_esi: str | None | UndefinedType = Undefined,
                                    vlan_id: int | None | UndefinedType = Undefined,
                                    encapsulation_vlan: EncapsulationVlan | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SubinterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        number: Subinterface number.
                                        short_esi:
                                           In format xxxx:xxxx:xxxx or "auto".
                                           Required for multihomed port-channels with subinterfaces.
                                        vlan_id:
                                           VLAN ID to bridge.
                                           Default is subinterface number.
                                        encapsulation_vlan:
                                           Client VLAN ID encapsulation.
                                           Default is subinterface number.


                                           Subclass of AvdModel.
                                        raw_eos_cli: EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration.
                                        structured_config:
                                           Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                                           eos_cli_config_gen.

                                    """

                        class Subinterfaces(AvdList[SubinterfacesItem]):
                            """Subclass of AvdList with `SubinterfacesItem` items."""

                        Subinterfaces._item_type = SubinterfacesItem

                        _fields: ClassVar[dict] = {
                            "mode": {"type": str},
                            "channel_id": {"type": int},
                            "description": {"type": str},
                            "endpoint_port_channel": {"type": str},
                            "enabled": {"type": bool, "default": True},
                            "ptp_mpass": {"type": bool, "default": False},
                            "lacp_fallback": {"type": LacpFallback},
                            "lacp_timer": {"type": LacpTimer},
                            "subinterfaces": {"type": Subinterfaces},
                            "raw_eos_cli": {"type": str},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        mode: Literal["active", "passive", "on"] | None
                        """Port-Channel Mode."""
                        channel_id: int | None
                        """
                        Port-Channel ID.
                        If no channel_id is specified, an id is generated from the first switch port in the
                        port channel.
                        """
                        description: str | None
                        """
                        Description or description template to be used on the port-channel interface.
                        This can be a template
                        using the AVD string formatter syntax:
                        https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                        descriptions-names.html#avd-string-formatter-syntax.
                        The available template fields are:
                          -
                        `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                          -
                        `endpoint` - The name of the connected endpoint
                          - `endpoint_port_channel` - The value from
                        `endpoint_port_channel` if set.
                          - `port_channel_id` - The port-channel number for the switch.
                          -
                        `adapter_description` - The adapter's description if set.
                          - `adapter_description_or_endpoint` -
                        Helper alias of the adapter_description or endpoint.

                        The default description is set by
                        `default_connected_endpoints_port_channel_description`.
                        By default the description is templated from
                        the type, name and port_channel interface of the endpoint if set.
                        """
                        endpoint_port_channel: str | None
                        """
                        Name of the port-channel interface on the endpoint.
                        Used for the port-channel description template
                        with the field name `peer_interface`
                        """
                        enabled: bool
                        """
                        Port-Channel administrative state.
                        Setting to false will set port to 'shutdown' in intended
                        configuration.

                        Default value: `True`
                        """
                        ptp_mpass: bool
                        """
                        When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
                        logical device.
                        Arista PTP enabled devices always place PTP messages on the same physical link
                        within the port-channel.
                        Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
                        devices.

                        Default value: `False`
                        """
                        lacp_fallback: LacpFallback
                        """
                        LACP fallback configuration.

                        Subclass of AvdModel.
                        """
                        lacp_timer: LacpTimer
                        """
                        LACP timer configuration. Applies only when Port-channel mode is not "on".

                        Subclass of AvdModel.
                        """
                        subinterfaces: Subinterfaces
                        """
                        Port-Channel L2 Subinterfaces
                        Subinterfaces are only supported on routed port-channels, which means
                        they cannot be configured on MLAG port-channels.
                        Setting short_esi: auto generates the short_esi
                        automatically using a hash of configuration elements.
                        Please see the notes under "EVPN A/A ESI dual-
                        attached endpoint scenario" before setting short_esi: auto.


                        Subclass of AvdList with
                        `SubinterfacesItem` items.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the port-channel interface in the final EOS configuration."""
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config added under port_channel_interfaces.[name=<interface>] for
                        eos_cli_config_gen.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                mode: Literal["active", "passive", "on"] | None | UndefinedType = Undefined,
                                channel_id: int | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                endpoint_port_channel: str | None | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                ptp_mpass: bool | UndefinedType = Undefined,
                                lacp_fallback: LacpFallback | UndefinedType = Undefined,
                                lacp_timer: LacpTimer | UndefinedType = Undefined,
                                subinterfaces: Subinterfaces | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                PortChannel.


                                Subclass of AvdModel.

                                Args:
                                    mode: Port-Channel Mode.
                                    channel_id:
                                       Port-Channel ID.
                                       If no channel_id is specified, an id is generated from the first switch port in the
                                       port channel.
                                    description:
                                       Description or description template to be used on the port-channel interface.
                                       This can be a template
                                       using the AVD string formatter syntax:
                                       https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                       descriptions-names.html#avd-string-formatter-syntax.
                                       The available template fields are:
                                         -
                                       `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                                         -
                                       `endpoint` - The name of the connected endpoint
                                         - `endpoint_port_channel` - The value from
                                       `endpoint_port_channel` if set.
                                         - `port_channel_id` - The port-channel number for the switch.
                                         -
                                       `adapter_description` - The adapter's description if set.
                                         - `adapter_description_or_endpoint` -
                                       Helper alias of the adapter_description or endpoint.

                                       The default description is set by
                                       `default_connected_endpoints_port_channel_description`.
                                       By default the description is templated from
                                       the type, name and port_channel interface of the endpoint if set.
                                    endpoint_port_channel:
                                       Name of the port-channel interface on the endpoint.
                                       Used for the port-channel description template
                                       with the field name `peer_interface`
                                    enabled:
                                       Port-Channel administrative state.
                                       Setting to false will set port to 'shutdown' in intended
                                       configuration.
                                    ptp_mpass:
                                       When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
                                       logical device.
                                       Arista PTP enabled devices always place PTP messages on the same physical link
                                       within the port-channel.
                                       Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
                                       devices.
                                    lacp_fallback:
                                       LACP fallback configuration.

                                       Subclass of AvdModel.
                                    lacp_timer:
                                       LACP timer configuration. Applies only when Port-channel mode is not "on".

                                       Subclass of AvdModel.
                                    subinterfaces:
                                       Port-Channel L2 Subinterfaces
                                       Subinterfaces are only supported on routed port-channels, which means
                                       they cannot be configured on MLAG port-channels.
                                       Setting short_esi: auto generates the short_esi
                                       automatically using a hash of configuration elements.
                                       Please see the notes under "EVPN A/A ESI dual-
                                       attached endpoint scenario" before setting short_esi: auto.


                                       Subclass of AvdList with
                                       `SubinterfacesItem` items.
                                    raw_eos_cli: EOS CLI rendered directly on the port-channel interface in the final EOS configuration.
                                    structured_config:
                                       Custom structured config added under port_channel_interfaces.[name=<interface>] for
                                       eos_cli_config_gen.

                                """

                    class CampusLinkType(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    CampusLinkType._item_type = str

                    _fields: ClassVar[dict] = {
                        "switch_ports": {"type": SwitchPorts},
                        "switches": {"type": Switches},
                        "endpoint_ports": {"type": EndpointPorts},
                        "descriptions": {"type": Descriptions},
                        "speed": {"type": str},
                        "description": {"type": str},
                        "profile": {"type": str},
                        "enabled": {"type": bool, "default": True},
                        "mode": {"type": str},
                        "mtu": {"type": int},
                        "l2_mtu": {"type": int},
                        "l2_mru": {"type": int},
                        "native_vlan": {"type": int},
                        "native_vlan_tag": {"type": bool},
                        "phone_vlan": {"type": int},
                        "phone_trunk_mode": {"type": str},
                        "trunk_groups": {"type": TrunkGroups},
                        "vlans": {"type": str},
                        "spanning_tree_portfast": {"type": str},
                        "spanning_tree_bpdufilter": {"type": str},
                        "spanning_tree_bpduguard": {"type": str},
                        "flowcontrol": {"type": EosCliConfigGen.EthernetInterfacesItem.Flowcontrol},
                        "qos_profile": {"type": str},
                        "ptp": {"type": Ptp},
                        "sflow": {"type": bool},
                        "flow_tracking": {"type": FlowTracking},
                        "link_tracking": {"type": LinkTracking},
                        "dot1x": {"type": EosCliConfigGen.EthernetInterfacesItem.Dot1x},
                        "poe": {"type": EosCliConfigGen.EthernetInterfacesItem.Poe},
                        "storm_control": {"type": StormControl},
                        "monitor_sessions": {"type": MonitorSessions},
                        "ethernet_segment": {"type": EthernetSegment},
                        "port_channel": {"type": PortChannel},
                        "validate_state": {"type": bool},
                        "validate_lldp": {"type": bool},
                        "campus_link_type": {"type": CampusLinkType},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                    }
                    switch_ports: SwitchPorts
                    """
                    List of switch interfaces.
                    The lists `endpoint_ports`, `switch_ports`, and `switches` must have the
                    same length.


                    Subclass of AvdList with `str` items.
                    """
                    switches: Switches
                    """
                    List of switches.
                    The lists `endpoint_ports`, `switch_ports`, and `switches` must have the same
                    length.


                    Subclass of AvdList with `str` items.
                    """
                    endpoint_ports: EndpointPorts
                    """
                    Endpoint ports is used for description, required unless `description` or `descriptions` is set.
                    The
                    lists `endpoint_ports`, `switch_ports`, `descriptions` and `switches` must have the same length.
                    Each list item is one switchport.


                    Subclass of AvdList with `str` items.
                    """
                    descriptions: Descriptions
                    """
                    Unique description per port. When set, takes priority over description.
                    This can be a template using
                    the AVD string formatter syntax:
                    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                    descriptions-names.html#avd-string-formatter-syntax.
                    The available template fields are:
                      -
                    `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                      -
                    `endpoint` - The name of the connected endpoint
                      - `endpoint_port` - The value from
                    `endpoint_ports` for this switch port if set.
                      - `port_channel_id`: The port-channel number for the
                    switch.

                    Subclass of AvdList with `str` items.
                    """
                    speed: str | None
                    """
                    Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                    <interface_speed>`.
                    If not specified speed will be auto.
                    """
                    description: str | None
                    """
                    Description or description template to be used on all ports.
                    This can be a template using the AVD
                    string formatter syntax:
                    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                    descriptions-names.html#avd-string-formatter-syntax.
                    The available template fields are:
                      -
                    `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                      -
                    `endpoint` - The name of the connected endpoint
                      - `endpoint_port` - The value from
                    `endpoint_ports` for this switch port if set.

                    The default description is set by
                    `default_connected_endpoints_description`.
                    By default the description is templated from the type,
                    name and port of the endpoint if set.
                    """
                    profile: str | None
                    """Port-profile name to inherit configuration."""
                    enabled: bool
                    """
                    Administrative state, setting to false will set the port to 'shutdown' in the intended
                    configuration.

                    Default value: `True`
                    """
                    mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
                    """Interface mode."""
                    mtu: int | None
                    l2_mtu: int | None
                    """"l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI."""
                    l2_mru: int | None
                    """"l2_mru" should only be defined for platforms supporting the "l2 mru" CLI."""
                    native_vlan: int | None
                    """
                    Native VLAN for a trunk port.
                    If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
                    takes precedence.
                    """
                    native_vlan_tag: bool | None
                    """If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence."""
                    phone_vlan: int | None
                    """
                    Phone VLAN for a mode `trunk phone` port.
                    Requires `mode: trunk phone` to be set.
                    """
                    phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None
                    """
                    Specify if the phone traffic is tagged or untagged.
                    If both data and phone traffic are untagged,
                    MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
                    """
                    trunk_groups: TrunkGroups
                    """
                    Required with `enable_trunk_groups: true`.
                    Trunk Groups are used for limiting VLANs on trunk ports
                    to VLANs with the same Trunk Group.


                    Subclass of AvdList with `str` items.
                    """
                    vlans: str | None
                    """
                    Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
                    VLAN 1 will be used for access ports.
                    """
                    spanning_tree_portfast: Literal["edge", "network"] | None
                    spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
                    spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
                    flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol
                    qos_profile: str | None
                    """QOS profile name."""
                    ptp: Ptp
                    """
                    The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
                    enabled.
                    `ptp role master` is set to ensure control over the PTP topology.


                    Subclass of AvdModel.
                    """
                    sflow: bool | None
                    """Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting."""
                    flow_tracking: FlowTracking
                    """
                    Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
                    Subclass of AvdModel.
                    """
                    link_tracking: LinkTracking
                    """
                    Configure the downstream interfaces of a respective Link Tracking Group.
                    If `port_channel` is
                    defined in an adapter, then the port-channel interface is configured to be the downstream.
                    Else all
                    the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
                    multihomed networks.


                    Subclass of AvdModel.
                    """
                    dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x
                    """802.1x"""
                    poe: EosCliConfigGen.EthernetInterfacesItem.Poe
                    """Power Over Ethernet settings applied on port. Only configured if platform supports PoE."""
                    storm_control: StormControl
                    """
                    Storm control settings applied on port toward the endpoint.

                    Subclass of AvdModel.
                    """
                    monitor_sessions: MonitorSessions
                    """
                    Used to define interfaces as source or destination for monitoring sessions.

                    Subclass of AvdList
                    with `MonitorSessionsItem` items.
                    """
                    ethernet_segment: EthernetSegment
                    """
                    Settings for all or single-active EVPN multihoming.

                    Subclass of AvdModel.
                    """
                    port_channel: PortChannel
                    """
                    Used for port-channel adapter.

                    Subclass of AvdModel.
                    """
                    validate_state: bool | None
                    """
                    Set to false to disable interface state and LLDP topology validation performed by the
                    `eos_validate_state` role.
                    """
                    validate_lldp: bool | None
                    """Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role."""
                    campus_link_type: CampusLinkType
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Values for the CloudVision `Link-Type` user tags to be associated with an
                    interface.
                    Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                    in the same tags being associated with the parent Ethernet interface instead.
                    Attempting to
                    associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                    associated with the member Ethernet interfaces instead.

                    Subclass of AvdList with `str` items.
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the ethernet interface in the final EOS configuration."""
                    structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            switch_ports: SwitchPorts | UndefinedType = Undefined,
                            switches: Switches | UndefinedType = Undefined,
                            endpoint_ports: EndpointPorts | UndefinedType = Undefined,
                            descriptions: Descriptions | UndefinedType = Undefined,
                            speed: str | None | UndefinedType = Undefined,
                            description: str | None | UndefinedType = Undefined,
                            profile: str | None | UndefinedType = Undefined,
                            enabled: bool | UndefinedType = Undefined,
                            mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                            mtu: int | None | UndefinedType = Undefined,
                            l2_mtu: int | None | UndefinedType = Undefined,
                            l2_mru: int | None | UndefinedType = Undefined,
                            native_vlan: int | None | UndefinedType = Undefined,
                            native_vlan_tag: bool | None | UndefinedType = Undefined,
                            phone_vlan: int | None | UndefinedType = Undefined,
                            phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None | UndefinedType = Undefined,
                            trunk_groups: TrunkGroups | UndefinedType = Undefined,
                            vlans: str | None | UndefinedType = Undefined,
                            spanning_tree_portfast: Literal["edge", "network"] | None | UndefinedType = Undefined,
                            spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                            spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                            flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol | UndefinedType = Undefined,
                            qos_profile: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            sflow: bool | None | UndefinedType = Undefined,
                            flow_tracking: FlowTracking | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x | UndefinedType = Undefined,
                            poe: EosCliConfigGen.EthernetInterfacesItem.Poe | UndefinedType = Undefined,
                            storm_control: StormControl | UndefinedType = Undefined,
                            monitor_sessions: MonitorSessions | UndefinedType = Undefined,
                            ethernet_segment: EthernetSegment | UndefinedType = Undefined,
                            port_channel: PortChannel | UndefinedType = Undefined,
                            validate_state: bool | None | UndefinedType = Undefined,
                            validate_lldp: bool | None | UndefinedType = Undefined,
                            campus_link_type: CampusLinkType | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                        ) -> None:
                            """
                            AdaptersItem.


                            Subclass of AvdModel.

                            Args:
                                switch_ports:
                                   List of switch interfaces.
                                   The lists `endpoint_ports`, `switch_ports`, and `switches` must have the
                                   same length.


                                   Subclass of AvdList with `str` items.
                                switches:
                                   List of switches.
                                   The lists `endpoint_ports`, `switch_ports`, and `switches` must have the same
                                   length.


                                   Subclass of AvdList with `str` items.
                                endpoint_ports:
                                   Endpoint ports is used for description, required unless `description` or `descriptions` is set.
                                   The
                                   lists `endpoint_ports`, `switch_ports`, `descriptions` and `switches` must have the same length.
                                   Each list item is one switchport.


                                   Subclass of AvdList with `str` items.
                                descriptions:
                                   Unique description per port. When set, takes priority over description.
                                   This can be a template using
                                   the AVD string formatter syntax:
                                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                   descriptions-names.html#avd-string-formatter-syntax.
                                   The available template fields are:
                                     -
                                   `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                                     -
                                   `endpoint` - The name of the connected endpoint
                                     - `endpoint_port` - The value from
                                   `endpoint_ports` for this switch port if set.
                                     - `port_channel_id`: The port-channel number for the
                                   switch.

                                   Subclass of AvdList with `str` items.
                                speed:
                                   Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                   <interface_speed>`.
                                   If not specified speed will be auto.
                                description:
                                   Description or description template to be used on all ports.
                                   This can be a template using the AVD
                                   string formatter syntax:
                                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                   descriptions-names.html#avd-string-formatter-syntax.
                                   The available template fields are:
                                     -
                                   `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                                     -
                                   `endpoint` - The name of the connected endpoint
                                     - `endpoint_port` - The value from
                                   `endpoint_ports` for this switch port if set.

                                   The default description is set by
                                   `default_connected_endpoints_description`.
                                   By default the description is templated from the type,
                                   name and port of the endpoint if set.
                                profile: Port-profile name to inherit configuration.
                                enabled:
                                   Administrative state, setting to false will set the port to 'shutdown' in the intended
                                   configuration.
                                mode: Interface mode.
                                mtu: mtu
                                l2_mtu: "l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI.
                                l2_mru: "l2_mru" should only be defined for platforms supporting the "l2 mru" CLI.
                                native_vlan:
                                   Native VLAN for a trunk port.
                                   If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
                                   takes precedence.
                                native_vlan_tag: If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence.
                                phone_vlan:
                                   Phone VLAN for a mode `trunk phone` port.
                                   Requires `mode: trunk phone` to be set.
                                phone_trunk_mode:
                                   Specify if the phone traffic is tagged or untagged.
                                   If both data and phone traffic are untagged,
                                   MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
                                trunk_groups:
                                   Required with `enable_trunk_groups: true`.
                                   Trunk Groups are used for limiting VLANs on trunk ports
                                   to VLANs with the same Trunk Group.


                                   Subclass of AvdList with `str` items.
                                vlans:
                                   Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
                                   VLAN 1 will be used for access ports.
                                spanning_tree_portfast: spanning_tree_portfast
                                spanning_tree_bpdufilter: spanning_tree_bpdufilter
                                spanning_tree_bpduguard: spanning_tree_bpduguard
                                flowcontrol: flowcontrol
                                qos_profile: QOS profile name.
                                ptp:
                                   The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
                                   enabled.
                                   `ptp role master` is set to ensure control over the PTP topology.


                                   Subclass of AvdModel.
                                sflow: Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting.
                                flow_tracking:
                                   Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
                                   Subclass of AvdModel.
                                link_tracking:
                                   Configure the downstream interfaces of a respective Link Tracking Group.
                                   If `port_channel` is
                                   defined in an adapter, then the port-channel interface is configured to be the downstream.
                                   Else all
                                   the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
                                   multihomed networks.


                                   Subclass of AvdModel.
                                dot1x: 802.1x
                                poe: Power Over Ethernet settings applied on port. Only configured if platform supports PoE.
                                storm_control:
                                   Storm control settings applied on port toward the endpoint.

                                   Subclass of AvdModel.
                                monitor_sessions:
                                   Used to define interfaces as source or destination for monitoring sessions.

                                   Subclass of AvdList
                                   with `MonitorSessionsItem` items.
                                ethernet_segment:
                                   Settings for all or single-active EVPN multihoming.

                                   Subclass of AvdModel.
                                port_channel:
                                   Used for port-channel adapter.

                                   Subclass of AvdModel.
                                validate_state:
                                   Set to false to disable interface state and LLDP topology validation performed by the
                                   `eos_validate_state` role.
                                validate_lldp: Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role.
                                campus_link_type:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Values for the CloudVision `Link-Type` user tags to be associated with an
                                   interface.
                                   Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                                   in the same tags being associated with the parent Ethernet interface instead.
                                   Attempting to
                                   associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                                   associated with the member Ethernet interfaces instead.

                                   Subclass of AvdList with `str` items.
                                raw_eos_cli: EOS CLI rendered directly on the ethernet interface in the final EOS configuration.
                                structured_config: Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen.

                            """

                class Adapters(AvdList[AdaptersItem]):
                    """Subclass of AvdList with `AdaptersItem` items."""

                Adapters._item_type = AdaptersItem

                _fields: ClassVar[dict] = {"name": {"type": str}, "rack": {"type": str}, "adapters": {"type": Adapters}}
                name: str
                """Endpoint name will be used in the switchport description."""
                rack: str | None
                """Rack is used for documentation purposes only."""
                adapters: Adapters
                """
                A list of adapters, group by adapters leveraging the same port-profile.

                Subclass of AvdList with
                `AdaptersItem` items.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        name: str | UndefinedType = Undefined,
                        rack: str | None | UndefinedType = Undefined,
                        adapters: Adapters | UndefinedType = Undefined,
                    ) -> None:
                        """
                        ConnectedEndpointsItem.


                        Subclass of AvdModel.

                        Args:
                            name: Endpoint name will be used in the switchport description.
                            rack: Rack is used for documentation purposes only.
                            adapters:
                               A list of adapters, group by adapters leveraging the same port-profile.

                               Subclass of AvdList with
                               `AdaptersItem` items.

                        """

            class ConnectedEndpoints(AvdIndexedList[str, ConnectedEndpointsItem]):
                """Subclass of AvdIndexedList with `ConnectedEndpointsItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            ConnectedEndpoints._item_type = ConnectedEndpointsItem

            _fields: ClassVar[dict] = {"key": {"type": str}, "value": {"type": ConnectedEndpoints}}
            _field_to_key_map: ClassVar[dict] = {"value": "connected_endpoints_keys_key"}
            _key_to_field_map: ClassVar[dict] = {"connected_endpoints_keys_key": "value"}
            key: str
            """Key used as dynamic key"""
            value: ConnectedEndpoints
            """Value of dynamic key"""

            if TYPE_CHECKING:

                def __init__(self, *, key: str | UndefinedType = Undefined, value: ConnectedEndpoints | UndefinedType = Undefined) -> None:
                    """
                    DynamicConnectedEndpointsItem.


                    Args:
                        key: Key used as dynamic key
                        value: Value of dynamic key

                    """

        class DynamicConnectedEndpoints(AvdIndexedList[str, DynamicConnectedEndpointsItem]):
            _primary_key: ClassVar[str] = "key"

        DynamicConnectedEndpoints._item_type = DynamicConnectedEndpointsItem

        class DynamicCustomConnectedEndpointsItem(AvdModel):
            class CustomConnectedEndpointsItem(AvdModel):
                """Subclass of AvdModel."""

                class AdaptersItem(AvdModel):
                    """Subclass of AvdModel."""

                    class SwitchPorts(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    SwitchPorts._item_type = str

                    class Switches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Switches._item_type = str

                    class EndpointPorts(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EndpointPorts._item_type = str

                    class Descriptions(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Descriptions._item_type = str

                    class TrunkGroups(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    TrunkGroups._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "endpoint_role": {"type": str, "default": "follower"},
                            "profile": {"type": str, "default": "aes67-r16-2016"},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        endpoint_role: Literal["follower", "dynamic", "bmca", "default"]
                        """
                        PTP role of the endpoint.
                        `follower` will configure the switch port as `ptp role master`.
                        `dynamic`
                        will use BMCA.
                        `default` is deprecated in favor of `follower`.
                        `bmca` is deprecated in favor of
                        `dynamic`.

                        Default value: `"follower"`
                        """
                        profile: str
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"

                        Default value: `"aes67-r16-2016"`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                endpoint_role: Literal["follower", "dynamic", "bmca", "default"] | UndefinedType = Undefined,
                                profile: str | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    endpoint_role:
                                       PTP role of the endpoint.
                                       `follower` will configure the switch port as `ptp role master`.
                                       `dynamic`
                                       will use BMCA.
                                       `default` is deprecated in favor of `follower`.
                                       `bmca` is deprecated in favor of
                                       `dynamic`.
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"

                                """

                    class FlowTracking(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                        enabled: bool | None
                        name: str | None
                        """Flow tracker name as defined in flow_tracking_settings."""

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                """
                                FlowTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    name: Flow tracker name as defined in flow_tracking_settings.

                                """

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                        enabled: bool | None
                        name: str | None
                        """
                        Tracking group name.
                        The default group name is taken from fabric variable of the switch,
                        `link_tracking.groups[0].name` with default value being "LT_GROUP1".
                        Optional if default
                        link_tracking settings are configured on the node.
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    name:
                                       Tracking group name.
                                       The default group name is taken from fabric variable of the switch,
                                       `link_tracking.groups[0].name` with default value being "LT_GROUP1".
                                       Optional if default
                                       link_tracking settings are configured on the node.

                                """

                    class StormControl(AvdModel):
                        """Subclass of AvdModel."""

                        class All(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    All.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        class Broadcast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Broadcast.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        class Multicast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Multicast.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        class UnknownUnicast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"level": {"type": str}, "unit": {"type": str, "default": "percent"}}
                            level: str | None
                            """Configure maximum storm-control level."""
                            unit: Literal["percent", "pps"]
                            """
                            Optional variable and is hardware dependent.

                            Default value: `"percent"`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, level: str | None | UndefinedType = Undefined, unit: Literal["percent", "pps"] | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    UnknownUnicast.


                                    Subclass of AvdModel.

                                    Args:
                                        level: Configure maximum storm-control level.
                                        unit: Optional variable and is hardware dependent.

                                    """

                        _fields: ClassVar[dict] = {
                            "all": {"type": All},
                            "broadcast": {"type": Broadcast},
                            "multicast": {"type": Multicast},
                            "unknown_unicast": {"type": UnknownUnicast},
                        }
                        all: All
                        """Subclass of AvdModel."""
                        broadcast: Broadcast
                        """Subclass of AvdModel."""
                        multicast: Multicast
                        """Subclass of AvdModel."""
                        unknown_unicast: UnknownUnicast
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                all: All | UndefinedType = Undefined,
                                broadcast: Broadcast | UndefinedType = Undefined,
                                multicast: Multicast | UndefinedType = Undefined,
                                unknown_unicast: UnknownUnicast | UndefinedType = Undefined,
                            ) -> None:
                                """
                                StormControl.


                                Subclass of AvdModel.

                                Args:
                                    all: Subclass of AvdModel.
                                    broadcast: Subclass of AvdModel.
                                    multicast: Subclass of AvdModel.
                                    unknown_unicast: Subclass of AvdModel.

                                """

                    class MonitorSessionsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class SourceSettings(AvdModel):
                            """Subclass of AvdModel."""

                            class AccessGroup(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}, "priority": {"type": int}}
                                type: Literal["ip", "ipv6", "mac"] | None
                                name: str | None
                                """ACL name."""
                                priority: int | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                                        name: str | None | UndefinedType = Undefined,
                                        priority: int | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        AccessGroup.


                                        Subclass of AvdModel.

                                        Args:
                                            type: type
                                            name: ACL name.
                                            priority: priority

                                        """

                            _fields: ClassVar[dict] = {"direction": {"type": str}, "access_group": {"type": AccessGroup}}
                            direction: Literal["rx", "tx", "both"] | None
                            access_group: AccessGroup
                            """
                            This can only be set when `session_settings.access_group` is not set.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    direction: Literal["rx", "tx", "both"] | None | UndefinedType = Undefined,
                                    access_group: AccessGroup | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SourceSettings.


                                    Subclass of AvdModel.

                                    Args:
                                        direction: direction
                                        access_group:
                                           This can only be set when `session_settings.access_group` is not set.

                                           Subclass of AvdModel.

                                    """

                        class SessionSettings(AvdModel):
                            """Subclass of AvdModel."""

                            class AccessGroup(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}}
                                type: Literal["ip", "ipv6", "mac"] | None
                                name: str | None
                                """ACL name."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                                        name: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        AccessGroup.


                                        Subclass of AvdModel.

                                        Args:
                                            type: type
                                            name: ACL name.

                                        """

                            class Truncate(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "size": {"type": int}}
                                enabled: bool | None
                                size: int | None
                                """Size in bytes."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, size: int | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        Truncate.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            size: Size in bytes.

                                        """

                            _fields: ClassVar[dict] = {
                                "encapsulation_gre_metadata_tx": {"type": bool},
                                "header_remove_size": {"type": int},
                                "access_group": {"type": AccessGroup},
                                "rate_limit_per_ingress_chip": {"type": str},
                                "rate_limit_per_egress_chip": {"type": str},
                                "sample": {"type": int},
                                "truncate": {"type": Truncate},
                            }
                            encapsulation_gre_metadata_tx: bool | None
                            header_remove_size: int | None
                            """Number of bytes to remove from header."""
                            access_group: AccessGroup
                            """Subclass of AvdModel."""
                            rate_limit_per_ingress_chip: str | None
                            """
                            Ratelimit and unit as string.
                            Examples:
                              "100000 bps"
                              "100 kbps"
                              "10 mbps"
                            """
                            rate_limit_per_egress_chip: str | None
                            """
                            Ratelimit and unit as string.
                            Examples:
                              "100000 bps"
                              "100 kbps"
                              "10 mbps"
                            """
                            sample: int | None
                            truncate: Truncate
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    encapsulation_gre_metadata_tx: bool | None | UndefinedType = Undefined,
                                    header_remove_size: int | None | UndefinedType = Undefined,
                                    access_group: AccessGroup | UndefinedType = Undefined,
                                    rate_limit_per_ingress_chip: str | None | UndefinedType = Undefined,
                                    rate_limit_per_egress_chip: str | None | UndefinedType = Undefined,
                                    sample: int | None | UndefinedType = Undefined,
                                    truncate: Truncate | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SessionSettings.


                                    Subclass of AvdModel.

                                    Args:
                                        encapsulation_gre_metadata_tx: encapsulation_gre_metadata_tx
                                        header_remove_size: Number of bytes to remove from header.
                                        access_group: Subclass of AvdModel.
                                        rate_limit_per_ingress_chip:
                                           Ratelimit and unit as string.
                                           Examples:  # fmt: skip
                                             "100000 bps"
                                             "100 kbps"
                                             "10 mbps"
                                        rate_limit_per_egress_chip:
                                           Ratelimit and unit as string.
                                           Examples:  # fmt: skip
                                             "100000 bps"
                                             "100 kbps"
                                             "10 mbps"
                                        sample: sample
                                        truncate: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "role": {"type": str},
                            "source_settings": {"type": SourceSettings},
                            "session_settings": {"type": SessionSettings},
                        }
                        name: str
                        """Session name."""
                        role: Literal["source", "destination"] | None
                        source_settings: SourceSettings
                        """Subclass of AvdModel."""
                        session_settings: SessionSettings
                        """
                        Session settings are defined per session name.
                        Different session_settings for the same session name
                        will be combined/merged.


                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                role: Literal["source", "destination"] | None | UndefinedType = Undefined,
                                source_settings: SourceSettings | UndefinedType = Undefined,
                                session_settings: SessionSettings | UndefinedType = Undefined,
                            ) -> None:
                                """
                                MonitorSessionsItem.


                                Subclass of AvdModel.

                                Args:
                                    name: Session name.
                                    role: role
                                    source_settings: Subclass of AvdModel.
                                    session_settings:
                                       Session settings are defined per session name.
                                       Different session_settings for the same session name
                                       will be combined/merged.


                                       Subclass of AvdModel.

                                """

                    class MonitorSessions(AvdList[MonitorSessionsItem]):
                        """Subclass of AvdList with `MonitorSessionsItem` items."""

                    MonitorSessions._item_type = MonitorSessionsItem

                    class EthernetSegment(AvdModel):
                        """Subclass of AvdModel."""

                        class DesignatedForwarderPreferences(AvdList[int]):
                            """Subclass of AvdList with `int` items."""

                        DesignatedForwarderPreferences._item_type = int

                        _fields: ClassVar[dict] = {
                            "short_esi": {"type": str},
                            "redundancy": {"type": str},
                            "designated_forwarder_algorithm": {"type": str},
                            "designated_forwarder_preferences": {"type": DesignatedForwarderPreferences},
                            "dont_preempt": {"type": bool},
                        }
                        short_esi: str
                        """
                        In format xxxx:xxxx:xxxx or "auto".
                        Define a manual short-esi (be careful using this on profiles) or
                        set the value to "auto" to automatically generate the value.
                        Please see the notes under "EVPN A/A
                        ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
                        """
                        redundancy: Literal["all-active", "single-active"] | None
                        """
                        If omitted, Port-Channels use the EOS default of all-active.
                        If omitted, Ethernet interfaces are
                        configured as single-active.
                        """
                        designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None
                        """
                        Configure DF algorithm and preferences.
                        - auto: Use preference-based algorithm and assign preference
                        based on position of device in the 'switches' list,
                          e.g., assuming a list of three switches, this
                        would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
                        -
                        preference: Set preference for each switch manually using designated_forwarder_preferences key.
                        -
                        modulus: Use the default modulus-based algorithm.
                        If omitted, Port-Channels use the EOS default of
                        modulus.
                        If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
                        """
                        designated_forwarder_preferences: DesignatedForwarderPreferences
                        """
                        Manual preference as described above, required only for preference algorithm.

                        Subclass of AvdList
                        with `int` items.
                        """
                        dont_preempt: bool | None
                        """Disable preemption for single-active forwarding when auto/manual DF preference is configured."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                short_esi: str | UndefinedType = Undefined,
                                redundancy: Literal["all-active", "single-active"] | None | UndefinedType = Undefined,
                                designated_forwarder_algorithm: Literal["auto", "modulus", "preference"] | None | UndefinedType = Undefined,
                                designated_forwarder_preferences: DesignatedForwarderPreferences | UndefinedType = Undefined,
                                dont_preempt: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EthernetSegment.


                                Subclass of AvdModel.

                                Args:
                                    short_esi:
                                       In format xxxx:xxxx:xxxx or "auto".
                                       Define a manual short-esi (be careful using this on profiles) or
                                       set the value to "auto" to automatically generate the value.
                                       Please see the notes under "EVPN A/A
                                       ESI dual and single-attached endpoint scenarios" before setting `short_esi: auto`.
                                    redundancy:
                                       If omitted, Port-Channels use the EOS default of all-active.
                                       If omitted, Ethernet interfaces are
                                       configured as single-active.
                                    designated_forwarder_algorithm:
                                       Configure DF algorithm and preferences.
                                       - auto: Use preference-based algorithm and assign preference
                                       based on position of device in the 'switches' list,
                                         e.g., assuming a list of three switches, this
                                       would assign a preference of 200 to the first switch, 100 to the 2nd, and 0 to the third.
                                       -
                                       preference: Set preference for each switch manually using designated_forwarder_preferences key.
                                       -
                                       modulus: Use the default modulus-based algorithm.
                                       If omitted, Port-Channels use the EOS default of
                                       modulus.
                                       If omitted, Ethernet interfaces default to the 'auto' mechanism detailed above.
                                    designated_forwarder_preferences:
                                       Manual preference as described above, required only for preference algorithm.

                                       Subclass of AvdList
                                       with `int` items.
                                    dont_preempt: Disable preemption for single-active forwarding when auto/manual DF preference is configured.

                                """

                    class PortChannel(AvdModel):
                        """Subclass of AvdModel."""

                        class LacpFallback(AvdModel):
                            """Subclass of AvdModel."""

                            class Individual(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "profile": {"type": str},
                                    "vlans": {"type": str},
                                    "native_vlan": {"type": int},
                                    "mode": {"type": str},
                                }
                                profile: str | None
                                """Port-profile name to inherit configuration."""
                                vlans: str | None
                                """Allowed VLANs on the port-channel member interfaces when in fallback individual."""
                                native_vlan: int | None
                                """Native VLAN on the port-channel member interfaces when in fallback individual."""
                                mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
                                """Interface mode on the port-channel member interfaces when in fallback individual."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        profile: str | None | UndefinedType = Undefined,
                                        vlans: str | None | UndefinedType = Undefined,
                                        native_vlan: int | None | UndefinedType = Undefined,
                                        mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Individual.


                                        Subclass of AvdModel.

                                        Args:
                                            profile: Port-profile name to inherit configuration.
                                            vlans: Allowed VLANs on the port-channel member interfaces when in fallback individual.
                                            native_vlan: Native VLAN on the port-channel member interfaces when in fallback individual.
                                            mode: Interface mode on the port-channel member interfaces when in fallback individual.

                                        """

                            _fields: ClassVar[dict] = {"mode": {"type": str}, "individual": {"type": Individual}, "timeout": {"type": int, "default": 90}}
                            mode: Literal["static", "individual"] | None
                            """
                            Either static or individual mode is supported.
                            If the mode is set to "individual" either 'profile'
                            or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                            """
                            individual: Individual
                            """
                            Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                            "individual".

                            Subclass of AvdModel.
                            """
                            timeout: int
                            """
                            Timeout in seconds.

                            Default value: `90`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    mode: Literal["static", "individual"] | None | UndefinedType = Undefined,
                                    individual: Individual | UndefinedType = Undefined,
                                    timeout: int | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LacpFallback.


                                    Subclass of AvdModel.

                                    Args:
                                        mode:
                                           Either static or individual mode is supported.
                                           If the mode is set to "individual" either 'profile'
                                           or ('mode' and 'vlans')  must be set under 'port_channel.lacp_fallback.individual'.
                                        individual:
                                           Define parameters for port-channel member interfaces. Applies only if LACP fallback is set to
                                           "individual".

                                           Subclass of AvdModel.
                                        timeout: Timeout in seconds.

                                    """

                        class LacpTimer(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"mode": {"type": str}, "multiplier": {"type": int}}
                            mode: Literal["normal", "fast"] | None
                            """LACP mode for interface members."""
                            multiplier: int | None
                            """Number of LACP BPDUs lost before deeming the peer down. EOS default is 3."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    mode: Literal["normal", "fast"] | None | UndefinedType = Undefined,
                                    multiplier: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LacpTimer.


                                    Subclass of AvdModel.

                                    Args:
                                        mode: LACP mode for interface members.
                                        multiplier: Number of LACP BPDUs lost before deeming the peer down. EOS default is 3.

                                    """

                        class SubinterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class EncapsulationVlan(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"client_dot1q": {"type": int}}
                                client_dot1q: int | None

                                if TYPE_CHECKING:

                                    def __init__(self, *, client_dot1q: int | None | UndefinedType = Undefined) -> None:
                                        """
                                        EncapsulationVlan.


                                        Subclass of AvdModel.

                                        Args:
                                            client_dot1q: client_dot1q

                                        """

                            _fields: ClassVar[dict] = {
                                "number": {"type": int},
                                "short_esi": {"type": str},
                                "vlan_id": {"type": int},
                                "encapsulation_vlan": {"type": EncapsulationVlan},
                                "raw_eos_cli": {"type": str},
                                "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            }
                            number: int | None
                            """Subinterface number."""
                            short_esi: str | None
                            """
                            In format xxxx:xxxx:xxxx or "auto".
                            Required for multihomed port-channels with subinterfaces.
                            """
                            vlan_id: int | None
                            """
                            VLAN ID to bridge.
                            Default is subinterface number.
                            """
                            encapsulation_vlan: EncapsulationVlan
                            """
                            Client VLAN ID encapsulation.
                            Default is subinterface number.


                            Subclass of AvdModel.
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration."""
                            structured_config: EosCliConfigGen.PortChannelInterfacesItem
                            """
                            Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                            eos_cli_config_gen.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    number: int | None | UndefinedType = Undefined,
                                    short_esi: str | None | UndefinedType = Undefined,
                                    vlan_id: int | None | UndefinedType = Undefined,
                                    encapsulation_vlan: EncapsulationVlan | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SubinterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        number: Subinterface number.
                                        short_esi:
                                           In format xxxx:xxxx:xxxx or "auto".
                                           Required for multihomed port-channels with subinterfaces.
                                        vlan_id:
                                           VLAN ID to bridge.
                                           Default is subinterface number.
                                        encapsulation_vlan:
                                           Client VLAN ID encapsulation.
                                           Default is subinterface number.


                                           Subclass of AvdModel.
                                        raw_eos_cli: EOS CLI rendered directly on the port-channel subinterface in the final EOS configuration.
                                        structured_config:
                                           Custom structured config added under port_channel_interfaces.[name=<subinterface>] for
                                           eos_cli_config_gen.

                                    """

                        class Subinterfaces(AvdList[SubinterfacesItem]):
                            """Subclass of AvdList with `SubinterfacesItem` items."""

                        Subinterfaces._item_type = SubinterfacesItem

                        _fields: ClassVar[dict] = {
                            "mode": {"type": str},
                            "channel_id": {"type": int},
                            "description": {"type": str},
                            "endpoint_port_channel": {"type": str},
                            "enabled": {"type": bool, "default": True},
                            "ptp_mpass": {"type": bool, "default": False},
                            "lacp_fallback": {"type": LacpFallback},
                            "lacp_timer": {"type": LacpTimer},
                            "subinterfaces": {"type": Subinterfaces},
                            "raw_eos_cli": {"type": str},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        mode: Literal["active", "passive", "on"] | None
                        """Port-Channel Mode."""
                        channel_id: int | None
                        """
                        Port-Channel ID.
                        If no channel_id is specified, an id is generated from the first switch port in the
                        port channel.
                        """
                        description: str | None
                        """
                        Description or description template to be used on the port-channel interface.
                        This can be a template
                        using the AVD string formatter syntax:
                        https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                        descriptions-names.html#avd-string-formatter-syntax.
                        The available template fields are:
                          -
                        `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                          -
                        `endpoint` - The name of the connected endpoint
                          - `endpoint_port_channel` - The value from
                        `endpoint_port_channel` if set.
                          - `port_channel_id` - The port-channel number for the switch.
                          -
                        `adapter_description` - The adapter's description if set.
                          - `adapter_description_or_endpoint` -
                        Helper alias of the adapter_description or endpoint.

                        The default description is set by
                        `default_connected_endpoints_port_channel_description`.
                        By default the description is templated from
                        the type, name and port_channel interface of the endpoint if set.
                        """
                        endpoint_port_channel: str | None
                        """
                        Name of the port-channel interface on the endpoint.
                        Used for the port-channel description template
                        with the field name `peer_interface`
                        """
                        enabled: bool
                        """
                        Port-Channel administrative state.
                        Setting to false will set port to 'shutdown' in intended
                        configuration.

                        Default value: `True`
                        """
                        ptp_mpass: bool
                        """
                        When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
                        logical device.
                        Arista PTP enabled devices always place PTP messages on the same physical link
                        within the port-channel.
                        Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
                        devices.

                        Default value: `False`
                        """
                        lacp_fallback: LacpFallback
                        """
                        LACP fallback configuration.

                        Subclass of AvdModel.
                        """
                        lacp_timer: LacpTimer
                        """
                        LACP timer configuration. Applies only when Port-channel mode is not "on".

                        Subclass of AvdModel.
                        """
                        subinterfaces: Subinterfaces
                        """
                        Port-Channel L2 Subinterfaces
                        Subinterfaces are only supported on routed port-channels, which means
                        they cannot be configured on MLAG port-channels.
                        Setting short_esi: auto generates the short_esi
                        automatically using a hash of configuration elements.
                        Please see the notes under "EVPN A/A ESI dual-
                        attached endpoint scenario" before setting short_esi: auto.


                        Subclass of AvdList with
                        `SubinterfacesItem` items.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the port-channel interface in the final EOS configuration."""
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config added under port_channel_interfaces.[name=<interface>] for
                        eos_cli_config_gen.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                mode: Literal["active", "passive", "on"] | None | UndefinedType = Undefined,
                                channel_id: int | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                endpoint_port_channel: str | None | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                ptp_mpass: bool | UndefinedType = Undefined,
                                lacp_fallback: LacpFallback | UndefinedType = Undefined,
                                lacp_timer: LacpTimer | UndefinedType = Undefined,
                                subinterfaces: Subinterfaces | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                PortChannel.


                                Subclass of AvdModel.

                                Args:
                                    mode: Port-Channel Mode.
                                    channel_id:
                                       Port-Channel ID.
                                       If no channel_id is specified, an id is generated from the first switch port in the
                                       port channel.
                                    description:
                                       Description or description template to be used on the port-channel interface.
                                       This can be a template
                                       using the AVD string formatter syntax:
                                       https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                       descriptions-names.html#avd-string-formatter-syntax.
                                       The available template fields are:
                                         -
                                       `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                                         -
                                       `endpoint` - The name of the connected endpoint
                                         - `endpoint_port_channel` - The value from
                                       `endpoint_port_channel` if set.
                                         - `port_channel_id` - The port-channel number for the switch.
                                         -
                                       `adapter_description` - The adapter's description if set.
                                         - `adapter_description_or_endpoint` -
                                       Helper alias of the adapter_description or endpoint.

                                       The default description is set by
                                       `default_connected_endpoints_port_channel_description`.
                                       By default the description is templated from
                                       the type, name and port_channel interface of the endpoint if set.
                                    endpoint_port_channel:
                                       Name of the port-channel interface on the endpoint.
                                       Used for the port-channel description template
                                       with the field name `peer_interface`
                                    enabled:
                                       Port-Channel administrative state.
                                       Setting to false will set port to 'shutdown' in intended
                                       configuration.
                                    ptp_mpass:
                                       When MPASS is enabled on an MLAG port-channel, MLAG peers coordinate to function as a single PTP
                                       logical device.
                                       Arista PTP enabled devices always place PTP messages on the same physical link
                                       within the port-channel.
                                       Hence, MPASS is needed only on MLAG port-channels connected to non-Arista
                                       devices.
                                    lacp_fallback:
                                       LACP fallback configuration.

                                       Subclass of AvdModel.
                                    lacp_timer:
                                       LACP timer configuration. Applies only when Port-channel mode is not "on".

                                       Subclass of AvdModel.
                                    subinterfaces:
                                       Port-Channel L2 Subinterfaces
                                       Subinterfaces are only supported on routed port-channels, which means
                                       they cannot be configured on MLAG port-channels.
                                       Setting short_esi: auto generates the short_esi
                                       automatically using a hash of configuration elements.
                                       Please see the notes under "EVPN A/A ESI dual-
                                       attached endpoint scenario" before setting short_esi: auto.


                                       Subclass of AvdList with
                                       `SubinterfacesItem` items.
                                    raw_eos_cli: EOS CLI rendered directly on the port-channel interface in the final EOS configuration.
                                    structured_config:
                                       Custom structured config added under port_channel_interfaces.[name=<interface>] for
                                       eos_cli_config_gen.

                                """

                    class CampusLinkType(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    CampusLinkType._item_type = str

                    _fields: ClassVar[dict] = {
                        "switch_ports": {"type": SwitchPorts},
                        "switches": {"type": Switches},
                        "endpoint_ports": {"type": EndpointPorts},
                        "descriptions": {"type": Descriptions},
                        "speed": {"type": str},
                        "description": {"type": str},
                        "profile": {"type": str},
                        "enabled": {"type": bool, "default": True},
                        "mode": {"type": str},
                        "mtu": {"type": int},
                        "l2_mtu": {"type": int},
                        "l2_mru": {"type": int},
                        "native_vlan": {"type": int},
                        "native_vlan_tag": {"type": bool},
                        "phone_vlan": {"type": int},
                        "phone_trunk_mode": {"type": str},
                        "trunk_groups": {"type": TrunkGroups},
                        "vlans": {"type": str},
                        "spanning_tree_portfast": {"type": str},
                        "spanning_tree_bpdufilter": {"type": str},
                        "spanning_tree_bpduguard": {"type": str},
                        "flowcontrol": {"type": EosCliConfigGen.EthernetInterfacesItem.Flowcontrol},
                        "qos_profile": {"type": str},
                        "ptp": {"type": Ptp},
                        "sflow": {"type": bool},
                        "flow_tracking": {"type": FlowTracking},
                        "link_tracking": {"type": LinkTracking},
                        "dot1x": {"type": EosCliConfigGen.EthernetInterfacesItem.Dot1x},
                        "poe": {"type": EosCliConfigGen.EthernetInterfacesItem.Poe},
                        "storm_control": {"type": StormControl},
                        "monitor_sessions": {"type": MonitorSessions},
                        "ethernet_segment": {"type": EthernetSegment},
                        "port_channel": {"type": PortChannel},
                        "validate_state": {"type": bool},
                        "validate_lldp": {"type": bool},
                        "campus_link_type": {"type": CampusLinkType},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                    }
                    switch_ports: SwitchPorts
                    """
                    List of switch interfaces.
                    The lists `endpoint_ports`, `switch_ports`, and `switches` must have the
                    same length.


                    Subclass of AvdList with `str` items.
                    """
                    switches: Switches
                    """
                    List of switches.
                    The lists `endpoint_ports`, `switch_ports`, and `switches` must have the same
                    length.


                    Subclass of AvdList with `str` items.
                    """
                    endpoint_ports: EndpointPorts
                    """
                    Endpoint ports is used for description, required unless `description` or `descriptions` is set.
                    The
                    lists `endpoint_ports`, `switch_ports`, `descriptions` and `switches` must have the same length.
                    Each list item is one switchport.


                    Subclass of AvdList with `str` items.
                    """
                    descriptions: Descriptions
                    """
                    Unique description per port. When set, takes priority over description.
                    This can be a template using
                    the AVD string formatter syntax:
                    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                    descriptions-names.html#avd-string-formatter-syntax.
                    The available template fields are:
                      -
                    `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                      -
                    `endpoint` - The name of the connected endpoint
                      - `endpoint_port` - The value from
                    `endpoint_ports` for this switch port if set.
                      - `port_channel_id`: The port-channel number for the
                    switch.

                    Subclass of AvdList with `str` items.
                    """
                    speed: str | None
                    """
                    Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                    <interface_speed>`.
                    If not specified speed will be auto.
                    """
                    description: str | None
                    """
                    Description or description template to be used on all ports.
                    This can be a template using the AVD
                    string formatter syntax:
                    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                    descriptions-names.html#avd-string-formatter-syntax.
                    The available template fields are:
                      -
                    `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                      -
                    `endpoint` - The name of the connected endpoint
                      - `endpoint_port` - The value from
                    `endpoint_ports` for this switch port if set.

                    The default description is set by
                    `default_connected_endpoints_description`.
                    By default the description is templated from the type,
                    name and port of the endpoint if set.
                    """
                    profile: str | None
                    """Port-profile name to inherit configuration."""
                    enabled: bool
                    """
                    Administrative state, setting to false will set the port to 'shutdown' in the intended
                    configuration.

                    Default value: `True`
                    """
                    mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None
                    """Interface mode."""
                    mtu: int | None
                    l2_mtu: int | None
                    """"l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI."""
                    l2_mru: int | None
                    """"l2_mru" should only be defined for platforms supporting the "l2 mru" CLI."""
                    native_vlan: int | None
                    """
                    Native VLAN for a trunk port.
                    If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
                    takes precedence.
                    """
                    native_vlan_tag: bool | None
                    """If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence."""
                    phone_vlan: int | None
                    """
                    Phone VLAN for a mode `trunk phone` port.
                    Requires `mode: trunk phone` to be set.
                    """
                    phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None
                    """
                    Specify if the phone traffic is tagged or untagged.
                    If both data and phone traffic are untagged,
                    MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
                    """
                    trunk_groups: TrunkGroups
                    """
                    Required with `enable_trunk_groups: true`.
                    Trunk Groups are used for limiting VLANs on trunk ports
                    to VLANs with the same Trunk Group.


                    Subclass of AvdList with `str` items.
                    """
                    vlans: str | None
                    """
                    Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
                    VLAN 1 will be used for access ports.
                    """
                    spanning_tree_portfast: Literal["edge", "network"] | None
                    spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
                    spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None
                    flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol
                    qos_profile: str | None
                    """QOS profile name."""
                    ptp: Ptp
                    """
                    The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
                    enabled.
                    `ptp role master` is set to ensure control over the PTP topology.


                    Subclass of AvdModel.
                    """
                    sflow: bool | None
                    """Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting."""
                    flow_tracking: FlowTracking
                    """
                    Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
                    Subclass of AvdModel.
                    """
                    link_tracking: LinkTracking
                    """
                    Configure the downstream interfaces of a respective Link Tracking Group.
                    If `port_channel` is
                    defined in an adapter, then the port-channel interface is configured to be the downstream.
                    Else all
                    the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
                    multihomed networks.


                    Subclass of AvdModel.
                    """
                    dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x
                    """802.1x"""
                    poe: EosCliConfigGen.EthernetInterfacesItem.Poe
                    """Power Over Ethernet settings applied on port. Only configured if platform supports PoE."""
                    storm_control: StormControl
                    """
                    Storm control settings applied on port toward the endpoint.

                    Subclass of AvdModel.
                    """
                    monitor_sessions: MonitorSessions
                    """
                    Used to define interfaces as source or destination for monitoring sessions.

                    Subclass of AvdList
                    with `MonitorSessionsItem` items.
                    """
                    ethernet_segment: EthernetSegment
                    """
                    Settings for all or single-active EVPN multihoming.

                    Subclass of AvdModel.
                    """
                    port_channel: PortChannel
                    """
                    Used for port-channel adapter.

                    Subclass of AvdModel.
                    """
                    validate_state: bool | None
                    """
                    Set to false to disable interface state and LLDP topology validation performed by the
                    `eos_validate_state` role.
                    """
                    validate_lldp: bool | None
                    """Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role."""
                    campus_link_type: CampusLinkType
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Values for the CloudVision `Link-Type` user tags to be associated with an
                    interface.
                    Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                    in the same tags being associated with the parent Ethernet interface instead.
                    Attempting to
                    associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                    associated with the member Ethernet interfaces instead.

                    Subclass of AvdList with `str` items.
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the ethernet interface in the final EOS configuration."""
                    structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            switch_ports: SwitchPorts | UndefinedType = Undefined,
                            switches: Switches | UndefinedType = Undefined,
                            endpoint_ports: EndpointPorts | UndefinedType = Undefined,
                            descriptions: Descriptions | UndefinedType = Undefined,
                            speed: str | None | UndefinedType = Undefined,
                            description: str | None | UndefinedType = Undefined,
                            profile: str | None | UndefinedType = Undefined,
                            enabled: bool | UndefinedType = Undefined,
                            mode: Literal["access", "dot1q-tunnel", "trunk", "trunk phone"] | None | UndefinedType = Undefined,
                            mtu: int | None | UndefinedType = Undefined,
                            l2_mtu: int | None | UndefinedType = Undefined,
                            l2_mru: int | None | UndefinedType = Undefined,
                            native_vlan: int | None | UndefinedType = Undefined,
                            native_vlan_tag: bool | None | UndefinedType = Undefined,
                            phone_vlan: int | None | UndefinedType = Undefined,
                            phone_trunk_mode: Literal["tagged", "untagged", "tagged phone", "untagged phone"] | None | UndefinedType = Undefined,
                            trunk_groups: TrunkGroups | UndefinedType = Undefined,
                            vlans: str | None | UndefinedType = Undefined,
                            spanning_tree_portfast: Literal["edge", "network"] | None | UndefinedType = Undefined,
                            spanning_tree_bpdufilter: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                            spanning_tree_bpduguard: Literal["enabled", "disabled", "True", "False", "true", "false"] | None | UndefinedType = Undefined,
                            flowcontrol: EosCliConfigGen.EthernetInterfacesItem.Flowcontrol | UndefinedType = Undefined,
                            qos_profile: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            sflow: bool | None | UndefinedType = Undefined,
                            flow_tracking: FlowTracking | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            dot1x: EosCliConfigGen.EthernetInterfacesItem.Dot1x | UndefinedType = Undefined,
                            poe: EosCliConfigGen.EthernetInterfacesItem.Poe | UndefinedType = Undefined,
                            storm_control: StormControl | UndefinedType = Undefined,
                            monitor_sessions: MonitorSessions | UndefinedType = Undefined,
                            ethernet_segment: EthernetSegment | UndefinedType = Undefined,
                            port_channel: PortChannel | UndefinedType = Undefined,
                            validate_state: bool | None | UndefinedType = Undefined,
                            validate_lldp: bool | None | UndefinedType = Undefined,
                            campus_link_type: CampusLinkType | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                        ) -> None:
                            """
                            AdaptersItem.


                            Subclass of AvdModel.

                            Args:
                                switch_ports:
                                   List of switch interfaces.
                                   The lists `endpoint_ports`, `switch_ports`, and `switches` must have the
                                   same length.


                                   Subclass of AvdList with `str` items.
                                switches:
                                   List of switches.
                                   The lists `endpoint_ports`, `switch_ports`, and `switches` must have the same
                                   length.


                                   Subclass of AvdList with `str` items.
                                endpoint_ports:
                                   Endpoint ports is used for description, required unless `description` or `descriptions` is set.
                                   The
                                   lists `endpoint_ports`, `switch_ports`, `descriptions` and `switches` must have the same length.
                                   Each list item is one switchport.


                                   Subclass of AvdList with `str` items.
                                descriptions:
                                   Unique description per port. When set, takes priority over description.
                                   This can be a template using
                                   the AVD string formatter syntax:
                                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                   descriptions-names.html#avd-string-formatter-syntax.
                                   The available template fields are:
                                     -
                                   `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                                     -
                                   `endpoint` - The name of the connected endpoint
                                     - `endpoint_port` - The value from
                                   `endpoint_ports` for this switch port if set.
                                     - `port_channel_id`: The port-channel number for the
                                   switch.

                                   Subclass of AvdList with `str` items.
                                speed:
                                   Set adapter speed in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                   <interface_speed>`.
                                   If not specified speed will be auto.
                                description:
                                   Description or description template to be used on all ports.
                                   This can be a template using the AVD
                                   string formatter syntax:
                                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                   descriptions-names.html#avd-string-formatter-syntax.
                                   The available template fields are:
                                     -
                                   `endpoint_type` - the `type` from `connected_endpoints_keys` like `server`, `router` etc.
                                     -
                                   `endpoint` - The name of the connected endpoint
                                     - `endpoint_port` - The value from
                                   `endpoint_ports` for this switch port if set.

                                   The default description is set by
                                   `default_connected_endpoints_description`.
                                   By default the description is templated from the type,
                                   name and port of the endpoint if set.
                                profile: Port-profile name to inherit configuration.
                                enabled:
                                   Administrative state, setting to false will set the port to 'shutdown' in the intended
                                   configuration.
                                mode: Interface mode.
                                mtu: mtu
                                l2_mtu: "l2_mtu" should only be defined for platforms supporting the "l2 mtu" CLI.
                                l2_mru: "l2_mru" should only be defined for platforms supporting the "l2 mru" CLI.
                                native_vlan:
                                   Native VLAN for a trunk port.
                                   If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag`
                                   takes precedence.
                                native_vlan_tag: If both `native_vlan` and `native_vlan_tag` are set, `native_vlan_tag` takes precedence.
                                phone_vlan:
                                   Phone VLAN for a mode `trunk phone` port.
                                   Requires `mode: trunk phone` to be set.
                                phone_trunk_mode:
                                   Specify if the phone traffic is tagged or untagged.
                                   If both data and phone traffic are untagged,
                                   MAC-Based VLAN Assignment (MBVA) is used, if supported by the model of switch.
                                trunk_groups:
                                   Required with `enable_trunk_groups: true`.
                                   Trunk Groups are used for limiting VLANs on trunk ports
                                   to VLANs with the same Trunk Group.


                                   Subclass of AvdList with `str` items.
                                vlans:
                                   Interface VLANs - if not set, the EOS default is that all VLANs are allowed for trunk ports, and
                                   VLAN 1 will be used for access ports.
                                spanning_tree_portfast: spanning_tree_portfast
                                spanning_tree_bpdufilter: spanning_tree_bpdufilter
                                spanning_tree_bpduguard: spanning_tree_bpduguard
                                flowcontrol: flowcontrol
                                qos_profile: QOS profile name.
                                ptp:
                                   The global PTP profile parameters will be applied to all connected endpoints where `ptp` is manually
                                   enabled.
                                   `ptp role master` is set to ensure control over the PTP topology.


                                   Subclass of AvdModel.
                                sflow: Configures sFlow on the interface. Overrides `fabric_sflow.endpoints` setting.
                                flow_tracking:
                                   Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.endpoints` setting.
                                   Subclass of AvdModel.
                                link_tracking:
                                   Configure the downstream interfaces of a respective Link Tracking Group.
                                   If `port_channel` is
                                   defined in an adapter, then the port-channel interface is configured to be the downstream.
                                   Else all
                                   the ethernet interfaces will be configured as downstream -> to configure single-active EVPN
                                   multihomed networks.


                                   Subclass of AvdModel.
                                dot1x: 802.1x
                                poe: Power Over Ethernet settings applied on port. Only configured if platform supports PoE.
                                storm_control:
                                   Storm control settings applied on port toward the endpoint.

                                   Subclass of AvdModel.
                                monitor_sessions:
                                   Used to define interfaces as source or destination for monitoring sessions.

                                   Subclass of AvdList
                                   with `MonitorSessionsItem` items.
                                ethernet_segment:
                                   Settings for all or single-active EVPN multihoming.

                                   Subclass of AvdModel.
                                port_channel:
                                   Used for port-channel adapter.

                                   Subclass of AvdModel.
                                validate_state:
                                   Set to false to disable interface state and LLDP topology validation performed by the
                                   `eos_validate_state` role.
                                validate_lldp: Set to false to disable the LLDP topology validation performed by the `eos_validate_state` role.
                                campus_link_type:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Values for the CloudVision `Link-Type` user tags to be associated with an
                                   interface.
                                   Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                                   in the same tags being associated with the parent Ethernet interface instead.
                                   Attempting to
                                   associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                                   associated with the member Ethernet interfaces instead.

                                   Subclass of AvdList with `str` items.
                                raw_eos_cli: EOS CLI rendered directly on the ethernet interface in the final EOS configuration.
                                structured_config: Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen.

                            """

                class Adapters(AvdList[AdaptersItem]):
                    """Subclass of AvdList with `AdaptersItem` items."""

                Adapters._item_type = AdaptersItem

                _fields: ClassVar[dict] = {"name": {"type": str}, "rack": {"type": str}, "adapters": {"type": Adapters}}
                name: str
                """Endpoint name will be used in the switchport description."""
                rack: str | None
                """Rack is used for documentation purposes only."""
                adapters: Adapters
                """
                A list of adapters, group by adapters leveraging the same port-profile.

                Subclass of AvdList with
                `AdaptersItem` items.
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        name: str | UndefinedType = Undefined,
                        rack: str | None | UndefinedType = Undefined,
                        adapters: Adapters | UndefinedType = Undefined,
                    ) -> None:
                        """
                        CustomConnectedEndpointsItem.


                        Subclass of AvdModel.

                        Args:
                            name: Endpoint name will be used in the switchport description.
                            rack: Rack is used for documentation purposes only.
                            adapters:
                               A list of adapters, group by adapters leveraging the same port-profile.

                               Subclass of AvdList with
                               `AdaptersItem` items.

                        """

            class CustomConnectedEndpoints(AvdIndexedList[str, CustomConnectedEndpointsItem]):
                """Subclass of AvdIndexedList with `CustomConnectedEndpointsItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            CustomConnectedEndpoints._item_type = CustomConnectedEndpointsItem

            _fields: ClassVar[dict] = {"key": {"type": str}, "value": {"type": CustomConnectedEndpoints}}
            _field_to_key_map: ClassVar[dict] = {"value": "custom_connected_endpoints_keys_key"}
            _key_to_field_map: ClassVar[dict] = {"custom_connected_endpoints_keys_key": "value"}
            key: str
            """Key used as dynamic key"""
            value: CustomConnectedEndpoints
            """Value of dynamic key"""

            if TYPE_CHECKING:

                def __init__(self, *, key: str | UndefinedType = Undefined, value: CustomConnectedEndpoints | UndefinedType = Undefined) -> None:
                    """
                    DynamicCustomConnectedEndpointsItem.


                    Args:
                        key: Key used as dynamic key
                        value: Value of dynamic key

                    """

        class DynamicCustomConnectedEndpoints(AvdIndexedList[str, DynamicCustomConnectedEndpointsItem]):
            _primary_key: ClassVar[str] = "key"

        DynamicCustomConnectedEndpoints._item_type = DynamicCustomConnectedEndpointsItem

        class DynamicCustomNodeTypesItem(AvdModel):
            class CustomNodeTypes(AvdModel):
                """Subclass of AvdModel."""

                class Defaults(AvdModel):
                    """Subclass of AvdModel."""

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        class GroupsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                            name: str
                            """Tracking group name."""
                            recovery_delay: int | None
                            """default -> platform_settings_mlag_reload_delay -> 300."""
                            links_minimum: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    recovery_delay: int | None | UndefinedType = Undefined,
                                    links_minimum: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    GroupsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Tracking group name.
                                        recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                        links_minimum: links_minimum

                                    """

                        class Groups(AvdIndexedList[str, GroupsItem]):
                            """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        Groups._item_type = GroupsItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        groups: Groups
                        """
                        Link Tracking Groups.
                        By default a single group named "LT_GROUP1" is defined with default values.
                        Any groups defined under "groups" will replace the default.


                        Subclass of AvdIndexedList with
                        `GroupsItem` items. Primary key is `name` (`str`).

                        Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    groups:
                                       Link Tracking Groups.
                                       By default a single group named "LT_GROUP1" is defined with default values.
                                       Any groups defined under "groups" will replace the default.


                                       Subclass of AvdIndexedList with
                                       `GroupsItem` items. Primary key is `name` (`str`).

                                """

                    class LacpPortIdRange(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "size": {"type": int, "default": 128},
                            "offset": {"type": int, "default": 0},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        size: int
                        """
                        Recommended size > = number of ports in the switch.

                        Default value: `128`
                        """
                        offset: int
                        """
                        Offset is used to avoid overlapping port-id ranges of different switches.
                        Useful when a "connected-
                        endpoint" is connected to switches in different "node_groups".

                        Default value: `0`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                size: int | UndefinedType = Undefined,
                                offset: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LacpPortIdRange.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    size: Recommended size > = number of ports in the switch.
                                    offset:
                                       Offset is used to avoid overlapping port-id ranges of different switches.
                                       Useful when a "connected-
                                       endpoint" is connected to switches in different "node_groups".

                                """

                    class UplinkInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkInterfaces._item_type = str

                    class UplinkSwitchInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitchInterfaces._item_type = str

                    class UplinkSwitches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitches._item_type = str

                    class UplinkPtp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                        enable: bool
                        """Default value: `False`"""

                        if TYPE_CHECKING:

                            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                """
                                UplinkPtp.


                                Subclass of AvdModel.

                                Args:
                                    enable: enable

                                """

                    class UplinkMacsec(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}}
                        profile: str | None

                        if TYPE_CHECKING:

                            def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                """
                                UplinkMacsec.


                                Subclass of AvdModel.

                                Args:
                                    profile: profile

                                """

                    class BgpDefaults(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    BgpDefaults._item_type = str

                    class EvpnRouteServers(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EvpnRouteServers._item_type = str

                    class Filter(AvdModel):
                        """Subclass of AvdModel."""

                        class Tenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tenants._item_type = str

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class AllowVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AllowVrfs._item_type = str

                        class DenyVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DenyVrfs._item_type = str

                        class AlwaysIncludeVrfsInTenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AlwaysIncludeVrfsInTenants._item_type = str

                        _fields: ClassVar[dict] = {
                            "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                            "only_vlans_in_use": {"type": bool, "default": False},
                        }
                        tenants: Tenants
                        """
                        Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                        Tenants (default).
                        This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        tags: Tags
                        """
                        Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        allow_vrfs: AllowVrfs
                        """
                        Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                        (default).
                        This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                        Subclass of
                        AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        deny_vrfs: DenyVrfs
                        """
                        Prevent configuration of Network Services defined under these VRFs.
                        This list prevents the given
                        VRFs to be included by any other filtering mechanism.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                        """
                        List of tenants where VRFs will be configured even if VLANs are not included in tags.
                        Useful for L3
                        "border" leaf.


                        Subclass of AvdList with `str` items.
                        """
                        only_vlans_in_use: bool
                        """
                        Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                        Note! This
                        feature only considers configuration managed by eos_designs.
                        This excludes structured_config,
                        custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                        Default value: `False`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                tenants: Tenants | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                only_vlans_in_use: bool | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Filter.


                                Subclass of AvdModel.

                                Args:
                                    tenants:
                                       Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                       Tenants (default).
                                       This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                       Subclass of AvdList with `str` items.
                                    tags:
                                       Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                       Subclass of AvdList with `str` items.
                                    allow_vrfs:
                                       Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                       (default).
                                       This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                       Subclass of
                                       AvdList with `str` items.
                                    deny_vrfs:
                                       Prevent configuration of Network Services defined under these VRFs.
                                       This list prevents the given
                                       VRFs to be included by any other filtering mechanism.

                                       Subclass of AvdList with `str` items.
                                    always_include_vrfs_in_tenants:
                                       List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                       Useful for L3
                                       "border" leaf.


                                       Subclass of AvdList with `str` items.
                                    only_vlans_in_use:
                                       Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                       Note! This
                                       feature only considers configuration managed by eos_designs.
                                       This excludes structured_config,
                                       custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                """

                    class EvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote EVPN GW server."""
                            ip_address: str | None
                            """Peering IP of remote Route Server."""
                            bgp_as: str | None
                            """
                            Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                            interpreted as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    bgp_as: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote EVPN GW server.
                                        ip_address: Peering IP of remote Route Server.
                                        bgp_as:
                                           Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                           interpreted as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        class EvpnL2(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                            enabled: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL2.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class EvpnL3(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                            enabled: bool
                            """Default value: `False`"""
                            inter_domain: bool
                            """Default value: `True`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        inter_domain: inter_domain

                                    """

                        class AllActiveMultihoming(AvdModel):
                            """Subclass of AvdModel."""

                            class EvpnEthernetSegment(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                identifier: str
                                """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                rt_import: str
                                """Low-order 6 bytes of ES-Import Route Target."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnEthernetSegment.


                                        Subclass of AvdModel.

                                        Args:
                                            identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                            rt_import: Low-order 6 bytes of ES-Import Route Target.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "enable_d_path": {"type": bool, "default": True},
                                "evpn_domain_id_local": {"type": str},
                                "evpn_domain_id_remote": {"type": str},
                                "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                            }
                            enabled: bool
                            """Enable Active Active Multihoming resiliency model."""
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            evpn_domain_id_local: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_domain_id_remote: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_ethernet_segment: EvpnEthernetSegment
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    evpn_domain_id_local: str | UndefinedType = Undefined,
                                    evpn_domain_id_remote: str | UndefinedType = Undefined,
                                    evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AllActiveMultihoming.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable Active Active Multihoming resiliency model.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_ethernet_segment: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "remote_peers": {"type": RemotePeers},
                            "evpn_l2": {"type": EvpnL2},
                            "evpn_l3": {"type": EvpnL3},
                            "all_active_multihoming": {"type": AllActiveMultihoming},
                        }
                        remote_peers: RemotePeers
                        """
                        Define remote peers of the EVPN VXLAN Gateway.
                        If the hostname can be found in the inventory,
                        ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                        If the
                        peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                        Subclass
                        of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                        """
                        evpn_l2: EvpnL2
                        """
                        Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                        Subclass of AvdModel.
                        """
                        evpn_l3: EvpnL3
                        """
                        Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                        Subclass of AvdModel.
                        """
                        all_active_multihoming: AllActiveMultihoming
                        """
                        Enable Active Active Multihoming architecture for EVPN Gateways.
                        Not supported with MLAG or IPVPN
                        Gateway. Requires EVPN L3 inter-domain to be enabled.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                                evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    remote_peers:
                                       Define remote peers of the EVPN VXLAN Gateway.
                                       If the hostname can be found in the inventory,
                                       ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                       If the
                                       peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                       Subclass
                                       of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                    evpn_l2:
                                       Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                       Subclass of AvdModel.
                                    evpn_l3:
                                       Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                       Subclass of AvdModel.
                                    all_active_multihoming:
                                       Enable Active Active Multihoming architecture for EVPN Gateways.
                                       Not supported with MLAG or IPVPN
                                       Gateway. Requires EVPN L3 inter-domain to be enabled.

                                       Subclass of AvdModel.

                                """

                    class IpvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class AddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AddressFamilies._item_type = str

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote IPVPN Peer."""
                            ip_address: str
                            """Peering IP of remote IPVPN Peer."""
                            bgp_as: str
                            """
                            Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For
                            asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                            as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | UndefinedType = Undefined,
                                    bgp_as: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote IPVPN Peer.
                                        ip_address: Peering IP of remote IPVPN Peer.
                                        bgp_as:
                                           Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For
                                           asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                           as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "evpn_domain_id": {"type": str, "default": "65535:1"},
                            "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                            "enable_d_path": {"type": bool, "default": True},
                            "maximum_routes": {"type": int, "default": 0},
                            "local_as": {"type": str},
                            "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                            "remote_peers": {"type": RemotePeers},
                        }
                        enabled: bool
                        evpn_domain_id: str
                        """
                        Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:1"`
                        """
                        ipvpn_domain_id: str
                        """
                        Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:2"`
                        """
                        enable_d_path: bool
                        """
                        Enable D-path for use with BGP bestpath selection algorithm.

                        Default value: `True`
                        """
                        maximum_routes: int
                        """
                        Maximum routes to accept from IPVPN remote peers.

                        Default value: `0`
                        """
                        local_as: str | None
                        """
                        Local BGP AS applied to peering with IPVPN remote peers.
                        BGP AS <1-4294967295> or AS number in asdot
                        notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes,
                        to prevent it from being interpreted as a float number.
                        """
                        address_families: AddressFamilies
                        """
                        IPVPN address families to enable for remote peers.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                        """
                        remote_peers: RemotePeers
                        """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                evpn_domain_id: str | UndefinedType = Undefined,
                                ipvpn_domain_id: str | UndefinedType = Undefined,
                                enable_d_path: bool | UndefinedType = Undefined,
                                maximum_routes: int | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                address_families: AddressFamilies | UndefinedType = Undefined,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                    ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                    enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                    maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                    local_as:
                                       Local BGP AS applied to peering with IPVPN remote peers.
                                       BGP AS <1-4294967295> or AS number in asdot
                                       notation "<1-65535>.<0-65535>".
                                       For asdot notation in YAML inputs, the value must be put in quotes,
                                       to prevent it from being interpreted as a float number.
                                    address_families:
                                       IPVPN address families to enable for remote peers.

                                       Subclass of AvdList with `str` items.
                                    remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                """

                    class MlagInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MlagInterfaces._item_type = str

                    class OverlayAddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    OverlayAddressFamilies._item_type = str

                    class MplsRouteReflectors(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MplsRouteReflectors._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        class Uplinks(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Uplinks._item_type = str

                        class Dscp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                            general_messages: int | None
                            event_messages: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, general_messages: int | None | UndefinedType = Undefined, event_messages: int | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Dscp.


                                    Subclass of AvdModel.

                                    Args:
                                        general_messages: general_messages
                                        event_messages: event_messages

                                    """

                        class Monitor(AvdModel):
                            """Subclass of AvdModel."""

                            class Threshold(AvdModel):
                                """Subclass of AvdModel."""

                                class Drop(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                    offset_from_master: int | None
                                    mean_path_delay: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | None | UndefinedType = Undefined,
                                            mean_path_delay: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Drop.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay

                                            """

                                _fields: ClassVar[dict] = {
                                    "offset_from_master": {"type": int, "default": 250},
                                    "mean_path_delay": {"type": int, "default": 1500},
                                    "drop": {"type": Drop},
                                }
                                offset_from_master: int
                                """Default value: `250`"""
                                mean_path_delay: int
                                """Default value: `1500`"""
                                drop: Drop
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        offset_from_master: int | UndefinedType = Undefined,
                                        mean_path_delay: int | UndefinedType = Undefined,
                                        drop: Drop | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Threshold.


                                        Subclass of AvdModel.

                                        Args:
                                            offset_from_master: offset_from_master
                                            mean_path_delay: mean_path_delay
                                            drop: Subclass of AvdModel.

                                        """

                            class MissingMessage(AvdModel):
                                """Subclass of AvdModel."""

                                class Intervals(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                    announce: int | None
                                    follow_up: int | None
                                    sync: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            announce: int | None | UndefinedType = Undefined,
                                            follow_up: int | None | UndefinedType = Undefined,
                                            sync: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Intervals.


                                            Subclass of AvdModel.

                                            Args:
                                                announce: announce
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                class SequenceIds(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "enabled": {"type": bool, "default": True},
                                        "announce": {"type": int, "default": 3},
                                        "delay_resp": {"type": int, "default": 3},
                                        "follow_up": {"type": int, "default": 3},
                                        "sync": {"type": int, "default": 3},
                                    }
                                    enabled: bool
                                    """Default value: `True`"""
                                    announce: int
                                    """Default value: `3`"""
                                    delay_resp: int
                                    """Default value: `3`"""
                                    follow_up: int
                                    """Default value: `3`"""
                                    sync: int
                                    """Default value: `3`"""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            enabled: bool | UndefinedType = Undefined,
                                            announce: int | UndefinedType = Undefined,
                                            delay_resp: int | UndefinedType = Undefined,
                                            follow_up: int | UndefinedType = Undefined,
                                            sync: int | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            SequenceIds.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                announce: announce
                                                delay_resp: delay_resp
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                intervals: Intervals
                                """Subclass of AvdModel."""
                                sequence_ids: SequenceIds
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        MissingMessage.


                                        Subclass of AvdModel.

                                        Args:
                                            intervals: Subclass of AvdModel.
                                            sequence_ids: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": True},
                                "threshold": {"type": Threshold},
                                "missing_message": {"type": MissingMessage},
                            }
                            enabled: bool
                            """Default value: `True`"""
                            threshold: Threshold
                            """Subclass of AvdModel."""
                            missing_message: MissingMessage
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    threshold: Threshold | UndefinedType = Undefined,
                                    missing_message: MissingMessage | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Monitor.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        threshold: Subclass of AvdModel.
                                        missing_message: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "profile": {"type": str},
                            "uplinks": {"type": Uplinks},
                            "mlag": {"type": bool, "default": False},
                            "domain": {"type": int},
                            "priority1": {"type": int},
                            "priority2": {"type": int},
                            "auto_clock_identity": {"type": bool},
                            "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                            "clock_identity": {"type": str},
                            "source_ip": {"type": str},
                            "mode": {"type": str, "default": "boundary"},
                            "mode_one_step": {"type": bool, "default": False},
                            "ttl": {"type": int},
                            "forward_unicast": {"type": bool, "default": False},
                            "forward_v1": {"type": bool},
                            "dscp": {"type": Dscp},
                            "monitor": {"type": Monitor},
                        }
                        enabled: bool | None
                        profile: str | None
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"
                        """
                        uplinks: Uplinks
                        """Subclass of AvdList with `str` items."""
                        mlag: bool
                        """
                        Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                        configured on the MLAG peer-link port-channel.

                        Default value: `False`
                        """
                        domain: int | None
                        priority1: int | None
                        """default -> automatically set based on node_type."""
                        priority2: int | None
                        """default -> (node_id modulus 256)."""
                        auto_clock_identity: bool | None
                        """
                        If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                        default EOS behaviour, simply disable the automatic PTP clock identity.
                        default ->
                        (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                        HEX).
                        """
                        clock_identity_prefix: str
                        """
                        PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                        By default the 3-byte prefix is "00:1C:73".
                        This
                        can be overridden if auto_clock_identity is set to true (which is the default).

                        Default value: `"00:1C:73"`
                        """
                        clock_identity: str | None
                        """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                        source_ip: str | None
                        """
                        By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                        relevant SVI, which is the recommended behaviour.
                        This can be set manually if required, for example,
                        to a value of "10.1.2.3".
                        """
                        mode: Literal["boundary"]
                        """Default value: `"boundary"`"""
                        mode_one_step: bool
                        """Default value: `False`"""
                        ttl: int | None
                        forward_unicast: bool
                        """
                        Enable PTP unicast forwarding.

                        Default value: `False`
                        """
                        forward_v1: bool | None
                        """Forward dataplane PTP V1 packets."""
                        dscp: Dscp
                        """Subclass of AvdModel."""
                        monitor: Monitor
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                uplinks: Uplinks | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                domain: int | None | UndefinedType = Undefined,
                                priority1: int | None | UndefinedType = Undefined,
                                priority2: int | None | UndefinedType = Undefined,
                                auto_clock_identity: bool | None | UndefinedType = Undefined,
                                clock_identity_prefix: str | UndefinedType = Undefined,
                                clock_identity: str | None | UndefinedType = Undefined,
                                source_ip: str | None | UndefinedType = Undefined,
                                mode: Literal["boundary"] | UndefinedType = Undefined,
                                mode_one_step: bool | UndefinedType = Undefined,
                                ttl: int | None | UndefinedType = Undefined,
                                forward_unicast: bool | UndefinedType = Undefined,
                                forward_v1: bool | None | UndefinedType = Undefined,
                                dscp: Dscp | UndefinedType = Undefined,
                                monitor: Monitor | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"
                                    uplinks: Subclass of AvdList with `str` items.
                                    mlag:
                                       Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                       configured on the MLAG peer-link port-channel.
                                    domain: domain
                                    priority1: default -> automatically set based on node_type.
                                    priority2: default -> (node_id modulus 256).
                                    auto_clock_identity:
                                       If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                       default EOS behaviour, simply disable the automatic PTP clock identity.
                                       default ->
                                       (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                       HEX).
                                    clock_identity_prefix:
                                       PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                       By default the 3-byte prefix is "00:1C:73".
                                       This
                                       can be overridden if auto_clock_identity is set to true (which is the default).
                                    clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                    source_ip:
                                       By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                       relevant SVI, which is the recommended behaviour.
                                       This can be set manually if required, for example,
                                       to a value of "10.1.2.3".
                                    mode: mode
                                    mode_one_step: mode_one_step
                                    ttl: ttl
                                    forward_unicast: Enable PTP unicast forwarding.
                                    forward_v1: Forward dataplane PTP V1 packets.
                                    dscp: Subclass of AvdModel.
                                    monitor: Subclass of AvdModel.

                                """

                    class WanHa(AvdModel):
                        """Subclass of AvdModel."""

                        class HaInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        HaInterfaces._item_type = str

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "ipsec": {"type": bool, "default": True},
                            "mtu": {"type": int, "default": 9194},
                            "ha_interfaces": {"type": HaInterfaces},
                            "ha_ipv4_pool": {"type": str},
                            "port_channel_id": {"type": int},
                            "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                            "flow_tracking": {"type": FlowTracking},
                        }
                        enabled: bool | None
                        """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                        ipsec: bool
                        """
                        Enable / Disable IPsec over HA path-group when HA is enabled.

                        Default value: `True`
                        """
                        mtu: int
                        """
                        Set MTU on WAN HA interfaces.

                        Default value: `9194`
                        """
                        ha_interfaces: HaInterfaces
                        """
                        Local WAN HA interfaces
                        Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                        Can be used to filter uplink interfaces when there are multiple uplinks.
                        Limitations:
                          Either all
                        interfaces must be uplinks or all interfaces must not be uplinks.
                          Only one interface is supported
                        for non uplinks.

                        Subclass of AvdList with `str` items.
                        """
                        ha_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                        first WAN router.
                        Not used for uplink interfaces.
                        """
                        port_channel_id: int | None
                        """Port-channel ID to use for direct HA."""
                        use_port_channel_for_direct_ha: bool
                        """
                        Enable or disable using a port-channel interface for direct HA when there is only one interface.
                        This feature was introduced in EOS 4.33.0F.

                        Default value: `True`
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                        setting.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                ipsec: bool | UndefinedType = Undefined,
                                mtu: int | UndefinedType = Undefined,
                                ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                port_channel_id: int | None | UndefinedType = Undefined,
                                use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                            ) -> None:
                                """
                                WanHa.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                    ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                    mtu: Set MTU on WAN HA interfaces.
                                    ha_interfaces:
                                       Local WAN HA interfaces
                                       Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                       Can be used to filter uplink interfaces when there are multiple uplinks.
                                       Limitations:
                                         Either all
                                       interfaces must be uplinks or all interfaces must not be uplinks.
                                         Only one interface is supported
                                       for non uplinks.

                                       Subclass of AvdList with `str` items.
                                    ha_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                       first WAN router.
                                       Not used for uplink interfaces.
                                    port_channel_id: Port-channel ID to use for direct HA.
                                    use_port_channel_for_direct_ha:
                                       Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                       This feature was introduced in EOS 4.33.0F.
                                    flow_tracking:
                                       Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                       setting.

                                       Subclass of AvdModel.

                                """

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class CvPathfinderInternetExit(AvdModel):
                            """Subclass of AvdModel."""

                            class PoliciesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                name: str
                                """Internet-exit policy name."""
                                tunnel_interface_numbers: str | None
                                """
                                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                interface.
                                Examples: '1-3' or '100,200,300'
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        PoliciesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Internet-exit policy name.
                                            tunnel_interface_numbers:
                                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                               interface.
                                               Examples: '1-3' or '100,200,300'

                                        """

                            class Policies(AvdIndexedList[str, PoliciesItem]):
                                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Policies._item_type = PoliciesItem

                            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                            policies: Policies
                            """
                            List of Internet-exit policies using this interface as exit.

                            Subclass of AvdIndexedList with
                            `PoliciesItem` items. Primary key is `name` (`str`).
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                    """
                                    CvPathfinderInternetExit.


                                    Subclass of AvdModel.

                                    Args:
                                        policies:
                                           List of Internet-exit policies using this interface as exit.

                                           Subclass of AvdIndexedList with
                                           `PoliciesItem` items. Primary key is `name` (`str`).

                                    """

                        class RxQueue(AvdModel):
                            """Subclass of AvdModel."""

                            class Workers(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Workers._item_type = str

                            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                            count: int | None
                            """
                            Number of receive queues.
                            The maximum value is determined by
                            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                            `platform` set on this device.
                            """
                            workers: Workers
                            """Subclass of AvdList with `str` items."""
                            mode: Literal["shared", "exclusive"] | None
                            """Mode applicable to the workers."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    count: int | None | UndefinedType = Undefined,
                                    workers: Workers | UndefinedType = Undefined,
                                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RxQueue.


                                    Subclass of AvdModel.

                                    Args:
                                        count:
                                           Number of receive queues.
                                           The maximum value is determined by
                                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                           `platform` set on this device.
                                        workers: Subclass of AvdList with `str` items.
                                        mode: Mode applicable to the workers.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "profile": {"type": str},
                            "name": {"type": str},
                            "description": {"type": str},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "speed": {"type": str},
                            "receive_bandwidth": {"type": int},
                            "transmit_bandwidth": {"type": int},
                            "peer": {"type": str},
                            "peer_interface": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                            "rx_queue": {"type": RxQueue},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        }
                        profile: str | None
                        """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                        name: str
                        """
                        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                        For a
                        subinterface, the parent physical interface is automatically created.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set a default description will be configured with '[<peer>[
                        <peer_interface>]]'.
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_interfaces.public_ip`
                                  -> `l3_interfaces.ip_address`

                        The determined Public IP is used
                        by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        speed: str | None
                        """
                        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                        <interface_speed>`.
                        """
                        receive_bandwidth: int | None
                        """
                        Maximum allowed receive bandwidth (download) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        transmit_bandwidth: int | None
                        """
                        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_interface: str | None
                        """The peer device interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdList with `StaticRoutesItem`
                        items.
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        cv_pathfinder_internet_exit: CvPathfinderInternetExit
                        """
                        PREVIEW: This key is in preview mode

                        Subclass of AvdModel.
                        """
                        rx_queue: RxQueue
                        """
                        Receive queue parameters for platform SFE interface profile.
                        This setting is ignored unless the
                        `platform_sfe_interface_profile.supported` is set as `true` under
                        `platform_settings.feature_support` for the `platform` set on this device.

                        Subclass of AvdModel.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config for the Ethernet interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | None | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                speed: str | None | UndefinedType = Undefined,
                                receive_bandwidth: int | None | UndefinedType = Undefined,
                                transmit_bandwidth: int | None | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_interface: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                rx_queue: RxQueue | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                    name:
                                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                       For a
                                       subinterface, the parent physical interface is automatically created.
                                    description:
                                       Interface description.
                                       If not set a default description will be configured with '[<peer>[
                                       <peer_interface>]]'.
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_interfaces.public_ip`
                                                 -> `l3_interfaces.ip_address`

                                       The determined Public IP is used
                                       by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    speed:
                                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                       <interface_speed>`.
                                    receive_bandwidth:
                                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    transmit_bandwidth:
                                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_interface: The peer device interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdList with `StaticRoutesItem`
                                       items.
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    cv_pathfinder_internet_exit:
                                       PREVIEW: This key is in preview mode

                                       Subclass of AvdModel.
                                    rx_queue:
                                       Receive queue parameters for platform SFE interface profile.
                                       This setting is ignored unless the
                                       `platform_sfe_interface_profile.supported` is set as `true` under
                                       `platform_settings.feature_support` for the `platform` set on this device.

                                       Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Ethernet interface.

                                """

                    class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                        """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "rx_queue": {"type": RxQueue},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                            """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                            _primary_key: ClassVar[str] = "prefix"

                        StaticRoutes._item_type = StaticRoutesItem

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_port_channels.public_ip`
                                  -> `l3_port_channels.ip_address`

                        The determined Public IP is
                        used by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdIndexedList with
                        `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config for the Port-Channel interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_port_channels.public_ip`
                                                 -> `l3_port_channels.ip_address`

                                       The determined Public IP is
                                       used by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdIndexedList with
                                       `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Port-Channel interface.

                                """

                    class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                        """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3PortChannels._item_type = L3PortChannelsItem

                    class UnderlayMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        class PimSm(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                            on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if also
                            enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_pim_sm`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable PIM sparse-mode on uplinks.
                            Requires node setting `underlay_multicast.pim_sm.enabled:
                            true` or, if unset, global `underlay_multicast_pim_sm: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                            Effective only when
                            node settings `underlay_multicast.pim_sm.uplinks: true`.

                            Subclass of AvdList with `str` items.
                            """
                            mlag: bool
                            """
                            Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PimSm.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                           on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if also
                                           enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_pim_sm`.
                                        uplinks:
                                           Enable/Disable PIM sparse-mode on uplinks.
                                           Requires node setting `underlay_multicast.pim_sm.enabled:
                                           true` or, if unset, global `underlay_multicast_pim_sm: true`
                                        uplink_interfaces:
                                           Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective only when
                                           node settings `underlay_multicast.pim_sm.uplinks: true`.

                                           Subclass of AvdList with `str` items.
                                        mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                    """

                        class Static(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures static multicast in the
                            underlay on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if
                            also enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_multicast`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable static multicast on uplinks.
                            Requires node setting
                            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                            Effective
                            only when node settings `underlay_multicast.static.uplinks: true`.

                            Subclass of AvdList with `str`
                            items.
                            """
                            mlag: bool
                            """
                            Configure static multicast in the underlay on MLAG L3 peer interfacee.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Static.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures static multicast in the
                                           underlay on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if
                                           also enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_multicast`.
                                        uplinks:
                                           Enable/Disable static multicast on uplinks.
                                           Requires node setting
                                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                        uplink_interfaces:
                                           Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective
                                           only when node settings `underlay_multicast.static.uplinks: true`.

                                           Subclass of AvdList with `str`
                                           items.
                                        mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                    """

                        _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                        pim_sm: PimSm
                        """Subclass of AvdModel."""
                        static: Static
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                """
                                UnderlayMulticast.


                                Subclass of AvdModel.

                                Args:
                                    pim_sm: Subclass of AvdModel.
                                    static: Subclass of AvdModel.

                                """

                    class DigitalTwin(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                        act_os_version: str | None
                        """
                        Desired ACT Digital Twin OS version.
                        Overrides global `digital_twin.fabric.act_os_version` flag.
                        """
                        mgmt_ip: str | None
                        """Desired management interface IPv4 address."""
                        act_internet_access: bool | None
                        """
                        Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                        This option
                        applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                        types.
                        ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        Overrides
                        global `digital_twin.fabric.act_internet_access` flag.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                act_os_version: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                act_internet_access: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DigitalTwin.


                                Subclass of AvdModel.

                                Args:
                                    act_os_version:
                                       Desired ACT Digital Twin OS version.
                                       Overrides global `digital_twin.fabric.act_os_version` flag.
                                    mgmt_ip: Desired management interface IPv4 address.
                                    act_internet_access:
                                       Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                       This option
                                       applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                       types.
                                       ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                       Overrides
                                       global `digital_twin.fabric.act_internet_access` flag.

                                """

                    _fields: ClassVar[dict] = {
                        "id": {"type": int},
                        "platform": {"type": str},
                        "mac_address": {"type": str},
                        "system_mac_address": {"type": str},
                        "serial_number": {"type": str},
                        "rack": {"type": str},
                        "mgmt_ip": {"type": str},
                        "mgmt_gateway": {"type": str},
                        "ipv6_mgmt_ip": {"type": str},
                        "ipv6_mgmt_gateway": {"type": str},
                        "mgmt_interface": {"type": str},
                        "link_tracking": {"type": LinkTracking},
                        "lacp_port_id_range": {"type": LacpPortIdRange},
                        "always_configure_ip_routing": {"type": bool, "default": False},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                        "uplink_type": {"type": str},
                        "uplink_ipv4_pool": {"type": str},
                        "uplink_ipv6_pool": {"type": str},
                        "uplink_interfaces": {"type": UplinkInterfaces},
                        "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                        "uplink_switches": {"type": UplinkSwitches},
                        "uplink_interface_speed": {"type": str},
                        "uplink_switch_interface_speed": {"type": str},
                        "uplink_mtu": {"type": int},
                        "max_uplink_switches": {"type": int},
                        "max_parallel_uplinks": {"type": int, "default": 1},
                        "uplink_bfd": {"type": bool, "default": False},
                        "uplink_native_vlan": {"type": int},
                        "uplink_ptp": {"type": UplinkPtp},
                        "uplink_macsec": {"type": UplinkMacsec},
                        "uplink_port_channel_id": {"type": int},
                        "uplink_switch_port_channel_id": {"type": int},
                        "uplink_structured_config": {"type": dict},
                        "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "short_esi": {"type": str},
                        "isis_system_id_prefix": {"type": str},
                        "isis_maximum_paths": {"type": int},
                        "is_type": {"type": str},
                        "node_sid_base": {"type": int, "default": 0},
                        "loopback_ipv4_pool": {"type": str},
                        "loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv4_pool": {"type": str},
                        "vtep_loopback_ipv6_pool": {"type": str},
                        "vtep_loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv6_address": {"type": str},
                        "loopback_ipv4_offset": {"type": int, "default": 0},
                        "router_id_pool": {"type": str},
                        "loopback_ipv6_pool": {"type": str},
                        "loopback_ipv6_offset": {"type": int, "default": 0},
                        "vtep": {"type": bool},
                        "vtep_loopback": {"type": str},
                        "bgp_as": {"type": str},
                        "bgp_defaults": {"type": BgpDefaults},
                        "evpn_role": {"type": str},
                        "evpn_route_servers": {"type": EvpnRouteServers},
                        "evpn_services_l2_only": {"type": bool, "default": False},
                        "filter": {"type": Filter},
                        "igmp_snooping_enabled": {"type": bool},
                        "evpn_gateway": {"type": EvpnGateway},
                        "ipvpn_gateway": {"type": IpvpnGateway},
                        "mlag": {"type": bool, "default": True},
                        "mlag_dual_primary_detection": {"type": bool, "default": False},
                        "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                        "mlag_interfaces": {"type": MlagInterfaces},
                        "mlag_interfaces_speed": {"type": str},
                        "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                        "mlag_peer_l3_ipv4_pool": {"type": str},
                        "mlag_peer_l3_ipv6_pool": {"type": str},
                        "mlag_peer_vlan": {"type": int, "default": 4094},
                        "mlag_peer_link_allowed_vlans": {"type": str},
                        "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                        "mlag_peer_ipv4_pool": {"type": str},
                        "mlag_peer_ipv6_pool": {"type": str},
                        "mlag_port_channel_id": {"type": int},
                        "mlag_domain_id": {"type": str},
                        "spanning_tree_mode": {"type": str},
                        "spanning_tree_priority": {"type": int, "default": 32768},
                        "spanning_tree_root_super": {"type": bool, "default": False},
                        "spanning_tree_mst_pvst_boundary": {"type": bool},
                        "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                        "virtual_router_mac_address": {"type": str},
                        "inband_mgmt_interface": {"type": str},
                        "inband_mgmt_vlan": {"type": int, "default": 4092},
                        "inband_mgmt_subnet": {"type": str},
                        "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                        "inband_mgmt_ip": {"type": str},
                        "inband_mgmt_gateway": {"type": str},
                        "inband_mgmt_ipv6_address": {"type": str},
                        "inband_mgmt_ipv6_subnet": {"type": str},
                        "inband_mgmt_ipv6_gateway": {"type": str},
                        "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                        "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                        "inband_mgmt_vrf": {"type": str, "default": "default"},
                        "inband_mgmt_mtu": {"type": int, "default": 1500},
                        "inband_ztp": {"type": bool, "default": False},
                        "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                        "mpls_overlay_role": {"type": str},
                        "overlay_address_families": {"type": OverlayAddressFamilies},
                        "mpls_route_reflectors": {"type": MplsRouteReflectors},
                        "bgp_cluster_id": {"type": str},
                        "ptp": {"type": Ptp},
                        "wan_role": {"type": str},
                        "cv_pathfinder_transit_mode": {"type": str},
                        "cv_pathfinder_region": {"type": str},
                        "cv_pathfinder_site": {"type": str},
                        "wan_ha": {"type": WanHa},
                        "dps_mss_ipv4": {"type": str, "default": "auto"},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "data_plane_cpu_allocation_max": {"type": int},
                        "flow_tracker_type": {"type": str},
                        "underlay_multicast": {"type": UnderlayMulticast},
                        "campus": {"type": str},
                        "campus_pod": {"type": str},
                        "campus_access_pod": {"type": str},
                        "cv_tags_topology_type": {"type": str},
                        "digital_twin": {"type": DigitalTwin},
                    }
                    id: int | None
                    """Unique identifier used for IP addressing and other algorithms."""
                    platform: str | None
                    """Arista platform family."""
                    mac_address: str | None
                    """Leverage to document management interface mac address."""
                    system_mac_address: str | None
                    """
                    System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                    Set to the same MAC address as
                    available in "show version" on the device.
                    "system_mac_address" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    serial_number: str | None
                    """
                    Set to the Serial Number of the device.
                    Only used for documentation purpose in the fabric
                    documentation and part of the structured_config.
                    "serial_number" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    rack: str | None
                    """Rack that the switch is located in (only used in snmp_settings location)."""
                    mgmt_ip: str | None
                    """Node management interface IPv4 address."""
                    mgmt_gateway: str | None
                    """
                    This key sets the management gateway for the device. It takes precedence over the global
                    `mgmt_gateway`.
                    """
                    ipv6_mgmt_ip: str | None
                    """Node management interface IPv6 address."""
                    ipv6_mgmt_gateway: str | None
                    """
                    This key sets the ipv6 management gateway for the device. It takes precedence over the global
                    `ipv6_mgmt_gateway`.
                    """
                    mgmt_interface: str | None
                    """
                    Management Interface Name.
                    Default -> platform_management_interface -> mgmt_interface ->
                    "Management1".
                    """
                    link_tracking: LinkTracking
                    """
                    This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                    the upstream interfaces.
                    Useful in EVPN multhoming designs.


                    Subclass of AvdModel.
                    """
                    lacp_port_id_range: LacpPortIdRange
                    """
                    This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                    number of nodes in the "node_group".
                    Unique LACP port-id ranges are recommended for EVPN Multihoming
                    designs.


                    Subclass of AvdModel.
                    """
                    always_configure_ip_routing: bool
                    """
                    Force configuration of "ip routing" even on L2 devices.
                    Use this to retain behavior of AVD versions
                    below 4.0.0.

                    Default value: `False`
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""
                    uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                    """
                    Override the default `uplink_type` set at the `node_type_key` level.
                    `uplink_type` must be "p2p" if
                    `vtep` or `underlay_router` is true for the `node_type_key` definition.
                    """
                    uplink_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    IPv4
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    IPv6
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_interfaces: UplinkInterfaces
                    """
                    Local uplink interfaces.
                    Each list item supports range syntax that can be expanded into a list of
                    interfaces.
                    If uplink_interfaces is not defined, platform-specific defaults (defined under
                    default_interfaces) will be used instead.
                    Please note that default_interfaces are not defined by
                    default, you should define these yourself.


                    Subclass of AvdList with `str` items.
                    """
                    uplink_switch_interfaces: UplinkSwitchInterfaces
                    """
                    Interfaces located on uplink switches.

                    Subclass of AvdList with `str` items.
                    """
                    uplink_switches: UplinkSwitches
                    """Subclass of AvdList with `str` items."""
                    uplink_interface_speed: str | None
                    """
                    Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                    (Uplink switch
                    interface speed can be overridden with `uplink_switch_interface_speed`).
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_switch_interface_speed: str | None
                    """
                    Set point-to-Point interface speed for the uplink switch interface only.
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_mtu: int | None
                    """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                    max_uplink_switches: int | None
                    """
                    Maximum number of uplink switches.
                    Changing this value may change IP Addressing on uplinks.
                    Can be
                    used to reserve IP space for future expansions.
                    """
                    max_parallel_uplinks: int
                    """
                    Number of parallel links towards uplink switches.
                    Changing this value may change interface naming on
                    uplinks (and corresponding downlinks).
                    Can be used to reserve interfaces for future parallel
                    uplinks.

                    Default value: `1`
                    """
                    uplink_bfd: bool
                    """
                    Enable bfd on uplink interfaces.

                    Default value: `False`
                    """
                    uplink_native_vlan: int | None
                    """
                    Only applicable to switches with layer-2 port-channel uplinks.
                    A suspended (disabled) vlan will be
                    created in both ends of the link unless the vlan is defined under network services.
                    By default the
                    uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                    """
                    uplink_ptp: UplinkPtp
                    """
                    Enable PTP on all infrastructure links.

                    Subclass of AvdModel.
                    """
                    uplink_macsec: UplinkMacsec
                    """
                    Enable MacSec on all uplinks.

                    Subclass of AvdModel.
                    """
                    uplink_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink Port-channel
                    ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                    For
                    example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [ Eth11/1, Eth22/1 ] -> ID 111
                    For
                    MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                    This
                    option overrides the default behavior and statically sets the local Port-channel ID.
                    Note! Make sure
                    the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                    value.
                    """
                    uplink_switch_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink switch Port-
                    channel ID will be set to the number of the first interface defined under
                    `uplink_switch_interfaces`.
                    For example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [
                    Eth11/1, Eth22/1 ] -> ID 111
                    For MLAG port-channels ID will be based on the lowest member interface
                    on the first MLAG switch.
                    This option overrides the default behavior and statically sets the Port-
                    channel ID on the uplink switch.
                    Note! Make sure the ID is unique and does not overlap with
                    autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between
                    1 and 2000 and both MLAG switches must have the same value.
                    """
                    uplink_structured_config: dict
                    """
                    Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                    When
                    uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                    for eos_cli_config_gen overrides the settings on the ethernet interface level.
                    When uplink_type ==
                    "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                    eos_cli_config_gen overrides the settings on the port-channel interface level.
                    "uplink_structured_config" is applied after "structured_config", so it can override
                    "structured_config" defined on node-level.
                    Note! The content of this dictionary is _not_ validated
                    by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                    """
                    uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_interfaces`."""
                    uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                    uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                    uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                    channel uplinks.
                    """
                    mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to MLAG peer link port-channel id.
                    Added under
                    port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the
                    port-channel interface level.
                    "mlag_port_channel_structured_config" is applied after
                    "structured_config", so it can override "structured_config" defined on node-level.
                    """
                    mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                    override "structured_config" defined on node-level.
                    """
                    mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                    can override "structured_config" defined on node-level.
                    """
                    short_esi: str | None
                    """
                    short_esi only valid for l2leaf devices using port-channel uplink.
                    Setting short_esi to "auto"
                    generates the short_esi automatically using a hash of configuration elements.
                    < 0000:0000:0000 |
                    auto >.
                    """
                    isis_system_id_prefix: str | None
                    """(4.4 hexadecimal)."""
                    isis_maximum_paths: int | None
                    """Number of path to configure in ECMP for ISIS."""
                    is_type: Literal["level-1-2", "level-1", "level-2"] | None
                    """Overrides `isis_default_is_type`."""
                    node_sid_base: int
                    """
                    Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                    Default value: `0`
                    """
                    loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for Loopback0.
                    When set, it takes precedence over `loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                    """
                    vtep_loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    vtep_loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    vtep_loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not
                    catch duplicates.
                    """
                    vtep_loopback_ipv6_address: str | None
                    """
                    IPv6 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv6_pool`.
                    Note: AVD does not check for validity of the IPv6 address and does not
                    catch duplicates.
                    """
                    loopback_ipv4_offset: int
                    """
                    Offset all assigned loopback IP addresses.
                    Required when the 'loopback_ipv4_pool' is the same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    router_id_pool: str | None
                    """
                    Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                    router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                    will not exist on the device.
                    """
                    loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    loopback_ipv6_offset: int
                    """
                    Offset all assigned loopback IPv6 addresses.
                    Required when the 'loopback_ipv6_pool' is same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    vtep: bool | None
                    """
                    Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                    Overrides VTEP
                    setting inherited from node_type_keys.
                    """
                    vtep_loopback: str | None
                    """Set VXLAN source interface."""
                    bgp_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    Required with eBGP.
                    """
                    bgp_defaults: BgpDefaults
                    """
                    List of EOS commands to apply to BGP daemon.

                    Subclass of AvdList with `str` items.
                    """
                    evpn_role: Literal["client", "server", "none"] | None
                    """
                    Acting role in EVPN control plane.
                    Default is set in node_type definition from node_type_keys.
                    """
                    evpn_route_servers: EvpnRouteServers
                    """
                    List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                    Subclass of AvdList with `str`
                    items.
                    """
                    evpn_services_l2_only: bool
                    """
                    Possibility to prevent configuration of Tenant VRFs and SVIs.
                    Override node definition
                    "network_services_l3" from node_type_keys.
                    This allows support for centralized routing.

                    Default value: `False`
                    """
                    filter: Filter
                    """
                    Filter L3 and L2 network services based on tenant and tags (and operation filter).
                    If filter is not
                    defined it will default to all.


                    Subclass of AvdModel.
                    """
                    igmp_snooping_enabled: bool | None
                    """Activate or deactivate IGMP snooping on device level."""
                    evpn_gateway: EvpnGateway
                    """
                    Node is acting as EVPN Multi-Domain Gateway.
                    New BGP peer-group is generated between EVPN GWs in
                    different domains or between GWs and Route Servers.
                    Name can be changed under
                    "bgp_peer_groups.evpn_overlay_core" variable.
                    L3 rechability for different EVPN GWs must be already
                    in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                    same Ansible inventory.


                    Subclass of AvdModel.
                    """
                    ipvpn_gateway: IpvpnGateway
                    """
                    Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                    this is "bgp_peer_groups.ipvpn_gateway_peers".
                    L3 Reachability is required for this to work, the
                    preferred method to establish underlay connectivity is to use core_interfaces.


                    Subclass of
                    AvdModel.
                    """
                    mlag: bool
                    """
                    Enable / Disable auto MLAG, when two nodes are defined in node group.

                    Default value: `True`
                    """
                    mlag_dual_primary_detection: bool
                    """
                    Enable / Disable MLAG dual primary detection.

                    Default value: `False`
                    """
                    mlag_ibgp_origin_incomplete: bool
                    """
                    Set origin of routes received from MLAG iBGP peer to incomplete.
                    The purpose is to optimize routing
                    for leaf loopbacks from spine perspective and
                    avoid suboptimal routing via peerlink for control
                    plane traffic.

                    Default value: `True`
                    """
                    mlag_interfaces: MlagInterfaces
                    """
                    Each list item supports range syntax that can be expanded into a list of interfaces.
                    Required when
                    MLAG leafs are present in the topology.


                    Subclass of AvdList with `str` items.
                    """
                    mlag_interfaces_speed: str | None
                    """
                    Set MLAG interface speed.
                    Speed should be set in the format `<interface_speed>` or `forced
                    <interface_speed>` or `auto <interface_speed>`.
                    """
                    mlag_peer_l3_vlan: int
                    """
                    Underlay L3 peering SVI interface id.
                    If set to 0 or the same vlan as mlag_peer_vlan, the
                    mlag_peer_vlan will be used for L3 peering.

                    Default value: `4093`
                    """
                    mlag_peer_l3_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_l3_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_vlan: int
                    """
                    MLAG Peer Link (control link) SVI interface id.

                    Default value: `4094`
                    """
                    mlag_peer_link_allowed_vlans: str | None
                    mlag_peer_address_family: Literal["ipv4", "ipv6"]
                    """
                    IP address family used to establish MLAG Peer Link (control link).
                    `ipv6` requires EOS version
                    4.31.1F or higher.
                    Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                    (ex. `mlag_peer_l3_vlan` set to 4094).

                    Default value: `"ipv4"`
                    """
                    mlag_peer_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                    """
                    mlag_peer_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                    """
                    mlag_port_channel_id: int | None
                    """
                    If not set, the mlag port-channel id is generated based on the digits of the first interface present
                    in 'mlag_interfaces'.
                    Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                    999999 > for EOS >= 4.25.0F.
                    """
                    mlag_domain_id: str | None
                    """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                    spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                    spanning_tree_priority: int
                    """
                    Spanning-tree priority configured for the selected mode.
                    For `rapid-pvst` the priority can also be
                    set per VLAN under network services.

                    Default value: `32768`
                    """
                    spanning_tree_root_super: bool
                    """Default value: `False`"""
                    spanning_tree_mst_pvst_boundary: bool | None
                    """Enable MST PVST border ports."""
                    spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                    """Specify range of port-ids to reserve for port-channels."""
                    virtual_router_mac_address: str | None
                    """Virtual router mac address for anycast gateway."""
                    inband_mgmt_interface: str | None
                    """
                    Pointer to interface used for inband management.
                    All configuration must be done using other data
                    models like network services or structured_config.
                    'inband_mgmt_interface' is only used to refer to
                    this interface as source in various management protocol settings (future feature).

                    On L2 switches,
                    this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                    """
                    inband_mgmt_vlan: int
                    """
                    VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                    uplinks).
                    When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                    switch as well as all 'uplink_switches'.
                    When using 'inband_mgmt_ip' the VLAN and SVI will only be
                    created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                    created using network services data models.

                    Default value: `4092`
                    """
                    inband_mgmt_subnet: str | None
                    """
                    Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                    ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      : <subnet> +
                    2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       :
                    <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                    GW on l2leafs : <subnet> + 1
                    Assign range
                    larger than total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ip' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_subnet_offset: int
                    """
                    Offset value to adjust the calculated inband management IP address within the subnet.
                    The assigned
                    IP will be computed by adding this offset to the device ID.

                    Default value: `0`
                    """
                    inband_mgmt_ip: str | None
                    """
                    IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                    If this is set the
                    VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN and SVI on
                    the parent switches must be created using network services data models.

                    This setting is applicable
                    to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                    is derived from 'inband_mgmt_subnet' if set.

                    This setting is applicable to L2 switches (switches
                    using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_address: str | None
                    """
                    IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                    If this
                    is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN
                    and SVI on the parent switches must be created using network services data models.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_subnet: str | None
                    """
                    Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                    on ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                    extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      :
                    <subnet> + 2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       : <subnet> + 3 + <l2leaf id>
                    GW on l2leafs : <subnet> + 1
                    Assign range larger than
                    total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf'.
                    Used when `inband_mgmt_ipv6_address` is set.
                    Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_description: str
                    """
                    Description configured on the Inband Management SVI.

                    This setting is only applied on the devices
                    where it is set, it does not automatically affect any parent/child devices configuration, so it must
                    be set on each applicable node/node-group/node-type as needed.

                    Default value: `"Inband Management"`
                    """
                    inband_mgmt_vlan_name: str
                    """
                    Name configured on the Inband Management VLAN.
                    This setting is only applied on the devices where it
                    is set, it does not automatically affect any parent/child devices configuration, so it must be set
                    on each applicable node/node-group/node-type as needed.

                    Default value: `"INBAND_MGMT"`
                    """
                    inband_mgmt_vrf: str
                    """
                    VRF configured on the Inband Management Interface.
                    The VRF is created if not already created by
                    other means.
                    This setting is only applied on the devices where it is set, it does not automatically
                    affect any parent/child devices configuration, so it must be set on each applicable node/node-
                    group/node-type as needed.

                    Default value: `"default"`
                    """
                    inband_mgmt_mtu: int
                    """
                    MTU configured on the Inband Management Interface.
                    This setting is only applied on the devices where
                    it is set, it does not automatically affect any parent/child devices configuration, so it must be
                    set on each applicable node/node-group/node-type as needed.

                    Default value: `1500`
                    """
                    inband_ztp: bool
                    """
                    Enable to configure upstream device with proper configuration to allow downstream devices to be
                    Zero-Touch-Provisioned over the uplink interfaces.
                    For L2 devices this setting also requires that
                    the `inband_mgmt_vlan` is set for the node.

                    PREVIEW: Support for L3 devices is marked as "preview",
                    meaning the data models or generated configuration can change at any time.

                    Default value: `False`
                    """
                    inband_ztp_lacp_fallback_delay: int
                    """
                    Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                    ZTP node.
                    This setting also requires that `inband_ztp` is set for the node.

                    Default value: `30`
                    """
                    mpls_overlay_role: Literal["client", "server", "none"] | None
                    """
                    Set the default mpls overlay role.
                    Acting role in overlay control plane.
                    """
                    overlay_address_families: OverlayAddressFamilies
                    """
                    Set the default overlay address families.


                    Subclass of AvdList with `str` items.
                    """
                    mpls_route_reflectors: MplsRouteReflectors
                    """
                    List of inventory hostname acting as MPLS route-reflectors.

                    Subclass of AvdList with `str` items.
                    """
                    bgp_cluster_id: str | None
                    """Set BGP cluster id."""
                    ptp: Ptp
                    """Subclass of AvdModel."""
                    wan_role: Literal["client", "server"] | None
                    """
                    Override the default WAN role.

                    This is used both for AutoVPN and Pathfinder designs.
                    That means if
                    `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                    `server` indicates that the router is a
                    route-reflector.
                    """
                    cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                    """
                    Configure the transit mode for a WAN client for CV Pathfinder designs
                    only when the `wan_mode` root
                    key is set to `cv_pathfinder`.

                    'zone' is currently not supported.
                    """
                    cv_pathfinder_region: str | None
                    """
                    The CV Pathfinder region name.
                    This key is required for WAN routers but optional for pathfinders.
                    The region name must be defined under 'cv_pathfinder_regions'.
                    """
                    cv_pathfinder_site: str | None
                    """
                    The CV Pathfinder site name.
                    This key is required for WAN routers but optional for pathfinders.
                    For
                    WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                    relevant region under 'cv_pathfinder_regions'.
                    For pathfinders without `cv_pathfinder_region` set,
                    the site must be defined under `cv_pathfinder_global_sites`.
                    """
                    wan_ha: WanHa
                    """
                    The key is supported only if `wan_mode` == `cv-pathfinder`.
                    AutoVPN support is still to be
                    determined.

                    Maximum 2 devices supported by group for HA.

                    Subclass of AvdModel.
                    """
                    dps_mss_ipv4: str
                    """
                    IPv4 MSS value configured under "router path-selection" on WAN Devices.

                    Default value: `"auto"`
                    """
                    l3_interfaces: L3Interfaces
                    """
                    L3 Interfaces to configure on the node.

                    Subclass of AvdIndexedList with `L3InterfacesItem` items.
                    Primary key is `name` (`str`).
                    """
                    l3_port_channels: L3PortChannels
                    """
                    L3 Port-Channel interfaces to configure on the node.

                    Subclass of AvdIndexedList with
                    `L3PortChannelsItem` items. Primary key is `name` (`str`).
                    """
                    data_plane_cpu_allocation_max: int | None
                    """
                    Set the maximum number of CPU used for the data plane.
                    This setting is useful on virtual Route
                    Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                    """
                    flow_tracker_type: Literal["sampled", "hardware"] | None
                    """
                    Set the flow tracker type.
                    Override the `default_flow_tracker_type`` set at the `node_type_key`
                    level.
                    `default_flow_tracker_type` default value is `sampled`.
                    """
                    underlay_multicast: UnderlayMulticast
                    """Subclass of AvdModel."""
                    campus: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_access_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus access pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    cv_tags_topology_type: str | None
                    """
                    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                    "edge" or "member-leaf".
                    """
                    digital_twin: DigitalTwin
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Set the OS version and management IP address for the digital twin of the
                    associated node(s).

                    Subclass of AvdModel.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            id: int | None | UndefinedType = Undefined,
                            platform: str | None | UndefinedType = Undefined,
                            mac_address: str | None | UndefinedType = Undefined,
                            system_mac_address: str | None | UndefinedType = Undefined,
                            serial_number: str | None | UndefinedType = Undefined,
                            rack: str | None | UndefinedType = Undefined,
                            mgmt_ip: str | None | UndefinedType = Undefined,
                            mgmt_gateway: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                            mgmt_interface: str | None | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                            always_configure_ip_routing: bool | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                            uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                            uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                            uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                            uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                            uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                            uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                            uplink_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_mtu: int | None | UndefinedType = Undefined,
                            max_uplink_switches: int | None | UndefinedType = Undefined,
                            max_parallel_uplinks: int | UndefinedType = Undefined,
                            uplink_bfd: bool | UndefinedType = Undefined,
                            uplink_native_vlan: int | None | UndefinedType = Undefined,
                            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                            uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                            uplink_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_structured_config: dict | UndefinedType = Undefined,
                            uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            short_esi: str | None | UndefinedType = Undefined,
                            isis_system_id_prefix: str | None | UndefinedType = Undefined,
                            isis_maximum_paths: int | None | UndefinedType = Undefined,
                            is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                            node_sid_base: int | UndefinedType = Undefined,
                            loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                            loopback_ipv4_offset: int | UndefinedType = Undefined,
                            router_id_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_offset: int | UndefinedType = Undefined,
                            vtep: bool | None | UndefinedType = Undefined,
                            vtep_loopback: str | None | UndefinedType = Undefined,
                            bgp_as: str | None | UndefinedType = Undefined,
                            bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                            evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                            evpn_services_l2_only: bool | UndefinedType = Undefined,
                            filter: Filter | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                            ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                            mlag: bool | UndefinedType = Undefined,
                            mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                            mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                            mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                            mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                            mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_vlan: int | UndefinedType = Undefined,
                            mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                            mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                            mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_port_channel_id: int | None | UndefinedType = Undefined,
                            mlag_domain_id: str | None | UndefinedType = Undefined,
                            spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                            spanning_tree_priority: int | UndefinedType = Undefined,
                            spanning_tree_root_super: bool | UndefinedType = Undefined,
                            spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                            spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                            | UndefinedType = Undefined,
                            virtual_router_mac_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_interface: str | None | UndefinedType = Undefined,
                            inband_mgmt_vlan: int | UndefinedType = Undefined,
                            inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                            inband_mgmt_ip: str | None | UndefinedType = Undefined,
                            inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_description: str | UndefinedType = Undefined,
                            inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                            inband_mgmt_vrf: str | UndefinedType = Undefined,
                            inband_mgmt_mtu: int | UndefinedType = Undefined,
                            inband_ztp: bool | UndefinedType = Undefined,
                            inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                            mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                            mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                            bgp_cluster_id: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                            cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                            cv_pathfinder_region: str | None | UndefinedType = Undefined,
                            cv_pathfinder_site: str | None | UndefinedType = Undefined,
                            wan_ha: WanHa | UndefinedType = Undefined,
                            dps_mss_ipv4: str | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                            flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                            underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                            campus: str | None | UndefinedType = Undefined,
                            campus_pod: str | None | UndefinedType = Undefined,
                            campus_access_pod: str | None | UndefinedType = Undefined,
                            cv_tags_topology_type: str | None | UndefinedType = Undefined,
                            digital_twin: DigitalTwin | UndefinedType = Undefined,
                        ) -> None:
                            """
                            Defaults.


                            Subclass of AvdModel.

                            Args:
                                id: Unique identifier used for IP addressing and other algorithms.
                                platform: Arista platform family.
                                mac_address: Leverage to document management interface mac address.
                                system_mac_address:
                                   System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                   Set to the same MAC address as
                                   available in "show version" on the device.
                                   "system_mac_address" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                serial_number:
                                   Set to the Serial Number of the device.
                                   Only used for documentation purpose in the fabric
                                   documentation and part of the structured_config.
                                   "serial_number" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                rack: Rack that the switch is located in (only used in snmp_settings location).
                                mgmt_ip: Node management interface IPv4 address.
                                mgmt_gateway:
                                   This key sets the management gateway for the device. It takes precedence over the global
                                   `mgmt_gateway`.
                                ipv6_mgmt_ip: Node management interface IPv6 address.
                                ipv6_mgmt_gateway:
                                   This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                   `ipv6_mgmt_gateway`.
                                mgmt_interface:
                                   Management Interface Name.
                                   Default -> platform_management_interface -> mgmt_interface ->
                                   "Management1".
                                link_tracking:
                                   This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                   the upstream interfaces.
                                   Useful in EVPN multhoming designs.


                                   Subclass of AvdModel.
                                lacp_port_id_range:
                                   This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                   number of nodes in the "node_group".
                                   Unique LACP port-id ranges are recommended for EVPN Multihoming
                                   designs.


                                   Subclass of AvdModel.
                                always_configure_ip_routing:
                                   Force configuration of "ip routing" even on L2 devices.
                                   Use this to retain behavior of AVD versions
                                   below 4.0.0.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.
                                uplink_type:
                                   Override the default `uplink_type` set at the `node_type_key` level.
                                   `uplink_type` must be "p2p" if
                                   `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                uplink_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   IPv4
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   IPv6
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_interfaces:
                                   Local uplink interfaces.
                                   Each list item supports range syntax that can be expanded into a list of
                                   interfaces.
                                   If uplink_interfaces is not defined, platform-specific defaults (defined under
                                   default_interfaces) will be used instead.
                                   Please note that default_interfaces are not defined by
                                   default, you should define these yourself.


                                   Subclass of AvdList with `str` items.
                                uplink_switch_interfaces:
                                   Interfaces located on uplink switches.

                                   Subclass of AvdList with `str` items.
                                uplink_switches: Subclass of AvdList with `str` items.
                                uplink_interface_speed:
                                   Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                   (Uplink switch
                                   interface speed can be overridden with `uplink_switch_interface_speed`).
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_switch_interface_speed:
                                   Set point-to-Point interface speed for the uplink switch interface only.
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                max_uplink_switches:
                                   Maximum number of uplink switches.
                                   Changing this value may change IP Addressing on uplinks.
                                   Can be
                                   used to reserve IP space for future expansions.
                                max_parallel_uplinks:
                                   Number of parallel links towards uplink switches.
                                   Changing this value may change interface naming on
                                   uplinks (and corresponding downlinks).
                                   Can be used to reserve interfaces for future parallel
                                   uplinks.
                                uplink_bfd: Enable bfd on uplink interfaces.
                                uplink_native_vlan:
                                   Only applicable to switches with layer-2 port-channel uplinks.
                                   A suspended (disabled) vlan will be
                                   created in both ends of the link unless the vlan is defined under network services.
                                   By default the
                                   uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                uplink_ptp:
                                   Enable PTP on all infrastructure links.

                                   Subclass of AvdModel.
                                uplink_macsec:
                                   Enable MacSec on all uplinks.

                                   Subclass of AvdModel.
                                uplink_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink Port-channel
                                   ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                   For
                                   example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                   For
                                   MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                   This
                                   option overrides the default behavior and statically sets the local Port-channel ID.
                                   Note! Make sure
                                   the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                   value.
                                uplink_switch_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink switch Port-
                                   channel ID will be set to the number of the first interface defined under
                                   `uplink_switch_interfaces`.
                                   For example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [
                                   Eth11/1, Eth22/1 ] -> ID 111
                                   For MLAG port-channels ID will be based on the lowest member interface
                                   on the first MLAG switch.
                                   This option overrides the default behavior and statically sets the Port-
                                   channel ID on the uplink switch.
                                   Note! Make sure the ID is unique and does not overlap with
                                   autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between
                                   1 and 2000 and both MLAG switches must have the same value.
                                uplink_structured_config:
                                   Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                   When
                                   uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                   for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                   When uplink_type ==
                                   "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                   eos_cli_config_gen overrides the settings on the port-channel interface level.
                                   "uplink_structured_config" is applied after "structured_config", so it can override
                                   "structured_config" defined on node-level.
                                   Note! The content of this dictionary is _not_ validated
                                   by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                uplink_switch_port_channel_structured_config:
                                   Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                   channel uplinks.
                                mlag_port_channel_structured_config:
                                   Custom structured config applied to MLAG peer link port-channel id.
                                   Added under
                                   port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the
                                   port-channel interface level.
                                   "mlag_port_channel_structured_config" is applied after
                                   "structured_config", so it can override "structured_config" defined on node-level.
                                mlag_peer_vlan_structured_config:
                                   Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                   override "structured_config" defined on node-level.
                                mlag_peer_l3_vlan_structured_config:
                                   Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                   can override "structured_config" defined on node-level.
                                short_esi:
                                   short_esi only valid for l2leaf devices using port-channel uplink.
                                   Setting short_esi to "auto"
                                   generates the short_esi automatically using a hash of configuration elements.
                                   < 0000:0000:0000 |
                                   auto >.
                                isis_system_id_prefix: (4.4 hexadecimal).
                                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                is_type: Overrides `isis_default_is_type`.
                                node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                loopback_ipv4_address:
                                   IPv4 address without mask for Loopback0.
                                   When set, it takes precedence over `loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                vtep_loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                vtep_loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                vtep_loopback_ipv4_address:
                                   IPv4 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not
                                   catch duplicates.
                                vtep_loopback_ipv6_address:
                                   IPv6 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv6_pool`.
                                   Note: AVD does not check for validity of the IPv6 address and does not
                                   catch duplicates.
                                loopback_ipv4_offset:
                                   Offset all assigned loopback IP addresses.
                                   Required when the 'loopback_ipv4_pool' is the same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                router_id_pool:
                                   Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                   router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                   will not exist on the device.
                                loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                loopback_ipv6_offset:
                                   Offset all assigned loopback IPv6 addresses.
                                   Required when the 'loopback_ipv6_pool' is same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                vtep:
                                   Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                   Overrides VTEP
                                   setting inherited from node_type_keys.
                                vtep_loopback: Set VXLAN source interface.
                                bgp_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                   Required with eBGP.
                                bgp_defaults:
                                   List of EOS commands to apply to BGP daemon.

                                   Subclass of AvdList with `str` items.
                                evpn_role:
                                   Acting role in EVPN control plane.
                                   Default is set in node_type definition from node_type_keys.
                                evpn_route_servers:
                                   List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                   Subclass of AvdList with `str`
                                   items.
                                evpn_services_l2_only:
                                   Possibility to prevent configuration of Tenant VRFs and SVIs.
                                   Override node definition
                                   "network_services_l3" from node_type_keys.
                                   This allows support for centralized routing.
                                filter:
                                   Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                   If filter is not
                                   defined it will default to all.


                                   Subclass of AvdModel.
                                igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                evpn_gateway:
                                   Node is acting as EVPN Multi-Domain Gateway.
                                   New BGP peer-group is generated between EVPN GWs in
                                   different domains or between GWs and Route Servers.
                                   Name can be changed under
                                   "bgp_peer_groups.evpn_overlay_core" variable.
                                   L3 rechability for different EVPN GWs must be already
                                   in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                   same Ansible inventory.


                                   Subclass of AvdModel.
                                ipvpn_gateway:
                                   Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                   this is "bgp_peer_groups.ipvpn_gateway_peers".
                                   L3 Reachability is required for this to work, the
                                   preferred method to establish underlay connectivity is to use core_interfaces.


                                   Subclass of
                                   AvdModel.
                                mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                mlag_ibgp_origin_incomplete:
                                   Set origin of routes received from MLAG iBGP peer to incomplete.
                                   The purpose is to optimize routing
                                   for leaf loopbacks from spine perspective and
                                   avoid suboptimal routing via peerlink for control
                                   plane traffic.
                                mlag_interfaces:
                                   Each list item supports range syntax that can be expanded into a list of interfaces.
                                   Required when
                                   MLAG leafs are present in the topology.


                                   Subclass of AvdList with `str` items.
                                mlag_interfaces_speed:
                                   Set MLAG interface speed.
                                   Speed should be set in the format `<interface_speed>` or `forced
                                   <interface_speed>` or `auto <interface_speed>`.
                                mlag_peer_l3_vlan:
                                   Underlay L3 peering SVI interface id.
                                   If set to 0 or the same vlan as mlag_peer_vlan, the
                                   mlag_peer_vlan will be used for L3 peering.
                                mlag_peer_l3_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_l3_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                mlag_peer_address_family:
                                   IP address family used to establish MLAG Peer Link (control link).
                                   `ipv6` requires EOS version
                                   4.31.1F or higher.
                                   Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                   (ex. `mlag_peer_l3_vlan` set to 4094).
                                mlag_peer_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                mlag_peer_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                mlag_port_channel_id:
                                   If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                   in 'mlag_interfaces'.
                                   Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                   999999 > for EOS >= 4.25.0F.
                                mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                spanning_tree_mode: spanning_tree_mode
                                spanning_tree_priority:
                                   Spanning-tree priority configured for the selected mode.
                                   For `rapid-pvst` the priority can also be
                                   set per VLAN under network services.
                                spanning_tree_root_super: spanning_tree_root_super
                                spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                inband_mgmt_interface:
                                   Pointer to interface used for inband management.
                                   All configuration must be done using other data
                                   models like network services or structured_config.
                                   'inband_mgmt_interface' is only used to refer to
                                   this interface as source in various management protocol settings (future feature).

                                   On L2 switches,
                                   this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                inband_mgmt_vlan:
                                   VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                   uplinks).
                                   When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                   switch as well as all 'uplink_switches'.
                                   When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                   created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                   created using network services data models.
                                inband_mgmt_subnet:
                                   Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                   ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      : <subnet> +
                                   2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       :
                                   <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range
                                   larger than total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ip' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_subnet_offset:
                                   Offset value to adjust the calculated inband management IP address within the subnet.
                                   The assigned
                                   IP will be computed by adding this offset to the device ID.
                                inband_mgmt_ip:
                                   IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                   If this is set the
                                   VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN and SVI on
                                   the parent switches must be created using network services data models.

                                   This setting is applicable
                                   to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                   is derived from 'inband_mgmt_subnet' if set.

                                   This setting is applicable to L2 switches (switches
                                   using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_address:
                                   IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                   If this
                                   is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN
                                   and SVI on the parent switches must be created using network services data models.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_subnet:
                                   Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                   on ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                   extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      :
                                   <subnet> + 2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       : <subnet> + 3 + <l2leaf id>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range larger than
                                   total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf'.
                                   Used when `inband_mgmt_ipv6_address` is set.
                                   Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_description:
                                   Description configured on the Inband Management SVI.

                                   This setting is only applied on the devices
                                   where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                   be set on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vlan_name:
                                   Name configured on the Inband Management VLAN.
                                   This setting is only applied on the devices where it
                                   is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                   on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vrf:
                                   VRF configured on the Inband Management Interface.
                                   The VRF is created if not already created by
                                   other means.
                                   This setting is only applied on the devices where it is set, it does not automatically
                                   affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                   group/node-type as needed.
                                inband_mgmt_mtu:
                                   MTU configured on the Inband Management Interface.
                                   This setting is only applied on the devices where
                                   it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                   set on each applicable node/node-group/node-type as needed.
                                inband_ztp:
                                   Enable to configure upstream device with proper configuration to allow downstream devices to be
                                   Zero-Touch-Provisioned over the uplink interfaces.
                                   For L2 devices this setting also requires that
                                   the `inband_mgmt_vlan` is set for the node.

                                   PREVIEW: Support for L3 devices is marked as "preview",
                                   meaning the data models or generated configuration can change at any time.
                                inband_ztp_lacp_fallback_delay:
                                   Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                   ZTP node.
                                   This setting also requires that `inband_ztp` is set for the node.
                                mpls_overlay_role:
                                   Set the default mpls overlay role.
                                   Acting role in overlay control plane.
                                overlay_address_families:
                                   Set the default overlay address families.


                                   Subclass of AvdList with `str` items.
                                mpls_route_reflectors:
                                   List of inventory hostname acting as MPLS route-reflectors.

                                   Subclass of AvdList with `str` items.
                                bgp_cluster_id: Set BGP cluster id.
                                ptp: Subclass of AvdModel.
                                wan_role:
                                   Override the default WAN role.

                                   This is used both for AutoVPN and Pathfinder designs.
                                   That means if
                                   `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                   `server` indicates that the router is a
                                   route-reflector.
                                cv_pathfinder_transit_mode:
                                   Configure the transit mode for a WAN client for CV Pathfinder designs
                                   only when the `wan_mode` root
                                   key is set to `cv_pathfinder`.

                                   'zone' is currently not supported.
                                cv_pathfinder_region:
                                   The CV Pathfinder region name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   The region name must be defined under 'cv_pathfinder_regions'.
                                cv_pathfinder_site:
                                   The CV Pathfinder site name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   For
                                   WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                   relevant region under 'cv_pathfinder_regions'.
                                   For pathfinders without `cv_pathfinder_region` set,
                                   the site must be defined under `cv_pathfinder_global_sites`.
                                wan_ha:
                                   The key is supported only if `wan_mode` == `cv-pathfinder`.
                                   AutoVPN support is still to be
                                   determined.

                                   Maximum 2 devices supported by group for HA.

                                   Subclass of AvdModel.
                                dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                l3_interfaces:
                                   L3 Interfaces to configure on the node.

                                   Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                   Primary key is `name` (`str`).
                                l3_port_channels:
                                   L3 Port-Channel interfaces to configure on the node.

                                   Subclass of AvdIndexedList with
                                   `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                data_plane_cpu_allocation_max:
                                   Set the maximum number of CPU used for the data plane.
                                   This setting is useful on virtual Route
                                   Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                flow_tracker_type:
                                   Set the flow tracker type.
                                   Override the `default_flow_tracker_type`` set at the `node_type_key`
                                   level.
                                   `default_flow_tracker_type` default value is `sampled`.
                                underlay_multicast: Subclass of AvdModel.
                                campus:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_access_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus access pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                cv_tags_topology_type:
                                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                   "edge" or "member-leaf".
                                digital_twin:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Set the OS version and management IP address for the digital twin of the
                                   associated node(s).

                                   Subclass of AvdModel.

                            """

                class NodeGroupsItem(AvdModel):
                    """Subclass of AvdModel."""

                    class NodesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class DownlinkPoolsItem(AvdModel):
                            """Subclass of AvdModel."""

                            class DownlinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            DownlinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "ipv4_pool": {"type": str},
                                "ipv6_pool": {"type": str},
                                "downlink_interfaces": {"type": DownlinkInterfaces},
                            }
                            ipv4_pool: str | None
                            """
                            Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                            IPv4
                            subnets used for links to downlink switches will be derived from this pool based on index the peer's
                            uplink interface's index in 'downlink_interfaces'.
                            """
                            ipv6_pool: str | None
                            """
                            Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                            IPv6
                            subnets used for links to downlink switches will be derived from this pool based on index the peer's
                            uplink interface's index in 'downlink_interfaces'.
                            """
                            downlink_interfaces: DownlinkInterfaces
                            """
                            List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                            this list will determine which subnet will be taken from the pool.

                            Subclass of AvdList with `str`
                            items.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    ipv4_pool: str | None | UndefinedType = Undefined,
                                    ipv6_pool: str | None | UndefinedType = Undefined,
                                    downlink_interfaces: DownlinkInterfaces | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DownlinkPoolsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        ipv4_pool:
                                           Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                           IPv4
                                           subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                           uplink interface's index in 'downlink_interfaces'.
                                        ipv6_pool:
                                           Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                           IPv6
                                           subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                           uplink interface's index in 'downlink_interfaces'.
                                        downlink_interfaces:
                                           List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                                           this list will determine which subnet will be taken from the pool.

                                           Subclass of AvdList with `str`
                                           items.

                                    """

                        class DownlinkPools(AvdList[DownlinkPoolsItem]):
                            """Subclass of AvdList with `DownlinkPoolsItem` items."""

                        DownlinkPools._item_type = DownlinkPoolsItem

                        class LinkTracking(AvdModel):
                            """Subclass of AvdModel."""

                            class GroupsItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                                name: str
                                """Tracking group name."""
                                recovery_delay: int | None
                                """default -> platform_settings_mlag_reload_delay -> 300."""
                                links_minimum: int | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        name: str | UndefinedType = Undefined,
                                        recovery_delay: int | None | UndefinedType = Undefined,
                                        links_minimum: int | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        GroupsItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Tracking group name.
                                            recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                            links_minimum: links_minimum

                                        """

                            class Groups(AvdIndexedList[str, GroupsItem]):
                                """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Groups._item_type = GroupsItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": False},
                                "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                            }
                            enabled: bool
                            """Default value: `False`"""
                            groups: Groups
                            """
                            Link Tracking Groups.
                            By default a single group named "LT_GROUP1" is defined with default values.
                            Any groups defined under "groups" will replace the default.


                            Subclass of AvdIndexedList with
                            `GroupsItem` items. Primary key is `name` (`str`).

                            Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                    """
                                    LinkTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        groups:
                                           Link Tracking Groups.
                                           By default a single group named "LT_GROUP1" is defined with default values.
                                           Any groups defined under "groups" will replace the default.


                                           Subclass of AvdIndexedList with
                                           `GroupsItem` items. Primary key is `name` (`str`).

                                    """

                        class LacpPortIdRange(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": False},
                                "size": {"type": int, "default": 128},
                                "offset": {"type": int, "default": 0},
                            }
                            enabled: bool
                            """Default value: `False`"""
                            size: int
                            """
                            Recommended size > = number of ports in the switch.

                            Default value: `128`
                            """
                            offset: int
                            """
                            Offset is used to avoid overlapping port-id ranges of different switches.
                            Useful when a "connected-
                            endpoint" is connected to switches in different "node_groups".

                            Default value: `0`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    size: int | UndefinedType = Undefined,
                                    offset: int | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LacpPortIdRange.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        size: Recommended size > = number of ports in the switch.
                                        offset:
                                           Offset is used to avoid overlapping port-id ranges of different switches.
                                           Useful when a "connected-
                                           endpoint" is connected to switches in different "node_groups".

                                    """

                        class UplinkInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        UplinkInterfaces._item_type = str

                        class UplinkSwitchInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        UplinkSwitchInterfaces._item_type = str

                        class UplinkSwitches(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        UplinkSwitches._item_type = str

                        class UplinkPtp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                            enable: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                    """
                                    UplinkPtp.


                                    Subclass of AvdModel.

                                    Args:
                                        enable: enable

                                    """

                        class UplinkMacsec(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"profile": {"type": str}}
                            profile: str | None

                            if TYPE_CHECKING:

                                def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    UplinkMacsec.


                                    Subclass of AvdModel.

                                    Args:
                                        profile: profile

                                    """

                        class BgpDefaults(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        BgpDefaults._item_type = str

                        class EvpnRouteServers(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        EvpnRouteServers._item_type = str

                        class Filter(AvdModel):
                            """Subclass of AvdModel."""

                            class Tenants(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Tenants._item_type = str

                            class Tags(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Tags._item_type = str

                            class AllowVrfs(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            AllowVrfs._item_type = str

                            class DenyVrfs(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            DenyVrfs._item_type = str

                            class AlwaysIncludeVrfsInTenants(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            AlwaysIncludeVrfsInTenants._item_type = str

                            _fields: ClassVar[dict] = {
                                "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                                "only_vlans_in_use": {"type": bool, "default": False},
                            }
                            tenants: Tenants
                            """
                            Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                            Tenants (default).
                            This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            tags: Tags
                            """
                            Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            allow_vrfs: AllowVrfs
                            """
                            Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                            (default).
                            This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                            Subclass of
                            AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            deny_vrfs: DenyVrfs
                            """
                            Prevent configuration of Network Services defined under these VRFs.
                            This list prevents the given
                            VRFs to be included by any other filtering mechanism.

                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                            """
                            List of tenants where VRFs will be configured even if VLANs are not included in tags.
                            Useful for L3
                            "border" leaf.


                            Subclass of AvdList with `str` items.
                            """
                            only_vlans_in_use: bool
                            """
                            Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                            Note! This
                            feature only considers configuration managed by eos_designs.
                            This excludes structured_config,
                            custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                            Default value: `False`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    tenants: Tenants | UndefinedType = Undefined,
                                    tags: Tags | UndefinedType = Undefined,
                                    allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                    deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                    always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                    only_vlans_in_use: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Filter.


                                    Subclass of AvdModel.

                                    Args:
                                        tenants:
                                           Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                           Tenants (default).
                                           This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                           Subclass of AvdList with `str` items.
                                        tags:
                                           Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                           Subclass of AvdList with `str` items.
                                        allow_vrfs:
                                           Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                           (default).
                                           This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                           Subclass of
                                           AvdList with `str` items.
                                        deny_vrfs:
                                           Prevent configuration of Network Services defined under these VRFs.
                                           This list prevents the given
                                           VRFs to be included by any other filtering mechanism.

                                           Subclass of AvdList with `str` items.
                                        always_include_vrfs_in_tenants:
                                           List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                           Useful for L3
                                           "border" leaf.


                                           Subclass of AvdList with `str` items.
                                        only_vlans_in_use:
                                           Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                           Note! This
                                           feature only considers configuration managed by eos_designs.
                                           This excludes structured_config,
                                           custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                    """

                        class EvpnGateway(AvdModel):
                            """Subclass of AvdModel."""

                            class RemotePeersItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                                hostname: str
                                """Hostname of remote EVPN GW server."""
                                ip_address: str | None
                                """Peering IP of remote Route Server."""
                                bgp_as: str | None
                                """
                                Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                interpreted as a float number.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        hostname: str | UndefinedType = Undefined,
                                        ip_address: str | None | UndefinedType = Undefined,
                                        bgp_as: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RemotePeersItem.


                                        Subclass of AvdModel.

                                        Args:
                                            hostname: Hostname of remote EVPN GW server.
                                            ip_address: Peering IP of remote Route Server.
                                            bgp_as:
                                               Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                               interpreted as a float number.

                                        """

                            class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                                """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                                _primary_key: ClassVar[str] = "hostname"

                            RemotePeers._item_type = RemotePeersItem

                            class EvpnL2(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                                enabled: bool
                                """Default value: `False`"""

                                if TYPE_CHECKING:

                                    def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnL2.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled

                                        """

                            class EvpnL3(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                                enabled: bool
                                """Default value: `False`"""
                                inter_domain: bool
                                """Default value: `True`"""

                                if TYPE_CHECKING:

                                    def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnL3.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            inter_domain: inter_domain

                                        """

                            class AllActiveMultihoming(AvdModel):
                                """Subclass of AvdModel."""

                                class EvpnEthernetSegment(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                    identifier: str
                                    """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                    rt_import: str
                                    """Low-order 6 bytes of ES-Import Route Target."""

                                    if TYPE_CHECKING:

                                        def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                            """
                                            EvpnEthernetSegment.


                                            Subclass of AvdModel.

                                            Args:
                                                identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                                rt_import: Low-order 6 bytes of ES-Import Route Target.

                                            """

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "enable_d_path": {"type": bool, "default": True},
                                    "evpn_domain_id_local": {"type": str},
                                    "evpn_domain_id_remote": {"type": str},
                                    "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                                }
                                enabled: bool
                                """Enable Active Active Multihoming resiliency model."""
                                enable_d_path: bool
                                """
                                Enable D-path for use with BGP bestpath selection algorithm.

                                Default value: `True`
                                """
                                evpn_domain_id_local: str
                                """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                                evpn_domain_id_remote: str
                                """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                                evpn_ethernet_segment: EvpnEthernetSegment
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | UndefinedType = Undefined,
                                        enable_d_path: bool | UndefinedType = Undefined,
                                        evpn_domain_id_local: str | UndefinedType = Undefined,
                                        evpn_domain_id_remote: str | UndefinedType = Undefined,
                                        evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        AllActiveMultihoming.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: Enable Active Active Multihoming resiliency model.
                                            enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                            evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                            evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                            evpn_ethernet_segment: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "remote_peers": {"type": RemotePeers},
                                "evpn_l2": {"type": EvpnL2},
                                "evpn_l3": {"type": EvpnL3},
                                "all_active_multihoming": {"type": AllActiveMultihoming},
                            }
                            remote_peers: RemotePeers
                            """
                            Define remote peers of the EVPN VXLAN Gateway.
                            If the hostname can be found in the inventory,
                            ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                            If the
                            peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                            Subclass
                            of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                            """
                            evpn_l2: EvpnL2
                            """
                            Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                            Subclass of AvdModel.
                            """
                            evpn_l3: EvpnL3
                            """
                            Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                            Subclass of AvdModel.
                            """
                            all_active_multihoming: AllActiveMultihoming
                            """
                            Enable Active Active Multihoming architecture for EVPN Gateways.
                            Not supported with MLAG or IPVPN
                            Gateway. Requires EVPN L3 inter-domain to be enabled.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    remote_peers: RemotePeers | UndefinedType = Undefined,
                                    evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                    evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                    all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    EvpnGateway.


                                    Subclass of AvdModel.

                                    Args:
                                        remote_peers:
                                           Define remote peers of the EVPN VXLAN Gateway.
                                           If the hostname can be found in the inventory,
                                           ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                           If the
                                           peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                           Subclass
                                           of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                        evpn_l2:
                                           Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                           Subclass of AvdModel.
                                        evpn_l3:
                                           Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                           Subclass of AvdModel.
                                        all_active_multihoming:
                                           Enable Active Active Multihoming architecture for EVPN Gateways.
                                           Not supported with MLAG or IPVPN
                                           Gateway. Requires EVPN L3 inter-domain to be enabled.

                                           Subclass of AvdModel.

                                    """

                        class IpvpnGateway(AvdModel):
                            """Subclass of AvdModel."""

                            class AddressFamilies(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            AddressFamilies._item_type = str

                            class RemotePeersItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                                hostname: str
                                """Hostname of remote IPVPN Peer."""
                                ip_address: str
                                """Peering IP of remote IPVPN Peer."""
                                bgp_as: str
                                """
                                Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For
                                asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                as a float number.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        hostname: str | UndefinedType = Undefined,
                                        ip_address: str | UndefinedType = Undefined,
                                        bgp_as: str | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RemotePeersItem.


                                        Subclass of AvdModel.

                                        Args:
                                            hostname: Hostname of remote IPVPN Peer.
                                            ip_address: Peering IP of remote IPVPN Peer.
                                            bgp_as:
                                               Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For
                                               asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                               as a float number.

                                        """

                            class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                                """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                                _primary_key: ClassVar[str] = "hostname"

                            RemotePeers._item_type = RemotePeersItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "evpn_domain_id": {"type": str, "default": "65535:1"},
                                "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                                "enable_d_path": {"type": bool, "default": True},
                                "maximum_routes": {"type": int, "default": 0},
                                "local_as": {"type": str},
                                "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                                "remote_peers": {"type": RemotePeers},
                            }
                            enabled: bool
                            evpn_domain_id: str
                            """
                            Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                            Default value: `"65535:1"`
                            """
                            ipvpn_domain_id: str
                            """
                            Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                            Default value: `"65535:2"`
                            """
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            maximum_routes: int
                            """
                            Maximum routes to accept from IPVPN remote peers.

                            Default value: `0`
                            """
                            local_as: str | None
                            """
                            Local BGP AS applied to peering with IPVPN remote peers.
                            BGP AS <1-4294967295> or AS number in asdot
                            notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes,
                            to prevent it from being interpreted as a float number.
                            """
                            address_families: AddressFamilies
                            """
                            IPVPN address families to enable for remote peers.

                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                            """
                            remote_peers: RemotePeers
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    evpn_domain_id: str | UndefinedType = Undefined,
                                    ipvpn_domain_id: str | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    maximum_routes: int | UndefinedType = Undefined,
                                    local_as: str | None | UndefinedType = Undefined,
                                    address_families: AddressFamilies | UndefinedType = Undefined,
                                    remote_peers: RemotePeers | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    IpvpnGateway.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                        ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                        local_as:
                                           Local BGP AS applied to peering with IPVPN remote peers.
                                           BGP AS <1-4294967295> or AS number in asdot
                                           notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes,
                                           to prevent it from being interpreted as a float number.
                                        address_families:
                                           IPVPN address families to enable for remote peers.

                                           Subclass of AvdList with `str` items.
                                        remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                    """

                        class MlagInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        MlagInterfaces._item_type = str

                        class OverlayAddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        OverlayAddressFamilies._item_type = str

                        class MplsRouteReflectors(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        MplsRouteReflectors._item_type = str

                        class Ptp(AvdModel):
                            """Subclass of AvdModel."""

                            class Uplinks(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Uplinks._item_type = str

                            class Dscp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                                general_messages: int | None
                                event_messages: int | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        general_messages: int | None | UndefinedType = Undefined,
                                        event_messages: int | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Dscp.


                                        Subclass of AvdModel.

                                        Args:
                                            general_messages: general_messages
                                            event_messages: event_messages

                                        """

                            class Monitor(AvdModel):
                                """Subclass of AvdModel."""

                                class Threshold(AvdModel):
                                    """Subclass of AvdModel."""

                                    class Drop(AvdModel):
                                        """Subclass of AvdModel."""

                                        _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                        offset_from_master: int | None
                                        mean_path_delay: int | None

                                        if TYPE_CHECKING:

                                            def __init__(
                                                self,
                                                *,
                                                offset_from_master: int | None | UndefinedType = Undefined,
                                                mean_path_delay: int | None | UndefinedType = Undefined,
                                            ) -> None:
                                                """
                                                Drop.


                                                Subclass of AvdModel.

                                                Args:
                                                    offset_from_master: offset_from_master
                                                    mean_path_delay: mean_path_delay

                                                """

                                    _fields: ClassVar[dict] = {
                                        "offset_from_master": {"type": int, "default": 250},
                                        "mean_path_delay": {"type": int, "default": 1500},
                                        "drop": {"type": Drop},
                                    }
                                    offset_from_master: int
                                    """Default value: `250`"""
                                    mean_path_delay: int
                                    """Default value: `1500`"""
                                    drop: Drop
                                    """Subclass of AvdModel."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | UndefinedType = Undefined,
                                            mean_path_delay: int | UndefinedType = Undefined,
                                            drop: Drop | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Threshold.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay
                                                drop: Subclass of AvdModel.

                                            """

                                class MissingMessage(AvdModel):
                                    """Subclass of AvdModel."""

                                    class Intervals(AvdModel):
                                        """Subclass of AvdModel."""

                                        _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                        announce: int | None
                                        follow_up: int | None
                                        sync: int | None

                                        if TYPE_CHECKING:

                                            def __init__(
                                                self,
                                                *,
                                                announce: int | None | UndefinedType = Undefined,
                                                follow_up: int | None | UndefinedType = Undefined,
                                                sync: int | None | UndefinedType = Undefined,
                                            ) -> None:
                                                """
                                                Intervals.


                                                Subclass of AvdModel.

                                                Args:
                                                    announce: announce
                                                    follow_up: follow_up
                                                    sync: sync

                                                """

                                    class SequenceIds(AvdModel):
                                        """Subclass of AvdModel."""

                                        _fields: ClassVar[dict] = {
                                            "enabled": {"type": bool, "default": True},
                                            "announce": {"type": int, "default": 3},
                                            "delay_resp": {"type": int, "default": 3},
                                            "follow_up": {"type": int, "default": 3},
                                            "sync": {"type": int, "default": 3},
                                        }
                                        enabled: bool
                                        """Default value: `True`"""
                                        announce: int
                                        """Default value: `3`"""
                                        delay_resp: int
                                        """Default value: `3`"""
                                        follow_up: int
                                        """Default value: `3`"""
                                        sync: int
                                        """Default value: `3`"""

                                        if TYPE_CHECKING:

                                            def __init__(
                                                self,
                                                *,
                                                enabled: bool | UndefinedType = Undefined,
                                                announce: int | UndefinedType = Undefined,
                                                delay_resp: int | UndefinedType = Undefined,
                                                follow_up: int | UndefinedType = Undefined,
                                                sync: int | UndefinedType = Undefined,
                                            ) -> None:
                                                """
                                                SequenceIds.


                                                Subclass of AvdModel.

                                                Args:
                                                    enabled: enabled
                                                    announce: announce
                                                    delay_resp: delay_resp
                                                    follow_up: follow_up
                                                    sync: sync

                                                """

                                    _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                    intervals: Intervals
                                    """Subclass of AvdModel."""
                                    sequence_ids: SequenceIds
                                    """Subclass of AvdModel."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                        ) -> None:
                                            """
                                            MissingMessage.


                                            Subclass of AvdModel.

                                            Args:
                                                intervals: Subclass of AvdModel.
                                                sequence_ids: Subclass of AvdModel.

                                            """

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool, "default": True},
                                    "threshold": {"type": Threshold},
                                    "missing_message": {"type": MissingMessage},
                                }
                                enabled: bool
                                """Default value: `True`"""
                                threshold: Threshold
                                """Subclass of AvdModel."""
                                missing_message: MissingMessage
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | UndefinedType = Undefined,
                                        threshold: Threshold | UndefinedType = Undefined,
                                        missing_message: MissingMessage | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Monitor.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            threshold: Subclass of AvdModel.
                                            missing_message: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "profile": {"type": str},
                                "uplinks": {"type": Uplinks},
                                "mlag": {"type": bool, "default": False},
                                "domain": {"type": int},
                                "priority1": {"type": int},
                                "priority2": {"type": int},
                                "auto_clock_identity": {"type": bool},
                                "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                                "clock_identity": {"type": str},
                                "source_ip": {"type": str},
                                "mode": {"type": str, "default": "boundary"},
                                "mode_one_step": {"type": bool, "default": False},
                                "ttl": {"type": int},
                                "forward_unicast": {"type": bool, "default": False},
                                "forward_v1": {"type": bool},
                                "dscp": {"type": Dscp},
                                "monitor": {"type": Monitor},
                            }
                            enabled: bool | None
                            profile: str | None
                            """
                            Default available profiles are:
                              - "aes67"
                              - "aes67-r16-2016"
                              - "smpte2059-2"
                            """
                            uplinks: Uplinks
                            """Subclass of AvdList with `str` items."""
                            mlag: bool
                            """
                            Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                            configured on the MLAG peer-link port-channel.

                            Default value: `False`
                            """
                            domain: int | None
                            priority1: int | None
                            """default -> automatically set based on node_type."""
                            priority2: int | None
                            """default -> (node_id modulus 256)."""
                            auto_clock_identity: bool | None
                            """
                            If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                            default EOS behaviour, simply disable the automatic PTP clock identity.
                            default ->
                            (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                            HEX).
                            """
                            clock_identity_prefix: str
                            """
                            PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                            By default the 3-byte prefix is "00:1C:73".
                            This
                            can be overridden if auto_clock_identity is set to true (which is the default).

                            Default value: `"00:1C:73"`
                            """
                            clock_identity: str | None
                            """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                            source_ip: str | None
                            """
                            By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                            relevant SVI, which is the recommended behaviour.
                            This can be set manually if required, for example,
                            to a value of "10.1.2.3".
                            """
                            mode: Literal["boundary"]
                            """Default value: `"boundary"`"""
                            mode_one_step: bool
                            """Default value: `False`"""
                            ttl: int | None
                            forward_unicast: bool
                            """
                            Enable PTP unicast forwarding.

                            Default value: `False`
                            """
                            forward_v1: bool | None
                            """Forward dataplane PTP V1 packets."""
                            dscp: Dscp
                            """Subclass of AvdModel."""
                            monitor: Monitor
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    profile: str | None | UndefinedType = Undefined,
                                    uplinks: Uplinks | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                    domain: int | None | UndefinedType = Undefined,
                                    priority1: int | None | UndefinedType = Undefined,
                                    priority2: int | None | UndefinedType = Undefined,
                                    auto_clock_identity: bool | None | UndefinedType = Undefined,
                                    clock_identity_prefix: str | UndefinedType = Undefined,
                                    clock_identity: str | None | UndefinedType = Undefined,
                                    source_ip: str | None | UndefinedType = Undefined,
                                    mode: Literal["boundary"] | UndefinedType = Undefined,
                                    mode_one_step: bool | UndefinedType = Undefined,
                                    ttl: int | None | UndefinedType = Undefined,
                                    forward_unicast: bool | UndefinedType = Undefined,
                                    forward_v1: bool | None | UndefinedType = Undefined,
                                    dscp: Dscp | UndefinedType = Undefined,
                                    monitor: Monitor | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ptp.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        profile:
                                           Default available profiles are:
                                             - "aes67"
                                             - "aes67-r16-2016"
                                             - "smpte2059-2"
                                        uplinks: Subclass of AvdList with `str` items.
                                        mlag:
                                           Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                           configured on the MLAG peer-link port-channel.
                                        domain: domain
                                        priority1: default -> automatically set based on node_type.
                                        priority2: default -> (node_id modulus 256).
                                        auto_clock_identity:
                                           If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                           default EOS behaviour, simply disable the automatic PTP clock identity.
                                           default ->
                                           (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                           HEX).
                                        clock_identity_prefix:
                                           PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                           By default the 3-byte prefix is "00:1C:73".
                                           This
                                           can be overridden if auto_clock_identity is set to true (which is the default).
                                        clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                        source_ip:
                                           By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                           relevant SVI, which is the recommended behaviour.
                                           This can be set manually if required, for example,
                                           to a value of "10.1.2.3".
                                        mode: mode
                                        mode_one_step: mode_one_step
                                        ttl: ttl
                                        forward_unicast: Enable PTP unicast forwarding.
                                        forward_v1: Forward dataplane PTP V1 packets.
                                        dscp: Subclass of AvdModel.
                                        monitor: Subclass of AvdModel.

                                    """

                        class WanHa(AvdModel):
                            """Subclass of AvdModel."""

                            class HaInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            HaInterfaces._item_type = str

                            class FlowTracking(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                                enabled: bool | None
                                name: str | None
                                """Flow tracker name as defined in flow_tracking_settings."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        FlowTracking.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            name: Flow tracker name as defined in flow_tracking_settings.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "ipsec": {"type": bool, "default": True},
                                "mtu": {"type": int, "default": 9194},
                                "ha_interfaces": {"type": HaInterfaces},
                                "ha_ipv4_pool": {"type": str},
                                "port_channel_id": {"type": int},
                                "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                                "flow_tracking": {"type": FlowTracking},
                            }
                            enabled: bool | None
                            """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                            ipsec: bool
                            """
                            Enable / Disable IPsec over HA path-group when HA is enabled.

                            Default value: `True`
                            """
                            mtu: int
                            """
                            Set MTU on WAN HA interfaces.

                            Default value: `9194`
                            """
                            ha_interfaces: HaInterfaces
                            """
                            Local WAN HA interfaces
                            Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                            Can be used to filter uplink interfaces when there are multiple uplinks.
                            Limitations:
                              Either all
                            interfaces must be uplinks or all interfaces must not be uplinks.
                              Only one interface is supported
                            for non uplinks.

                            Subclass of AvdList with `str` items.
                            """
                            ha_ipv4_pool: str | None
                            """
                            Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                            The IPv4
                            subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                            first WAN router.
                            Not used for uplink interfaces.
                            """
                            port_channel_id: int | None
                            """Port-channel ID to use for direct HA."""
                            use_port_channel_for_direct_ha: bool
                            """
                            Enable or disable using a port-channel interface for direct HA when there is only one interface.
                            This feature was introduced in EOS 4.33.0F.

                            Default value: `True`
                            """
                            flow_tracking: FlowTracking
                            """
                            Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                            setting.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    ipsec: bool | UndefinedType = Undefined,
                                    mtu: int | UndefinedType = Undefined,
                                    ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                    ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                    port_channel_id: int | None | UndefinedType = Undefined,
                                    use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    WanHa.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                        ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                        mtu: Set MTU on WAN HA interfaces.
                                        ha_interfaces:
                                           Local WAN HA interfaces
                                           Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                           Can be used to filter uplink interfaces when there are multiple uplinks.
                                           Limitations:
                                             Either all
                                           interfaces must be uplinks or all interfaces must not be uplinks.
                                             Only one interface is supported
                                           for non uplinks.

                                           Subclass of AvdList with `str` items.
                                        ha_ipv4_pool:
                                           Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                           The IPv4
                                           subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                           first WAN router.
                                           Not used for uplink interfaces.
                                        port_channel_id: Port-channel ID to use for direct HA.
                                        use_port_channel_for_direct_ha:
                                           Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                           This feature was introduced in EOS 4.33.0F.
                                        flow_tracking:
                                           Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                           setting.

                                           Subclass of AvdModel.

                                    """

                        class L3InterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class Bgp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "peer_as": {"type": str},
                                    "ipv4_prefix_list_in": {"type": str},
                                    "ipv4_prefix_list_out": {"type": str},
                                }
                                peer_as: str
                                """
                                BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For asdot notation in
                                YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                number.
                                """
                                ipv4_prefix_list_in: str | None
                                """
                                Prefix List Name. Accept routes for only these prefixes from the peer.
                                Required for wan interfaces.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """
                                ipv4_prefix_list_out: str | None
                                """
                                Prefix List Name. Advertise routes for only these prefixes.
                                If not specified, nothing would be
                                advertised.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        peer_as: str | UndefinedType = Undefined,
                                        ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                        ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Bgp.


                                        Subclass of AvdModel.

                                        Args:
                                            peer_as:
                                               BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For asdot notation in
                                               YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                               number.
                                            ipv4_prefix_list_in:
                                               Prefix List Name. Accept routes for only these prefixes from the peer.
                                               Required for wan interfaces.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                            ipv4_prefix_list_out:
                                               Prefix List Name. Advertise routes for only these prefixes.
                                               If not specified, nothing would be
                                               advertised.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                        """

                            class StaticRoutesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"prefix": {"type": str}}
                                prefix: str
                                """IPv4_network/Mask."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                        """
                                        StaticRoutesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            prefix: IPv4_network/Mask.

                                        """

                            class StaticRoutes(AvdList[StaticRoutesItem]):
                                """Subclass of AvdList with `StaticRoutesItem` items."""

                            StaticRoutes._item_type = StaticRoutesItem

                            class CvPathfinderInternetExit(AvdModel):
                                """Subclass of AvdModel."""

                                class PoliciesItem(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                    name: str
                                    """Internet-exit policy name."""
                                    tunnel_interface_numbers: str | None
                                    """
                                    Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                    interface.
                                    Examples: '1-3' or '100,200,300'
                                    """

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                        ) -> None:
                                            """
                                            PoliciesItem.


                                            Subclass of AvdModel.

                                            Args:
                                                name: Internet-exit policy name.
                                                tunnel_interface_numbers:
                                                   Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                                   interface.
                                                   Examples: '1-3' or '100,200,300'

                                            """

                                class Policies(AvdIndexedList[str, PoliciesItem]):
                                    """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                    _primary_key: ClassVar[str] = "name"

                                Policies._item_type = PoliciesItem

                                _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                                policies: Policies
                                """
                                List of Internet-exit policies using this interface as exit.

                                Subclass of AvdIndexedList with
                                `PoliciesItem` items. Primary key is `name` (`str`).
                                """

                                if TYPE_CHECKING:

                                    def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                        """
                                        CvPathfinderInternetExit.


                                        Subclass of AvdModel.

                                        Args:
                                            policies:
                                               List of Internet-exit policies using this interface as exit.

                                               Subclass of AvdIndexedList with
                                               `PoliciesItem` items. Primary key is `name` (`str`).

                                        """

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            class FlowTracking(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                                enabled: bool | None
                                name: str | None
                                """Flow tracker name as defined in flow_tracking_settings."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        FlowTracking.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            name: Flow tracker name as defined in flow_tracking_settings.

                                        """

                            _fields: ClassVar[dict] = {
                                "profile": {"type": str},
                                "name": {"type": str},
                                "description": {"type": str},
                                "ip_address": {"type": str},
                                "dhcp_ip": {"type": str},
                                "public_ip": {"type": str},
                                "encapsulation_dot1q_vlan": {"type": int},
                                "dhcp_accept_default_route": {"type": bool, "default": True},
                                "enabled": {"type": bool, "default": True},
                                "speed": {"type": str},
                                "receive_bandwidth": {"type": int},
                                "transmit_bandwidth": {"type": int},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "peer_ip": {"type": str},
                                "bgp": {"type": Bgp},
                                "ipv4_acl_in": {"type": str},
                                "ipv4_acl_out": {"type": str},
                                "static_routes": {"type": StaticRoutes},
                                "qos_profile": {"type": str},
                                "wan_carrier": {"type": str},
                                "wan_circuit_id": {"type": str},
                                "connected_to_pathfinder": {"type": bool, "default": True},
                                "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                                "rx_queue": {"type": RxQueue},
                                "raw_eos_cli": {"type": str},
                                "flow_tracking": {"type": FlowTracking},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            profile: str | None
                            """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                            For a
                            subinterface, the parent physical interface is automatically created.
                            """
                            description: str | None
                            """
                            Interface description.
                            If not set a default description will be configured with '[<peer>[
                            <peer_interface>]]'.
                            """
                            ip_address: str | None
                            """Node IPv4 address/Mask or 'dhcp'."""
                            dhcp_ip: str | None
                            """
                            When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                            IPv4 address
                            (without mask) to be allocated on the interface if known.
                            This is not rendered in the configuration
                            but can be used for substitution of 'interface_ip' in the Access-list
                            set under `ipv4_acl_in` and
                            `ipv4_acl_out`.
                            """
                            public_ip: str | None
                            """
                            Node IPv4 address (no mask).

                            This is used to get the public IP (if known) when the device is behind
                            NAT.
                            This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                            with the following preference:
                              `wan_route_servers.path_groups.interfaces.ip_address`
                                  ->
                            `l3_interfaces.public_ip`
                                      -> `l3_interfaces.ip_address`

                            The determined Public IP is used
                            by WAN routers when peering with this interface.
                            """
                            encapsulation_dot1q_vlan: int | None
                            """
                            For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                            specified.
                            """
                            dhcp_accept_default_route: bool
                            """
                            Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                            Default value: `True`
                            """
                            enabled: bool
                            """
                            Enable or Shutdown the interface.

                            Default value: `True`
                            """
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            receive_bandwidth: int | None
                            """
                            Maximum allowed receive bandwidth (download) in Mbps for this interface.
                            This is currently used on
                            CVaaS to provide more information in the visualization.
                            """
                            transmit_bandwidth: int | None
                            """
                            Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                            This is currently used on
                            CVaaS to provide more information in the visualization.
                            """
                            peer: str | None
                            """The peer device name. Used for description and documentation."""
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            peer_ip: str | None
                            """
                            The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                            and `ip` is an IP address.
                            """
                            bgp: Bgp
                            """
                            Enforce IPv4 BGP peering for the peer

                            Subclass of AvdModel.
                            """
                            ipv4_acl_in: str | None
                            """
                            Name of the IPv4 access-list to be assigned in the ingress direction.
                            The access-list must be
                            defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            Required
                            for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                            `wan_carriers`.
                            """
                            ipv4_acl_out: str | None
                            """
                            Name of the IPv4 Access-list to be assigned in the egress direction.
                            The access-list must be defined
                            under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            """
                            static_routes: StaticRoutes
                            """
                            Configure IPv4 static routes pointing to `peer_ip`.

                            Subclass of AvdList with `StaticRoutesItem`
                            items.
                            """
                            qos_profile: str | None
                            """QOS service profile."""
                            wan_carrier: str | None
                            """
                            The WAN carrier this interface is connected to.
                            This is used to infer the path-groups in which this
                            interface should be configured.
                            Unless the carrier is marked as 'trusted' under `wan_carriers`,
                            `ipv4_acl_in` is also required on all WAN interfaces.
                            """
                            wan_circuit_id: str | None
                            """
                            The WAN circuit ID for this interface.
                            This is not rendered in the configuration but used for WAN
                            designs.
                            """
                            connected_to_pathfinder: bool
                            """
                            For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                            Default value: `True`
                            """
                            cv_pathfinder_internet_exit: CvPathfinderInternetExit
                            """
                            PREVIEW: This key is in preview mode

                            Subclass of AvdModel.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the interface in the final EOS configuration."""
                            flow_tracking: FlowTracking
                            """
                            Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the Ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    profile: str | None | UndefinedType = Undefined,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    dhcp_ip: str | None | UndefinedType = Undefined,
                                    public_ip: str | None | UndefinedType = Undefined,
                                    encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                    dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                    enabled: bool | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    receive_bandwidth: int | None | UndefinedType = Undefined,
                                    transmit_bandwidth: int | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    peer_ip: str | None | UndefinedType = Undefined,
                                    bgp: Bgp | UndefinedType = Undefined,
                                    ipv4_acl_in: str | None | UndefinedType = Undefined,
                                    ipv4_acl_out: str | None | UndefinedType = Undefined,
                                    static_routes: StaticRoutes | UndefinedType = Undefined,
                                    qos_profile: str | None | UndefinedType = Undefined,
                                    wan_carrier: str | None | UndefinedType = Undefined,
                                    wan_circuit_id: str | None | UndefinedType = Undefined,
                                    connected_to_pathfinder: bool | UndefinedType = Undefined,
                                    cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    L3InterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                        name:
                                           Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                           For a
                                           subinterface, the parent physical interface is automatically created.
                                        description:
                                           Interface description.
                                           If not set a default description will be configured with '[<peer>[
                                           <peer_interface>]]'.
                                        ip_address: Node IPv4 address/Mask or 'dhcp'.
                                        dhcp_ip:
                                           When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                           IPv4 address
                                           (without mask) to be allocated on the interface if known.
                                           This is not rendered in the configuration
                                           but can be used for substitution of 'interface_ip' in the Access-list
                                           set under `ipv4_acl_in` and
                                           `ipv4_acl_out`.
                                        public_ip:
                                           Node IPv4 address (no mask).

                                           This is used to get the public IP (if known) when the device is behind
                                           NAT.
                                           This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                           with the following preference:
                                             `wan_route_servers.path_groups.interfaces.ip_address`
                                                 ->
                                           `l3_interfaces.public_ip`
                                                     -> `l3_interfaces.ip_address`

                                           The determined Public IP is used
                                           by WAN routers when peering with this interface.
                                        encapsulation_dot1q_vlan:
                                           For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                           specified.
                                        dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                        enabled: Enable or Shutdown the interface.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        receive_bandwidth:
                                           Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                           This is currently used on
                                           CVaaS to provide more information in the visualization.
                                        transmit_bandwidth:
                                           Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                           This is currently used on
                                           CVaaS to provide more information in the visualization.
                                        peer: The peer device name. Used for description and documentation.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        peer_ip:
                                           The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                           and `ip` is an IP address.
                                        bgp:
                                           Enforce IPv4 BGP peering for the peer

                                           Subclass of AvdModel.
                                        ipv4_acl_in:
                                           Name of the IPv4 access-list to be assigned in the ingress direction.
                                           The access-list must be
                                           defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                           Required
                                           for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                           `wan_carriers`.
                                        ipv4_acl_out:
                                           Name of the IPv4 Access-list to be assigned in the egress direction.
                                           The access-list must be defined
                                           under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                        static_routes:
                                           Configure IPv4 static routes pointing to `peer_ip`.

                                           Subclass of AvdList with `StaticRoutesItem`
                                           items.
                                        qos_profile: QOS service profile.
                                        wan_carrier:
                                           The WAN carrier this interface is connected to.
                                           This is used to infer the path-groups in which this
                                           interface should be configured.
                                           Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                           `ipv4_acl_in` is also required on all WAN interfaces.
                                        wan_circuit_id:
                                           The WAN circuit ID for this interface.
                                           This is not rendered in the configuration but used for WAN
                                           designs.
                                        connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                        cv_pathfinder_internet_exit:
                                           PREVIEW: This key is in preview mode

                                           Subclass of AvdModel.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                        flow_tracking:
                                           Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the Ethernet interface.

                                    """

                        class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                            """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        L3Interfaces._item_type = L3InterfacesItem

                        class L3PortChannelsItem(AvdModel):
                            """Subclass of AvdModel."""

                            class MemberInterfacesItem(AvdModel):
                                """Subclass of AvdModel."""

                                class RxQueue(AvdModel):
                                    """Subclass of AvdModel."""

                                    class Workers(AvdList[str]):
                                        """Subclass of AvdList with `str` items."""

                                    Workers._item_type = str

                                    _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                    count: int | None
                                    """
                                    Number of receive queues.
                                    The maximum value is determined by
                                    `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                    `platform` set on this device.
                                    """
                                    workers: Workers
                                    """Subclass of AvdList with `str` items."""
                                    mode: Literal["shared", "exclusive"] | None
                                    """Mode applicable to the workers."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            count: int | None | UndefinedType = Undefined,
                                            workers: Workers | UndefinedType = Undefined,
                                            mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            RxQueue.


                                            Subclass of AvdModel.

                                            Args:
                                                count:
                                                   Number of receive queues.
                                                   The maximum value is determined by
                                                   `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                                   `platform` set on this device.
                                                workers: Subclass of AvdList with `str` items.
                                                mode: Mode applicable to the workers.

                                            """

                                _fields: ClassVar[dict] = {
                                    "name": {"type": str},
                                    "description": {"type": str},
                                    "peer": {"type": str},
                                    "peer_interface": {"type": str},
                                    "speed": {"type": str},
                                    "rx_queue": {"type": RxQueue},
                                    "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                                }
                                name: str
                                """
                                Ethernet interface name like 'Ethernet2'.
                                Member interface cannot be subinterface.
                                """
                                description: str | None
                                """
                                Interface description for this member.
                                If not set, a default description will be configured with
                                '[<peer>[ <peer_interface>]]'.
                                """
                                peer: str | None
                                """
                                The peer device name. Used for description and documentation.
                                If not set, this inherits the peer
                                setting on the port-channel interface.
                                """
                                peer_interface: str | None
                                """The peer device interface. Used for description and documentation."""
                                speed: str | None
                                """
                                Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                <interface_speed>`.
                                """
                                rx_queue: RxQueue
                                """
                                Receive queue parameters for platform SFE interface profile.
                                This setting is ignored unless the
                                `platform_sfe_interface_profile.supported` is set as `true` under
                                `platform_settings.feature_support` for the `platform` set on this device.

                                Subclass of AvdModel.
                                """
                                structured_config: EosCliConfigGen.EthernetInterfacesItem
                                """Custom structured config for the member ethernet interface."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        name: str | UndefinedType = Undefined,
                                        description: str | None | UndefinedType = Undefined,
                                        peer: str | None | UndefinedType = Undefined,
                                        peer_interface: str | None | UndefinedType = Undefined,
                                        speed: str | None | UndefinedType = Undefined,
                                        rx_queue: RxQueue | UndefinedType = Undefined,
                                        structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        MemberInterfacesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name:
                                               Ethernet interface name like 'Ethernet2'.
                                               Member interface cannot be subinterface.
                                            description:
                                               Interface description for this member.
                                               If not set, a default description will be configured with
                                               '[<peer>[ <peer_interface>]]'.
                                            peer:
                                               The peer device name. Used for description and documentation.
                                               If not set, this inherits the peer
                                               setting on the port-channel interface.
                                            peer_interface: The peer device interface. Used for description and documentation.
                                            speed:
                                               Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                               <interface_speed>`.
                                            rx_queue:
                                               Receive queue parameters for platform SFE interface profile.
                                               This setting is ignored unless the
                                               `platform_sfe_interface_profile.supported` is set as `true` under
                                               `platform_settings.feature_support` for the `platform` set on this device.

                                               Subclass of AvdModel.
                                            structured_config: Custom structured config for the member ethernet interface.

                                        """

                            class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                                """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            MemberInterfaces._item_type = MemberInterfacesItem

                            class Bgp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "peer_as": {"type": str},
                                    "ipv4_prefix_list_in": {"type": str},
                                    "ipv4_prefix_list_out": {"type": str},
                                }
                                peer_as: str
                                """
                                BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For asdot notation in
                                YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                number.
                                """
                                ipv4_prefix_list_in: str | None
                                """
                                Prefix List Name. Accept routes for only these prefixes from the peer.
                                Required for wan interfaces.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """
                                ipv4_prefix_list_out: str | None
                                """
                                Prefix List Name. Advertise routes for only these prefixes.
                                If not specified, nothing would be
                                advertised.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        peer_as: str | UndefinedType = Undefined,
                                        ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                        ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Bgp.


                                        Subclass of AvdModel.

                                        Args:
                                            peer_as:
                                               BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For asdot notation in
                                               YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                               number.
                                            ipv4_prefix_list_in:
                                               Prefix List Name. Accept routes for only these prefixes from the peer.
                                               Required for wan interfaces.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                            ipv4_prefix_list_out:
                                               Prefix List Name. Advertise routes for only these prefixes.
                                               If not specified, nothing would be
                                               advertised.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                        """

                            class StaticRoutesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"prefix": {"type": str}}
                                prefix: str
                                """IPv4_network/Mask."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                        """
                                        StaticRoutesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            prefix: IPv4_network/Mask.

                                        """

                            class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                                """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                                _primary_key: ClassVar[str] = "prefix"

                            StaticRoutes._item_type = StaticRoutesItem

                            class FlowTracking(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                                enabled: bool | None
                                name: str | None
                                """Flow tracker name as defined in flow_tracking_settings."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        FlowTracking.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            name: Flow tracker name as defined in flow_tracking_settings.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "mode": {"type": str, "default": "active"},
                                "member_interfaces": {"type": MemberInterfaces},
                                "ip_address": {"type": str},
                                "dhcp_ip": {"type": str},
                                "public_ip": {"type": str},
                                "encapsulation_dot1q_vlan": {"type": int},
                                "dhcp_accept_default_route": {"type": bool, "default": True},
                                "enabled": {"type": bool, "default": True},
                                "peer": {"type": str},
                                "peer_port_channel": {"type": str},
                                "peer_ip": {"type": str},
                                "bgp": {"type": Bgp},
                                "ipv4_acl_in": {"type": str},
                                "ipv4_acl_out": {"type": str},
                                "static_routes": {"type": StaticRoutes},
                                "qos_profile": {"type": str},
                                "wan_carrier": {"type": str},
                                "wan_circuit_id": {"type": str},
                                "connected_to_pathfinder": {"type": bool, "default": True},
                                "raw_eos_cli": {"type": str},
                                "flow_tracking": {"type": FlowTracking},
                                "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            }
                            name: str
                            """
                            Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                            For a
                            Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                            """
                            description: str | None
                            """
                            Interface description.
                            If not set, a default description will be configured with '[<peer>[
                            <peer_port_channel>]]'.
                            """
                            mode: Literal["active", "passive", "on"]
                            """
                            Port-Channel mode.
                            Should not be set on Port-Channel subinterfaces.

                            Default value: `"active"`
                            """
                            member_interfaces: MemberInterfaces
                            """
                            Port-Channel member interfaces.
                            Should not be set on Port-Channel subinterfaces.

                            Subclass of
                            AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                            """
                            ip_address: str | None
                            """Node IPv4 address/Mask or 'dhcp'."""
                            dhcp_ip: str | None
                            """
                            When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                            IPv4 address
                            (without mask) to be allocated on the interface if known.
                            This is not rendered in the configuration
                            but can be used for substitution of 'interface_ip' in the Access-list
                            set under `ipv4_acl_in` and
                            `ipv4_acl_out`.
                            """
                            public_ip: str | None
                            """
                            Node IPv4 address (no mask).

                            This is used to get the public IP (if known) when the device is behind
                            NAT.
                            This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                            with the following preference:
                              `wan_route_servers.path_groups.interfaces.ip_address`
                                  ->
                            `l3_port_channels.public_ip`
                                      -> `l3_port_channels.ip_address`

                            The determined Public IP is
                            used by WAN routers when peering with this interface.
                            """
                            encapsulation_dot1q_vlan: int | None
                            """
                            For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                            specified.
                            """
                            dhcp_accept_default_route: bool
                            """
                            Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                            Default value: `True`
                            """
                            enabled: bool
                            """
                            Enable or Shutdown the interface.

                            Default value: `True`
                            """
                            peer: str | None
                            """The peer device name. Used for description and documentation."""
                            peer_port_channel: str | None
                            """The peer device port-channel interface. Used for description and documentation."""
                            peer_ip: str | None
                            """
                            The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                            and `ip` is an IP address.
                            """
                            bgp: Bgp
                            """
                            Enforce IPv4 BGP peering for the peer

                            Subclass of AvdModel.
                            """
                            ipv4_acl_in: str | None
                            """
                            Name of the IPv4 access-list to be assigned in the ingress direction.
                            The access-list must be
                            defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            Required
                            for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                            `wan_carriers`.
                            """
                            ipv4_acl_out: str | None
                            """
                            Name of the IPv4 Access-list to be assigned in the egress direction.
                            The access-list must be defined
                            under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            """
                            static_routes: StaticRoutes
                            """
                            Configure IPv4 static routes pointing to `peer_ip`.

                            Subclass of AvdIndexedList with
                            `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                            """
                            qos_profile: str | None
                            """QOS service profile."""
                            wan_carrier: str | None
                            """
                            The WAN carrier this interface is connected to.
                            This is used to infer the path-groups in which this
                            interface should be configured.
                            Unless the carrier is marked as 'trusted' under `wan_carriers`,
                            `ipv4_acl_in` is also required on all WAN interfaces.
                            """
                            wan_circuit_id: str | None
                            """
                            The WAN circuit ID for this interface.
                            This is not rendered in the configuration but used for WAN
                            designs.
                            """
                            connected_to_pathfinder: bool
                            """
                            For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                            Default value: `True`
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                            flow_tracking: FlowTracking
                            """
                            Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                            setting.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.PortChannelInterfacesItem
                            """Custom structured config for the Port-Channel interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                    member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    dhcp_ip: str | None | UndefinedType = Undefined,
                                    public_ip: str | None | UndefinedType = Undefined,
                                    encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                    dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                    enabled: bool | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_port_channel: str | None | UndefinedType = Undefined,
                                    peer_ip: str | None | UndefinedType = Undefined,
                                    bgp: Bgp | UndefinedType = Undefined,
                                    ipv4_acl_in: str | None | UndefinedType = Undefined,
                                    ipv4_acl_out: str | None | UndefinedType = Undefined,
                                    static_routes: StaticRoutes | UndefinedType = Undefined,
                                    qos_profile: str | None | UndefinedType = Undefined,
                                    wan_carrier: str | None | UndefinedType = Undefined,
                                    wan_circuit_id: str | None | UndefinedType = Undefined,
                                    connected_to_pathfinder: bool | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    L3PortChannelsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                           For a
                                           Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                        description:
                                           Interface description.
                                           If not set, a default description will be configured with '[<peer>[
                                           <peer_port_channel>]]'.
                                        mode:
                                           Port-Channel mode.
                                           Should not be set on Port-Channel subinterfaces.
                                        member_interfaces:
                                           Port-Channel member interfaces.
                                           Should not be set on Port-Channel subinterfaces.

                                           Subclass of
                                           AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                        ip_address: Node IPv4 address/Mask or 'dhcp'.
                                        dhcp_ip:
                                           When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                           IPv4 address
                                           (without mask) to be allocated on the interface if known.
                                           This is not rendered in the configuration
                                           but can be used for substitution of 'interface_ip' in the Access-list
                                           set under `ipv4_acl_in` and
                                           `ipv4_acl_out`.
                                        public_ip:
                                           Node IPv4 address (no mask).

                                           This is used to get the public IP (if known) when the device is behind
                                           NAT.
                                           This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                           with the following preference:
                                             `wan_route_servers.path_groups.interfaces.ip_address`
                                                 ->
                                           `l3_port_channels.public_ip`
                                                     -> `l3_port_channels.ip_address`

                                           The determined Public IP is
                                           used by WAN routers when peering with this interface.
                                        encapsulation_dot1q_vlan:
                                           For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                           specified.
                                        dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                        enabled: Enable or Shutdown the interface.
                                        peer: The peer device name. Used for description and documentation.
                                        peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                        peer_ip:
                                           The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                           and `ip` is an IP address.
                                        bgp:
                                           Enforce IPv4 BGP peering for the peer

                                           Subclass of AvdModel.
                                        ipv4_acl_in:
                                           Name of the IPv4 access-list to be assigned in the ingress direction.
                                           The access-list must be
                                           defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                           Required
                                           for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                           `wan_carriers`.
                                        ipv4_acl_out:
                                           Name of the IPv4 Access-list to be assigned in the egress direction.
                                           The access-list must be defined
                                           under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                        static_routes:
                                           Configure IPv4 static routes pointing to `peer_ip`.

                                           Subclass of AvdIndexedList with
                                           `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                        qos_profile: QOS service profile.
                                        wan_carrier:
                                           The WAN carrier this interface is connected to.
                                           This is used to infer the path-groups in which this
                                           interface should be configured.
                                           Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                           `ipv4_acl_in` is also required on all WAN interfaces.
                                        wan_circuit_id:
                                           The WAN circuit ID for this interface.
                                           This is not rendered in the configuration but used for WAN
                                           designs.
                                        connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                        raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                        flow_tracking:
                                           Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                           setting.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the Port-Channel interface.

                                    """

                        class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                            """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        L3PortChannels._item_type = L3PortChannelsItem

                        class UnderlayMulticast(AvdModel):
                            """Subclass of AvdModel."""

                            class PimSm(AvdModel):
                                """Subclass of AvdModel."""

                                class UplinkInterfaces(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                UplinkInterfaces._item_type = str

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "uplinks": {"type": bool, "default": True},
                                    "uplink_interfaces": {"type": UplinkInterfaces},
                                    "mlag": {"type": bool, "default": True},
                                }
                                enabled: bool | None
                                """
                                When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                on all:
                                  - P2P uplink interfaces if enabled on uplink peer
                                  - MLAG L3 peer interface if also
                                enabled on MLAG peer
                                  - l3_edge and core interfaces
                                Overrides the global
                                `underlay_multicast_pim_sm`.
                                """
                                uplinks: bool
                                """
                                Enable/Disable PIM sparse-mode on uplinks.
                                Requires node setting `underlay_multicast.pim_sm.enabled:
                                true` or, if unset, global `underlay_multicast_pim_sm: true`

                                Default value: `True`
                                """
                                uplink_interfaces: UplinkInterfaces
                                """
                                Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                Effective only when
                                node settings `underlay_multicast.pim_sm.uplinks: true`.

                                Subclass of AvdList with `str` items.
                                """
                                mlag: bool
                                """
                                Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                Default value: `True`
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        uplinks: bool | UndefinedType = Undefined,
                                        uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                        mlag: bool | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        PimSm.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled:
                                               When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                               on all:
                                                 - P2P uplink interfaces if enabled on uplink peer
                                                 - MLAG L3 peer interface if also
                                               enabled on MLAG peer
                                                 - l3_edge and core interfaces
                                               Overrides the global
                                               `underlay_multicast_pim_sm`.
                                            uplinks:
                                               Enable/Disable PIM sparse-mode on uplinks.
                                               Requires node setting `underlay_multicast.pim_sm.enabled:
                                               true` or, if unset, global `underlay_multicast_pim_sm: true`
                                            uplink_interfaces:
                                               Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                               Effective only when
                                               node settings `underlay_multicast.pim_sm.uplinks: true`.

                                               Subclass of AvdList with `str` items.
                                            mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                        """

                            class Static(AvdModel):
                                """Subclass of AvdModel."""

                                class UplinkInterfaces(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                UplinkInterfaces._item_type = str

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "uplinks": {"type": bool, "default": True},
                                    "uplink_interfaces": {"type": UplinkInterfaces},
                                    "mlag": {"type": bool, "default": True},
                                }
                                enabled: bool | None
                                """
                                When enabled, configures multicast routing and by default configures static multicast in the
                                underlay on all:
                                  - P2P uplink interfaces if enabled on uplink peer
                                  - MLAG L3 peer interface if
                                also enabled on MLAG peer
                                  - l3_edge and core interfaces
                                Overrides the global
                                `underlay_multicast_multicast`.
                                """
                                uplinks: bool
                                """
                                Enable/Disable static multicast on uplinks.
                                Requires node setting
                                `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                                Default value: `True`
                                """
                                uplink_interfaces: UplinkInterfaces
                                """
                                Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                Effective
                                only when node settings `underlay_multicast.static.uplinks: true`.

                                Subclass of AvdList with `str`
                                items.
                                """
                                mlag: bool
                                """
                                Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                Default value: `True`
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        uplinks: bool | UndefinedType = Undefined,
                                        uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                        mlag: bool | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Static.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled:
                                               When enabled, configures multicast routing and by default configures static multicast in the
                                               underlay on all:
                                                 - P2P uplink interfaces if enabled on uplink peer
                                                 - MLAG L3 peer interface if
                                               also enabled on MLAG peer
                                                 - l3_edge and core interfaces
                                               Overrides the global
                                               `underlay_multicast_multicast`.
                                            uplinks:
                                               Enable/Disable static multicast on uplinks.
                                               Requires node setting
                                               `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                            uplink_interfaces:
                                               Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                               Effective
                                               only when node settings `underlay_multicast.static.uplinks: true`.

                                               Subclass of AvdList with `str`
                                               items.
                                            mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                        """

                            _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                            pim_sm: PimSm
                            """Subclass of AvdModel."""
                            static: Static
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                    """
                                    UnderlayMulticast.


                                    Subclass of AvdModel.

                                    Args:
                                        pim_sm: Subclass of AvdModel.
                                        static: Subclass of AvdModel.

                                    """

                        class DigitalTwin(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                            act_os_version: str | None
                            """
                            Desired ACT Digital Twin OS version.
                            Overrides global `digital_twin.fabric.act_os_version` flag.
                            """
                            mgmt_ip: str | None
                            """Desired management interface IPv4 address."""
                            act_internet_access: bool | None
                            """
                            Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                            This option
                            applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                            types.
                            ACT does not provide direct Internet access to cloudeos or veos devices by default.
                            Overrides
                            global `digital_twin.fabric.act_internet_access` flag.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    act_os_version: str | None | UndefinedType = Undefined,
                                    mgmt_ip: str | None | UndefinedType = Undefined,
                                    act_internet_access: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DigitalTwin.


                                    Subclass of AvdModel.

                                    Args:
                                        act_os_version:
                                           Desired ACT Digital Twin OS version.
                                           Overrides global `digital_twin.fabric.act_os_version` flag.
                                        mgmt_ip: Desired management interface IPv4 address.
                                        act_internet_access:
                                           Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                           This option
                                           applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                           types.
                                           ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                           Overrides
                                           global `digital_twin.fabric.act_internet_access` flag.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "downlink_pools": {"type": DownlinkPools},
                            "id": {"type": int},
                            "platform": {"type": str},
                            "mac_address": {"type": str},
                            "system_mac_address": {"type": str},
                            "serial_number": {"type": str},
                            "rack": {"type": str},
                            "mgmt_ip": {"type": str},
                            "mgmt_gateway": {"type": str},
                            "ipv6_mgmt_ip": {"type": str},
                            "ipv6_mgmt_gateway": {"type": str},
                            "mgmt_interface": {"type": str},
                            "link_tracking": {"type": LinkTracking},
                            "lacp_port_id_range": {"type": LacpPortIdRange},
                            "always_configure_ip_routing": {"type": bool, "default": False},
                            "raw_eos_cli": {"type": str},
                            "structured_config": {"type": EosCliConfigGen},
                            "uplink_type": {"type": str},
                            "uplink_ipv4_pool": {"type": str},
                            "uplink_ipv6_pool": {"type": str},
                            "uplink_interfaces": {"type": UplinkInterfaces},
                            "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                            "uplink_switches": {"type": UplinkSwitches},
                            "uplink_interface_speed": {"type": str},
                            "uplink_switch_interface_speed": {"type": str},
                            "uplink_mtu": {"type": int},
                            "max_uplink_switches": {"type": int},
                            "max_parallel_uplinks": {"type": int, "default": 1},
                            "uplink_bfd": {"type": bool, "default": False},
                            "uplink_native_vlan": {"type": int},
                            "uplink_ptp": {"type": UplinkPtp},
                            "uplink_macsec": {"type": UplinkMacsec},
                            "uplink_port_channel_id": {"type": int},
                            "uplink_switch_port_channel_id": {"type": int},
                            "uplink_structured_config": {"type": dict},
                            "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                            "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                            "short_esi": {"type": str},
                            "isis_system_id_prefix": {"type": str},
                            "isis_maximum_paths": {"type": int},
                            "is_type": {"type": str},
                            "node_sid_base": {"type": int, "default": 0},
                            "loopback_ipv4_pool": {"type": str},
                            "loopback_ipv4_address": {"type": str},
                            "vtep_loopback_ipv4_pool": {"type": str},
                            "vtep_loopback_ipv6_pool": {"type": str},
                            "vtep_loopback_ipv4_address": {"type": str},
                            "vtep_loopback_ipv6_address": {"type": str},
                            "loopback_ipv4_offset": {"type": int, "default": 0},
                            "router_id_pool": {"type": str},
                            "loopback_ipv6_pool": {"type": str},
                            "loopback_ipv6_offset": {"type": int, "default": 0},
                            "vtep": {"type": bool},
                            "vtep_loopback": {"type": str},
                            "bgp_as": {"type": str},
                            "bgp_defaults": {"type": BgpDefaults},
                            "evpn_role": {"type": str},
                            "evpn_route_servers": {"type": EvpnRouteServers},
                            "evpn_services_l2_only": {"type": bool, "default": False},
                            "filter": {"type": Filter},
                            "igmp_snooping_enabled": {"type": bool},
                            "evpn_gateway": {"type": EvpnGateway},
                            "ipvpn_gateway": {"type": IpvpnGateway},
                            "mlag": {"type": bool, "default": True},
                            "mlag_dual_primary_detection": {"type": bool, "default": False},
                            "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                            "mlag_interfaces": {"type": MlagInterfaces},
                            "mlag_interfaces_speed": {"type": str},
                            "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                            "mlag_peer_l3_ipv4_pool": {"type": str},
                            "mlag_peer_l3_ipv6_pool": {"type": str},
                            "mlag_peer_vlan": {"type": int, "default": 4094},
                            "mlag_peer_link_allowed_vlans": {"type": str},
                            "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                            "mlag_peer_ipv4_pool": {"type": str},
                            "mlag_peer_ipv6_pool": {"type": str},
                            "mlag_port_channel_id": {"type": int},
                            "mlag_domain_id": {"type": str},
                            "spanning_tree_mode": {"type": str},
                            "spanning_tree_priority": {"type": int, "default": 32768},
                            "spanning_tree_root_super": {"type": bool, "default": False},
                            "spanning_tree_mst_pvst_boundary": {"type": bool},
                            "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                            "virtual_router_mac_address": {"type": str},
                            "inband_mgmt_interface": {"type": str},
                            "inband_mgmt_vlan": {"type": int, "default": 4092},
                            "inband_mgmt_subnet": {"type": str},
                            "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                            "inband_mgmt_ip": {"type": str},
                            "inband_mgmt_gateway": {"type": str},
                            "inband_mgmt_ipv6_address": {"type": str},
                            "inband_mgmt_ipv6_subnet": {"type": str},
                            "inband_mgmt_ipv6_gateway": {"type": str},
                            "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                            "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                            "inband_mgmt_vrf": {"type": str, "default": "default"},
                            "inband_mgmt_mtu": {"type": int, "default": 1500},
                            "inband_ztp": {"type": bool, "default": False},
                            "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                            "mpls_overlay_role": {"type": str},
                            "overlay_address_families": {"type": OverlayAddressFamilies},
                            "mpls_route_reflectors": {"type": MplsRouteReflectors},
                            "bgp_cluster_id": {"type": str},
                            "ptp": {"type": Ptp},
                            "wan_role": {"type": str},
                            "cv_pathfinder_transit_mode": {"type": str},
                            "cv_pathfinder_region": {"type": str},
                            "cv_pathfinder_site": {"type": str},
                            "wan_ha": {"type": WanHa},
                            "dps_mss_ipv4": {"type": str, "default": "auto"},
                            "l3_interfaces": {"type": L3Interfaces},
                            "l3_port_channels": {"type": L3PortChannels},
                            "data_plane_cpu_allocation_max": {"type": int},
                            "flow_tracker_type": {"type": str},
                            "underlay_multicast": {"type": UnderlayMulticast},
                            "campus": {"type": str},
                            "campus_pod": {"type": str},
                            "campus_access_pod": {"type": str},
                            "cv_tags_topology_type": {"type": str},
                            "digital_twin": {"type": DigitalTwin},
                        }
                        name: str
                        """The Node Name is used as "hostname"."""
                        downlink_pools: DownlinkPools
                        """
                        IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                        with `uplink_ipv4_pool` set on the downlink switch.

                        Subclass of AvdList with `DownlinkPoolsItem`
                        items.
                        """
                        id: int | None
                        """Unique identifier used for IP addressing and other algorithms."""
                        platform: str | None
                        """Arista platform family."""
                        mac_address: str | None
                        """Leverage to document management interface mac address."""
                        system_mac_address: str | None
                        """
                        System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                        Set to the same MAC address as
                        available in "show version" on the device.
                        "system_mac_address" can also be set directly as a
                        hostvar.
                        If both are set, the setting under node type settings takes precedence.
                        """
                        serial_number: str | None
                        """
                        Set to the Serial Number of the device.
                        Only used for documentation purpose in the fabric
                        documentation and part of the structured_config.
                        "serial_number" can also be set directly as a
                        hostvar.
                        If both are set, the setting under node type settings takes precedence.
                        """
                        rack: str | None
                        """Rack that the switch is located in (only used in snmp_settings location)."""
                        mgmt_ip: str | None
                        """Node management interface IPv4 address."""
                        mgmt_gateway: str | None
                        """
                        This key sets the management gateway for the device. It takes precedence over the global
                        `mgmt_gateway`.
                        """
                        ipv6_mgmt_ip: str | None
                        """Node management interface IPv6 address."""
                        ipv6_mgmt_gateway: str | None
                        """
                        This key sets the ipv6 management gateway for the device. It takes precedence over the global
                        `ipv6_mgmt_gateway`.
                        """
                        mgmt_interface: str | None
                        """
                        Management Interface Name.
                        Default -> platform_management_interface -> mgmt_interface ->
                        "Management1".
                        """
                        link_tracking: LinkTracking
                        """
                        This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                        the upstream interfaces.
                        Useful in EVPN multhoming designs.


                        Subclass of AvdModel.
                        """
                        lacp_port_id_range: LacpPortIdRange
                        """
                        This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                        number of nodes in the "node_group".
                        Unique LACP port-id ranges are recommended for EVPN Multihoming
                        designs.


                        Subclass of AvdModel.
                        """
                        always_configure_ip_routing: bool
                        """
                        Force configuration of "ip routing" even on L2 devices.
                        Use this to retain behavior of AVD versions
                        below 4.0.0.

                        Default value: `False`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the root level of the final EOS configuration."""
                        structured_config: EosCliConfigGen
                        """Custom structured config for eos_cli_config_gen."""
                        uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                        """
                        Override the default `uplink_type` set at the `node_type_key` level.
                        `uplink_type` must be "p2p" if
                        `vtep` or `underlay_router` is true for the `node_type_key` definition.
                        """
                        uplink_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        IPv4
                        subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                        uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                        """
                        uplink_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        IPv6
                        subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                        uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                        """
                        uplink_interfaces: UplinkInterfaces
                        """
                        Local uplink interfaces.
                        Each list item supports range syntax that can be expanded into a list of
                        interfaces.
                        If uplink_interfaces is not defined, platform-specific defaults (defined under
                        default_interfaces) will be used instead.
                        Please note that default_interfaces are not defined by
                        default, you should define these yourself.


                        Subclass of AvdList with `str` items.
                        """
                        uplink_switch_interfaces: UplinkSwitchInterfaces
                        """
                        Interfaces located on uplink switches.

                        Subclass of AvdList with `str` items.
                        """
                        uplink_switches: UplinkSwitches
                        """Subclass of AvdList with `str` items."""
                        uplink_interface_speed: str | None
                        """
                        Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                        (Uplink switch
                        interface speed can be overridden with `uplink_switch_interface_speed`).
                        Speed should be set in the
                        format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                        """
                        uplink_switch_interface_speed: str | None
                        """
                        Set point-to-Point interface speed for the uplink switch interface only.
                        Speed should be set in the
                        format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                        """
                        uplink_mtu: int | None
                        """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                        max_uplink_switches: int | None
                        """
                        Maximum number of uplink switches.
                        Changing this value may change IP Addressing on uplinks.
                        Can be
                        used to reserve IP space for future expansions.
                        """
                        max_parallel_uplinks: int
                        """
                        Number of parallel links towards uplink switches.
                        Changing this value may change interface naming on
                        uplinks (and corresponding downlinks).
                        Can be used to reserve interfaces for future parallel
                        uplinks.

                        Default value: `1`
                        """
                        uplink_bfd: bool
                        """
                        Enable bfd on uplink interfaces.

                        Default value: `False`
                        """
                        uplink_native_vlan: int | None
                        """
                        Only applicable to switches with layer-2 port-channel uplinks.
                        A suspended (disabled) vlan will be
                        created in both ends of the link unless the vlan is defined under network services.
                        By default the
                        uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                        """
                        uplink_ptp: UplinkPtp
                        """
                        Enable PTP on all infrastructure links.

                        Subclass of AvdModel.
                        """
                        uplink_macsec: UplinkMacsec
                        """
                        Enable MacSec on all uplinks.

                        Subclass of AvdModel.
                        """
                        uplink_port_channel_id: int | None
                        """
                        Only applicable for L2 switches with `uplink_type: port-channel`.
                        By default the uplink Port-channel
                        ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                        For
                        example:
                          member ports [ Eth22, Eth23 ] -> ID 22
                          member ports [ Eth11/1, Eth22/1 ] -> ID 111
                        For
                        MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                        This
                        option overrides the default behavior and statically sets the local Port-channel ID.
                        Note! Make sure
                        the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                        Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                        value.
                        """
                        uplink_switch_port_channel_id: int | None
                        """
                        Only applicable for L2 switches with `uplink_type: port-channel`.
                        By default the uplink switch Port-
                        channel ID will be set to the number of the first interface defined under
                        `uplink_switch_interfaces`.
                        For example:
                          member ports [ Eth22, Eth23 ] -> ID 22
                          member ports [
                        Eth11/1, Eth22/1 ] -> ID 111
                        For MLAG port-channels ID will be based on the lowest member interface
                        on the first MLAG switch.
                        This option overrides the default behavior and statically sets the Port-
                        channel ID on the uplink switch.
                        Note! Make sure the ID is unique and does not overlap with
                        autogenerated Port-channel IDs in the Network Services.
                        Note! For MLAG pairs the ID must be between
                        1 and 2000 and both MLAG switches must have the same value.
                        """
                        uplink_structured_config: dict
                        """
                        Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                        When
                        uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                        for eos_cli_config_gen overrides the settings on the ethernet interface level.
                        When uplink_type ==
                        "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                        eos_cli_config_gen overrides the settings on the port-channel interface level.
                        "uplink_structured_config" is applied after "structured_config", so it can override
                        "structured_config" defined on node-level.
                        Note! The content of this dictionary is _not_ validated
                        by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                        """
                        uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config applied to `uplink_interfaces`."""
                        uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                        uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                        uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                        channel uplinks.
                        """
                        mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config applied to MLAG peer link port-channel id.
                        Added under
                        port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                        Overrides the settings on the
                        port-channel interface level.
                        "mlag_port_channel_structured_config" is applied after
                        "structured_config", so it can override "structured_config" defined on node-level.
                        """
                        mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                        """
                        Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                        Added under
                        vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                        Overrides the settings on the vlan
                        interface level.
                        "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                        override "structured_config" defined on node-level.
                        """
                        mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                        """
                        Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                        Added under
                        vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                        Overrides the settings on the vlan
                        interface level.
                        "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                        can override "structured_config" defined on node-level.
                        """
                        short_esi: str | None
                        """
                        short_esi only valid for l2leaf devices using port-channel uplink.
                        Setting short_esi to "auto"
                        generates the short_esi automatically using a hash of configuration elements.
                        < 0000:0000:0000 |
                        auto >.
                        """
                        isis_system_id_prefix: str | None
                        """(4.4 hexadecimal)."""
                        isis_maximum_paths: int | None
                        """Number of path to configure in ECMP for ISIS."""
                        is_type: Literal["level-1-2", "level-1", "level-2"] | None
                        """Overrides `isis_default_is_type`."""
                        node_sid_base: int
                        """
                        Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                        Default value: `0`
                        """
                        loopback_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        address used for Loopback0 will be derived from this pool based on the node id and
                        'loopback_ipv4_offset'.
                        """
                        loopback_ipv4_address: str | None
                        """
                        IPv4 address without mask for Loopback0.
                        When set, it takes precedence over `loopback_ipv4_pool`.
                        Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                        """
                        vtep_loopback_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                        address used for VTEP-Loopback will be derived from this pool based on the node id and
                        'loopback_ipv4_offset'.
                        """
                        vtep_loopback_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                        address used for VTEP-Loopback will be derived from this pool based on the node id and
                        'loopback_ipv6_offset'.
                        """
                        vtep_loopback_ipv4_address: str | None
                        """
                        IPv4 address without mask for VTEP-Loopback.
                        When set, it takes precedence over
                        `vtep_loopback_ipv4_pool`.
                        Note: AVD does not check for validity of the IPv4 address and does not
                        catch duplicates.
                        """
                        vtep_loopback_ipv6_address: str | None
                        """
                        IPv6 address without mask for VTEP-Loopback.
                        When set, it takes precedence over
                        `vtep_loopback_ipv6_pool`.
                        Note: AVD does not check for validity of the IPv6 address and does not
                        catch duplicates.
                        """
                        loopback_ipv4_offset: int
                        """
                        Offset all assigned loopback IP addresses.
                        Required when the 'loopback_ipv4_pool' is the same for 2
                        different node_types (like spine and l3leaf) to avoid overlapping IPs.
                        For example, set the minimum
                        offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                        Default value: `0`
                        """
                        router_id_pool: str | None
                        """
                        Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                        router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                        will not exist on the device.
                        """
                        loopback_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                        address used for Loopback0 will be derived from this pool based on the node id and
                        'loopback_ipv6_offset'.
                        """
                        loopback_ipv6_offset: int
                        """
                        Offset all assigned loopback IPv6 addresses.
                        Required when the 'loopback_ipv6_pool' is same for 2
                        different node_types (like spine and l3leaf) to avoid overlapping IPs.
                        For example, set the minimum
                        offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                        Default value: `0`
                        """
                        vtep: bool | None
                        """
                        Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                        Overrides VTEP
                        setting inherited from node_type_keys.
                        """
                        vtep_loopback: str | None
                        """Set VXLAN source interface."""
                        bgp_as: str | None
                        """
                        BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in
                        YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                        number.
                        Required with eBGP.
                        """
                        bgp_defaults: BgpDefaults
                        """
                        List of EOS commands to apply to BGP daemon.

                        Subclass of AvdList with `str` items.
                        """
                        evpn_role: Literal["client", "server", "none"] | None
                        """
                        Acting role in EVPN control plane.
                        Default is set in node_type definition from node_type_keys.
                        """
                        evpn_route_servers: EvpnRouteServers
                        """
                        List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                        Subclass of AvdList with `str`
                        items.
                        """
                        evpn_services_l2_only: bool
                        """
                        Possibility to prevent configuration of Tenant VRFs and SVIs.
                        Override node definition
                        "network_services_l3" from node_type_keys.
                        This allows support for centralized routing.

                        Default value: `False`
                        """
                        filter: Filter
                        """
                        Filter L3 and L2 network services based on tenant and tags (and operation filter).
                        If filter is not
                        defined it will default to all.


                        Subclass of AvdModel.
                        """
                        igmp_snooping_enabled: bool | None
                        """Activate or deactivate IGMP snooping on device level."""
                        evpn_gateway: EvpnGateway
                        """
                        Node is acting as EVPN Multi-Domain Gateway.
                        New BGP peer-group is generated between EVPN GWs in
                        different domains or between GWs and Route Servers.
                        Name can be changed under
                        "bgp_peer_groups.evpn_overlay_core" variable.
                        L3 rechability for different EVPN GWs must be already
                        in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                        same Ansible inventory.


                        Subclass of AvdModel.
                        """
                        ipvpn_gateway: IpvpnGateway
                        """
                        Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                        this is "bgp_peer_groups.ipvpn_gateway_peers".
                        L3 Reachability is required for this to work, the
                        preferred method to establish underlay connectivity is to use core_interfaces.


                        Subclass of
                        AvdModel.
                        """
                        mlag: bool
                        """
                        Enable / Disable auto MLAG, when two nodes are defined in node group.

                        Default value: `True`
                        """
                        mlag_dual_primary_detection: bool
                        """
                        Enable / Disable MLAG dual primary detection.

                        Default value: `False`
                        """
                        mlag_ibgp_origin_incomplete: bool
                        """
                        Set origin of routes received from MLAG iBGP peer to incomplete.
                        The purpose is to optimize routing
                        for leaf loopbacks from spine perspective and
                        avoid suboptimal routing via peerlink for control
                        plane traffic.

                        Default value: `True`
                        """
                        mlag_interfaces: MlagInterfaces
                        """
                        Each list item supports range syntax that can be expanded into a list of interfaces.
                        Required when
                        MLAG leafs are present in the topology.


                        Subclass of AvdList with `str` items.
                        """
                        mlag_interfaces_speed: str | None
                        """
                        Set MLAG interface speed.
                        Speed should be set in the format `<interface_speed>` or `forced
                        <interface_speed>` or `auto <interface_speed>`.
                        """
                        mlag_peer_l3_vlan: int
                        """
                        Underlay L3 peering SVI interface id.
                        If set to 0 or the same vlan as mlag_peer_vlan, the
                        mlag_peer_vlan will be used for L3 peering.

                        Default value: `4093`
                        """
                        mlag_peer_l3_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                        MLAG switch.
                        Required when MLAG leafs present in topology and they are using a separate L3 peering
                        VLAN.
                        """
                        mlag_peer_l3_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        The IPv6
                        subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                        MLAG switch.
                        Required when MLAG leafs present in topology and they are using a separate L3 peering
                        VLAN.
                        """
                        mlag_peer_vlan: int
                        """
                        MLAG Peer Link (control link) SVI interface id.

                        Default value: `4094`
                        """
                        mlag_peer_link_allowed_vlans: str | None
                        mlag_peer_address_family: Literal["ipv4", "ipv6"]
                        """
                        IP address family used to establish MLAG Peer Link (control link).
                        `ipv6` requires EOS version
                        4.31.1F or higher.
                        Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                        (ex. `mlag_peer_l3_vlan` set to 4094).

                        Default value: `"ipv4"`
                        """
                        mlag_peer_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                        first MLAG switch.
                        Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                        """
                        mlag_peer_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        The IPv6
                        address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                        first MLAG switch.
                        Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                        """
                        mlag_port_channel_id: int | None
                        """
                        If not set, the mlag port-channel id is generated based on the digits of the first interface present
                        in 'mlag_interfaces'.
                        Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                        999999 > for EOS >= 4.25.0F.
                        """
                        mlag_domain_id: str | None
                        """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                        spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                        spanning_tree_priority: int
                        """
                        Spanning-tree priority configured for the selected mode.
                        For `rapid-pvst` the priority can also be
                        set per VLAN under network services.

                        Default value: `32768`
                        """
                        spanning_tree_root_super: bool
                        """Default value: `False`"""
                        spanning_tree_mst_pvst_boundary: bool | None
                        """Enable MST PVST border ports."""
                        spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                        """Specify range of port-ids to reserve for port-channels."""
                        virtual_router_mac_address: str | None
                        """Virtual router mac address for anycast gateway."""
                        inband_mgmt_interface: str | None
                        """
                        Pointer to interface used for inband management.
                        All configuration must be done using other data
                        models like network services or structured_config.
                        'inband_mgmt_interface' is only used to refer to
                        this interface as source in various management protocol settings (future feature).

                        On L2 switches,
                        this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                        """
                        inband_mgmt_vlan: int
                        """
                        VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                        uplinks).
                        When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                        switch as well as all 'uplink_switches'.
                        When using 'inband_mgmt_ip' the VLAN and SVI will only be
                        created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                        created using network services data models.

                        Default value: `4092`
                        """
                        inband_mgmt_subnet: str | None
                        """
                        Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                        as uplinks).
                        Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                        ARP.
                        This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                        SVI IP address will be assigned as follows:
                        virtual-router: <subnet> + 1
                        l3leaf A      : <subnet> +
                        2 (same IP on all l3leaf A)
                        l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                        l2leafs       :
                        <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                        GW on l2leafs : <subnet> + 1
                        Assign range
                        larger than total l2leafs + 5

                        Setting is ignored if 'inband_mgmt_ip' is set.

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_subnet_offset: int
                        """
                        Offset value to adjust the calculated inband management IP address within the subnet.
                        The assigned
                        IP will be computed by adding this offset to the device ID.

                        Default value: `0`
                        """
                        inband_mgmt_ip: str | None
                        """
                        IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                        This overrides
                        'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                        If this is set the
                        VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                        The VLAN and SVI on
                        the parent switches must be created using network services data models.

                        This setting is applicable
                        to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_gateway: str | None
                        """
                        Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                        is derived from 'inband_mgmt_subnet' if set.

                        This setting is applicable to L2 switches (switches
                        using port-channel trunks as uplinks).
                        """
                        inband_mgmt_ipv6_address: str | None
                        """
                        IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                        This overrides
                        'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                        If this
                        is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                        The VLAN
                        and SVI on the parent switches must be created using network services data models.

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_ipv6_subnet: str | None
                        """
                        Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                        as uplinks).
                        Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                        on ARP.
                        This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                        extension.
                        SVI IP address will be assigned as follows:
                        virtual-router: <subnet> + 1
                        l3leaf A      :
                        <subnet> + 2 (same IP on all l3leaf A)
                        l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                        l2leafs       : <subnet> + 3 + <l2leaf id>
                        GW on l2leafs : <subnet> + 1
                        Assign range larger than
                        total l2leafs + 5

                        Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_ipv6_gateway: str | None
                        """
                        Default gateway configured in the 'inband_mgmt_vrf'.
                        Used when `inband_mgmt_ipv6_address` is set.
                        Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_description: str
                        """
                        Description configured on the Inband Management SVI.

                        This setting is only applied on the devices
                        where it is set, it does not automatically affect any parent/child devices configuration, so it must
                        be set on each applicable node/node-group/node-type as needed.

                        Default value: `"Inband Management"`
                        """
                        inband_mgmt_vlan_name: str
                        """
                        Name configured on the Inband Management VLAN.
                        This setting is only applied on the devices where it
                        is set, it does not automatically affect any parent/child devices configuration, so it must be set
                        on each applicable node/node-group/node-type as needed.

                        Default value: `"INBAND_MGMT"`
                        """
                        inband_mgmt_vrf: str
                        """
                        VRF configured on the Inband Management Interface.
                        The VRF is created if not already created by
                        other means.
                        This setting is only applied on the devices where it is set, it does not automatically
                        affect any parent/child devices configuration, so it must be set on each applicable node/node-
                        group/node-type as needed.

                        Default value: `"default"`
                        """
                        inband_mgmt_mtu: int
                        """
                        MTU configured on the Inband Management Interface.
                        This setting is only applied on the devices where
                        it is set, it does not automatically affect any parent/child devices configuration, so it must be
                        set on each applicable node/node-group/node-type as needed.

                        Default value: `1500`
                        """
                        inband_ztp: bool
                        """
                        Enable to configure upstream device with proper configuration to allow downstream devices to be
                        Zero-Touch-Provisioned over the uplink interfaces.
                        For L2 devices this setting also requires that
                        the `inband_mgmt_vlan` is set for the node.

                        PREVIEW: Support for L3 devices is marked as "preview",
                        meaning the data models or generated configuration can change at any time.

                        Default value: `False`
                        """
                        inband_ztp_lacp_fallback_delay: int
                        """
                        Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                        ZTP node.
                        This setting also requires that `inband_ztp` is set for the node.

                        Default value: `30`
                        """
                        mpls_overlay_role: Literal["client", "server", "none"] | None
                        """
                        Set the default mpls overlay role.
                        Acting role in overlay control plane.
                        """
                        overlay_address_families: OverlayAddressFamilies
                        """
                        Set the default overlay address families.


                        Subclass of AvdList with `str` items.
                        """
                        mpls_route_reflectors: MplsRouteReflectors
                        """
                        List of inventory hostname acting as MPLS route-reflectors.

                        Subclass of AvdList with `str` items.
                        """
                        bgp_cluster_id: str | None
                        """Set BGP cluster id."""
                        ptp: Ptp
                        """Subclass of AvdModel."""
                        wan_role: Literal["client", "server"] | None
                        """
                        Override the default WAN role.

                        This is used both for AutoVPN and Pathfinder designs.
                        That means if
                        `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                        `server` indicates that the router is a
                        route-reflector.
                        """
                        cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                        """
                        Configure the transit mode for a WAN client for CV Pathfinder designs
                        only when the `wan_mode` root
                        key is set to `cv_pathfinder`.

                        'zone' is currently not supported.
                        """
                        cv_pathfinder_region: str | None
                        """
                        The CV Pathfinder region name.
                        This key is required for WAN routers but optional for pathfinders.
                        The region name must be defined under 'cv_pathfinder_regions'.
                        """
                        cv_pathfinder_site: str | None
                        """
                        The CV Pathfinder site name.
                        This key is required for WAN routers but optional for pathfinders.
                        For
                        WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                        relevant region under 'cv_pathfinder_regions'.
                        For pathfinders without `cv_pathfinder_region` set,
                        the site must be defined under `cv_pathfinder_global_sites`.
                        """
                        wan_ha: WanHa
                        """
                        The key is supported only if `wan_mode` == `cv-pathfinder`.
                        AutoVPN support is still to be
                        determined.

                        Maximum 2 devices supported by group for HA.

                        Subclass of AvdModel.
                        """
                        dps_mss_ipv4: str
                        """
                        IPv4 MSS value configured under "router path-selection" on WAN Devices.

                        Default value: `"auto"`
                        """
                        l3_interfaces: L3Interfaces
                        """
                        L3 Interfaces to configure on the node.

                        Subclass of AvdIndexedList with `L3InterfacesItem` items.
                        Primary key is `name` (`str`).
                        """
                        l3_port_channels: L3PortChannels
                        """
                        L3 Port-Channel interfaces to configure on the node.

                        Subclass of AvdIndexedList with
                        `L3PortChannelsItem` items. Primary key is `name` (`str`).
                        """
                        data_plane_cpu_allocation_max: int | None
                        """
                        Set the maximum number of CPU used for the data plane.
                        This setting is useful on virtual Route
                        Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                        """
                        flow_tracker_type: Literal["sampled", "hardware"] | None
                        """
                        Set the flow tracker type.
                        Override the `default_flow_tracker_type`` set at the `node_type_key`
                        level.
                        `default_flow_tracker_type` default value is `sampled`.
                        """
                        underlay_multicast: UnderlayMulticast
                        """Subclass of AvdModel."""
                        campus: str | None
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Name of the campus. Used to generate CloudVision device tags with the
                        `generate_cv_tags.campus_fabric` feature.
                        """
                        campus_pod: str | None
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Name of the campus pod. Used to generate CloudVision device tags with the
                        `generate_cv_tags.campus_fabric` feature.
                        """
                        campus_access_pod: str | None
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Name of the campus access pod. Used to generate CloudVision device tags with the
                        `generate_cv_tags.campus_fabric` feature.
                        """
                        cv_tags_topology_type: str | None
                        """
                        Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                        "edge" or "member-leaf".
                        """
                        digital_twin: DigitalTwin
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Set the OS version and management IP address for the digital twin of the
                        associated node(s).

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                downlink_pools: DownlinkPools | UndefinedType = Undefined,
                                id: int | None | UndefinedType = Undefined,
                                platform: str | None | UndefinedType = Undefined,
                                mac_address: str | None | UndefinedType = Undefined,
                                system_mac_address: str | None | UndefinedType = Undefined,
                                serial_number: str | None | UndefinedType = Undefined,
                                rack: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                mgmt_gateway: str | None | UndefinedType = Undefined,
                                ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                                ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                                mgmt_interface: str | None | UndefinedType = Undefined,
                                link_tracking: LinkTracking | UndefinedType = Undefined,
                                lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                                always_configure_ip_routing: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen | UndefinedType = Undefined,
                                uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                                uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                                uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                                uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                                uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                                uplink_interface_speed: str | None | UndefinedType = Undefined,
                                uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                                uplink_mtu: int | None | UndefinedType = Undefined,
                                max_uplink_switches: int | None | UndefinedType = Undefined,
                                max_parallel_uplinks: int | UndefinedType = Undefined,
                                uplink_bfd: bool | UndefinedType = Undefined,
                                uplink_native_vlan: int | None | UndefinedType = Undefined,
                                uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                                uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                                uplink_port_channel_id: int | None | UndefinedType = Undefined,
                                uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                                uplink_structured_config: dict | UndefinedType = Undefined,
                                uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                                mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                                short_esi: str | None | UndefinedType = Undefined,
                                isis_system_id_prefix: str | None | UndefinedType = Undefined,
                                isis_maximum_paths: int | None | UndefinedType = Undefined,
                                is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                                node_sid_base: int | UndefinedType = Undefined,
                                loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                                loopback_ipv4_address: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                                loopback_ipv4_offset: int | UndefinedType = Undefined,
                                router_id_pool: str | None | UndefinedType = Undefined,
                                loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                                loopback_ipv6_offset: int | UndefinedType = Undefined,
                                vtep: bool | None | UndefinedType = Undefined,
                                vtep_loopback: str | None | UndefinedType = Undefined,
                                bgp_as: str | None | UndefinedType = Undefined,
                                bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                                evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                                evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                                evpn_services_l2_only: bool | UndefinedType = Undefined,
                                filter: Filter | UndefinedType = Undefined,
                                igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                                evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                                ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                                mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                                mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                                mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                                mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                                mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                                mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                                mlag_peer_vlan: int | UndefinedType = Undefined,
                                mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                                mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                                mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                                mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                                mlag_port_channel_id: int | None | UndefinedType = Undefined,
                                mlag_domain_id: str | None | UndefinedType = Undefined,
                                spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                                spanning_tree_priority: int | UndefinedType = Undefined,
                                spanning_tree_root_super: bool | UndefinedType = Undefined,
                                spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                                spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                                | UndefinedType = Undefined,
                                virtual_router_mac_address: str | None | UndefinedType = Undefined,
                                inband_mgmt_interface: str | None | UndefinedType = Undefined,
                                inband_mgmt_vlan: int | UndefinedType = Undefined,
                                inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                                inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                                inband_mgmt_ip: str | None | UndefinedType = Undefined,
                                inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                                inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                                inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                                inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                                inband_mgmt_description: str | UndefinedType = Undefined,
                                inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                                inband_mgmt_vrf: str | UndefinedType = Undefined,
                                inband_mgmt_mtu: int | UndefinedType = Undefined,
                                inband_ztp: bool | UndefinedType = Undefined,
                                inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                                mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                                overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                                mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                                bgp_cluster_id: str | None | UndefinedType = Undefined,
                                ptp: Ptp | UndefinedType = Undefined,
                                wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                                cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                                cv_pathfinder_region: str | None | UndefinedType = Undefined,
                                cv_pathfinder_site: str | None | UndefinedType = Undefined,
                                wan_ha: WanHa | UndefinedType = Undefined,
                                dps_mss_ipv4: str | UndefinedType = Undefined,
                                l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                                l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                                data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                                flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                                underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                                campus: str | None | UndefinedType = Undefined,
                                campus_pod: str | None | UndefinedType = Undefined,
                                campus_access_pod: str | None | UndefinedType = Undefined,
                                cv_tags_topology_type: str | None | UndefinedType = Undefined,
                                digital_twin: DigitalTwin | UndefinedType = Undefined,
                            ) -> None:
                                """
                                NodesItem.


                                Subclass of AvdModel.

                                Args:
                                    name: The Node Name is used as "hostname".
                                    downlink_pools:
                                       IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                                       with `uplink_ipv4_pool` set on the downlink switch.

                                       Subclass of AvdList with `DownlinkPoolsItem`
                                       items.
                                    id: Unique identifier used for IP addressing and other algorithms.
                                    platform: Arista platform family.
                                    mac_address: Leverage to document management interface mac address.
                                    system_mac_address:
                                       System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                       Set to the same MAC address as
                                       available in "show version" on the device.
                                       "system_mac_address" can also be set directly as a
                                       hostvar.
                                       If both are set, the setting under node type settings takes precedence.
                                    serial_number:
                                       Set to the Serial Number of the device.
                                       Only used for documentation purpose in the fabric
                                       documentation and part of the structured_config.
                                       "serial_number" can also be set directly as a
                                       hostvar.
                                       If both are set, the setting under node type settings takes precedence.
                                    rack: Rack that the switch is located in (only used in snmp_settings location).
                                    mgmt_ip: Node management interface IPv4 address.
                                    mgmt_gateway:
                                       This key sets the management gateway for the device. It takes precedence over the global
                                       `mgmt_gateway`.
                                    ipv6_mgmt_ip: Node management interface IPv6 address.
                                    ipv6_mgmt_gateway:
                                       This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                       `ipv6_mgmt_gateway`.
                                    mgmt_interface:
                                       Management Interface Name.
                                       Default -> platform_management_interface -> mgmt_interface ->
                                       "Management1".
                                    link_tracking:
                                       This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                       the upstream interfaces.
                                       Useful in EVPN multhoming designs.


                                       Subclass of AvdModel.
                                    lacp_port_id_range:
                                       This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                       number of nodes in the "node_group".
                                       Unique LACP port-id ranges are recommended for EVPN Multihoming
                                       designs.


                                       Subclass of AvdModel.
                                    always_configure_ip_routing:
                                       Force configuration of "ip routing" even on L2 devices.
                                       Use this to retain behavior of AVD versions
                                       below 4.0.0.
                                    raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                    structured_config: Custom structured config for eos_cli_config_gen.
                                    uplink_type:
                                       Override the default `uplink_type` set at the `node_type_key` level.
                                       `uplink_type` must be "p2p" if
                                       `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                    uplink_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       IPv4
                                       subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                       uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                    uplink_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       IPv6
                                       subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                       uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                    uplink_interfaces:
                                       Local uplink interfaces.
                                       Each list item supports range syntax that can be expanded into a list of
                                       interfaces.
                                       If uplink_interfaces is not defined, platform-specific defaults (defined under
                                       default_interfaces) will be used instead.
                                       Please note that default_interfaces are not defined by
                                       default, you should define these yourself.


                                       Subclass of AvdList with `str` items.
                                    uplink_switch_interfaces:
                                       Interfaces located on uplink switches.

                                       Subclass of AvdList with `str` items.
                                    uplink_switches: Subclass of AvdList with `str` items.
                                    uplink_interface_speed:
                                       Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                       (Uplink switch
                                       interface speed can be overridden with `uplink_switch_interface_speed`).
                                       Speed should be set in the
                                       format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                    uplink_switch_interface_speed:
                                       Set point-to-Point interface speed for the uplink switch interface only.
                                       Speed should be set in the
                                       format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                    uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                    max_uplink_switches:
                                       Maximum number of uplink switches.
                                       Changing this value may change IP Addressing on uplinks.
                                       Can be
                                       used to reserve IP space for future expansions.
                                    max_parallel_uplinks:
                                       Number of parallel links towards uplink switches.
                                       Changing this value may change interface naming on
                                       uplinks (and corresponding downlinks).
                                       Can be used to reserve interfaces for future parallel
                                       uplinks.
                                    uplink_bfd: Enable bfd on uplink interfaces.
                                    uplink_native_vlan:
                                       Only applicable to switches with layer-2 port-channel uplinks.
                                       A suspended (disabled) vlan will be
                                       created in both ends of the link unless the vlan is defined under network services.
                                       By default the
                                       uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                    uplink_ptp:
                                       Enable PTP on all infrastructure links.

                                       Subclass of AvdModel.
                                    uplink_macsec:
                                       Enable MacSec on all uplinks.

                                       Subclass of AvdModel.
                                    uplink_port_channel_id:
                                       Only applicable for L2 switches with `uplink_type: port-channel`.
                                       By default the uplink Port-channel
                                       ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                       For
                                       example:
                                         member ports [ Eth22, Eth23 ] -> ID 22
                                         member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                       For
                                       MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                       This
                                       option overrides the default behavior and statically sets the local Port-channel ID.
                                       Note! Make sure
                                       the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                       Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                       value.
                                    uplink_switch_port_channel_id:
                                       Only applicable for L2 switches with `uplink_type: port-channel`.
                                       By default the uplink switch Port-
                                       channel ID will be set to the number of the first interface defined under
                                       `uplink_switch_interfaces`.
                                       For example:
                                         member ports [ Eth22, Eth23 ] -> ID 22
                                         member ports [
                                       Eth11/1, Eth22/1 ] -> ID 111
                                       For MLAG port-channels ID will be based on the lowest member interface
                                       on the first MLAG switch.
                                       This option overrides the default behavior and statically sets the Port-
                                       channel ID on the uplink switch.
                                       Note! Make sure the ID is unique and does not overlap with
                                       autogenerated Port-channel IDs in the Network Services.
                                       Note! For MLAG pairs the ID must be between
                                       1 and 2000 and both MLAG switches must have the same value.
                                    uplink_structured_config:
                                       Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                       When
                                       uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                       for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                       When uplink_type ==
                                       "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                       eos_cli_config_gen overrides the settings on the port-channel interface level.
                                       "uplink_structured_config" is applied after "structured_config", so it can override
                                       "structured_config" defined on node-level.
                                       Note! The content of this dictionary is _not_ validated
                                       by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                    uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                    uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                    uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                    uplink_switch_port_channel_structured_config:
                                       Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                       channel uplinks.
                                    mlag_port_channel_structured_config:
                                       Custom structured config applied to MLAG peer link port-channel id.
                                       Added under
                                       port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                       Overrides the settings on the
                                       port-channel interface level.
                                       "mlag_port_channel_structured_config" is applied after
                                       "structured_config", so it can override "structured_config" defined on node-level.
                                    mlag_peer_vlan_structured_config:
                                       Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                       Added under
                                       vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                       Overrides the settings on the vlan
                                       interface level.
                                       "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                       override "structured_config" defined on node-level.
                                    mlag_peer_l3_vlan_structured_config:
                                       Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                       Added under
                                       vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                       Overrides the settings on the vlan
                                       interface level.
                                       "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                       can override "structured_config" defined on node-level.
                                    short_esi:
                                       short_esi only valid for l2leaf devices using port-channel uplink.
                                       Setting short_esi to "auto"
                                       generates the short_esi automatically using a hash of configuration elements.
                                       < 0000:0000:0000 |
                                       auto >.
                                    isis_system_id_prefix: (4.4 hexadecimal).
                                    isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                    is_type: Overrides `isis_default_is_type`.
                                    node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                    loopback_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       address used for Loopback0 will be derived from this pool based on the node id and
                                       'loopback_ipv4_offset'.
                                    loopback_ipv4_address:
                                       IPv4 address without mask for Loopback0.
                                       When set, it takes precedence over `loopback_ipv4_pool`.
                                       Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                    vtep_loopback_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                       address used for VTEP-Loopback will be derived from this pool based on the node id and
                                       'loopback_ipv4_offset'.
                                    vtep_loopback_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                       address used for VTEP-Loopback will be derived from this pool based on the node id and
                                       'loopback_ipv6_offset'.
                                    vtep_loopback_ipv4_address:
                                       IPv4 address without mask for VTEP-Loopback.
                                       When set, it takes precedence over
                                       `vtep_loopback_ipv4_pool`.
                                       Note: AVD does not check for validity of the IPv4 address and does not
                                       catch duplicates.
                                    vtep_loopback_ipv6_address:
                                       IPv6 address without mask for VTEP-Loopback.
                                       When set, it takes precedence over
                                       `vtep_loopback_ipv6_pool`.
                                       Note: AVD does not check for validity of the IPv6 address and does not
                                       catch duplicates.
                                    loopback_ipv4_offset:
                                       Offset all assigned loopback IP addresses.
                                       Required when the 'loopback_ipv4_pool' is the same for 2
                                       different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                       For example, set the minimum
                                       offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                    router_id_pool:
                                       Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                       router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                       will not exist on the device.
                                    loopback_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                       address used for Loopback0 will be derived from this pool based on the node id and
                                       'loopback_ipv6_offset'.
                                    loopback_ipv6_offset:
                                       Offset all assigned loopback IPv6 addresses.
                                       Required when the 'loopback_ipv6_pool' is same for 2
                                       different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                       For example, set the minimum
                                       offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                    vtep:
                                       Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                       Overrides VTEP
                                       setting inherited from node_type_keys.
                                    vtep_loopback: Set VXLAN source interface.
                                    bgp_as:
                                       BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                       For asdot notation in
                                       YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                       number.
                                       Required with eBGP.
                                    bgp_defaults:
                                       List of EOS commands to apply to BGP daemon.

                                       Subclass of AvdList with `str` items.
                                    evpn_role:
                                       Acting role in EVPN control plane.
                                       Default is set in node_type definition from node_type_keys.
                                    evpn_route_servers:
                                       List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                       Subclass of AvdList with `str`
                                       items.
                                    evpn_services_l2_only:
                                       Possibility to prevent configuration of Tenant VRFs and SVIs.
                                       Override node definition
                                       "network_services_l3" from node_type_keys.
                                       This allows support for centralized routing.
                                    filter:
                                       Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                       If filter is not
                                       defined it will default to all.


                                       Subclass of AvdModel.
                                    igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                    evpn_gateway:
                                       Node is acting as EVPN Multi-Domain Gateway.
                                       New BGP peer-group is generated between EVPN GWs in
                                       different domains or between GWs and Route Servers.
                                       Name can be changed under
                                       "bgp_peer_groups.evpn_overlay_core" variable.
                                       L3 rechability for different EVPN GWs must be already
                                       in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                       same Ansible inventory.


                                       Subclass of AvdModel.
                                    ipvpn_gateway:
                                       Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                       this is "bgp_peer_groups.ipvpn_gateway_peers".
                                       L3 Reachability is required for this to work, the
                                       preferred method to establish underlay connectivity is to use core_interfaces.


                                       Subclass of
                                       AvdModel.
                                    mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                    mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                    mlag_ibgp_origin_incomplete:
                                       Set origin of routes received from MLAG iBGP peer to incomplete.
                                       The purpose is to optimize routing
                                       for leaf loopbacks from spine perspective and
                                       avoid suboptimal routing via peerlink for control
                                       plane traffic.
                                    mlag_interfaces:
                                       Each list item supports range syntax that can be expanded into a list of interfaces.
                                       Required when
                                       MLAG leafs are present in the topology.


                                       Subclass of AvdList with `str` items.
                                    mlag_interfaces_speed:
                                       Set MLAG interface speed.
                                       Speed should be set in the format `<interface_speed>` or `forced
                                       <interface_speed>` or `auto <interface_speed>`.
                                    mlag_peer_l3_vlan:
                                       Underlay L3 peering SVI interface id.
                                       If set to 0 or the same vlan as mlag_peer_vlan, the
                                       mlag_peer_vlan will be used for L3 peering.
                                    mlag_peer_l3_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                       MLAG switch.
                                       Required when MLAG leafs present in topology and they are using a separate L3 peering
                                       VLAN.
                                    mlag_peer_l3_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       The IPv6
                                       subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                       MLAG switch.
                                       Required when MLAG leafs present in topology and they are using a separate L3 peering
                                       VLAN.
                                    mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                    mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                    mlag_peer_address_family:
                                       IP address family used to establish MLAG Peer Link (control link).
                                       `ipv6` requires EOS version
                                       4.31.1F or higher.
                                       Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                       (ex. `mlag_peer_l3_vlan` set to 4094).
                                    mlag_peer_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                       first MLAG switch.
                                       Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                    mlag_peer_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       The IPv6
                                       address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                       first MLAG switch.
                                       Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                    mlag_port_channel_id:
                                       If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                       in 'mlag_interfaces'.
                                       Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                       999999 > for EOS >= 4.25.0F.
                                    mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                    spanning_tree_mode: spanning_tree_mode
                                    spanning_tree_priority:
                                       Spanning-tree priority configured for the selected mode.
                                       For `rapid-pvst` the priority can also be
                                       set per VLAN under network services.
                                    spanning_tree_root_super: spanning_tree_root_super
                                    spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                    spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                    virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                    inband_mgmt_interface:
                                       Pointer to interface used for inband management.
                                       All configuration must be done using other data
                                       models like network services or structured_config.
                                       'inband_mgmt_interface' is only used to refer to
                                       this interface as source in various management protocol settings (future feature).

                                       On L2 switches,
                                       this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                    inband_mgmt_vlan:
                                       VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                       uplinks).
                                       When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                       switch as well as all 'uplink_switches'.
                                       When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                       created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                       created using network services data models.
                                    inband_mgmt_subnet:
                                       Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                       as uplinks).
                                       Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                       ARP.
                                       This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                       SVI IP address will be assigned as follows:
                                       virtual-router: <subnet> + 1
                                       l3leaf A      : <subnet> +
                                       2 (same IP on all l3leaf A)
                                       l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                       l2leafs       :
                                       <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                       GW on l2leafs : <subnet> + 1
                                       Assign range
                                       larger than total l2leafs + 5

                                       Setting is ignored if 'inband_mgmt_ip' is set.

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_subnet_offset:
                                       Offset value to adjust the calculated inband management IP address within the subnet.
                                       The assigned
                                       IP will be computed by adding this offset to the device ID.
                                    inband_mgmt_ip:
                                       IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                       This overrides
                                       'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                       If this is set the
                                       VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                       The VLAN and SVI on
                                       the parent switches must be created using network services data models.

                                       This setting is applicable
                                       to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_gateway:
                                       Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                       is derived from 'inband_mgmt_subnet' if set.

                                       This setting is applicable to L2 switches (switches
                                       using port-channel trunks as uplinks).
                                    inband_mgmt_ipv6_address:
                                       IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                       This overrides
                                       'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                       If this
                                       is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                       The VLAN
                                       and SVI on the parent switches must be created using network services data models.

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_ipv6_subnet:
                                       Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                       as uplinks).
                                       Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                       on ARP.
                                       This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                       extension.
                                       SVI IP address will be assigned as follows:
                                       virtual-router: <subnet> + 1
                                       l3leaf A      :
                                       <subnet> + 2 (same IP on all l3leaf A)
                                       l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                       l2leafs       : <subnet> + 3 + <l2leaf id>
                                       GW on l2leafs : <subnet> + 1
                                       Assign range larger than
                                       total l2leafs + 5

                                       Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_ipv6_gateway:
                                       Default gateway configured in the 'inband_mgmt_vrf'.
                                       Used when `inband_mgmt_ipv6_address` is set.
                                       Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_description:
                                       Description configured on the Inband Management SVI.

                                       This setting is only applied on the devices
                                       where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                       be set on each applicable node/node-group/node-type as needed.
                                    inband_mgmt_vlan_name:
                                       Name configured on the Inband Management VLAN.
                                       This setting is only applied on the devices where it
                                       is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                       on each applicable node/node-group/node-type as needed.
                                    inband_mgmt_vrf:
                                       VRF configured on the Inband Management Interface.
                                       The VRF is created if not already created by
                                       other means.
                                       This setting is only applied on the devices where it is set, it does not automatically
                                       affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                       group/node-type as needed.
                                    inband_mgmt_mtu:
                                       MTU configured on the Inband Management Interface.
                                       This setting is only applied on the devices where
                                       it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                       set on each applicable node/node-group/node-type as needed.
                                    inband_ztp:
                                       Enable to configure upstream device with proper configuration to allow downstream devices to be
                                       Zero-Touch-Provisioned over the uplink interfaces.
                                       For L2 devices this setting also requires that
                                       the `inband_mgmt_vlan` is set for the node.

                                       PREVIEW: Support for L3 devices is marked as "preview",
                                       meaning the data models or generated configuration can change at any time.
                                    inband_ztp_lacp_fallback_delay:
                                       Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                       ZTP node.
                                       This setting also requires that `inband_ztp` is set for the node.
                                    mpls_overlay_role:
                                       Set the default mpls overlay role.
                                       Acting role in overlay control plane.
                                    overlay_address_families:
                                       Set the default overlay address families.


                                       Subclass of AvdList with `str` items.
                                    mpls_route_reflectors:
                                       List of inventory hostname acting as MPLS route-reflectors.

                                       Subclass of AvdList with `str` items.
                                    bgp_cluster_id: Set BGP cluster id.
                                    ptp: Subclass of AvdModel.
                                    wan_role:
                                       Override the default WAN role.

                                       This is used both for AutoVPN and Pathfinder designs.
                                       That means if
                                       `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                       `server` indicates that the router is a
                                       route-reflector.
                                    cv_pathfinder_transit_mode:
                                       Configure the transit mode for a WAN client for CV Pathfinder designs
                                       only when the `wan_mode` root
                                       key is set to `cv_pathfinder`.

                                       'zone' is currently not supported.
                                    cv_pathfinder_region:
                                       The CV Pathfinder region name.
                                       This key is required for WAN routers but optional for pathfinders.
                                       The region name must be defined under 'cv_pathfinder_regions'.
                                    cv_pathfinder_site:
                                       The CV Pathfinder site name.
                                       This key is required for WAN routers but optional for pathfinders.
                                       For
                                       WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                       relevant region under 'cv_pathfinder_regions'.
                                       For pathfinders without `cv_pathfinder_region` set,
                                       the site must be defined under `cv_pathfinder_global_sites`.
                                    wan_ha:
                                       The key is supported only if `wan_mode` == `cv-pathfinder`.
                                       AutoVPN support is still to be
                                       determined.

                                       Maximum 2 devices supported by group for HA.

                                       Subclass of AvdModel.
                                    dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                    l3_interfaces:
                                       L3 Interfaces to configure on the node.

                                       Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                       Primary key is `name` (`str`).
                                    l3_port_channels:
                                       L3 Port-Channel interfaces to configure on the node.

                                       Subclass of AvdIndexedList with
                                       `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                    data_plane_cpu_allocation_max:
                                       Set the maximum number of CPU used for the data plane.
                                       This setting is useful on virtual Route
                                       Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                    flow_tracker_type:
                                       Set the flow tracker type.
                                       Override the `default_flow_tracker_type`` set at the `node_type_key`
                                       level.
                                       `default_flow_tracker_type` default value is `sampled`.
                                    underlay_multicast: Subclass of AvdModel.
                                    campus:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Name of the campus. Used to generate CloudVision device tags with the
                                       `generate_cv_tags.campus_fabric` feature.
                                    campus_pod:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Name of the campus pod. Used to generate CloudVision device tags with the
                                       `generate_cv_tags.campus_fabric` feature.
                                    campus_access_pod:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Name of the campus access pod. Used to generate CloudVision device tags with the
                                       `generate_cv_tags.campus_fabric` feature.
                                    cv_tags_topology_type:
                                       Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                       "edge" or "member-leaf".
                                    digital_twin:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Set the OS version and management IP address for the digital twin of the
                                       associated node(s).

                                       Subclass of AvdModel.

                                """

                    class Nodes(AvdIndexedList[str, NodesItem]):
                        """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    Nodes._item_type = NodesItem

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        class GroupsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                            name: str
                            """Tracking group name."""
                            recovery_delay: int | None
                            """default -> platform_settings_mlag_reload_delay -> 300."""
                            links_minimum: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    recovery_delay: int | None | UndefinedType = Undefined,
                                    links_minimum: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    GroupsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Tracking group name.
                                        recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                        links_minimum: links_minimum

                                    """

                        class Groups(AvdIndexedList[str, GroupsItem]):
                            """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        Groups._item_type = GroupsItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        groups: Groups
                        """
                        Link Tracking Groups.
                        By default a single group named "LT_GROUP1" is defined with default values.
                        Any groups defined under "groups" will replace the default.


                        Subclass of AvdIndexedList with
                        `GroupsItem` items. Primary key is `name` (`str`).

                        Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    groups:
                                       Link Tracking Groups.
                                       By default a single group named "LT_GROUP1" is defined with default values.
                                       Any groups defined under "groups" will replace the default.


                                       Subclass of AvdIndexedList with
                                       `GroupsItem` items. Primary key is `name` (`str`).

                                """

                    class LacpPortIdRange(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "size": {"type": int, "default": 128},
                            "offset": {"type": int, "default": 0},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        size: int
                        """
                        Recommended size > = number of ports in the switch.

                        Default value: `128`
                        """
                        offset: int
                        """
                        Offset is used to avoid overlapping port-id ranges of different switches.
                        Useful when a "connected-
                        endpoint" is connected to switches in different "node_groups".

                        Default value: `0`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                size: int | UndefinedType = Undefined,
                                offset: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LacpPortIdRange.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    size: Recommended size > = number of ports in the switch.
                                    offset:
                                       Offset is used to avoid overlapping port-id ranges of different switches.
                                       Useful when a "connected-
                                       endpoint" is connected to switches in different "node_groups".

                                """

                    class UplinkInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkInterfaces._item_type = str

                    class UplinkSwitchInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitchInterfaces._item_type = str

                    class UplinkSwitches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitches._item_type = str

                    class UplinkPtp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                        enable: bool
                        """Default value: `False`"""

                        if TYPE_CHECKING:

                            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                """
                                UplinkPtp.


                                Subclass of AvdModel.

                                Args:
                                    enable: enable

                                """

                    class UplinkMacsec(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}}
                        profile: str | None

                        if TYPE_CHECKING:

                            def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                """
                                UplinkMacsec.


                                Subclass of AvdModel.

                                Args:
                                    profile: profile

                                """

                    class BgpDefaults(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    BgpDefaults._item_type = str

                    class EvpnRouteServers(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EvpnRouteServers._item_type = str

                    class Filter(AvdModel):
                        """Subclass of AvdModel."""

                        class Tenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tenants._item_type = str

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class AllowVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AllowVrfs._item_type = str

                        class DenyVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DenyVrfs._item_type = str

                        class AlwaysIncludeVrfsInTenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AlwaysIncludeVrfsInTenants._item_type = str

                        _fields: ClassVar[dict] = {
                            "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                            "only_vlans_in_use": {"type": bool, "default": False},
                        }
                        tenants: Tenants
                        """
                        Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                        Tenants (default).
                        This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        tags: Tags
                        """
                        Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        allow_vrfs: AllowVrfs
                        """
                        Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                        (default).
                        This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                        Subclass of
                        AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        deny_vrfs: DenyVrfs
                        """
                        Prevent configuration of Network Services defined under these VRFs.
                        This list prevents the given
                        VRFs to be included by any other filtering mechanism.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                        """
                        List of tenants where VRFs will be configured even if VLANs are not included in tags.
                        Useful for L3
                        "border" leaf.


                        Subclass of AvdList with `str` items.
                        """
                        only_vlans_in_use: bool
                        """
                        Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                        Note! This
                        feature only considers configuration managed by eos_designs.
                        This excludes structured_config,
                        custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                        Default value: `False`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                tenants: Tenants | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                only_vlans_in_use: bool | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Filter.


                                Subclass of AvdModel.

                                Args:
                                    tenants:
                                       Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                       Tenants (default).
                                       This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                       Subclass of AvdList with `str` items.
                                    tags:
                                       Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                       Subclass of AvdList with `str` items.
                                    allow_vrfs:
                                       Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                       (default).
                                       This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                       Subclass of
                                       AvdList with `str` items.
                                    deny_vrfs:
                                       Prevent configuration of Network Services defined under these VRFs.
                                       This list prevents the given
                                       VRFs to be included by any other filtering mechanism.

                                       Subclass of AvdList with `str` items.
                                    always_include_vrfs_in_tenants:
                                       List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                       Useful for L3
                                       "border" leaf.


                                       Subclass of AvdList with `str` items.
                                    only_vlans_in_use:
                                       Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                       Note! This
                                       feature only considers configuration managed by eos_designs.
                                       This excludes structured_config,
                                       custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                """

                    class EvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote EVPN GW server."""
                            ip_address: str | None
                            """Peering IP of remote Route Server."""
                            bgp_as: str | None
                            """
                            Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                            interpreted as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    bgp_as: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote EVPN GW server.
                                        ip_address: Peering IP of remote Route Server.
                                        bgp_as:
                                           Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                           interpreted as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        class EvpnL2(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                            enabled: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL2.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class EvpnL3(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                            enabled: bool
                            """Default value: `False`"""
                            inter_domain: bool
                            """Default value: `True`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        inter_domain: inter_domain

                                    """

                        class AllActiveMultihoming(AvdModel):
                            """Subclass of AvdModel."""

                            class EvpnEthernetSegment(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                identifier: str
                                """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                rt_import: str
                                """Low-order 6 bytes of ES-Import Route Target."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnEthernetSegment.


                                        Subclass of AvdModel.

                                        Args:
                                            identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                            rt_import: Low-order 6 bytes of ES-Import Route Target.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "enable_d_path": {"type": bool, "default": True},
                                "evpn_domain_id_local": {"type": str},
                                "evpn_domain_id_remote": {"type": str},
                                "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                            }
                            enabled: bool
                            """Enable Active Active Multihoming resiliency model."""
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            evpn_domain_id_local: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_domain_id_remote: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_ethernet_segment: EvpnEthernetSegment
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    evpn_domain_id_local: str | UndefinedType = Undefined,
                                    evpn_domain_id_remote: str | UndefinedType = Undefined,
                                    evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AllActiveMultihoming.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable Active Active Multihoming resiliency model.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_ethernet_segment: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "remote_peers": {"type": RemotePeers},
                            "evpn_l2": {"type": EvpnL2},
                            "evpn_l3": {"type": EvpnL3},
                            "all_active_multihoming": {"type": AllActiveMultihoming},
                        }
                        remote_peers: RemotePeers
                        """
                        Define remote peers of the EVPN VXLAN Gateway.
                        If the hostname can be found in the inventory,
                        ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                        If the
                        peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                        Subclass
                        of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                        """
                        evpn_l2: EvpnL2
                        """
                        Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                        Subclass of AvdModel.
                        """
                        evpn_l3: EvpnL3
                        """
                        Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                        Subclass of AvdModel.
                        """
                        all_active_multihoming: AllActiveMultihoming
                        """
                        Enable Active Active Multihoming architecture for EVPN Gateways.
                        Not supported with MLAG or IPVPN
                        Gateway. Requires EVPN L3 inter-domain to be enabled.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                                evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    remote_peers:
                                       Define remote peers of the EVPN VXLAN Gateway.
                                       If the hostname can be found in the inventory,
                                       ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                       If the
                                       peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                       Subclass
                                       of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                    evpn_l2:
                                       Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                       Subclass of AvdModel.
                                    evpn_l3:
                                       Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                       Subclass of AvdModel.
                                    all_active_multihoming:
                                       Enable Active Active Multihoming architecture for EVPN Gateways.
                                       Not supported with MLAG or IPVPN
                                       Gateway. Requires EVPN L3 inter-domain to be enabled.

                                       Subclass of AvdModel.

                                """

                    class IpvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class AddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AddressFamilies._item_type = str

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote IPVPN Peer."""
                            ip_address: str
                            """Peering IP of remote IPVPN Peer."""
                            bgp_as: str
                            """
                            Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For
                            asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                            as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | UndefinedType = Undefined,
                                    bgp_as: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote IPVPN Peer.
                                        ip_address: Peering IP of remote IPVPN Peer.
                                        bgp_as:
                                           Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For
                                           asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                           as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "evpn_domain_id": {"type": str, "default": "65535:1"},
                            "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                            "enable_d_path": {"type": bool, "default": True},
                            "maximum_routes": {"type": int, "default": 0},
                            "local_as": {"type": str},
                            "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                            "remote_peers": {"type": RemotePeers},
                        }
                        enabled: bool
                        evpn_domain_id: str
                        """
                        Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:1"`
                        """
                        ipvpn_domain_id: str
                        """
                        Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:2"`
                        """
                        enable_d_path: bool
                        """
                        Enable D-path for use with BGP bestpath selection algorithm.

                        Default value: `True`
                        """
                        maximum_routes: int
                        """
                        Maximum routes to accept from IPVPN remote peers.

                        Default value: `0`
                        """
                        local_as: str | None
                        """
                        Local BGP AS applied to peering with IPVPN remote peers.
                        BGP AS <1-4294967295> or AS number in asdot
                        notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes,
                        to prevent it from being interpreted as a float number.
                        """
                        address_families: AddressFamilies
                        """
                        IPVPN address families to enable for remote peers.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                        """
                        remote_peers: RemotePeers
                        """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                evpn_domain_id: str | UndefinedType = Undefined,
                                ipvpn_domain_id: str | UndefinedType = Undefined,
                                enable_d_path: bool | UndefinedType = Undefined,
                                maximum_routes: int | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                address_families: AddressFamilies | UndefinedType = Undefined,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                    ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                    enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                    maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                    local_as:
                                       Local BGP AS applied to peering with IPVPN remote peers.
                                       BGP AS <1-4294967295> or AS number in asdot
                                       notation "<1-65535>.<0-65535>".
                                       For asdot notation in YAML inputs, the value must be put in quotes,
                                       to prevent it from being interpreted as a float number.
                                    address_families:
                                       IPVPN address families to enable for remote peers.

                                       Subclass of AvdList with `str` items.
                                    remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                """

                    class MlagInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MlagInterfaces._item_type = str

                    class OverlayAddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    OverlayAddressFamilies._item_type = str

                    class MplsRouteReflectors(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MplsRouteReflectors._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        class Uplinks(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Uplinks._item_type = str

                        class Dscp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                            general_messages: int | None
                            event_messages: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, general_messages: int | None | UndefinedType = Undefined, event_messages: int | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Dscp.


                                    Subclass of AvdModel.

                                    Args:
                                        general_messages: general_messages
                                        event_messages: event_messages

                                    """

                        class Monitor(AvdModel):
                            """Subclass of AvdModel."""

                            class Threshold(AvdModel):
                                """Subclass of AvdModel."""

                                class Drop(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                    offset_from_master: int | None
                                    mean_path_delay: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | None | UndefinedType = Undefined,
                                            mean_path_delay: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Drop.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay

                                            """

                                _fields: ClassVar[dict] = {
                                    "offset_from_master": {"type": int, "default": 250},
                                    "mean_path_delay": {"type": int, "default": 1500},
                                    "drop": {"type": Drop},
                                }
                                offset_from_master: int
                                """Default value: `250`"""
                                mean_path_delay: int
                                """Default value: `1500`"""
                                drop: Drop
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        offset_from_master: int | UndefinedType = Undefined,
                                        mean_path_delay: int | UndefinedType = Undefined,
                                        drop: Drop | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Threshold.


                                        Subclass of AvdModel.

                                        Args:
                                            offset_from_master: offset_from_master
                                            mean_path_delay: mean_path_delay
                                            drop: Subclass of AvdModel.

                                        """

                            class MissingMessage(AvdModel):
                                """Subclass of AvdModel."""

                                class Intervals(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                    announce: int | None
                                    follow_up: int | None
                                    sync: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            announce: int | None | UndefinedType = Undefined,
                                            follow_up: int | None | UndefinedType = Undefined,
                                            sync: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Intervals.


                                            Subclass of AvdModel.

                                            Args:
                                                announce: announce
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                class SequenceIds(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "enabled": {"type": bool, "default": True},
                                        "announce": {"type": int, "default": 3},
                                        "delay_resp": {"type": int, "default": 3},
                                        "follow_up": {"type": int, "default": 3},
                                        "sync": {"type": int, "default": 3},
                                    }
                                    enabled: bool
                                    """Default value: `True`"""
                                    announce: int
                                    """Default value: `3`"""
                                    delay_resp: int
                                    """Default value: `3`"""
                                    follow_up: int
                                    """Default value: `3`"""
                                    sync: int
                                    """Default value: `3`"""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            enabled: bool | UndefinedType = Undefined,
                                            announce: int | UndefinedType = Undefined,
                                            delay_resp: int | UndefinedType = Undefined,
                                            follow_up: int | UndefinedType = Undefined,
                                            sync: int | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            SequenceIds.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                announce: announce
                                                delay_resp: delay_resp
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                intervals: Intervals
                                """Subclass of AvdModel."""
                                sequence_ids: SequenceIds
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        MissingMessage.


                                        Subclass of AvdModel.

                                        Args:
                                            intervals: Subclass of AvdModel.
                                            sequence_ids: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": True},
                                "threshold": {"type": Threshold},
                                "missing_message": {"type": MissingMessage},
                            }
                            enabled: bool
                            """Default value: `True`"""
                            threshold: Threshold
                            """Subclass of AvdModel."""
                            missing_message: MissingMessage
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    threshold: Threshold | UndefinedType = Undefined,
                                    missing_message: MissingMessage | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Monitor.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        threshold: Subclass of AvdModel.
                                        missing_message: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "profile": {"type": str},
                            "uplinks": {"type": Uplinks},
                            "mlag": {"type": bool, "default": False},
                            "domain": {"type": int},
                            "priority1": {"type": int},
                            "priority2": {"type": int},
                            "auto_clock_identity": {"type": bool},
                            "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                            "clock_identity": {"type": str},
                            "source_ip": {"type": str},
                            "mode": {"type": str, "default": "boundary"},
                            "mode_one_step": {"type": bool, "default": False},
                            "ttl": {"type": int},
                            "forward_unicast": {"type": bool, "default": False},
                            "forward_v1": {"type": bool},
                            "dscp": {"type": Dscp},
                            "monitor": {"type": Monitor},
                        }
                        enabled: bool | None
                        profile: str | None
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"
                        """
                        uplinks: Uplinks
                        """Subclass of AvdList with `str` items."""
                        mlag: bool
                        """
                        Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                        configured on the MLAG peer-link port-channel.

                        Default value: `False`
                        """
                        domain: int | None
                        priority1: int | None
                        """default -> automatically set based on node_type."""
                        priority2: int | None
                        """default -> (node_id modulus 256)."""
                        auto_clock_identity: bool | None
                        """
                        If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                        default EOS behaviour, simply disable the automatic PTP clock identity.
                        default ->
                        (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                        HEX).
                        """
                        clock_identity_prefix: str
                        """
                        PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                        By default the 3-byte prefix is "00:1C:73".
                        This
                        can be overridden if auto_clock_identity is set to true (which is the default).

                        Default value: `"00:1C:73"`
                        """
                        clock_identity: str | None
                        """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                        source_ip: str | None
                        """
                        By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                        relevant SVI, which is the recommended behaviour.
                        This can be set manually if required, for example,
                        to a value of "10.1.2.3".
                        """
                        mode: Literal["boundary"]
                        """Default value: `"boundary"`"""
                        mode_one_step: bool
                        """Default value: `False`"""
                        ttl: int | None
                        forward_unicast: bool
                        """
                        Enable PTP unicast forwarding.

                        Default value: `False`
                        """
                        forward_v1: bool | None
                        """Forward dataplane PTP V1 packets."""
                        dscp: Dscp
                        """Subclass of AvdModel."""
                        monitor: Monitor
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                uplinks: Uplinks | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                domain: int | None | UndefinedType = Undefined,
                                priority1: int | None | UndefinedType = Undefined,
                                priority2: int | None | UndefinedType = Undefined,
                                auto_clock_identity: bool | None | UndefinedType = Undefined,
                                clock_identity_prefix: str | UndefinedType = Undefined,
                                clock_identity: str | None | UndefinedType = Undefined,
                                source_ip: str | None | UndefinedType = Undefined,
                                mode: Literal["boundary"] | UndefinedType = Undefined,
                                mode_one_step: bool | UndefinedType = Undefined,
                                ttl: int | None | UndefinedType = Undefined,
                                forward_unicast: bool | UndefinedType = Undefined,
                                forward_v1: bool | None | UndefinedType = Undefined,
                                dscp: Dscp | UndefinedType = Undefined,
                                monitor: Monitor | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"
                                    uplinks: Subclass of AvdList with `str` items.
                                    mlag:
                                       Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                       configured on the MLAG peer-link port-channel.
                                    domain: domain
                                    priority1: default -> automatically set based on node_type.
                                    priority2: default -> (node_id modulus 256).
                                    auto_clock_identity:
                                       If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                       default EOS behaviour, simply disable the automatic PTP clock identity.
                                       default ->
                                       (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                       HEX).
                                    clock_identity_prefix:
                                       PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                       By default the 3-byte prefix is "00:1C:73".
                                       This
                                       can be overridden if auto_clock_identity is set to true (which is the default).
                                    clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                    source_ip:
                                       By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                       relevant SVI, which is the recommended behaviour.
                                       This can be set manually if required, for example,
                                       to a value of "10.1.2.3".
                                    mode: mode
                                    mode_one_step: mode_one_step
                                    ttl: ttl
                                    forward_unicast: Enable PTP unicast forwarding.
                                    forward_v1: Forward dataplane PTP V1 packets.
                                    dscp: Subclass of AvdModel.
                                    monitor: Subclass of AvdModel.

                                """

                    class WanHa(AvdModel):
                        """Subclass of AvdModel."""

                        class HaInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        HaInterfaces._item_type = str

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "ipsec": {"type": bool, "default": True},
                            "mtu": {"type": int, "default": 9194},
                            "ha_interfaces": {"type": HaInterfaces},
                            "ha_ipv4_pool": {"type": str},
                            "port_channel_id": {"type": int},
                            "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                            "flow_tracking": {"type": FlowTracking},
                        }
                        enabled: bool | None
                        """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                        ipsec: bool
                        """
                        Enable / Disable IPsec over HA path-group when HA is enabled.

                        Default value: `True`
                        """
                        mtu: int
                        """
                        Set MTU on WAN HA interfaces.

                        Default value: `9194`
                        """
                        ha_interfaces: HaInterfaces
                        """
                        Local WAN HA interfaces
                        Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                        Can be used to filter uplink interfaces when there are multiple uplinks.
                        Limitations:
                          Either all
                        interfaces must be uplinks or all interfaces must not be uplinks.
                          Only one interface is supported
                        for non uplinks.

                        Subclass of AvdList with `str` items.
                        """
                        ha_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                        first WAN router.
                        Not used for uplink interfaces.
                        """
                        port_channel_id: int | None
                        """Port-channel ID to use for direct HA."""
                        use_port_channel_for_direct_ha: bool
                        """
                        Enable or disable using a port-channel interface for direct HA when there is only one interface.
                        This feature was introduced in EOS 4.33.0F.

                        Default value: `True`
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                        setting.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                ipsec: bool | UndefinedType = Undefined,
                                mtu: int | UndefinedType = Undefined,
                                ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                port_channel_id: int | None | UndefinedType = Undefined,
                                use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                            ) -> None:
                                """
                                WanHa.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                    ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                    mtu: Set MTU on WAN HA interfaces.
                                    ha_interfaces:
                                       Local WAN HA interfaces
                                       Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                       Can be used to filter uplink interfaces when there are multiple uplinks.
                                       Limitations:
                                         Either all
                                       interfaces must be uplinks or all interfaces must not be uplinks.
                                         Only one interface is supported
                                       for non uplinks.

                                       Subclass of AvdList with `str` items.
                                    ha_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                       first WAN router.
                                       Not used for uplink interfaces.
                                    port_channel_id: Port-channel ID to use for direct HA.
                                    use_port_channel_for_direct_ha:
                                       Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                       This feature was introduced in EOS 4.33.0F.
                                    flow_tracking:
                                       Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                       setting.

                                       Subclass of AvdModel.

                                """

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class CvPathfinderInternetExit(AvdModel):
                            """Subclass of AvdModel."""

                            class PoliciesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                name: str
                                """Internet-exit policy name."""
                                tunnel_interface_numbers: str | None
                                """
                                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                interface.
                                Examples: '1-3' or '100,200,300'
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        PoliciesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Internet-exit policy name.
                                            tunnel_interface_numbers:
                                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                               interface.
                                               Examples: '1-3' or '100,200,300'

                                        """

                            class Policies(AvdIndexedList[str, PoliciesItem]):
                                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Policies._item_type = PoliciesItem

                            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                            policies: Policies
                            """
                            List of Internet-exit policies using this interface as exit.

                            Subclass of AvdIndexedList with
                            `PoliciesItem` items. Primary key is `name` (`str`).
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                    """
                                    CvPathfinderInternetExit.


                                    Subclass of AvdModel.

                                    Args:
                                        policies:
                                           List of Internet-exit policies using this interface as exit.

                                           Subclass of AvdIndexedList with
                                           `PoliciesItem` items. Primary key is `name` (`str`).

                                    """

                        class RxQueue(AvdModel):
                            """Subclass of AvdModel."""

                            class Workers(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Workers._item_type = str

                            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                            count: int | None
                            """
                            Number of receive queues.
                            The maximum value is determined by
                            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                            `platform` set on this device.
                            """
                            workers: Workers
                            """Subclass of AvdList with `str` items."""
                            mode: Literal["shared", "exclusive"] | None
                            """Mode applicable to the workers."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    count: int | None | UndefinedType = Undefined,
                                    workers: Workers | UndefinedType = Undefined,
                                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RxQueue.


                                    Subclass of AvdModel.

                                    Args:
                                        count:
                                           Number of receive queues.
                                           The maximum value is determined by
                                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                           `platform` set on this device.
                                        workers: Subclass of AvdList with `str` items.
                                        mode: Mode applicable to the workers.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "profile": {"type": str},
                            "name": {"type": str},
                            "description": {"type": str},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "speed": {"type": str},
                            "receive_bandwidth": {"type": int},
                            "transmit_bandwidth": {"type": int},
                            "peer": {"type": str},
                            "peer_interface": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                            "rx_queue": {"type": RxQueue},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        }
                        profile: str | None
                        """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                        name: str
                        """
                        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                        For a
                        subinterface, the parent physical interface is automatically created.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set a default description will be configured with '[<peer>[
                        <peer_interface>]]'.
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_interfaces.public_ip`
                                  -> `l3_interfaces.ip_address`

                        The determined Public IP is used
                        by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        speed: str | None
                        """
                        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                        <interface_speed>`.
                        """
                        receive_bandwidth: int | None
                        """
                        Maximum allowed receive bandwidth (download) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        transmit_bandwidth: int | None
                        """
                        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_interface: str | None
                        """The peer device interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdList with `StaticRoutesItem`
                        items.
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        cv_pathfinder_internet_exit: CvPathfinderInternetExit
                        """
                        PREVIEW: This key is in preview mode

                        Subclass of AvdModel.
                        """
                        rx_queue: RxQueue
                        """
                        Receive queue parameters for platform SFE interface profile.
                        This setting is ignored unless the
                        `platform_sfe_interface_profile.supported` is set as `true` under
                        `platform_settings.feature_support` for the `platform` set on this device.

                        Subclass of AvdModel.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config for the Ethernet interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | None | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                speed: str | None | UndefinedType = Undefined,
                                receive_bandwidth: int | None | UndefinedType = Undefined,
                                transmit_bandwidth: int | None | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_interface: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                rx_queue: RxQueue | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                    name:
                                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                       For a
                                       subinterface, the parent physical interface is automatically created.
                                    description:
                                       Interface description.
                                       If not set a default description will be configured with '[<peer>[
                                       <peer_interface>]]'.
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_interfaces.public_ip`
                                                 -> `l3_interfaces.ip_address`

                                       The determined Public IP is used
                                       by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    speed:
                                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                       <interface_speed>`.
                                    receive_bandwidth:
                                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    transmit_bandwidth:
                                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_interface: The peer device interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdList with `StaticRoutesItem`
                                       items.
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    cv_pathfinder_internet_exit:
                                       PREVIEW: This key is in preview mode

                                       Subclass of AvdModel.
                                    rx_queue:
                                       Receive queue parameters for platform SFE interface profile.
                                       This setting is ignored unless the
                                       `platform_sfe_interface_profile.supported` is set as `true` under
                                       `platform_settings.feature_support` for the `platform` set on this device.

                                       Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Ethernet interface.

                                """

                    class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                        """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "rx_queue": {"type": RxQueue},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                            """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                            _primary_key: ClassVar[str] = "prefix"

                        StaticRoutes._item_type = StaticRoutesItem

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_port_channels.public_ip`
                                  -> `l3_port_channels.ip_address`

                        The determined Public IP is
                        used by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdIndexedList with
                        `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config for the Port-Channel interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_port_channels.public_ip`
                                                 -> `l3_port_channels.ip_address`

                                       The determined Public IP is
                                       used by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdIndexedList with
                                       `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Port-Channel interface.

                                """

                    class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                        """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3PortChannels._item_type = L3PortChannelsItem

                    class UnderlayMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        class PimSm(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                            on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if also
                            enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_pim_sm`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable PIM sparse-mode on uplinks.
                            Requires node setting `underlay_multicast.pim_sm.enabled:
                            true` or, if unset, global `underlay_multicast_pim_sm: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                            Effective only when
                            node settings `underlay_multicast.pim_sm.uplinks: true`.

                            Subclass of AvdList with `str` items.
                            """
                            mlag: bool
                            """
                            Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PimSm.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                           on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if also
                                           enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_pim_sm`.
                                        uplinks:
                                           Enable/Disable PIM sparse-mode on uplinks.
                                           Requires node setting `underlay_multicast.pim_sm.enabled:
                                           true` or, if unset, global `underlay_multicast_pim_sm: true`
                                        uplink_interfaces:
                                           Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective only when
                                           node settings `underlay_multicast.pim_sm.uplinks: true`.

                                           Subclass of AvdList with `str` items.
                                        mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                    """

                        class Static(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures static multicast in the
                            underlay on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if
                            also enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_multicast`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable static multicast on uplinks.
                            Requires node setting
                            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                            Effective
                            only when node settings `underlay_multicast.static.uplinks: true`.

                            Subclass of AvdList with `str`
                            items.
                            """
                            mlag: bool
                            """
                            Configure static multicast in the underlay on MLAG L3 peer interfacee.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Static.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures static multicast in the
                                           underlay on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if
                                           also enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_multicast`.
                                        uplinks:
                                           Enable/Disable static multicast on uplinks.
                                           Requires node setting
                                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                        uplink_interfaces:
                                           Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective
                                           only when node settings `underlay_multicast.static.uplinks: true`.

                                           Subclass of AvdList with `str`
                                           items.
                                        mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                    """

                        _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                        pim_sm: PimSm
                        """Subclass of AvdModel."""
                        static: Static
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                """
                                UnderlayMulticast.


                                Subclass of AvdModel.

                                Args:
                                    pim_sm: Subclass of AvdModel.
                                    static: Subclass of AvdModel.

                                """

                    class DigitalTwin(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                        act_os_version: str | None
                        """
                        Desired ACT Digital Twin OS version.
                        Overrides global `digital_twin.fabric.act_os_version` flag.
                        """
                        mgmt_ip: str | None
                        """Desired management interface IPv4 address."""
                        act_internet_access: bool | None
                        """
                        Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                        This option
                        applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                        types.
                        ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        Overrides
                        global `digital_twin.fabric.act_internet_access` flag.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                act_os_version: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                act_internet_access: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DigitalTwin.


                                Subclass of AvdModel.

                                Args:
                                    act_os_version:
                                       Desired ACT Digital Twin OS version.
                                       Overrides global `digital_twin.fabric.act_os_version` flag.
                                    mgmt_ip: Desired management interface IPv4 address.
                                    act_internet_access:
                                       Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                       This option
                                       applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                       types.
                                       ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                       Overrides
                                       global `digital_twin.fabric.act_internet_access` flag.

                                """

                    _fields: ClassVar[dict] = {
                        "group": {"type": str},
                        "nodes": {"type": Nodes},
                        "id": {"type": int},
                        "platform": {"type": str},
                        "mac_address": {"type": str},
                        "system_mac_address": {"type": str},
                        "serial_number": {"type": str},
                        "rack": {"type": str},
                        "mgmt_ip": {"type": str},
                        "mgmt_gateway": {"type": str},
                        "ipv6_mgmt_ip": {"type": str},
                        "ipv6_mgmt_gateway": {"type": str},
                        "mgmt_interface": {"type": str},
                        "link_tracking": {"type": LinkTracking},
                        "lacp_port_id_range": {"type": LacpPortIdRange},
                        "always_configure_ip_routing": {"type": bool, "default": False},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                        "uplink_type": {"type": str},
                        "uplink_ipv4_pool": {"type": str},
                        "uplink_ipv6_pool": {"type": str},
                        "uplink_interfaces": {"type": UplinkInterfaces},
                        "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                        "uplink_switches": {"type": UplinkSwitches},
                        "uplink_interface_speed": {"type": str},
                        "uplink_switch_interface_speed": {"type": str},
                        "uplink_mtu": {"type": int},
                        "max_uplink_switches": {"type": int},
                        "max_parallel_uplinks": {"type": int, "default": 1},
                        "uplink_bfd": {"type": bool, "default": False},
                        "uplink_native_vlan": {"type": int},
                        "uplink_ptp": {"type": UplinkPtp},
                        "uplink_macsec": {"type": UplinkMacsec},
                        "uplink_port_channel_id": {"type": int},
                        "uplink_switch_port_channel_id": {"type": int},
                        "uplink_structured_config": {"type": dict},
                        "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "short_esi": {"type": str},
                        "isis_system_id_prefix": {"type": str},
                        "isis_maximum_paths": {"type": int},
                        "is_type": {"type": str},
                        "node_sid_base": {"type": int, "default": 0},
                        "loopback_ipv4_pool": {"type": str},
                        "loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv4_pool": {"type": str},
                        "vtep_loopback_ipv6_pool": {"type": str},
                        "vtep_loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv6_address": {"type": str},
                        "loopback_ipv4_offset": {"type": int, "default": 0},
                        "router_id_pool": {"type": str},
                        "loopback_ipv6_pool": {"type": str},
                        "loopback_ipv6_offset": {"type": int, "default": 0},
                        "vtep": {"type": bool},
                        "vtep_loopback": {"type": str},
                        "bgp_as": {"type": str},
                        "bgp_defaults": {"type": BgpDefaults},
                        "evpn_role": {"type": str},
                        "evpn_route_servers": {"type": EvpnRouteServers},
                        "evpn_services_l2_only": {"type": bool, "default": False},
                        "filter": {"type": Filter},
                        "igmp_snooping_enabled": {"type": bool},
                        "evpn_gateway": {"type": EvpnGateway},
                        "ipvpn_gateway": {"type": IpvpnGateway},
                        "mlag": {"type": bool, "default": True},
                        "mlag_dual_primary_detection": {"type": bool, "default": False},
                        "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                        "mlag_interfaces": {"type": MlagInterfaces},
                        "mlag_interfaces_speed": {"type": str},
                        "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                        "mlag_peer_l3_ipv4_pool": {"type": str},
                        "mlag_peer_l3_ipv6_pool": {"type": str},
                        "mlag_peer_vlan": {"type": int, "default": 4094},
                        "mlag_peer_link_allowed_vlans": {"type": str},
                        "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                        "mlag_peer_ipv4_pool": {"type": str},
                        "mlag_peer_ipv6_pool": {"type": str},
                        "mlag_port_channel_id": {"type": int},
                        "mlag_domain_id": {"type": str},
                        "spanning_tree_mode": {"type": str},
                        "spanning_tree_priority": {"type": int, "default": 32768},
                        "spanning_tree_root_super": {"type": bool, "default": False},
                        "spanning_tree_mst_pvst_boundary": {"type": bool},
                        "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                        "virtual_router_mac_address": {"type": str},
                        "inband_mgmt_interface": {"type": str},
                        "inband_mgmt_vlan": {"type": int, "default": 4092},
                        "inband_mgmt_subnet": {"type": str},
                        "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                        "inband_mgmt_ip": {"type": str},
                        "inband_mgmt_gateway": {"type": str},
                        "inband_mgmt_ipv6_address": {"type": str},
                        "inband_mgmt_ipv6_subnet": {"type": str},
                        "inband_mgmt_ipv6_gateway": {"type": str},
                        "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                        "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                        "inband_mgmt_vrf": {"type": str, "default": "default"},
                        "inband_mgmt_mtu": {"type": int, "default": 1500},
                        "inband_ztp": {"type": bool, "default": False},
                        "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                        "mpls_overlay_role": {"type": str},
                        "overlay_address_families": {"type": OverlayAddressFamilies},
                        "mpls_route_reflectors": {"type": MplsRouteReflectors},
                        "bgp_cluster_id": {"type": str},
                        "ptp": {"type": Ptp},
                        "wan_role": {"type": str},
                        "cv_pathfinder_transit_mode": {"type": str},
                        "cv_pathfinder_region": {"type": str},
                        "cv_pathfinder_site": {"type": str},
                        "wan_ha": {"type": WanHa},
                        "dps_mss_ipv4": {"type": str, "default": "auto"},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "data_plane_cpu_allocation_max": {"type": int},
                        "flow_tracker_type": {"type": str},
                        "underlay_multicast": {"type": UnderlayMulticast},
                        "campus": {"type": str},
                        "campus_pod": {"type": str},
                        "campus_access_pod": {"type": str},
                        "cv_tags_topology_type": {"type": str},
                        "digital_twin": {"type": DigitalTwin},
                    }
                    group: str
                    """
                    The Node Group Name is used for MLAG domain unless set with 'mlag_domain_id'.
                    The Node Group Name is
                    also used for peer description on downstream switches' uplinks.
                    """
                    nodes: Nodes
                    """
                    Define variables per node.

                    Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                    (`str`).
                    """
                    id: int | None
                    """Unique identifier used for IP addressing and other algorithms."""
                    platform: str | None
                    """Arista platform family."""
                    mac_address: str | None
                    """Leverage to document management interface mac address."""
                    system_mac_address: str | None
                    """
                    System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                    Set to the same MAC address as
                    available in "show version" on the device.
                    "system_mac_address" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    serial_number: str | None
                    """
                    Set to the Serial Number of the device.
                    Only used for documentation purpose in the fabric
                    documentation and part of the structured_config.
                    "serial_number" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    rack: str | None
                    """Rack that the switch is located in (only used in snmp_settings location)."""
                    mgmt_ip: str | None
                    """Node management interface IPv4 address."""
                    mgmt_gateway: str | None
                    """
                    This key sets the management gateway for the device. It takes precedence over the global
                    `mgmt_gateway`.
                    """
                    ipv6_mgmt_ip: str | None
                    """Node management interface IPv6 address."""
                    ipv6_mgmt_gateway: str | None
                    """
                    This key sets the ipv6 management gateway for the device. It takes precedence over the global
                    `ipv6_mgmt_gateway`.
                    """
                    mgmt_interface: str | None
                    """
                    Management Interface Name.
                    Default -> platform_management_interface -> mgmt_interface ->
                    "Management1".
                    """
                    link_tracking: LinkTracking
                    """
                    This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                    the upstream interfaces.
                    Useful in EVPN multhoming designs.


                    Subclass of AvdModel.
                    """
                    lacp_port_id_range: LacpPortIdRange
                    """
                    This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                    number of nodes in the "node_group".
                    Unique LACP port-id ranges are recommended for EVPN Multihoming
                    designs.


                    Subclass of AvdModel.
                    """
                    always_configure_ip_routing: bool
                    """
                    Force configuration of "ip routing" even on L2 devices.
                    Use this to retain behavior of AVD versions
                    below 4.0.0.

                    Default value: `False`
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""
                    uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                    """
                    Override the default `uplink_type` set at the `node_type_key` level.
                    `uplink_type` must be "p2p" if
                    `vtep` or `underlay_router` is true for the `node_type_key` definition.
                    """
                    uplink_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    IPv4
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    IPv6
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_interfaces: UplinkInterfaces
                    """
                    Local uplink interfaces.
                    Each list item supports range syntax that can be expanded into a list of
                    interfaces.
                    If uplink_interfaces is not defined, platform-specific defaults (defined under
                    default_interfaces) will be used instead.
                    Please note that default_interfaces are not defined by
                    default, you should define these yourself.


                    Subclass of AvdList with `str` items.
                    """
                    uplink_switch_interfaces: UplinkSwitchInterfaces
                    """
                    Interfaces located on uplink switches.

                    Subclass of AvdList with `str` items.
                    """
                    uplink_switches: UplinkSwitches
                    """Subclass of AvdList with `str` items."""
                    uplink_interface_speed: str | None
                    """
                    Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                    (Uplink switch
                    interface speed can be overridden with `uplink_switch_interface_speed`).
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_switch_interface_speed: str | None
                    """
                    Set point-to-Point interface speed for the uplink switch interface only.
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_mtu: int | None
                    """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                    max_uplink_switches: int | None
                    """
                    Maximum number of uplink switches.
                    Changing this value may change IP Addressing on uplinks.
                    Can be
                    used to reserve IP space for future expansions.
                    """
                    max_parallel_uplinks: int
                    """
                    Number of parallel links towards uplink switches.
                    Changing this value may change interface naming on
                    uplinks (and corresponding downlinks).
                    Can be used to reserve interfaces for future parallel
                    uplinks.

                    Default value: `1`
                    """
                    uplink_bfd: bool
                    """
                    Enable bfd on uplink interfaces.

                    Default value: `False`
                    """
                    uplink_native_vlan: int | None
                    """
                    Only applicable to switches with layer-2 port-channel uplinks.
                    A suspended (disabled) vlan will be
                    created in both ends of the link unless the vlan is defined under network services.
                    By default the
                    uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                    """
                    uplink_ptp: UplinkPtp
                    """
                    Enable PTP on all infrastructure links.

                    Subclass of AvdModel.
                    """
                    uplink_macsec: UplinkMacsec
                    """
                    Enable MacSec on all uplinks.

                    Subclass of AvdModel.
                    """
                    uplink_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink Port-channel
                    ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                    For
                    example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [ Eth11/1, Eth22/1 ] -> ID 111
                    For
                    MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                    This
                    option overrides the default behavior and statically sets the local Port-channel ID.
                    Note! Make sure
                    the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                    value.
                    """
                    uplink_switch_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink switch Port-
                    channel ID will be set to the number of the first interface defined under
                    `uplink_switch_interfaces`.
                    For example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [
                    Eth11/1, Eth22/1 ] -> ID 111
                    For MLAG port-channels ID will be based on the lowest member interface
                    on the first MLAG switch.
                    This option overrides the default behavior and statically sets the Port-
                    channel ID on the uplink switch.
                    Note! Make sure the ID is unique and does not overlap with
                    autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between
                    1 and 2000 and both MLAG switches must have the same value.
                    """
                    uplink_structured_config: dict
                    """
                    Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                    When
                    uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                    for eos_cli_config_gen overrides the settings on the ethernet interface level.
                    When uplink_type ==
                    "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                    eos_cli_config_gen overrides the settings on the port-channel interface level.
                    "uplink_structured_config" is applied after "structured_config", so it can override
                    "structured_config" defined on node-level.
                    Note! The content of this dictionary is _not_ validated
                    by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                    """
                    uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_interfaces`."""
                    uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                    uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                    uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                    channel uplinks.
                    """
                    mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to MLAG peer link port-channel id.
                    Added under
                    port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the
                    port-channel interface level.
                    "mlag_port_channel_structured_config" is applied after
                    "structured_config", so it can override "structured_config" defined on node-level.
                    """
                    mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                    override "structured_config" defined on node-level.
                    """
                    mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                    can override "structured_config" defined on node-level.
                    """
                    short_esi: str | None
                    """
                    short_esi only valid for l2leaf devices using port-channel uplink.
                    Setting short_esi to "auto"
                    generates the short_esi automatically using a hash of configuration elements.
                    < 0000:0000:0000 |
                    auto >.
                    """
                    isis_system_id_prefix: str | None
                    """(4.4 hexadecimal)."""
                    isis_maximum_paths: int | None
                    """Number of path to configure in ECMP for ISIS."""
                    is_type: Literal["level-1-2", "level-1", "level-2"] | None
                    """Overrides `isis_default_is_type`."""
                    node_sid_base: int
                    """
                    Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                    Default value: `0`
                    """
                    loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for Loopback0.
                    When set, it takes precedence over `loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                    """
                    vtep_loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    vtep_loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    vtep_loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not
                    catch duplicates.
                    """
                    vtep_loopback_ipv6_address: str | None
                    """
                    IPv6 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv6_pool`.
                    Note: AVD does not check for validity of the IPv6 address and does not
                    catch duplicates.
                    """
                    loopback_ipv4_offset: int
                    """
                    Offset all assigned loopback IP addresses.
                    Required when the 'loopback_ipv4_pool' is the same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    router_id_pool: str | None
                    """
                    Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                    router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                    will not exist on the device.
                    """
                    loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    loopback_ipv6_offset: int
                    """
                    Offset all assigned loopback IPv6 addresses.
                    Required when the 'loopback_ipv6_pool' is same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    vtep: bool | None
                    """
                    Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                    Overrides VTEP
                    setting inherited from node_type_keys.
                    """
                    vtep_loopback: str | None
                    """Set VXLAN source interface."""
                    bgp_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    Required with eBGP.
                    """
                    bgp_defaults: BgpDefaults
                    """
                    List of EOS commands to apply to BGP daemon.

                    Subclass of AvdList with `str` items.
                    """
                    evpn_role: Literal["client", "server", "none"] | None
                    """
                    Acting role in EVPN control plane.
                    Default is set in node_type definition from node_type_keys.
                    """
                    evpn_route_servers: EvpnRouteServers
                    """
                    List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                    Subclass of AvdList with `str`
                    items.
                    """
                    evpn_services_l2_only: bool
                    """
                    Possibility to prevent configuration of Tenant VRFs and SVIs.
                    Override node definition
                    "network_services_l3" from node_type_keys.
                    This allows support for centralized routing.

                    Default value: `False`
                    """
                    filter: Filter
                    """
                    Filter L3 and L2 network services based on tenant and tags (and operation filter).
                    If filter is not
                    defined it will default to all.


                    Subclass of AvdModel.
                    """
                    igmp_snooping_enabled: bool | None
                    """Activate or deactivate IGMP snooping on device level."""
                    evpn_gateway: EvpnGateway
                    """
                    Node is acting as EVPN Multi-Domain Gateway.
                    New BGP peer-group is generated between EVPN GWs in
                    different domains or between GWs and Route Servers.
                    Name can be changed under
                    "bgp_peer_groups.evpn_overlay_core" variable.
                    L3 rechability for different EVPN GWs must be already
                    in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                    same Ansible inventory.


                    Subclass of AvdModel.
                    """
                    ipvpn_gateway: IpvpnGateway
                    """
                    Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                    this is "bgp_peer_groups.ipvpn_gateway_peers".
                    L3 Reachability is required for this to work, the
                    preferred method to establish underlay connectivity is to use core_interfaces.


                    Subclass of
                    AvdModel.
                    """
                    mlag: bool
                    """
                    Enable / Disable auto MLAG, when two nodes are defined in node group.

                    Default value: `True`
                    """
                    mlag_dual_primary_detection: bool
                    """
                    Enable / Disable MLAG dual primary detection.

                    Default value: `False`
                    """
                    mlag_ibgp_origin_incomplete: bool
                    """
                    Set origin of routes received from MLAG iBGP peer to incomplete.
                    The purpose is to optimize routing
                    for leaf loopbacks from spine perspective and
                    avoid suboptimal routing via peerlink for control
                    plane traffic.

                    Default value: `True`
                    """
                    mlag_interfaces: MlagInterfaces
                    """
                    Each list item supports range syntax that can be expanded into a list of interfaces.
                    Required when
                    MLAG leafs are present in the topology.


                    Subclass of AvdList with `str` items.
                    """
                    mlag_interfaces_speed: str | None
                    """
                    Set MLAG interface speed.
                    Speed should be set in the format `<interface_speed>` or `forced
                    <interface_speed>` or `auto <interface_speed>`.
                    """
                    mlag_peer_l3_vlan: int
                    """
                    Underlay L3 peering SVI interface id.
                    If set to 0 or the same vlan as mlag_peer_vlan, the
                    mlag_peer_vlan will be used for L3 peering.

                    Default value: `4093`
                    """
                    mlag_peer_l3_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_l3_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_vlan: int
                    """
                    MLAG Peer Link (control link) SVI interface id.

                    Default value: `4094`
                    """
                    mlag_peer_link_allowed_vlans: str | None
                    mlag_peer_address_family: Literal["ipv4", "ipv6"]
                    """
                    IP address family used to establish MLAG Peer Link (control link).
                    `ipv6` requires EOS version
                    4.31.1F or higher.
                    Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                    (ex. `mlag_peer_l3_vlan` set to 4094).

                    Default value: `"ipv4"`
                    """
                    mlag_peer_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                    """
                    mlag_peer_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                    """
                    mlag_port_channel_id: int | None
                    """
                    If not set, the mlag port-channel id is generated based on the digits of the first interface present
                    in 'mlag_interfaces'.
                    Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                    999999 > for EOS >= 4.25.0F.
                    """
                    mlag_domain_id: str | None
                    """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                    spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                    spanning_tree_priority: int
                    """
                    Spanning-tree priority configured for the selected mode.
                    For `rapid-pvst` the priority can also be
                    set per VLAN under network services.

                    Default value: `32768`
                    """
                    spanning_tree_root_super: bool
                    """Default value: `False`"""
                    spanning_tree_mst_pvst_boundary: bool | None
                    """Enable MST PVST border ports."""
                    spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                    """Specify range of port-ids to reserve for port-channels."""
                    virtual_router_mac_address: str | None
                    """Virtual router mac address for anycast gateway."""
                    inband_mgmt_interface: str | None
                    """
                    Pointer to interface used for inband management.
                    All configuration must be done using other data
                    models like network services or structured_config.
                    'inband_mgmt_interface' is only used to refer to
                    this interface as source in various management protocol settings (future feature).

                    On L2 switches,
                    this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                    """
                    inband_mgmt_vlan: int
                    """
                    VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                    uplinks).
                    When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                    switch as well as all 'uplink_switches'.
                    When using 'inband_mgmt_ip' the VLAN and SVI will only be
                    created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                    created using network services data models.

                    Default value: `4092`
                    """
                    inband_mgmt_subnet: str | None
                    """
                    Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                    ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      : <subnet> +
                    2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       :
                    <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                    GW on l2leafs : <subnet> + 1
                    Assign range
                    larger than total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ip' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_subnet_offset: int
                    """
                    Offset value to adjust the calculated inband management IP address within the subnet.
                    The assigned
                    IP will be computed by adding this offset to the device ID.

                    Default value: `0`
                    """
                    inband_mgmt_ip: str | None
                    """
                    IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                    If this is set the
                    VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN and SVI on
                    the parent switches must be created using network services data models.

                    This setting is applicable
                    to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                    is derived from 'inband_mgmt_subnet' if set.

                    This setting is applicable to L2 switches (switches
                    using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_address: str | None
                    """
                    IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                    If this
                    is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN
                    and SVI on the parent switches must be created using network services data models.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_subnet: str | None
                    """
                    Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                    on ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                    extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      :
                    <subnet> + 2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       : <subnet> + 3 + <l2leaf id>
                    GW on l2leafs : <subnet> + 1
                    Assign range larger than
                    total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf'.
                    Used when `inband_mgmt_ipv6_address` is set.
                    Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_description: str
                    """
                    Description configured on the Inband Management SVI.

                    This setting is only applied on the devices
                    where it is set, it does not automatically affect any parent/child devices configuration, so it must
                    be set on each applicable node/node-group/node-type as needed.

                    Default value: `"Inband Management"`
                    """
                    inband_mgmt_vlan_name: str
                    """
                    Name configured on the Inband Management VLAN.
                    This setting is only applied on the devices where it
                    is set, it does not automatically affect any parent/child devices configuration, so it must be set
                    on each applicable node/node-group/node-type as needed.

                    Default value: `"INBAND_MGMT"`
                    """
                    inband_mgmt_vrf: str
                    """
                    VRF configured on the Inband Management Interface.
                    The VRF is created if not already created by
                    other means.
                    This setting is only applied on the devices where it is set, it does not automatically
                    affect any parent/child devices configuration, so it must be set on each applicable node/node-
                    group/node-type as needed.

                    Default value: `"default"`
                    """
                    inband_mgmt_mtu: int
                    """
                    MTU configured on the Inband Management Interface.
                    This setting is only applied on the devices where
                    it is set, it does not automatically affect any parent/child devices configuration, so it must be
                    set on each applicable node/node-group/node-type as needed.

                    Default value: `1500`
                    """
                    inband_ztp: bool
                    """
                    Enable to configure upstream device with proper configuration to allow downstream devices to be
                    Zero-Touch-Provisioned over the uplink interfaces.
                    For L2 devices this setting also requires that
                    the `inband_mgmt_vlan` is set for the node.

                    PREVIEW: Support for L3 devices is marked as "preview",
                    meaning the data models or generated configuration can change at any time.

                    Default value: `False`
                    """
                    inband_ztp_lacp_fallback_delay: int
                    """
                    Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                    ZTP node.
                    This setting also requires that `inband_ztp` is set for the node.

                    Default value: `30`
                    """
                    mpls_overlay_role: Literal["client", "server", "none"] | None
                    """
                    Set the default mpls overlay role.
                    Acting role in overlay control plane.
                    """
                    overlay_address_families: OverlayAddressFamilies
                    """
                    Set the default overlay address families.


                    Subclass of AvdList with `str` items.
                    """
                    mpls_route_reflectors: MplsRouteReflectors
                    """
                    List of inventory hostname acting as MPLS route-reflectors.

                    Subclass of AvdList with `str` items.
                    """
                    bgp_cluster_id: str | None
                    """Set BGP cluster id."""
                    ptp: Ptp
                    """Subclass of AvdModel."""
                    wan_role: Literal["client", "server"] | None
                    """
                    Override the default WAN role.

                    This is used both for AutoVPN and Pathfinder designs.
                    That means if
                    `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                    `server` indicates that the router is a
                    route-reflector.
                    """
                    cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                    """
                    Configure the transit mode for a WAN client for CV Pathfinder designs
                    only when the `wan_mode` root
                    key is set to `cv_pathfinder`.

                    'zone' is currently not supported.
                    """
                    cv_pathfinder_region: str | None
                    """
                    The CV Pathfinder region name.
                    This key is required for WAN routers but optional for pathfinders.
                    The region name must be defined under 'cv_pathfinder_regions'.
                    """
                    cv_pathfinder_site: str | None
                    """
                    The CV Pathfinder site name.
                    This key is required for WAN routers but optional for pathfinders.
                    For
                    WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                    relevant region under 'cv_pathfinder_regions'.
                    For pathfinders without `cv_pathfinder_region` set,
                    the site must be defined under `cv_pathfinder_global_sites`.
                    """
                    wan_ha: WanHa
                    """
                    The key is supported only if `wan_mode` == `cv-pathfinder`.
                    AutoVPN support is still to be
                    determined.

                    Maximum 2 devices supported by group for HA.

                    Subclass of AvdModel.
                    """
                    dps_mss_ipv4: str
                    """
                    IPv4 MSS value configured under "router path-selection" on WAN Devices.

                    Default value: `"auto"`
                    """
                    l3_interfaces: L3Interfaces
                    """
                    L3 Interfaces to configure on the node.

                    Subclass of AvdIndexedList with `L3InterfacesItem` items.
                    Primary key is `name` (`str`).
                    """
                    l3_port_channels: L3PortChannels
                    """
                    L3 Port-Channel interfaces to configure on the node.

                    Subclass of AvdIndexedList with
                    `L3PortChannelsItem` items. Primary key is `name` (`str`).
                    """
                    data_plane_cpu_allocation_max: int | None
                    """
                    Set the maximum number of CPU used for the data plane.
                    This setting is useful on virtual Route
                    Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                    """
                    flow_tracker_type: Literal["sampled", "hardware"] | None
                    """
                    Set the flow tracker type.
                    Override the `default_flow_tracker_type`` set at the `node_type_key`
                    level.
                    `default_flow_tracker_type` default value is `sampled`.
                    """
                    underlay_multicast: UnderlayMulticast
                    """Subclass of AvdModel."""
                    campus: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_access_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus access pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    cv_tags_topology_type: str | None
                    """
                    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                    "edge" or "member-leaf".
                    """
                    digital_twin: DigitalTwin
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Set the OS version and management IP address for the digital twin of the
                    associated node(s).

                    Subclass of AvdModel.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            group: str | UndefinedType = Undefined,
                            nodes: Nodes | UndefinedType = Undefined,
                            id: int | None | UndefinedType = Undefined,
                            platform: str | None | UndefinedType = Undefined,
                            mac_address: str | None | UndefinedType = Undefined,
                            system_mac_address: str | None | UndefinedType = Undefined,
                            serial_number: str | None | UndefinedType = Undefined,
                            rack: str | None | UndefinedType = Undefined,
                            mgmt_ip: str | None | UndefinedType = Undefined,
                            mgmt_gateway: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                            mgmt_interface: str | None | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                            always_configure_ip_routing: bool | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                            uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                            uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                            uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                            uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                            uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                            uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                            uplink_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_mtu: int | None | UndefinedType = Undefined,
                            max_uplink_switches: int | None | UndefinedType = Undefined,
                            max_parallel_uplinks: int | UndefinedType = Undefined,
                            uplink_bfd: bool | UndefinedType = Undefined,
                            uplink_native_vlan: int | None | UndefinedType = Undefined,
                            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                            uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                            uplink_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_structured_config: dict | UndefinedType = Undefined,
                            uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            short_esi: str | None | UndefinedType = Undefined,
                            isis_system_id_prefix: str | None | UndefinedType = Undefined,
                            isis_maximum_paths: int | None | UndefinedType = Undefined,
                            is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                            node_sid_base: int | UndefinedType = Undefined,
                            loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                            loopback_ipv4_offset: int | UndefinedType = Undefined,
                            router_id_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_offset: int | UndefinedType = Undefined,
                            vtep: bool | None | UndefinedType = Undefined,
                            vtep_loopback: str | None | UndefinedType = Undefined,
                            bgp_as: str | None | UndefinedType = Undefined,
                            bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                            evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                            evpn_services_l2_only: bool | UndefinedType = Undefined,
                            filter: Filter | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                            ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                            mlag: bool | UndefinedType = Undefined,
                            mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                            mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                            mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                            mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                            mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_vlan: int | UndefinedType = Undefined,
                            mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                            mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                            mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_port_channel_id: int | None | UndefinedType = Undefined,
                            mlag_domain_id: str | None | UndefinedType = Undefined,
                            spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                            spanning_tree_priority: int | UndefinedType = Undefined,
                            spanning_tree_root_super: bool | UndefinedType = Undefined,
                            spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                            spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                            | UndefinedType = Undefined,
                            virtual_router_mac_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_interface: str | None | UndefinedType = Undefined,
                            inband_mgmt_vlan: int | UndefinedType = Undefined,
                            inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                            inband_mgmt_ip: str | None | UndefinedType = Undefined,
                            inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_description: str | UndefinedType = Undefined,
                            inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                            inband_mgmt_vrf: str | UndefinedType = Undefined,
                            inband_mgmt_mtu: int | UndefinedType = Undefined,
                            inband_ztp: bool | UndefinedType = Undefined,
                            inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                            mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                            mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                            bgp_cluster_id: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                            cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                            cv_pathfinder_region: str | None | UndefinedType = Undefined,
                            cv_pathfinder_site: str | None | UndefinedType = Undefined,
                            wan_ha: WanHa | UndefinedType = Undefined,
                            dps_mss_ipv4: str | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                            flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                            underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                            campus: str | None | UndefinedType = Undefined,
                            campus_pod: str | None | UndefinedType = Undefined,
                            campus_access_pod: str | None | UndefinedType = Undefined,
                            cv_tags_topology_type: str | None | UndefinedType = Undefined,
                            digital_twin: DigitalTwin | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodeGroupsItem.


                            Subclass of AvdModel.

                            Args:
                                group:
                                   The Node Group Name is used for MLAG domain unless set with 'mlag_domain_id'.
                                   The Node Group Name is
                                   also used for peer description on downstream switches' uplinks.
                                nodes:
                                   Define variables per node.

                                   Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                                   (`str`).
                                id: Unique identifier used for IP addressing and other algorithms.
                                platform: Arista platform family.
                                mac_address: Leverage to document management interface mac address.
                                system_mac_address:
                                   System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                   Set to the same MAC address as
                                   available in "show version" on the device.
                                   "system_mac_address" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                serial_number:
                                   Set to the Serial Number of the device.
                                   Only used for documentation purpose in the fabric
                                   documentation and part of the structured_config.
                                   "serial_number" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                rack: Rack that the switch is located in (only used in snmp_settings location).
                                mgmt_ip: Node management interface IPv4 address.
                                mgmt_gateway:
                                   This key sets the management gateway for the device. It takes precedence over the global
                                   `mgmt_gateway`.
                                ipv6_mgmt_ip: Node management interface IPv6 address.
                                ipv6_mgmt_gateway:
                                   This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                   `ipv6_mgmt_gateway`.
                                mgmt_interface:
                                   Management Interface Name.
                                   Default -> platform_management_interface -> mgmt_interface ->
                                   "Management1".
                                link_tracking:
                                   This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                   the upstream interfaces.
                                   Useful in EVPN multhoming designs.


                                   Subclass of AvdModel.
                                lacp_port_id_range:
                                   This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                   number of nodes in the "node_group".
                                   Unique LACP port-id ranges are recommended for EVPN Multihoming
                                   designs.


                                   Subclass of AvdModel.
                                always_configure_ip_routing:
                                   Force configuration of "ip routing" even on L2 devices.
                                   Use this to retain behavior of AVD versions
                                   below 4.0.0.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.
                                uplink_type:
                                   Override the default `uplink_type` set at the `node_type_key` level.
                                   `uplink_type` must be "p2p" if
                                   `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                uplink_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   IPv4
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   IPv6
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_interfaces:
                                   Local uplink interfaces.
                                   Each list item supports range syntax that can be expanded into a list of
                                   interfaces.
                                   If uplink_interfaces is not defined, platform-specific defaults (defined under
                                   default_interfaces) will be used instead.
                                   Please note that default_interfaces are not defined by
                                   default, you should define these yourself.


                                   Subclass of AvdList with `str` items.
                                uplink_switch_interfaces:
                                   Interfaces located on uplink switches.

                                   Subclass of AvdList with `str` items.
                                uplink_switches: Subclass of AvdList with `str` items.
                                uplink_interface_speed:
                                   Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                   (Uplink switch
                                   interface speed can be overridden with `uplink_switch_interface_speed`).
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_switch_interface_speed:
                                   Set point-to-Point interface speed for the uplink switch interface only.
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                max_uplink_switches:
                                   Maximum number of uplink switches.
                                   Changing this value may change IP Addressing on uplinks.
                                   Can be
                                   used to reserve IP space for future expansions.
                                max_parallel_uplinks:
                                   Number of parallel links towards uplink switches.
                                   Changing this value may change interface naming on
                                   uplinks (and corresponding downlinks).
                                   Can be used to reserve interfaces for future parallel
                                   uplinks.
                                uplink_bfd: Enable bfd on uplink interfaces.
                                uplink_native_vlan:
                                   Only applicable to switches with layer-2 port-channel uplinks.
                                   A suspended (disabled) vlan will be
                                   created in both ends of the link unless the vlan is defined under network services.
                                   By default the
                                   uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                uplink_ptp:
                                   Enable PTP on all infrastructure links.

                                   Subclass of AvdModel.
                                uplink_macsec:
                                   Enable MacSec on all uplinks.

                                   Subclass of AvdModel.
                                uplink_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink Port-channel
                                   ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                   For
                                   example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                   For
                                   MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                   This
                                   option overrides the default behavior and statically sets the local Port-channel ID.
                                   Note! Make sure
                                   the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                   value.
                                uplink_switch_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink switch Port-
                                   channel ID will be set to the number of the first interface defined under
                                   `uplink_switch_interfaces`.
                                   For example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [
                                   Eth11/1, Eth22/1 ] -> ID 111
                                   For MLAG port-channels ID will be based on the lowest member interface
                                   on the first MLAG switch.
                                   This option overrides the default behavior and statically sets the Port-
                                   channel ID on the uplink switch.
                                   Note! Make sure the ID is unique and does not overlap with
                                   autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between
                                   1 and 2000 and both MLAG switches must have the same value.
                                uplink_structured_config:
                                   Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                   When
                                   uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                   for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                   When uplink_type ==
                                   "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                   eos_cli_config_gen overrides the settings on the port-channel interface level.
                                   "uplink_structured_config" is applied after "structured_config", so it can override
                                   "structured_config" defined on node-level.
                                   Note! The content of this dictionary is _not_ validated
                                   by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                uplink_switch_port_channel_structured_config:
                                   Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                   channel uplinks.
                                mlag_port_channel_structured_config:
                                   Custom structured config applied to MLAG peer link port-channel id.
                                   Added under
                                   port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the
                                   port-channel interface level.
                                   "mlag_port_channel_structured_config" is applied after
                                   "structured_config", so it can override "structured_config" defined on node-level.
                                mlag_peer_vlan_structured_config:
                                   Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                   override "structured_config" defined on node-level.
                                mlag_peer_l3_vlan_structured_config:
                                   Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                   can override "structured_config" defined on node-level.
                                short_esi:
                                   short_esi only valid for l2leaf devices using port-channel uplink.
                                   Setting short_esi to "auto"
                                   generates the short_esi automatically using a hash of configuration elements.
                                   < 0000:0000:0000 |
                                   auto >.
                                isis_system_id_prefix: (4.4 hexadecimal).
                                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                is_type: Overrides `isis_default_is_type`.
                                node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                loopback_ipv4_address:
                                   IPv4 address without mask for Loopback0.
                                   When set, it takes precedence over `loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                vtep_loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                vtep_loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                vtep_loopback_ipv4_address:
                                   IPv4 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not
                                   catch duplicates.
                                vtep_loopback_ipv6_address:
                                   IPv6 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv6_pool`.
                                   Note: AVD does not check for validity of the IPv6 address and does not
                                   catch duplicates.
                                loopback_ipv4_offset:
                                   Offset all assigned loopback IP addresses.
                                   Required when the 'loopback_ipv4_pool' is the same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                router_id_pool:
                                   Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                   router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                   will not exist on the device.
                                loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                loopback_ipv6_offset:
                                   Offset all assigned loopback IPv6 addresses.
                                   Required when the 'loopback_ipv6_pool' is same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                vtep:
                                   Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                   Overrides VTEP
                                   setting inherited from node_type_keys.
                                vtep_loopback: Set VXLAN source interface.
                                bgp_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                   Required with eBGP.
                                bgp_defaults:
                                   List of EOS commands to apply to BGP daemon.

                                   Subclass of AvdList with `str` items.
                                evpn_role:
                                   Acting role in EVPN control plane.
                                   Default is set in node_type definition from node_type_keys.
                                evpn_route_servers:
                                   List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                   Subclass of AvdList with `str`
                                   items.
                                evpn_services_l2_only:
                                   Possibility to prevent configuration of Tenant VRFs and SVIs.
                                   Override node definition
                                   "network_services_l3" from node_type_keys.
                                   This allows support for centralized routing.
                                filter:
                                   Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                   If filter is not
                                   defined it will default to all.


                                   Subclass of AvdModel.
                                igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                evpn_gateway:
                                   Node is acting as EVPN Multi-Domain Gateway.
                                   New BGP peer-group is generated between EVPN GWs in
                                   different domains or between GWs and Route Servers.
                                   Name can be changed under
                                   "bgp_peer_groups.evpn_overlay_core" variable.
                                   L3 rechability for different EVPN GWs must be already
                                   in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                   same Ansible inventory.


                                   Subclass of AvdModel.
                                ipvpn_gateway:
                                   Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                   this is "bgp_peer_groups.ipvpn_gateway_peers".
                                   L3 Reachability is required for this to work, the
                                   preferred method to establish underlay connectivity is to use core_interfaces.


                                   Subclass of
                                   AvdModel.
                                mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                mlag_ibgp_origin_incomplete:
                                   Set origin of routes received from MLAG iBGP peer to incomplete.
                                   The purpose is to optimize routing
                                   for leaf loopbacks from spine perspective and
                                   avoid suboptimal routing via peerlink for control
                                   plane traffic.
                                mlag_interfaces:
                                   Each list item supports range syntax that can be expanded into a list of interfaces.
                                   Required when
                                   MLAG leafs are present in the topology.


                                   Subclass of AvdList with `str` items.
                                mlag_interfaces_speed:
                                   Set MLAG interface speed.
                                   Speed should be set in the format `<interface_speed>` or `forced
                                   <interface_speed>` or `auto <interface_speed>`.
                                mlag_peer_l3_vlan:
                                   Underlay L3 peering SVI interface id.
                                   If set to 0 or the same vlan as mlag_peer_vlan, the
                                   mlag_peer_vlan will be used for L3 peering.
                                mlag_peer_l3_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_l3_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                mlag_peer_address_family:
                                   IP address family used to establish MLAG Peer Link (control link).
                                   `ipv6` requires EOS version
                                   4.31.1F or higher.
                                   Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                   (ex. `mlag_peer_l3_vlan` set to 4094).
                                mlag_peer_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                mlag_peer_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                mlag_port_channel_id:
                                   If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                   in 'mlag_interfaces'.
                                   Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                   999999 > for EOS >= 4.25.0F.
                                mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                spanning_tree_mode: spanning_tree_mode
                                spanning_tree_priority:
                                   Spanning-tree priority configured for the selected mode.
                                   For `rapid-pvst` the priority can also be
                                   set per VLAN under network services.
                                spanning_tree_root_super: spanning_tree_root_super
                                spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                inband_mgmt_interface:
                                   Pointer to interface used for inband management.
                                   All configuration must be done using other data
                                   models like network services or structured_config.
                                   'inband_mgmt_interface' is only used to refer to
                                   this interface as source in various management protocol settings (future feature).

                                   On L2 switches,
                                   this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                inband_mgmt_vlan:
                                   VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                   uplinks).
                                   When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                   switch as well as all 'uplink_switches'.
                                   When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                   created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                   created using network services data models.
                                inband_mgmt_subnet:
                                   Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                   ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      : <subnet> +
                                   2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       :
                                   <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range
                                   larger than total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ip' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_subnet_offset:
                                   Offset value to adjust the calculated inband management IP address within the subnet.
                                   The assigned
                                   IP will be computed by adding this offset to the device ID.
                                inband_mgmt_ip:
                                   IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                   If this is set the
                                   VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN and SVI on
                                   the parent switches must be created using network services data models.

                                   This setting is applicable
                                   to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                   is derived from 'inband_mgmt_subnet' if set.

                                   This setting is applicable to L2 switches (switches
                                   using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_address:
                                   IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                   If this
                                   is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN
                                   and SVI on the parent switches must be created using network services data models.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_subnet:
                                   Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                   on ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                   extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      :
                                   <subnet> + 2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       : <subnet> + 3 + <l2leaf id>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range larger than
                                   total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf'.
                                   Used when `inband_mgmt_ipv6_address` is set.
                                   Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_description:
                                   Description configured on the Inband Management SVI.

                                   This setting is only applied on the devices
                                   where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                   be set on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vlan_name:
                                   Name configured on the Inband Management VLAN.
                                   This setting is only applied on the devices where it
                                   is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                   on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vrf:
                                   VRF configured on the Inband Management Interface.
                                   The VRF is created if not already created by
                                   other means.
                                   This setting is only applied on the devices where it is set, it does not automatically
                                   affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                   group/node-type as needed.
                                inband_mgmt_mtu:
                                   MTU configured on the Inband Management Interface.
                                   This setting is only applied on the devices where
                                   it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                   set on each applicable node/node-group/node-type as needed.
                                inband_ztp:
                                   Enable to configure upstream device with proper configuration to allow downstream devices to be
                                   Zero-Touch-Provisioned over the uplink interfaces.
                                   For L2 devices this setting also requires that
                                   the `inband_mgmt_vlan` is set for the node.

                                   PREVIEW: Support for L3 devices is marked as "preview",
                                   meaning the data models or generated configuration can change at any time.
                                inband_ztp_lacp_fallback_delay:
                                   Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                   ZTP node.
                                   This setting also requires that `inband_ztp` is set for the node.
                                mpls_overlay_role:
                                   Set the default mpls overlay role.
                                   Acting role in overlay control plane.
                                overlay_address_families:
                                   Set the default overlay address families.


                                   Subclass of AvdList with `str` items.
                                mpls_route_reflectors:
                                   List of inventory hostname acting as MPLS route-reflectors.

                                   Subclass of AvdList with `str` items.
                                bgp_cluster_id: Set BGP cluster id.
                                ptp: Subclass of AvdModel.
                                wan_role:
                                   Override the default WAN role.

                                   This is used both for AutoVPN and Pathfinder designs.
                                   That means if
                                   `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                   `server` indicates that the router is a
                                   route-reflector.
                                cv_pathfinder_transit_mode:
                                   Configure the transit mode for a WAN client for CV Pathfinder designs
                                   only when the `wan_mode` root
                                   key is set to `cv_pathfinder`.

                                   'zone' is currently not supported.
                                cv_pathfinder_region:
                                   The CV Pathfinder region name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   The region name must be defined under 'cv_pathfinder_regions'.
                                cv_pathfinder_site:
                                   The CV Pathfinder site name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   For
                                   WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                   relevant region under 'cv_pathfinder_regions'.
                                   For pathfinders without `cv_pathfinder_region` set,
                                   the site must be defined under `cv_pathfinder_global_sites`.
                                wan_ha:
                                   The key is supported only if `wan_mode` == `cv-pathfinder`.
                                   AutoVPN support is still to be
                                   determined.

                                   Maximum 2 devices supported by group for HA.

                                   Subclass of AvdModel.
                                dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                l3_interfaces:
                                   L3 Interfaces to configure on the node.

                                   Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                   Primary key is `name` (`str`).
                                l3_port_channels:
                                   L3 Port-Channel interfaces to configure on the node.

                                   Subclass of AvdIndexedList with
                                   `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                data_plane_cpu_allocation_max:
                                   Set the maximum number of CPU used for the data plane.
                                   This setting is useful on virtual Route
                                   Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                flow_tracker_type:
                                   Set the flow tracker type.
                                   Override the `default_flow_tracker_type`` set at the `node_type_key`
                                   level.
                                   `default_flow_tracker_type` default value is `sampled`.
                                underlay_multicast: Subclass of AvdModel.
                                campus:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_access_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus access pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                cv_tags_topology_type:
                                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                   "edge" or "member-leaf".
                                digital_twin:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Set the OS version and management IP address for the digital twin of the
                                   associated node(s).

                                   Subclass of AvdModel.

                            """

                class NodeGroups(AvdIndexedList[str, NodeGroupsItem]):
                    """Subclass of AvdIndexedList with `NodeGroupsItem` items. Primary key is `group` (`str`)."""

                    _primary_key: ClassVar[str] = "group"

                NodeGroups._item_type = NodeGroupsItem

                class NodesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class DownlinkPoolsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class DownlinkInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DownlinkInterfaces._item_type = str

                        _fields: ClassVar[dict] = {"ipv4_pool": {"type": str}, "ipv6_pool": {"type": str}, "downlink_interfaces": {"type": DownlinkInterfaces}}
                        ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        IPv4
                        subnets used for links to downlink switches will be derived from this pool based on index the peer's
                        uplink interface's index in 'downlink_interfaces'.
                        """
                        ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        IPv6
                        subnets used for links to downlink switches will be derived from this pool based on index the peer's
                        uplink interface's index in 'downlink_interfaces'.
                        """
                        downlink_interfaces: DownlinkInterfaces
                        """
                        List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                        this list will determine which subnet will be taken from the pool.

                        Subclass of AvdList with `str`
                        items.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                ipv4_pool: str | None | UndefinedType = Undefined,
                                ipv6_pool: str | None | UndefinedType = Undefined,
                                downlink_interfaces: DownlinkInterfaces | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DownlinkPoolsItem.


                                Subclass of AvdModel.

                                Args:
                                    ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       IPv4
                                       subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                       uplink interface's index in 'downlink_interfaces'.
                                    ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       IPv6
                                       subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                       uplink interface's index in 'downlink_interfaces'.
                                    downlink_interfaces:
                                       List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                                       this list will determine which subnet will be taken from the pool.

                                       Subclass of AvdList with `str`
                                       items.

                                """

                    class DownlinkPools(AvdList[DownlinkPoolsItem]):
                        """Subclass of AvdList with `DownlinkPoolsItem` items."""

                    DownlinkPools._item_type = DownlinkPoolsItem

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        class GroupsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                            name: str
                            """Tracking group name."""
                            recovery_delay: int | None
                            """default -> platform_settings_mlag_reload_delay -> 300."""
                            links_minimum: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    recovery_delay: int | None | UndefinedType = Undefined,
                                    links_minimum: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    GroupsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Tracking group name.
                                        recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                        links_minimum: links_minimum

                                    """

                        class Groups(AvdIndexedList[str, GroupsItem]):
                            """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        Groups._item_type = GroupsItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        groups: Groups
                        """
                        Link Tracking Groups.
                        By default a single group named "LT_GROUP1" is defined with default values.
                        Any groups defined under "groups" will replace the default.


                        Subclass of AvdIndexedList with
                        `GroupsItem` items. Primary key is `name` (`str`).

                        Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    groups:
                                       Link Tracking Groups.
                                       By default a single group named "LT_GROUP1" is defined with default values.
                                       Any groups defined under "groups" will replace the default.


                                       Subclass of AvdIndexedList with
                                       `GroupsItem` items. Primary key is `name` (`str`).

                                """

                    class LacpPortIdRange(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "size": {"type": int, "default": 128},
                            "offset": {"type": int, "default": 0},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        size: int
                        """
                        Recommended size > = number of ports in the switch.

                        Default value: `128`
                        """
                        offset: int
                        """
                        Offset is used to avoid overlapping port-id ranges of different switches.
                        Useful when a "connected-
                        endpoint" is connected to switches in different "node_groups".

                        Default value: `0`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                size: int | UndefinedType = Undefined,
                                offset: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LacpPortIdRange.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    size: Recommended size > = number of ports in the switch.
                                    offset:
                                       Offset is used to avoid overlapping port-id ranges of different switches.
                                       Useful when a "connected-
                                       endpoint" is connected to switches in different "node_groups".

                                """

                    class UplinkInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkInterfaces._item_type = str

                    class UplinkSwitchInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitchInterfaces._item_type = str

                    class UplinkSwitches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitches._item_type = str

                    class UplinkPtp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                        enable: bool
                        """Default value: `False`"""

                        if TYPE_CHECKING:

                            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                """
                                UplinkPtp.


                                Subclass of AvdModel.

                                Args:
                                    enable: enable

                                """

                    class UplinkMacsec(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}}
                        profile: str | None

                        if TYPE_CHECKING:

                            def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                """
                                UplinkMacsec.


                                Subclass of AvdModel.

                                Args:
                                    profile: profile

                                """

                    class BgpDefaults(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    BgpDefaults._item_type = str

                    class EvpnRouteServers(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EvpnRouteServers._item_type = str

                    class Filter(AvdModel):
                        """Subclass of AvdModel."""

                        class Tenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tenants._item_type = str

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class AllowVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AllowVrfs._item_type = str

                        class DenyVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DenyVrfs._item_type = str

                        class AlwaysIncludeVrfsInTenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AlwaysIncludeVrfsInTenants._item_type = str

                        _fields: ClassVar[dict] = {
                            "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                            "only_vlans_in_use": {"type": bool, "default": False},
                        }
                        tenants: Tenants
                        """
                        Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                        Tenants (default).
                        This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        tags: Tags
                        """
                        Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        allow_vrfs: AllowVrfs
                        """
                        Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                        (default).
                        This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                        Subclass of
                        AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        deny_vrfs: DenyVrfs
                        """
                        Prevent configuration of Network Services defined under these VRFs.
                        This list prevents the given
                        VRFs to be included by any other filtering mechanism.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                        """
                        List of tenants where VRFs will be configured even if VLANs are not included in tags.
                        Useful for L3
                        "border" leaf.


                        Subclass of AvdList with `str` items.
                        """
                        only_vlans_in_use: bool
                        """
                        Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                        Note! This
                        feature only considers configuration managed by eos_designs.
                        This excludes structured_config,
                        custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                        Default value: `False`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                tenants: Tenants | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                only_vlans_in_use: bool | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Filter.


                                Subclass of AvdModel.

                                Args:
                                    tenants:
                                       Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                       Tenants (default).
                                       This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                       Subclass of AvdList with `str` items.
                                    tags:
                                       Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                       Subclass of AvdList with `str` items.
                                    allow_vrfs:
                                       Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                       (default).
                                       This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                       Subclass of
                                       AvdList with `str` items.
                                    deny_vrfs:
                                       Prevent configuration of Network Services defined under these VRFs.
                                       This list prevents the given
                                       VRFs to be included by any other filtering mechanism.

                                       Subclass of AvdList with `str` items.
                                    always_include_vrfs_in_tenants:
                                       List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                       Useful for L3
                                       "border" leaf.


                                       Subclass of AvdList with `str` items.
                                    only_vlans_in_use:
                                       Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                       Note! This
                                       feature only considers configuration managed by eos_designs.
                                       This excludes structured_config,
                                       custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                """

                    class EvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote EVPN GW server."""
                            ip_address: str | None
                            """Peering IP of remote Route Server."""
                            bgp_as: str | None
                            """
                            Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                            interpreted as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    bgp_as: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote EVPN GW server.
                                        ip_address: Peering IP of remote Route Server.
                                        bgp_as:
                                           Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                           interpreted as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        class EvpnL2(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                            enabled: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL2.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class EvpnL3(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                            enabled: bool
                            """Default value: `False`"""
                            inter_domain: bool
                            """Default value: `True`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        inter_domain: inter_domain

                                    """

                        class AllActiveMultihoming(AvdModel):
                            """Subclass of AvdModel."""

                            class EvpnEthernetSegment(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                identifier: str
                                """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                rt_import: str
                                """Low-order 6 bytes of ES-Import Route Target."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnEthernetSegment.


                                        Subclass of AvdModel.

                                        Args:
                                            identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                            rt_import: Low-order 6 bytes of ES-Import Route Target.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "enable_d_path": {"type": bool, "default": True},
                                "evpn_domain_id_local": {"type": str},
                                "evpn_domain_id_remote": {"type": str},
                                "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                            }
                            enabled: bool
                            """Enable Active Active Multihoming resiliency model."""
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            evpn_domain_id_local: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_domain_id_remote: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_ethernet_segment: EvpnEthernetSegment
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    evpn_domain_id_local: str | UndefinedType = Undefined,
                                    evpn_domain_id_remote: str | UndefinedType = Undefined,
                                    evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AllActiveMultihoming.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable Active Active Multihoming resiliency model.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_ethernet_segment: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "remote_peers": {"type": RemotePeers},
                            "evpn_l2": {"type": EvpnL2},
                            "evpn_l3": {"type": EvpnL3},
                            "all_active_multihoming": {"type": AllActiveMultihoming},
                        }
                        remote_peers: RemotePeers
                        """
                        Define remote peers of the EVPN VXLAN Gateway.
                        If the hostname can be found in the inventory,
                        ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                        If the
                        peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                        Subclass
                        of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                        """
                        evpn_l2: EvpnL2
                        """
                        Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                        Subclass of AvdModel.
                        """
                        evpn_l3: EvpnL3
                        """
                        Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                        Subclass of AvdModel.
                        """
                        all_active_multihoming: AllActiveMultihoming
                        """
                        Enable Active Active Multihoming architecture for EVPN Gateways.
                        Not supported with MLAG or IPVPN
                        Gateway. Requires EVPN L3 inter-domain to be enabled.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                                evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    remote_peers:
                                       Define remote peers of the EVPN VXLAN Gateway.
                                       If the hostname can be found in the inventory,
                                       ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                       If the
                                       peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                       Subclass
                                       of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                    evpn_l2:
                                       Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                       Subclass of AvdModel.
                                    evpn_l3:
                                       Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                       Subclass of AvdModel.
                                    all_active_multihoming:
                                       Enable Active Active Multihoming architecture for EVPN Gateways.
                                       Not supported with MLAG or IPVPN
                                       Gateway. Requires EVPN L3 inter-domain to be enabled.

                                       Subclass of AvdModel.

                                """

                    class IpvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class AddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AddressFamilies._item_type = str

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote IPVPN Peer."""
                            ip_address: str
                            """Peering IP of remote IPVPN Peer."""
                            bgp_as: str
                            """
                            Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For
                            asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                            as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | UndefinedType = Undefined,
                                    bgp_as: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote IPVPN Peer.
                                        ip_address: Peering IP of remote IPVPN Peer.
                                        bgp_as:
                                           Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For
                                           asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                           as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "evpn_domain_id": {"type": str, "default": "65535:1"},
                            "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                            "enable_d_path": {"type": bool, "default": True},
                            "maximum_routes": {"type": int, "default": 0},
                            "local_as": {"type": str},
                            "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                            "remote_peers": {"type": RemotePeers},
                        }
                        enabled: bool
                        evpn_domain_id: str
                        """
                        Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:1"`
                        """
                        ipvpn_domain_id: str
                        """
                        Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:2"`
                        """
                        enable_d_path: bool
                        """
                        Enable D-path for use with BGP bestpath selection algorithm.

                        Default value: `True`
                        """
                        maximum_routes: int
                        """
                        Maximum routes to accept from IPVPN remote peers.

                        Default value: `0`
                        """
                        local_as: str | None
                        """
                        Local BGP AS applied to peering with IPVPN remote peers.
                        BGP AS <1-4294967295> or AS number in asdot
                        notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes,
                        to prevent it from being interpreted as a float number.
                        """
                        address_families: AddressFamilies
                        """
                        IPVPN address families to enable for remote peers.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                        """
                        remote_peers: RemotePeers
                        """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                evpn_domain_id: str | UndefinedType = Undefined,
                                ipvpn_domain_id: str | UndefinedType = Undefined,
                                enable_d_path: bool | UndefinedType = Undefined,
                                maximum_routes: int | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                address_families: AddressFamilies | UndefinedType = Undefined,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                    ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                    enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                    maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                    local_as:
                                       Local BGP AS applied to peering with IPVPN remote peers.
                                       BGP AS <1-4294967295> or AS number in asdot
                                       notation "<1-65535>.<0-65535>".
                                       For asdot notation in YAML inputs, the value must be put in quotes,
                                       to prevent it from being interpreted as a float number.
                                    address_families:
                                       IPVPN address families to enable for remote peers.

                                       Subclass of AvdList with `str` items.
                                    remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                """

                    class MlagInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MlagInterfaces._item_type = str

                    class OverlayAddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    OverlayAddressFamilies._item_type = str

                    class MplsRouteReflectors(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MplsRouteReflectors._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        class Uplinks(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Uplinks._item_type = str

                        class Dscp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                            general_messages: int | None
                            event_messages: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, general_messages: int | None | UndefinedType = Undefined, event_messages: int | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Dscp.


                                    Subclass of AvdModel.

                                    Args:
                                        general_messages: general_messages
                                        event_messages: event_messages

                                    """

                        class Monitor(AvdModel):
                            """Subclass of AvdModel."""

                            class Threshold(AvdModel):
                                """Subclass of AvdModel."""

                                class Drop(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                    offset_from_master: int | None
                                    mean_path_delay: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | None | UndefinedType = Undefined,
                                            mean_path_delay: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Drop.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay

                                            """

                                _fields: ClassVar[dict] = {
                                    "offset_from_master": {"type": int, "default": 250},
                                    "mean_path_delay": {"type": int, "default": 1500},
                                    "drop": {"type": Drop},
                                }
                                offset_from_master: int
                                """Default value: `250`"""
                                mean_path_delay: int
                                """Default value: `1500`"""
                                drop: Drop
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        offset_from_master: int | UndefinedType = Undefined,
                                        mean_path_delay: int | UndefinedType = Undefined,
                                        drop: Drop | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Threshold.


                                        Subclass of AvdModel.

                                        Args:
                                            offset_from_master: offset_from_master
                                            mean_path_delay: mean_path_delay
                                            drop: Subclass of AvdModel.

                                        """

                            class MissingMessage(AvdModel):
                                """Subclass of AvdModel."""

                                class Intervals(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                    announce: int | None
                                    follow_up: int | None
                                    sync: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            announce: int | None | UndefinedType = Undefined,
                                            follow_up: int | None | UndefinedType = Undefined,
                                            sync: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Intervals.


                                            Subclass of AvdModel.

                                            Args:
                                                announce: announce
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                class SequenceIds(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "enabled": {"type": bool, "default": True},
                                        "announce": {"type": int, "default": 3},
                                        "delay_resp": {"type": int, "default": 3},
                                        "follow_up": {"type": int, "default": 3},
                                        "sync": {"type": int, "default": 3},
                                    }
                                    enabled: bool
                                    """Default value: `True`"""
                                    announce: int
                                    """Default value: `3`"""
                                    delay_resp: int
                                    """Default value: `3`"""
                                    follow_up: int
                                    """Default value: `3`"""
                                    sync: int
                                    """Default value: `3`"""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            enabled: bool | UndefinedType = Undefined,
                                            announce: int | UndefinedType = Undefined,
                                            delay_resp: int | UndefinedType = Undefined,
                                            follow_up: int | UndefinedType = Undefined,
                                            sync: int | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            SequenceIds.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                announce: announce
                                                delay_resp: delay_resp
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                intervals: Intervals
                                """Subclass of AvdModel."""
                                sequence_ids: SequenceIds
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        MissingMessage.


                                        Subclass of AvdModel.

                                        Args:
                                            intervals: Subclass of AvdModel.
                                            sequence_ids: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": True},
                                "threshold": {"type": Threshold},
                                "missing_message": {"type": MissingMessage},
                            }
                            enabled: bool
                            """Default value: `True`"""
                            threshold: Threshold
                            """Subclass of AvdModel."""
                            missing_message: MissingMessage
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    threshold: Threshold | UndefinedType = Undefined,
                                    missing_message: MissingMessage | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Monitor.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        threshold: Subclass of AvdModel.
                                        missing_message: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "profile": {"type": str},
                            "uplinks": {"type": Uplinks},
                            "mlag": {"type": bool, "default": False},
                            "domain": {"type": int},
                            "priority1": {"type": int},
                            "priority2": {"type": int},
                            "auto_clock_identity": {"type": bool},
                            "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                            "clock_identity": {"type": str},
                            "source_ip": {"type": str},
                            "mode": {"type": str, "default": "boundary"},
                            "mode_one_step": {"type": bool, "default": False},
                            "ttl": {"type": int},
                            "forward_unicast": {"type": bool, "default": False},
                            "forward_v1": {"type": bool},
                            "dscp": {"type": Dscp},
                            "monitor": {"type": Monitor},
                        }
                        enabled: bool | None
                        profile: str | None
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"
                        """
                        uplinks: Uplinks
                        """Subclass of AvdList with `str` items."""
                        mlag: bool
                        """
                        Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                        configured on the MLAG peer-link port-channel.

                        Default value: `False`
                        """
                        domain: int | None
                        priority1: int | None
                        """default -> automatically set based on node_type."""
                        priority2: int | None
                        """default -> (node_id modulus 256)."""
                        auto_clock_identity: bool | None
                        """
                        If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                        default EOS behaviour, simply disable the automatic PTP clock identity.
                        default ->
                        (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                        HEX).
                        """
                        clock_identity_prefix: str
                        """
                        PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                        By default the 3-byte prefix is "00:1C:73".
                        This
                        can be overridden if auto_clock_identity is set to true (which is the default).

                        Default value: `"00:1C:73"`
                        """
                        clock_identity: str | None
                        """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                        source_ip: str | None
                        """
                        By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                        relevant SVI, which is the recommended behaviour.
                        This can be set manually if required, for example,
                        to a value of "10.1.2.3".
                        """
                        mode: Literal["boundary"]
                        """Default value: `"boundary"`"""
                        mode_one_step: bool
                        """Default value: `False`"""
                        ttl: int | None
                        forward_unicast: bool
                        """
                        Enable PTP unicast forwarding.

                        Default value: `False`
                        """
                        forward_v1: bool | None
                        """Forward dataplane PTP V1 packets."""
                        dscp: Dscp
                        """Subclass of AvdModel."""
                        monitor: Monitor
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                uplinks: Uplinks | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                domain: int | None | UndefinedType = Undefined,
                                priority1: int | None | UndefinedType = Undefined,
                                priority2: int | None | UndefinedType = Undefined,
                                auto_clock_identity: bool | None | UndefinedType = Undefined,
                                clock_identity_prefix: str | UndefinedType = Undefined,
                                clock_identity: str | None | UndefinedType = Undefined,
                                source_ip: str | None | UndefinedType = Undefined,
                                mode: Literal["boundary"] | UndefinedType = Undefined,
                                mode_one_step: bool | UndefinedType = Undefined,
                                ttl: int | None | UndefinedType = Undefined,
                                forward_unicast: bool | UndefinedType = Undefined,
                                forward_v1: bool | None | UndefinedType = Undefined,
                                dscp: Dscp | UndefinedType = Undefined,
                                monitor: Monitor | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"
                                    uplinks: Subclass of AvdList with `str` items.
                                    mlag:
                                       Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                       configured on the MLAG peer-link port-channel.
                                    domain: domain
                                    priority1: default -> automatically set based on node_type.
                                    priority2: default -> (node_id modulus 256).
                                    auto_clock_identity:
                                       If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                       default EOS behaviour, simply disable the automatic PTP clock identity.
                                       default ->
                                       (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                       HEX).
                                    clock_identity_prefix:
                                       PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                       By default the 3-byte prefix is "00:1C:73".
                                       This
                                       can be overridden if auto_clock_identity is set to true (which is the default).
                                    clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                    source_ip:
                                       By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                       relevant SVI, which is the recommended behaviour.
                                       This can be set manually if required, for example,
                                       to a value of "10.1.2.3".
                                    mode: mode
                                    mode_one_step: mode_one_step
                                    ttl: ttl
                                    forward_unicast: Enable PTP unicast forwarding.
                                    forward_v1: Forward dataplane PTP V1 packets.
                                    dscp: Subclass of AvdModel.
                                    monitor: Subclass of AvdModel.

                                """

                    class WanHa(AvdModel):
                        """Subclass of AvdModel."""

                        class HaInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        HaInterfaces._item_type = str

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "ipsec": {"type": bool, "default": True},
                            "mtu": {"type": int, "default": 9194},
                            "ha_interfaces": {"type": HaInterfaces},
                            "ha_ipv4_pool": {"type": str},
                            "port_channel_id": {"type": int},
                            "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                            "flow_tracking": {"type": FlowTracking},
                        }
                        enabled: bool | None
                        """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                        ipsec: bool
                        """
                        Enable / Disable IPsec over HA path-group when HA is enabled.

                        Default value: `True`
                        """
                        mtu: int
                        """
                        Set MTU on WAN HA interfaces.

                        Default value: `9194`
                        """
                        ha_interfaces: HaInterfaces
                        """
                        Local WAN HA interfaces
                        Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                        Can be used to filter uplink interfaces when there are multiple uplinks.
                        Limitations:
                          Either all
                        interfaces must be uplinks or all interfaces must not be uplinks.
                          Only one interface is supported
                        for non uplinks.

                        Subclass of AvdList with `str` items.
                        """
                        ha_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                        first WAN router.
                        Not used for uplink interfaces.
                        """
                        port_channel_id: int | None
                        """Port-channel ID to use for direct HA."""
                        use_port_channel_for_direct_ha: bool
                        """
                        Enable or disable using a port-channel interface for direct HA when there is only one interface.
                        This feature was introduced in EOS 4.33.0F.

                        Default value: `True`
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                        setting.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                ipsec: bool | UndefinedType = Undefined,
                                mtu: int | UndefinedType = Undefined,
                                ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                port_channel_id: int | None | UndefinedType = Undefined,
                                use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                            ) -> None:
                                """
                                WanHa.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                    ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                    mtu: Set MTU on WAN HA interfaces.
                                    ha_interfaces:
                                       Local WAN HA interfaces
                                       Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                       Can be used to filter uplink interfaces when there are multiple uplinks.
                                       Limitations:
                                         Either all
                                       interfaces must be uplinks or all interfaces must not be uplinks.
                                         Only one interface is supported
                                       for non uplinks.

                                       Subclass of AvdList with `str` items.
                                    ha_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                       first WAN router.
                                       Not used for uplink interfaces.
                                    port_channel_id: Port-channel ID to use for direct HA.
                                    use_port_channel_for_direct_ha:
                                       Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                       This feature was introduced in EOS 4.33.0F.
                                    flow_tracking:
                                       Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                       setting.

                                       Subclass of AvdModel.

                                """

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class CvPathfinderInternetExit(AvdModel):
                            """Subclass of AvdModel."""

                            class PoliciesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                name: str
                                """Internet-exit policy name."""
                                tunnel_interface_numbers: str | None
                                """
                                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                interface.
                                Examples: '1-3' or '100,200,300'
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        PoliciesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Internet-exit policy name.
                                            tunnel_interface_numbers:
                                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                               interface.
                                               Examples: '1-3' or '100,200,300'

                                        """

                            class Policies(AvdIndexedList[str, PoliciesItem]):
                                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Policies._item_type = PoliciesItem

                            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                            policies: Policies
                            """
                            List of Internet-exit policies using this interface as exit.

                            Subclass of AvdIndexedList with
                            `PoliciesItem` items. Primary key is `name` (`str`).
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                    """
                                    CvPathfinderInternetExit.


                                    Subclass of AvdModel.

                                    Args:
                                        policies:
                                           List of Internet-exit policies using this interface as exit.

                                           Subclass of AvdIndexedList with
                                           `PoliciesItem` items. Primary key is `name` (`str`).

                                    """

                        class RxQueue(AvdModel):
                            """Subclass of AvdModel."""

                            class Workers(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Workers._item_type = str

                            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                            count: int | None
                            """
                            Number of receive queues.
                            The maximum value is determined by
                            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                            `platform` set on this device.
                            """
                            workers: Workers
                            """Subclass of AvdList with `str` items."""
                            mode: Literal["shared", "exclusive"] | None
                            """Mode applicable to the workers."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    count: int | None | UndefinedType = Undefined,
                                    workers: Workers | UndefinedType = Undefined,
                                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RxQueue.


                                    Subclass of AvdModel.

                                    Args:
                                        count:
                                           Number of receive queues.
                                           The maximum value is determined by
                                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                           `platform` set on this device.
                                        workers: Subclass of AvdList with `str` items.
                                        mode: Mode applicable to the workers.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "profile": {"type": str},
                            "name": {"type": str},
                            "description": {"type": str},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "speed": {"type": str},
                            "receive_bandwidth": {"type": int},
                            "transmit_bandwidth": {"type": int},
                            "peer": {"type": str},
                            "peer_interface": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                            "rx_queue": {"type": RxQueue},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        }
                        profile: str | None
                        """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                        name: str
                        """
                        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                        For a
                        subinterface, the parent physical interface is automatically created.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set a default description will be configured with '[<peer>[
                        <peer_interface>]]'.
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_interfaces.public_ip`
                                  -> `l3_interfaces.ip_address`

                        The determined Public IP is used
                        by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        speed: str | None
                        """
                        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                        <interface_speed>`.
                        """
                        receive_bandwidth: int | None
                        """
                        Maximum allowed receive bandwidth (download) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        transmit_bandwidth: int | None
                        """
                        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_interface: str | None
                        """The peer device interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdList with `StaticRoutesItem`
                        items.
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        cv_pathfinder_internet_exit: CvPathfinderInternetExit
                        """
                        PREVIEW: This key is in preview mode

                        Subclass of AvdModel.
                        """
                        rx_queue: RxQueue
                        """
                        Receive queue parameters for platform SFE interface profile.
                        This setting is ignored unless the
                        `platform_sfe_interface_profile.supported` is set as `true` under
                        `platform_settings.feature_support` for the `platform` set on this device.

                        Subclass of AvdModel.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config for the Ethernet interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | None | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                speed: str | None | UndefinedType = Undefined,
                                receive_bandwidth: int | None | UndefinedType = Undefined,
                                transmit_bandwidth: int | None | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_interface: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                rx_queue: RxQueue | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                    name:
                                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                       For a
                                       subinterface, the parent physical interface is automatically created.
                                    description:
                                       Interface description.
                                       If not set a default description will be configured with '[<peer>[
                                       <peer_interface>]]'.
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_interfaces.public_ip`
                                                 -> `l3_interfaces.ip_address`

                                       The determined Public IP is used
                                       by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    speed:
                                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                       <interface_speed>`.
                                    receive_bandwidth:
                                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    transmit_bandwidth:
                                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_interface: The peer device interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdList with `StaticRoutesItem`
                                       items.
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    cv_pathfinder_internet_exit:
                                       PREVIEW: This key is in preview mode

                                       Subclass of AvdModel.
                                    rx_queue:
                                       Receive queue parameters for platform SFE interface profile.
                                       This setting is ignored unless the
                                       `platform_sfe_interface_profile.supported` is set as `true` under
                                       `platform_settings.feature_support` for the `platform` set on this device.

                                       Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Ethernet interface.

                                """

                    class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                        """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "rx_queue": {"type": RxQueue},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                            """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                            _primary_key: ClassVar[str] = "prefix"

                        StaticRoutes._item_type = StaticRoutesItem

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_port_channels.public_ip`
                                  -> `l3_port_channels.ip_address`

                        The determined Public IP is
                        used by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdIndexedList with
                        `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config for the Port-Channel interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_port_channels.public_ip`
                                                 -> `l3_port_channels.ip_address`

                                       The determined Public IP is
                                       used by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdIndexedList with
                                       `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Port-Channel interface.

                                """

                    class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                        """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3PortChannels._item_type = L3PortChannelsItem

                    class UnderlayMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        class PimSm(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                            on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if also
                            enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_pim_sm`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable PIM sparse-mode on uplinks.
                            Requires node setting `underlay_multicast.pim_sm.enabled:
                            true` or, if unset, global `underlay_multicast_pim_sm: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                            Effective only when
                            node settings `underlay_multicast.pim_sm.uplinks: true`.

                            Subclass of AvdList with `str` items.
                            """
                            mlag: bool
                            """
                            Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PimSm.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                           on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if also
                                           enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_pim_sm`.
                                        uplinks:
                                           Enable/Disable PIM sparse-mode on uplinks.
                                           Requires node setting `underlay_multicast.pim_sm.enabled:
                                           true` or, if unset, global `underlay_multicast_pim_sm: true`
                                        uplink_interfaces:
                                           Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective only when
                                           node settings `underlay_multicast.pim_sm.uplinks: true`.

                                           Subclass of AvdList with `str` items.
                                        mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                    """

                        class Static(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures static multicast in the
                            underlay on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if
                            also enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_multicast`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable static multicast on uplinks.
                            Requires node setting
                            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                            Effective
                            only when node settings `underlay_multicast.static.uplinks: true`.

                            Subclass of AvdList with `str`
                            items.
                            """
                            mlag: bool
                            """
                            Configure static multicast in the underlay on MLAG L3 peer interfacee.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Static.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures static multicast in the
                                           underlay on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if
                                           also enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_multicast`.
                                        uplinks:
                                           Enable/Disable static multicast on uplinks.
                                           Requires node setting
                                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                        uplink_interfaces:
                                           Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective
                                           only when node settings `underlay_multicast.static.uplinks: true`.

                                           Subclass of AvdList with `str`
                                           items.
                                        mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                    """

                        _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                        pim_sm: PimSm
                        """Subclass of AvdModel."""
                        static: Static
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                """
                                UnderlayMulticast.


                                Subclass of AvdModel.

                                Args:
                                    pim_sm: Subclass of AvdModel.
                                    static: Subclass of AvdModel.

                                """

                    class DigitalTwin(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                        act_os_version: str | None
                        """
                        Desired ACT Digital Twin OS version.
                        Overrides global `digital_twin.fabric.act_os_version` flag.
                        """
                        mgmt_ip: str | None
                        """Desired management interface IPv4 address."""
                        act_internet_access: bool | None
                        """
                        Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                        This option
                        applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                        types.
                        ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        Overrides
                        global `digital_twin.fabric.act_internet_access` flag.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                act_os_version: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                act_internet_access: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DigitalTwin.


                                Subclass of AvdModel.

                                Args:
                                    act_os_version:
                                       Desired ACT Digital Twin OS version.
                                       Overrides global `digital_twin.fabric.act_os_version` flag.
                                    mgmt_ip: Desired management interface IPv4 address.
                                    act_internet_access:
                                       Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                       This option
                                       applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                       types.
                                       ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                       Overrides
                                       global `digital_twin.fabric.act_internet_access` flag.

                                """

                    _fields: ClassVar[dict] = {
                        "name": {"type": str},
                        "downlink_pools": {"type": DownlinkPools},
                        "id": {"type": int},
                        "platform": {"type": str},
                        "mac_address": {"type": str},
                        "system_mac_address": {"type": str},
                        "serial_number": {"type": str},
                        "rack": {"type": str},
                        "mgmt_ip": {"type": str},
                        "mgmt_gateway": {"type": str},
                        "ipv6_mgmt_ip": {"type": str},
                        "ipv6_mgmt_gateway": {"type": str},
                        "mgmt_interface": {"type": str},
                        "link_tracking": {"type": LinkTracking},
                        "lacp_port_id_range": {"type": LacpPortIdRange},
                        "always_configure_ip_routing": {"type": bool, "default": False},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                        "uplink_type": {"type": str},
                        "uplink_ipv4_pool": {"type": str},
                        "uplink_ipv6_pool": {"type": str},
                        "uplink_interfaces": {"type": UplinkInterfaces},
                        "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                        "uplink_switches": {"type": UplinkSwitches},
                        "uplink_interface_speed": {"type": str},
                        "uplink_switch_interface_speed": {"type": str},
                        "uplink_mtu": {"type": int},
                        "max_uplink_switches": {"type": int},
                        "max_parallel_uplinks": {"type": int, "default": 1},
                        "uplink_bfd": {"type": bool, "default": False},
                        "uplink_native_vlan": {"type": int},
                        "uplink_ptp": {"type": UplinkPtp},
                        "uplink_macsec": {"type": UplinkMacsec},
                        "uplink_port_channel_id": {"type": int},
                        "uplink_switch_port_channel_id": {"type": int},
                        "uplink_structured_config": {"type": dict},
                        "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "short_esi": {"type": str},
                        "isis_system_id_prefix": {"type": str},
                        "isis_maximum_paths": {"type": int},
                        "is_type": {"type": str},
                        "node_sid_base": {"type": int, "default": 0},
                        "loopback_ipv4_pool": {"type": str},
                        "loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv4_pool": {"type": str},
                        "vtep_loopback_ipv6_pool": {"type": str},
                        "vtep_loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv6_address": {"type": str},
                        "loopback_ipv4_offset": {"type": int, "default": 0},
                        "router_id_pool": {"type": str},
                        "loopback_ipv6_pool": {"type": str},
                        "loopback_ipv6_offset": {"type": int, "default": 0},
                        "vtep": {"type": bool},
                        "vtep_loopback": {"type": str},
                        "bgp_as": {"type": str},
                        "bgp_defaults": {"type": BgpDefaults},
                        "evpn_role": {"type": str},
                        "evpn_route_servers": {"type": EvpnRouteServers},
                        "evpn_services_l2_only": {"type": bool, "default": False},
                        "filter": {"type": Filter},
                        "igmp_snooping_enabled": {"type": bool},
                        "evpn_gateway": {"type": EvpnGateway},
                        "ipvpn_gateway": {"type": IpvpnGateway},
                        "mlag": {"type": bool, "default": True},
                        "mlag_dual_primary_detection": {"type": bool, "default": False},
                        "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                        "mlag_interfaces": {"type": MlagInterfaces},
                        "mlag_interfaces_speed": {"type": str},
                        "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                        "mlag_peer_l3_ipv4_pool": {"type": str},
                        "mlag_peer_l3_ipv6_pool": {"type": str},
                        "mlag_peer_vlan": {"type": int, "default": 4094},
                        "mlag_peer_link_allowed_vlans": {"type": str},
                        "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                        "mlag_peer_ipv4_pool": {"type": str},
                        "mlag_peer_ipv6_pool": {"type": str},
                        "mlag_port_channel_id": {"type": int},
                        "mlag_domain_id": {"type": str},
                        "spanning_tree_mode": {"type": str},
                        "spanning_tree_priority": {"type": int, "default": 32768},
                        "spanning_tree_root_super": {"type": bool, "default": False},
                        "spanning_tree_mst_pvst_boundary": {"type": bool},
                        "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                        "virtual_router_mac_address": {"type": str},
                        "inband_mgmt_interface": {"type": str},
                        "inband_mgmt_vlan": {"type": int, "default": 4092},
                        "inband_mgmt_subnet": {"type": str},
                        "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                        "inband_mgmt_ip": {"type": str},
                        "inband_mgmt_gateway": {"type": str},
                        "inband_mgmt_ipv6_address": {"type": str},
                        "inband_mgmt_ipv6_subnet": {"type": str},
                        "inband_mgmt_ipv6_gateway": {"type": str},
                        "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                        "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                        "inband_mgmt_vrf": {"type": str, "default": "default"},
                        "inband_mgmt_mtu": {"type": int, "default": 1500},
                        "inband_ztp": {"type": bool, "default": False},
                        "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                        "mpls_overlay_role": {"type": str},
                        "overlay_address_families": {"type": OverlayAddressFamilies},
                        "mpls_route_reflectors": {"type": MplsRouteReflectors},
                        "bgp_cluster_id": {"type": str},
                        "ptp": {"type": Ptp},
                        "wan_role": {"type": str},
                        "cv_pathfinder_transit_mode": {"type": str},
                        "cv_pathfinder_region": {"type": str},
                        "cv_pathfinder_site": {"type": str},
                        "wan_ha": {"type": WanHa},
                        "dps_mss_ipv4": {"type": str, "default": "auto"},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "data_plane_cpu_allocation_max": {"type": int},
                        "flow_tracker_type": {"type": str},
                        "underlay_multicast": {"type": UnderlayMulticast},
                        "campus": {"type": str},
                        "campus_pod": {"type": str},
                        "campus_access_pod": {"type": str},
                        "cv_tags_topology_type": {"type": str},
                        "digital_twin": {"type": DigitalTwin},
                    }
                    name: str
                    """The Node Name is used as "hostname"."""
                    downlink_pools: DownlinkPools
                    """
                    IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                    with `uplink_ipv4_pool` set on the downlink switch.

                    Subclass of AvdList with `DownlinkPoolsItem`
                    items.
                    """
                    id: int | None
                    """Unique identifier used for IP addressing and other algorithms."""
                    platform: str | None
                    """Arista platform family."""
                    mac_address: str | None
                    """Leverage to document management interface mac address."""
                    system_mac_address: str | None
                    """
                    System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                    Set to the same MAC address as
                    available in "show version" on the device.
                    "system_mac_address" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    serial_number: str | None
                    """
                    Set to the Serial Number of the device.
                    Only used for documentation purpose in the fabric
                    documentation and part of the structured_config.
                    "serial_number" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    rack: str | None
                    """Rack that the switch is located in (only used in snmp_settings location)."""
                    mgmt_ip: str | None
                    """Node management interface IPv4 address."""
                    mgmt_gateway: str | None
                    """
                    This key sets the management gateway for the device. It takes precedence over the global
                    `mgmt_gateway`.
                    """
                    ipv6_mgmt_ip: str | None
                    """Node management interface IPv6 address."""
                    ipv6_mgmt_gateway: str | None
                    """
                    This key sets the ipv6 management gateway for the device. It takes precedence over the global
                    `ipv6_mgmt_gateway`.
                    """
                    mgmt_interface: str | None
                    """
                    Management Interface Name.
                    Default -> platform_management_interface -> mgmt_interface ->
                    "Management1".
                    """
                    link_tracking: LinkTracking
                    """
                    This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                    the upstream interfaces.
                    Useful in EVPN multhoming designs.


                    Subclass of AvdModel.
                    """
                    lacp_port_id_range: LacpPortIdRange
                    """
                    This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                    number of nodes in the "node_group".
                    Unique LACP port-id ranges are recommended for EVPN Multihoming
                    designs.


                    Subclass of AvdModel.
                    """
                    always_configure_ip_routing: bool
                    """
                    Force configuration of "ip routing" even on L2 devices.
                    Use this to retain behavior of AVD versions
                    below 4.0.0.

                    Default value: `False`
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""
                    uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                    """
                    Override the default `uplink_type` set at the `node_type_key` level.
                    `uplink_type` must be "p2p" if
                    `vtep` or `underlay_router` is true for the `node_type_key` definition.
                    """
                    uplink_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    IPv4
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    IPv6
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_interfaces: UplinkInterfaces
                    """
                    Local uplink interfaces.
                    Each list item supports range syntax that can be expanded into a list of
                    interfaces.
                    If uplink_interfaces is not defined, platform-specific defaults (defined under
                    default_interfaces) will be used instead.
                    Please note that default_interfaces are not defined by
                    default, you should define these yourself.


                    Subclass of AvdList with `str` items.
                    """
                    uplink_switch_interfaces: UplinkSwitchInterfaces
                    """
                    Interfaces located on uplink switches.

                    Subclass of AvdList with `str` items.
                    """
                    uplink_switches: UplinkSwitches
                    """Subclass of AvdList with `str` items."""
                    uplink_interface_speed: str | None
                    """
                    Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                    (Uplink switch
                    interface speed can be overridden with `uplink_switch_interface_speed`).
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_switch_interface_speed: str | None
                    """
                    Set point-to-Point interface speed for the uplink switch interface only.
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_mtu: int | None
                    """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                    max_uplink_switches: int | None
                    """
                    Maximum number of uplink switches.
                    Changing this value may change IP Addressing on uplinks.
                    Can be
                    used to reserve IP space for future expansions.
                    """
                    max_parallel_uplinks: int
                    """
                    Number of parallel links towards uplink switches.
                    Changing this value may change interface naming on
                    uplinks (and corresponding downlinks).
                    Can be used to reserve interfaces for future parallel
                    uplinks.

                    Default value: `1`
                    """
                    uplink_bfd: bool
                    """
                    Enable bfd on uplink interfaces.

                    Default value: `False`
                    """
                    uplink_native_vlan: int | None
                    """
                    Only applicable to switches with layer-2 port-channel uplinks.
                    A suspended (disabled) vlan will be
                    created in both ends of the link unless the vlan is defined under network services.
                    By default the
                    uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                    """
                    uplink_ptp: UplinkPtp
                    """
                    Enable PTP on all infrastructure links.

                    Subclass of AvdModel.
                    """
                    uplink_macsec: UplinkMacsec
                    """
                    Enable MacSec on all uplinks.

                    Subclass of AvdModel.
                    """
                    uplink_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink Port-channel
                    ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                    For
                    example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [ Eth11/1, Eth22/1 ] -> ID 111
                    For
                    MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                    This
                    option overrides the default behavior and statically sets the local Port-channel ID.
                    Note! Make sure
                    the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                    value.
                    """
                    uplink_switch_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink switch Port-
                    channel ID will be set to the number of the first interface defined under
                    `uplink_switch_interfaces`.
                    For example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [
                    Eth11/1, Eth22/1 ] -> ID 111
                    For MLAG port-channels ID will be based on the lowest member interface
                    on the first MLAG switch.
                    This option overrides the default behavior and statically sets the Port-
                    channel ID on the uplink switch.
                    Note! Make sure the ID is unique and does not overlap with
                    autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between
                    1 and 2000 and both MLAG switches must have the same value.
                    """
                    uplink_structured_config: dict
                    """
                    Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                    When
                    uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                    for eos_cli_config_gen overrides the settings on the ethernet interface level.
                    When uplink_type ==
                    "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                    eos_cli_config_gen overrides the settings on the port-channel interface level.
                    "uplink_structured_config" is applied after "structured_config", so it can override
                    "structured_config" defined on node-level.
                    Note! The content of this dictionary is _not_ validated
                    by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                    """
                    uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_interfaces`."""
                    uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                    uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                    uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                    channel uplinks.
                    """
                    mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to MLAG peer link port-channel id.
                    Added under
                    port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the
                    port-channel interface level.
                    "mlag_port_channel_structured_config" is applied after
                    "structured_config", so it can override "structured_config" defined on node-level.
                    """
                    mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                    override "structured_config" defined on node-level.
                    """
                    mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                    can override "structured_config" defined on node-level.
                    """
                    short_esi: str | None
                    """
                    short_esi only valid for l2leaf devices using port-channel uplink.
                    Setting short_esi to "auto"
                    generates the short_esi automatically using a hash of configuration elements.
                    < 0000:0000:0000 |
                    auto >.
                    """
                    isis_system_id_prefix: str | None
                    """(4.4 hexadecimal)."""
                    isis_maximum_paths: int | None
                    """Number of path to configure in ECMP for ISIS."""
                    is_type: Literal["level-1-2", "level-1", "level-2"] | None
                    """Overrides `isis_default_is_type`."""
                    node_sid_base: int
                    """
                    Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                    Default value: `0`
                    """
                    loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for Loopback0.
                    When set, it takes precedence over `loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                    """
                    vtep_loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    vtep_loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    vtep_loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not
                    catch duplicates.
                    """
                    vtep_loopback_ipv6_address: str | None
                    """
                    IPv6 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv6_pool`.
                    Note: AVD does not check for validity of the IPv6 address and does not
                    catch duplicates.
                    """
                    loopback_ipv4_offset: int
                    """
                    Offset all assigned loopback IP addresses.
                    Required when the 'loopback_ipv4_pool' is the same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    router_id_pool: str | None
                    """
                    Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                    router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                    will not exist on the device.
                    """
                    loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    loopback_ipv6_offset: int
                    """
                    Offset all assigned loopback IPv6 addresses.
                    Required when the 'loopback_ipv6_pool' is same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    vtep: bool | None
                    """
                    Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                    Overrides VTEP
                    setting inherited from node_type_keys.
                    """
                    vtep_loopback: str | None
                    """Set VXLAN source interface."""
                    bgp_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    Required with eBGP.
                    """
                    bgp_defaults: BgpDefaults
                    """
                    List of EOS commands to apply to BGP daemon.

                    Subclass of AvdList with `str` items.
                    """
                    evpn_role: Literal["client", "server", "none"] | None
                    """
                    Acting role in EVPN control plane.
                    Default is set in node_type definition from node_type_keys.
                    """
                    evpn_route_servers: EvpnRouteServers
                    """
                    List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                    Subclass of AvdList with `str`
                    items.
                    """
                    evpn_services_l2_only: bool
                    """
                    Possibility to prevent configuration of Tenant VRFs and SVIs.
                    Override node definition
                    "network_services_l3" from node_type_keys.
                    This allows support for centralized routing.

                    Default value: `False`
                    """
                    filter: Filter
                    """
                    Filter L3 and L2 network services based on tenant and tags (and operation filter).
                    If filter is not
                    defined it will default to all.


                    Subclass of AvdModel.
                    """
                    igmp_snooping_enabled: bool | None
                    """Activate or deactivate IGMP snooping on device level."""
                    evpn_gateway: EvpnGateway
                    """
                    Node is acting as EVPN Multi-Domain Gateway.
                    New BGP peer-group is generated between EVPN GWs in
                    different domains or between GWs and Route Servers.
                    Name can be changed under
                    "bgp_peer_groups.evpn_overlay_core" variable.
                    L3 rechability for different EVPN GWs must be already
                    in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                    same Ansible inventory.


                    Subclass of AvdModel.
                    """
                    ipvpn_gateway: IpvpnGateway
                    """
                    Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                    this is "bgp_peer_groups.ipvpn_gateway_peers".
                    L3 Reachability is required for this to work, the
                    preferred method to establish underlay connectivity is to use core_interfaces.


                    Subclass of
                    AvdModel.
                    """
                    mlag: bool
                    """
                    Enable / Disable auto MLAG, when two nodes are defined in node group.

                    Default value: `True`
                    """
                    mlag_dual_primary_detection: bool
                    """
                    Enable / Disable MLAG dual primary detection.

                    Default value: `False`
                    """
                    mlag_ibgp_origin_incomplete: bool
                    """
                    Set origin of routes received from MLAG iBGP peer to incomplete.
                    The purpose is to optimize routing
                    for leaf loopbacks from spine perspective and
                    avoid suboptimal routing via peerlink for control
                    plane traffic.

                    Default value: `True`
                    """
                    mlag_interfaces: MlagInterfaces
                    """
                    Each list item supports range syntax that can be expanded into a list of interfaces.
                    Required when
                    MLAG leafs are present in the topology.


                    Subclass of AvdList with `str` items.
                    """
                    mlag_interfaces_speed: str | None
                    """
                    Set MLAG interface speed.
                    Speed should be set in the format `<interface_speed>` or `forced
                    <interface_speed>` or `auto <interface_speed>`.
                    """
                    mlag_peer_l3_vlan: int
                    """
                    Underlay L3 peering SVI interface id.
                    If set to 0 or the same vlan as mlag_peer_vlan, the
                    mlag_peer_vlan will be used for L3 peering.

                    Default value: `4093`
                    """
                    mlag_peer_l3_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_l3_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_vlan: int
                    """
                    MLAG Peer Link (control link) SVI interface id.

                    Default value: `4094`
                    """
                    mlag_peer_link_allowed_vlans: str | None
                    mlag_peer_address_family: Literal["ipv4", "ipv6"]
                    """
                    IP address family used to establish MLAG Peer Link (control link).
                    `ipv6` requires EOS version
                    4.31.1F or higher.
                    Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                    (ex. `mlag_peer_l3_vlan` set to 4094).

                    Default value: `"ipv4"`
                    """
                    mlag_peer_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                    """
                    mlag_peer_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                    """
                    mlag_port_channel_id: int | None
                    """
                    If not set, the mlag port-channel id is generated based on the digits of the first interface present
                    in 'mlag_interfaces'.
                    Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                    999999 > for EOS >= 4.25.0F.
                    """
                    mlag_domain_id: str | None
                    """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                    spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                    spanning_tree_priority: int
                    """
                    Spanning-tree priority configured for the selected mode.
                    For `rapid-pvst` the priority can also be
                    set per VLAN under network services.

                    Default value: `32768`
                    """
                    spanning_tree_root_super: bool
                    """Default value: `False`"""
                    spanning_tree_mst_pvst_boundary: bool | None
                    """Enable MST PVST border ports."""
                    spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                    """Specify range of port-ids to reserve for port-channels."""
                    virtual_router_mac_address: str | None
                    """Virtual router mac address for anycast gateway."""
                    inband_mgmt_interface: str | None
                    """
                    Pointer to interface used for inband management.
                    All configuration must be done using other data
                    models like network services or structured_config.
                    'inband_mgmt_interface' is only used to refer to
                    this interface as source in various management protocol settings (future feature).

                    On L2 switches,
                    this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                    """
                    inband_mgmt_vlan: int
                    """
                    VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                    uplinks).
                    When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                    switch as well as all 'uplink_switches'.
                    When using 'inband_mgmt_ip' the VLAN and SVI will only be
                    created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                    created using network services data models.

                    Default value: `4092`
                    """
                    inband_mgmt_subnet: str | None
                    """
                    Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                    ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      : <subnet> +
                    2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       :
                    <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                    GW on l2leafs : <subnet> + 1
                    Assign range
                    larger than total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ip' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_subnet_offset: int
                    """
                    Offset value to adjust the calculated inband management IP address within the subnet.
                    The assigned
                    IP will be computed by adding this offset to the device ID.

                    Default value: `0`
                    """
                    inband_mgmt_ip: str | None
                    """
                    IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                    If this is set the
                    VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN and SVI on
                    the parent switches must be created using network services data models.

                    This setting is applicable
                    to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                    is derived from 'inband_mgmt_subnet' if set.

                    This setting is applicable to L2 switches (switches
                    using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_address: str | None
                    """
                    IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                    If this
                    is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN
                    and SVI on the parent switches must be created using network services data models.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_subnet: str | None
                    """
                    Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                    on ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                    extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      :
                    <subnet> + 2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       : <subnet> + 3 + <l2leaf id>
                    GW on l2leafs : <subnet> + 1
                    Assign range larger than
                    total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf'.
                    Used when `inband_mgmt_ipv6_address` is set.
                    Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_description: str
                    """
                    Description configured on the Inband Management SVI.

                    This setting is only applied on the devices
                    where it is set, it does not automatically affect any parent/child devices configuration, so it must
                    be set on each applicable node/node-group/node-type as needed.

                    Default value: `"Inband Management"`
                    """
                    inband_mgmt_vlan_name: str
                    """
                    Name configured on the Inband Management VLAN.
                    This setting is only applied on the devices where it
                    is set, it does not automatically affect any parent/child devices configuration, so it must be set
                    on each applicable node/node-group/node-type as needed.

                    Default value: `"INBAND_MGMT"`
                    """
                    inband_mgmt_vrf: str
                    """
                    VRF configured on the Inband Management Interface.
                    The VRF is created if not already created by
                    other means.
                    This setting is only applied on the devices where it is set, it does not automatically
                    affect any parent/child devices configuration, so it must be set on each applicable node/node-
                    group/node-type as needed.

                    Default value: `"default"`
                    """
                    inband_mgmt_mtu: int
                    """
                    MTU configured on the Inband Management Interface.
                    This setting is only applied on the devices where
                    it is set, it does not automatically affect any parent/child devices configuration, so it must be
                    set on each applicable node/node-group/node-type as needed.

                    Default value: `1500`
                    """
                    inband_ztp: bool
                    """
                    Enable to configure upstream device with proper configuration to allow downstream devices to be
                    Zero-Touch-Provisioned over the uplink interfaces.
                    For L2 devices this setting also requires that
                    the `inband_mgmt_vlan` is set for the node.

                    PREVIEW: Support for L3 devices is marked as "preview",
                    meaning the data models or generated configuration can change at any time.

                    Default value: `False`
                    """
                    inband_ztp_lacp_fallback_delay: int
                    """
                    Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                    ZTP node.
                    This setting also requires that `inband_ztp` is set for the node.

                    Default value: `30`
                    """
                    mpls_overlay_role: Literal["client", "server", "none"] | None
                    """
                    Set the default mpls overlay role.
                    Acting role in overlay control plane.
                    """
                    overlay_address_families: OverlayAddressFamilies
                    """
                    Set the default overlay address families.


                    Subclass of AvdList with `str` items.
                    """
                    mpls_route_reflectors: MplsRouteReflectors
                    """
                    List of inventory hostname acting as MPLS route-reflectors.

                    Subclass of AvdList with `str` items.
                    """
                    bgp_cluster_id: str | None
                    """Set BGP cluster id."""
                    ptp: Ptp
                    """Subclass of AvdModel."""
                    wan_role: Literal["client", "server"] | None
                    """
                    Override the default WAN role.

                    This is used both for AutoVPN and Pathfinder designs.
                    That means if
                    `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                    `server` indicates that the router is a
                    route-reflector.
                    """
                    cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                    """
                    Configure the transit mode for a WAN client for CV Pathfinder designs
                    only when the `wan_mode` root
                    key is set to `cv_pathfinder`.

                    'zone' is currently not supported.
                    """
                    cv_pathfinder_region: str | None
                    """
                    The CV Pathfinder region name.
                    This key is required for WAN routers but optional for pathfinders.
                    The region name must be defined under 'cv_pathfinder_regions'.
                    """
                    cv_pathfinder_site: str | None
                    """
                    The CV Pathfinder site name.
                    This key is required for WAN routers but optional for pathfinders.
                    For
                    WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                    relevant region under 'cv_pathfinder_regions'.
                    For pathfinders without `cv_pathfinder_region` set,
                    the site must be defined under `cv_pathfinder_global_sites`.
                    """
                    wan_ha: WanHa
                    """
                    The key is supported only if `wan_mode` == `cv-pathfinder`.
                    AutoVPN support is still to be
                    determined.

                    Maximum 2 devices supported by group for HA.

                    Subclass of AvdModel.
                    """
                    dps_mss_ipv4: str
                    """
                    IPv4 MSS value configured under "router path-selection" on WAN Devices.

                    Default value: `"auto"`
                    """
                    l3_interfaces: L3Interfaces
                    """
                    L3 Interfaces to configure on the node.

                    Subclass of AvdIndexedList with `L3InterfacesItem` items.
                    Primary key is `name` (`str`).
                    """
                    l3_port_channels: L3PortChannels
                    """
                    L3 Port-Channel interfaces to configure on the node.

                    Subclass of AvdIndexedList with
                    `L3PortChannelsItem` items. Primary key is `name` (`str`).
                    """
                    data_plane_cpu_allocation_max: int | None
                    """
                    Set the maximum number of CPU used for the data plane.
                    This setting is useful on virtual Route
                    Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                    """
                    flow_tracker_type: Literal["sampled", "hardware"] | None
                    """
                    Set the flow tracker type.
                    Override the `default_flow_tracker_type`` set at the `node_type_key`
                    level.
                    `default_flow_tracker_type` default value is `sampled`.
                    """
                    underlay_multicast: UnderlayMulticast
                    """Subclass of AvdModel."""
                    campus: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_access_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus access pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    cv_tags_topology_type: str | None
                    """
                    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                    "edge" or "member-leaf".
                    """
                    digital_twin: DigitalTwin
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Set the OS version and management IP address for the digital twin of the
                    associated node(s).

                    Subclass of AvdModel.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            name: str | UndefinedType = Undefined,
                            downlink_pools: DownlinkPools | UndefinedType = Undefined,
                            id: int | None | UndefinedType = Undefined,
                            platform: str | None | UndefinedType = Undefined,
                            mac_address: str | None | UndefinedType = Undefined,
                            system_mac_address: str | None | UndefinedType = Undefined,
                            serial_number: str | None | UndefinedType = Undefined,
                            rack: str | None | UndefinedType = Undefined,
                            mgmt_ip: str | None | UndefinedType = Undefined,
                            mgmt_gateway: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                            mgmt_interface: str | None | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                            always_configure_ip_routing: bool | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                            uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                            uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                            uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                            uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                            uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                            uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                            uplink_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_mtu: int | None | UndefinedType = Undefined,
                            max_uplink_switches: int | None | UndefinedType = Undefined,
                            max_parallel_uplinks: int | UndefinedType = Undefined,
                            uplink_bfd: bool | UndefinedType = Undefined,
                            uplink_native_vlan: int | None | UndefinedType = Undefined,
                            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                            uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                            uplink_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_structured_config: dict | UndefinedType = Undefined,
                            uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            short_esi: str | None | UndefinedType = Undefined,
                            isis_system_id_prefix: str | None | UndefinedType = Undefined,
                            isis_maximum_paths: int | None | UndefinedType = Undefined,
                            is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                            node_sid_base: int | UndefinedType = Undefined,
                            loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                            loopback_ipv4_offset: int | UndefinedType = Undefined,
                            router_id_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_offset: int | UndefinedType = Undefined,
                            vtep: bool | None | UndefinedType = Undefined,
                            vtep_loopback: str | None | UndefinedType = Undefined,
                            bgp_as: str | None | UndefinedType = Undefined,
                            bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                            evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                            evpn_services_l2_only: bool | UndefinedType = Undefined,
                            filter: Filter | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                            ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                            mlag: bool | UndefinedType = Undefined,
                            mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                            mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                            mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                            mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                            mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_vlan: int | UndefinedType = Undefined,
                            mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                            mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                            mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_port_channel_id: int | None | UndefinedType = Undefined,
                            mlag_domain_id: str | None | UndefinedType = Undefined,
                            spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                            spanning_tree_priority: int | UndefinedType = Undefined,
                            spanning_tree_root_super: bool | UndefinedType = Undefined,
                            spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                            spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                            | UndefinedType = Undefined,
                            virtual_router_mac_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_interface: str | None | UndefinedType = Undefined,
                            inband_mgmt_vlan: int | UndefinedType = Undefined,
                            inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                            inband_mgmt_ip: str | None | UndefinedType = Undefined,
                            inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_description: str | UndefinedType = Undefined,
                            inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                            inband_mgmt_vrf: str | UndefinedType = Undefined,
                            inband_mgmt_mtu: int | UndefinedType = Undefined,
                            inband_ztp: bool | UndefinedType = Undefined,
                            inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                            mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                            mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                            bgp_cluster_id: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                            cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                            cv_pathfinder_region: str | None | UndefinedType = Undefined,
                            cv_pathfinder_site: str | None | UndefinedType = Undefined,
                            wan_ha: WanHa | UndefinedType = Undefined,
                            dps_mss_ipv4: str | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                            flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                            underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                            campus: str | None | UndefinedType = Undefined,
                            campus_pod: str | None | UndefinedType = Undefined,
                            campus_access_pod: str | None | UndefinedType = Undefined,
                            cv_tags_topology_type: str | None | UndefinedType = Undefined,
                            digital_twin: DigitalTwin | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodesItem.


                            Subclass of AvdModel.

                            Args:
                                name: The Node Name is used as "hostname".
                                downlink_pools:
                                   IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                                   with `uplink_ipv4_pool` set on the downlink switch.

                                   Subclass of AvdList with `DownlinkPoolsItem`
                                   items.
                                id: Unique identifier used for IP addressing and other algorithms.
                                platform: Arista platform family.
                                mac_address: Leverage to document management interface mac address.
                                system_mac_address:
                                   System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                   Set to the same MAC address as
                                   available in "show version" on the device.
                                   "system_mac_address" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                serial_number:
                                   Set to the Serial Number of the device.
                                   Only used for documentation purpose in the fabric
                                   documentation and part of the structured_config.
                                   "serial_number" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                rack: Rack that the switch is located in (only used in snmp_settings location).
                                mgmt_ip: Node management interface IPv4 address.
                                mgmt_gateway:
                                   This key sets the management gateway for the device. It takes precedence over the global
                                   `mgmt_gateway`.
                                ipv6_mgmt_ip: Node management interface IPv6 address.
                                ipv6_mgmt_gateway:
                                   This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                   `ipv6_mgmt_gateway`.
                                mgmt_interface:
                                   Management Interface Name.
                                   Default -> platform_management_interface -> mgmt_interface ->
                                   "Management1".
                                link_tracking:
                                   This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                   the upstream interfaces.
                                   Useful in EVPN multhoming designs.


                                   Subclass of AvdModel.
                                lacp_port_id_range:
                                   This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                   number of nodes in the "node_group".
                                   Unique LACP port-id ranges are recommended for EVPN Multihoming
                                   designs.


                                   Subclass of AvdModel.
                                always_configure_ip_routing:
                                   Force configuration of "ip routing" even on L2 devices.
                                   Use this to retain behavior of AVD versions
                                   below 4.0.0.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.
                                uplink_type:
                                   Override the default `uplink_type` set at the `node_type_key` level.
                                   `uplink_type` must be "p2p" if
                                   `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                uplink_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   IPv4
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   IPv6
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_interfaces:
                                   Local uplink interfaces.
                                   Each list item supports range syntax that can be expanded into a list of
                                   interfaces.
                                   If uplink_interfaces is not defined, platform-specific defaults (defined under
                                   default_interfaces) will be used instead.
                                   Please note that default_interfaces are not defined by
                                   default, you should define these yourself.


                                   Subclass of AvdList with `str` items.
                                uplink_switch_interfaces:
                                   Interfaces located on uplink switches.

                                   Subclass of AvdList with `str` items.
                                uplink_switches: Subclass of AvdList with `str` items.
                                uplink_interface_speed:
                                   Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                   (Uplink switch
                                   interface speed can be overridden with `uplink_switch_interface_speed`).
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_switch_interface_speed:
                                   Set point-to-Point interface speed for the uplink switch interface only.
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                max_uplink_switches:
                                   Maximum number of uplink switches.
                                   Changing this value may change IP Addressing on uplinks.
                                   Can be
                                   used to reserve IP space for future expansions.
                                max_parallel_uplinks:
                                   Number of parallel links towards uplink switches.
                                   Changing this value may change interface naming on
                                   uplinks (and corresponding downlinks).
                                   Can be used to reserve interfaces for future parallel
                                   uplinks.
                                uplink_bfd: Enable bfd on uplink interfaces.
                                uplink_native_vlan:
                                   Only applicable to switches with layer-2 port-channel uplinks.
                                   A suspended (disabled) vlan will be
                                   created in both ends of the link unless the vlan is defined under network services.
                                   By default the
                                   uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                uplink_ptp:
                                   Enable PTP on all infrastructure links.

                                   Subclass of AvdModel.
                                uplink_macsec:
                                   Enable MacSec on all uplinks.

                                   Subclass of AvdModel.
                                uplink_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink Port-channel
                                   ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                   For
                                   example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                   For
                                   MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                   This
                                   option overrides the default behavior and statically sets the local Port-channel ID.
                                   Note! Make sure
                                   the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                   value.
                                uplink_switch_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink switch Port-
                                   channel ID will be set to the number of the first interface defined under
                                   `uplink_switch_interfaces`.
                                   For example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [
                                   Eth11/1, Eth22/1 ] -> ID 111
                                   For MLAG port-channels ID will be based on the lowest member interface
                                   on the first MLAG switch.
                                   This option overrides the default behavior and statically sets the Port-
                                   channel ID on the uplink switch.
                                   Note! Make sure the ID is unique and does not overlap with
                                   autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between
                                   1 and 2000 and both MLAG switches must have the same value.
                                uplink_structured_config:
                                   Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                   When
                                   uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                   for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                   When uplink_type ==
                                   "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                   eos_cli_config_gen overrides the settings on the port-channel interface level.
                                   "uplink_structured_config" is applied after "structured_config", so it can override
                                   "structured_config" defined on node-level.
                                   Note! The content of this dictionary is _not_ validated
                                   by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                uplink_switch_port_channel_structured_config:
                                   Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                   channel uplinks.
                                mlag_port_channel_structured_config:
                                   Custom structured config applied to MLAG peer link port-channel id.
                                   Added under
                                   port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the
                                   port-channel interface level.
                                   "mlag_port_channel_structured_config" is applied after
                                   "structured_config", so it can override "structured_config" defined on node-level.
                                mlag_peer_vlan_structured_config:
                                   Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                   override "structured_config" defined on node-level.
                                mlag_peer_l3_vlan_structured_config:
                                   Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                   can override "structured_config" defined on node-level.
                                short_esi:
                                   short_esi only valid for l2leaf devices using port-channel uplink.
                                   Setting short_esi to "auto"
                                   generates the short_esi automatically using a hash of configuration elements.
                                   < 0000:0000:0000 |
                                   auto >.
                                isis_system_id_prefix: (4.4 hexadecimal).
                                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                is_type: Overrides `isis_default_is_type`.
                                node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                loopback_ipv4_address:
                                   IPv4 address without mask for Loopback0.
                                   When set, it takes precedence over `loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                vtep_loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                vtep_loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                vtep_loopback_ipv4_address:
                                   IPv4 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not
                                   catch duplicates.
                                vtep_loopback_ipv6_address:
                                   IPv6 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv6_pool`.
                                   Note: AVD does not check for validity of the IPv6 address and does not
                                   catch duplicates.
                                loopback_ipv4_offset:
                                   Offset all assigned loopback IP addresses.
                                   Required when the 'loopback_ipv4_pool' is the same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                router_id_pool:
                                   Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                   router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                   will not exist on the device.
                                loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                loopback_ipv6_offset:
                                   Offset all assigned loopback IPv6 addresses.
                                   Required when the 'loopback_ipv6_pool' is same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                vtep:
                                   Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                   Overrides VTEP
                                   setting inherited from node_type_keys.
                                vtep_loopback: Set VXLAN source interface.
                                bgp_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                   Required with eBGP.
                                bgp_defaults:
                                   List of EOS commands to apply to BGP daemon.

                                   Subclass of AvdList with `str` items.
                                evpn_role:
                                   Acting role in EVPN control plane.
                                   Default is set in node_type definition from node_type_keys.
                                evpn_route_servers:
                                   List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                   Subclass of AvdList with `str`
                                   items.
                                evpn_services_l2_only:
                                   Possibility to prevent configuration of Tenant VRFs and SVIs.
                                   Override node definition
                                   "network_services_l3" from node_type_keys.
                                   This allows support for centralized routing.
                                filter:
                                   Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                   If filter is not
                                   defined it will default to all.


                                   Subclass of AvdModel.
                                igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                evpn_gateway:
                                   Node is acting as EVPN Multi-Domain Gateway.
                                   New BGP peer-group is generated between EVPN GWs in
                                   different domains or between GWs and Route Servers.
                                   Name can be changed under
                                   "bgp_peer_groups.evpn_overlay_core" variable.
                                   L3 rechability for different EVPN GWs must be already
                                   in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                   same Ansible inventory.


                                   Subclass of AvdModel.
                                ipvpn_gateway:
                                   Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                   this is "bgp_peer_groups.ipvpn_gateway_peers".
                                   L3 Reachability is required for this to work, the
                                   preferred method to establish underlay connectivity is to use core_interfaces.


                                   Subclass of
                                   AvdModel.
                                mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                mlag_ibgp_origin_incomplete:
                                   Set origin of routes received from MLAG iBGP peer to incomplete.
                                   The purpose is to optimize routing
                                   for leaf loopbacks from spine perspective and
                                   avoid suboptimal routing via peerlink for control
                                   plane traffic.
                                mlag_interfaces:
                                   Each list item supports range syntax that can be expanded into a list of interfaces.
                                   Required when
                                   MLAG leafs are present in the topology.


                                   Subclass of AvdList with `str` items.
                                mlag_interfaces_speed:
                                   Set MLAG interface speed.
                                   Speed should be set in the format `<interface_speed>` or `forced
                                   <interface_speed>` or `auto <interface_speed>`.
                                mlag_peer_l3_vlan:
                                   Underlay L3 peering SVI interface id.
                                   If set to 0 or the same vlan as mlag_peer_vlan, the
                                   mlag_peer_vlan will be used for L3 peering.
                                mlag_peer_l3_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_l3_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                mlag_peer_address_family:
                                   IP address family used to establish MLAG Peer Link (control link).
                                   `ipv6` requires EOS version
                                   4.31.1F or higher.
                                   Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                   (ex. `mlag_peer_l3_vlan` set to 4094).
                                mlag_peer_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                mlag_peer_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                mlag_port_channel_id:
                                   If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                   in 'mlag_interfaces'.
                                   Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                   999999 > for EOS >= 4.25.0F.
                                mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                spanning_tree_mode: spanning_tree_mode
                                spanning_tree_priority:
                                   Spanning-tree priority configured for the selected mode.
                                   For `rapid-pvst` the priority can also be
                                   set per VLAN under network services.
                                spanning_tree_root_super: spanning_tree_root_super
                                spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                inband_mgmt_interface:
                                   Pointer to interface used for inband management.
                                   All configuration must be done using other data
                                   models like network services or structured_config.
                                   'inband_mgmt_interface' is only used to refer to
                                   this interface as source in various management protocol settings (future feature).

                                   On L2 switches,
                                   this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                inband_mgmt_vlan:
                                   VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                   uplinks).
                                   When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                   switch as well as all 'uplink_switches'.
                                   When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                   created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                   created using network services data models.
                                inband_mgmt_subnet:
                                   Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                   ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      : <subnet> +
                                   2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       :
                                   <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range
                                   larger than total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ip' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_subnet_offset:
                                   Offset value to adjust the calculated inband management IP address within the subnet.
                                   The assigned
                                   IP will be computed by adding this offset to the device ID.
                                inband_mgmt_ip:
                                   IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                   If this is set the
                                   VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN and SVI on
                                   the parent switches must be created using network services data models.

                                   This setting is applicable
                                   to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                   is derived from 'inband_mgmt_subnet' if set.

                                   This setting is applicable to L2 switches (switches
                                   using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_address:
                                   IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                   If this
                                   is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN
                                   and SVI on the parent switches must be created using network services data models.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_subnet:
                                   Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                   on ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                   extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      :
                                   <subnet> + 2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       : <subnet> + 3 + <l2leaf id>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range larger than
                                   total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf'.
                                   Used when `inband_mgmt_ipv6_address` is set.
                                   Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_description:
                                   Description configured on the Inband Management SVI.

                                   This setting is only applied on the devices
                                   where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                   be set on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vlan_name:
                                   Name configured on the Inband Management VLAN.
                                   This setting is only applied on the devices where it
                                   is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                   on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vrf:
                                   VRF configured on the Inband Management Interface.
                                   The VRF is created if not already created by
                                   other means.
                                   This setting is only applied on the devices where it is set, it does not automatically
                                   affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                   group/node-type as needed.
                                inband_mgmt_mtu:
                                   MTU configured on the Inband Management Interface.
                                   This setting is only applied on the devices where
                                   it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                   set on each applicable node/node-group/node-type as needed.
                                inband_ztp:
                                   Enable to configure upstream device with proper configuration to allow downstream devices to be
                                   Zero-Touch-Provisioned over the uplink interfaces.
                                   For L2 devices this setting also requires that
                                   the `inband_mgmt_vlan` is set for the node.

                                   PREVIEW: Support for L3 devices is marked as "preview",
                                   meaning the data models or generated configuration can change at any time.
                                inband_ztp_lacp_fallback_delay:
                                   Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                   ZTP node.
                                   This setting also requires that `inband_ztp` is set for the node.
                                mpls_overlay_role:
                                   Set the default mpls overlay role.
                                   Acting role in overlay control plane.
                                overlay_address_families:
                                   Set the default overlay address families.


                                   Subclass of AvdList with `str` items.
                                mpls_route_reflectors:
                                   List of inventory hostname acting as MPLS route-reflectors.

                                   Subclass of AvdList with `str` items.
                                bgp_cluster_id: Set BGP cluster id.
                                ptp: Subclass of AvdModel.
                                wan_role:
                                   Override the default WAN role.

                                   This is used both for AutoVPN and Pathfinder designs.
                                   That means if
                                   `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                   `server` indicates that the router is a
                                   route-reflector.
                                cv_pathfinder_transit_mode:
                                   Configure the transit mode for a WAN client for CV Pathfinder designs
                                   only when the `wan_mode` root
                                   key is set to `cv_pathfinder`.

                                   'zone' is currently not supported.
                                cv_pathfinder_region:
                                   The CV Pathfinder region name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   The region name must be defined under 'cv_pathfinder_regions'.
                                cv_pathfinder_site:
                                   The CV Pathfinder site name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   For
                                   WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                   relevant region under 'cv_pathfinder_regions'.
                                   For pathfinders without `cv_pathfinder_region` set,
                                   the site must be defined under `cv_pathfinder_global_sites`.
                                wan_ha:
                                   The key is supported only if `wan_mode` == `cv-pathfinder`.
                                   AutoVPN support is still to be
                                   determined.

                                   Maximum 2 devices supported by group for HA.

                                   Subclass of AvdModel.
                                dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                l3_interfaces:
                                   L3 Interfaces to configure on the node.

                                   Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                   Primary key is `name` (`str`).
                                l3_port_channels:
                                   L3 Port-Channel interfaces to configure on the node.

                                   Subclass of AvdIndexedList with
                                   `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                data_plane_cpu_allocation_max:
                                   Set the maximum number of CPU used for the data plane.
                                   This setting is useful on virtual Route
                                   Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                flow_tracker_type:
                                   Set the flow tracker type.
                                   Override the `default_flow_tracker_type`` set at the `node_type_key`
                                   level.
                                   `default_flow_tracker_type` default value is `sampled`.
                                underlay_multicast: Subclass of AvdModel.
                                campus:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_access_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus access pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                cv_tags_topology_type:
                                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                   "edge" or "member-leaf".
                                digital_twin:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Set the OS version and management IP address for the digital twin of the
                                   associated node(s).

                                   Subclass of AvdModel.

                            """

                class Nodes(AvdIndexedList[str, NodesItem]):
                    """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`)."""

                    _primary_key: ClassVar[str] = "name"

                Nodes._item_type = NodesItem

                _fields: ClassVar[dict] = {"defaults": {"type": Defaults}, "node_groups": {"type": NodeGroups}, "nodes": {"type": Nodes}}
                defaults: Defaults
                """
                Define variables for all nodes of this type.

                Subclass of AvdModel.
                """
                node_groups: NodeGroups
                """
                Define variables related to all nodes part of this group.

                Subclass of AvdIndexedList with
                `NodeGroupsItem` items. Primary key is `group` (`str`).
                """
                nodes: Nodes
                """
                Define variables per node.

                Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                (`str`).
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        defaults: Defaults | UndefinedType = Undefined,
                        node_groups: NodeGroups | UndefinedType = Undefined,
                        nodes: Nodes | UndefinedType = Undefined,
                    ) -> None:
                        """
                        CustomNodeTypes.


                        Subclass of AvdModel.

                        Args:
                            defaults:
                               Define variables for all nodes of this type.

                               Subclass of AvdModel.
                            node_groups:
                               Define variables related to all nodes part of this group.

                               Subclass of AvdIndexedList with
                               `NodeGroupsItem` items. Primary key is `group` (`str`).
                            nodes:
                               Define variables per node.

                               Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                               (`str`).

                        """

            _fields: ClassVar[dict] = {"key": {"type": str}, "value": {"type": CustomNodeTypes}}
            _field_to_key_map: ClassVar[dict] = {"value": "custom_node_type_keys_key"}
            _key_to_field_map: ClassVar[dict] = {"custom_node_type_keys_key": "value"}
            key: str
            """Key used as dynamic key"""
            value: CustomNodeTypes
            """Value of dynamic key"""

            if TYPE_CHECKING:

                def __init__(self, *, key: str | UndefinedType = Undefined, value: CustomNodeTypes | UndefinedType = Undefined) -> None:
                    """
                    DynamicCustomNodeTypesItem.


                    Args:
                        key: Key used as dynamic key
                        value: Value of dynamic key

                    """

        class DynamicCustomNodeTypes(AvdIndexedList[str, DynamicCustomNodeTypesItem]):
            _primary_key: ClassVar[str] = "key"

        DynamicCustomNodeTypes._item_type = DynamicCustomNodeTypesItem

        class DynamicNetworkServicesItem(AvdModel):
            class NetworkServicesItem(AvdModel):
                """Subclass of AvdModel."""

                class BgpPeerGroupsItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Nodes(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Nodes._item_type = str

                    class AddressFamilyIpv4(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "activate": {"type": bool},
                            "route_map_in": {"type": str},
                            "route_map_out": {"type": str},
                            "rcf_in": {"type": str},
                            "rcf_out": {"type": str},
                            "default_originate": {"type": EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.DefaultOriginate},
                            "next_hop": {"type": EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.NextHop},
                            "prefix_list_in": {"type": str},
                            "prefix_list_out": {"type": str},
                        }
                        activate: bool | None
                        route_map_in: str | None
                        """Inbound route-map name."""
                        route_map_out: str | None
                        """Outbound route-map name."""
                        rcf_in: str | None
                        """
                        Inbound RCF function name with parenthesis.
                        Example: MyFunction(myarg).
                        """
                        rcf_out: str | None
                        """
                        Outbound RCF function name with parenthesis.
                        Example: MyFunction(myarg).
                        """
                        default_originate: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.DefaultOriginate
                        next_hop: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.NextHop
                        prefix_list_in: str | None
                        """Inbound prefix-list name."""
                        prefix_list_out: str | None
                        """Outbound prefix-list name."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                activate: bool | None | UndefinedType = Undefined,
                                route_map_in: str | None | UndefinedType = Undefined,
                                route_map_out: str | None | UndefinedType = Undefined,
                                rcf_in: str | None | UndefinedType = Undefined,
                                rcf_out: str | None | UndefinedType = Undefined,
                                default_originate: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.DefaultOriginate | UndefinedType = Undefined,
                                next_hop: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.NextHop | UndefinedType = Undefined,
                                prefix_list_in: str | None | UndefinedType = Undefined,
                                prefix_list_out: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                AddressFamilyIpv4.


                                Subclass of AvdModel.

                                Args:
                                    activate: activate
                                    route_map_in: Inbound route-map name.
                                    route_map_out: Outbound route-map name.
                                    rcf_in:
                                       Inbound RCF function name with parenthesis.
                                       Example: MyFunction(myarg).
                                    rcf_out:
                                       Outbound RCF function name with parenthesis.
                                       Example: MyFunction(myarg).
                                    default_originate: default_originate
                                    next_hop: next_hop
                                    prefix_list_in: Inbound prefix-list name.
                                    prefix_list_out: Outbound prefix-list name.

                                """

                    class AddressFamilyIpv6(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "activate": {"type": bool},
                            "route_map_in": {"type": str},
                            "route_map_out": {"type": str},
                            "rcf_in": {"type": str},
                            "rcf_out": {"type": str},
                            "prefix_list_in": {"type": str},
                            "prefix_list_out": {"type": str},
                        }
                        activate: bool | None
                        route_map_in: str | None
                        """Inbound route-map name."""
                        route_map_out: str | None
                        """Outbound route-map name."""
                        rcf_in: str | None
                        """
                        Inbound RCF function name with parenthesis.
                        Example: MyFunction(myarg).
                        """
                        rcf_out: str | None
                        """
                        Outbound RCF function name with parenthesis.
                        Example: MyFunction(myarg).
                        """
                        prefix_list_in: str | None
                        """Inbound prefix-list name."""
                        prefix_list_out: str | None
                        """Outbound prefix-list name."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                activate: bool | None | UndefinedType = Undefined,
                                route_map_in: str | None | UndefinedType = Undefined,
                                route_map_out: str | None | UndefinedType = Undefined,
                                rcf_in: str | None | UndefinedType = Undefined,
                                rcf_out: str | None | UndefinedType = Undefined,
                                prefix_list_in: str | None | UndefinedType = Undefined,
                                prefix_list_out: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                AddressFamilyIpv6.


                                Subclass of AvdModel.

                                Args:
                                    activate: activate
                                    route_map_in: Inbound route-map name.
                                    route_map_out: Outbound route-map name.
                                    rcf_in:
                                       Inbound RCF function name with parenthesis.
                                       Example: MyFunction(myarg).
                                    rcf_out:
                                       Outbound RCF function name with parenthesis.
                                       Example: MyFunction(myarg).
                                    prefix_list_in: Inbound prefix-list name.
                                    prefix_list_out: Outbound prefix-list name.

                                """

                    class AsPath(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"remote_as_replace_out": {"type": bool}, "prepend_own_disabled": {"type": bool}}
                        remote_as_replace_out: bool | None
                        """Replace AS number with local AS number."""
                        prepend_own_disabled: bool | None
                        """Disable prepending own AS number to AS path."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_as_replace_out: bool | None | UndefinedType = Undefined,
                                prepend_own_disabled: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                AsPath.


                                Subclass of AvdModel.

                                Args:
                                    remote_as_replace_out: Replace AS number with local AS number.
                                    prepend_own_disabled: Disable prepending own AS number to AS path.

                                """

                    class RemovePrivateAs(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "all": {"type": bool}, "replace_as": {"type": bool}}
                        enabled: bool | None
                        all: bool | None
                        replace_as: bool | None

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                all: bool | None | UndefinedType = Undefined,
                                replace_as: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                RemovePrivateAs.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    all: all
                                    replace_as: replace_as

                                """

                    class RemovePrivateAsIngress(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "replace_as": {"type": bool}}
                        enabled: bool | None
                        replace_as: bool | None

                        if TYPE_CHECKING:

                            def __init__(
                                self, *, enabled: bool | None | UndefinedType = Undefined, replace_as: bool | None | UndefinedType = Undefined
                            ) -> None:
                                """
                                RemovePrivateAsIngress.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    replace_as: replace_as

                                """

                    class BfdTimers(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"interval": {"type": int}, "min_rx": {"type": int}, "multiplier": {"type": int}}
                        interval: int
                        """Interval in milliseconds."""
                        min_rx: int
                        """Rate in milliseconds."""
                        multiplier: int

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                interval: int | UndefinedType = Undefined,
                                min_rx: int | UndefinedType = Undefined,
                                multiplier: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                BfdTimers.


                                Subclass of AvdModel.

                                Args:
                                    interval: Interval in milliseconds.
                                    min_rx: Rate in milliseconds.
                                    multiplier: multiplier

                                """

                    class DefaultOriginate(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "always": {"type": bool}, "route_map": {"type": str}}
                        enabled: bool | None
                        always: bool | None
                        route_map: str | None
                        """Route-map name."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                always: bool | None | UndefinedType = Undefined,
                                route_map: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DefaultOriginate.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    always: always
                                    route_map: Route-map name.

                                """

                    class MissingPolicy(AvdModel):
                        """Subclass of AvdModel."""

                        class DirectionIn(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "action": {"type": str},
                                "include_community_list": {"type": bool},
                                "include_prefix_list": {"type": bool},
                                "include_sub_route_map": {"type": bool},
                            }
                            action: Literal["deny", "permit", "deny-in-out"]
                            """Missing policy action."""
                            include_community_list: bool | None
                            """Include community-list references in missing policy decision."""
                            include_prefix_list: bool | None
                            """Include prefix-list references in missing policy decision."""
                            include_sub_route_map: bool | None
                            """Include sub-route-map references in missing policy decision."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    action: Literal["deny", "permit", "deny-in-out"] | UndefinedType = Undefined,
                                    include_community_list: bool | None | UndefinedType = Undefined,
                                    include_prefix_list: bool | None | UndefinedType = Undefined,
                                    include_sub_route_map: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DirectionIn.


                                    Subclass of AvdModel.

                                    Args:
                                        action: Missing policy action.
                                        include_community_list: Include community-list references in missing policy decision.
                                        include_prefix_list: Include prefix-list references in missing policy decision.
                                        include_sub_route_map: Include sub-route-map references in missing policy decision.

                                    """

                        class DirectionOut(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "action": {"type": str},
                                "include_community_list": {"type": bool},
                                "include_prefix_list": {"type": bool},
                                "include_sub_route_map": {"type": bool},
                            }
                            action: Literal["deny", "permit", "deny-in-out"]
                            """Missing policy action."""
                            include_community_list: bool | None
                            """Include community-list references in missing policy decision."""
                            include_prefix_list: bool | None
                            """Include prefix-list references in missing policy decision."""
                            include_sub_route_map: bool | None
                            """Include sub-route-map references in missing policy decision."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    action: Literal["deny", "permit", "deny-in-out"] | UndefinedType = Undefined,
                                    include_community_list: bool | None | UndefinedType = Undefined,
                                    include_prefix_list: bool | None | UndefinedType = Undefined,
                                    include_sub_route_map: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DirectionOut.


                                    Subclass of AvdModel.

                                    Args:
                                        action: Missing policy action.
                                        include_community_list: Include community-list references in missing policy decision.
                                        include_prefix_list: Include prefix-list references in missing policy decision.
                                        include_sub_route_map: Include sub-route-map references in missing policy decision.

                                    """

                        _fields: ClassVar[dict] = {"direction_in": {"type": DirectionIn}, "direction_out": {"type": DirectionOut}}
                        direction_in: DirectionIn
                        """
                        Missing policy inbound direction.

                        Subclass of AvdModel.
                        """
                        direction_out: DirectionOut
                        """
                        Missing policy outbound direction.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self, *, direction_in: DirectionIn | UndefinedType = Undefined, direction_out: DirectionOut | UndefinedType = Undefined
                            ) -> None:
                                """
                                MissingPolicy.


                                Subclass of AvdModel.

                                Args:
                                    direction_in:
                                       Missing policy inbound direction.

                                       Subclass of AvdModel.
                                    direction_out:
                                       Missing policy outbound direction.

                                       Subclass of AvdModel.

                                """

                    class LinkBandwidth(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "default": {"type": str}}
                        enabled: bool | None
                        default: str | None
                        """nn.nn(K|M|G) link speed in bits/second."""

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, default: str | None | UndefinedType = Undefined) -> None:
                                """
                                LinkBandwidth.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    default: nn.nn(K|M|G) link speed in bits/second.

                                """

                    class AllowasIn(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "times": {"type": int}}
                        enabled: bool | None
                        times: int | None
                        """Number of local ASNs allowed in a BGP update."""

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, times: int | None | UndefinedType = Undefined) -> None:
                                """
                                AllowasIn.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    times: Number of local ASNs allowed in a BGP update.

                                """

                    class RibInPrePolicyRetain(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "all": {"type": bool}}
                        enabled: bool | None
                        all: bool | None

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, all: bool | None | UndefinedType = Undefined) -> None:
                                """
                                RibInPrePolicyRetain.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    all: all

                                """

                    class SharedSecret(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}, "hash_algorithm": {"type": str}}
                        profile: str
                        """Name of profile defined under `management_security`."""
                        hash_algorithm: Literal["aes-128-cmac-96", "hmac-sha-256", "hmac-sha1-96"]
                        """Note: Algorithm hmac-sha-256 requires EOS version 4.31.1F and above."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | UndefinedType = Undefined,
                                hash_algorithm: Literal["aes-128-cmac-96", "hmac-sha-256", "hmac-sha1-96"] | UndefinedType = Undefined,
                            ) -> None:
                                """
                                SharedSecret.


                                Subclass of AvdModel.

                                Args:
                                    profile: Name of profile defined under `management_security`.
                                    hash_algorithm: Note: Algorithm hmac-sha-256 requires EOS version 4.31.1F and above.

                                """

                    _fields: ClassVar[dict] = {
                        "name": {"type": str},
                        "password": {"type": str},
                        "cleartext_password": {"type": str},
                        "nodes": {"type": Nodes},
                        "address_family_ipv4": {"type": AddressFamilyIpv4},
                        "address_family_ipv6": {"type": AddressFamilyIpv6},
                        "type": {"type": str},
                        "remote_as": {"type": str},
                        "local_as": {"type": str},
                        "description": {"type": str},
                        "shutdown": {"type": bool},
                        "as_path": {"type": AsPath},
                        "remove_private_as": {"type": RemovePrivateAs},
                        "remove_private_as_ingress": {"type": RemovePrivateAsIngress},
                        "next_hop_unchanged": {"type": bool},
                        "update_source": {"type": str},
                        "route_reflector_client": {"type": bool},
                        "bfd": {"type": bool},
                        "bfd_timers": {"type": BfdTimers},
                        "ebgp_multihop": {"type": int},
                        "next_hop_peer": {"type": bool},
                        "next_hop_self": {"type": bool},
                        "passive": {"type": bool},
                        "default_originate": {"type": DefaultOriginate},
                        "send_community": {"type": str},
                        "maximum_routes": {"type": int},
                        "maximum_routes_warning_limit": {"type": str},
                        "maximum_routes_warning_only": {"type": bool},
                        "missing_policy": {"type": MissingPolicy},
                        "link_bandwidth": {"type": LinkBandwidth},
                        "allowas_in": {"type": AllowasIn},
                        "weight": {"type": int},
                        "timers": {"type": str},
                        "rib_in_pre_policy_retain": {"type": RibInPrePolicyRetain},
                        "route_map_in": {"type": str},
                        "route_map_out": {"type": str},
                        "peer_tag_in": {"type": str},
                        "peer_tag_out_discard": {"type": str},
                        "session_tracker": {"type": str},
                        "shared_secret": {"type": SharedSecret},
                        "ttl_maximum_hops": {"type": int},
                    }
                    name: str
                    """BGP peer group name."""
                    password: str | None
                    """
                    Type 7 encrypted password.
                    Takes precedence over `cleartext_password`.
                    """
                    cleartext_password: str | None
                    """
                    BGP peer group cleartext password.
                    To protect the password at rest it is strongly recommended to
                    make use of a vault or similar.
                    """
                    nodes: Nodes
                    """
                    Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                    If not
                    set the peer-group is created on devices which have a bgp_peer mapped to the corresponding
                    peer_group.


                    Subclass of AvdList with `str` items.
                    """
                    address_family_ipv4: AddressFamilyIpv4
                    """Subclass of AvdModel."""
                    address_family_ipv6: AddressFamilyIpv6
                    """Subclass of AvdModel."""
                    type: str | None
                    """Key only used for documentation or validation purposes."""
                    remote_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    """
                    local_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    """
                    description: str | None
                    shutdown: bool | None
                    as_path: AsPath
                    """
                    BGP AS-PATH options.

                    Subclass of AvdModel.
                    """
                    remove_private_as: RemovePrivateAs
                    """
                    Remove private AS numbers in outbound AS path.

                    Subclass of AvdModel.
                    """
                    remove_private_as_ingress: RemovePrivateAsIngress
                    """Subclass of AvdModel."""
                    next_hop_unchanged: bool | None
                    update_source: str | None
                    """IP address or interface name."""
                    route_reflector_client: bool | None
                    bfd: bool | None
                    """Enable BFD."""
                    bfd_timers: BfdTimers
                    """
                    Override default BFD timers. BFD must be enabled with `bfd: true`.

                    Subclass of AvdModel.
                    """
                    ebgp_multihop: int | None
                    """Time-to-live in range of hops."""
                    next_hop_peer: bool | None
                    next_hop_self: bool | None
                    passive: bool | None
                    default_originate: DefaultOriginate
                    """Subclass of AvdModel."""
                    send_community: str | None
                    """'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'."""
                    maximum_routes: int | None
                    """Maximum number of routes (0 means unlimited)."""
                    maximum_routes_warning_limit: str | None
                    """
                    Maximum number of routes after which a warning is issued (0 means never warn) or
                    Percentage of
                    maximum number of routes at which to warn ("<1-100> percent").
                    """
                    maximum_routes_warning_only: bool | None
                    missing_policy: MissingPolicy
                    """
                    Missing policy configuration for all address-families.

                    Subclass of AvdModel.
                    """
                    link_bandwidth: LinkBandwidth
                    """Subclass of AvdModel."""
                    allowas_in: AllowasIn
                    """Subclass of AvdModel."""
                    weight: int | None
                    timers: str | None
                    """BGP Keepalive and Hold Timer values in seconds as string "<0-3600> <0-3600>"."""
                    rib_in_pre_policy_retain: RibInPrePolicyRetain
                    """Subclass of AvdModel."""
                    route_map_in: str | None
                    """Inbound route-map name."""
                    route_map_out: str | None
                    """Outbound route-map name."""
                    peer_tag_in: str | None
                    """Inbound peer tag name."""
                    peer_tag_out_discard: str | None
                    """Outbound discard peer tag name."""
                    session_tracker: str | None
                    shared_secret: SharedSecret
                    """Subclass of AvdModel."""
                    ttl_maximum_hops: int | None
                    """Maximum number of hops."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            name: str | UndefinedType = Undefined,
                            password: str | None | UndefinedType = Undefined,
                            cleartext_password: str | None | UndefinedType = Undefined,
                            nodes: Nodes | UndefinedType = Undefined,
                            address_family_ipv4: AddressFamilyIpv4 | UndefinedType = Undefined,
                            address_family_ipv6: AddressFamilyIpv6 | UndefinedType = Undefined,
                            type: str | None | UndefinedType = Undefined,
                            remote_as: str | None | UndefinedType = Undefined,
                            local_as: str | None | UndefinedType = Undefined,
                            description: str | None | UndefinedType = Undefined,
                            shutdown: bool | None | UndefinedType = Undefined,
                            as_path: AsPath | UndefinedType = Undefined,
                            remove_private_as: RemovePrivateAs | UndefinedType = Undefined,
                            remove_private_as_ingress: RemovePrivateAsIngress | UndefinedType = Undefined,
                            next_hop_unchanged: bool | None | UndefinedType = Undefined,
                            update_source: str | None | UndefinedType = Undefined,
                            route_reflector_client: bool | None | UndefinedType = Undefined,
                            bfd: bool | None | UndefinedType = Undefined,
                            bfd_timers: BfdTimers | UndefinedType = Undefined,
                            ebgp_multihop: int | None | UndefinedType = Undefined,
                            next_hop_peer: bool | None | UndefinedType = Undefined,
                            next_hop_self: bool | None | UndefinedType = Undefined,
                            passive: bool | None | UndefinedType = Undefined,
                            default_originate: DefaultOriginate | UndefinedType = Undefined,
                            send_community: str | None | UndefinedType = Undefined,
                            maximum_routes: int | None | UndefinedType = Undefined,
                            maximum_routes_warning_limit: str | None | UndefinedType = Undefined,
                            maximum_routes_warning_only: bool | None | UndefinedType = Undefined,
                            missing_policy: MissingPolicy | UndefinedType = Undefined,
                            link_bandwidth: LinkBandwidth | UndefinedType = Undefined,
                            allowas_in: AllowasIn | UndefinedType = Undefined,
                            weight: int | None | UndefinedType = Undefined,
                            timers: str | None | UndefinedType = Undefined,
                            rib_in_pre_policy_retain: RibInPrePolicyRetain | UndefinedType = Undefined,
                            route_map_in: str | None | UndefinedType = Undefined,
                            route_map_out: str | None | UndefinedType = Undefined,
                            peer_tag_in: str | None | UndefinedType = Undefined,
                            peer_tag_out_discard: str | None | UndefinedType = Undefined,
                            session_tracker: str | None | UndefinedType = Undefined,
                            shared_secret: SharedSecret | UndefinedType = Undefined,
                            ttl_maximum_hops: int | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            BgpPeerGroupsItem.


                            Subclass of AvdModel.

                            Args:
                                name: BGP peer group name.
                                password:
                                   Type 7 encrypted password.
                                   Takes precedence over `cleartext_password`.
                                cleartext_password:
                                   BGP peer group cleartext password.
                                   To protect the password at rest it is strongly recommended to
                                   make use of a vault or similar.
                                nodes:
                                   Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                                   If not
                                   set the peer-group is created on devices which have a bgp_peer mapped to the corresponding
                                   peer_group.


                                   Subclass of AvdList with `str` items.
                                address_family_ipv4: Subclass of AvdModel.
                                address_family_ipv6: Subclass of AvdModel.
                                type: Key only used for documentation or validation purposes.
                                remote_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                local_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                description: description
                                shutdown: shutdown
                                as_path:
                                   BGP AS-PATH options.

                                   Subclass of AvdModel.
                                remove_private_as:
                                   Remove private AS numbers in outbound AS path.

                                   Subclass of AvdModel.
                                remove_private_as_ingress: Subclass of AvdModel.
                                next_hop_unchanged: next_hop_unchanged
                                update_source: IP address or interface name.
                                route_reflector_client: route_reflector_client
                                bfd: Enable BFD.
                                bfd_timers:
                                   Override default BFD timers. BFD must be enabled with `bfd: true`.

                                   Subclass of AvdModel.
                                ebgp_multihop: Time-to-live in range of hops.
                                next_hop_peer: next_hop_peer
                                next_hop_self: next_hop_self
                                passive: passive
                                default_originate: Subclass of AvdModel.
                                send_community: 'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'.
                                maximum_routes: Maximum number of routes (0 means unlimited).
                                maximum_routes_warning_limit:
                                   Maximum number of routes after which a warning is issued (0 means never warn) or
                                   Percentage of
                                   maximum number of routes at which to warn ("<1-100> percent").
                                maximum_routes_warning_only: maximum_routes_warning_only
                                missing_policy:
                                   Missing policy configuration for all address-families.

                                   Subclass of AvdModel.
                                link_bandwidth: Subclass of AvdModel.
                                allowas_in: Subclass of AvdModel.
                                weight: weight
                                timers: BGP Keepalive and Hold Timer values in seconds as string "<0-3600> <0-3600>".
                                rib_in_pre_policy_retain: Subclass of AvdModel.
                                route_map_in: Inbound route-map name.
                                route_map_out: Outbound route-map name.
                                peer_tag_in: Inbound peer tag name.
                                peer_tag_out_discard: Outbound discard peer tag name.
                                session_tracker: session_tracker
                                shared_secret: Subclass of AvdModel.
                                ttl_maximum_hops: Maximum number of hops.

                            """

                class BgpPeerGroups(AvdIndexedList[str, BgpPeerGroupsItem]):
                    """Subclass of AvdIndexedList with `BgpPeerGroupsItem` items. Primary key is `name` (`str`)."""

                    _primary_key: ClassVar[str] = "name"

                BgpPeerGroups._item_type = BgpPeerGroupsItem

                class EvpnL2Multicast(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {
                        "enabled": {"type": bool},
                        "underlay_l2_multicast_group_ipv4_pool": {"type": str},
                        "underlay_l2_multicast_group_ipv4_pool_offset": {"type": int, "default": 0},
                        "fast_leave": {"type": bool},
                        "always_redistribute_igmp": {"type": bool},
                    }
                    enabled: bool | None
                    underlay_l2_multicast_group_ipv4_pool: str | None
                    """Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address)."""
                    underlay_l2_multicast_group_ipv4_pool_offset: int
                    """Default value: `0`"""
                    fast_leave: bool | None
                    """Enable IGMP snooping fast-leave feature for all SVIs and l2vlans within the Tenant."""
                    always_redistribute_igmp: bool | None
                    """
                    Always configure `redistribute igmp` under BGP for all SVIs within the Tenant if `evpn_l2_multicast`
                    is True.
                    By default `redistribute igmp` is only configured when `evpn_l2_multicast` is True and
                    `evpn_l3_multicast` for the VRF is False.
                    Configuring `redistribute igmp` when both L2 and L3 EVPN
                    Multicast is enabled will take up additional control-plane and data-plane resources,
                    but it is
                    required to support forwarding of TTL=1 multicast traffic within the VLAN.
                    This can be overridden
                    per SVI.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            enabled: bool | None | UndefinedType = Undefined,
                            underlay_l2_multicast_group_ipv4_pool: str | None | UndefinedType = Undefined,
                            underlay_l2_multicast_group_ipv4_pool_offset: int | UndefinedType = Undefined,
                            fast_leave: bool | None | UndefinedType = Undefined,
                            always_redistribute_igmp: bool | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            EvpnL2Multicast.


                            Subclass of AvdModel.

                            Args:
                                enabled: enabled
                                underlay_l2_multicast_group_ipv4_pool: Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                underlay_l2_multicast_group_ipv4_pool_offset: underlay_l2_multicast_group_ipv4_pool_offset
                                fast_leave: Enable IGMP snooping fast-leave feature for all SVIs and l2vlans within the Tenant.
                                always_redistribute_igmp:
                                   Always configure `redistribute igmp` under BGP for all SVIs within the Tenant if `evpn_l2_multicast`
                                   is True.
                                   By default `redistribute igmp` is only configured when `evpn_l2_multicast` is True and
                                   `evpn_l3_multicast` for the VRF is False.
                                   Configuring `redistribute igmp` when both L2 and L3 EVPN
                                   Multicast is enabled will take up additional control-plane and data-plane resources,
                                   but it is
                                   required to support forwarding of TTL=1 multicast traffic within the VLAN.
                                   This can be overridden
                                   per SVI.

                            """

                class VxlanFloodMulticast(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {
                        "enabled": {"type": bool},
                        "underlay_l2_multicast_group_ipv4_pool": {"type": str},
                        "underlay_l2_multicast_group_ipv4_pool_offset": {"type": int, "default": 0},
                    }
                    enabled: bool
                    """Enable Flood group Multicast for all SVIs and l2vlans within Tenant."""
                    underlay_l2_multicast_group_ipv4_pool: str | None
                    """
                    IPv4 Pool to allocate vxlan flood groups from.
                    The VLAN ID - 1 +
                    `underlay_l2_multicast_group_ipv4_pool_offset` is the offset for each group.
                    Comma separated list of
                    prefixes (IPv4_address/Mask) or ranges (IPv4_address-IPv4_address).
                    """
                    underlay_l2_multicast_group_ipv4_pool_offset: int
                    """Default value: `0`"""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            enabled: bool | UndefinedType = Undefined,
                            underlay_l2_multicast_group_ipv4_pool: str | None | UndefinedType = Undefined,
                            underlay_l2_multicast_group_ipv4_pool_offset: int | UndefinedType = Undefined,
                        ) -> None:
                            """
                            VxlanFloodMulticast.


                            Subclass of AvdModel.

                            Args:
                                enabled: Enable Flood group Multicast for all SVIs and l2vlans within Tenant.
                                underlay_l2_multicast_group_ipv4_pool:
                                   IPv4 Pool to allocate vxlan flood groups from.
                                   The VLAN ID - 1 +
                                   `underlay_l2_multicast_group_ipv4_pool_offset` is the offset for each group.
                                   Comma separated list of
                                   prefixes (IPv4_address/Mask) or ranges (IPv4_address-IPv4_address).
                                underlay_l2_multicast_group_ipv4_pool_offset: underlay_l2_multicast_group_ipv4_pool_offset

                            """

                class EvpnL3Multicast(AvdModel):
                    """Subclass of AvdModel."""

                    class EvpnPegItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {"nodes": {"type": Nodes}, "transit": {"type": bool}}
                        nodes: Nodes
                        """
                        A description will be applied to all nodes with RP addresses configured if not set.

                        Subclass of
                        AvdList with `str` items.
                        """
                        transit: bool | None
                        """Enable EVPN PEG transit mode."""

                        if TYPE_CHECKING:

                            def __init__(self, *, nodes: Nodes | UndefinedType = Undefined, transit: bool | None | UndefinedType = Undefined) -> None:
                                """
                                EvpnPegItem.


                                Subclass of AvdModel.

                                Args:
                                    nodes:
                                       A description will be applied to all nodes with RP addresses configured if not set.

                                       Subclass of
                                       AvdList with `str` items.
                                    transit: Enable EVPN PEG transit mode.

                                """

                    class EvpnPeg(AvdList[EvpnPegItem]):
                        """Subclass of AvdList with `EvpnPegItem` items."""

                    EvpnPeg._item_type = EvpnPegItem

                    _fields: ClassVar[dict] = {
                        "enabled": {"type": bool},
                        "evpn_underlay_l3_multicast_group_ipv4_pool": {"type": str},
                        "evpn_underlay_l3_multicast_group_ipv4_pool_offset": {"type": int, "default": 0},
                        "evpn_peg": {"type": EvpnPeg},
                    }
                    enabled: bool | None
                    evpn_underlay_l3_multicast_group_ipv4_pool: str
                    """Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address)."""
                    evpn_underlay_l3_multicast_group_ipv4_pool_offset: int
                    """Default value: `0`"""
                    evpn_peg: EvpnPeg
                    """
                    For each group of nodes, allow configuration of EVPN PEG options.
                    The first group of settings where
                    the device's hostname is present in the 'nodes' list will be used.


                    Subclass of AvdList with
                    `EvpnPegItem` items.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            enabled: bool | None | UndefinedType = Undefined,
                            evpn_underlay_l3_multicast_group_ipv4_pool: str | UndefinedType = Undefined,
                            evpn_underlay_l3_multicast_group_ipv4_pool_offset: int | UndefinedType = Undefined,
                            evpn_peg: EvpnPeg | UndefinedType = Undefined,
                        ) -> None:
                            """
                            EvpnL3Multicast.


                            Subclass of AvdModel.

                            Args:
                                enabled: enabled
                                evpn_underlay_l3_multicast_group_ipv4_pool: Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                evpn_underlay_l3_multicast_group_ipv4_pool_offset: evpn_underlay_l3_multicast_group_ipv4_pool_offset
                                evpn_peg:
                                   For each group of nodes, allow configuration of EVPN PEG options.
                                   The first group of settings where
                                   the device's hostname is present in the 'nodes' list will be used.


                                   Subclass of AvdList with
                                   `EvpnPegItem` items.

                            """

                class PimRpAddressesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Rps(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Rps._item_type = str

                    class Nodes(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Nodes._item_type = str

                    class Groups(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Groups._item_type = str

                    _fields: ClassVar[dict] = {"rps": {"type": Rps}, "nodes": {"type": Nodes}, "groups": {"type": Groups}, "access_list_name": {"type": str}}
                    rps: Rps
                    """
                    List of Rendevouz Points.

                    Subclass of AvdList with `str` items.
                    """
                    nodes: Nodes
                    """
                    Restrict configuration to specific nodes.
                    Configuration Will be applied to all nodes if not set.
                    Subclass of AvdList with `str` items.
                    """
                    groups: Groups
                    """Subclass of AvdList with `str` items."""
                    access_list_name: str | None
                    """
                    List of groups to associate with the RP address set in 'rp'.
                    If access_list_name is set, a standard
                    access-list will be configured matching these groups.
                    Otherwise the groups are configured directly
                    on the RP command.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            rps: Rps | UndefinedType = Undefined,
                            nodes: Nodes | UndefinedType = Undefined,
                            groups: Groups | UndefinedType = Undefined,
                            access_list_name: str | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            PimRpAddressesItem.


                            Subclass of AvdModel.

                            Args:
                                rps:
                                   List of Rendevouz Points.

                                   Subclass of AvdList with `str` items.
                                nodes:
                                   Restrict configuration to specific nodes.
                                   Configuration Will be applied to all nodes if not set.
                                   Subclass of AvdList with `str` items.
                                groups: Subclass of AvdList with `str` items.
                                access_list_name:
                                   List of groups to associate with the RP address set in 'rp'.
                                   If access_list_name is set, a standard
                                   access-list will be configured matching these groups.
                                   Otherwise the groups are configured directly
                                   on the RP command.

                            """

                class PimRpAddresses(AvdList[PimRpAddressesItem]):
                    """Subclass of AvdList with `PimRpAddressesItem` items."""

                PimRpAddresses._item_type = PimRpAddressesItem

                class IgmpSnoopingQuerier(AvdModel):
                    """Subclass of AvdModel."""

                    _fields: ClassVar[dict] = {"enabled": {"type": bool}, "source_address": {"type": str}, "version": {"type": int}}
                    enabled: bool | None
                    """Will be enabled automatically if "evpn_l2_multicast" is enabled."""
                    source_address: str | None
                    """Default IP address of Loopback0."""
                    version: Literal[1, 2, 3] | None
                    """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            enabled: bool | None | UndefinedType = Undefined,
                            source_address: str | None | UndefinedType = Undefined,
                            version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            IgmpSnoopingQuerier.


                            Subclass of AvdModel.

                            Args:
                                enabled: Will be enabled automatically if "evpn_l2_multicast" is enabled.
                                source_address: Default IP address of Loopback0.
                                version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).

                            """

                class VrfsItem(AvdModel):
                    """Subclass of AvdModel."""

                    class AddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    AddressFamilies._item_type = str

                    class IpHelpersItem(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"ip_helper": {"type": str}, "source_interface": {"type": str}, "source_vrf": {"type": str}}
                        ip_helper: str
                        """IPv4 DHCP server IP."""
                        source_interface: str | None
                        """Interface name."""
                        source_vrf: str | None
                        """VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                ip_helper: str | UndefinedType = Undefined,
                                source_interface: str | None | UndefinedType = Undefined,
                                source_vrf: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpHelpersItem.


                                Subclass of AvdModel.

                                Args:
                                    ip_helper: IPv4 DHCP server IP.
                                    source_interface: Interface name.
                                    source_vrf: VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF.

                                """

                    class IpHelpers(AvdIndexedList[str, IpHelpersItem]):
                        """Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is `ip_helper` (`str`)."""

                        _primary_key: ClassVar[str] = "ip_helper"

                    IpHelpers._item_type = IpHelpersItem

                    class VtepDiagnostic(AvdModel):
                        """Subclass of AvdModel."""

                        class LoopbackIpPoolsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"pod": {"type": str}, "ipv4_pool": {"type": str}, "ipv6_pool": {"type": str}}
                            pod: str
                            """POD name."""
                            ipv4_pool: str | None
                            """Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address)."""
                            ipv6_pool: str | None
                            """Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address)."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    pod: str | UndefinedType = Undefined,
                                    ipv4_pool: str | None | UndefinedType = Undefined,
                                    ipv6_pool: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LoopbackIpPoolsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        pod: POD name.
                                        ipv4_pool: Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                        ipv6_pool: Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).

                                    """

                        class LoopbackIpPools(AvdIndexedList[str, LoopbackIpPoolsItem]):
                            """Subclass of AvdIndexedList with `LoopbackIpPoolsItem` items. Primary key is `pod` (`str`)."""

                            _primary_key: ClassVar[str] = "pod"

                        LoopbackIpPools._item_type = LoopbackIpPoolsItem

                        _fields: ClassVar[dict] = {
                            "loopback": {"type": int},
                            "loopback_description": {"type": str},
                            "loopback_ip_range": {"type": str},
                            "loopback_ipv6_range": {"type": str},
                            "loopback_ip_pools": {"type": LoopbackIpPools},
                            "hardware_forwarding": {"type": bool},
                        }
                        loopback: int | None
                        """Loopback interface number, required when vtep_diagnotics defined."""
                        loopback_description: str | None
                        """
                        Provide a custom description or description template to be used on the VRF diagnostic loopback
                        interface.
                        This can be a template using the AVD string formatter syntax:
                        https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                        descriptions-names.html#avd-string-formatter-syntax.
                        The available template fields are:
                          -
                        `interface`: The Loopback interface name.
                          - `vrf`: The VRF name.
                          - `tenant`: The tenant name.
                        The default description is set by `default_vrf_diag_loopback_description`.
                        By default the
                        description is templated from the VRF name.
                        """
                        loopback_ip_range: str | None
                        """
                        IPv4_address/Mask.
                        Loopback IPv4 range, a unique ip is derived from this range and assigned to each
                        l3 leaf based on it's unique id.
                        Loopback is not created unless `loopback_ip_range`,
                        `loopback_ipv6_range` or `loopback_ip_pools` are set.
                        """
                        loopback_ipv6_range: str | None
                        """
                        IPv6_address/Mask.
                        Loopback IPv6 range, a unique IPv6 address is derived from this range and
                        assigned to each L3 leaf based on it's unique ID.
                        Loopback is not created unless
                        `loopback_ip_range`, `loopback_ipv6_range` or `loopback_ip_pools` are set.
                        """
                        loopback_ip_pools: LoopbackIpPools
                        """
                        For inventories with multiple PODs a loopback range can be set per POD to avoid overlaps.
                        `loopback_ip_range` takes precedence for IPv4 and `loopback_ipv6_range` takes precedence for IPV6.
                        Loopback is not created unless `loopback_ip_range`, `loopback_ipv6_range` or `loopback_ip_pools` are
                        set.


                        Subclass of AvdIndexedList with `LoopbackIpPoolsItem` items. Primary key is `pod` (`str`).
                        """
                        hardware_forwarding: bool | None
                        """
                        Enable hardware forwarding for diagnostic loopbacks. This is required for correct forwarding in VRFs
                        without physical interfaces.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                loopback: int | None | UndefinedType = Undefined,
                                loopback_description: str | None | UndefinedType = Undefined,
                                loopback_ip_range: str | None | UndefinedType = Undefined,
                                loopback_ipv6_range: str | None | UndefinedType = Undefined,
                                loopback_ip_pools: LoopbackIpPools | UndefinedType = Undefined,
                                hardware_forwarding: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                VtepDiagnostic.


                                Subclass of AvdModel.

                                Args:
                                    loopback: Loopback interface number, required when vtep_diagnotics defined.
                                    loopback_description:
                                       Provide a custom description or description template to be used on the VRF diagnostic loopback
                                       interface.
                                       This can be a template using the AVD string formatter syntax:
                                       https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                                       descriptions-names.html#avd-string-formatter-syntax.
                                       The available template fields are:
                                         -
                                       `interface`: The Loopback interface name.
                                         - `vrf`: The VRF name.
                                         - `tenant`: The tenant name.
                                       The default description is set by `default_vrf_diag_loopback_description`.
                                       By default the
                                       description is templated from the VRF name.
                                    loopback_ip_range:
                                       IPv4_address/Mask.
                                       Loopback IPv4 range, a unique ip is derived from this range and assigned to each
                                       l3 leaf based on it's unique id.
                                       Loopback is not created unless `loopback_ip_range`,
                                       `loopback_ipv6_range` or `loopback_ip_pools` are set.
                                    loopback_ipv6_range:
                                       IPv6_address/Mask.
                                       Loopback IPv6 range, a unique IPv6 address is derived from this range and
                                       assigned to each L3 leaf based on it's unique ID.
                                       Loopback is not created unless
                                       `loopback_ip_range`, `loopback_ipv6_range` or `loopback_ip_pools` are set.
                                    loopback_ip_pools:
                                       For inventories with multiple PODs a loopback range can be set per POD to avoid overlaps.
                                       `loopback_ip_range` takes precedence for IPv4 and `loopback_ipv6_range` takes precedence for IPV6.
                                       Loopback is not created unless `loopback_ip_range`, `loopback_ipv6_range` or `loopback_ip_pools` are
                                       set.


                                       Subclass of AvdIndexedList with `LoopbackIpPoolsItem` items. Primary key is `pod` (`str`).
                                    hardware_forwarding:
                                       Enable hardware forwarding for diagnostic loopbacks. This is required for correct forwarding in VRFs
                                       without physical interfaces.

                                """

                    class Ospf(AvdModel):
                        """Subclass of AvdModel."""

                        class RedistributeBgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": True}, "route_map": {"type": str}}
                            enabled: bool
                            """Default value: `True`"""
                            route_map: str | None
                            """Route-map name."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, route_map: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    RedistributeBgp.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        route_map: Route-map name.

                                    """

                        class RedistributeConnected(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "route_map": {"type": str}}
                            enabled: bool
                            """Default value: `False`"""
                            route_map: str | None
                            """Route-map name."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, route_map: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    RedistributeConnected.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        route_map: Route-map name.

                                    """

                        class MessageDigestKeysItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "id": {"type": int},
                                "hash_algorithm": {"type": str, "default": "sha512"},
                                "cleartext_key": {"type": str},
                            }
                            id: int
                            hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                            """Default value: `"sha512"`"""
                            cleartext_key: str
                            """
                            Cleartext key for OSPF message-digest authentication
                            To protect the password at rest it is strongly
                            recommended to make use of a vault or similar.
                            Configuration at the interface level under
                            `l3_interfaces`, `l3_port_channels` or `svis` takes precedence.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    id: int | UndefinedType = Undefined,
                                    hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                                    cleartext_key: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MessageDigestKeysItem.


                                    Subclass of AvdModel.

                                    Args:
                                        id: id
                                        hash_algorithm: hash_algorithm
                                        cleartext_key:
                                           Cleartext key for OSPF message-digest authentication
                                           To protect the password at rest it is strongly
                                           recommended to make use of a vault or similar.
                                           Configuration at the interface level under
                                           `l3_interfaces`, `l3_port_channels` or `svis` takes precedence.

                                    """

                        class MessageDigestKeys(AvdIndexedList[int, MessageDigestKeysItem]):
                            """Subclass of AvdIndexedList with `MessageDigestKeysItem` items. Primary key is `id` (`int`)."""

                            _primary_key: ClassVar[str] = "id"

                        MessageDigestKeys._item_type = MessageDigestKeysItem

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "process_id": {"type": int},
                            "router_id": {"type": str, "default": "main_router_id"},
                            "max_lsa": {"type": int},
                            "bfd": {"type": bool, "default": False},
                            "redistribute_bgp": {"type": RedistributeBgp},
                            "redistribute_connected": {"type": RedistributeConnected},
                            "authentication": {"type": str},
                            "cleartext_simple_auth_key": {"type": str},
                            "message_digest_keys": {"type": MessageDigestKeys},
                            "nodes": {"type": Nodes},
                            "structured_config": {"type": EosCliConfigGen.RouterOspf.ProcessIdsItem},
                        }
                        enabled: bool | None
                        process_id: int | None
                        """If not set, "vrf_id" will be used."""
                        router_id: str
                        """
                        Router ID to use for OSPF in this VRF.
                        This can be an IPv4 address, "main_router_id", "none" or
                        "diagnostic_loopback".
                        - "main_router_id" will use the IP address of Loopback0 or the common `router
                        general` Router ID if `use_router_general_for_router_id` is set."
                        - "none" will not configure a OSPF
                        Router ID for this VRF. EOS will use the main OSPF Router ID.
                        - "diagnostic_loopback" will use the
                        IP address of the VRF Diagnostic Loopback interface.

                        Default value: `"main_router_id"`
                        """
                        max_lsa: int | None
                        bfd: bool
                        """Default value: `False`"""
                        redistribute_bgp: RedistributeBgp
                        """Subclass of AvdModel."""
                        redistribute_connected: RedistributeConnected
                        """Subclass of AvdModel."""
                        authentication: Literal["simple", "message-digest"] | None
                        """
                        Configure OSPF authentication for all interfaces under the VRF.
                        Can be overridden at the interface
                        level under `l3_interfaces`, `l3_port_channels` or `svis`.
                        """
                        cleartext_simple_auth_key: str | None
                        """
                        Cleartext password used with simple authentication.
                        To protect the password at rest it is strongly
                        recommended to make use of a vault or similar.
                        Configuration at the interface level under
                        `l3_interfaces`, `l3_port_channels` or `svis` takes precedence.
                        """
                        message_digest_keys: MessageDigestKeys
                        """Subclass of AvdIndexedList with `MessageDigestKeysItem` items. Primary key is `id` (`int`)."""
                        nodes: Nodes
                        """Subclass of AvdList with `str` items."""
                        structured_config: EosCliConfigGen.RouterOspf.ProcessIdsItem
                        """
                        Custom structured config added under router_ospf.process_ids.[process_id=<process_id>] for
                        eos_cli_config_gen.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                process_id: int | None | UndefinedType = Undefined,
                                router_id: str | UndefinedType = Undefined,
                                max_lsa: int | None | UndefinedType = Undefined,
                                bfd: bool | UndefinedType = Undefined,
                                redistribute_bgp: RedistributeBgp | UndefinedType = Undefined,
                                redistribute_connected: RedistributeConnected | UndefinedType = Undefined,
                                authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                                cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                                message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.RouterOspf.ProcessIdsItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ospf.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    process_id: If not set, "vrf_id" will be used.
                                    router_id:
                                       Router ID to use for OSPF in this VRF.
                                       This can be an IPv4 address, "main_router_id", "none" or
                                       "diagnostic_loopback".
                                       - "main_router_id" will use the IP address of Loopback0 or the common `router
                                       general` Router ID if `use_router_general_for_router_id` is set."
                                       - "none" will not configure a OSPF
                                       Router ID for this VRF. EOS will use the main OSPF Router ID.
                                       - "diagnostic_loopback" will use the
                                       IP address of the VRF Diagnostic Loopback interface.
                                    max_lsa: max_lsa
                                    bfd: bfd
                                    redistribute_bgp: Subclass of AvdModel.
                                    redistribute_connected: Subclass of AvdModel.
                                    authentication:
                                       Configure OSPF authentication for all interfaces under the VRF.
                                       Can be overridden at the interface
                                       level under `l3_interfaces`, `l3_port_channels` or `svis`.
                                    cleartext_simple_auth_key:
                                       Cleartext password used with simple authentication.
                                       To protect the password at rest it is strongly
                                       recommended to make use of a vault or similar.
                                       Configuration at the interface level under
                                       `l3_interfaces`, `l3_port_channels` or `svis` takes precedence.
                                    message_digest_keys: Subclass of AvdIndexedList with `MessageDigestKeysItem` items. Primary key is `id` (`int`).
                                    nodes: Subclass of AvdList with `str` items.
                                    structured_config:
                                       Custom structured config added under router_ospf.process_ids.[process_id=<process_id>] for
                                       eos_cli_config_gen.

                                """

                    class EvpnL3Multicast(AvdModel):
                        """Subclass of AvdModel."""

                        class EvpnPegItem(AvdModel):
                            """Subclass of AvdModel."""

                            class Nodes(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Nodes._item_type = str

                            _fields: ClassVar[dict] = {"nodes": {"type": Nodes}, "transit": {"type": bool, "default": False}}
                            nodes: Nodes
                            """
                            Restrict configuration to specific nodes.
                            Will apply to all nodes with RP addresses configured if
                            not set.


                            Subclass of AvdList with `str` items.
                            """
                            transit: bool
                            """
                            Enable EVPN PEG transit mode.

                            Default value: `False`
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, nodes: Nodes | UndefinedType = Undefined, transit: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnPegItem.


                                    Subclass of AvdModel.

                                    Args:
                                        nodes:
                                           Restrict configuration to specific nodes.
                                           Will apply to all nodes with RP addresses configured if
                                           not set.


                                           Subclass of AvdList with `str` items.
                                        transit: Enable EVPN PEG transit mode.

                                    """

                        class EvpnPeg(AvdList[EvpnPegItem]):
                            """Subclass of AvdList with `EvpnPegItem` items."""

                        EvpnPeg._item_type = EvpnPegItem

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "evpn_underlay_l3_multicast_group": {"type": str}, "evpn_peg": {"type": EvpnPeg}}
                        enabled: bool | None
                        evpn_underlay_l3_multicast_group: str | None
                        """
                        IPv4 address of evpn underlay l3 multicast group.
                        To override multicast range set using the formula
                        < l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool > + < vrf_id - 1 > + <
                        l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool_offset >.
                        """
                        evpn_peg: EvpnPeg
                        """
                        For each group of nodes, allow configuration of EVPN PEG features.

                        Subclass of AvdList with
                        `EvpnPegItem` items.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                evpn_underlay_l3_multicast_group: str | None | UndefinedType = Undefined,
                                evpn_peg: EvpnPeg | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnL3Multicast.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_underlay_l3_multicast_group:
                                       IPv4 address of evpn underlay l3 multicast group.
                                       To override multicast range set using the formula
                                       < l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool > + < vrf_id - 1 > + <
                                       l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool_offset >.
                                    evpn_peg:
                                       For each group of nodes, allow configuration of EVPN PEG features.

                                       Subclass of AvdList with
                                       `EvpnPegItem` items.

                                """

                    class PimRpAddressesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Rps(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Rps._item_type = str

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        class Groups(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Groups._item_type = str

                        _fields: ClassVar[dict] = {
                            "rps": {"type": Rps},
                            "nodes": {"type": Nodes},
                            "groups": {"type": Groups},
                            "access_list_name": {"type": str},
                        }
                        rps: Rps
                        """
                        A minimum of one RP must be specified.

                        Subclass of AvdList with `str` items.
                        """
                        nodes: Nodes
                        """
                        Restrict configuration to specific nodes.
                        Configuration Will be applied to all nodes if not set.
                        Subclass of AvdList with `str` items.
                        """
                        groups: Groups
                        """Subclass of AvdList with `str` items."""
                        access_list_name: str | None
                        """
                        List of groups to associate with the RP addresses set in 'rps'.
                        If access_list_name is set, a
                        standard access-list will be configured matching these groups.
                        Otherwise the groups are configured
                        directly on the RP command.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                rps: Rps | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                groups: Groups | UndefinedType = Undefined,
                                access_list_name: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                PimRpAddressesItem.


                                Subclass of AvdModel.

                                Args:
                                    rps:
                                       A minimum of one RP must be specified.

                                       Subclass of AvdList with `str` items.
                                    nodes:
                                       Restrict configuration to specific nodes.
                                       Configuration Will be applied to all nodes if not set.
                                       Subclass of AvdList with `str` items.
                                    groups: Subclass of AvdList with `str` items.
                                    access_list_name:
                                       List of groups to associate with the RP addresses set in 'rps'.
                                       If access_list_name is set, a
                                       standard access-list will be configured matching these groups.
                                       Otherwise the groups are configured
                                       directly on the RP command.

                                """

                    class PimRpAddresses(AvdList[PimRpAddressesItem]):
                        """Subclass of AvdList with `PimRpAddressesItem` items."""

                    PimRpAddresses._item_type = PimRpAddressesItem

                    class SvisItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class NodesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class Tags(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Tags._item_type = str

                            class Ipv6AddressVirtuals(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Ipv6AddressVirtuals._item_type = str

                            class IpAddressVirtualSecondaries(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            IpAddressVirtualSecondaries._item_type = str

                            class IpVirtualRouterAddresses(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            IpVirtualRouterAddresses._item_type = str

                            class Ipv6VirtualRouterAddresses(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Ipv6VirtualRouterAddresses._item_type = str

                            class IpHelpersItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"ip_helper": {"type": str}, "source_interface": {"type": str}, "source_vrf": {"type": str}}
                                ip_helper: str
                                """IPv4 DHCP server IP."""
                                source_interface: str | None
                                """Interface name to originate DHCP relay packets to DHCP server."""
                                source_vrf: str | None
                                """VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        ip_helper: str | UndefinedType = Undefined,
                                        source_interface: str | None | UndefinedType = Undefined,
                                        source_vrf: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        IpHelpersItem.


                                        Subclass of AvdModel.

                                        Args:
                                            ip_helper: IPv4 DHCP server IP.
                                            source_interface: Interface name to originate DHCP relay packets to DHCP server.
                                            source_vrf: VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI.

                                        """

                            class IpHelpers(AvdIndexedList[str, IpHelpersItem]):
                                """Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is `ip_helper` (`str`)."""

                                _primary_key: ClassVar[str] = "ip_helper"

                            IpHelpers._item_type = IpHelpersItem

                            class StaticRoutesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "prefix": {"type": str},
                                    "next_hop": {"type": str},
                                    "track_bfd": {"type": bool},
                                    "distance": {"type": int},
                                    "tag": {"type": int},
                                    "name": {"type": str},
                                    "metric": {"type": int},
                                    "interface": {"type": str},
                                }
                                prefix: str | None
                                next_hop: str | None
                                track_bfd: bool | None
                                """Track next-hop using BFD."""
                                distance: int | None
                                tag: int | None
                                name: str | None
                                """description."""
                                metric: int | None
                                interface: str | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        prefix: str | None | UndefinedType = Undefined,
                                        next_hop: str | None | UndefinedType = Undefined,
                                        track_bfd: bool | None | UndefinedType = Undefined,
                                        distance: int | None | UndefinedType = Undefined,
                                        tag: int | None | UndefinedType = Undefined,
                                        name: str | None | UndefinedType = Undefined,
                                        metric: int | None | UndefinedType = Undefined,
                                        interface: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        StaticRoutesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            prefix: prefix
                                            next_hop: next_hop
                                            track_bfd: Track next-hop using BFD.
                                            distance: distance
                                            tag: tag
                                            name: description.
                                            metric: metric
                                            interface: interface

                                        """

                            class StaticRoutes(AvdList[StaticRoutesItem]):
                                """Subclass of AvdList with `StaticRoutesItem` items."""

                            StaticRoutes._item_type = StaticRoutesItem

                            class Ipv6StaticRoutesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "prefix": {"type": str},
                                    "next_hop": {"type": str},
                                    "track_bfd": {"type": bool},
                                    "distance": {"type": int},
                                    "tag": {"type": int},
                                    "name": {"type": str},
                                    "metric": {"type": int},
                                    "interface": {"type": str},
                                }
                                prefix: str | None
                                next_hop: str | None
                                track_bfd: bool | None
                                """Track next-hop using BFD."""
                                distance: int | None
                                tag: int | None
                                name: str | None
                                """description."""
                                metric: int | None
                                interface: str | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        prefix: str | None | UndefinedType = Undefined,
                                        next_hop: str | None | UndefinedType = Undefined,
                                        track_bfd: bool | None | UndefinedType = Undefined,
                                        distance: int | None | UndefinedType = Undefined,
                                        tag: int | None | UndefinedType = Undefined,
                                        name: str | None | UndefinedType = Undefined,
                                        metric: int | None | UndefinedType = Undefined,
                                        interface: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Ipv6StaticRoutesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            prefix: prefix
                                            next_hop: next_hop
                                            track_bfd: Track next-hop using BFD.
                                            distance: distance
                                            tag: tag
                                            name: description.
                                            metric: metric
                                            interface: interface

                                        """

                            class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
                                """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

                            Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

                            class TrunkGroups(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            TrunkGroups._item_type = str

                            class EvpnL2Multicast(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "always_redistribute_igmp": {"type": bool}}
                                enabled: bool | None
                                always_redistribute_igmp: bool | None
                                """
                                Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                                `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                                By default `redistribute
                                igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                                False.
                                Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                                additional control-plane and data-plane resources,
                                but it is required to support forwarding of TTL=1
                                multicast traffic within the VLAN.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        always_redistribute_igmp: bool | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        EvpnL2Multicast.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            always_redistribute_igmp:
                                               Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                                               `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                                               By default `redistribute
                                               igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                                               False.
                                               Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                                               additional control-plane and data-plane resources,
                                               but it is required to support forwarding of TTL=1
                                               multicast traffic within the VLAN.

                                        """

                            class VxlanFloodMulticast(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "underlay_multicast_group": {"type": str}}
                                enabled: bool | None
                                """
                                Explicitly enable or disable vxlan_flood_multicast to override settings of
                                `<network_services_key>.[].vxlan_flood_multicast`.
                                """
                                underlay_multicast_group: str | None
                                """Specific multicast group to use for this SVI."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        underlay_multicast_group: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        VxlanFloodMulticast.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled:
                                               Explicitly enable or disable vxlan_flood_multicast to override settings of
                                               `<network_services_key>.[].vxlan_flood_multicast`.
                                            underlay_multicast_group: Specific multicast group to use for this SVI.

                                        """

                            class EvpnL3Multicast(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}}
                                enabled: bool | None

                                if TYPE_CHECKING:

                                    def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnL3Multicast.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled

                                        """

                            class IgmpSnoopingQuerier(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "source_address": {"type": str},
                                    "version": {"type": int},
                                    "fast_leave": {"type": bool},
                                }
                                enabled: bool | None
                                """Will be enabled automatically if evpn_l2_multicast is enabled."""
                                source_address: str | None
                                """
                                IPv4_address
                                If not set, IP address of "Loopback0" will be used.
                                """
                                version: Literal[1, 2, 3] | None
                                """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""
                                fast_leave: bool | None
                                """Enable IGMP snooping fast-leave feature."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        source_address: str | None | UndefinedType = Undefined,
                                        version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                                        fast_leave: bool | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        IgmpSnoopingQuerier.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: Will be enabled automatically if evpn_l2_multicast is enabled.
                                            source_address:
                                               IPv4_address
                                               If not set, IP address of "Loopback0" will be used.
                                            version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).
                                            fast_leave: Enable IGMP snooping fast-leave feature.

                                        """

                            class Ospf(AvdModel):
                                """Subclass of AvdModel."""

                                class MessageDigestKeysItem(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "id": {"type": int},
                                        "hash_algorithm": {"type": str, "default": "sha512"},
                                        "key": {"type": str},
                                        "cleartext_key": {"type": str},
                                    }
                                    id: int | None
                                    hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                                    """Default value: `"sha512"`"""
                                    key: str | None
                                    """
                                    Type 7 encrypted key for OSPF message-digest authentication.
                                    Takes precedence over `cleartext_key`.
                                    """
                                    cleartext_key: str | None
                                    """
                                    Cleartext key for OSPF message-digest authentication
                                    To protect the password at rest it is strongly
                                    recommended to make use of a vault or similar.
                                    """

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            id: int | None | UndefinedType = Undefined,
                                            hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                                            key: str | None | UndefinedType = Undefined,
                                            cleartext_key: str | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            MessageDigestKeysItem.


                                            Subclass of AvdModel.

                                            Args:
                                                id: id
                                                hash_algorithm: hash_algorithm
                                                key:
                                                   Type 7 encrypted key for OSPF message-digest authentication.
                                                   Takes precedence over `cleartext_key`.
                                                cleartext_key:
                                                   Cleartext key for OSPF message-digest authentication
                                                   To protect the password at rest it is strongly
                                                   recommended to make use of a vault or similar.

                                            """

                                class MessageDigestKeys(AvdList[MessageDigestKeysItem]):
                                    """Subclass of AvdList with `MessageDigestKeysItem` items."""

                                MessageDigestKeys._item_type = MessageDigestKeysItem

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "point_to_point": {"type": bool, "default": False},
                                    "area": {"type": str, "default": "0.0.0.0"},
                                    "cost": {"type": int},
                                    "authentication": {"type": str},
                                    "simple_auth_key": {"type": str},
                                    "cleartext_simple_auth_key": {"type": str},
                                    "message_digest_keys": {"type": MessageDigestKeys},
                                }
                                enabled: bool | None
                                point_to_point: bool
                                """Default value: `False`"""
                                area: str
                                """
                                OSPF area ID.

                                Default value: `"0.0.0.0"`
                                """
                                cost: int | None
                                """OSPF link cost."""
                                authentication: Literal["simple", "message-digest"] | None
                                simple_auth_key: str | None
                                """
                                Type 7 encrypted key for OSPF simple authentication.
                                Takes precedence over
                                `cleartext_simple_auth_key`
                                """
                                cleartext_simple_auth_key: str | None
                                """
                                Cleartext key for OSPF simple authentication.
                                To protect the password at rest it is strongly
                                recommended to make use of a vault or similar.
                                """
                                message_digest_keys: MessageDigestKeys
                                """Subclass of AvdList with `MessageDigestKeysItem` items."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        point_to_point: bool | UndefinedType = Undefined,
                                        area: str | UndefinedType = Undefined,
                                        cost: int | None | UndefinedType = Undefined,
                                        authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                                        simple_auth_key: str | None | UndefinedType = Undefined,
                                        cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                                        message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Ospf.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            point_to_point: point_to_point
                                            area: OSPF area ID.
                                            cost: OSPF link cost.
                                            authentication: authentication
                                            simple_auth_key:
                                               Type 7 encrypted key for OSPF simple authentication.
                                               Takes precedence over
                                               `cleartext_simple_auth_key`
                                            cleartext_simple_auth_key:
                                               Cleartext key for OSPF simple authentication.
                                               To protect the password at rest it is strongly
                                               recommended to make use of a vault or similar.
                                            message_digest_keys: Subclass of AvdList with `MessageDigestKeysItem` items.

                                        """

                            class Bgp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.RouterBgp.VlansItem}, "raw_eos_cli": {"type": str}}
                                structured_config: EosCliConfigGen.RouterBgp.VlansItem
                                """
                                Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                                This
                                configuration will not be applied to vlan aware bundles.
                                """
                                raw_eos_cli: str | None
                                """EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        structured_config: EosCliConfigGen.RouterBgp.VlansItem | UndefinedType = Undefined,
                                        raw_eos_cli: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Bgp.


                                        Subclass of AvdModel.

                                        Args:
                                            structured_config:
                                               Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                                               This
                                               configuration will not be applied to vlan aware bundles.
                                            raw_eos_cli: EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration.

                                        """

                            _fields: ClassVar[dict] = {
                                "node": {"type": str},
                                "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "name": {"type": str},
                                "enabled": {"type": bool},
                                "description": {"type": str},
                                "arp_gratuitous_accept": {"type": bool},
                                "ip_address": {"type": str},
                                "ipv6_address": {"type": str},
                                "ipv6_enable": {"type": bool},
                                "ip_address_virtual": {"type": str},
                                "ipv6_address_virtuals": {"type": Ipv6AddressVirtuals},
                                "ip_address_virtual_secondaries": {"type": IpAddressVirtualSecondaries},
                                "ip_virtual_router_addresses": {"type": IpVirtualRouterAddresses},
                                "ipv6_virtual_router_addresses": {"type": Ipv6VirtualRouterAddresses},
                                "ipv4_acl_in": {"type": str},
                                "ipv4_acl_out": {"type": str},
                                "ip_helpers": {"type": IpHelpers},
                                "static_routes": {"type": StaticRoutes},
                                "ipv6_static_routes": {"type": Ipv6StaticRoutes},
                                "vni_override": {"type": int},
                                "rt_override": {"type": str},
                                "rd_override": {"type": str},
                                "trunk_groups": {"type": TrunkGroups},
                                "evpn_l2_multicast": {"type": EvpnL2Multicast},
                                "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
                                "evpn_l3_multicast": {"type": EvpnL3Multicast},
                                "igmp_snooping_enabled": {"type": bool},
                                "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
                                "vxlan": {"type": bool, "default": True},
                                "spanning_tree_priority": {"type": int},
                                "mtu": {"type": int},
                                "ospf": {"type": Ospf},
                                "bgp": {"type": Bgp},
                                "raw_eos_cli": {"type": str},
                                "structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                                "evpn_l2_multi_domain": {"type": bool},
                            }
                            node: str
                            """Node inventory hostname."""
                            tags: Tags
                            """
                            Tags leveraged for networks services filtering.
                            Tags are matched against "filter.tags" defined under
                            node type settings.
                            Tags are also matched against the "node_group" name under node type settings.
                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            name: str | None
                            """VLAN name."""
                            enabled: bool | None
                            """Enable or disable interface."""
                            description: str | None
                            """SVI description. By default set to VLAN name."""
                            arp_gratuitous_accept: bool | None
                            """Accept gratuitous ARP."""
                            ip_address: str | None
                            """IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node."""
                            ipv6_address: str | None
                            """IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node."""
                            ipv6_enable: bool | None
                            """Explicitly enable/disable link-local IPv6 addressing."""
                            ip_address_virtual: str | None
                            """
                            IPv4_address/Mask.
                            IPv4 VXLAN Anycast IP address.
                            Conserves IP addresses in VXLAN deployments as it
                            doesn't require unique IP addresses on each node.
                            """
                            ipv6_address_virtuals: Ipv6AddressVirtuals
                            """
                            IPv6 VXLAN Anycast IP addresses.
                            Conserves IPv6 addresses in VXLAN deployments as it doesn't require
                            unique IPv6 addresses on each node.


                            Subclass of AvdList with `str` items.
                            """
                            ip_address_virtual_secondaries: IpAddressVirtualSecondaries
                            """
                            Secondary IPv4 VXLAN Anycast IP addresses.

                            Subclass of AvdList with `str` items.
                            """
                            ip_virtual_router_addresses: IpVirtualRouterAddresses
                            """
                            IPv4 VARP addresses.
                            Requires an IP address to be configured on the SVI.
                            If ip_address_virtual is
                            also set, ip_virtual_router_addresses will take precedence
                            _if_ there is an ip_address configured
                            for the node.


                            Subclass of AvdList with `str` items.
                            """
                            ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses
                            """
                            IPv6 VARP addresses.
                            Requires an IPv6 address to be configured on the SVI.
                            If ipv6_address_virtuals
                            is also set, ipv6_virtual_router_addresses will take precedence
                            _if_ there is an ipv6_address
                            configured for the node.


                            Subclass of AvdList with `str` items.
                            """
                            ipv4_acl_in: str | None
                            """
                            Name of the IPv4 access-list to be assigned in the ingress direction.
                            The access-list must be
                            defined under `ipv4_acls` and supports substitution of the field "interface_ip".
                            """
                            ipv4_acl_out: str | None
                            """
                            Name of the IPv4 Access-list to be assigned in the egress direction.
                            The access-list must be defined
                            under `ipv4_acls` and supports substitution of the field "interface_ip".
                            """
                            ip_helpers: IpHelpers
                            """
                            IP helper for DHCP relay.

                            Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                            `ip_helper` (`str`).
                            """
                            static_routes: StaticRoutes
                            """
                            Static routes to be configured on every device where the SVI is configured.

                            Subclass of AvdList
                            with `StaticRoutesItem` items.
                            """
                            ipv6_static_routes: Ipv6StaticRoutes
                            """
                            IPv6 static routes to be configured on every device where the SVI is configured.

                            Subclass of
                            AvdList with `Ipv6StaticRoutesItem` items.
                            """
                            vni_override: int | None
                            """
                            By default the VNI will be derived from "mac_vrf_vni_base".
                            The vni_override allows us to override
                            this value and statically define it (optional).
                            """
                            rt_override: str | None
                            """
                            By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                            The rt_override allows us
                            to override this value and statically define it.
                            rt_override will default to vni_override if set.
                            rt_override supports two formats:
                              - A single number which will be used in the RT fields instead of
                            mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                              - A full RT string with colon
                            separator which will override the full RT.
                            """
                            rd_override: str | None
                            """
                            By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                            The rt_override allows us
                            to override this value and statically define it.
                            rd_override will default to rt_override or
                            vni_override if set.

                            rd_override supports two formats:
                              - A single number which will be used in
                            the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                            - A full RD string with colon separator which will override the full RD.
                            """
                            trunk_groups: TrunkGroups
                            """Subclass of AvdList with `str` items."""
                            evpn_l2_multicast: EvpnL2Multicast
                            """
                            Explicitly enable or disable evpn_l2_multicast to override setting of
                            `<network_services_key>.[].evpn_l2_multicast.enabled`.
                            When evpn_l2_multicast.enabled is set to true
                            for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
                            overriding those individual settings.
                            Requires `evpn_multicast` to also be set to `true`.


                            Subclass
                            of AvdModel.
                            """
                            vxlan_flood_multicast: VxlanFloodMulticast
                            """Subclass of AvdModel."""
                            evpn_l3_multicast: EvpnL3Multicast
                            """
                            Explicitly enable or disable evpn_l3_multicast to override setting of
                            `<network_services_key>.[].evpn_l3_multicast.enabled` and
                            `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
                            Requires `evpn_multicast` to also be
                            set to `true`.


                            Subclass of AvdModel.
                            """
                            igmp_snooping_enabled: bool | None
                            """Enable or disable IGMP snooping (Enabled by default on EOS)."""
                            igmp_snooping_querier: IgmpSnoopingQuerier
                            """Subclass of AvdModel."""
                            vxlan: bool
                            """
                            Extend this SVI over VXLAN.

                            Default value: `True`
                            """
                            spanning_tree_priority: int | None
                            """
                            Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                            under node type settings.
                            The default priority for rapid-PVST is set under the node type settings
                            with `spanning_tree_priority` (default=32768).
                            """
                            mtu: int | None
                            """Interface MTU."""
                            ospf: Ospf
                            """
                            OSPF interface configuration.

                            Subclass of AvdModel.
                            """
                            bgp: Bgp
                            """Subclass of AvdModel."""
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the VLAN interface in the final EOS configuration."""
                            structured_config: EosCliConfigGen.VlanInterfacesItem
                            """Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen."""
                            evpn_l2_multi_domain: bool | None
                            """
                            Explicitly extend SVI to remote EVPN domains.
                            Overrides
                            `<network_services_key>[].evpn_l2_multi_domain` and
                            `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
                            Not supported in conjunction with EVPN vlan
                            aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
                            or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    node: str | UndefinedType = Undefined,
                                    tags: Tags | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    arp_gratuitous_accept: bool | None | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    ipv6_address: str | None | UndefinedType = Undefined,
                                    ipv6_enable: bool | None | UndefinedType = Undefined,
                                    ip_address_virtual: str | None | UndefinedType = Undefined,
                                    ipv6_address_virtuals: Ipv6AddressVirtuals | UndefinedType = Undefined,
                                    ip_address_virtual_secondaries: IpAddressVirtualSecondaries | UndefinedType = Undefined,
                                    ip_virtual_router_addresses: IpVirtualRouterAddresses | UndefinedType = Undefined,
                                    ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses | UndefinedType = Undefined,
                                    ipv4_acl_in: str | None | UndefinedType = Undefined,
                                    ipv4_acl_out: str | None | UndefinedType = Undefined,
                                    ip_helpers: IpHelpers | UndefinedType = Undefined,
                                    static_routes: StaticRoutes | UndefinedType = Undefined,
                                    ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                                    vni_override: int | None | UndefinedType = Undefined,
                                    rt_override: str | None | UndefinedType = Undefined,
                                    rd_override: str | None | UndefinedType = Undefined,
                                    trunk_groups: TrunkGroups | UndefinedType = Undefined,
                                    evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                                    vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                                    evpn_l3_multicast: EvpnL3Multicast | UndefinedType = Undefined,
                                    igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                                    igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                                    vxlan: bool | UndefinedType = Undefined,
                                    spanning_tree_priority: int | None | UndefinedType = Undefined,
                                    mtu: int | None | UndefinedType = Undefined,
                                    ospf: Ospf | UndefinedType = Undefined,
                                    bgp: Bgp | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                                    evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    NodesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        node: Node inventory hostname.
                                        tags:
                                           Tags leveraged for networks services filtering.
                                           Tags are matched against "filter.tags" defined under
                                           node type settings.
                                           Tags are also matched against the "node_group" name under node type settings.
                                           Subclass of AvdList with `str` items.
                                        name: VLAN name.
                                        enabled: Enable or disable interface.
                                        description: SVI description. By default set to VLAN name.
                                        arp_gratuitous_accept: Accept gratuitous ARP.
                                        ip_address: IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node.
                                        ipv6_address: IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node.
                                        ipv6_enable: Explicitly enable/disable link-local IPv6 addressing.
                                        ip_address_virtual:
                                           IPv4_address/Mask.
                                           IPv4 VXLAN Anycast IP address.
                                           Conserves IP addresses in VXLAN deployments as it
                                           doesn't require unique IP addresses on each node.
                                        ipv6_address_virtuals:
                                           IPv6 VXLAN Anycast IP addresses.
                                           Conserves IPv6 addresses in VXLAN deployments as it doesn't require
                                           unique IPv6 addresses on each node.


                                           Subclass of AvdList with `str` items.
                                        ip_address_virtual_secondaries:
                                           Secondary IPv4 VXLAN Anycast IP addresses.

                                           Subclass of AvdList with `str` items.
                                        ip_virtual_router_addresses:
                                           IPv4 VARP addresses.
                                           Requires an IP address to be configured on the SVI.
                                           If ip_address_virtual is
                                           also set, ip_virtual_router_addresses will take precedence
                                           _if_ there is an ip_address configured
                                           for the node.


                                           Subclass of AvdList with `str` items.
                                        ipv6_virtual_router_addresses:
                                           IPv6 VARP addresses.
                                           Requires an IPv6 address to be configured on the SVI.
                                           If ipv6_address_virtuals
                                           is also set, ipv6_virtual_router_addresses will take precedence
                                           _if_ there is an ipv6_address
                                           configured for the node.


                                           Subclass of AvdList with `str` items.
                                        ipv4_acl_in:
                                           Name of the IPv4 access-list to be assigned in the ingress direction.
                                           The access-list must be
                                           defined under `ipv4_acls` and supports substitution of the field "interface_ip".
                                        ipv4_acl_out:
                                           Name of the IPv4 Access-list to be assigned in the egress direction.
                                           The access-list must be defined
                                           under `ipv4_acls` and supports substitution of the field "interface_ip".
                                        ip_helpers:
                                           IP helper for DHCP relay.

                                           Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                                           `ip_helper` (`str`).
                                        static_routes:
                                           Static routes to be configured on every device where the SVI is configured.

                                           Subclass of AvdList
                                           with `StaticRoutesItem` items.
                                        ipv6_static_routes:
                                           IPv6 static routes to be configured on every device where the SVI is configured.

                                           Subclass of
                                           AvdList with `Ipv6StaticRoutesItem` items.
                                        vni_override:
                                           By default the VNI will be derived from "mac_vrf_vni_base".
                                           The vni_override allows us to override
                                           this value and statically define it (optional).
                                        rt_override:
                                           By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                                           The rt_override allows us
                                           to override this value and statically define it.
                                           rt_override will default to vni_override if set.
                                           rt_override supports two formats:
                                             - A single number which will be used in the RT fields instead of
                                           mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                                             - A full RT string with colon
                                           separator which will override the full RT.
                                        rd_override:
                                           By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                                           The rt_override allows us
                                           to override this value and statically define it.
                                           rd_override will default to rt_override or
                                           vni_override if set.

                                           rd_override supports two formats:
                                             - A single number which will be used in
                                           the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                                           - A full RD string with colon separator which will override the full RD.
                                        trunk_groups: Subclass of AvdList with `str` items.
                                        evpn_l2_multicast:
                                           Explicitly enable or disable evpn_l2_multicast to override setting of
                                           `<network_services_key>.[].evpn_l2_multicast.enabled`.
                                           When evpn_l2_multicast.enabled is set to true
                                           for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
                                           overriding those individual settings.
                                           Requires `evpn_multicast` to also be set to `true`.


                                           Subclass
                                           of AvdModel.
                                        vxlan_flood_multicast: Subclass of AvdModel.
                                        evpn_l3_multicast:
                                           Explicitly enable or disable evpn_l3_multicast to override setting of
                                           `<network_services_key>.[].evpn_l3_multicast.enabled` and
                                           `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
                                           Requires `evpn_multicast` to also be
                                           set to `true`.


                                           Subclass of AvdModel.
                                        igmp_snooping_enabled: Enable or disable IGMP snooping (Enabled by default on EOS).
                                        igmp_snooping_querier: Subclass of AvdModel.
                                        vxlan: Extend this SVI over VXLAN.
                                        spanning_tree_priority:
                                           Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                                           under node type settings.
                                           The default priority for rapid-PVST is set under the node type settings
                                           with `spanning_tree_priority` (default=32768).
                                        mtu: Interface MTU.
                                        ospf:
                                           OSPF interface configuration.

                                           Subclass of AvdModel.
                                        bgp: Subclass of AvdModel.
                                        raw_eos_cli: EOS CLI rendered directly on the VLAN interface in the final EOS configuration.
                                        structured_config: Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                        evpn_l2_multi_domain:
                                           Explicitly extend SVI to remote EVPN domains.
                                           Overrides
                                           `<network_services_key>[].evpn_l2_multi_domain` and
                                           `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
                                           Not supported in conjunction with EVPN vlan
                                           aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
                                           or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.

                                    """

                        class Nodes(AvdIndexedList[str, NodesItem]):
                            """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `node` (`str`)."""

                            _primary_key: ClassVar[str] = "node"

                        Nodes._item_type = NodesItem

                        class Ipv6AddressVirtuals(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Ipv6AddressVirtuals._item_type = str

                        class IpAddressVirtualSecondaries(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        IpAddressVirtualSecondaries._item_type = str

                        class IpVirtualRouterAddresses(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        IpVirtualRouterAddresses._item_type = str

                        class Ipv6VirtualRouterAddresses(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Ipv6VirtualRouterAddresses._item_type = str

                        class IpHelpersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"ip_helper": {"type": str}, "source_interface": {"type": str}, "source_vrf": {"type": str}}
                            ip_helper: str
                            """IPv4 DHCP server IP."""
                            source_interface: str | None
                            """Interface name to originate DHCP relay packets to DHCP server."""
                            source_vrf: str | None
                            """VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    ip_helper: str | UndefinedType = Undefined,
                                    source_interface: str | None | UndefinedType = Undefined,
                                    source_vrf: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    IpHelpersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        ip_helper: IPv4 DHCP server IP.
                                        source_interface: Interface name to originate DHCP relay packets to DHCP server.
                                        source_vrf: VRF to originate DHCP relay packets to DHCP server. If not set, EOS uses the VRF on the SVI.

                                    """

                        class IpHelpers(AvdIndexedList[str, IpHelpersItem]):
                            """Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is `ip_helper` (`str`)."""

                            _primary_key: ClassVar[str] = "ip_helper"

                        IpHelpers._item_type = IpHelpersItem

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "prefix": {"type": str},
                                "next_hop": {"type": str},
                                "track_bfd": {"type": bool},
                                "distance": {"type": int},
                                "tag": {"type": int},
                                "name": {"type": str},
                                "metric": {"type": int},
                                "interface": {"type": str},
                            }
                            prefix: str | None
                            next_hop: str | None
                            track_bfd: bool | None
                            """Track next-hop using BFD."""
                            distance: int | None
                            tag: int | None
                            name: str | None
                            """description."""
                            metric: int | None
                            interface: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    prefix: str | None | UndefinedType = Undefined,
                                    next_hop: str | None | UndefinedType = Undefined,
                                    track_bfd: bool | None | UndefinedType = Undefined,
                                    distance: int | None | UndefinedType = Undefined,
                                    tag: int | None | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    metric: int | None | UndefinedType = Undefined,
                                    interface: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: prefix
                                        next_hop: next_hop
                                        track_bfd: Track next-hop using BFD.
                                        distance: distance
                                        tag: tag
                                        name: description.
                                        metric: metric
                                        interface: interface

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class Ipv6StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "prefix": {"type": str},
                                "next_hop": {"type": str},
                                "track_bfd": {"type": bool},
                                "distance": {"type": int},
                                "tag": {"type": int},
                                "name": {"type": str},
                                "metric": {"type": int},
                                "interface": {"type": str},
                            }
                            prefix: str | None
                            next_hop: str | None
                            track_bfd: bool | None
                            """Track next-hop using BFD."""
                            distance: int | None
                            tag: int | None
                            name: str | None
                            """description."""
                            metric: int | None
                            interface: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    prefix: str | None | UndefinedType = Undefined,
                                    next_hop: str | None | UndefinedType = Undefined,
                                    track_bfd: bool | None | UndefinedType = Undefined,
                                    distance: int | None | UndefinedType = Undefined,
                                    tag: int | None | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    metric: int | None | UndefinedType = Undefined,
                                    interface: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ipv6StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: prefix
                                        next_hop: next_hop
                                        track_bfd: Track next-hop using BFD.
                                        distance: distance
                                        tag: tag
                                        name: description.
                                        metric: metric
                                        interface: interface

                                    """

                        class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
                            """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

                        Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

                        class TrunkGroups(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        TrunkGroups._item_type = str

                        class EvpnL2Multicast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "always_redistribute_igmp": {"type": bool}}
                            enabled: bool | None
                            always_redistribute_igmp: bool | None
                            """
                            Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                            `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                            By default `redistribute
                            igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                            False.
                            Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                            additional control-plane and data-plane resources,
                            but it is required to support forwarding of TTL=1
                            multicast traffic within the VLAN.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, enabled: bool | None | UndefinedType = Undefined, always_redistribute_igmp: bool | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    EvpnL2Multicast.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        always_redistribute_igmp:
                                           Always configure `redistribute igmp` under BGP for the VLAN. Overrides the setting of
                                           `<network_services_key>.[].evpn_l2_multicast.always_redistribute_igmp`.
                                           By default `redistribute
                                           igmp` is only configured when `evpn_l2_multicast` is True and `evpn_l3_multicast` for the VRF is
                                           False.
                                           Configuring `redistribute igmp` when both L2 and L3 EVPN Multicast is enabled will take up
                                           additional control-plane and data-plane resources,
                                           but it is required to support forwarding of TTL=1
                                           multicast traffic within the VLAN.

                                    """

                        class VxlanFloodMulticast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "underlay_multicast_group": {"type": str}}
                            enabled: bool | None
                            """
                            Explicitly enable or disable vxlan_flood_multicast to override settings of
                            `<network_services_key>.[].vxlan_flood_multicast`.
                            """
                            underlay_multicast_group: str | None
                            """Specific multicast group to use for this SVI."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, enabled: bool | None | UndefinedType = Undefined, underlay_multicast_group: str | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    VxlanFloodMulticast.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           Explicitly enable or disable vxlan_flood_multicast to override settings of
                                           `<network_services_key>.[].vxlan_flood_multicast`.
                                        underlay_multicast_group: Specific multicast group to use for this SVI.

                                    """

                        class EvpnL3Multicast(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}}
                            enabled: bool | None

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3Multicast.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class IgmpSnoopingQuerier(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "source_address": {"type": str},
                                "version": {"type": int},
                                "fast_leave": {"type": bool},
                            }
                            enabled: bool | None
                            """Will be enabled automatically if evpn_l2_multicast is enabled."""
                            source_address: str | None
                            """
                            IPv4_address
                            If not set, IP address of "Loopback0" will be used.
                            """
                            version: Literal[1, 2, 3] | None
                            """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""
                            fast_leave: bool | None
                            """Enable IGMP snooping fast-leave feature."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    source_address: str | None | UndefinedType = Undefined,
                                    version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                                    fast_leave: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    IgmpSnoopingQuerier.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Will be enabled automatically if evpn_l2_multicast is enabled.
                                        source_address:
                                           IPv4_address
                                           If not set, IP address of "Loopback0" will be used.
                                        version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).
                                        fast_leave: Enable IGMP snooping fast-leave feature.

                                    """

                        class Ospf(AvdModel):
                            """Subclass of AvdModel."""

                            class MessageDigestKeysItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "id": {"type": int},
                                    "hash_algorithm": {"type": str, "default": "sha512"},
                                    "key": {"type": str},
                                    "cleartext_key": {"type": str},
                                }
                                id: int | None
                                hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                                """Default value: `"sha512"`"""
                                key: str | None
                                """
                                Type 7 encrypted key for OSPF message-digest authentication.
                                Takes precedence over `cleartext_key`.
                                """
                                cleartext_key: str | None
                                """
                                Cleartext key for OSPF message-digest authentication
                                To protect the password at rest it is strongly
                                recommended to make use of a vault or similar.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        id: int | None | UndefinedType = Undefined,
                                        hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                                        key: str | None | UndefinedType = Undefined,
                                        cleartext_key: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        MessageDigestKeysItem.


                                        Subclass of AvdModel.

                                        Args:
                                            id: id
                                            hash_algorithm: hash_algorithm
                                            key:
                                               Type 7 encrypted key for OSPF message-digest authentication.
                                               Takes precedence over `cleartext_key`.
                                            cleartext_key:
                                               Cleartext key for OSPF message-digest authentication
                                               To protect the password at rest it is strongly
                                               recommended to make use of a vault or similar.

                                        """

                            class MessageDigestKeys(AvdList[MessageDigestKeysItem]):
                                """Subclass of AvdList with `MessageDigestKeysItem` items."""

                            MessageDigestKeys._item_type = MessageDigestKeysItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "point_to_point": {"type": bool, "default": False},
                                "area": {"type": str, "default": "0.0.0.0"},
                                "cost": {"type": int},
                                "authentication": {"type": str},
                                "simple_auth_key": {"type": str},
                                "cleartext_simple_auth_key": {"type": str},
                                "message_digest_keys": {"type": MessageDigestKeys},
                            }
                            enabled: bool | None
                            point_to_point: bool
                            """Default value: `False`"""
                            area: str
                            """
                            OSPF area ID.

                            Default value: `"0.0.0.0"`
                            """
                            cost: int | None
                            """OSPF link cost."""
                            authentication: Literal["simple", "message-digest"] | None
                            simple_auth_key: str | None
                            """
                            Type 7 encrypted key for OSPF simple authentication.
                            Takes precedence over
                            `cleartext_simple_auth_key`
                            """
                            cleartext_simple_auth_key: str | None
                            """
                            Cleartext key for OSPF simple authentication.
                            To protect the password at rest it is strongly
                            recommended to make use of a vault or similar.
                            """
                            message_digest_keys: MessageDigestKeys
                            """Subclass of AvdList with `MessageDigestKeysItem` items."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    point_to_point: bool | UndefinedType = Undefined,
                                    area: str | UndefinedType = Undefined,
                                    cost: int | None | UndefinedType = Undefined,
                                    authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                                    simple_auth_key: str | None | UndefinedType = Undefined,
                                    cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                                    message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ospf.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        point_to_point: point_to_point
                                        area: OSPF area ID.
                                        cost: OSPF link cost.
                                        authentication: authentication
                                        simple_auth_key:
                                           Type 7 encrypted key for OSPF simple authentication.
                                           Takes precedence over
                                           `cleartext_simple_auth_key`
                                        cleartext_simple_auth_key:
                                           Cleartext key for OSPF simple authentication.
                                           To protect the password at rest it is strongly
                                           recommended to make use of a vault or similar.
                                        message_digest_keys: Subclass of AvdList with `MessageDigestKeysItem` items.

                                    """

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.RouterBgp.VlansItem}, "raw_eos_cli": {"type": str}}
                            structured_config: EosCliConfigGen.RouterBgp.VlansItem
                            """
                            Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                            This
                            configuration will not be applied to vlan aware bundles.
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    structured_config: EosCliConfigGen.RouterBgp.VlansItem | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        structured_config:
                                           Structured configuration and EOS CLI commands rendered on router_bgp.vlans.[id=<vlan>].
                                           This
                                           configuration will not be applied to vlan aware bundles.
                                        raw_eos_cli: EOS CLI rendered directly on the Router BGP, VLAN definition in the final EOS configuration.

                                    """

                        _fields: ClassVar[dict] = {
                            "id": {"type": int},
                            "name": {"type": str},
                            "address_locking": {"type": EosCliConfigGen.VlansItem.AddressLocking.AddressFamily},
                            "profile": {"type": str},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "evpn_vlan_bundle": {"type": str},
                            "nodes": {"type": Nodes},
                            "enabled": {"type": bool},
                            "description": {"type": str},
                            "arp_gratuitous_accept": {"type": bool},
                            "ip_address": {"type": str},
                            "ipv6_address": {"type": str},
                            "ipv6_enable": {"type": bool},
                            "ip_address_virtual": {"type": str},
                            "ipv6_address_virtuals": {"type": Ipv6AddressVirtuals},
                            "ip_address_virtual_secondaries": {"type": IpAddressVirtualSecondaries},
                            "ip_virtual_router_addresses": {"type": IpVirtualRouterAddresses},
                            "ipv6_virtual_router_addresses": {"type": Ipv6VirtualRouterAddresses},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "ip_helpers": {"type": IpHelpers},
                            "static_routes": {"type": StaticRoutes},
                            "ipv6_static_routes": {"type": Ipv6StaticRoutes},
                            "vni_override": {"type": int},
                            "rt_override": {"type": str},
                            "rd_override": {"type": str},
                            "trunk_groups": {"type": TrunkGroups},
                            "evpn_l2_multicast": {"type": EvpnL2Multicast},
                            "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
                            "evpn_l3_multicast": {"type": EvpnL3Multicast},
                            "igmp_snooping_enabled": {"type": bool},
                            "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
                            "vxlan": {"type": bool, "default": True},
                            "spanning_tree_priority": {"type": int},
                            "mtu": {"type": int},
                            "ospf": {"type": Ospf},
                            "bgp": {"type": Bgp},
                            "raw_eos_cli": {"type": str},
                            "structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                            "evpn_l2_multi_domain": {"type": bool},
                        }
                        id: int
                        """SVI interface id and VLAN id."""
                        name: str
                        """VLAN name."""
                        address_locking: EosCliConfigGen.VlansItem.AddressLocking.AddressFamily
                        """
                        To configure `address_locking.ipv4/v6`, you must define either
                        `address_locking_settings.dhcp_servers_ipv4` or
                        `address_locking_settings.locked_address.ipv4/v6_enforcement_disabled`.
                        """
                        profile: str | None
                        """
                        SVI profile name to apply.
                        SVI can refer to one svi_profile which again can refer to another
                        svi_profile to inherit settings in up to two levels (svi -> svi_profile -> svi_parent_profile).
                        """
                        tags: Tags
                        """
                        Tags leveraged for networks services filtering.
                        Tags are matched against "filter.tags" defined under
                        node type settings.
                        Tags are also matched against the "node_group" name under node type settings.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        evpn_vlan_bundle: str | None
                        """
                        Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                        This setting overrides
                        "evpn_vlan_bundle" set at tenant level.
                        The common option "evpn_vlan_aware_bundles" is disregarded
                        for this option.
                        """
                        nodes: Nodes
                        """
                        Define node specific configuration, such as unique IP addresses.
                        Any keys set here will be merged
                        onto the SVI config, except `structured_config` keys which will replace the `structured_config` set
                        on SVI level.


                        Subclass of AvdIndexedList with `NodesItem` items. Primary key is `node` (`str`).
                        """
                        enabled: bool | None
                        """Enable or disable interface."""
                        description: str | None
                        """SVI description. By default set to VLAN name."""
                        arp_gratuitous_accept: bool | None
                        """Accept gratuitous ARP."""
                        ip_address: str | None
                        """IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node."""
                        ipv6_address: str | None
                        """IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node."""
                        ipv6_enable: bool | None
                        """Explicitly enable/disable link-local IPv6 addressing."""
                        ip_address_virtual: str | None
                        """
                        IPv4_address/Mask.
                        IPv4 VXLAN Anycast IP address.
                        Conserves IP addresses in VXLAN deployments as it
                        doesn't require unique IP addresses on each node.
                        """
                        ipv6_address_virtuals: Ipv6AddressVirtuals
                        """
                        IPv6 VXLAN Anycast IP addresses.
                        Conserves IPv6 addresses in VXLAN deployments as it doesn't require
                        unique IPv6 addresses on each node.


                        Subclass of AvdList with `str` items.
                        """
                        ip_address_virtual_secondaries: IpAddressVirtualSecondaries
                        """
                        Secondary IPv4 VXLAN Anycast IP addresses.

                        Subclass of AvdList with `str` items.
                        """
                        ip_virtual_router_addresses: IpVirtualRouterAddresses
                        """
                        IPv4 VARP addresses.
                        Requires an IP address to be configured on the SVI.
                        If ip_address_virtual is
                        also set, ip_virtual_router_addresses will take precedence
                        _if_ there is an ip_address configured
                        for the node.


                        Subclass of AvdList with `str` items.
                        """
                        ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses
                        """
                        IPv6 VARP addresses.
                        Requires an IPv6 address to be configured on the SVI.
                        If ipv6_address_virtuals
                        is also set, ipv6_virtual_router_addresses will take precedence
                        _if_ there is an ipv6_address
                        configured for the node.


                        Subclass of AvdList with `str` items.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports substitution of the field "interface_ip".
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports substitution of the field "interface_ip".
                        """
                        ip_helpers: IpHelpers
                        """
                        IP helper for DHCP relay.

                        Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                        `ip_helper` (`str`).
                        """
                        static_routes: StaticRoutes
                        """
                        Static routes to be configured on every device where the SVI is configured.

                        Subclass of AvdList
                        with `StaticRoutesItem` items.
                        """
                        ipv6_static_routes: Ipv6StaticRoutes
                        """
                        IPv6 static routes to be configured on every device where the SVI is configured.

                        Subclass of
                        AvdList with `Ipv6StaticRoutesItem` items.
                        """
                        vni_override: int | None
                        """
                        By default the VNI will be derived from "mac_vrf_vni_base".
                        The vni_override allows us to override
                        this value and statically define it (optional).
                        """
                        rt_override: str | None
                        """
                        By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                        The rt_override allows us
                        to override this value and statically define it.
                        rt_override will default to vni_override if set.
                        rt_override supports two formats:
                          - A single number which will be used in the RT fields instead of
                        mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                          - A full RT string with colon
                        separator which will override the full RT.
                        """
                        rd_override: str | None
                        """
                        By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                        The rt_override allows us
                        to override this value and statically define it.
                        rd_override will default to rt_override or
                        vni_override if set.

                        rd_override supports two formats:
                          - A single number which will be used in
                        the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                        - A full RD string with colon separator which will override the full RD.
                        """
                        trunk_groups: TrunkGroups
                        """Subclass of AvdList with `str` items."""
                        evpn_l2_multicast: EvpnL2Multicast
                        """
                        Explicitly enable or disable evpn_l2_multicast to override setting of
                        `<network_services_key>.[].evpn_l2_multicast.enabled`.
                        When evpn_l2_multicast.enabled is set to true
                        for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
                        overriding those individual settings.
                        Requires `evpn_multicast` to also be set to `true`.


                        Subclass
                        of AvdModel.
                        """
                        vxlan_flood_multicast: VxlanFloodMulticast
                        """Subclass of AvdModel."""
                        evpn_l3_multicast: EvpnL3Multicast
                        """
                        Explicitly enable or disable evpn_l3_multicast to override setting of
                        `<network_services_key>.[].evpn_l3_multicast.enabled` and
                        `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
                        Requires `evpn_multicast` to also be
                        set to `true`.


                        Subclass of AvdModel.
                        """
                        igmp_snooping_enabled: bool | None
                        """Enable or disable IGMP snooping (Enabled by default on EOS)."""
                        igmp_snooping_querier: IgmpSnoopingQuerier
                        """Subclass of AvdModel."""
                        vxlan: bool
                        """
                        Extend this SVI over VXLAN.

                        Default value: `True`
                        """
                        spanning_tree_priority: int | None
                        """
                        Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                        under node type settings.
                        The default priority for rapid-PVST is set under the node type settings
                        with `spanning_tree_priority` (default=32768).
                        """
                        mtu: int | None
                        """Interface MTU."""
                        ospf: Ospf
                        """
                        OSPF interface configuration.

                        Subclass of AvdModel.
                        """
                        bgp: Bgp
                        """Subclass of AvdModel."""
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the VLAN interface in the final EOS configuration."""
                        structured_config: EosCliConfigGen.VlanInterfacesItem
                        """Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen."""
                        evpn_l2_multi_domain: bool | None
                        """
                        Explicitly extend SVI to remote EVPN domains.
                        Overrides
                        `<network_services_key>[].evpn_l2_multi_domain` and
                        `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
                        Not supported in conjunction with EVPN vlan
                        aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
                        or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                id: int | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                address_locking: EosCliConfigGen.VlansItem.AddressLocking.AddressFamily | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                evpn_vlan_bundle: str | None | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                enabled: bool | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                arp_gratuitous_accept: bool | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                ipv6_address: str | None | UndefinedType = Undefined,
                                ipv6_enable: bool | None | UndefinedType = Undefined,
                                ip_address_virtual: str | None | UndefinedType = Undefined,
                                ipv6_address_virtuals: Ipv6AddressVirtuals | UndefinedType = Undefined,
                                ip_address_virtual_secondaries: IpAddressVirtualSecondaries | UndefinedType = Undefined,
                                ip_virtual_router_addresses: IpVirtualRouterAddresses | UndefinedType = Undefined,
                                ipv6_virtual_router_addresses: Ipv6VirtualRouterAddresses | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                ip_helpers: IpHelpers | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                                vni_override: int | None | UndefinedType = Undefined,
                                rt_override: str | None | UndefinedType = Undefined,
                                rd_override: str | None | UndefinedType = Undefined,
                                trunk_groups: TrunkGroups | UndefinedType = Undefined,
                                evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                                vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                                evpn_l3_multicast: EvpnL3Multicast | UndefinedType = Undefined,
                                igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                                igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                                vxlan: bool | UndefinedType = Undefined,
                                spanning_tree_priority: int | None | UndefinedType = Undefined,
                                mtu: int | None | UndefinedType = Undefined,
                                ospf: Ospf | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                                evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                SvisItem.


                                Subclass of AvdModel.

                                Args:
                                    id: SVI interface id and VLAN id.
                                    name: VLAN name.
                                    address_locking:
                                       To configure `address_locking.ipv4/v6`, you must define either
                                       `address_locking_settings.dhcp_servers_ipv4` or
                                       `address_locking_settings.locked_address.ipv4/v6_enforcement_disabled`.
                                    profile:
                                       SVI profile name to apply.
                                       SVI can refer to one svi_profile which again can refer to another
                                       svi_profile to inherit settings in up to two levels (svi -> svi_profile -> svi_parent_profile).
                                    tags:
                                       Tags leveraged for networks services filtering.
                                       Tags are matched against "filter.tags" defined under
                                       node type settings.
                                       Tags are also matched against the "node_group" name under node type settings.
                                       Subclass of AvdList with `str` items.
                                    evpn_vlan_bundle:
                                       Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                                       This setting overrides
                                       "evpn_vlan_bundle" set at tenant level.
                                       The common option "evpn_vlan_aware_bundles" is disregarded
                                       for this option.
                                    nodes:
                                       Define node specific configuration, such as unique IP addresses.
                                       Any keys set here will be merged
                                       onto the SVI config, except `structured_config` keys which will replace the `structured_config` set
                                       on SVI level.


                                       Subclass of AvdIndexedList with `NodesItem` items. Primary key is `node` (`str`).
                                    enabled: Enable or disable interface.
                                    description: SVI description. By default set to VLAN name.
                                    arp_gratuitous_accept: Accept gratuitous ARP.
                                    ip_address: IPv4_address/Mask. Usually set under "nodes" to have unique IPv4 addresses per node.
                                    ipv6_address: IPv6_address/Mask. Usually set under "nodes" to have unique IPv6 addresses per node.
                                    ipv6_enable: Explicitly enable/disable link-local IPv6 addressing.
                                    ip_address_virtual:
                                       IPv4_address/Mask.
                                       IPv4 VXLAN Anycast IP address.
                                       Conserves IP addresses in VXLAN deployments as it
                                       doesn't require unique IP addresses on each node.
                                    ipv6_address_virtuals:
                                       IPv6 VXLAN Anycast IP addresses.
                                       Conserves IPv6 addresses in VXLAN deployments as it doesn't require
                                       unique IPv6 addresses on each node.


                                       Subclass of AvdList with `str` items.
                                    ip_address_virtual_secondaries:
                                       Secondary IPv4 VXLAN Anycast IP addresses.

                                       Subclass of AvdList with `str` items.
                                    ip_virtual_router_addresses:
                                       IPv4 VARP addresses.
                                       Requires an IP address to be configured on the SVI.
                                       If ip_address_virtual is
                                       also set, ip_virtual_router_addresses will take precedence
                                       _if_ there is an ip_address configured
                                       for the node.


                                       Subclass of AvdList with `str` items.
                                    ipv6_virtual_router_addresses:
                                       IPv6 VARP addresses.
                                       Requires an IPv6 address to be configured on the SVI.
                                       If ipv6_address_virtuals
                                       is also set, ipv6_virtual_router_addresses will take precedence
                                       _if_ there is an ipv6_address
                                       configured for the node.


                                       Subclass of AvdList with `str` items.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports substitution of the field "interface_ip".
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports substitution of the field "interface_ip".
                                    ip_helpers:
                                       IP helper for DHCP relay.

                                       Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                                       `ip_helper` (`str`).
                                    static_routes:
                                       Static routes to be configured on every device where the SVI is configured.

                                       Subclass of AvdList
                                       with `StaticRoutesItem` items.
                                    ipv6_static_routes:
                                       IPv6 static routes to be configured on every device where the SVI is configured.

                                       Subclass of
                                       AvdList with `Ipv6StaticRoutesItem` items.
                                    vni_override:
                                       By default the VNI will be derived from "mac_vrf_vni_base".
                                       The vni_override allows us to override
                                       this value and statically define it (optional).
                                    rt_override:
                                       By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                                       The rt_override allows us
                                       to override this value and statically define it.
                                       rt_override will default to vni_override if set.
                                       rt_override supports two formats:
                                         - A single number which will be used in the RT fields instead of
                                       mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                                         - A full RT string with colon
                                       separator which will override the full RT.
                                    rd_override:
                                       By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                                       The rt_override allows us
                                       to override this value and statically define it.
                                       rd_override will default to rt_override or
                                       vni_override if set.

                                       rd_override supports two formats:
                                         - A single number which will be used in
                                       the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                                       - A full RD string with colon separator which will override the full RD.
                                    trunk_groups: Subclass of AvdList with `str` items.
                                    evpn_l2_multicast:
                                       Explicitly enable or disable evpn_l2_multicast to override setting of
                                       `<network_services_key>.[].evpn_l2_multicast.enabled`.
                                       When evpn_l2_multicast.enabled is set to true
                                       for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled,
                                       overriding those individual settings.
                                       Requires `evpn_multicast` to also be set to `true`.


                                       Subclass
                                       of AvdModel.
                                    vxlan_flood_multicast: Subclass of AvdModel.
                                    evpn_l3_multicast:
                                       Explicitly enable or disable evpn_l3_multicast to override setting of
                                       `<network_services_key>.[].evpn_l3_multicast.enabled` and
                                       `<network_services_key>.[].vrfs.[].evpn_l3_multicast.enabled`.
                                       Requires `evpn_multicast` to also be
                                       set to `true`.


                                       Subclass of AvdModel.
                                    igmp_snooping_enabled: Enable or disable IGMP snooping (Enabled by default on EOS).
                                    igmp_snooping_querier: Subclass of AvdModel.
                                    vxlan: Extend this SVI over VXLAN.
                                    spanning_tree_priority:
                                       Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                                       under node type settings.
                                       The default priority for rapid-PVST is set under the node type settings
                                       with `spanning_tree_priority` (default=32768).
                                    mtu: Interface MTU.
                                    ospf:
                                       OSPF interface configuration.

                                       Subclass of AvdModel.
                                    bgp: Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the VLAN interface in the final EOS configuration.
                                    structured_config: Custom structured config added under vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                    evpn_l2_multi_domain:
                                       Explicitly extend SVI to remote EVPN domains.
                                       Overrides
                                       `<network_services_key>[].evpn_l2_multi_domain` and
                                       `<network_services_key>[].vrfs[].evpn_l2_multi_domain`.
                                       Not supported in conjunction with EVPN vlan
                                       aware bundles. i.e. `evpn_vlan_aware_bundles: true` or `<network_services_key>[].evpn_vlan_bundle`
                                       or `<network_services_key>[].vrfs[].svis[].evpn_vlan_bundle`.

                                """

                    class Svis(AvdList[SvisItem]):
                        """Subclass of AvdList with `SvisItem` items."""

                    Svis._item_type = SvisItem

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Interfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Interfaces._item_type = str

                        class EncapsulationDot1qVlan(AvdList[int]):
                            """Subclass of AvdList with `int` items."""

                        EncapsulationDot1qVlan._item_type = int

                        class IpAddresses(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        IpAddresses._item_type = str

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "prefix": {"type": str},
                                "next_hop": {"type": str},
                                "track_bfd": {"type": bool},
                                "distance": {"type": int},
                                "tag": {"type": int},
                                "name": {"type": str},
                                "metric": {"type": int},
                                "interface": {"type": str},
                            }
                            prefix: str | None
                            next_hop: str | None
                            track_bfd: bool | None
                            """Track next-hop using BFD."""
                            distance: int | None
                            tag: int | None
                            name: str | None
                            """description."""
                            metric: int | None
                            interface: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    prefix: str | None | UndefinedType = Undefined,
                                    next_hop: str | None | UndefinedType = Undefined,
                                    track_bfd: bool | None | UndefinedType = Undefined,
                                    distance: int | None | UndefinedType = Undefined,
                                    tag: int | None | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    metric: int | None | UndefinedType = Undefined,
                                    interface: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: prefix
                                        next_hop: next_hop
                                        track_bfd: Track next-hop using BFD.
                                        distance: distance
                                        tag: tag
                                        name: description.
                                        metric: metric
                                        interface: interface

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class Ipv6StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "prefix": {"type": str},
                                "next_hop": {"type": str},
                                "track_bfd": {"type": bool},
                                "distance": {"type": int},
                                "tag": {"type": int},
                                "name": {"type": str},
                                "metric": {"type": int},
                                "interface": {"type": str},
                            }
                            prefix: str | None
                            next_hop: str | None
                            track_bfd: bool | None
                            """Track next-hop using BFD."""
                            distance: int | None
                            tag: int | None
                            name: str | None
                            """description."""
                            metric: int | None
                            interface: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    prefix: str | None | UndefinedType = Undefined,
                                    next_hop: str | None | UndefinedType = Undefined,
                                    track_bfd: bool | None | UndefinedType = Undefined,
                                    distance: int | None | UndefinedType = Undefined,
                                    tag: int | None | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    metric: int | None | UndefinedType = Undefined,
                                    interface: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ipv6StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: prefix
                                        next_hop: next_hop
                                        track_bfd: Track next-hop using BFD.
                                        distance: distance
                                        tag: tag
                                        name: description.
                                        metric: metric
                                        interface: interface

                                    """

                        class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
                            """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

                        Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        class Descriptions(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Descriptions._item_type = str

                        class Ospf(AvdModel):
                            """Subclass of AvdModel."""

                            class MessageDigestKeysItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "id": {"type": int},
                                    "hash_algorithm": {"type": str, "default": "sha512"},
                                    "key": {"type": str},
                                    "cleartext_key": {"type": str},
                                }
                                id: int | None
                                hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                                """Default value: `"sha512"`"""
                                key: str | None
                                """
                                Type 7 encrypted key for OSPF message-digest authentication.
                                Takes precedence over `cleartext_key`
                                NOTE: The l3_interfaces.interfaces list must not be more than 1 interface or they must all be the
                                same
                                (e.g. [Ethernet7, Ethernet7]) as the type7 password depends on the interface.
                                """
                                cleartext_key: str | None
                                """
                                Cleartext key for OSPF message-digest authentication
                                To protect the password at rest it is strongly
                                recommended to make use of a vault or similar.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        id: int | None | UndefinedType = Undefined,
                                        hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                                        key: str | None | UndefinedType = Undefined,
                                        cleartext_key: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        MessageDigestKeysItem.


                                        Subclass of AvdModel.

                                        Args:
                                            id: id
                                            hash_algorithm: hash_algorithm
                                            key:
                                               Type 7 encrypted key for OSPF message-digest authentication.
                                               Takes precedence over `cleartext_key`
                                               NOTE: The l3_interfaces.interfaces list must not be more than 1 interface or they must all be the
                                               same
                                               (e.g. [Ethernet7, Ethernet7]) as the type7 password depends on the interface.
                                            cleartext_key:
                                               Cleartext key for OSPF message-digest authentication
                                               To protect the password at rest it is strongly
                                               recommended to make use of a vault or similar.

                                        """

                            class MessageDigestKeys(AvdList[MessageDigestKeysItem]):
                                """Subclass of AvdList with `MessageDigestKeysItem` items."""

                            MessageDigestKeys._item_type = MessageDigestKeysItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "point_to_point": {"type": bool, "default": False},
                                "area": {"type": str, "default": "0.0.0.0"},
                                "cost": {"type": int},
                                "authentication": {"type": str},
                                "simple_auth_key": {"type": str},
                                "cleartext_simple_auth_key": {"type": str},
                                "message_digest_keys": {"type": MessageDigestKeys},
                            }
                            enabled: bool | None
                            point_to_point: bool
                            """Default value: `False`"""
                            area: str
                            """
                            OSPF area ID.

                            Default value: `"0.0.0.0"`
                            """
                            cost: int | None
                            """OSPF link cost."""
                            authentication: Literal["simple", "message-digest"] | None
                            simple_auth_key: str | None
                            """
                            Type 7 encrypted key for OSPF simple authentication.
                            Takes precedence over
                            `cleartext_simple_auth_key`.
                            NOTE: The l3_interfaces.interfaces list must not be more than 1
                            interface or they must all be the same
                            (e.g. [Ethernet7, Ethernet7]) as the type7 password depends
                            on the interface.
                            """
                            cleartext_simple_auth_key: str | None
                            """
                            Cleartext key for OSPF simple authentication.
                            To protect the password at rest it is strongly
                            recommended to make use of a vault or similar.
                            """
                            message_digest_keys: MessageDigestKeys
                            """Subclass of AvdList with `MessageDigestKeysItem` items."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    point_to_point: bool | UndefinedType = Undefined,
                                    area: str | UndefinedType = Undefined,
                                    cost: int | None | UndefinedType = Undefined,
                                    authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                                    simple_auth_key: str | None | UndefinedType = Undefined,
                                    cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                                    message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ospf.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        point_to_point: point_to_point
                                        area: OSPF area ID.
                                        cost: OSPF link cost.
                                        authentication: authentication
                                        simple_auth_key:
                                           Type 7 encrypted key for OSPF simple authentication.
                                           Takes precedence over
                                           `cleartext_simple_auth_key`.
                                           NOTE: The l3_interfaces.interfaces list must not be more than 1
                                           interface or they must all be the same
                                           (e.g. [Ethernet7, Ethernet7]) as the type7 password depends
                                           on the interface.
                                        cleartext_simple_auth_key:
                                           Cleartext key for OSPF simple authentication.
                                           To protect the password at rest it is strongly
                                           recommended to make use of a vault or similar.
                                        message_digest_keys: Subclass of AvdList with `MessageDigestKeysItem` items.

                                    """

                        class Pim(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}}
                            enabled: bool | None

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                                    """
                                    Pim.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        class MonitorSessionsItem(AvdModel):
                            """Subclass of AvdModel."""

                            class SourceSettings(AvdModel):
                                """Subclass of AvdModel."""

                                class AccessGroup(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}, "priority": {"type": int}}
                                    type: Literal["ip", "ipv6", "mac"] | None
                                    name: str | None
                                    """ACL name."""
                                    priority: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                                            name: str | None | UndefinedType = Undefined,
                                            priority: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            AccessGroup.


                                            Subclass of AvdModel.

                                            Args:
                                                type: type
                                                name: ACL name.
                                                priority: priority

                                            """

                                _fields: ClassVar[dict] = {"direction": {"type": str}, "access_group": {"type": AccessGroup}}
                                direction: Literal["rx", "tx", "both"] | None
                                access_group: AccessGroup
                                """
                                This can only be set when `session_settings.access_group` is not set.

                                Subclass of AvdModel.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        direction: Literal["rx", "tx", "both"] | None | UndefinedType = Undefined,
                                        access_group: AccessGroup | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        SourceSettings.


                                        Subclass of AvdModel.

                                        Args:
                                            direction: direction
                                            access_group:
                                               This can only be set when `session_settings.access_group` is not set.

                                               Subclass of AvdModel.

                                        """

                            class SessionSettings(AvdModel):
                                """Subclass of AvdModel."""

                                class AccessGroup(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"type": {"type": str}, "name": {"type": str}}
                                    type: Literal["ip", "ipv6", "mac"] | None
                                    name: str | None
                                    """ACL name."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            type: Literal["ip", "ipv6", "mac"] | None | UndefinedType = Undefined,
                                            name: str | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            AccessGroup.


                                            Subclass of AvdModel.

                                            Args:
                                                type: type
                                                name: ACL name.

                                            """

                                class Truncate(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"enabled": {"type": bool}, "size": {"type": int}}
                                    enabled: bool | None
                                    size: int | None
                                    """Size in bytes."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self, *, enabled: bool | None | UndefinedType = Undefined, size: int | None | UndefinedType = Undefined
                                        ) -> None:
                                            """
                                            Truncate.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                size: Size in bytes.

                                            """

                                _fields: ClassVar[dict] = {
                                    "encapsulation_gre_metadata_tx": {"type": bool},
                                    "header_remove_size": {"type": int},
                                    "access_group": {"type": AccessGroup},
                                    "rate_limit_per_ingress_chip": {"type": str},
                                    "rate_limit_per_egress_chip": {"type": str},
                                    "sample": {"type": int},
                                    "truncate": {"type": Truncate},
                                }
                                encapsulation_gre_metadata_tx: bool | None
                                header_remove_size: int | None
                                """Number of bytes to remove from header."""
                                access_group: AccessGroup
                                """Subclass of AvdModel."""
                                rate_limit_per_ingress_chip: str | None
                                """
                                Ratelimit and unit as string.
                                Examples:
                                  "100000 bps"
                                  "100 kbps"
                                  "10 mbps"
                                """
                                rate_limit_per_egress_chip: str | None
                                """
                                Ratelimit and unit as string.
                                Examples:
                                  "100000 bps"
                                  "100 kbps"
                                  "10 mbps"
                                """
                                sample: int | None
                                truncate: Truncate
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        encapsulation_gre_metadata_tx: bool | None | UndefinedType = Undefined,
                                        header_remove_size: int | None | UndefinedType = Undefined,
                                        access_group: AccessGroup | UndefinedType = Undefined,
                                        rate_limit_per_ingress_chip: str | None | UndefinedType = Undefined,
                                        rate_limit_per_egress_chip: str | None | UndefinedType = Undefined,
                                        sample: int | None | UndefinedType = Undefined,
                                        truncate: Truncate | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        SessionSettings.


                                        Subclass of AvdModel.

                                        Args:
                                            encapsulation_gre_metadata_tx: encapsulation_gre_metadata_tx
                                            header_remove_size: Number of bytes to remove from header.
                                            access_group: Subclass of AvdModel.
                                            rate_limit_per_ingress_chip:
                                               Ratelimit and unit as string.
                                               Examples:  # fmt: skip
                                                 "100000 bps"
                                                 "100 kbps"
                                                 "10 mbps"
                                            rate_limit_per_egress_chip:
                                               Ratelimit and unit as string.
                                               Examples:  # fmt: skip
                                                 "100000 bps"
                                                 "100 kbps"
                                                 "10 mbps"
                                            sample: sample
                                            truncate: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "role": {"type": str},
                                "source_settings": {"type": SourceSettings},
                                "session_settings": {"type": SessionSettings},
                            }
                            name: str
                            """Session name."""
                            role: Literal["source", "destination"] | None
                            source_settings: SourceSettings
                            """Subclass of AvdModel."""
                            session_settings: SessionSettings
                            """
                            Session settings are defined per session name.
                            Different session_settings for the same session name
                            will be combined/merged.


                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    role: Literal["source", "destination"] | None | UndefinedType = Undefined,
                                    source_settings: SourceSettings | UndefinedType = Undefined,
                                    session_settings: SessionSettings | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MonitorSessionsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Session name.
                                        role: role
                                        source_settings: Subclass of AvdModel.
                                        session_settings:
                                           Session settings are defined per session name.
                                           Different session_settings for the same session name
                                           will be combined/merged.


                                           Subclass of AvdModel.

                                    """

                        class MonitorSessions(AvdList[MonitorSessionsItem]):
                            """Subclass of AvdList with `MonitorSessionsItem` items."""

                        MonitorSessions._item_type = MonitorSessionsItem

                        class CampusLinkType(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        CampusLinkType._item_type = str

                        _fields: ClassVar[dict] = {
                            "interfaces": {"type": Interfaces},
                            "encapsulation_dot1q_vlan": {"type": EncapsulationDot1qVlan},
                            "ip_addresses": {"type": IpAddresses},
                            "static_routes": {"type": StaticRoutes},
                            "ipv6_static_routes": {"type": Ipv6StaticRoutes},
                            "nodes": {"type": Nodes},
                            "arp_gratuitous_accept": {"type": bool},
                            "description": {"type": str},
                            "descriptions": {"type": Descriptions},
                            "enabled": {"type": bool, "default": True},
                            "mtu": {"type": int},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "ospf": {"type": Ospf},
                            "pim": {"type": Pim},
                            "flow_tracking": {"type": FlowTracking},
                            "monitor_sessions": {"type": MonitorSessions},
                            "campus_link_type": {"type": CampusLinkType},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            "raw_eos_cli": {"type": str},
                        }
                        interfaces: Interfaces
                        """Subclass of AvdList with `str` items."""
                        encapsulation_dot1q_vlan: EncapsulationDot1qVlan
                        """
                        For sub-interfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.

                        Subclass of AvdList with `int` items.
                        """
                        ip_addresses: IpAddresses
                        """Subclass of AvdList with `str` items."""
                        static_routes: StaticRoutes
                        """
                        Static routes to be configured on every device where this interface is configured.

                        Subclass of
                        AvdList with `StaticRoutesItem` items.
                        """
                        ipv6_static_routes: Ipv6StaticRoutes
                        """
                        IPv6 static routes to be configured on every device where this interface is configured.

                        Subclass of
                        AvdList with `Ipv6StaticRoutesItem` items.
                        """
                        nodes: Nodes
                        """Subclass of AvdList with `str` items."""
                        arp_gratuitous_accept: bool | None
                        """Accept gratuitous ARP."""
                        description: str | None
                        descriptions: Descriptions
                        """
                        "descriptions" has precedence over "description".


                        Subclass of AvdList with `str` items.
                        """
                        enabled: bool
                        """Default value: `True`"""
                        mtu: int | None
                        ipv4_acl_in: str | None
                        ipv4_acl_out: str | None
                        ospf: Ospf
                        """
                        OSPF interface configuration.

                        Subclass of AvdModel.
                        """
                        pim: Pim
                        """
                        Enable PIM sparse-mode on the interface; requires "evpn_l3_multicast" to be enabled on the
                        VRF/Tenant.
                        Enabling this implicitly makes the device a PIM External Gateway (PEG) in EVPN designs
                        only.
                        At least one RP address must be configured for EVPN PEG to be configured.


                        Subclass of
                        AvdModel.
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        monitor_sessions: MonitorSessions
                        """
                        Used to define interfaces as source or destination for monitoring sessions.

                        Subclass of AvdList
                        with `MonitorSessionsItem` items.
                        """
                        campus_link_type: CampusLinkType
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Values for the CloudVision `Link-Type` user tags to be associated with an
                        interface.
                        Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                        in the same tags being associated with the parent Ethernet interface instead.
                        Attempting to
                        associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                        associated with the member Ethernet interfaces instead.

                        Subclass of AvdList with `str` items.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen."""
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Ethernet interface in the final EOS configuration."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                interfaces: Interfaces | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: EncapsulationDot1qVlan | UndefinedType = Undefined,
                                ip_addresses: IpAddresses | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                arp_gratuitous_accept: bool | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                descriptions: Descriptions | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                mtu: int | None | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                ospf: Ospf | UndefinedType = Undefined,
                                pim: Pim | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                monitor_sessions: MonitorSessions | UndefinedType = Undefined,
                                campus_link_type: CampusLinkType | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    interfaces: Subclass of AvdList with `str` items.
                                    encapsulation_dot1q_vlan:
                                       For sub-interfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.

                                       Subclass of AvdList with `int` items.
                                    ip_addresses: Subclass of AvdList with `str` items.
                                    static_routes:
                                       Static routes to be configured on every device where this interface is configured.

                                       Subclass of
                                       AvdList with `StaticRoutesItem` items.
                                    ipv6_static_routes:
                                       IPv6 static routes to be configured on every device where this interface is configured.

                                       Subclass of
                                       AvdList with `Ipv6StaticRoutesItem` items.
                                    nodes: Subclass of AvdList with `str` items.
                                    arp_gratuitous_accept: Accept gratuitous ARP.
                                    description: description
                                    descriptions:
                                       "descriptions" has precedence over "description".


                                       Subclass of AvdList with `str` items.
                                    enabled: enabled
                                    mtu: mtu
                                    ipv4_acl_in: ipv4_acl_in
                                    ipv4_acl_out: ipv4_acl_out
                                    ospf:
                                       OSPF interface configuration.

                                       Subclass of AvdModel.
                                    pim:
                                       Enable PIM sparse-mode on the interface; requires "evpn_l3_multicast" to be enabled on the
                                       VRF/Tenant.
                                       Enabling this implicitly makes the device a PIM External Gateway (PEG) in EVPN designs
                                       only.
                                       At least one RP address must be configured for EVPN PEG to be configured.


                                       Subclass of
                                       AvdModel.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    monitor_sessions:
                                       Used to define interfaces as source or destination for monitoring sessions.

                                       Subclass of AvdList
                                       with `MonitorSessionsItem` items.
                                    campus_link_type:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Values for the CloudVision `Link-Type` user tags to be associated with an
                                       interface.
                                       Attempting to associate `Link-Type` user tags with an Ethernet sub-interface will result
                                       in the same tags being associated with the parent Ethernet interface instead.
                                       Attempting to
                                       associate `Link-Type` user tags with a Port-Channel interface will result in the same tags being
                                       associated with the member Ethernet interfaces instead.

                                       Subclass of AvdList with `str` items.
                                    structured_config: Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen.
                                    raw_eos_cli: EOS CLI rendered directly on the Ethernet interface in the final EOS configuration.

                                """

                    class L3Interfaces(AvdList[L3InterfacesItem]):
                        """Subclass of AvdList with `L3InterfacesItem` items."""

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "prefix": {"type": str},
                                "next_hop": {"type": str},
                                "track_bfd": {"type": bool},
                                "distance": {"type": int},
                                "tag": {"type": int},
                                "name": {"type": str},
                                "metric": {"type": int},
                                "interface": {"type": str},
                            }
                            prefix: str | None
                            next_hop: str | None
                            track_bfd: bool | None
                            """Track next-hop using BFD."""
                            distance: int | None
                            tag: int | None
                            name: str | None
                            """description."""
                            metric: int | None
                            interface: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    prefix: str | None | UndefinedType = Undefined,
                                    next_hop: str | None | UndefinedType = Undefined,
                                    track_bfd: bool | None | UndefinedType = Undefined,
                                    distance: int | None | UndefinedType = Undefined,
                                    tag: int | None | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    metric: int | None | UndefinedType = Undefined,
                                    interface: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: prefix
                                        next_hop: next_hop
                                        track_bfd: Track next-hop using BFD.
                                        distance: distance
                                        tag: tag
                                        name: description.
                                        metric: metric
                                        interface: interface

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class Ipv6StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "prefix": {"type": str},
                                "next_hop": {"type": str},
                                "track_bfd": {"type": bool},
                                "distance": {"type": int},
                                "tag": {"type": int},
                                "name": {"type": str},
                                "metric": {"type": int},
                                "interface": {"type": str},
                            }
                            prefix: str | None
                            next_hop: str | None
                            track_bfd: bool | None
                            """Track next-hop using BFD."""
                            distance: int | None
                            tag: int | None
                            name: str | None
                            """description."""
                            metric: int | None
                            interface: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    prefix: str | None | UndefinedType = Undefined,
                                    next_hop: str | None | UndefinedType = Undefined,
                                    track_bfd: bool | None | UndefinedType = Undefined,
                                    distance: int | None | UndefinedType = Undefined,
                                    tag: int | None | UndefinedType = Undefined,
                                    name: str | None | UndefinedType = Undefined,
                                    metric: int | None | UndefinedType = Undefined,
                                    interface: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ipv6StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: prefix
                                        next_hop: next_hop
                                        track_bfd: Track next-hop using BFD.
                                        distance: distance
                                        tag: tag
                                        name: description.
                                        metric: metric
                                        interface: interface

                                    """

                        class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
                            """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

                        Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

                        class Ospf(AvdModel):
                            """Subclass of AvdModel."""

                            class MessageDigestKeysItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "id": {"type": int},
                                    "hash_algorithm": {"type": str, "default": "sha512"},
                                    "key": {"type": str},
                                    "cleartext_key": {"type": str},
                                }
                                id: int | None
                                hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"]
                                """Default value: `"sha512"`"""
                                key: str | None
                                """
                                Type 7 encrypted key for OSPF message-digest authentication.
                                Takes precedence over `cleartext_key`
                                NOTE: The l3_interfaces.interfaces list must not be more than 1 interface or they must all be the
                                same
                                (e.g. [Ethernet7, Ethernet7]) as the type7 password depends on the interface.
                                """
                                cleartext_key: str | None
                                """
                                Cleartext key for OSPF message-digest authentication
                                To protect the password at rest it is strongly
                                recommended to make use of a vault or similar.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        id: int | None | UndefinedType = Undefined,
                                        hash_algorithm: Literal["md5", "sha1", "sha256", "sha384", "sha512"] | UndefinedType = Undefined,
                                        key: str | None | UndefinedType = Undefined,
                                        cleartext_key: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        MessageDigestKeysItem.


                                        Subclass of AvdModel.

                                        Args:
                                            id: id
                                            hash_algorithm: hash_algorithm
                                            key:
                                               Type 7 encrypted key for OSPF message-digest authentication.
                                               Takes precedence over `cleartext_key`
                                               NOTE: The l3_interfaces.interfaces list must not be more than 1 interface or they must all be the
                                               same
                                               (e.g. [Ethernet7, Ethernet7]) as the type7 password depends on the interface.
                                            cleartext_key:
                                               Cleartext key for OSPF message-digest authentication
                                               To protect the password at rest it is strongly
                                               recommended to make use of a vault or similar.

                                        """

                            class MessageDigestKeys(AvdList[MessageDigestKeysItem]):
                                """Subclass of AvdList with `MessageDigestKeysItem` items."""

                            MessageDigestKeys._item_type = MessageDigestKeysItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "point_to_point": {"type": bool, "default": False},
                                "area": {"type": str, "default": "0.0.0.0"},
                                "cost": {"type": int},
                                "authentication": {"type": str},
                                "simple_auth_key": {"type": str},
                                "cleartext_simple_auth_key": {"type": str},
                                "message_digest_keys": {"type": MessageDigestKeys},
                            }
                            enabled: bool | None
                            point_to_point: bool
                            """Default value: `False`"""
                            area: str
                            """
                            OSPF area ID.

                            Default value: `"0.0.0.0"`
                            """
                            cost: int | None
                            """OSPF link cost."""
                            authentication: Literal["simple", "message-digest"] | None
                            simple_auth_key: str | None
                            """
                            Type 7 encrypted key for OSPF simple authentication.
                            Takes precedence over
                            `cleartext_simple_auth_key`
                            NOTE: The l3_interfaces.interfaces list must not be more than 1
                            interface or they must all be the same
                            (e.g. [Ethernet7, Ethernet7]) as the type7 password depends
                            on the interface.
                            """
                            cleartext_simple_auth_key: str | None
                            """
                            Cleartext key for OSPF simple authentication.
                            To protect the password at rest it is strongly
                            recommended to make use of a vault or similar.
                            """
                            message_digest_keys: MessageDigestKeys
                            """Subclass of AvdList with `MessageDigestKeysItem` items."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    point_to_point: bool | UndefinedType = Undefined,
                                    area: str | UndefinedType = Undefined,
                                    cost: int | None | UndefinedType = Undefined,
                                    authentication: Literal["simple", "message-digest"] | None | UndefinedType = Undefined,
                                    simple_auth_key: str | None | UndefinedType = Undefined,
                                    cleartext_simple_auth_key: str | None | UndefinedType = Undefined,
                                    message_digest_keys: MessageDigestKeys | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ospf.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        point_to_point: point_to_point
                                        area: OSPF area ID.
                                        cost: OSPF link cost.
                                        authentication: authentication
                                        simple_auth_key:
                                           Type 7 encrypted key for OSPF simple authentication.
                                           Takes precedence over
                                           `cleartext_simple_auth_key`
                                           NOTE: The l3_interfaces.interfaces list must not be more than 1
                                           interface or they must all be the same
                                           (e.g. [Ethernet7, Ethernet7]) as the type7 password depends
                                           on the interface.
                                        cleartext_simple_auth_key:
                                           Cleartext key for OSPF simple authentication.
                                           To protect the password at rest it is strongly
                                           recommended to make use of a vault or similar.
                                        message_digest_keys: Subclass of AvdList with `MessageDigestKeysItem` items.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "node": {"type": str},
                            "arp_gratuitous_accept": {"type": bool},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "mtu": {"type": int},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "ipv6_static_routes": {"type": Ipv6StaticRoutes},
                            "ospf": {"type": Ospf},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "raw_eos_cli": {"type": str},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        node: str
                        """Node."""
                        arp_gratuitous_accept: bool | None
                        """Accept gratuitous ARP."""
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """IPv4 address/Mask."""
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        mtu: int | None
                        """MTU can only be set on the parent Port-Channel."""
                        ipv4_acl_in: str | None
                        """Name of the IPv4 access-list to be assigned in the ingress direction."""
                        ipv4_acl_out: str | None
                        """Name of the IPv4 Access-list to be assigned in the egress direction."""
                        static_routes: StaticRoutes
                        """
                        Static routes to be configured on the device where this Port-channel interface is configured.
                        Subclass of AvdList with `StaticRoutesItem` items.
                        """
                        ipv6_static_routes: Ipv6StaticRoutes
                        """
                        IPv6 static routes to be configured on the device where this Port-channel interface is configured.
                        Subclass of AvdList with `Ipv6StaticRoutesItem` items.
                        """
                        ospf: Ospf
                        """
                        OSPF interface configuration.

                        Subclass of AvdModel.
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config added under port_channel_interfaces.[name=<interface>] for
                        eos_cli_config_gen.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                node: str | UndefinedType = Undefined,
                                arp_gratuitous_accept: bool | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                mtu: int | None | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                                ospf: Ospf | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    node: Node.
                                    arp_gratuitous_accept: Accept gratuitous ARP.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: IPv4 address/Mask.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    mtu: MTU can only be set on the parent Port-Channel.
                                    ipv4_acl_in: Name of the IPv4 access-list to be assigned in the ingress direction.
                                    ipv4_acl_out: Name of the IPv4 Access-list to be assigned in the egress direction.
                                    static_routes:
                                       Static routes to be configured on the device where this Port-channel interface is configured.
                                       Subclass of AvdList with `StaticRoutesItem` items.
                                    ipv6_static_routes:
                                       IPv6 static routes to be configured on the device where this Port-channel interface is configured.
                                       Subclass of AvdList with `Ipv6StaticRoutesItem` items.
                                    ospf:
                                       OSPF interface configuration.

                                       Subclass of AvdModel.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config:
                                       Custom structured config added under port_channel_interfaces.[name=<interface>] for
                                       eos_cli_config_gen.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.

                                """

                    class L3PortChannels(AvdList[L3PortChannelsItem]):
                        """Subclass of AvdList with `L3PortChannelsItem` items."""

                    L3PortChannels._item_type = L3PortChannelsItem

                    class LoopbacksItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Ospf(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "area": {"type": str, "default": "0.0.0.0"}}
                            enabled: bool
                            """Default value: `False`"""
                            area: str
                            """
                            OSPF area ID.

                            Default value: `"0.0.0.0"`
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, area: str | UndefinedType = Undefined) -> None:
                                    """
                                    Ospf.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        area: OSPF area ID.

                                    """

                        _fields: ClassVar[dict] = {
                            "node": {"type": str},
                            "loopback": {"type": int},
                            "ip_address": {"type": str},
                            "description": {"type": str},
                            "enabled": {"type": bool, "default": True},
                            "ospf": {"type": Ospf},
                            "hardware_forwarding": {"type": bool},
                            "raw_eos_cli": {"type": str},
                        }
                        node: str
                        loopback: int
                        ip_address: str
                        description: str | None
                        enabled: bool
                        """Default value: `True`"""
                        ospf: Ospf
                        """
                        OSPF interface configuration.

                        Subclass of AvdModel.
                        """
                        hardware_forwarding: bool | None
                        """
                        Enable hardware forwarding for this loopback. This is required for correct forwarding in VRFs
                        without physical interfaces.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Loopback interface in the final EOS configuration."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                node: str | UndefinedType = Undefined,
                                loopback: int | UndefinedType = Undefined,
                                ip_address: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                ospf: Ospf | UndefinedType = Undefined,
                                hardware_forwarding: bool | None | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LoopbacksItem.


                                Subclass of AvdModel.

                                Args:
                                    node: node
                                    loopback: loopback
                                    ip_address: ip_address
                                    description: description
                                    enabled: enabled
                                    ospf:
                                       OSPF interface configuration.

                                       Subclass of AvdModel.
                                    hardware_forwarding:
                                       Enable hardware forwarding for this loopback. This is required for correct forwarding in VRFs
                                       without physical interfaces.
                                    raw_eos_cli: EOS CLI rendered directly on the Loopback interface in the final EOS configuration.

                                """

                    class Loopbacks(AvdList[LoopbacksItem]):
                        """Subclass of AvdList with `LoopbacksItem` items."""

                    Loopbacks._item_type = LoopbacksItem

                    class StaticRoutesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {
                            "destination_address_prefix": {"type": str},
                            "gateway": {"type": str},
                            "nodes": {"type": Nodes},
                            "prefix": {"type": str},
                            "next_hop": {"type": str},
                            "track_bfd": {"type": bool},
                            "distance": {"type": int},
                            "tag": {"type": int},
                            "name": {"type": str},
                            "metric": {"type": int},
                            "interface": {"type": str},
                        }
                        destination_address_prefix: str | None
                        """IPv4_address."""
                        gateway: str | None
                        """IPv4_address."""
                        nodes: Nodes
                        """Subclass of AvdList with `str` items."""
                        prefix: str | None
                        next_hop: str | None
                        track_bfd: bool | None
                        """Track next-hop using BFD."""
                        distance: int | None
                        tag: int | None
                        name: str | None
                        """description."""
                        metric: int | None
                        interface: str | None

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                destination_address_prefix: str | None | UndefinedType = Undefined,
                                gateway: str | None | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                prefix: str | None | UndefinedType = Undefined,
                                next_hop: str | None | UndefinedType = Undefined,
                                track_bfd: bool | None | UndefinedType = Undefined,
                                distance: int | None | UndefinedType = Undefined,
                                tag: int | None | UndefinedType = Undefined,
                                name: str | None | UndefinedType = Undefined,
                                metric: int | None | UndefinedType = Undefined,
                                interface: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                StaticRoutesItem.


                                Subclass of AvdModel.

                                Args:
                                    destination_address_prefix: IPv4_address.
                                    gateway: IPv4_address.
                                    nodes: Subclass of AvdList with `str` items.
                                    prefix: prefix
                                    next_hop: next_hop
                                    track_bfd: Track next-hop using BFD.
                                    distance: distance
                                    tag: tag
                                    name: description.
                                    metric: metric
                                    interface: interface

                                """

                    class StaticRoutes(AvdList[StaticRoutesItem]):
                        """Subclass of AvdList with `StaticRoutesItem` items."""

                    StaticRoutes._item_type = StaticRoutesItem

                    class Ipv6StaticRoutesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {
                            "destination_address_prefix": {"type": str},
                            "gateway": {"type": str},
                            "nodes": {"type": Nodes},
                            "prefix": {"type": str},
                            "next_hop": {"type": str},
                            "track_bfd": {"type": bool},
                            "distance": {"type": int},
                            "tag": {"type": int},
                            "name": {"type": str},
                            "metric": {"type": int},
                            "interface": {"type": str},
                        }
                        destination_address_prefix: str | None
                        """IPv6_address."""
                        gateway: str | None
                        nodes: Nodes
                        """Subclass of AvdList with `str` items."""
                        prefix: str | None
                        next_hop: str | None
                        track_bfd: bool | None
                        """Track next-hop using BFD."""
                        distance: int | None
                        tag: int | None
                        name: str | None
                        """description."""
                        metric: int | None
                        interface: str | None

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                destination_address_prefix: str | None | UndefinedType = Undefined,
                                gateway: str | None | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                prefix: str | None | UndefinedType = Undefined,
                                next_hop: str | None | UndefinedType = Undefined,
                                track_bfd: bool | None | UndefinedType = Undefined,
                                distance: int | None | UndefinedType = Undefined,
                                tag: int | None | UndefinedType = Undefined,
                                name: str | None | UndefinedType = Undefined,
                                metric: int | None | UndefinedType = Undefined,
                                interface: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ipv6StaticRoutesItem.


                                Subclass of AvdModel.

                                Args:
                                    destination_address_prefix: IPv6_address.
                                    gateway: gateway
                                    nodes: Subclass of AvdList with `str` items.
                                    prefix: prefix
                                    next_hop: next_hop
                                    track_bfd: Track next-hop using BFD.
                                    distance: distance
                                    tag: tag
                                    name: description.
                                    metric: metric
                                    interface: interface

                                """

                    class Ipv6StaticRoutes(AvdList[Ipv6StaticRoutesItem]):
                        """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""

                    Ipv6StaticRoutes._item_type = Ipv6StaticRoutesItem

                    class BgpPeersItem(AvdModel):
                        """Subclass of AvdModel."""

                        class DefaultOriginate(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"always": {"type": bool}}
                            always: bool | None

                            if TYPE_CHECKING:

                                def __init__(self, *, always: bool | None | UndefinedType = Undefined) -> None:
                                    """
                                    DefaultOriginate.


                                    Subclass of AvdModel.

                                    Args:
                                        always: always

                                    """

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {
                            "ip_address": {"type": str},
                            "peer_group": {"type": str},
                            "remote_as": {"type": str},
                            "description": {"type": str},
                            "password": {"type": str},
                            "cleartext_password": {"type": str},
                            "send_community": {"type": str},
                            "next_hop_self": {"type": bool},
                            "timers": {"type": str},
                            "maximum_routes": {"type": int},
                            "maximum_routes_warning_only": {"type": bool},
                            "default_originate": {"type": DefaultOriginate},
                            "update_source": {"type": str},
                            "ebgp_multihop": {"type": int},
                            "nodes": {"type": Nodes},
                            "set_ipv4_next_hop": {"type": str},
                            "set_ipv6_next_hop": {"type": str},
                            "route_map_out": {"type": str},
                            "route_map_in": {"type": str},
                            "prefix_list_in": {"type": str},
                            "prefix_list_out": {"type": str},
                            "local_as": {"type": str},
                            "weight": {"type": int},
                            "bfd": {"type": bool},
                            "bfd_timers": {"type": EosCliConfigGen.RouterBgp.VrfsItem.NeighborsItem.BfdTimers},
                            "shutdown": {"type": bool},
                        }
                        ip_address: str
                        """IPv4_address or IPv6_address."""
                        peer_group: str | None
                        """Peer group name."""
                        remote_as: str | None
                        """
                        BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in
                        YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                        number.
                        """
                        description: str | None
                        password: str | None
                        """
                        Type 7 encrypted password.
                        Takes precedence over `cleartext_password`.
                        """
                        cleartext_password: str | None
                        """
                        BGP peer group cleartext password.
                        To protect the password at rest it is strongly recommended to
                        make use of a vault or similar.
                        """
                        send_community: str | None
                        """'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'."""
                        next_hop_self: bool | None
                        timers: str | None
                        """BGP Keepalive and Hold Timer values in seconds as string <0-3600> <0-3600>."""
                        maximum_routes: int | None
                        """Maximum number of routes (0 means unlimited)."""
                        maximum_routes_warning_only: bool | None
                        default_originate: DefaultOriginate
                        """Subclass of AvdModel."""
                        update_source: str | None
                        ebgp_multihop: int | None
                        """Time-to-live in range of hops."""
                        nodes: Nodes
                        """
                        Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                        Subclass of AvdList with `str` items.
                        """
                        set_ipv4_next_hop: str | None
                        """
                        IPv4_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by
                        a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                        """
                        set_ipv6_next_hop: str | None
                        """
                        IPv6_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by
                        a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                        """
                        route_map_out: str | None
                        """Route-map name."""
                        route_map_in: str | None
                        """Route-map name."""
                        prefix_list_in: str | None
                        """
                        Inbound prefix list name.
                        The prefix-list will be associated under the IPv4 or IPv6 address family
                        based on the IP address.
                        """
                        prefix_list_out: str | None
                        """
                        Outbound prefix list name.
                        The prefix-list will be associated under the IPv4 or IPv6 address family
                        based on the IP address.
                        """
                        local_as: str | None
                        """
                        Local BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation
                        in YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                        number.
                        """
                        weight: int | None
                        bfd: bool | None
                        bfd_timers: EosCliConfigGen.RouterBgp.VrfsItem.NeighborsItem.BfdTimers
                        """Override default BFD timers. BFD must be enabled with `bfd: true`."""
                        shutdown: bool | None

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                ip_address: str | UndefinedType = Undefined,
                                peer_group: str | None | UndefinedType = Undefined,
                                remote_as: str | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                password: str | None | UndefinedType = Undefined,
                                cleartext_password: str | None | UndefinedType = Undefined,
                                send_community: str | None | UndefinedType = Undefined,
                                next_hop_self: bool | None | UndefinedType = Undefined,
                                timers: str | None | UndefinedType = Undefined,
                                maximum_routes: int | None | UndefinedType = Undefined,
                                maximum_routes_warning_only: bool | None | UndefinedType = Undefined,
                                default_originate: DefaultOriginate | UndefinedType = Undefined,
                                update_source: str | None | UndefinedType = Undefined,
                                ebgp_multihop: int | None | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                set_ipv4_next_hop: str | None | UndefinedType = Undefined,
                                set_ipv6_next_hop: str | None | UndefinedType = Undefined,
                                route_map_out: str | None | UndefinedType = Undefined,
                                route_map_in: str | None | UndefinedType = Undefined,
                                prefix_list_in: str | None | UndefinedType = Undefined,
                                prefix_list_out: str | None | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                weight: int | None | UndefinedType = Undefined,
                                bfd: bool | None | UndefinedType = Undefined,
                                bfd_timers: EosCliConfigGen.RouterBgp.VrfsItem.NeighborsItem.BfdTimers | UndefinedType = Undefined,
                                shutdown: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                BgpPeersItem.


                                Subclass of AvdModel.

                                Args:
                                    ip_address: IPv4_address or IPv6_address.
                                    peer_group: Peer group name.
                                    remote_as:
                                       BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                       For asdot notation in
                                       YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                       number.
                                    description: description
                                    password:
                                       Type 7 encrypted password.
                                       Takes precedence over `cleartext_password`.
                                    cleartext_password:
                                       BGP peer group cleartext password.
                                       To protect the password at rest it is strongly recommended to
                                       make use of a vault or similar.
                                    send_community: 'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'.
                                    next_hop_self: next_hop_self
                                    timers: BGP Keepalive and Hold Timer values in seconds as string <0-3600> <0-3600>.
                                    maximum_routes: Maximum number of routes (0 means unlimited).
                                    maximum_routes_warning_only: maximum_routes_warning_only
                                    default_originate: Subclass of AvdModel.
                                    update_source: update_source
                                    ebgp_multihop: Time-to-live in range of hops.
                                    nodes:
                                       Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                                       Subclass of AvdList with `str` items.
                                    set_ipv4_next_hop:
                                       IPv4_address
                                       Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by
                                       a uniquely generated route-map per neighbor.
                                       Next hop takes precedence over route_map_out.
                                    set_ipv6_next_hop:
                                       IPv6_address
                                       Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by
                                       a uniquely generated route-map per neighbor.
                                       Next hop takes precedence over route_map_out.
                                    route_map_out: Route-map name.
                                    route_map_in: Route-map name.
                                    prefix_list_in:
                                       Inbound prefix list name.
                                       The prefix-list will be associated under the IPv4 or IPv6 address family
                                       based on the IP address.
                                    prefix_list_out:
                                       Outbound prefix list name.
                                       The prefix-list will be associated under the IPv4 or IPv6 address family
                                       based on the IP address.
                                    local_as:
                                       Local BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                       For asdot notation
                                       in YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                       number.
                                    weight: weight
                                    bfd: bfd
                                    bfd_timers: Override default BFD timers. BFD must be enabled with `bfd: true`.
                                    shutdown: shutdown

                                """

                    class BgpPeers(AvdList[BgpPeersItem]):
                        """Subclass of AvdList with `BgpPeersItem` items."""

                    BgpPeers._item_type = BgpPeersItem

                    class Bgp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "router_id": {"type": str, "default": "main_router_id"},
                            "raw_eos_cli": {"type": str},
                            "structured_config": {"type": EosCliConfigGen.RouterBgp.VrfsItem},
                        }
                        enabled: bool | None
                        """
                        Force (no) configuration of BGP for the VRF.
                        If not set, BGP will be configured when needed
                        according to the following rules:
                        - If the VRF is part of an overlay (`evpn` or `mpls`), BGP will be
                        configured for it.
                        - If any BGP peers are configured under the VRF, BGP will be configured for it.
                        This is useful for L2LS designs with VRFs.
                        - If uplink type is `p2p-vrfs` *and* the vrf is included
                        in the uplink VRFs, BGP will be configured for it.
                        """
                        router_id: str
                        """
                        Router ID to use for BGP in this VRF.
                        This can be an IPv4 address, "main_router_id", "none" or
                        "diagnostic_loopback".
                        - "main_router_id" will use the IP address of Loopback0 or the common `router
                        general` Router ID if `use_router_general_for_router_id` is set."
                        - "none" will not configure a BGP
                        Router ID for this VRF. EOS will use the main BGP Router ID.
                        - "diagnostic_loopback" will use the IP
                        address of the VRF Diagnostic Loopback interface.

                        Default value: `"main_router_id"`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Router BGP, VRF definition in the final EOS configuration."""
                        structured_config: EosCliConfigGen.RouterBgp.VrfsItem
                        """Custom structured config added under router_bgp.vrfs.[name=<vrf>] for eos_cli_config_gen."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                router_id: str | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.RouterBgp.VrfsItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Bgp.


                                Subclass of AvdModel.

                                Args:
                                    enabled:
                                       Force (no) configuration of BGP for the VRF.
                                       If not set, BGP will be configured when needed
                                       according to the following rules:
                                       - If the VRF is part of an overlay (`evpn` or `mpls`), BGP will be
                                       configured for it.
                                       - If any BGP peers are configured under the VRF, BGP will be configured for it.
                                       This is useful for L2LS designs with VRFs.
                                       - If uplink type is `p2p-vrfs` *and* the vrf is included
                                       in the uplink VRFs, BGP will be configured for it.
                                    router_id:
                                       Router ID to use for BGP in this VRF.
                                       This can be an IPv4 address, "main_router_id", "none" or
                                       "diagnostic_loopback".
                                       - "main_router_id" will use the IP address of Loopback0 or the common `router
                                       general` Router ID if `use_router_general_for_router_id` is set."
                                       - "none" will not configure a BGP
                                       Router ID for this VRF. EOS will use the main BGP Router ID.
                                       - "diagnostic_loopback" will use the IP
                                       address of the VRF Diagnostic Loopback interface.
                                    raw_eos_cli: EOS CLI rendered directly on the Router BGP, VRF definition in the final EOS configuration.
                                    structured_config: Custom structured config added under router_bgp.vrfs.[name=<vrf>] for eos_cli_config_gen.

                                """

                    class BgpPeerGroupsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        class AddressFamilyIpv4(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "activate": {"type": bool},
                                "route_map_in": {"type": str},
                                "route_map_out": {"type": str},
                                "rcf_in": {"type": str},
                                "rcf_out": {"type": str},
                                "default_originate": {"type": EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.DefaultOriginate},
                                "next_hop": {"type": EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.NextHop},
                                "prefix_list_in": {"type": str},
                                "prefix_list_out": {"type": str},
                            }
                            activate: bool | None
                            route_map_in: str | None
                            """Inbound route-map name."""
                            route_map_out: str | None
                            """Outbound route-map name."""
                            rcf_in: str | None
                            """
                            Inbound RCF function name with parenthesis.
                            Example: MyFunction(myarg).
                            """
                            rcf_out: str | None
                            """
                            Outbound RCF function name with parenthesis.
                            Example: MyFunction(myarg).
                            """
                            default_originate: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.DefaultOriginate
                            next_hop: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.NextHop
                            prefix_list_in: str | None
                            """Inbound prefix-list name."""
                            prefix_list_out: str | None
                            """Outbound prefix-list name."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    activate: bool | None | UndefinedType = Undefined,
                                    route_map_in: str | None | UndefinedType = Undefined,
                                    route_map_out: str | None | UndefinedType = Undefined,
                                    rcf_in: str | None | UndefinedType = Undefined,
                                    rcf_out: str | None | UndefinedType = Undefined,
                                    default_originate: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.DefaultOriginate | UndefinedType = Undefined,
                                    next_hop: EosCliConfigGen.RouterBgp.AddressFamilyIpv4.PeerGroupsItem.NextHop | UndefinedType = Undefined,
                                    prefix_list_in: str | None | UndefinedType = Undefined,
                                    prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AddressFamilyIpv4.


                                    Subclass of AvdModel.

                                    Args:
                                        activate: activate
                                        route_map_in: Inbound route-map name.
                                        route_map_out: Outbound route-map name.
                                        rcf_in:
                                           Inbound RCF function name with parenthesis.
                                           Example: MyFunction(myarg).
                                        rcf_out:
                                           Outbound RCF function name with parenthesis.
                                           Example: MyFunction(myarg).
                                        default_originate: default_originate
                                        next_hop: next_hop
                                        prefix_list_in: Inbound prefix-list name.
                                        prefix_list_out: Outbound prefix-list name.

                                    """

                        class AddressFamilyIpv6(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "activate": {"type": bool},
                                "route_map_in": {"type": str},
                                "route_map_out": {"type": str},
                                "rcf_in": {"type": str},
                                "rcf_out": {"type": str},
                                "prefix_list_in": {"type": str},
                                "prefix_list_out": {"type": str},
                            }
                            activate: bool | None
                            route_map_in: str | None
                            """Inbound route-map name."""
                            route_map_out: str | None
                            """Outbound route-map name."""
                            rcf_in: str | None
                            """
                            Inbound RCF function name with parenthesis.
                            Example: MyFunction(myarg).
                            """
                            rcf_out: str | None
                            """
                            Outbound RCF function name with parenthesis.
                            Example: MyFunction(myarg).
                            """
                            prefix_list_in: str | None
                            """Inbound prefix-list name."""
                            prefix_list_out: str | None
                            """Outbound prefix-list name."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    activate: bool | None | UndefinedType = Undefined,
                                    route_map_in: str | None | UndefinedType = Undefined,
                                    route_map_out: str | None | UndefinedType = Undefined,
                                    rcf_in: str | None | UndefinedType = Undefined,
                                    rcf_out: str | None | UndefinedType = Undefined,
                                    prefix_list_in: str | None | UndefinedType = Undefined,
                                    prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AddressFamilyIpv6.


                                    Subclass of AvdModel.

                                    Args:
                                        activate: activate
                                        route_map_in: Inbound route-map name.
                                        route_map_out: Outbound route-map name.
                                        rcf_in:
                                           Inbound RCF function name with parenthesis.
                                           Example: MyFunction(myarg).
                                        rcf_out:
                                           Outbound RCF function name with parenthesis.
                                           Example: MyFunction(myarg).
                                        prefix_list_in: Inbound prefix-list name.
                                        prefix_list_out: Outbound prefix-list name.

                                    """

                        class AsPath(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"remote_as_replace_out": {"type": bool}, "prepend_own_disabled": {"type": bool}}
                            remote_as_replace_out: bool | None
                            """Replace AS number with local AS number."""
                            prepend_own_disabled: bool | None
                            """Disable prepending own AS number to AS path."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    remote_as_replace_out: bool | None | UndefinedType = Undefined,
                                    prepend_own_disabled: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AsPath.


                                    Subclass of AvdModel.

                                    Args:
                                        remote_as_replace_out: Replace AS number with local AS number.
                                        prepend_own_disabled: Disable prepending own AS number to AS path.

                                    """

                        class RemovePrivateAs(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "all": {"type": bool}, "replace_as": {"type": bool}}
                            enabled: bool | None
                            all: bool | None
                            replace_as: bool | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    all: bool | None | UndefinedType = Undefined,
                                    replace_as: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemovePrivateAs.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        all: all
                                        replace_as: replace_as

                                    """

                        class RemovePrivateAsIngress(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "replace_as": {"type": bool}}
                            enabled: bool | None
                            replace_as: bool | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, enabled: bool | None | UndefinedType = Undefined, replace_as: bool | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    RemovePrivateAsIngress.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        replace_as: replace_as

                                    """

                        class BfdTimers(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"interval": {"type": int}, "min_rx": {"type": int}, "multiplier": {"type": int}}
                            interval: int
                            """Interval in milliseconds."""
                            min_rx: int
                            """Rate in milliseconds."""
                            multiplier: int

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    interval: int | UndefinedType = Undefined,
                                    min_rx: int | UndefinedType = Undefined,
                                    multiplier: int | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    BfdTimers.


                                    Subclass of AvdModel.

                                    Args:
                                        interval: Interval in milliseconds.
                                        min_rx: Rate in milliseconds.
                                        multiplier: multiplier

                                    """

                        class DefaultOriginate(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "always": {"type": bool}, "route_map": {"type": str}}
                            enabled: bool | None
                            always: bool | None
                            route_map: str | None
                            """Route-map name."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    always: bool | None | UndefinedType = Undefined,
                                    route_map: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DefaultOriginate.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        always: always
                                        route_map: Route-map name.

                                    """

                        class MissingPolicy(AvdModel):
                            """Subclass of AvdModel."""

                            class DirectionIn(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "action": {"type": str},
                                    "include_community_list": {"type": bool},
                                    "include_prefix_list": {"type": bool},
                                    "include_sub_route_map": {"type": bool},
                                }
                                action: Literal["deny", "permit", "deny-in-out"]
                                """Missing policy action."""
                                include_community_list: bool | None
                                """Include community-list references in missing policy decision."""
                                include_prefix_list: bool | None
                                """Include prefix-list references in missing policy decision."""
                                include_sub_route_map: bool | None
                                """Include sub-route-map references in missing policy decision."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        action: Literal["deny", "permit", "deny-in-out"] | UndefinedType = Undefined,
                                        include_community_list: bool | None | UndefinedType = Undefined,
                                        include_prefix_list: bool | None | UndefinedType = Undefined,
                                        include_sub_route_map: bool | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        DirectionIn.


                                        Subclass of AvdModel.

                                        Args:
                                            action: Missing policy action.
                                            include_community_list: Include community-list references in missing policy decision.
                                            include_prefix_list: Include prefix-list references in missing policy decision.
                                            include_sub_route_map: Include sub-route-map references in missing policy decision.

                                        """

                            class DirectionOut(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "action": {"type": str},
                                    "include_community_list": {"type": bool},
                                    "include_prefix_list": {"type": bool},
                                    "include_sub_route_map": {"type": bool},
                                }
                                action: Literal["deny", "permit", "deny-in-out"]
                                """Missing policy action."""
                                include_community_list: bool | None
                                """Include community-list references in missing policy decision."""
                                include_prefix_list: bool | None
                                """Include prefix-list references in missing policy decision."""
                                include_sub_route_map: bool | None
                                """Include sub-route-map references in missing policy decision."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        action: Literal["deny", "permit", "deny-in-out"] | UndefinedType = Undefined,
                                        include_community_list: bool | None | UndefinedType = Undefined,
                                        include_prefix_list: bool | None | UndefinedType = Undefined,
                                        include_sub_route_map: bool | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        DirectionOut.


                                        Subclass of AvdModel.

                                        Args:
                                            action: Missing policy action.
                                            include_community_list: Include community-list references in missing policy decision.
                                            include_prefix_list: Include prefix-list references in missing policy decision.
                                            include_sub_route_map: Include sub-route-map references in missing policy decision.

                                        """

                            _fields: ClassVar[dict] = {"direction_in": {"type": DirectionIn}, "direction_out": {"type": DirectionOut}}
                            direction_in: DirectionIn
                            """
                            Missing policy inbound direction.

                            Subclass of AvdModel.
                            """
                            direction_out: DirectionOut
                            """
                            Missing policy outbound direction.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, direction_in: DirectionIn | UndefinedType = Undefined, direction_out: DirectionOut | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    MissingPolicy.


                                    Subclass of AvdModel.

                                    Args:
                                        direction_in:
                                           Missing policy inbound direction.

                                           Subclass of AvdModel.
                                        direction_out:
                                           Missing policy outbound direction.

                                           Subclass of AvdModel.

                                    """

                        class LinkBandwidth(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "default": {"type": str}}
                            enabled: bool | None
                            default: str | None
                            """nn.nn(K|M|G) link speed in bits/second."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, enabled: bool | None | UndefinedType = Undefined, default: str | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    LinkBandwidth.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        default: nn.nn(K|M|G) link speed in bits/second.

                                    """

                        class AllowasIn(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "times": {"type": int}}
                            enabled: bool | None
                            times: int | None
                            """Number of local ASNs allowed in a BGP update."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, times: int | None | UndefinedType = Undefined) -> None:
                                    """
                                    AllowasIn.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        times: Number of local ASNs allowed in a BGP update.

                                    """

                        class RibInPrePolicyRetain(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "all": {"type": bool}}
                            enabled: bool | None
                            all: bool | None

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, all: bool | None | UndefinedType = Undefined) -> None:
                                    """
                                    RibInPrePolicyRetain.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        all: all

                                    """

                        class SharedSecret(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"profile": {"type": str}, "hash_algorithm": {"type": str}}
                            profile: str
                            """Name of profile defined under `management_security`."""
                            hash_algorithm: Literal["aes-128-cmac-96", "hmac-sha-256", "hmac-sha1-96"]
                            """Note: Algorithm hmac-sha-256 requires EOS version 4.31.1F and above."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    profile: str | UndefinedType = Undefined,
                                    hash_algorithm: Literal["aes-128-cmac-96", "hmac-sha-256", "hmac-sha1-96"] | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    SharedSecret.


                                    Subclass of AvdModel.

                                    Args:
                                        profile: Name of profile defined under `management_security`.
                                        hash_algorithm: Note: Algorithm hmac-sha-256 requires EOS version 4.31.1F and above.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "nodes": {"type": Nodes},
                            "password": {"type": str},
                            "cleartext_password": {"type": str},
                            "address_family_ipv4": {"type": AddressFamilyIpv4},
                            "address_family_ipv6": {"type": AddressFamilyIpv6},
                            "type": {"type": str},
                            "remote_as": {"type": str},
                            "local_as": {"type": str},
                            "description": {"type": str},
                            "shutdown": {"type": bool},
                            "as_path": {"type": AsPath},
                            "remove_private_as": {"type": RemovePrivateAs},
                            "remove_private_as_ingress": {"type": RemovePrivateAsIngress},
                            "next_hop_unchanged": {"type": bool},
                            "update_source": {"type": str},
                            "route_reflector_client": {"type": bool},
                            "bfd": {"type": bool},
                            "bfd_timers": {"type": BfdTimers},
                            "ebgp_multihop": {"type": int},
                            "next_hop_peer": {"type": bool},
                            "next_hop_self": {"type": bool},
                            "passive": {"type": bool},
                            "default_originate": {"type": DefaultOriginate},
                            "send_community": {"type": str},
                            "maximum_routes": {"type": int},
                            "maximum_routes_warning_limit": {"type": str},
                            "maximum_routes_warning_only": {"type": bool},
                            "missing_policy": {"type": MissingPolicy},
                            "link_bandwidth": {"type": LinkBandwidth},
                            "allowas_in": {"type": AllowasIn},
                            "weight": {"type": int},
                            "timers": {"type": str},
                            "rib_in_pre_policy_retain": {"type": RibInPrePolicyRetain},
                            "route_map_in": {"type": str},
                            "route_map_out": {"type": str},
                            "peer_tag_in": {"type": str},
                            "peer_tag_out_discard": {"type": str},
                            "session_tracker": {"type": str},
                            "shared_secret": {"type": SharedSecret},
                            "ttl_maximum_hops": {"type": int},
                        }
                        name: str
                        """BGP peer group name."""
                        nodes: Nodes
                        """
                        Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                        If not
                        set the peer-group is created on devices which have a bgp_peer mapped to the corresponding
                        peer_group.


                        Subclass of AvdList with `str` items.
                        """
                        password: str | None
                        """
                        Type 7 encrypted password.
                        Takes precedence over `cleartext_password`.
                        """
                        cleartext_password: str | None
                        """
                        BGP peer group cleartext password.
                        To protect the password at rest it is strongly recommended to
                        make use of a vault or similar.
                        """
                        address_family_ipv4: AddressFamilyIpv4
                        """Subclass of AvdModel."""
                        address_family_ipv6: AddressFamilyIpv6
                        """Subclass of AvdModel."""
                        type: str | None
                        """Key only used for documentation or validation purposes."""
                        remote_as: str | None
                        """
                        BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in
                        YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                        number.
                        """
                        local_as: str | None
                        """
                        BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in
                        YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                        number.
                        """
                        description: str | None
                        shutdown: bool | None
                        as_path: AsPath
                        """
                        BGP AS-PATH options.

                        Subclass of AvdModel.
                        """
                        remove_private_as: RemovePrivateAs
                        """
                        Remove private AS numbers in outbound AS path.

                        Subclass of AvdModel.
                        """
                        remove_private_as_ingress: RemovePrivateAsIngress
                        """Subclass of AvdModel."""
                        next_hop_unchanged: bool | None
                        update_source: str | None
                        """IP address or interface name."""
                        route_reflector_client: bool | None
                        bfd: bool | None
                        """Enable BFD."""
                        bfd_timers: BfdTimers
                        """
                        Override default BFD timers. BFD must be enabled with `bfd: true`.

                        Subclass of AvdModel.
                        """
                        ebgp_multihop: int | None
                        """Time-to-live in range of hops."""
                        next_hop_peer: bool | None
                        next_hop_self: bool | None
                        passive: bool | None
                        default_originate: DefaultOriginate
                        """Subclass of AvdModel."""
                        send_community: str | None
                        """'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'."""
                        maximum_routes: int | None
                        """Maximum number of routes (0 means unlimited)."""
                        maximum_routes_warning_limit: str | None
                        """
                        Maximum number of routes after which a warning is issued (0 means never warn) or
                        Percentage of
                        maximum number of routes at which to warn ("<1-100> percent").
                        """
                        maximum_routes_warning_only: bool | None
                        missing_policy: MissingPolicy
                        """
                        Missing policy configuration for all address-families.

                        Subclass of AvdModel.
                        """
                        link_bandwidth: LinkBandwidth
                        """Subclass of AvdModel."""
                        allowas_in: AllowasIn
                        """Subclass of AvdModel."""
                        weight: int | None
                        timers: str | None
                        """BGP Keepalive and Hold Timer values in seconds as string "<0-3600> <0-3600>"."""
                        rib_in_pre_policy_retain: RibInPrePolicyRetain
                        """Subclass of AvdModel."""
                        route_map_in: str | None
                        """Inbound route-map name."""
                        route_map_out: str | None
                        """Outbound route-map name."""
                        peer_tag_in: str | None
                        """Inbound peer tag name."""
                        peer_tag_out_discard: str | None
                        """Outbound discard peer tag name."""
                        session_tracker: str | None
                        shared_secret: SharedSecret
                        """Subclass of AvdModel."""
                        ttl_maximum_hops: int | None
                        """Maximum number of hops."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                password: str | None | UndefinedType = Undefined,
                                cleartext_password: str | None | UndefinedType = Undefined,
                                address_family_ipv4: AddressFamilyIpv4 | UndefinedType = Undefined,
                                address_family_ipv6: AddressFamilyIpv6 | UndefinedType = Undefined,
                                type: str | None | UndefinedType = Undefined,
                                remote_as: str | None | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                shutdown: bool | None | UndefinedType = Undefined,
                                as_path: AsPath | UndefinedType = Undefined,
                                remove_private_as: RemovePrivateAs | UndefinedType = Undefined,
                                remove_private_as_ingress: RemovePrivateAsIngress | UndefinedType = Undefined,
                                next_hop_unchanged: bool | None | UndefinedType = Undefined,
                                update_source: str | None | UndefinedType = Undefined,
                                route_reflector_client: bool | None | UndefinedType = Undefined,
                                bfd: bool | None | UndefinedType = Undefined,
                                bfd_timers: BfdTimers | UndefinedType = Undefined,
                                ebgp_multihop: int | None | UndefinedType = Undefined,
                                next_hop_peer: bool | None | UndefinedType = Undefined,
                                next_hop_self: bool | None | UndefinedType = Undefined,
                                passive: bool | None | UndefinedType = Undefined,
                                default_originate: DefaultOriginate | UndefinedType = Undefined,
                                send_community: str | None | UndefinedType = Undefined,
                                maximum_routes: int | None | UndefinedType = Undefined,
                                maximum_routes_warning_limit: str | None | UndefinedType = Undefined,
                                maximum_routes_warning_only: bool | None | UndefinedType = Undefined,
                                missing_policy: MissingPolicy | UndefinedType = Undefined,
                                link_bandwidth: LinkBandwidth | UndefinedType = Undefined,
                                allowas_in: AllowasIn | UndefinedType = Undefined,
                                weight: int | None | UndefinedType = Undefined,
                                timers: str | None | UndefinedType = Undefined,
                                rib_in_pre_policy_retain: RibInPrePolicyRetain | UndefinedType = Undefined,
                                route_map_in: str | None | UndefinedType = Undefined,
                                route_map_out: str | None | UndefinedType = Undefined,
                                peer_tag_in: str | None | UndefinedType = Undefined,
                                peer_tag_out_discard: str | None | UndefinedType = Undefined,
                                session_tracker: str | None | UndefinedType = Undefined,
                                shared_secret: SharedSecret | UndefinedType = Undefined,
                                ttl_maximum_hops: int | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                BgpPeerGroupsItem.


                                Subclass of AvdModel.

                                Args:
                                    name: BGP peer group name.
                                    nodes:
                                       Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                                       If not
                                       set the peer-group is created on devices which have a bgp_peer mapped to the corresponding
                                       peer_group.


                                       Subclass of AvdList with `str` items.
                                    password:
                                       Type 7 encrypted password.
                                       Takes precedence over `cleartext_password`.
                                    cleartext_password:
                                       BGP peer group cleartext password.
                                       To protect the password at rest it is strongly recommended to
                                       make use of a vault or similar.
                                    address_family_ipv4: Subclass of AvdModel.
                                    address_family_ipv6: Subclass of AvdModel.
                                    type: Key only used for documentation or validation purposes.
                                    remote_as:
                                       BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                       For asdot notation in
                                       YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                       number.
                                    local_as:
                                       BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                       For asdot notation in
                                       YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                       number.
                                    description: description
                                    shutdown: shutdown
                                    as_path:
                                       BGP AS-PATH options.

                                       Subclass of AvdModel.
                                    remove_private_as:
                                       Remove private AS numbers in outbound AS path.

                                       Subclass of AvdModel.
                                    remove_private_as_ingress: Subclass of AvdModel.
                                    next_hop_unchanged: next_hop_unchanged
                                    update_source: IP address or interface name.
                                    route_reflector_client: route_reflector_client
                                    bfd: Enable BFD.
                                    bfd_timers:
                                       Override default BFD timers. BFD must be enabled with `bfd: true`.

                                       Subclass of AvdModel.
                                    ebgp_multihop: Time-to-live in range of hops.
                                    next_hop_peer: next_hop_peer
                                    next_hop_self: next_hop_self
                                    passive: passive
                                    default_originate: Subclass of AvdModel.
                                    send_community: 'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'.
                                    maximum_routes: Maximum number of routes (0 means unlimited).
                                    maximum_routes_warning_limit:
                                       Maximum number of routes after which a warning is issued (0 means never warn) or
                                       Percentage of
                                       maximum number of routes at which to warn ("<1-100> percent").
                                    maximum_routes_warning_only: maximum_routes_warning_only
                                    missing_policy:
                                       Missing policy configuration for all address-families.

                                       Subclass of AvdModel.
                                    link_bandwidth: Subclass of AvdModel.
                                    allowas_in: Subclass of AvdModel.
                                    weight: weight
                                    timers: BGP Keepalive and Hold Timer values in seconds as string "<0-3600> <0-3600>".
                                    rib_in_pre_policy_retain: Subclass of AvdModel.
                                    route_map_in: Inbound route-map name.
                                    route_map_out: Outbound route-map name.
                                    peer_tag_in: Inbound peer tag name.
                                    peer_tag_out_discard: Outbound discard peer tag name.
                                    session_tracker: session_tracker
                                    shared_secret: Subclass of AvdModel.
                                    ttl_maximum_hops: Maximum number of hops.

                                """

                    class BgpPeerGroups(AvdIndexedList[str, BgpPeerGroupsItem]):
                        """Subclass of AvdIndexedList with `BgpPeerGroupsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    BgpPeerGroups._item_type = BgpPeerGroupsItem

                    class AdditionalRouteTargetsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {
                            "type": {"type": str},
                            "address_family": {"type": str},
                            "route_target": {"type": str},
                            "nodes": {"type": Nodes},
                        }
                        type: Literal["import", "export"] | None
                        address_family: str | None
                        route_target: str | None
                        nodes: Nodes
                        """
                        Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                        Subclass of AvdList with `str` items.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                type: Literal["import", "export"] | None | UndefinedType = Undefined,
                                address_family: str | None | UndefinedType = Undefined,
                                route_target: str | None | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                            ) -> None:
                                """
                                AdditionalRouteTargetsItem.


                                Subclass of AvdModel.

                                Args:
                                    type: type
                                    address_family: address_family
                                    route_target: route_target
                                    nodes:
                                       Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                                       Subclass of AvdList with `str` items.

                                """

                    class AdditionalRouteTargets(AvdList[AdditionalRouteTargetsItem]):
                        """Subclass of AvdList with `AdditionalRouteTargetsItem` items."""

                    AdditionalRouteTargets._item_type = AdditionalRouteTargetsItem

                    class AggregateAddressesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        _fields: ClassVar[dict] = {
                            "nodes": {"type": Nodes},
                            "prefix": {"type": str},
                            "advertise_only": {"type": bool},
                            "as_set": {"type": bool},
                            "summary_only": {"type": bool},
                            "attribute_map": {"type": str},
                            "match_map": {"type": str},
                        }
                        nodes: Nodes
                        """
                        Nodes where the aggregate should be configured.
                        By default the aggregate will be configured all on
                        all devices where the VRF is configured.

                        Subclass of AvdList with `str` items.
                        """
                        prefix: str | None
                        """IPv4 prefix "A.B.C.D/E" or IPv6 prefix "A:B:C:D:E:F:G:H/I"."""
                        advertise_only: bool | None
                        as_set: bool | None
                        summary_only: bool | None
                        attribute_map: str | None
                        """Route-map name."""
                        match_map: str | None
                        """Route-map name."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                nodes: Nodes | UndefinedType = Undefined,
                                prefix: str | None | UndefinedType = Undefined,
                                advertise_only: bool | None | UndefinedType = Undefined,
                                as_set: bool | None | UndefinedType = Undefined,
                                summary_only: bool | None | UndefinedType = Undefined,
                                attribute_map: str | None | UndefinedType = Undefined,
                                match_map: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                AggregateAddressesItem.


                                Subclass of AvdModel.

                                Args:
                                    nodes:
                                       Nodes where the aggregate should be configured.
                                       By default the aggregate will be configured all on
                                       all devices where the VRF is configured.

                                       Subclass of AvdList with `str` items.
                                    prefix: IPv4 prefix "A.B.C.D/E" or IPv6 prefix "A:B:C:D:E:F:G:H/I".
                                    advertise_only: advertise_only
                                    as_set: as_set
                                    summary_only: summary_only
                                    attribute_map: Route-map name.
                                    match_map: Route-map name.

                                """

                    class AggregateAddresses(AvdList[AggregateAddressesItem]):
                        """Subclass of AvdList with `AggregateAddressesItem` items."""

                    AggregateAddresses._item_type = AggregateAddressesItem

                    _fields: ClassVar[dict] = {
                        "name": {"type": str},
                        "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["evpn"], target_type=cls)},
                        "description": {"type": str},
                        "vrf_vni": {"type": int},
                        "vrf_id": {"type": int},
                        "rd_override": {"type": str},
                        "rt_override": {"type": str},
                        "mlag_ibgp_peering_ipv4_pool": {"type": str},
                        "mlag_ibgp_peering_ipv6_pool": {"type": str},
                        "ip_helpers": {"type": IpHelpers},
                        "enable_mlag_ibgp_peering_vrfs": {"type": bool},
                        "redistribute_mlag_ibgp_peering_vrfs": {"type": bool},
                        "mlag_ibgp_peering_vlan": {"type": int},
                        "vtep_diagnostic": {"type": VtepDiagnostic},
                        "ospf": {"type": Ospf},
                        "redistribute_ospf": {"type": bool, "default": True},
                        "evpn_l3_multicast": {"type": EvpnL3Multicast},
                        "pim_rp_addresses": {"type": PimRpAddresses},
                        "evpn_l2_multi_domain": {"type": bool},
                        "svis": {"type": Svis},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "loopbacks": {"type": Loopbacks},
                        "static_routes": {"type": StaticRoutes},
                        "ipv6_static_routes": {"type": Ipv6StaticRoutes},
                        "redistribute_static": {"type": bool},
                        "redistribute_connected": {"type": bool, "default": True},
                        "bgp_peers": {"type": BgpPeers},
                        "bgp": {"type": Bgp},
                        "bgp_peer_groups": {"type": BgpPeerGroups},
                        "additional_route_targets": {"type": AdditionalRouteTargets},
                        "aggregate_addresses": {"type": AggregateAddresses},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                    }
                    name: str
                    address_families: AddressFamilies
                    """
                    Subclass of AvdList with `str` items.

                    Default value: `lambda cls: coerce_type(["evpn"], target_type=cls)`
                    """
                    description: str | None
                    """VRF description."""
                    vrf_vni: int | None
                    """
                    Required if "vrf_id" is not set.
                    The VRF VNI range is not limited, but if vrf_id is not set,
                    "vrf_vni" is used for calculating MLAG iBGP peering vlan id.
                    "vrf_vni" may also be used for VRF
                    RD/RT ID. See "overlay_rd_type" and "overlay_rt_type" for details.
                    See
                    "mlag_ibgp_peering_vrfs.base_vlan" for details.
                    If vrf_vni > 10000 make sure to adjust
                    "mac_vrf_vni_base" accordingly to avoid overlap.
                    """
                    vrf_id: int | None
                    """
                    Required if "vrf_vni" is not set.
                    "vrf_id" is used as default value for "vrf_vni" and
                    "ospf.process_id" unless those are set.
                    "vrf_id" may also be used for VRF RD/RT ID. See
                    "overlay_rd_type" and "overlay_rt_type" for details.
                    "vrf_id" is preferred over "vrf_vni" for MLAG
                    iBGP peering vlan, see "mlag_ibgp_peering_vrfs.base_vlan" for details.
                    """
                    rd_override: str | None
                    """
                    By default, the VRF RD will be derived from the pattern defined in `overlay_rd_type`.
                    The
                    rd_override allows us to override this value and statically define it.

                    rd_override supports two
                    formats:
                      - A single number will be used in the RD assigned number subfield (second part of the
                    RD).
                      - A full RD string with colon separator which will override the full RD.
                    """
                    rt_override: str | None
                    """
                    By default, the VRF RT will be derived from the pattern defined in `overlay_rt_type`.
                    The
                    rt_override allows us to override this value and statically define it.

                    rt_override supports two
                    formats:
                      - A single number will be used in the RT assigned number subfield (second part of the
                    RT).
                      - A full RT string with colon separator which will override the full RT.
                    """
                    mlag_ibgp_peering_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The
                    subnet used for the iBGP peering in the VRF is derived from this pool based on the ID of the first
                    MLAG switch.
                    If not set, "mlag_peer_l3_ipv4_pool" or "mlag_peer_ipv4_pool" will be used.
                    """
                    mlag_ibgp_peering_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The
                    subnet used for the iBGP peering in the VRF is derived from this pool based on the ID of the first
                    MLAG switch.
                    If not set, "mlag_peer_l3_ipv6_pool" or "mlag_peer_ipv6_pool" will be used.
                    """
                    ip_helpers: IpHelpers
                    """
                    IP helper for DHCP relay.

                    Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                    `ip_helper` (`str`).
                    """
                    enable_mlag_ibgp_peering_vrfs: bool | None
                    """
                    MLAG iBGP peering per VRF.
                    By default an iBGP peering is configured per VRF between MLAG peers on
                    separate VLANs.
                    Setting `enable_mlag_ibgp_peering_vrfs: false` under a VRF overrides the tenant-wide
                    setting.
                    """
                    redistribute_mlag_ibgp_peering_vrfs: bool | None
                    """
                    Redistribute the connected subnet for the MLAG iBGP peering per VRF into overlay BGP.
                    By default the
                    iBGP peering subnet is not redistributed into the overlay routing protocol per VRF.
                    Setting
                    `redistribute_mlag_ibgp_peering_vrfs` under a VRF overrides the tenant-wide setting.
                    """
                    mlag_ibgp_peering_vlan: int | None
                    """
                    Manually define the VLAN used on the MLAG pair for the iBGP session.
                    By default this parameter is
                    calculated using the following formula: `<mlag_ibgp_peering_vrfs.base_vlan>` + `<vrf_id>` - 1.
                    """
                    vtep_diagnostic: VtepDiagnostic
                    """
                    Enable VTEP Network diagnostics.
                    This will create a loopback with virtual source-nat enable to
                    perform diagnostics from the switch.


                    Subclass of AvdModel.
                    """
                    ospf: Ospf
                    """
                    Router OSPF configuration.
                    This will create an OSPF routing instance in the tenant VRF. If there is
                    no nodes definition, the OSPF instance will be
                    created on all leafs where the VRF is deployed. This
                    will also cause automatic OSPF redistribution into BGP unless
                    explicitly turned off with
                    "redistribute_ospf: false".


                    Subclass of AvdModel.
                    """
                    redistribute_ospf: bool
                    """
                    Non-selectively enabling or disabling redistribute ospf inside the VRF.

                    Default value: `True`
                    """
                    evpn_l3_multicast: EvpnL3Multicast
                    """
                    Explicitly enable or disable evpn_l3_multicast to override setting of
                    `<network_services_key>.[].evpn_l3_multicast.enabled`.
                    Allow override of
                    `<network_services_key>.[].evpn_l3_multicast` node_settings.
                    Requires `evpn_multicast` to also be
                    set to `true`.


                    Subclass of AvdModel.
                    """
                    pim_rp_addresses: PimRpAddresses
                    """
                    For each group of nodes, allow configuration of RP Addresses & associated groups.


                    Subclass of
                    AvdList with `PimRpAddressesItem` items.
                    """
                    evpn_l2_multi_domain: bool | None
                    """
                    Explicitly extend all VLANs/VLAN-Aware Bundles inside the VRF to remote EVPN domains.
                    Overrides
                    `<network_services_key>[].evpn_l2_multi_domain`.
                    """
                    svis: Svis
                    """
                    List of SVIs.
                    This will create both the L3 SVI and L2 VLAN based on filters applied to the node.
                    Subclass of AvdList with `SvisItem` items.
                    """
                    l3_interfaces: L3Interfaces
                    """
                    List of L3 interfaces.
                    This will create IP routed interface inside VRF. Length of interfaces, nodes
                    and ip_addresses must match.


                    Subclass of AvdList with `L3InterfacesItem` items.
                    """
                    l3_port_channels: L3PortChannels
                    """
                    List of L3 Port-Channels.
                    This will create IP routed Port-Channels inside the VRF.


                    Subclass of
                    AvdList with `L3PortChannelsItem` items.
                    """
                    loopbacks: Loopbacks
                    """
                    List of Loopback interfaces.
                    This will create Loopback interfaces inside the VRF.


                    Subclass of
                    AvdList with `LoopbacksItem` items.
                    """
                    static_routes: StaticRoutes
                    """
                    List of static routes for v4 and/or v6.
                    This will create static routes inside the tenant VRF.
                    If
                    nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
                    If a
                    node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
                    This automatic behavior can be overridden non-selectively with the redistribute_static knob for the
                    VRF.


                    Subclass of AvdList with `StaticRoutesItem` items.
                    """
                    ipv6_static_routes: Ipv6StaticRoutes
                    """Subclass of AvdList with `Ipv6StaticRoutesItem` items."""
                    redistribute_static: bool | None
                    """Enable or disable the redistribution of all static routes to BGP in the VRF."""
                    redistribute_connected: bool
                    """
                    Enable or disable the redistribution of all connected routes to BGP in the VRF. Note this is not
                    applicable to VRF `default`.

                    Default value: `True`
                    """
                    bgp_peers: BgpPeers
                    """
                    List of BGP peer definitions.
                    This will configure BGP neighbors inside the tenant VRF for peering
                    with external devices.
                    The configured peer will automatically be activated for ipv4 or ipv6 address
                    family based on the ip address.
                    Note, only ipv4 and ipv6 address families are currently supported in
                    eos_designs.
                    For other address families, use custom_structured configuration with
                    eos_cli_config_gen.


                    Subclass of AvdList with `BgpPeersItem` items.
                    """
                    bgp: Bgp
                    """Subclass of AvdModel."""
                    bgp_peer_groups: BgpPeerGroups
                    """
                    List of BGP peer groups definitions.
                    This will configure BGP peer groups to be used inside the
                    tenant VRF for peering with external devices.
                    Since BGP peer groups are configured at higher BGP
                    level, shared between VRFs,
                    peer_group names should not overlap between VRFs.


                    Subclass of
                    AvdIndexedList with `BgpPeerGroupsItem` items. Primary key is `name` (`str`).
                    """
                    additional_route_targets: AdditionalRouteTargets
                    """
                    Configuration of extra route-targets for this VRF. Useful for route-leaking or gateway between
                    address families.

                    Subclass of AvdList with `AdditionalRouteTargetsItem` items.
                    """
                    aggregate_addresses: AggregateAddresses
                    """Subclass of AvdList with `AggregateAddressesItem` items."""
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            name: str | UndefinedType = Undefined,
                            address_families: AddressFamilies | UndefinedType = Undefined,
                            description: str | None | UndefinedType = Undefined,
                            vrf_vni: int | None | UndefinedType = Undefined,
                            vrf_id: int | None | UndefinedType = Undefined,
                            rd_override: str | None | UndefinedType = Undefined,
                            rt_override: str | None | UndefinedType = Undefined,
                            mlag_ibgp_peering_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_ibgp_peering_ipv6_pool: str | None | UndefinedType = Undefined,
                            ip_helpers: IpHelpers | UndefinedType = Undefined,
                            enable_mlag_ibgp_peering_vrfs: bool | None | UndefinedType = Undefined,
                            redistribute_mlag_ibgp_peering_vrfs: bool | None | UndefinedType = Undefined,
                            mlag_ibgp_peering_vlan: int | None | UndefinedType = Undefined,
                            vtep_diagnostic: VtepDiagnostic | UndefinedType = Undefined,
                            ospf: Ospf | UndefinedType = Undefined,
                            redistribute_ospf: bool | UndefinedType = Undefined,
                            evpn_l3_multicast: EvpnL3Multicast | UndefinedType = Undefined,
                            pim_rp_addresses: PimRpAddresses | UndefinedType = Undefined,
                            evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                            svis: Svis | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            loopbacks: Loopbacks | UndefinedType = Undefined,
                            static_routes: StaticRoutes | UndefinedType = Undefined,
                            ipv6_static_routes: Ipv6StaticRoutes | UndefinedType = Undefined,
                            redistribute_static: bool | None | UndefinedType = Undefined,
                            redistribute_connected: bool | UndefinedType = Undefined,
                            bgp_peers: BgpPeers | UndefinedType = Undefined,
                            bgp: Bgp | UndefinedType = Undefined,
                            bgp_peer_groups: BgpPeerGroups | UndefinedType = Undefined,
                            additional_route_targets: AdditionalRouteTargets | UndefinedType = Undefined,
                            aggregate_addresses: AggregateAddresses | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                        ) -> None:
                            """
                            VrfsItem.


                            Subclass of AvdModel.

                            Args:
                                name: name
                                address_families: Subclass of AvdList with `str` items.
                                description: VRF description.
                                vrf_vni:
                                   Required if "vrf_id" is not set.
                                   The VRF VNI range is not limited, but if vrf_id is not set,
                                   "vrf_vni" is used for calculating MLAG iBGP peering vlan id.
                                   "vrf_vni" may also be used for VRF
                                   RD/RT ID. See "overlay_rd_type" and "overlay_rt_type" for details.
                                   See
                                   "mlag_ibgp_peering_vrfs.base_vlan" for details.
                                   If vrf_vni > 10000 make sure to adjust
                                   "mac_vrf_vni_base" accordingly to avoid overlap.
                                vrf_id:
                                   Required if "vrf_vni" is not set.
                                   "vrf_id" is used as default value for "vrf_vni" and
                                   "ospf.process_id" unless those are set.
                                   "vrf_id" may also be used for VRF RD/RT ID. See
                                   "overlay_rd_type" and "overlay_rt_type" for details.
                                   "vrf_id" is preferred over "vrf_vni" for MLAG
                                   iBGP peering vlan, see "mlag_ibgp_peering_vrfs.base_vlan" for details.
                                rd_override:
                                   By default, the VRF RD will be derived from the pattern defined in `overlay_rd_type`.
                                   The
                                   rd_override allows us to override this value and statically define it.

                                   rd_override supports two
                                   formats:
                                     - A single number will be used in the RD assigned number subfield (second part of the
                                   RD).
                                     - A full RD string with colon separator which will override the full RD.
                                rt_override:
                                   By default, the VRF RT will be derived from the pattern defined in `overlay_rt_type`.
                                   The
                                   rt_override allows us to override this value and statically define it.

                                   rt_override supports two
                                   formats:
                                     - A single number will be used in the RT assigned number subfield (second part of the
                                   RT).
                                     - A full RT string with colon separator which will override the full RT.
                                mlag_ibgp_peering_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The
                                   subnet used for the iBGP peering in the VRF is derived from this pool based on the ID of the first
                                   MLAG switch.
                                   If not set, "mlag_peer_l3_ipv4_pool" or "mlag_peer_ipv4_pool" will be used.
                                mlag_ibgp_peering_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The
                                   subnet used for the iBGP peering in the VRF is derived from this pool based on the ID of the first
                                   MLAG switch.
                                   If not set, "mlag_peer_l3_ipv6_pool" or "mlag_peer_ipv6_pool" will be used.
                                ip_helpers:
                                   IP helper for DHCP relay.

                                   Subclass of AvdIndexedList with `IpHelpersItem` items. Primary key is
                                   `ip_helper` (`str`).
                                enable_mlag_ibgp_peering_vrfs:
                                   MLAG iBGP peering per VRF.
                                   By default an iBGP peering is configured per VRF between MLAG peers on
                                   separate VLANs.
                                   Setting `enable_mlag_ibgp_peering_vrfs: false` under a VRF overrides the tenant-wide
                                   setting.
                                redistribute_mlag_ibgp_peering_vrfs:
                                   Redistribute the connected subnet for the MLAG iBGP peering per VRF into overlay BGP.
                                   By default the
                                   iBGP peering subnet is not redistributed into the overlay routing protocol per VRF.
                                   Setting
                                   `redistribute_mlag_ibgp_peering_vrfs` under a VRF overrides the tenant-wide setting.
                                mlag_ibgp_peering_vlan:
                                   Manually define the VLAN used on the MLAG pair for the iBGP session.
                                   By default this parameter is
                                   calculated using the following formula: `<mlag_ibgp_peering_vrfs.base_vlan>` + `<vrf_id>` - 1.
                                vtep_diagnostic:
                                   Enable VTEP Network diagnostics.
                                   This will create a loopback with virtual source-nat enable to
                                   perform diagnostics from the switch.


                                   Subclass of AvdModel.
                                ospf:
                                   Router OSPF configuration.
                                   This will create an OSPF routing instance in the tenant VRF. If there is
                                   no nodes definition, the OSPF instance will be
                                   created on all leafs where the VRF is deployed. This
                                   will also cause automatic OSPF redistribution into BGP unless
                                   explicitly turned off with
                                   "redistribute_ospf: false".


                                   Subclass of AvdModel.
                                redistribute_ospf: Non-selectively enabling or disabling redistribute ospf inside the VRF.
                                evpn_l3_multicast:
                                   Explicitly enable or disable evpn_l3_multicast to override setting of
                                   `<network_services_key>.[].evpn_l3_multicast.enabled`.
                                   Allow override of
                                   `<network_services_key>.[].evpn_l3_multicast` node_settings.
                                   Requires `evpn_multicast` to also be
                                   set to `true`.


                                   Subclass of AvdModel.
                                pim_rp_addresses:
                                   For each group of nodes, allow configuration of RP Addresses & associated groups.


                                   Subclass of
                                   AvdList with `PimRpAddressesItem` items.
                                evpn_l2_multi_domain:
                                   Explicitly extend all VLANs/VLAN-Aware Bundles inside the VRF to remote EVPN domains.
                                   Overrides
                                   `<network_services_key>[].evpn_l2_multi_domain`.
                                svis:
                                   List of SVIs.
                                   This will create both the L3 SVI and L2 VLAN based on filters applied to the node.
                                   Subclass of AvdList with `SvisItem` items.
                                l3_interfaces:
                                   List of L3 interfaces.
                                   This will create IP routed interface inside VRF. Length of interfaces, nodes
                                   and ip_addresses must match.


                                   Subclass of AvdList with `L3InterfacesItem` items.
                                l3_port_channels:
                                   List of L3 Port-Channels.
                                   This will create IP routed Port-Channels inside the VRF.


                                   Subclass of
                                   AvdList with `L3PortChannelsItem` items.
                                loopbacks:
                                   List of Loopback interfaces.
                                   This will create Loopback interfaces inside the VRF.


                                   Subclass of
                                   AvdList with `LoopbacksItem` items.
                                static_routes:
                                   List of static routes for v4 and/or v6.
                                   This will create static routes inside the tenant VRF.
                                   If
                                   nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
                                   If a
                                   node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
                                   This automatic behavior can be overridden non-selectively with the redistribute_static knob for the
                                   VRF.


                                   Subclass of AvdList with `StaticRoutesItem` items.
                                ipv6_static_routes: Subclass of AvdList with `Ipv6StaticRoutesItem` items.
                                redistribute_static: Enable or disable the redistribution of all static routes to BGP in the VRF.
                                redistribute_connected:
                                   Enable or disable the redistribution of all connected routes to BGP in the VRF. Note this is not
                                   applicable to VRF `default`.
                                bgp_peers:
                                   List of BGP peer definitions.
                                   This will configure BGP neighbors inside the tenant VRF for peering
                                   with external devices.
                                   The configured peer will automatically be activated for ipv4 or ipv6 address
                                   family based on the ip address.
                                   Note, only ipv4 and ipv6 address families are currently supported in
                                   eos_designs.
                                   For other address families, use custom_structured configuration with
                                   eos_cli_config_gen.


                                   Subclass of AvdList with `BgpPeersItem` items.
                                bgp: Subclass of AvdModel.
                                bgp_peer_groups:
                                   List of BGP peer groups definitions.
                                   This will configure BGP peer groups to be used inside the
                                   tenant VRF for peering with external devices.
                                   Since BGP peer groups are configured at higher BGP
                                   level, shared between VRFs,
                                   peer_group names should not overlap between VRFs.


                                   Subclass of
                                   AvdIndexedList with `BgpPeerGroupsItem` items. Primary key is `name` (`str`).
                                additional_route_targets:
                                   Configuration of extra route-targets for this VRF. Useful for route-leaking or gateway between
                                   address families.

                                   Subclass of AvdList with `AdditionalRouteTargetsItem` items.
                                aggregate_addresses: Subclass of AvdList with `AggregateAddressesItem` items.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.

                            """

                class Vrfs(AvdIndexedList[str, VrfsItem]):
                    """Subclass of AvdIndexedList with `VrfsItem` items. Primary key is `name` (`str`)."""

                    _primary_key: ClassVar[str] = "name"

                Vrfs._item_type = VrfsItem

                class L2vlansItem(AvdModel):
                    """Subclass of AvdModel."""

                    class Tags(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    Tags._item_type = str

                    class TrunkGroups(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    TrunkGroups._item_type = str

                    class EvpnL2Multicast(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}}
                        enabled: bool | None

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | None | UndefinedType = Undefined) -> None:
                                """
                                EvpnL2Multicast.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled

                                """

                    class VxlanFloodMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enabled": {"type": bool}, "underlay_multicast_group": {"type": str}}
                        enabled: bool | None
                        """
                        Explicitly enable or disable vxlan_flood_multicast to override setting of
                        `<network_services_key>.[].vxlan_flood_multicast.enabled`.
                        """
                        underlay_multicast_group: str | None
                        """Specific multicast group to use for this VLAN."""

                        if TYPE_CHECKING:

                            def __init__(
                                self, *, enabled: bool | None | UndefinedType = Undefined, underlay_multicast_group: str | None | UndefinedType = Undefined
                            ) -> None:
                                """
                                VxlanFloodMulticast.


                                Subclass of AvdModel.

                                Args:
                                    enabled:
                                       Explicitly enable or disable vxlan_flood_multicast to override setting of
                                       `<network_services_key>.[].vxlan_flood_multicast.enabled`.
                                    underlay_multicast_group: Specific multicast group to use for this VLAN.

                                """

                    class IgmpSnoopingQuerier(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "source_address": {"type": str},
                            "version": {"type": int},
                            "fast_leave": {"type": bool},
                        }
                        enabled: bool | None
                        """Will be enabled automatically if evpn_l2_multicast is enabled."""
                        source_address: str | None
                        """
                        IPv4_address
                        If not set, IP address of "Loopback0" will be used.
                        """
                        version: Literal[1, 2, 3] | None
                        """IGMP Version (By default EOS uses IGMP version 2 for IGMP querier)."""
                        fast_leave: bool | None
                        """Enable IGMP snooping fast-leave feature."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                source_address: str | None | UndefinedType = Undefined,
                                version: Literal[1, 2, 3] | None | UndefinedType = Undefined,
                                fast_leave: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IgmpSnoopingQuerier.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Will be enabled automatically if evpn_l2_multicast is enabled.
                                    source_address:
                                       IPv4_address
                                       If not set, IP address of "Loopback0" will be used.
                                    version: IGMP Version (By default EOS uses IGMP version 2 for IGMP querier).
                                    fast_leave: Enable IGMP snooping fast-leave feature.

                                """

                    class Bgp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.RouterBgp.VlansItem}, "raw_eos_cli": {"type": str}}
                        structured_config: EosCliConfigGen.RouterBgp.VlansItem
                        """
                        Custom structured config added under router_bgp.vlans.[id=<vlan>] for eos_cli_config_gen.
                        This
                        configuration will not be applied to vlan aware bundles.
                        """
                        raw_eos_cli: str | None
                        """
                        EOS cli commands rendered on router_bgp.vlans.
                        This configuration will not be applied to vlan aware
                        bundles.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                structured_config: EosCliConfigGen.RouterBgp.VlansItem | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Bgp.


                                Subclass of AvdModel.

                                Args:
                                    structured_config:
                                       Custom structured config added under router_bgp.vlans.[id=<vlan>] for eos_cli_config_gen.
                                       This
                                       configuration will not be applied to vlan aware bundles.
                                    raw_eos_cli:
                                       EOS cli commands rendered on router_bgp.vlans.
                                       This configuration will not be applied to vlan aware
                                       bundles.

                                """

                    class PrivateVlan(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"type": {"type": str}, "primary_vlan": {"type": int}}
                        type: Literal["community", "isolated"]
                        primary_vlan: int
                        """Primary VLAN ID."""

                        if TYPE_CHECKING:

                            def __init__(
                                self, *, type: Literal["community", "isolated"] | UndefinedType = Undefined, primary_vlan: int | UndefinedType = Undefined
                            ) -> None:
                                """
                                PrivateVlan.


                                Subclass of AvdModel.

                                Args:
                                    type: type
                                    primary_vlan: Primary VLAN ID.

                                """

                    _fields: ClassVar[dict] = {
                        "id": {"type": int},
                        "name": {"type": str},
                        "profile": {"type": str},
                        "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                        "address_locking": {"type": EosCliConfigGen.VlansItem.AddressLocking.AddressFamily},
                        "vni_override": {"type": int},
                        "rt_override": {"type": str},
                        "rd_override": {"type": str},
                        "vxlan": {"type": bool, "default": True},
                        "spanning_tree_priority": {"type": int},
                        "evpn_vlan_bundle": {"type": str},
                        "trunk_groups": {"type": TrunkGroups},
                        "evpn_l2_multi_domain": {"type": bool},
                        "evpn_l2_multicast": {"type": EvpnL2Multicast},
                        "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
                        "igmp_snooping_enabled": {"type": bool},
                        "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
                        "bgp": {"type": Bgp},
                        "private_vlan": {"type": PrivateVlan},
                    }
                    id: int
                    """VLAN ID."""
                    name: str
                    """VLAN name."""
                    profile: str | None
                    """
                    L2VLAN profile name.
                    The profile must be defined under `l2vlan_profiles`. The profile may refer to
                    another l2vlan_profile as it's `parent_profile` to inherit settings in up to two levels (l2vlan ->
                    l2vlan_profile -> l2vlan_parent_profile).
                    """
                    tags: Tags
                    """
                    Tags leveraged for networks services filtering.
                    Tags are matched against filter.tags defined under
                    node type settings.
                    Tags are also matched against the node_group name under node type settings.
                    Subclass of AvdList with `str` items.

                    Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                    """
                    address_locking: EosCliConfigGen.VlansItem.AddressLocking.AddressFamily
                    vni_override: int | None
                    """
                    By default the VNI will be derived from mac_vrf_vni_base.
                    The vni_override, allows to override this
                    value and statically define it.
                    """
                    rt_override: str | None
                    """
                    By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                    The rt_override allows us
                    to override this value and statically define it.
                    rt_override will default to vni_override if set.
                    rt_override supports two formats:
                      - A single number which will be used in the RT fields instead of
                    mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                      - A full RT string with colon
                    separator which will override the full RT.
                    """
                    rd_override: str | None
                    """
                    By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                    The rt_override allows us
                    to override this value and statically define it.
                    rd_override will default to rt_override or
                    vni_override if set.
                    rd_override supports two formats:
                      - A single number which will be used in the
                    RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                      -
                    A full RD string with colon separator which will override the full RD.
                    """
                    vxlan: bool
                    """
                    Extend this L2VLAN over VXLAN.

                    Default value: `True`
                    """
                    spanning_tree_priority: int | None
                    """
                    Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                    under node type settings.
                    The default priority for rapid-PVST is set under the node type settings
                    with `spanning_tree_priority` (default=32768).
                    """
                    evpn_vlan_bundle: str | None
                    """
                    Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                    This setting overrides
                    "evpn_vlan_bundle" set at tenant level.
                    The common option "evpn_vlan_aware_bundles" is disregarded
                    for this option.
                    """
                    trunk_groups: TrunkGroups
                    """Subclass of AvdList with `str` items."""
                    evpn_l2_multi_domain: bool | None
                    """
                    Explicitly extend this VLAN to remote EVPN domains.
                    Overrides
                    `<network_services_key>[].evpn_l2_multi_domain`.
                    """
                    evpn_l2_multicast: EvpnL2Multicast
                    """
                    Explicitly enable or disable evpn_l2_multicast to override setting of
                    `<network_services_key>.[].evpn_l2_multicast.enabled`.
                    When evpn_l2_multicast.enabled is set to true
                    for a vlan or a tenant, igmp snooping and igmp snooping querier will always be enabled, overriding
                    those individual settings.
                    Requires `evpn_multicast` to also be set to `true`.


                    Subclass of
                    AvdModel.
                    """
                    vxlan_flood_multicast: VxlanFloodMulticast
                    """Subclass of AvdModel."""
                    igmp_snooping_enabled: bool | None
                    """Enable or disable IGMP snooping (Enabled by default on EOS)."""
                    igmp_snooping_querier: IgmpSnoopingQuerier
                    """
                    Enable igmp snooping querier, by default using IP address of Loopback 0.
                    When enabled, igmp snooping
                    querier will only be configured on l3 devices, i.e., uplink_type: p2p.


                    Subclass of AvdModel.
                    """
                    bgp: Bgp
                    """Subclass of AvdModel."""
                    private_vlan: PrivateVlan
                    """Subclass of AvdModel."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            id: int | UndefinedType = Undefined,
                            name: str | UndefinedType = Undefined,
                            profile: str | None | UndefinedType = Undefined,
                            tags: Tags | UndefinedType = Undefined,
                            address_locking: EosCliConfigGen.VlansItem.AddressLocking.AddressFamily | UndefinedType = Undefined,
                            vni_override: int | None | UndefinedType = Undefined,
                            rt_override: str | None | UndefinedType = Undefined,
                            rd_override: str | None | UndefinedType = Undefined,
                            vxlan: bool | UndefinedType = Undefined,
                            spanning_tree_priority: int | None | UndefinedType = Undefined,
                            evpn_vlan_bundle: str | None | UndefinedType = Undefined,
                            trunk_groups: TrunkGroups | UndefinedType = Undefined,
                            evpn_l2_multi_domain: bool | None | UndefinedType = Undefined,
                            evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                            vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                            bgp: Bgp | UndefinedType = Undefined,
                            private_vlan: PrivateVlan | UndefinedType = Undefined,
                        ) -> None:
                            """
                            L2vlansItem.


                            Subclass of AvdModel.

                            Args:
                                id: VLAN ID.
                                name: VLAN name.
                                profile:
                                   L2VLAN profile name.
                                   The profile must be defined under `l2vlan_profiles`. The profile may refer to
                                   another l2vlan_profile as it's `parent_profile` to inherit settings in up to two levels (l2vlan ->
                                   l2vlan_profile -> l2vlan_parent_profile).
                                tags:
                                   Tags leveraged for networks services filtering.
                                   Tags are matched against filter.tags defined under
                                   node type settings.
                                   Tags are also matched against the node_group name under node type settings.
                                   Subclass of AvdList with `str` items.
                                address_locking: address_locking
                                vni_override:
                                   By default the VNI will be derived from mac_vrf_vni_base.
                                   The vni_override, allows to override this
                                   value and statically define it.
                                rt_override:
                                   By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                                   The rt_override allows us
                                   to override this value and statically define it.
                                   rt_override will default to vni_override if set.
                                   rt_override supports two formats:
                                     - A single number which will be used in the RT fields instead of
                                   mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                                     - A full RT string with colon
                                   separator which will override the full RT.
                                rd_override:
                                   By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                                   The rt_override allows us
                                   to override this value and statically define it.
                                   rd_override will default to rt_override or
                                   vni_override if set.
                                   rd_override supports two formats:
                                     - A single number which will be used in the
                                   RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                                     -
                                   A full RD string with colon separator which will override the full RD.
                                vxlan: Extend this L2VLAN over VXLAN.
                                spanning_tree_priority:
                                   Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst`
                                   under node type settings.
                                   The default priority for rapid-PVST is set under the node type settings
                                   with `spanning_tree_priority` (default=32768).
                                evpn_vlan_bundle:
                                   Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                                   This setting overrides
                                   "evpn_vlan_bundle" set at tenant level.
                                   The common option "evpn_vlan_aware_bundles" is disregarded
                                   for this option.
                                trunk_groups: Subclass of AvdList with `str` items.
                                evpn_l2_multi_domain:
                                   Explicitly extend this VLAN to remote EVPN domains.
                                   Overrides
                                   `<network_services_key>[].evpn_l2_multi_domain`.
                                evpn_l2_multicast:
                                   Explicitly enable or disable evpn_l2_multicast to override setting of
                                   `<network_services_key>.[].evpn_l2_multicast.enabled`.
                                   When evpn_l2_multicast.enabled is set to true
                                   for a vlan or a tenant, igmp snooping and igmp snooping querier will always be enabled, overriding
                                   those individual settings.
                                   Requires `evpn_multicast` to also be set to `true`.


                                   Subclass of
                                   AvdModel.
                                vxlan_flood_multicast: Subclass of AvdModel.
                                igmp_snooping_enabled: Enable or disable IGMP snooping (Enabled by default on EOS).
                                igmp_snooping_querier:
                                   Enable igmp snooping querier, by default using IP address of Loopback 0.
                                   When enabled, igmp snooping
                                   querier will only be configured on l3 devices, i.e., uplink_type: p2p.


                                   Subclass of AvdModel.
                                bgp: Subclass of AvdModel.
                                private_vlan: Subclass of AvdModel.

                            """

                class L2vlans(AvdList[L2vlansItem]):
                    """Subclass of AvdList with `L2vlansItem` items."""

                L2vlans._item_type = L2vlansItem

                class PointToPointServicesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class SubinterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class PortChannel(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem}, "raw_eos_cli": {"type": str}}
                            structured_config: EosCliConfigGen.PortChannelInterfacesItem
                            """Custom structured config added on the Port-Channel subinterface for eos_cli_config_gen."""
                            raw_eos_cli: str | None
                            """EOS cli commands rendered on the Port-Channel subinterface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PortChannel.


                                    Subclass of AvdModel.

                                    Args:
                                        structured_config: Custom structured config added on the Port-Channel subinterface for eos_cli_config_gen.
                                        raw_eos_cli: EOS cli commands rendered on the Port-Channel subinterface.

                                    """

                        _fields: ClassVar[dict] = {
                            "number": {"type": int},
                            "port_channel": {"type": PortChannel},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            "raw_eos_cli": {"type": str},
                        }
                        number: int
                        """Subinterface number."""
                        port_channel: PortChannel
                        """
                        Settings to be applied to the Port-Channel subinterface.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config added on the Ethernet subinterface for eos_cli_config_gen."""
                        raw_eos_cli: str | None
                        """EOS cli commands rendered on the Ethernet subinterface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                number: int | UndefinedType = Undefined,
                                port_channel: PortChannel | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                SubinterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    number: Subinterface number.
                                    port_channel:
                                       Settings to be applied to the Port-Channel subinterface.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config added on the Ethernet subinterface for eos_cli_config_gen.
                                    raw_eos_cli: EOS cli commands rendered on the Ethernet subinterface.

                                """

                    class Subinterfaces(AvdIndexedList[int, SubinterfacesItem]):
                        """Subclass of AvdIndexedList with `SubinterfacesItem` items. Primary key is `number` (`int`)."""

                        _primary_key: ClassVar[str] = "number"

                    Subinterfaces._item_type = SubinterfacesItem

                    class EndpointsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Nodes(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Nodes._item_type = str

                        class Interfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Interfaces._item_type = str

                        class PortChannel(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"mode": {"type": str}, "short_esi": {"type": str}}
                            mode: Literal["active", "on"] | None
                            short_esi: str | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, mode: Literal["active", "on"] | None | UndefinedType = Undefined, short_esi: str | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    PortChannel.


                                    Subclass of AvdModel.

                                    Args:
                                        mode: mode
                                        short_esi: short_esi

                                    """

                        _fields: ClassVar[dict] = {
                            "id": {"type": int},
                            "nodes": {"type": Nodes},
                            "interfaces": {"type": Interfaces},
                            "port_channel": {"type": PortChannel},
                        }
                        id: int
                        """Pseudowire ID on this endpoint."""
                        nodes: Nodes
                        """
                        Usually one node. With ESI multihoming we support two nodes per pseudowire endpoint.

                        Subclass of
                        AvdList with `str` items.
                        """
                        interfaces: Interfaces
                        """
                        Interfaces patched to the pseudowire on this endpoints.
                        The list of interfaces is mapped to the list
                        of nodes, so they must have the same length.


                        Subclass of AvdList with `str` items.
                        """
                        port_channel: PortChannel
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                id: int | UndefinedType = Undefined,
                                nodes: Nodes | UndefinedType = Undefined,
                                interfaces: Interfaces | UndefinedType = Undefined,
                                port_channel: PortChannel | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EndpointsItem.


                                Subclass of AvdModel.

                                Args:
                                    id: Pseudowire ID on this endpoint.
                                    nodes:
                                       Usually one node. With ESI multihoming we support two nodes per pseudowire endpoint.

                                       Subclass of
                                       AvdList with `str` items.
                                    interfaces:
                                       Interfaces patched to the pseudowire on this endpoints.
                                       The list of interfaces is mapped to the list
                                       of nodes, so they must have the same length.


                                       Subclass of AvdList with `str` items.
                                    port_channel: Subclass of AvdModel.

                                """

                    class Endpoints(AvdList[EndpointsItem]):
                        """Subclass of AvdList with `EndpointsItem` items."""

                    Endpoints._item_type = EndpointsItem

                    _fields: ClassVar[dict] = {
                        "name": {"type": str},
                        "type": {"type": str, "default": "vpws-pseudowire"},
                        "subinterfaces": {"type": Subinterfaces},
                        "endpoints": {"type": Endpoints},
                        "lldp_disable": {"type": bool},
                    }
                    name: str
                    """Pseudowire name."""
                    type: Literal["vpws-pseudowire"]
                    """Default value: `"vpws-pseudowire"`"""
                    subinterfaces: Subinterfaces
                    """
                    Subinterfaces will create subinterfaces and additional pseudowires/patch panel config for each
                    endpoint.

                    Subclass of AvdIndexedList with `SubinterfacesItem` items. Primary key is `number`
                    (`int`).
                    """
                    endpoints: Endpoints
                    """
                    Pseudowire terminating endpoints. Must have exactly two items.

                    Subclass of AvdList with
                    `EndpointsItem` items.
                    """
                    lldp_disable: bool | None
                    """Disable LLDP RX/TX on port mode pseudowire services."""

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            name: str | UndefinedType = Undefined,
                            type: Literal["vpws-pseudowire"] | UndefinedType = Undefined,
                            subinterfaces: Subinterfaces | UndefinedType = Undefined,
                            endpoints: Endpoints | UndefinedType = Undefined,
                            lldp_disable: bool | None | UndefinedType = Undefined,
                        ) -> None:
                            """
                            PointToPointServicesItem.


                            Subclass of AvdModel.

                            Args:
                                name: Pseudowire name.
                                type: type
                                subinterfaces:
                                   Subinterfaces will create subinterfaces and additional pseudowires/patch panel config for each
                                   endpoint.

                                   Subclass of AvdIndexedList with `SubinterfacesItem` items. Primary key is `number`
                                   (`int`).
                                endpoints:
                                   Pseudowire terminating endpoints. Must have exactly two items.

                                   Subclass of AvdList with
                                   `EndpointsItem` items.
                                lldp_disable: Disable LLDP RX/TX on port mode pseudowire services.

                            """

                class PointToPointServices(AvdIndexedList[str, PointToPointServicesItem]):
                    """Subclass of AvdIndexedList with `PointToPointServicesItem` items. Primary key is `name` (`str`)."""

                    _primary_key: ClassVar[str] = "name"

                PointToPointServices._item_type = PointToPointServicesItem

                _fields: ClassVar[dict] = {
                    "name": {"type": str},
                    "mac_vrf_vni_base": {"type": int},
                    "mac_vrf_id_base": {"type": int},
                    "vlan_aware_bundle_number_base": {"type": int, "default": 0},
                    "pseudowire_rt_base": {"type": int},
                    "enable_mlag_ibgp_peering_vrfs": {"type": bool, "default": True},
                    "redistribute_mlag_ibgp_peering_vrfs": {"type": bool, "default": False},
                    "evpn_vlan_bundle": {"type": str},
                    "bgp_peer_groups": {"type": BgpPeerGroups},
                    "evpn_l2_multicast": {"type": EvpnL2Multicast},
                    "vxlan_flood_multicast": {"type": VxlanFloodMulticast},
                    "evpn_l3_multicast": {"type": EvpnL3Multicast},
                    "pim_rp_addresses": {"type": PimRpAddresses},
                    "igmp_snooping_querier": {"type": IgmpSnoopingQuerier},
                    "evpn_l2_multi_domain": {"type": bool, "default": True},
                    "vrfs": {"type": Vrfs},
                    "l2vlans": {"type": L2vlans},
                    "point_to_point_services": {"type": PointToPointServices},
                }
                name: str
                """
                Specify a tenant name.
                Tenant provide a construct to group L3 VRFs and L2 VLANs.
                Networks services
                can be filtered by tenant name.
                """
                mac_vrf_vni_base: int | None
                """
                Base number for MAC VRF VXLAN Network Identifier (required with VXLAN).
                VXLAN VNI is derived from
                the base number with simple addition.
                i.e. mac_vrf_vni_base = 10000, svi 100 = VNI 10100, svi 300 =
                VNI 10300.
                """
                mac_vrf_id_base: int | None
                """
                If not set, "mac_vrf_vni_base" will be used.
                Base number for MAC VRF RD/RT ID (Required unless
                mac_vrf_vni_base is set)
                ID is derived from the base number with simple addition.
                i.e.
                mac_vrf_id_base = 10000, svi 100 = RD/RT 10100, svi 300 = RD/RT 10300.
                """
                vlan_aware_bundle_number_base: int
                """
                Base number for VLAN aware bundle RD/RT.
                The "Assigned Number" part of RD/RT is derived from vrf_vni
                + vlan_aware_bundle_number_base.

                Default value: `0`
                """
                pseudowire_rt_base: int | None
                """
                Pseudowire RT base, used to generate route targets for VPWS services.
                Avoid overlapping route target
                spaces between different services.
                """
                enable_mlag_ibgp_peering_vrfs: bool
                """
                MLAG iBGP peering per VRF.
                By default an iBGP peering is configured per VRF between MLAG peers on
                separate VLANs.
                Setting `enable_mlag_ibgp_peering_vrfs` false under a tenant will change this
                default to prevent configuration of these peerings and VLANs for all VRFs in the tenant.
                This
                setting can be overridden per VRF.

                Default value: `True`
                """
                redistribute_mlag_ibgp_peering_vrfs: bool
                """
                Redistribute the connected subnet for the MLAG iBGP peering per VRF into overlay BGP.
                By default the
                iBGP peering subnet is not redistributed into the overlay routing protocol per VRF.
                Setting
                `redistribute_mlag_ibgp_peering_vrfs: true` under a tenant will change this default to
                redistribution of these subnets for all VRFs in the tenant.
                This setting can be overridden per VRF.

                Default value: `False`
                """
                evpn_vlan_bundle: str | None
                """
                Enable `evpn_vlan_bundle` for all l2vlans and SVIs under the tenant. This `evpn_vlan_bundle` should
                be present in `evpn_vlan_bundles`.
                """
                bgp_peer_groups: BgpPeerGroups
                """
                List of BGP peer groups definitions.
                This will configure BGP peer groups to be used inside the
                tenant VRF for peering with external devices.
                Since BGP peer groups are configured at higher BGP
                level, shared between VRFs,
                peer_group names should not overlap between VRFs.


                Subclass of
                AvdIndexedList with `BgpPeerGroupsItem` items. Primary key is `name` (`str`).
                """
                evpn_l2_multicast: EvpnL2Multicast
                """
                Enable EVPN L2 Multicast for all SVIs and l2vlans within Tenant.
                - Multicast group binding is
                created only for Multicast traffic. BULL traffic will use ingress-replication.
                - Configures binding
                between VXLAN, VLAN, and multicast group IPv4 address using the following formula:
                  <
                evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool > + < vlan_id - 1 > + <
                evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool_offset >.
                - The recommendation is to assign
                a /20 block within the 232.0.0.0/8 Source-Specific Multicast range.
                - Enables `redistribute igmp` on
                the router bgp MAC VRF.
                - When evpn_l2_multicast.enabled is true for a VLAN or a tenant, "igmp
                snooping" and "igmp snooping querier" will always be enabled - overriding those individual settings.
                - Requires `evpn_multicast` to also be set to `true`.


                Subclass of AvdModel.
                """
                vxlan_flood_multicast: VxlanFloodMulticast
                """Subclass of AvdModel."""
                evpn_l3_multicast: EvpnL3Multicast
                """
                Enable L3 Multicast for all SVIs and l3vlans within Tenant.
                - In the evpn-l3ls design type, this
                enables L3 EVPN Multicast (aka OISM)'.
                - Multicast group binding for VRF is created only for
                Multicast traffic. BULL traffic will use ingress-replication.
                - Configures binding between VXLAN,
                VLAN, and multicast group IPv4 address using the following formula:
                  <
                l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool > + < vrf_id - 1 > + <
                l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool_offset >.
                - The recommendation is to assign
                a /20 block within the 232.0.0.0/8 Source-Specific Multicast range.
                - If enabled on an SVI using the
                anycast default gateway feature, a diagnostic loopback (see below) MUST be configured to source IGMP
                traffic.
                - Enables `evpn multicast` on the router bgp VRF.
                - When enabled on an SVI:
                     - If
                switch is part of an MLAG pair, enables "pim ipv4 sparse-mode" on the SVI.
                     - If switch is
                standalone or A-A MH, enables "ip igmp" on the SVI.
                     - If "ip address virtual" is configured,
                enables "pim ipv4 local-interface" and uses the diagnostic Loopback defined in the VRF
                - Requires
                `evpn_multicast` to also be set to `true`.


                Subclass of AvdModel.
                """
                pim_rp_addresses: PimRpAddresses
                """
                For each group of nodes, allow configuration of RP Addresses & associated groups.


                Subclass of
                AvdList with `PimRpAddressesItem` items.
                """
                igmp_snooping_querier: IgmpSnoopingQuerier
                """
                Enable IGMP snooping querier for each SVI/l2vlan within tenant, by default using IP address of
                Loopback 0.
                When enabled, IGMP snooping querier will only be configured on L3 devices, i.e.,
                uplink_type: p2p.


                Subclass of AvdModel.
                """
                evpn_l2_multi_domain: bool
                """
                Explicitly extend all VLANs/VLAN-Aware Bundles inside the tenant to remote EVPN domains.

                Default value: `True`
                """
                vrfs: Vrfs
                """
                VRFs will only be configured on a node if any of the underlying objects like `svis`, `l3_interfaces`
                or `l3_port_channels` apply to the node.

                It is recommended to only define a VRF in one Tenant. If
                the same VRF name is used across multiple tenants and those tenants
                are accepted by `filter.tenants`
                on the node, any object set under the duplicate VRFs must either be unique or be an exact match.
                VRF "default" is partially supported under network-services. Currently the supported options for
                "default" vrf are route-target,
                route-distinguisher settings, structured_config, raw_eos_cli in bgp
                and SVIs are the only supported interface type.
                Vlan-aware-bundles are supported as well inside
                default vrf. OSPF is not supported currently.


                Subclass of AvdIndexedList with `VrfsItem` items.
                Primary key is `name` (`str`).
                """
                l2vlans: L2vlans
                """
                Define L2 network services organized by VLAN ID.

                Subclass of AvdList with `L2vlansItem` items.
                """
                point_to_point_services: PointToPointServices
                """
                Point to point services (pseudowires).
                Only supported for node types with "network_services.l1:
                true".
                By default this is only set for node type "pe" with "design.type: mpls"


                Subclass of
                AvdIndexedList with `PointToPointServicesItem` items. Primary key is `name` (`str`).
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        name: str | UndefinedType = Undefined,
                        mac_vrf_vni_base: int | None | UndefinedType = Undefined,
                        mac_vrf_id_base: int | None | UndefinedType = Undefined,
                        vlan_aware_bundle_number_base: int | UndefinedType = Undefined,
                        pseudowire_rt_base: int | None | UndefinedType = Undefined,
                        enable_mlag_ibgp_peering_vrfs: bool | UndefinedType = Undefined,
                        redistribute_mlag_ibgp_peering_vrfs: bool | UndefinedType = Undefined,
                        evpn_vlan_bundle: str | None | UndefinedType = Undefined,
                        bgp_peer_groups: BgpPeerGroups | UndefinedType = Undefined,
                        evpn_l2_multicast: EvpnL2Multicast | UndefinedType = Undefined,
                        vxlan_flood_multicast: VxlanFloodMulticast | UndefinedType = Undefined,
                        evpn_l3_multicast: EvpnL3Multicast | UndefinedType = Undefined,
                        pim_rp_addresses: PimRpAddresses | UndefinedType = Undefined,
                        igmp_snooping_querier: IgmpSnoopingQuerier | UndefinedType = Undefined,
                        evpn_l2_multi_domain: bool | UndefinedType = Undefined,
                        vrfs: Vrfs | UndefinedType = Undefined,
                        l2vlans: L2vlans | UndefinedType = Undefined,
                        point_to_point_services: PointToPointServices | UndefinedType = Undefined,
                    ) -> None:
                        """
                        NetworkServicesItem.


                        Subclass of AvdModel.

                        Args:
                            name:
                               Specify a tenant name.
                               Tenant provide a construct to group L3 VRFs and L2 VLANs.
                               Networks services
                               can be filtered by tenant name.
                            mac_vrf_vni_base:
                               Base number for MAC VRF VXLAN Network Identifier (required with VXLAN).
                               VXLAN VNI is derived from
                               the base number with simple addition.
                               i.e. mac_vrf_vni_base = 10000, svi 100 = VNI 10100, svi 300 =
                               VNI 10300.
                            mac_vrf_id_base:
                               If not set, "mac_vrf_vni_base" will be used.
                               Base number for MAC VRF RD/RT ID (Required unless
                               mac_vrf_vni_base is set)
                               ID is derived from the base number with simple addition.
                               i.e.
                               mac_vrf_id_base = 10000, svi 100 = RD/RT 10100, svi 300 = RD/RT 10300.
                            vlan_aware_bundle_number_base:
                               Base number for VLAN aware bundle RD/RT.
                               The "Assigned Number" part of RD/RT is derived from vrf_vni
                               + vlan_aware_bundle_number_base.
                            pseudowire_rt_base:
                               Pseudowire RT base, used to generate route targets for VPWS services.
                               Avoid overlapping route target
                               spaces between different services.
                            enable_mlag_ibgp_peering_vrfs:
                               MLAG iBGP peering per VRF.
                               By default an iBGP peering is configured per VRF between MLAG peers on
                               separate VLANs.
                               Setting `enable_mlag_ibgp_peering_vrfs` false under a tenant will change this
                               default to prevent configuration of these peerings and VLANs for all VRFs in the tenant.
                               This
                               setting can be overridden per VRF.
                            redistribute_mlag_ibgp_peering_vrfs:
                               Redistribute the connected subnet for the MLAG iBGP peering per VRF into overlay BGP.
                               By default the
                               iBGP peering subnet is not redistributed into the overlay routing protocol per VRF.
                               Setting
                               `redistribute_mlag_ibgp_peering_vrfs: true` under a tenant will change this default to
                               redistribution of these subnets for all VRFs in the tenant.
                               This setting can be overridden per VRF.
                            evpn_vlan_bundle:
                               Enable `evpn_vlan_bundle` for all l2vlans and SVIs under the tenant. This `evpn_vlan_bundle` should
                               be present in `evpn_vlan_bundles`.
                            bgp_peer_groups:
                               List of BGP peer groups definitions.
                               This will configure BGP peer groups to be used inside the
                               tenant VRF for peering with external devices.
                               Since BGP peer groups are configured at higher BGP
                               level, shared between VRFs,
                               peer_group names should not overlap between VRFs.


                               Subclass of
                               AvdIndexedList with `BgpPeerGroupsItem` items. Primary key is `name` (`str`).
                            evpn_l2_multicast:
                               Enable EVPN L2 Multicast for all SVIs and l2vlans within Tenant.
                               - Multicast group binding is
                               created only for Multicast traffic. BULL traffic will use ingress-replication.
                               - Configures binding
                               between VXLAN, VLAN, and multicast group IPv4 address using the following formula:
                                 <
                               evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool > + < vlan_id - 1 > + <
                               evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool_offset >.
                               - The recommendation is to assign
                               a /20 block within the 232.0.0.0/8 Source-Specific Multicast range.
                               - Enables `redistribute igmp` on
                               the router bgp MAC VRF.
                               - When evpn_l2_multicast.enabled is true for a VLAN or a tenant, "igmp
                               snooping" and "igmp snooping querier" will always be enabled - overriding those individual settings.
                               - Requires `evpn_multicast` to also be set to `true`.


                               Subclass of AvdModel.
                            vxlan_flood_multicast: Subclass of AvdModel.
                            evpn_l3_multicast:
                               Enable L3 Multicast for all SVIs and l3vlans within Tenant.
                               - In the evpn-l3ls design type, this
                               enables L3 EVPN Multicast (aka OISM)'.
                               - Multicast group binding for VRF is created only for
                               Multicast traffic. BULL traffic will use ingress-replication.
                               - Configures binding between VXLAN,
                               VLAN, and multicast group IPv4 address using the following formula:
                                 <
                               l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool > + < vrf_id - 1 > + <
                               l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool_offset >.
                               - The recommendation is to assign
                               a /20 block within the 232.0.0.0/8 Source-Specific Multicast range.
                               - If enabled on an SVI using the
                               anycast default gateway feature, a diagnostic loopback (see below) MUST be configured to source IGMP
                               traffic.
                               - Enables `evpn multicast` on the router bgp VRF.
                               - When enabled on an SVI:
                                    - If
                               switch is part of an MLAG pair, enables "pim ipv4 sparse-mode" on the SVI.
                                    - If switch is
                               standalone or A-A MH, enables "ip igmp" on the SVI.
                                    - If "ip address virtual" is configured,
                               enables "pim ipv4 local-interface" and uses the diagnostic Loopback defined in the VRF
                               - Requires
                               `evpn_multicast` to also be set to `true`.


                               Subclass of AvdModel.
                            pim_rp_addresses:
                               For each group of nodes, allow configuration of RP Addresses & associated groups.


                               Subclass of
                               AvdList with `PimRpAddressesItem` items.
                            igmp_snooping_querier:
                               Enable IGMP snooping querier for each SVI/l2vlan within tenant, by default using IP address of
                               Loopback 0.
                               When enabled, IGMP snooping querier will only be configured on L3 devices, i.e.,
                               uplink_type: p2p.


                               Subclass of AvdModel.
                            evpn_l2_multi_domain: Explicitly extend all VLANs/VLAN-Aware Bundles inside the tenant to remote EVPN domains.
                            vrfs:
                               VRFs will only be configured on a node if any of the underlying objects like `svis`, `l3_interfaces`
                               or `l3_port_channels` apply to the node.

                               It is recommended to only define a VRF in one Tenant. If
                               the same VRF name is used across multiple tenants and those tenants
                               are accepted by `filter.tenants`
                               on the node, any object set under the duplicate VRFs must either be unique or be an exact match.
                               VRF "default" is partially supported under network-services. Currently the supported options for
                               "default" vrf are route-target,
                               route-distinguisher settings, structured_config, raw_eos_cli in bgp
                               and SVIs are the only supported interface type.
                               Vlan-aware-bundles are supported as well inside
                               default vrf. OSPF is not supported currently.


                               Subclass of AvdIndexedList with `VrfsItem` items.
                               Primary key is `name` (`str`).
                            l2vlans:
                               Define L2 network services organized by VLAN ID.

                               Subclass of AvdList with `L2vlansItem` items.
                            point_to_point_services:
                               Point to point services (pseudowires).
                               Only supported for node types with "network_services.l1:
                               true".
                               By default this is only set for node type "pe" with "design.type: mpls"


                               Subclass of
                               AvdIndexedList with `PointToPointServicesItem` items. Primary key is `name` (`str`).

                        """

            class NetworkServices(AvdIndexedList[str, NetworkServicesItem]):
                """Subclass of AvdIndexedList with `NetworkServicesItem` items. Primary key is `name` (`str`)."""

                _primary_key: ClassVar[str] = "name"

            NetworkServices._item_type = NetworkServicesItem

            _fields: ClassVar[dict] = {"key": {"type": str}, "value": {"type": NetworkServices}}
            _field_to_key_map: ClassVar[dict] = {"value": "network_services_keys_name"}
            _key_to_field_map: ClassVar[dict] = {"network_services_keys_name": "value"}
            key: str
            """Key used as dynamic key"""
            value: NetworkServices
            """Value of dynamic key"""

            if TYPE_CHECKING:

                def __init__(self, *, key: str | UndefinedType = Undefined, value: NetworkServices | UndefinedType = Undefined) -> None:
                    """
                    DynamicNetworkServicesItem.


                    Args:
                        key: Key used as dynamic key
                        value: Value of dynamic key

                    """

        class DynamicNetworkServices(AvdIndexedList[str, DynamicNetworkServicesItem]):
            _primary_key: ClassVar[str] = "key"

        DynamicNetworkServices._item_type = DynamicNetworkServicesItem

        class DynamicNodeTypesItem(AvdModel):
            class NodeTypes(AvdModel):
                """Subclass of AvdModel."""

                class Defaults(AvdModel):
                    """Subclass of AvdModel."""

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        class GroupsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                            name: str
                            """Tracking group name."""
                            recovery_delay: int | None
                            """default -> platform_settings_mlag_reload_delay -> 300."""
                            links_minimum: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    recovery_delay: int | None | UndefinedType = Undefined,
                                    links_minimum: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    GroupsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Tracking group name.
                                        recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                        links_minimum: links_minimum

                                    """

                        class Groups(AvdIndexedList[str, GroupsItem]):
                            """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        Groups._item_type = GroupsItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        groups: Groups
                        """
                        Link Tracking Groups.
                        By default a single group named "LT_GROUP1" is defined with default values.
                        Any groups defined under "groups" will replace the default.


                        Subclass of AvdIndexedList with
                        `GroupsItem` items. Primary key is `name` (`str`).

                        Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    groups:
                                       Link Tracking Groups.
                                       By default a single group named "LT_GROUP1" is defined with default values.
                                       Any groups defined under "groups" will replace the default.


                                       Subclass of AvdIndexedList with
                                       `GroupsItem` items. Primary key is `name` (`str`).

                                """

                    class LacpPortIdRange(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "size": {"type": int, "default": 128},
                            "offset": {"type": int, "default": 0},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        size: int
                        """
                        Recommended size > = number of ports in the switch.

                        Default value: `128`
                        """
                        offset: int
                        """
                        Offset is used to avoid overlapping port-id ranges of different switches.
                        Useful when a "connected-
                        endpoint" is connected to switches in different "node_groups".

                        Default value: `0`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                size: int | UndefinedType = Undefined,
                                offset: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LacpPortIdRange.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    size: Recommended size > = number of ports in the switch.
                                    offset:
                                       Offset is used to avoid overlapping port-id ranges of different switches.
                                       Useful when a "connected-
                                       endpoint" is connected to switches in different "node_groups".

                                """

                    class UplinkInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkInterfaces._item_type = str

                    class UplinkSwitchInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitchInterfaces._item_type = str

                    class UplinkSwitches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitches._item_type = str

                    class UplinkPtp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                        enable: bool
                        """Default value: `False`"""

                        if TYPE_CHECKING:

                            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                """
                                UplinkPtp.


                                Subclass of AvdModel.

                                Args:
                                    enable: enable

                                """

                    class UplinkMacsec(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}}
                        profile: str | None

                        if TYPE_CHECKING:

                            def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                """
                                UplinkMacsec.


                                Subclass of AvdModel.

                                Args:
                                    profile: profile

                                """

                    class BgpDefaults(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    BgpDefaults._item_type = str

                    class EvpnRouteServers(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EvpnRouteServers._item_type = str

                    class Filter(AvdModel):
                        """Subclass of AvdModel."""

                        class Tenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tenants._item_type = str

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class AllowVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AllowVrfs._item_type = str

                        class DenyVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DenyVrfs._item_type = str

                        class AlwaysIncludeVrfsInTenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AlwaysIncludeVrfsInTenants._item_type = str

                        _fields: ClassVar[dict] = {
                            "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                            "only_vlans_in_use": {"type": bool, "default": False},
                        }
                        tenants: Tenants
                        """
                        Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                        Tenants (default).
                        This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        tags: Tags
                        """
                        Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        allow_vrfs: AllowVrfs
                        """
                        Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                        (default).
                        This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                        Subclass of
                        AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        deny_vrfs: DenyVrfs
                        """
                        Prevent configuration of Network Services defined under these VRFs.
                        This list prevents the given
                        VRFs to be included by any other filtering mechanism.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                        """
                        List of tenants where VRFs will be configured even if VLANs are not included in tags.
                        Useful for L3
                        "border" leaf.


                        Subclass of AvdList with `str` items.
                        """
                        only_vlans_in_use: bool
                        """
                        Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                        Note! This
                        feature only considers configuration managed by eos_designs.
                        This excludes structured_config,
                        custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                        Default value: `False`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                tenants: Tenants | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                only_vlans_in_use: bool | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Filter.


                                Subclass of AvdModel.

                                Args:
                                    tenants:
                                       Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                       Tenants (default).
                                       This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                       Subclass of AvdList with `str` items.
                                    tags:
                                       Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                       Subclass of AvdList with `str` items.
                                    allow_vrfs:
                                       Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                       (default).
                                       This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                       Subclass of
                                       AvdList with `str` items.
                                    deny_vrfs:
                                       Prevent configuration of Network Services defined under these VRFs.
                                       This list prevents the given
                                       VRFs to be included by any other filtering mechanism.

                                       Subclass of AvdList with `str` items.
                                    always_include_vrfs_in_tenants:
                                       List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                       Useful for L3
                                       "border" leaf.


                                       Subclass of AvdList with `str` items.
                                    only_vlans_in_use:
                                       Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                       Note! This
                                       feature only considers configuration managed by eos_designs.
                                       This excludes structured_config,
                                       custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                """

                    class EvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote EVPN GW server."""
                            ip_address: str | None
                            """Peering IP of remote Route Server."""
                            bgp_as: str | None
                            """
                            Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                            interpreted as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    bgp_as: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote EVPN GW server.
                                        ip_address: Peering IP of remote Route Server.
                                        bgp_as:
                                           Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                           interpreted as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        class EvpnL2(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                            enabled: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL2.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class EvpnL3(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                            enabled: bool
                            """Default value: `False`"""
                            inter_domain: bool
                            """Default value: `True`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        inter_domain: inter_domain

                                    """

                        class AllActiveMultihoming(AvdModel):
                            """Subclass of AvdModel."""

                            class EvpnEthernetSegment(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                identifier: str
                                """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                rt_import: str
                                """Low-order 6 bytes of ES-Import Route Target."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnEthernetSegment.


                                        Subclass of AvdModel.

                                        Args:
                                            identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                            rt_import: Low-order 6 bytes of ES-Import Route Target.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "enable_d_path": {"type": bool, "default": True},
                                "evpn_domain_id_local": {"type": str},
                                "evpn_domain_id_remote": {"type": str},
                                "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                            }
                            enabled: bool
                            """Enable Active Active Multihoming resiliency model."""
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            evpn_domain_id_local: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_domain_id_remote: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_ethernet_segment: EvpnEthernetSegment
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    evpn_domain_id_local: str | UndefinedType = Undefined,
                                    evpn_domain_id_remote: str | UndefinedType = Undefined,
                                    evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AllActiveMultihoming.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable Active Active Multihoming resiliency model.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_ethernet_segment: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "remote_peers": {"type": RemotePeers},
                            "evpn_l2": {"type": EvpnL2},
                            "evpn_l3": {"type": EvpnL3},
                            "all_active_multihoming": {"type": AllActiveMultihoming},
                        }
                        remote_peers: RemotePeers
                        """
                        Define remote peers of the EVPN VXLAN Gateway.
                        If the hostname can be found in the inventory,
                        ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                        If the
                        peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                        Subclass
                        of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                        """
                        evpn_l2: EvpnL2
                        """
                        Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                        Subclass of AvdModel.
                        """
                        evpn_l3: EvpnL3
                        """
                        Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                        Subclass of AvdModel.
                        """
                        all_active_multihoming: AllActiveMultihoming
                        """
                        Enable Active Active Multihoming architecture for EVPN Gateways.
                        Not supported with MLAG or IPVPN
                        Gateway. Requires EVPN L3 inter-domain to be enabled.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                                evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    remote_peers:
                                       Define remote peers of the EVPN VXLAN Gateway.
                                       If the hostname can be found in the inventory,
                                       ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                       If the
                                       peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                       Subclass
                                       of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                    evpn_l2:
                                       Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                       Subclass of AvdModel.
                                    evpn_l3:
                                       Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                       Subclass of AvdModel.
                                    all_active_multihoming:
                                       Enable Active Active Multihoming architecture for EVPN Gateways.
                                       Not supported with MLAG or IPVPN
                                       Gateway. Requires EVPN L3 inter-domain to be enabled.

                                       Subclass of AvdModel.

                                """

                    class IpvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class AddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AddressFamilies._item_type = str

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote IPVPN Peer."""
                            ip_address: str
                            """Peering IP of remote IPVPN Peer."""
                            bgp_as: str
                            """
                            Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For
                            asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                            as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | UndefinedType = Undefined,
                                    bgp_as: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote IPVPN Peer.
                                        ip_address: Peering IP of remote IPVPN Peer.
                                        bgp_as:
                                           Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For
                                           asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                           as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "evpn_domain_id": {"type": str, "default": "65535:1"},
                            "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                            "enable_d_path": {"type": bool, "default": True},
                            "maximum_routes": {"type": int, "default": 0},
                            "local_as": {"type": str},
                            "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                            "remote_peers": {"type": RemotePeers},
                        }
                        enabled: bool
                        evpn_domain_id: str
                        """
                        Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:1"`
                        """
                        ipvpn_domain_id: str
                        """
                        Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:2"`
                        """
                        enable_d_path: bool
                        """
                        Enable D-path for use with BGP bestpath selection algorithm.

                        Default value: `True`
                        """
                        maximum_routes: int
                        """
                        Maximum routes to accept from IPVPN remote peers.

                        Default value: `0`
                        """
                        local_as: str | None
                        """
                        Local BGP AS applied to peering with IPVPN remote peers.
                        BGP AS <1-4294967295> or AS number in asdot
                        notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes,
                        to prevent it from being interpreted as a float number.
                        """
                        address_families: AddressFamilies
                        """
                        IPVPN address families to enable for remote peers.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                        """
                        remote_peers: RemotePeers
                        """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                evpn_domain_id: str | UndefinedType = Undefined,
                                ipvpn_domain_id: str | UndefinedType = Undefined,
                                enable_d_path: bool | UndefinedType = Undefined,
                                maximum_routes: int | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                address_families: AddressFamilies | UndefinedType = Undefined,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                    ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                    enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                    maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                    local_as:
                                       Local BGP AS applied to peering with IPVPN remote peers.
                                       BGP AS <1-4294967295> or AS number in asdot
                                       notation "<1-65535>.<0-65535>".
                                       For asdot notation in YAML inputs, the value must be put in quotes,
                                       to prevent it from being interpreted as a float number.
                                    address_families:
                                       IPVPN address families to enable for remote peers.

                                       Subclass of AvdList with `str` items.
                                    remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                """

                    class MlagInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MlagInterfaces._item_type = str

                    class OverlayAddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    OverlayAddressFamilies._item_type = str

                    class MplsRouteReflectors(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MplsRouteReflectors._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        class Uplinks(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Uplinks._item_type = str

                        class Dscp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                            general_messages: int | None
                            event_messages: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, general_messages: int | None | UndefinedType = Undefined, event_messages: int | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Dscp.


                                    Subclass of AvdModel.

                                    Args:
                                        general_messages: general_messages
                                        event_messages: event_messages

                                    """

                        class Monitor(AvdModel):
                            """Subclass of AvdModel."""

                            class Threshold(AvdModel):
                                """Subclass of AvdModel."""

                                class Drop(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                    offset_from_master: int | None
                                    mean_path_delay: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | None | UndefinedType = Undefined,
                                            mean_path_delay: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Drop.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay

                                            """

                                _fields: ClassVar[dict] = {
                                    "offset_from_master": {"type": int, "default": 250},
                                    "mean_path_delay": {"type": int, "default": 1500},
                                    "drop": {"type": Drop},
                                }
                                offset_from_master: int
                                """Default value: `250`"""
                                mean_path_delay: int
                                """Default value: `1500`"""
                                drop: Drop
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        offset_from_master: int | UndefinedType = Undefined,
                                        mean_path_delay: int | UndefinedType = Undefined,
                                        drop: Drop | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Threshold.


                                        Subclass of AvdModel.

                                        Args:
                                            offset_from_master: offset_from_master
                                            mean_path_delay: mean_path_delay
                                            drop: Subclass of AvdModel.

                                        """

                            class MissingMessage(AvdModel):
                                """Subclass of AvdModel."""

                                class Intervals(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                    announce: int | None
                                    follow_up: int | None
                                    sync: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            announce: int | None | UndefinedType = Undefined,
                                            follow_up: int | None | UndefinedType = Undefined,
                                            sync: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Intervals.


                                            Subclass of AvdModel.

                                            Args:
                                                announce: announce
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                class SequenceIds(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "enabled": {"type": bool, "default": True},
                                        "announce": {"type": int, "default": 3},
                                        "delay_resp": {"type": int, "default": 3},
                                        "follow_up": {"type": int, "default": 3},
                                        "sync": {"type": int, "default": 3},
                                    }
                                    enabled: bool
                                    """Default value: `True`"""
                                    announce: int
                                    """Default value: `3`"""
                                    delay_resp: int
                                    """Default value: `3`"""
                                    follow_up: int
                                    """Default value: `3`"""
                                    sync: int
                                    """Default value: `3`"""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            enabled: bool | UndefinedType = Undefined,
                                            announce: int | UndefinedType = Undefined,
                                            delay_resp: int | UndefinedType = Undefined,
                                            follow_up: int | UndefinedType = Undefined,
                                            sync: int | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            SequenceIds.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                announce: announce
                                                delay_resp: delay_resp
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                intervals: Intervals
                                """Subclass of AvdModel."""
                                sequence_ids: SequenceIds
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        MissingMessage.


                                        Subclass of AvdModel.

                                        Args:
                                            intervals: Subclass of AvdModel.
                                            sequence_ids: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": True},
                                "threshold": {"type": Threshold},
                                "missing_message": {"type": MissingMessage},
                            }
                            enabled: bool
                            """Default value: `True`"""
                            threshold: Threshold
                            """Subclass of AvdModel."""
                            missing_message: MissingMessage
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    threshold: Threshold | UndefinedType = Undefined,
                                    missing_message: MissingMessage | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Monitor.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        threshold: Subclass of AvdModel.
                                        missing_message: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "profile": {"type": str},
                            "uplinks": {"type": Uplinks},
                            "mlag": {"type": bool, "default": False},
                            "domain": {"type": int},
                            "priority1": {"type": int},
                            "priority2": {"type": int},
                            "auto_clock_identity": {"type": bool},
                            "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                            "clock_identity": {"type": str},
                            "source_ip": {"type": str},
                            "mode": {"type": str, "default": "boundary"},
                            "mode_one_step": {"type": bool, "default": False},
                            "ttl": {"type": int},
                            "forward_unicast": {"type": bool, "default": False},
                            "forward_v1": {"type": bool},
                            "dscp": {"type": Dscp},
                            "monitor": {"type": Monitor},
                        }
                        enabled: bool | None
                        profile: str | None
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"
                        """
                        uplinks: Uplinks
                        """Subclass of AvdList with `str` items."""
                        mlag: bool
                        """
                        Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                        configured on the MLAG peer-link port-channel.

                        Default value: `False`
                        """
                        domain: int | None
                        priority1: int | None
                        """default -> automatically set based on node_type."""
                        priority2: int | None
                        """default -> (node_id modulus 256)."""
                        auto_clock_identity: bool | None
                        """
                        If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                        default EOS behaviour, simply disable the automatic PTP clock identity.
                        default ->
                        (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                        HEX).
                        """
                        clock_identity_prefix: str
                        """
                        PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                        By default the 3-byte prefix is "00:1C:73".
                        This
                        can be overridden if auto_clock_identity is set to true (which is the default).

                        Default value: `"00:1C:73"`
                        """
                        clock_identity: str | None
                        """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                        source_ip: str | None
                        """
                        By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                        relevant SVI, which is the recommended behaviour.
                        This can be set manually if required, for example,
                        to a value of "10.1.2.3".
                        """
                        mode: Literal["boundary"]
                        """Default value: `"boundary"`"""
                        mode_one_step: bool
                        """Default value: `False`"""
                        ttl: int | None
                        forward_unicast: bool
                        """
                        Enable PTP unicast forwarding.

                        Default value: `False`
                        """
                        forward_v1: bool | None
                        """Forward dataplane PTP V1 packets."""
                        dscp: Dscp
                        """Subclass of AvdModel."""
                        monitor: Monitor
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                uplinks: Uplinks | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                domain: int | None | UndefinedType = Undefined,
                                priority1: int | None | UndefinedType = Undefined,
                                priority2: int | None | UndefinedType = Undefined,
                                auto_clock_identity: bool | None | UndefinedType = Undefined,
                                clock_identity_prefix: str | UndefinedType = Undefined,
                                clock_identity: str | None | UndefinedType = Undefined,
                                source_ip: str | None | UndefinedType = Undefined,
                                mode: Literal["boundary"] | UndefinedType = Undefined,
                                mode_one_step: bool | UndefinedType = Undefined,
                                ttl: int | None | UndefinedType = Undefined,
                                forward_unicast: bool | UndefinedType = Undefined,
                                forward_v1: bool | None | UndefinedType = Undefined,
                                dscp: Dscp | UndefinedType = Undefined,
                                monitor: Monitor | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"
                                    uplinks: Subclass of AvdList with `str` items.
                                    mlag:
                                       Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                       configured on the MLAG peer-link port-channel.
                                    domain: domain
                                    priority1: default -> automatically set based on node_type.
                                    priority2: default -> (node_id modulus 256).
                                    auto_clock_identity:
                                       If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                       default EOS behaviour, simply disable the automatic PTP clock identity.
                                       default ->
                                       (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                       HEX).
                                    clock_identity_prefix:
                                       PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                       By default the 3-byte prefix is "00:1C:73".
                                       This
                                       can be overridden if auto_clock_identity is set to true (which is the default).
                                    clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                    source_ip:
                                       By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                       relevant SVI, which is the recommended behaviour.
                                       This can be set manually if required, for example,
                                       to a value of "10.1.2.3".
                                    mode: mode
                                    mode_one_step: mode_one_step
                                    ttl: ttl
                                    forward_unicast: Enable PTP unicast forwarding.
                                    forward_v1: Forward dataplane PTP V1 packets.
                                    dscp: Subclass of AvdModel.
                                    monitor: Subclass of AvdModel.

                                """

                    class WanHa(AvdModel):
                        """Subclass of AvdModel."""

                        class HaInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        HaInterfaces._item_type = str

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "ipsec": {"type": bool, "default": True},
                            "mtu": {"type": int, "default": 9194},
                            "ha_interfaces": {"type": HaInterfaces},
                            "ha_ipv4_pool": {"type": str},
                            "port_channel_id": {"type": int},
                            "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                            "flow_tracking": {"type": FlowTracking},
                        }
                        enabled: bool | None
                        """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                        ipsec: bool
                        """
                        Enable / Disable IPsec over HA path-group when HA is enabled.

                        Default value: `True`
                        """
                        mtu: int
                        """
                        Set MTU on WAN HA interfaces.

                        Default value: `9194`
                        """
                        ha_interfaces: HaInterfaces
                        """
                        Local WAN HA interfaces
                        Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                        Can be used to filter uplink interfaces when there are multiple uplinks.
                        Limitations:
                          Either all
                        interfaces must be uplinks or all interfaces must not be uplinks.
                          Only one interface is supported
                        for non uplinks.

                        Subclass of AvdList with `str` items.
                        """
                        ha_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                        first WAN router.
                        Not used for uplink interfaces.
                        """
                        port_channel_id: int | None
                        """Port-channel ID to use for direct HA."""
                        use_port_channel_for_direct_ha: bool
                        """
                        Enable or disable using a port-channel interface for direct HA when there is only one interface.
                        This feature was introduced in EOS 4.33.0F.

                        Default value: `True`
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                        setting.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                ipsec: bool | UndefinedType = Undefined,
                                mtu: int | UndefinedType = Undefined,
                                ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                port_channel_id: int | None | UndefinedType = Undefined,
                                use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                            ) -> None:
                                """
                                WanHa.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                    ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                    mtu: Set MTU on WAN HA interfaces.
                                    ha_interfaces:
                                       Local WAN HA interfaces
                                       Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                       Can be used to filter uplink interfaces when there are multiple uplinks.
                                       Limitations:
                                         Either all
                                       interfaces must be uplinks or all interfaces must not be uplinks.
                                         Only one interface is supported
                                       for non uplinks.

                                       Subclass of AvdList with `str` items.
                                    ha_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                       first WAN router.
                                       Not used for uplink interfaces.
                                    port_channel_id: Port-channel ID to use for direct HA.
                                    use_port_channel_for_direct_ha:
                                       Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                       This feature was introduced in EOS 4.33.0F.
                                    flow_tracking:
                                       Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                       setting.

                                       Subclass of AvdModel.

                                """

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class CvPathfinderInternetExit(AvdModel):
                            """Subclass of AvdModel."""

                            class PoliciesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                name: str
                                """Internet-exit policy name."""
                                tunnel_interface_numbers: str | None
                                """
                                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                interface.
                                Examples: '1-3' or '100,200,300'
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        PoliciesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Internet-exit policy name.
                                            tunnel_interface_numbers:
                                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                               interface.
                                               Examples: '1-3' or '100,200,300'

                                        """

                            class Policies(AvdIndexedList[str, PoliciesItem]):
                                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Policies._item_type = PoliciesItem

                            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                            policies: Policies
                            """
                            List of Internet-exit policies using this interface as exit.

                            Subclass of AvdIndexedList with
                            `PoliciesItem` items. Primary key is `name` (`str`).
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                    """
                                    CvPathfinderInternetExit.


                                    Subclass of AvdModel.

                                    Args:
                                        policies:
                                           List of Internet-exit policies using this interface as exit.

                                           Subclass of AvdIndexedList with
                                           `PoliciesItem` items. Primary key is `name` (`str`).

                                    """

                        class RxQueue(AvdModel):
                            """Subclass of AvdModel."""

                            class Workers(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Workers._item_type = str

                            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                            count: int | None
                            """
                            Number of receive queues.
                            The maximum value is determined by
                            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                            `platform` set on this device.
                            """
                            workers: Workers
                            """Subclass of AvdList with `str` items."""
                            mode: Literal["shared", "exclusive"] | None
                            """Mode applicable to the workers."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    count: int | None | UndefinedType = Undefined,
                                    workers: Workers | UndefinedType = Undefined,
                                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RxQueue.


                                    Subclass of AvdModel.

                                    Args:
                                        count:
                                           Number of receive queues.
                                           The maximum value is determined by
                                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                           `platform` set on this device.
                                        workers: Subclass of AvdList with `str` items.
                                        mode: Mode applicable to the workers.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "profile": {"type": str},
                            "name": {"type": str},
                            "description": {"type": str},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "speed": {"type": str},
                            "receive_bandwidth": {"type": int},
                            "transmit_bandwidth": {"type": int},
                            "peer": {"type": str},
                            "peer_interface": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                            "rx_queue": {"type": RxQueue},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        }
                        profile: str | None
                        """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                        name: str
                        """
                        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                        For a
                        subinterface, the parent physical interface is automatically created.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set a default description will be configured with '[<peer>[
                        <peer_interface>]]'.
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_interfaces.public_ip`
                                  -> `l3_interfaces.ip_address`

                        The determined Public IP is used
                        by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        speed: str | None
                        """
                        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                        <interface_speed>`.
                        """
                        receive_bandwidth: int | None
                        """
                        Maximum allowed receive bandwidth (download) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        transmit_bandwidth: int | None
                        """
                        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_interface: str | None
                        """The peer device interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdList with `StaticRoutesItem`
                        items.
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        cv_pathfinder_internet_exit: CvPathfinderInternetExit
                        """
                        PREVIEW: This key is in preview mode

                        Subclass of AvdModel.
                        """
                        rx_queue: RxQueue
                        """
                        Receive queue parameters for platform SFE interface profile.
                        This setting is ignored unless the
                        `platform_sfe_interface_profile.supported` is set as `true` under
                        `platform_settings.feature_support` for the `platform` set on this device.

                        Subclass of AvdModel.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config for the Ethernet interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | None | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                speed: str | None | UndefinedType = Undefined,
                                receive_bandwidth: int | None | UndefinedType = Undefined,
                                transmit_bandwidth: int | None | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_interface: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                rx_queue: RxQueue | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                    name:
                                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                       For a
                                       subinterface, the parent physical interface is automatically created.
                                    description:
                                       Interface description.
                                       If not set a default description will be configured with '[<peer>[
                                       <peer_interface>]]'.
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_interfaces.public_ip`
                                                 -> `l3_interfaces.ip_address`

                                       The determined Public IP is used
                                       by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    speed:
                                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                       <interface_speed>`.
                                    receive_bandwidth:
                                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    transmit_bandwidth:
                                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_interface: The peer device interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdList with `StaticRoutesItem`
                                       items.
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    cv_pathfinder_internet_exit:
                                       PREVIEW: This key is in preview mode

                                       Subclass of AvdModel.
                                    rx_queue:
                                       Receive queue parameters for platform SFE interface profile.
                                       This setting is ignored unless the
                                       `platform_sfe_interface_profile.supported` is set as `true` under
                                       `platform_settings.feature_support` for the `platform` set on this device.

                                       Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Ethernet interface.

                                """

                    class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                        """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "rx_queue": {"type": RxQueue},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                            """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                            _primary_key: ClassVar[str] = "prefix"

                        StaticRoutes._item_type = StaticRoutesItem

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_port_channels.public_ip`
                                  -> `l3_port_channels.ip_address`

                        The determined Public IP is
                        used by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdIndexedList with
                        `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config for the Port-Channel interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_port_channels.public_ip`
                                                 -> `l3_port_channels.ip_address`

                                       The determined Public IP is
                                       used by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdIndexedList with
                                       `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Port-Channel interface.

                                """

                    class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                        """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3PortChannels._item_type = L3PortChannelsItem

                    class UnderlayMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        class PimSm(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                            on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if also
                            enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_pim_sm`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable PIM sparse-mode on uplinks.
                            Requires node setting `underlay_multicast.pim_sm.enabled:
                            true` or, if unset, global `underlay_multicast_pim_sm: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                            Effective only when
                            node settings `underlay_multicast.pim_sm.uplinks: true`.

                            Subclass of AvdList with `str` items.
                            """
                            mlag: bool
                            """
                            Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PimSm.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                           on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if also
                                           enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_pim_sm`.
                                        uplinks:
                                           Enable/Disable PIM sparse-mode on uplinks.
                                           Requires node setting `underlay_multicast.pim_sm.enabled:
                                           true` or, if unset, global `underlay_multicast_pim_sm: true`
                                        uplink_interfaces:
                                           Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective only when
                                           node settings `underlay_multicast.pim_sm.uplinks: true`.

                                           Subclass of AvdList with `str` items.
                                        mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                    """

                        class Static(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures static multicast in the
                            underlay on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if
                            also enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_multicast`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable static multicast on uplinks.
                            Requires node setting
                            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                            Effective
                            only when node settings `underlay_multicast.static.uplinks: true`.

                            Subclass of AvdList with `str`
                            items.
                            """
                            mlag: bool
                            """
                            Configure static multicast in the underlay on MLAG L3 peer interfacee.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Static.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures static multicast in the
                                           underlay on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if
                                           also enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_multicast`.
                                        uplinks:
                                           Enable/Disable static multicast on uplinks.
                                           Requires node setting
                                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                        uplink_interfaces:
                                           Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective
                                           only when node settings `underlay_multicast.static.uplinks: true`.

                                           Subclass of AvdList with `str`
                                           items.
                                        mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                    """

                        _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                        pim_sm: PimSm
                        """Subclass of AvdModel."""
                        static: Static
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                """
                                UnderlayMulticast.


                                Subclass of AvdModel.

                                Args:
                                    pim_sm: Subclass of AvdModel.
                                    static: Subclass of AvdModel.

                                """

                    class DigitalTwin(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                        act_os_version: str | None
                        """
                        Desired ACT Digital Twin OS version.
                        Overrides global `digital_twin.fabric.act_os_version` flag.
                        """
                        mgmt_ip: str | None
                        """Desired management interface IPv4 address."""
                        act_internet_access: bool | None
                        """
                        Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                        This option
                        applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                        types.
                        ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        Overrides
                        global `digital_twin.fabric.act_internet_access` flag.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                act_os_version: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                act_internet_access: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DigitalTwin.


                                Subclass of AvdModel.

                                Args:
                                    act_os_version:
                                       Desired ACT Digital Twin OS version.
                                       Overrides global `digital_twin.fabric.act_os_version` flag.
                                    mgmt_ip: Desired management interface IPv4 address.
                                    act_internet_access:
                                       Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                       This option
                                       applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                       types.
                                       ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                       Overrides
                                       global `digital_twin.fabric.act_internet_access` flag.

                                """

                    _fields: ClassVar[dict] = {
                        "id": {"type": int},
                        "platform": {"type": str},
                        "mac_address": {"type": str},
                        "system_mac_address": {"type": str},
                        "serial_number": {"type": str},
                        "rack": {"type": str},
                        "mgmt_ip": {"type": str},
                        "mgmt_gateway": {"type": str},
                        "ipv6_mgmt_ip": {"type": str},
                        "ipv6_mgmt_gateway": {"type": str},
                        "mgmt_interface": {"type": str},
                        "link_tracking": {"type": LinkTracking},
                        "lacp_port_id_range": {"type": LacpPortIdRange},
                        "always_configure_ip_routing": {"type": bool, "default": False},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                        "uplink_type": {"type": str},
                        "uplink_ipv4_pool": {"type": str},
                        "uplink_ipv6_pool": {"type": str},
                        "uplink_interfaces": {"type": UplinkInterfaces},
                        "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                        "uplink_switches": {"type": UplinkSwitches},
                        "uplink_interface_speed": {"type": str},
                        "uplink_switch_interface_speed": {"type": str},
                        "uplink_mtu": {"type": int},
                        "max_uplink_switches": {"type": int},
                        "max_parallel_uplinks": {"type": int, "default": 1},
                        "uplink_bfd": {"type": bool, "default": False},
                        "uplink_native_vlan": {"type": int},
                        "uplink_ptp": {"type": UplinkPtp},
                        "uplink_macsec": {"type": UplinkMacsec},
                        "uplink_port_channel_id": {"type": int},
                        "uplink_switch_port_channel_id": {"type": int},
                        "uplink_structured_config": {"type": dict},
                        "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "short_esi": {"type": str},
                        "isis_system_id_prefix": {"type": str},
                        "isis_maximum_paths": {"type": int},
                        "is_type": {"type": str},
                        "node_sid_base": {"type": int, "default": 0},
                        "loopback_ipv4_pool": {"type": str},
                        "loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv4_pool": {"type": str},
                        "vtep_loopback_ipv6_pool": {"type": str},
                        "vtep_loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv6_address": {"type": str},
                        "loopback_ipv4_offset": {"type": int, "default": 0},
                        "router_id_pool": {"type": str},
                        "loopback_ipv6_pool": {"type": str},
                        "loopback_ipv6_offset": {"type": int, "default": 0},
                        "vtep": {"type": bool},
                        "vtep_loopback": {"type": str},
                        "bgp_as": {"type": str},
                        "bgp_defaults": {"type": BgpDefaults},
                        "evpn_role": {"type": str},
                        "evpn_route_servers": {"type": EvpnRouteServers},
                        "evpn_services_l2_only": {"type": bool, "default": False},
                        "filter": {"type": Filter},
                        "igmp_snooping_enabled": {"type": bool},
                        "evpn_gateway": {"type": EvpnGateway},
                        "ipvpn_gateway": {"type": IpvpnGateway},
                        "mlag": {"type": bool, "default": True},
                        "mlag_dual_primary_detection": {"type": bool, "default": False},
                        "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                        "mlag_interfaces": {"type": MlagInterfaces},
                        "mlag_interfaces_speed": {"type": str},
                        "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                        "mlag_peer_l3_ipv4_pool": {"type": str},
                        "mlag_peer_l3_ipv6_pool": {"type": str},
                        "mlag_peer_vlan": {"type": int, "default": 4094},
                        "mlag_peer_link_allowed_vlans": {"type": str},
                        "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                        "mlag_peer_ipv4_pool": {"type": str},
                        "mlag_peer_ipv6_pool": {"type": str},
                        "mlag_port_channel_id": {"type": int},
                        "mlag_domain_id": {"type": str},
                        "spanning_tree_mode": {"type": str},
                        "spanning_tree_priority": {"type": int, "default": 32768},
                        "spanning_tree_root_super": {"type": bool, "default": False},
                        "spanning_tree_mst_pvst_boundary": {"type": bool},
                        "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                        "virtual_router_mac_address": {"type": str},
                        "inband_mgmt_interface": {"type": str},
                        "inband_mgmt_vlan": {"type": int, "default": 4092},
                        "inband_mgmt_subnet": {"type": str},
                        "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                        "inband_mgmt_ip": {"type": str},
                        "inband_mgmt_gateway": {"type": str},
                        "inband_mgmt_ipv6_address": {"type": str},
                        "inband_mgmt_ipv6_subnet": {"type": str},
                        "inband_mgmt_ipv6_gateway": {"type": str},
                        "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                        "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                        "inband_mgmt_vrf": {"type": str, "default": "default"},
                        "inband_mgmt_mtu": {"type": int, "default": 1500},
                        "inband_ztp": {"type": bool, "default": False},
                        "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                        "mpls_overlay_role": {"type": str},
                        "overlay_address_families": {"type": OverlayAddressFamilies},
                        "mpls_route_reflectors": {"type": MplsRouteReflectors},
                        "bgp_cluster_id": {"type": str},
                        "ptp": {"type": Ptp},
                        "wan_role": {"type": str},
                        "cv_pathfinder_transit_mode": {"type": str},
                        "cv_pathfinder_region": {"type": str},
                        "cv_pathfinder_site": {"type": str},
                        "wan_ha": {"type": WanHa},
                        "dps_mss_ipv4": {"type": str, "default": "auto"},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "data_plane_cpu_allocation_max": {"type": int},
                        "flow_tracker_type": {"type": str},
                        "underlay_multicast": {"type": UnderlayMulticast},
                        "campus": {"type": str},
                        "campus_pod": {"type": str},
                        "campus_access_pod": {"type": str},
                        "cv_tags_topology_type": {"type": str},
                        "digital_twin": {"type": DigitalTwin},
                    }
                    id: int | None
                    """Unique identifier used for IP addressing and other algorithms."""
                    platform: str | None
                    """Arista platform family."""
                    mac_address: str | None
                    """Leverage to document management interface mac address."""
                    system_mac_address: str | None
                    """
                    System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                    Set to the same MAC address as
                    available in "show version" on the device.
                    "system_mac_address" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    serial_number: str | None
                    """
                    Set to the Serial Number of the device.
                    Only used for documentation purpose in the fabric
                    documentation and part of the structured_config.
                    "serial_number" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    rack: str | None
                    """Rack that the switch is located in (only used in snmp_settings location)."""
                    mgmt_ip: str | None
                    """Node management interface IPv4 address."""
                    mgmt_gateway: str | None
                    """
                    This key sets the management gateway for the device. It takes precedence over the global
                    `mgmt_gateway`.
                    """
                    ipv6_mgmt_ip: str | None
                    """Node management interface IPv6 address."""
                    ipv6_mgmt_gateway: str | None
                    """
                    This key sets the ipv6 management gateway for the device. It takes precedence over the global
                    `ipv6_mgmt_gateway`.
                    """
                    mgmt_interface: str | None
                    """
                    Management Interface Name.
                    Default -> platform_management_interface -> mgmt_interface ->
                    "Management1".
                    """
                    link_tracking: LinkTracking
                    """
                    This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                    the upstream interfaces.
                    Useful in EVPN multhoming designs.


                    Subclass of AvdModel.
                    """
                    lacp_port_id_range: LacpPortIdRange
                    """
                    This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                    number of nodes in the "node_group".
                    Unique LACP port-id ranges are recommended for EVPN Multihoming
                    designs.


                    Subclass of AvdModel.
                    """
                    always_configure_ip_routing: bool
                    """
                    Force configuration of "ip routing" even on L2 devices.
                    Use this to retain behavior of AVD versions
                    below 4.0.0.

                    Default value: `False`
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""
                    uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                    """
                    Override the default `uplink_type` set at the `node_type_key` level.
                    `uplink_type` must be "p2p" if
                    `vtep` or `underlay_router` is true for the `node_type_key` definition.
                    """
                    uplink_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    IPv4
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    IPv6
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_interfaces: UplinkInterfaces
                    """
                    Local uplink interfaces.
                    Each list item supports range syntax that can be expanded into a list of
                    interfaces.
                    If uplink_interfaces is not defined, platform-specific defaults (defined under
                    default_interfaces) will be used instead.
                    Please note that default_interfaces are not defined by
                    default, you should define these yourself.


                    Subclass of AvdList with `str` items.
                    """
                    uplink_switch_interfaces: UplinkSwitchInterfaces
                    """
                    Interfaces located on uplink switches.

                    Subclass of AvdList with `str` items.
                    """
                    uplink_switches: UplinkSwitches
                    """Subclass of AvdList with `str` items."""
                    uplink_interface_speed: str | None
                    """
                    Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                    (Uplink switch
                    interface speed can be overridden with `uplink_switch_interface_speed`).
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_switch_interface_speed: str | None
                    """
                    Set point-to-Point interface speed for the uplink switch interface only.
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_mtu: int | None
                    """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                    max_uplink_switches: int | None
                    """
                    Maximum number of uplink switches.
                    Changing this value may change IP Addressing on uplinks.
                    Can be
                    used to reserve IP space for future expansions.
                    """
                    max_parallel_uplinks: int
                    """
                    Number of parallel links towards uplink switches.
                    Changing this value may change interface naming on
                    uplinks (and corresponding downlinks).
                    Can be used to reserve interfaces for future parallel
                    uplinks.

                    Default value: `1`
                    """
                    uplink_bfd: bool
                    """
                    Enable bfd on uplink interfaces.

                    Default value: `False`
                    """
                    uplink_native_vlan: int | None
                    """
                    Only applicable to switches with layer-2 port-channel uplinks.
                    A suspended (disabled) vlan will be
                    created in both ends of the link unless the vlan is defined under network services.
                    By default the
                    uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                    """
                    uplink_ptp: UplinkPtp
                    """
                    Enable PTP on all infrastructure links.

                    Subclass of AvdModel.
                    """
                    uplink_macsec: UplinkMacsec
                    """
                    Enable MacSec on all uplinks.

                    Subclass of AvdModel.
                    """
                    uplink_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink Port-channel
                    ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                    For
                    example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [ Eth11/1, Eth22/1 ] -> ID 111
                    For
                    MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                    This
                    option overrides the default behavior and statically sets the local Port-channel ID.
                    Note! Make sure
                    the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                    value.
                    """
                    uplink_switch_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink switch Port-
                    channel ID will be set to the number of the first interface defined under
                    `uplink_switch_interfaces`.
                    For example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [
                    Eth11/1, Eth22/1 ] -> ID 111
                    For MLAG port-channels ID will be based on the lowest member interface
                    on the first MLAG switch.
                    This option overrides the default behavior and statically sets the Port-
                    channel ID on the uplink switch.
                    Note! Make sure the ID is unique and does not overlap with
                    autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between
                    1 and 2000 and both MLAG switches must have the same value.
                    """
                    uplink_structured_config: dict
                    """
                    Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                    When
                    uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                    for eos_cli_config_gen overrides the settings on the ethernet interface level.
                    When uplink_type ==
                    "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                    eos_cli_config_gen overrides the settings on the port-channel interface level.
                    "uplink_structured_config" is applied after "structured_config", so it can override
                    "structured_config" defined on node-level.
                    Note! The content of this dictionary is _not_ validated
                    by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                    """
                    uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_interfaces`."""
                    uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                    uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                    uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                    channel uplinks.
                    """
                    mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to MLAG peer link port-channel id.
                    Added under
                    port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the
                    port-channel interface level.
                    "mlag_port_channel_structured_config" is applied after
                    "structured_config", so it can override "structured_config" defined on node-level.
                    """
                    mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                    override "structured_config" defined on node-level.
                    """
                    mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                    can override "structured_config" defined on node-level.
                    """
                    short_esi: str | None
                    """
                    short_esi only valid for l2leaf devices using port-channel uplink.
                    Setting short_esi to "auto"
                    generates the short_esi automatically using a hash of configuration elements.
                    < 0000:0000:0000 |
                    auto >.
                    """
                    isis_system_id_prefix: str | None
                    """(4.4 hexadecimal)."""
                    isis_maximum_paths: int | None
                    """Number of path to configure in ECMP for ISIS."""
                    is_type: Literal["level-1-2", "level-1", "level-2"] | None
                    """Overrides `isis_default_is_type`."""
                    node_sid_base: int
                    """
                    Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                    Default value: `0`
                    """
                    loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for Loopback0.
                    When set, it takes precedence over `loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                    """
                    vtep_loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    vtep_loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    vtep_loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not
                    catch duplicates.
                    """
                    vtep_loopback_ipv6_address: str | None
                    """
                    IPv6 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv6_pool`.
                    Note: AVD does not check for validity of the IPv6 address and does not
                    catch duplicates.
                    """
                    loopback_ipv4_offset: int
                    """
                    Offset all assigned loopback IP addresses.
                    Required when the 'loopback_ipv4_pool' is the same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    router_id_pool: str | None
                    """
                    Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                    router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                    will not exist on the device.
                    """
                    loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    loopback_ipv6_offset: int
                    """
                    Offset all assigned loopback IPv6 addresses.
                    Required when the 'loopback_ipv6_pool' is same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    vtep: bool | None
                    """
                    Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                    Overrides VTEP
                    setting inherited from node_type_keys.
                    """
                    vtep_loopback: str | None
                    """Set VXLAN source interface."""
                    bgp_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    Required with eBGP.
                    """
                    bgp_defaults: BgpDefaults
                    """
                    List of EOS commands to apply to BGP daemon.

                    Subclass of AvdList with `str` items.
                    """
                    evpn_role: Literal["client", "server", "none"] | None
                    """
                    Acting role in EVPN control plane.
                    Default is set in node_type definition from node_type_keys.
                    """
                    evpn_route_servers: EvpnRouteServers
                    """
                    List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                    Subclass of AvdList with `str`
                    items.
                    """
                    evpn_services_l2_only: bool
                    """
                    Possibility to prevent configuration of Tenant VRFs and SVIs.
                    Override node definition
                    "network_services_l3" from node_type_keys.
                    This allows support for centralized routing.

                    Default value: `False`
                    """
                    filter: Filter
                    """
                    Filter L3 and L2 network services based on tenant and tags (and operation filter).
                    If filter is not
                    defined it will default to all.


                    Subclass of AvdModel.
                    """
                    igmp_snooping_enabled: bool | None
                    """Activate or deactivate IGMP snooping on device level."""
                    evpn_gateway: EvpnGateway
                    """
                    Node is acting as EVPN Multi-Domain Gateway.
                    New BGP peer-group is generated between EVPN GWs in
                    different domains or between GWs and Route Servers.
                    Name can be changed under
                    "bgp_peer_groups.evpn_overlay_core" variable.
                    L3 rechability for different EVPN GWs must be already
                    in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                    same Ansible inventory.


                    Subclass of AvdModel.
                    """
                    ipvpn_gateway: IpvpnGateway
                    """
                    Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                    this is "bgp_peer_groups.ipvpn_gateway_peers".
                    L3 Reachability is required for this to work, the
                    preferred method to establish underlay connectivity is to use core_interfaces.


                    Subclass of
                    AvdModel.
                    """
                    mlag: bool
                    """
                    Enable / Disable auto MLAG, when two nodes are defined in node group.

                    Default value: `True`
                    """
                    mlag_dual_primary_detection: bool
                    """
                    Enable / Disable MLAG dual primary detection.

                    Default value: `False`
                    """
                    mlag_ibgp_origin_incomplete: bool
                    """
                    Set origin of routes received from MLAG iBGP peer to incomplete.
                    The purpose is to optimize routing
                    for leaf loopbacks from spine perspective and
                    avoid suboptimal routing via peerlink for control
                    plane traffic.

                    Default value: `True`
                    """
                    mlag_interfaces: MlagInterfaces
                    """
                    Each list item supports range syntax that can be expanded into a list of interfaces.
                    Required when
                    MLAG leafs are present in the topology.


                    Subclass of AvdList with `str` items.
                    """
                    mlag_interfaces_speed: str | None
                    """
                    Set MLAG interface speed.
                    Speed should be set in the format `<interface_speed>` or `forced
                    <interface_speed>` or `auto <interface_speed>`.
                    """
                    mlag_peer_l3_vlan: int
                    """
                    Underlay L3 peering SVI interface id.
                    If set to 0 or the same vlan as mlag_peer_vlan, the
                    mlag_peer_vlan will be used for L3 peering.

                    Default value: `4093`
                    """
                    mlag_peer_l3_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_l3_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_vlan: int
                    """
                    MLAG Peer Link (control link) SVI interface id.

                    Default value: `4094`
                    """
                    mlag_peer_link_allowed_vlans: str | None
                    mlag_peer_address_family: Literal["ipv4", "ipv6"]
                    """
                    IP address family used to establish MLAG Peer Link (control link).
                    `ipv6` requires EOS version
                    4.31.1F or higher.
                    Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                    (ex. `mlag_peer_l3_vlan` set to 4094).

                    Default value: `"ipv4"`
                    """
                    mlag_peer_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                    """
                    mlag_peer_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                    """
                    mlag_port_channel_id: int | None
                    """
                    If not set, the mlag port-channel id is generated based on the digits of the first interface present
                    in 'mlag_interfaces'.
                    Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                    999999 > for EOS >= 4.25.0F.
                    """
                    mlag_domain_id: str | None
                    """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                    spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                    spanning_tree_priority: int
                    """
                    Spanning-tree priority configured for the selected mode.
                    For `rapid-pvst` the priority can also be
                    set per VLAN under network services.

                    Default value: `32768`
                    """
                    spanning_tree_root_super: bool
                    """Default value: `False`"""
                    spanning_tree_mst_pvst_boundary: bool | None
                    """Enable MST PVST border ports."""
                    spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                    """Specify range of port-ids to reserve for port-channels."""
                    virtual_router_mac_address: str | None
                    """Virtual router mac address for anycast gateway."""
                    inband_mgmt_interface: str | None
                    """
                    Pointer to interface used for inband management.
                    All configuration must be done using other data
                    models like network services or structured_config.
                    'inband_mgmt_interface' is only used to refer to
                    this interface as source in various management protocol settings (future feature).

                    On L2 switches,
                    this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                    """
                    inband_mgmt_vlan: int
                    """
                    VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                    uplinks).
                    When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                    switch as well as all 'uplink_switches'.
                    When using 'inband_mgmt_ip' the VLAN and SVI will only be
                    created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                    created using network services data models.

                    Default value: `4092`
                    """
                    inband_mgmt_subnet: str | None
                    """
                    Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                    ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      : <subnet> +
                    2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       :
                    <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                    GW on l2leafs : <subnet> + 1
                    Assign range
                    larger than total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ip' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_subnet_offset: int
                    """
                    Offset value to adjust the calculated inband management IP address within the subnet.
                    The assigned
                    IP will be computed by adding this offset to the device ID.

                    Default value: `0`
                    """
                    inband_mgmt_ip: str | None
                    """
                    IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                    If this is set the
                    VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN and SVI on
                    the parent switches must be created using network services data models.

                    This setting is applicable
                    to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                    is derived from 'inband_mgmt_subnet' if set.

                    This setting is applicable to L2 switches (switches
                    using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_address: str | None
                    """
                    IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                    If this
                    is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN
                    and SVI on the parent switches must be created using network services data models.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_subnet: str | None
                    """
                    Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                    on ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                    extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      :
                    <subnet> + 2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       : <subnet> + 3 + <l2leaf id>
                    GW on l2leafs : <subnet> + 1
                    Assign range larger than
                    total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf'.
                    Used when `inband_mgmt_ipv6_address` is set.
                    Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_description: str
                    """
                    Description configured on the Inband Management SVI.

                    This setting is only applied on the devices
                    where it is set, it does not automatically affect any parent/child devices configuration, so it must
                    be set on each applicable node/node-group/node-type as needed.

                    Default value: `"Inband Management"`
                    """
                    inband_mgmt_vlan_name: str
                    """
                    Name configured on the Inband Management VLAN.
                    This setting is only applied on the devices where it
                    is set, it does not automatically affect any parent/child devices configuration, so it must be set
                    on each applicable node/node-group/node-type as needed.

                    Default value: `"INBAND_MGMT"`
                    """
                    inband_mgmt_vrf: str
                    """
                    VRF configured on the Inband Management Interface.
                    The VRF is created if not already created by
                    other means.
                    This setting is only applied on the devices where it is set, it does not automatically
                    affect any parent/child devices configuration, so it must be set on each applicable node/node-
                    group/node-type as needed.

                    Default value: `"default"`
                    """
                    inband_mgmt_mtu: int
                    """
                    MTU configured on the Inband Management Interface.
                    This setting is only applied on the devices where
                    it is set, it does not automatically affect any parent/child devices configuration, so it must be
                    set on each applicable node/node-group/node-type as needed.

                    Default value: `1500`
                    """
                    inband_ztp: bool
                    """
                    Enable to configure upstream device with proper configuration to allow downstream devices to be
                    Zero-Touch-Provisioned over the uplink interfaces.
                    For L2 devices this setting also requires that
                    the `inband_mgmt_vlan` is set for the node.

                    PREVIEW: Support for L3 devices is marked as "preview",
                    meaning the data models or generated configuration can change at any time.

                    Default value: `False`
                    """
                    inband_ztp_lacp_fallback_delay: int
                    """
                    Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                    ZTP node.
                    This setting also requires that `inband_ztp` is set for the node.

                    Default value: `30`
                    """
                    mpls_overlay_role: Literal["client", "server", "none"] | None
                    """
                    Set the default mpls overlay role.
                    Acting role in overlay control plane.
                    """
                    overlay_address_families: OverlayAddressFamilies
                    """
                    Set the default overlay address families.


                    Subclass of AvdList with `str` items.
                    """
                    mpls_route_reflectors: MplsRouteReflectors
                    """
                    List of inventory hostname acting as MPLS route-reflectors.

                    Subclass of AvdList with `str` items.
                    """
                    bgp_cluster_id: str | None
                    """Set BGP cluster id."""
                    ptp: Ptp
                    """Subclass of AvdModel."""
                    wan_role: Literal["client", "server"] | None
                    """
                    Override the default WAN role.

                    This is used both for AutoVPN and Pathfinder designs.
                    That means if
                    `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                    `server` indicates that the router is a
                    route-reflector.
                    """
                    cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                    """
                    Configure the transit mode for a WAN client for CV Pathfinder designs
                    only when the `wan_mode` root
                    key is set to `cv_pathfinder`.

                    'zone' is currently not supported.
                    """
                    cv_pathfinder_region: str | None
                    """
                    The CV Pathfinder region name.
                    This key is required for WAN routers but optional for pathfinders.
                    The region name must be defined under 'cv_pathfinder_regions'.
                    """
                    cv_pathfinder_site: str | None
                    """
                    The CV Pathfinder site name.
                    This key is required for WAN routers but optional for pathfinders.
                    For
                    WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                    relevant region under 'cv_pathfinder_regions'.
                    For pathfinders without `cv_pathfinder_region` set,
                    the site must be defined under `cv_pathfinder_global_sites`.
                    """
                    wan_ha: WanHa
                    """
                    The key is supported only if `wan_mode` == `cv-pathfinder`.
                    AutoVPN support is still to be
                    determined.

                    Maximum 2 devices supported by group for HA.

                    Subclass of AvdModel.
                    """
                    dps_mss_ipv4: str
                    """
                    IPv4 MSS value configured under "router path-selection" on WAN Devices.

                    Default value: `"auto"`
                    """
                    l3_interfaces: L3Interfaces
                    """
                    L3 Interfaces to configure on the node.

                    Subclass of AvdIndexedList with `L3InterfacesItem` items.
                    Primary key is `name` (`str`).
                    """
                    l3_port_channels: L3PortChannels
                    """
                    L3 Port-Channel interfaces to configure on the node.

                    Subclass of AvdIndexedList with
                    `L3PortChannelsItem` items. Primary key is `name` (`str`).
                    """
                    data_plane_cpu_allocation_max: int | None
                    """
                    Set the maximum number of CPU used for the data plane.
                    This setting is useful on virtual Route
                    Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                    """
                    flow_tracker_type: Literal["sampled", "hardware"] | None
                    """
                    Set the flow tracker type.
                    Override the `default_flow_tracker_type`` set at the `node_type_key`
                    level.
                    `default_flow_tracker_type` default value is `sampled`.
                    """
                    underlay_multicast: UnderlayMulticast
                    """Subclass of AvdModel."""
                    campus: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_access_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus access pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    cv_tags_topology_type: str | None
                    """
                    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                    "edge" or "member-leaf".
                    """
                    digital_twin: DigitalTwin
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Set the OS version and management IP address for the digital twin of the
                    associated node(s).

                    Subclass of AvdModel.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            id: int | None | UndefinedType = Undefined,
                            platform: str | None | UndefinedType = Undefined,
                            mac_address: str | None | UndefinedType = Undefined,
                            system_mac_address: str | None | UndefinedType = Undefined,
                            serial_number: str | None | UndefinedType = Undefined,
                            rack: str | None | UndefinedType = Undefined,
                            mgmt_ip: str | None | UndefinedType = Undefined,
                            mgmt_gateway: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                            mgmt_interface: str | None | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                            always_configure_ip_routing: bool | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                            uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                            uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                            uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                            uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                            uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                            uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                            uplink_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_mtu: int | None | UndefinedType = Undefined,
                            max_uplink_switches: int | None | UndefinedType = Undefined,
                            max_parallel_uplinks: int | UndefinedType = Undefined,
                            uplink_bfd: bool | UndefinedType = Undefined,
                            uplink_native_vlan: int | None | UndefinedType = Undefined,
                            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                            uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                            uplink_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_structured_config: dict | UndefinedType = Undefined,
                            uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            short_esi: str | None | UndefinedType = Undefined,
                            isis_system_id_prefix: str | None | UndefinedType = Undefined,
                            isis_maximum_paths: int | None | UndefinedType = Undefined,
                            is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                            node_sid_base: int | UndefinedType = Undefined,
                            loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                            loopback_ipv4_offset: int | UndefinedType = Undefined,
                            router_id_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_offset: int | UndefinedType = Undefined,
                            vtep: bool | None | UndefinedType = Undefined,
                            vtep_loopback: str | None | UndefinedType = Undefined,
                            bgp_as: str | None | UndefinedType = Undefined,
                            bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                            evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                            evpn_services_l2_only: bool | UndefinedType = Undefined,
                            filter: Filter | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                            ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                            mlag: bool | UndefinedType = Undefined,
                            mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                            mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                            mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                            mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                            mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_vlan: int | UndefinedType = Undefined,
                            mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                            mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                            mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_port_channel_id: int | None | UndefinedType = Undefined,
                            mlag_domain_id: str | None | UndefinedType = Undefined,
                            spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                            spanning_tree_priority: int | UndefinedType = Undefined,
                            spanning_tree_root_super: bool | UndefinedType = Undefined,
                            spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                            spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                            | UndefinedType = Undefined,
                            virtual_router_mac_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_interface: str | None | UndefinedType = Undefined,
                            inband_mgmt_vlan: int | UndefinedType = Undefined,
                            inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                            inband_mgmt_ip: str | None | UndefinedType = Undefined,
                            inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_description: str | UndefinedType = Undefined,
                            inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                            inband_mgmt_vrf: str | UndefinedType = Undefined,
                            inband_mgmt_mtu: int | UndefinedType = Undefined,
                            inband_ztp: bool | UndefinedType = Undefined,
                            inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                            mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                            mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                            bgp_cluster_id: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                            cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                            cv_pathfinder_region: str | None | UndefinedType = Undefined,
                            cv_pathfinder_site: str | None | UndefinedType = Undefined,
                            wan_ha: WanHa | UndefinedType = Undefined,
                            dps_mss_ipv4: str | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                            flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                            underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                            campus: str | None | UndefinedType = Undefined,
                            campus_pod: str | None | UndefinedType = Undefined,
                            campus_access_pod: str | None | UndefinedType = Undefined,
                            cv_tags_topology_type: str | None | UndefinedType = Undefined,
                            digital_twin: DigitalTwin | UndefinedType = Undefined,
                        ) -> None:
                            """
                            Defaults.


                            Subclass of AvdModel.

                            Args:
                                id: Unique identifier used for IP addressing and other algorithms.
                                platform: Arista platform family.
                                mac_address: Leverage to document management interface mac address.
                                system_mac_address:
                                   System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                   Set to the same MAC address as
                                   available in "show version" on the device.
                                   "system_mac_address" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                serial_number:
                                   Set to the Serial Number of the device.
                                   Only used for documentation purpose in the fabric
                                   documentation and part of the structured_config.
                                   "serial_number" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                rack: Rack that the switch is located in (only used in snmp_settings location).
                                mgmt_ip: Node management interface IPv4 address.
                                mgmt_gateway:
                                   This key sets the management gateway for the device. It takes precedence over the global
                                   `mgmt_gateway`.
                                ipv6_mgmt_ip: Node management interface IPv6 address.
                                ipv6_mgmt_gateway:
                                   This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                   `ipv6_mgmt_gateway`.
                                mgmt_interface:
                                   Management Interface Name.
                                   Default -> platform_management_interface -> mgmt_interface ->
                                   "Management1".
                                link_tracking:
                                   This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                   the upstream interfaces.
                                   Useful in EVPN multhoming designs.


                                   Subclass of AvdModel.
                                lacp_port_id_range:
                                   This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                   number of nodes in the "node_group".
                                   Unique LACP port-id ranges are recommended for EVPN Multihoming
                                   designs.


                                   Subclass of AvdModel.
                                always_configure_ip_routing:
                                   Force configuration of "ip routing" even on L2 devices.
                                   Use this to retain behavior of AVD versions
                                   below 4.0.0.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.
                                uplink_type:
                                   Override the default `uplink_type` set at the `node_type_key` level.
                                   `uplink_type` must be "p2p" if
                                   `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                uplink_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   IPv4
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   IPv6
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_interfaces:
                                   Local uplink interfaces.
                                   Each list item supports range syntax that can be expanded into a list of
                                   interfaces.
                                   If uplink_interfaces is not defined, platform-specific defaults (defined under
                                   default_interfaces) will be used instead.
                                   Please note that default_interfaces are not defined by
                                   default, you should define these yourself.


                                   Subclass of AvdList with `str` items.
                                uplink_switch_interfaces:
                                   Interfaces located on uplink switches.

                                   Subclass of AvdList with `str` items.
                                uplink_switches: Subclass of AvdList with `str` items.
                                uplink_interface_speed:
                                   Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                   (Uplink switch
                                   interface speed can be overridden with `uplink_switch_interface_speed`).
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_switch_interface_speed:
                                   Set point-to-Point interface speed for the uplink switch interface only.
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                max_uplink_switches:
                                   Maximum number of uplink switches.
                                   Changing this value may change IP Addressing on uplinks.
                                   Can be
                                   used to reserve IP space for future expansions.
                                max_parallel_uplinks:
                                   Number of parallel links towards uplink switches.
                                   Changing this value may change interface naming on
                                   uplinks (and corresponding downlinks).
                                   Can be used to reserve interfaces for future parallel
                                   uplinks.
                                uplink_bfd: Enable bfd on uplink interfaces.
                                uplink_native_vlan:
                                   Only applicable to switches with layer-2 port-channel uplinks.
                                   A suspended (disabled) vlan will be
                                   created in both ends of the link unless the vlan is defined under network services.
                                   By default the
                                   uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                uplink_ptp:
                                   Enable PTP on all infrastructure links.

                                   Subclass of AvdModel.
                                uplink_macsec:
                                   Enable MacSec on all uplinks.

                                   Subclass of AvdModel.
                                uplink_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink Port-channel
                                   ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                   For
                                   example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                   For
                                   MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                   This
                                   option overrides the default behavior and statically sets the local Port-channel ID.
                                   Note! Make sure
                                   the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                   value.
                                uplink_switch_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink switch Port-
                                   channel ID will be set to the number of the first interface defined under
                                   `uplink_switch_interfaces`.
                                   For example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [
                                   Eth11/1, Eth22/1 ] -> ID 111
                                   For MLAG port-channels ID will be based on the lowest member interface
                                   on the first MLAG switch.
                                   This option overrides the default behavior and statically sets the Port-
                                   channel ID on the uplink switch.
                                   Note! Make sure the ID is unique and does not overlap with
                                   autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between
                                   1 and 2000 and both MLAG switches must have the same value.
                                uplink_structured_config:
                                   Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                   When
                                   uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                   for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                   When uplink_type ==
                                   "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                   eos_cli_config_gen overrides the settings on the port-channel interface level.
                                   "uplink_structured_config" is applied after "structured_config", so it can override
                                   "structured_config" defined on node-level.
                                   Note! The content of this dictionary is _not_ validated
                                   by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                uplink_switch_port_channel_structured_config:
                                   Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                   channel uplinks.
                                mlag_port_channel_structured_config:
                                   Custom structured config applied to MLAG peer link port-channel id.
                                   Added under
                                   port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the
                                   port-channel interface level.
                                   "mlag_port_channel_structured_config" is applied after
                                   "structured_config", so it can override "structured_config" defined on node-level.
                                mlag_peer_vlan_structured_config:
                                   Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                   override "structured_config" defined on node-level.
                                mlag_peer_l3_vlan_structured_config:
                                   Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                   can override "structured_config" defined on node-level.
                                short_esi:
                                   short_esi only valid for l2leaf devices using port-channel uplink.
                                   Setting short_esi to "auto"
                                   generates the short_esi automatically using a hash of configuration elements.
                                   < 0000:0000:0000 |
                                   auto >.
                                isis_system_id_prefix: (4.4 hexadecimal).
                                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                is_type: Overrides `isis_default_is_type`.
                                node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                loopback_ipv4_address:
                                   IPv4 address without mask for Loopback0.
                                   When set, it takes precedence over `loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                vtep_loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                vtep_loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                vtep_loopback_ipv4_address:
                                   IPv4 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not
                                   catch duplicates.
                                vtep_loopback_ipv6_address:
                                   IPv6 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv6_pool`.
                                   Note: AVD does not check for validity of the IPv6 address and does not
                                   catch duplicates.
                                loopback_ipv4_offset:
                                   Offset all assigned loopback IP addresses.
                                   Required when the 'loopback_ipv4_pool' is the same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                router_id_pool:
                                   Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                   router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                   will not exist on the device.
                                loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                loopback_ipv6_offset:
                                   Offset all assigned loopback IPv6 addresses.
                                   Required when the 'loopback_ipv6_pool' is same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                vtep:
                                   Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                   Overrides VTEP
                                   setting inherited from node_type_keys.
                                vtep_loopback: Set VXLAN source interface.
                                bgp_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                   Required with eBGP.
                                bgp_defaults:
                                   List of EOS commands to apply to BGP daemon.

                                   Subclass of AvdList with `str` items.
                                evpn_role:
                                   Acting role in EVPN control plane.
                                   Default is set in node_type definition from node_type_keys.
                                evpn_route_servers:
                                   List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                   Subclass of AvdList with `str`
                                   items.
                                evpn_services_l2_only:
                                   Possibility to prevent configuration of Tenant VRFs and SVIs.
                                   Override node definition
                                   "network_services_l3" from node_type_keys.
                                   This allows support for centralized routing.
                                filter:
                                   Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                   If filter is not
                                   defined it will default to all.


                                   Subclass of AvdModel.
                                igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                evpn_gateway:
                                   Node is acting as EVPN Multi-Domain Gateway.
                                   New BGP peer-group is generated between EVPN GWs in
                                   different domains or between GWs and Route Servers.
                                   Name can be changed under
                                   "bgp_peer_groups.evpn_overlay_core" variable.
                                   L3 rechability for different EVPN GWs must be already
                                   in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                   same Ansible inventory.


                                   Subclass of AvdModel.
                                ipvpn_gateway:
                                   Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                   this is "bgp_peer_groups.ipvpn_gateway_peers".
                                   L3 Reachability is required for this to work, the
                                   preferred method to establish underlay connectivity is to use core_interfaces.


                                   Subclass of
                                   AvdModel.
                                mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                mlag_ibgp_origin_incomplete:
                                   Set origin of routes received from MLAG iBGP peer to incomplete.
                                   The purpose is to optimize routing
                                   for leaf loopbacks from spine perspective and
                                   avoid suboptimal routing via peerlink for control
                                   plane traffic.
                                mlag_interfaces:
                                   Each list item supports range syntax that can be expanded into a list of interfaces.
                                   Required when
                                   MLAG leafs are present in the topology.


                                   Subclass of AvdList with `str` items.
                                mlag_interfaces_speed:
                                   Set MLAG interface speed.
                                   Speed should be set in the format `<interface_speed>` or `forced
                                   <interface_speed>` or `auto <interface_speed>`.
                                mlag_peer_l3_vlan:
                                   Underlay L3 peering SVI interface id.
                                   If set to 0 or the same vlan as mlag_peer_vlan, the
                                   mlag_peer_vlan will be used for L3 peering.
                                mlag_peer_l3_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_l3_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                mlag_peer_address_family:
                                   IP address family used to establish MLAG Peer Link (control link).
                                   `ipv6` requires EOS version
                                   4.31.1F or higher.
                                   Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                   (ex. `mlag_peer_l3_vlan` set to 4094).
                                mlag_peer_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                mlag_peer_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                mlag_port_channel_id:
                                   If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                   in 'mlag_interfaces'.
                                   Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                   999999 > for EOS >= 4.25.0F.
                                mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                spanning_tree_mode: spanning_tree_mode
                                spanning_tree_priority:
                                   Spanning-tree priority configured for the selected mode.
                                   For `rapid-pvst` the priority can also be
                                   set per VLAN under network services.
                                spanning_tree_root_super: spanning_tree_root_super
                                spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                inband_mgmt_interface:
                                   Pointer to interface used for inband management.
                                   All configuration must be done using other data
                                   models like network services or structured_config.
                                   'inband_mgmt_interface' is only used to refer to
                                   this interface as source in various management protocol settings (future feature).

                                   On L2 switches,
                                   this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                inband_mgmt_vlan:
                                   VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                   uplinks).
                                   When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                   switch as well as all 'uplink_switches'.
                                   When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                   created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                   created using network services data models.
                                inband_mgmt_subnet:
                                   Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                   ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      : <subnet> +
                                   2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       :
                                   <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range
                                   larger than total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ip' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_subnet_offset:
                                   Offset value to adjust the calculated inband management IP address within the subnet.
                                   The assigned
                                   IP will be computed by adding this offset to the device ID.
                                inband_mgmt_ip:
                                   IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                   If this is set the
                                   VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN and SVI on
                                   the parent switches must be created using network services data models.

                                   This setting is applicable
                                   to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                   is derived from 'inband_mgmt_subnet' if set.

                                   This setting is applicable to L2 switches (switches
                                   using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_address:
                                   IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                   If this
                                   is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN
                                   and SVI on the parent switches must be created using network services data models.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_subnet:
                                   Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                   on ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                   extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      :
                                   <subnet> + 2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       : <subnet> + 3 + <l2leaf id>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range larger than
                                   total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf'.
                                   Used when `inband_mgmt_ipv6_address` is set.
                                   Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_description:
                                   Description configured on the Inband Management SVI.

                                   This setting is only applied on the devices
                                   where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                   be set on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vlan_name:
                                   Name configured on the Inband Management VLAN.
                                   This setting is only applied on the devices where it
                                   is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                   on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vrf:
                                   VRF configured on the Inband Management Interface.
                                   The VRF is created if not already created by
                                   other means.
                                   This setting is only applied on the devices where it is set, it does not automatically
                                   affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                   group/node-type as needed.
                                inband_mgmt_mtu:
                                   MTU configured on the Inband Management Interface.
                                   This setting is only applied on the devices where
                                   it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                   set on each applicable node/node-group/node-type as needed.
                                inband_ztp:
                                   Enable to configure upstream device with proper configuration to allow downstream devices to be
                                   Zero-Touch-Provisioned over the uplink interfaces.
                                   For L2 devices this setting also requires that
                                   the `inband_mgmt_vlan` is set for the node.

                                   PREVIEW: Support for L3 devices is marked as "preview",
                                   meaning the data models or generated configuration can change at any time.
                                inband_ztp_lacp_fallback_delay:
                                   Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                   ZTP node.
                                   This setting also requires that `inband_ztp` is set for the node.
                                mpls_overlay_role:
                                   Set the default mpls overlay role.
                                   Acting role in overlay control plane.
                                overlay_address_families:
                                   Set the default overlay address families.


                                   Subclass of AvdList with `str` items.
                                mpls_route_reflectors:
                                   List of inventory hostname acting as MPLS route-reflectors.

                                   Subclass of AvdList with `str` items.
                                bgp_cluster_id: Set BGP cluster id.
                                ptp: Subclass of AvdModel.
                                wan_role:
                                   Override the default WAN role.

                                   This is used both for AutoVPN and Pathfinder designs.
                                   That means if
                                   `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                   `server` indicates that the router is a
                                   route-reflector.
                                cv_pathfinder_transit_mode:
                                   Configure the transit mode for a WAN client for CV Pathfinder designs
                                   only when the `wan_mode` root
                                   key is set to `cv_pathfinder`.

                                   'zone' is currently not supported.
                                cv_pathfinder_region:
                                   The CV Pathfinder region name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   The region name must be defined under 'cv_pathfinder_regions'.
                                cv_pathfinder_site:
                                   The CV Pathfinder site name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   For
                                   WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                   relevant region under 'cv_pathfinder_regions'.
                                   For pathfinders without `cv_pathfinder_region` set,
                                   the site must be defined under `cv_pathfinder_global_sites`.
                                wan_ha:
                                   The key is supported only if `wan_mode` == `cv-pathfinder`.
                                   AutoVPN support is still to be
                                   determined.

                                   Maximum 2 devices supported by group for HA.

                                   Subclass of AvdModel.
                                dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                l3_interfaces:
                                   L3 Interfaces to configure on the node.

                                   Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                   Primary key is `name` (`str`).
                                l3_port_channels:
                                   L3 Port-Channel interfaces to configure on the node.

                                   Subclass of AvdIndexedList with
                                   `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                data_plane_cpu_allocation_max:
                                   Set the maximum number of CPU used for the data plane.
                                   This setting is useful on virtual Route
                                   Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                flow_tracker_type:
                                   Set the flow tracker type.
                                   Override the `default_flow_tracker_type`` set at the `node_type_key`
                                   level.
                                   `default_flow_tracker_type` default value is `sampled`.
                                underlay_multicast: Subclass of AvdModel.
                                campus:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_access_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus access pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                cv_tags_topology_type:
                                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                   "edge" or "member-leaf".
                                digital_twin:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Set the OS version and management IP address for the digital twin of the
                                   associated node(s).

                                   Subclass of AvdModel.

                            """

                class NodeGroupsItem(AvdModel):
                    """Subclass of AvdModel."""

                    class NodesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class DownlinkPoolsItem(AvdModel):
                            """Subclass of AvdModel."""

                            class DownlinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            DownlinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "ipv4_pool": {"type": str},
                                "ipv6_pool": {"type": str},
                                "downlink_interfaces": {"type": DownlinkInterfaces},
                            }
                            ipv4_pool: str | None
                            """
                            Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                            IPv4
                            subnets used for links to downlink switches will be derived from this pool based on index the peer's
                            uplink interface's index in 'downlink_interfaces'.
                            """
                            ipv6_pool: str | None
                            """
                            Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                            IPv6
                            subnets used for links to downlink switches will be derived from this pool based on index the peer's
                            uplink interface's index in 'downlink_interfaces'.
                            """
                            downlink_interfaces: DownlinkInterfaces
                            """
                            List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                            this list will determine which subnet will be taken from the pool.

                            Subclass of AvdList with `str`
                            items.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    ipv4_pool: str | None | UndefinedType = Undefined,
                                    ipv6_pool: str | None | UndefinedType = Undefined,
                                    downlink_interfaces: DownlinkInterfaces | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DownlinkPoolsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        ipv4_pool:
                                           Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                           IPv4
                                           subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                           uplink interface's index in 'downlink_interfaces'.
                                        ipv6_pool:
                                           Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                           IPv6
                                           subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                           uplink interface's index in 'downlink_interfaces'.
                                        downlink_interfaces:
                                           List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                                           this list will determine which subnet will be taken from the pool.

                                           Subclass of AvdList with `str`
                                           items.

                                    """

                        class DownlinkPools(AvdList[DownlinkPoolsItem]):
                            """Subclass of AvdList with `DownlinkPoolsItem` items."""

                        DownlinkPools._item_type = DownlinkPoolsItem

                        class LinkTracking(AvdModel):
                            """Subclass of AvdModel."""

                            class GroupsItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                                name: str
                                """Tracking group name."""
                                recovery_delay: int | None
                                """default -> platform_settings_mlag_reload_delay -> 300."""
                                links_minimum: int | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        name: str | UndefinedType = Undefined,
                                        recovery_delay: int | None | UndefinedType = Undefined,
                                        links_minimum: int | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        GroupsItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Tracking group name.
                                            recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                            links_minimum: links_minimum

                                        """

                            class Groups(AvdIndexedList[str, GroupsItem]):
                                """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Groups._item_type = GroupsItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": False},
                                "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                            }
                            enabled: bool
                            """Default value: `False`"""
                            groups: Groups
                            """
                            Link Tracking Groups.
                            By default a single group named "LT_GROUP1" is defined with default values.
                            Any groups defined under "groups" will replace the default.


                            Subclass of AvdIndexedList with
                            `GroupsItem` items. Primary key is `name` (`str`).

                            Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                    """
                                    LinkTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        groups:
                                           Link Tracking Groups.
                                           By default a single group named "LT_GROUP1" is defined with default values.
                                           Any groups defined under "groups" will replace the default.


                                           Subclass of AvdIndexedList with
                                           `GroupsItem` items. Primary key is `name` (`str`).

                                    """

                        class LacpPortIdRange(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": False},
                                "size": {"type": int, "default": 128},
                                "offset": {"type": int, "default": 0},
                            }
                            enabled: bool
                            """Default value: `False`"""
                            size: int
                            """
                            Recommended size > = number of ports in the switch.

                            Default value: `128`
                            """
                            offset: int
                            """
                            Offset is used to avoid overlapping port-id ranges of different switches.
                            Useful when a "connected-
                            endpoint" is connected to switches in different "node_groups".

                            Default value: `0`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    size: int | UndefinedType = Undefined,
                                    offset: int | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    LacpPortIdRange.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        size: Recommended size > = number of ports in the switch.
                                        offset:
                                           Offset is used to avoid overlapping port-id ranges of different switches.
                                           Useful when a "connected-
                                           endpoint" is connected to switches in different "node_groups".

                                    """

                        class UplinkInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        UplinkInterfaces._item_type = str

                        class UplinkSwitchInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        UplinkSwitchInterfaces._item_type = str

                        class UplinkSwitches(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        UplinkSwitches._item_type = str

                        class UplinkPtp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                            enable: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                    """
                                    UplinkPtp.


                                    Subclass of AvdModel.

                                    Args:
                                        enable: enable

                                    """

                        class UplinkMacsec(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"profile": {"type": str}}
                            profile: str | None

                            if TYPE_CHECKING:

                                def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    UplinkMacsec.


                                    Subclass of AvdModel.

                                    Args:
                                        profile: profile

                                    """

                        class BgpDefaults(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        BgpDefaults._item_type = str

                        class EvpnRouteServers(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        EvpnRouteServers._item_type = str

                        class Filter(AvdModel):
                            """Subclass of AvdModel."""

                            class Tenants(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Tenants._item_type = str

                            class Tags(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Tags._item_type = str

                            class AllowVrfs(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            AllowVrfs._item_type = str

                            class DenyVrfs(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            DenyVrfs._item_type = str

                            class AlwaysIncludeVrfsInTenants(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            AlwaysIncludeVrfsInTenants._item_type = str

                            _fields: ClassVar[dict] = {
                                "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                                "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                                "only_vlans_in_use": {"type": bool, "default": False},
                            }
                            tenants: Tenants
                            """
                            Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                            Tenants (default).
                            This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            tags: Tags
                            """
                            Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            allow_vrfs: AllowVrfs
                            """
                            Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                            (default).
                            This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                            Subclass of
                            AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            deny_vrfs: DenyVrfs
                            """
                            Prevent configuration of Network Services defined under these VRFs.
                            This list prevents the given
                            VRFs to be included by any other filtering mechanism.

                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                            """
                            always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                            """
                            List of tenants where VRFs will be configured even if VLANs are not included in tags.
                            Useful for L3
                            "border" leaf.


                            Subclass of AvdList with `str` items.
                            """
                            only_vlans_in_use: bool
                            """
                            Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                            Note! This
                            feature only considers configuration managed by eos_designs.
                            This excludes structured_config,
                            custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                            Default value: `False`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    tenants: Tenants | UndefinedType = Undefined,
                                    tags: Tags | UndefinedType = Undefined,
                                    allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                    deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                    always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                    only_vlans_in_use: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Filter.


                                    Subclass of AvdModel.

                                    Args:
                                        tenants:
                                           Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                           Tenants (default).
                                           This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                           Subclass of AvdList with `str` items.
                                        tags:
                                           Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                           Subclass of AvdList with `str` items.
                                        allow_vrfs:
                                           Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                           (default).
                                           This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                           Subclass of
                                           AvdList with `str` items.
                                        deny_vrfs:
                                           Prevent configuration of Network Services defined under these VRFs.
                                           This list prevents the given
                                           VRFs to be included by any other filtering mechanism.

                                           Subclass of AvdList with `str` items.
                                        always_include_vrfs_in_tenants:
                                           List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                           Useful for L3
                                           "border" leaf.


                                           Subclass of AvdList with `str` items.
                                        only_vlans_in_use:
                                           Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                           Note! This
                                           feature only considers configuration managed by eos_designs.
                                           This excludes structured_config,
                                           custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                    """

                        class EvpnGateway(AvdModel):
                            """Subclass of AvdModel."""

                            class RemotePeersItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                                hostname: str
                                """Hostname of remote EVPN GW server."""
                                ip_address: str | None
                                """Peering IP of remote Route Server."""
                                bgp_as: str | None
                                """
                                Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                interpreted as a float number.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        hostname: str | UndefinedType = Undefined,
                                        ip_address: str | None | UndefinedType = Undefined,
                                        bgp_as: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RemotePeersItem.


                                        Subclass of AvdModel.

                                        Args:
                                            hostname: Hostname of remote EVPN GW server.
                                            ip_address: Peering IP of remote Route Server.
                                            bgp_as:
                                               Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                               interpreted as a float number.

                                        """

                            class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                                """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                                _primary_key: ClassVar[str] = "hostname"

                            RemotePeers._item_type = RemotePeersItem

                            class EvpnL2(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                                enabled: bool
                                """Default value: `False`"""

                                if TYPE_CHECKING:

                                    def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnL2.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled

                                        """

                            class EvpnL3(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                                enabled: bool
                                """Default value: `False`"""
                                inter_domain: bool
                                """Default value: `True`"""

                                if TYPE_CHECKING:

                                    def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnL3.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            inter_domain: inter_domain

                                        """

                            class AllActiveMultihoming(AvdModel):
                                """Subclass of AvdModel."""

                                class EvpnEthernetSegment(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                    identifier: str
                                    """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                    rt_import: str
                                    """Low-order 6 bytes of ES-Import Route Target."""

                                    if TYPE_CHECKING:

                                        def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                            """
                                            EvpnEthernetSegment.


                                            Subclass of AvdModel.

                                            Args:
                                                identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                                rt_import: Low-order 6 bytes of ES-Import Route Target.

                                            """

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "enable_d_path": {"type": bool, "default": True},
                                    "evpn_domain_id_local": {"type": str},
                                    "evpn_domain_id_remote": {"type": str},
                                    "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                                }
                                enabled: bool
                                """Enable Active Active Multihoming resiliency model."""
                                enable_d_path: bool
                                """
                                Enable D-path for use with BGP bestpath selection algorithm.

                                Default value: `True`
                                """
                                evpn_domain_id_local: str
                                """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                                evpn_domain_id_remote: str
                                """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                                evpn_ethernet_segment: EvpnEthernetSegment
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | UndefinedType = Undefined,
                                        enable_d_path: bool | UndefinedType = Undefined,
                                        evpn_domain_id_local: str | UndefinedType = Undefined,
                                        evpn_domain_id_remote: str | UndefinedType = Undefined,
                                        evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        AllActiveMultihoming.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: Enable Active Active Multihoming resiliency model.
                                            enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                            evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                            evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                            evpn_ethernet_segment: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "remote_peers": {"type": RemotePeers},
                                "evpn_l2": {"type": EvpnL2},
                                "evpn_l3": {"type": EvpnL3},
                                "all_active_multihoming": {"type": AllActiveMultihoming},
                            }
                            remote_peers: RemotePeers
                            """
                            Define remote peers of the EVPN VXLAN Gateway.
                            If the hostname can be found in the inventory,
                            ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                            If the
                            peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                            Subclass
                            of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                            """
                            evpn_l2: EvpnL2
                            """
                            Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                            Subclass of AvdModel.
                            """
                            evpn_l3: EvpnL3
                            """
                            Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                            Subclass of AvdModel.
                            """
                            all_active_multihoming: AllActiveMultihoming
                            """
                            Enable Active Active Multihoming architecture for EVPN Gateways.
                            Not supported with MLAG or IPVPN
                            Gateway. Requires EVPN L3 inter-domain to be enabled.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    remote_peers: RemotePeers | UndefinedType = Undefined,
                                    evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                    evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                    all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    EvpnGateway.


                                    Subclass of AvdModel.

                                    Args:
                                        remote_peers:
                                           Define remote peers of the EVPN VXLAN Gateway.
                                           If the hostname can be found in the inventory,
                                           ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                           If the
                                           peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                           Subclass
                                           of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                        evpn_l2:
                                           Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                           Subclass of AvdModel.
                                        evpn_l3:
                                           Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                           Subclass of AvdModel.
                                        all_active_multihoming:
                                           Enable Active Active Multihoming architecture for EVPN Gateways.
                                           Not supported with MLAG or IPVPN
                                           Gateway. Requires EVPN L3 inter-domain to be enabled.

                                           Subclass of AvdModel.

                                    """

                        class IpvpnGateway(AvdModel):
                            """Subclass of AvdModel."""

                            class AddressFamilies(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            AddressFamilies._item_type = str

                            class RemotePeersItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                                hostname: str
                                """Hostname of remote IPVPN Peer."""
                                ip_address: str
                                """Peering IP of remote IPVPN Peer."""
                                bgp_as: str
                                """
                                Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For
                                asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                as a float number.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        hostname: str | UndefinedType = Undefined,
                                        ip_address: str | UndefinedType = Undefined,
                                        bgp_as: str | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RemotePeersItem.


                                        Subclass of AvdModel.

                                        Args:
                                            hostname: Hostname of remote IPVPN Peer.
                                            ip_address: Peering IP of remote IPVPN Peer.
                                            bgp_as:
                                               Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For
                                               asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                               as a float number.

                                        """

                            class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                                """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                                _primary_key: ClassVar[str] = "hostname"

                            RemotePeers._item_type = RemotePeersItem

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "evpn_domain_id": {"type": str, "default": "65535:1"},
                                "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                                "enable_d_path": {"type": bool, "default": True},
                                "maximum_routes": {"type": int, "default": 0},
                                "local_as": {"type": str},
                                "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                                "remote_peers": {"type": RemotePeers},
                            }
                            enabled: bool
                            evpn_domain_id: str
                            """
                            Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                            Default value: `"65535:1"`
                            """
                            ipvpn_domain_id: str
                            """
                            Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                            Default value: `"65535:2"`
                            """
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            maximum_routes: int
                            """
                            Maximum routes to accept from IPVPN remote peers.

                            Default value: `0`
                            """
                            local_as: str | None
                            """
                            Local BGP AS applied to peering with IPVPN remote peers.
                            BGP AS <1-4294967295> or AS number in asdot
                            notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes,
                            to prevent it from being interpreted as a float number.
                            """
                            address_families: AddressFamilies
                            """
                            IPVPN address families to enable for remote peers.

                            Subclass of AvdList with `str` items.

                            Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                            """
                            remote_peers: RemotePeers
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    evpn_domain_id: str | UndefinedType = Undefined,
                                    ipvpn_domain_id: str | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    maximum_routes: int | UndefinedType = Undefined,
                                    local_as: str | None | UndefinedType = Undefined,
                                    address_families: AddressFamilies | UndefinedType = Undefined,
                                    remote_peers: RemotePeers | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    IpvpnGateway.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                        ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                        local_as:
                                           Local BGP AS applied to peering with IPVPN remote peers.
                                           BGP AS <1-4294967295> or AS number in asdot
                                           notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes,
                                           to prevent it from being interpreted as a float number.
                                        address_families:
                                           IPVPN address families to enable for remote peers.

                                           Subclass of AvdList with `str` items.
                                        remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                    """

                        class MlagInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        MlagInterfaces._item_type = str

                        class OverlayAddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        OverlayAddressFamilies._item_type = str

                        class MplsRouteReflectors(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        MplsRouteReflectors._item_type = str

                        class Ptp(AvdModel):
                            """Subclass of AvdModel."""

                            class Uplinks(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Uplinks._item_type = str

                            class Dscp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                                general_messages: int | None
                                event_messages: int | None

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        general_messages: int | None | UndefinedType = Undefined,
                                        event_messages: int | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Dscp.


                                        Subclass of AvdModel.

                                        Args:
                                            general_messages: general_messages
                                            event_messages: event_messages

                                        """

                            class Monitor(AvdModel):
                                """Subclass of AvdModel."""

                                class Threshold(AvdModel):
                                    """Subclass of AvdModel."""

                                    class Drop(AvdModel):
                                        """Subclass of AvdModel."""

                                        _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                        offset_from_master: int | None
                                        mean_path_delay: int | None

                                        if TYPE_CHECKING:

                                            def __init__(
                                                self,
                                                *,
                                                offset_from_master: int | None | UndefinedType = Undefined,
                                                mean_path_delay: int | None | UndefinedType = Undefined,
                                            ) -> None:
                                                """
                                                Drop.


                                                Subclass of AvdModel.

                                                Args:
                                                    offset_from_master: offset_from_master
                                                    mean_path_delay: mean_path_delay

                                                """

                                    _fields: ClassVar[dict] = {
                                        "offset_from_master": {"type": int, "default": 250},
                                        "mean_path_delay": {"type": int, "default": 1500},
                                        "drop": {"type": Drop},
                                    }
                                    offset_from_master: int
                                    """Default value: `250`"""
                                    mean_path_delay: int
                                    """Default value: `1500`"""
                                    drop: Drop
                                    """Subclass of AvdModel."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | UndefinedType = Undefined,
                                            mean_path_delay: int | UndefinedType = Undefined,
                                            drop: Drop | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Threshold.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay
                                                drop: Subclass of AvdModel.

                                            """

                                class MissingMessage(AvdModel):
                                    """Subclass of AvdModel."""

                                    class Intervals(AvdModel):
                                        """Subclass of AvdModel."""

                                        _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                        announce: int | None
                                        follow_up: int | None
                                        sync: int | None

                                        if TYPE_CHECKING:

                                            def __init__(
                                                self,
                                                *,
                                                announce: int | None | UndefinedType = Undefined,
                                                follow_up: int | None | UndefinedType = Undefined,
                                                sync: int | None | UndefinedType = Undefined,
                                            ) -> None:
                                                """
                                                Intervals.


                                                Subclass of AvdModel.

                                                Args:
                                                    announce: announce
                                                    follow_up: follow_up
                                                    sync: sync

                                                """

                                    class SequenceIds(AvdModel):
                                        """Subclass of AvdModel."""

                                        _fields: ClassVar[dict] = {
                                            "enabled": {"type": bool, "default": True},
                                            "announce": {"type": int, "default": 3},
                                            "delay_resp": {"type": int, "default": 3},
                                            "follow_up": {"type": int, "default": 3},
                                            "sync": {"type": int, "default": 3},
                                        }
                                        enabled: bool
                                        """Default value: `True`"""
                                        announce: int
                                        """Default value: `3`"""
                                        delay_resp: int
                                        """Default value: `3`"""
                                        follow_up: int
                                        """Default value: `3`"""
                                        sync: int
                                        """Default value: `3`"""

                                        if TYPE_CHECKING:

                                            def __init__(
                                                self,
                                                *,
                                                enabled: bool | UndefinedType = Undefined,
                                                announce: int | UndefinedType = Undefined,
                                                delay_resp: int | UndefinedType = Undefined,
                                                follow_up: int | UndefinedType = Undefined,
                                                sync: int | UndefinedType = Undefined,
                                            ) -> None:
                                                """
                                                SequenceIds.


                                                Subclass of AvdModel.

                                                Args:
                                                    enabled: enabled
                                                    announce: announce
                                                    delay_resp: delay_resp
                                                    follow_up: follow_up
                                                    sync: sync

                                                """

                                    _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                    intervals: Intervals
                                    """Subclass of AvdModel."""
                                    sequence_ids: SequenceIds
                                    """Subclass of AvdModel."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                        ) -> None:
                                            """
                                            MissingMessage.


                                            Subclass of AvdModel.

                                            Args:
                                                intervals: Subclass of AvdModel.
                                                sequence_ids: Subclass of AvdModel.

                                            """

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool, "default": True},
                                    "threshold": {"type": Threshold},
                                    "missing_message": {"type": MissingMessage},
                                }
                                enabled: bool
                                """Default value: `True`"""
                                threshold: Threshold
                                """Subclass of AvdModel."""
                                missing_message: MissingMessage
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | UndefinedType = Undefined,
                                        threshold: Threshold | UndefinedType = Undefined,
                                        missing_message: MissingMessage | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Monitor.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            threshold: Subclass of AvdModel.
                                            missing_message: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "profile": {"type": str},
                                "uplinks": {"type": Uplinks},
                                "mlag": {"type": bool, "default": False},
                                "domain": {"type": int},
                                "priority1": {"type": int},
                                "priority2": {"type": int},
                                "auto_clock_identity": {"type": bool},
                                "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                                "clock_identity": {"type": str},
                                "source_ip": {"type": str},
                                "mode": {"type": str, "default": "boundary"},
                                "mode_one_step": {"type": bool, "default": False},
                                "ttl": {"type": int},
                                "forward_unicast": {"type": bool, "default": False},
                                "forward_v1": {"type": bool},
                                "dscp": {"type": Dscp},
                                "monitor": {"type": Monitor},
                            }
                            enabled: bool | None
                            profile: str | None
                            """
                            Default available profiles are:
                              - "aes67"
                              - "aes67-r16-2016"
                              - "smpte2059-2"
                            """
                            uplinks: Uplinks
                            """Subclass of AvdList with `str` items."""
                            mlag: bool
                            """
                            Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                            configured on the MLAG peer-link port-channel.

                            Default value: `False`
                            """
                            domain: int | None
                            priority1: int | None
                            """default -> automatically set based on node_type."""
                            priority2: int | None
                            """default -> (node_id modulus 256)."""
                            auto_clock_identity: bool | None
                            """
                            If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                            default EOS behaviour, simply disable the automatic PTP clock identity.
                            default ->
                            (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                            HEX).
                            """
                            clock_identity_prefix: str
                            """
                            PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                            By default the 3-byte prefix is "00:1C:73".
                            This
                            can be overridden if auto_clock_identity is set to true (which is the default).

                            Default value: `"00:1C:73"`
                            """
                            clock_identity: str | None
                            """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                            source_ip: str | None
                            """
                            By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                            relevant SVI, which is the recommended behaviour.
                            This can be set manually if required, for example,
                            to a value of "10.1.2.3".
                            """
                            mode: Literal["boundary"]
                            """Default value: `"boundary"`"""
                            mode_one_step: bool
                            """Default value: `False`"""
                            ttl: int | None
                            forward_unicast: bool
                            """
                            Enable PTP unicast forwarding.

                            Default value: `False`
                            """
                            forward_v1: bool | None
                            """Forward dataplane PTP V1 packets."""
                            dscp: Dscp
                            """Subclass of AvdModel."""
                            monitor: Monitor
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    profile: str | None | UndefinedType = Undefined,
                                    uplinks: Uplinks | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                    domain: int | None | UndefinedType = Undefined,
                                    priority1: int | None | UndefinedType = Undefined,
                                    priority2: int | None | UndefinedType = Undefined,
                                    auto_clock_identity: bool | None | UndefinedType = Undefined,
                                    clock_identity_prefix: str | UndefinedType = Undefined,
                                    clock_identity: str | None | UndefinedType = Undefined,
                                    source_ip: str | None | UndefinedType = Undefined,
                                    mode: Literal["boundary"] | UndefinedType = Undefined,
                                    mode_one_step: bool | UndefinedType = Undefined,
                                    ttl: int | None | UndefinedType = Undefined,
                                    forward_unicast: bool | UndefinedType = Undefined,
                                    forward_v1: bool | None | UndefinedType = Undefined,
                                    dscp: Dscp | UndefinedType = Undefined,
                                    monitor: Monitor | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Ptp.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        profile:
                                           Default available profiles are:
                                             - "aes67"
                                             - "aes67-r16-2016"
                                             - "smpte2059-2"
                                        uplinks: Subclass of AvdList with `str` items.
                                        mlag:
                                           Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                           configured on the MLAG peer-link port-channel.
                                        domain: domain
                                        priority1: default -> automatically set based on node_type.
                                        priority2: default -> (node_id modulus 256).
                                        auto_clock_identity:
                                           If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                           default EOS behaviour, simply disable the automatic PTP clock identity.
                                           default ->
                                           (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                           HEX).
                                        clock_identity_prefix:
                                           PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                           By default the 3-byte prefix is "00:1C:73".
                                           This
                                           can be overridden if auto_clock_identity is set to true (which is the default).
                                        clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                        source_ip:
                                           By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                           relevant SVI, which is the recommended behaviour.
                                           This can be set manually if required, for example,
                                           to a value of "10.1.2.3".
                                        mode: mode
                                        mode_one_step: mode_one_step
                                        ttl: ttl
                                        forward_unicast: Enable PTP unicast forwarding.
                                        forward_v1: Forward dataplane PTP V1 packets.
                                        dscp: Subclass of AvdModel.
                                        monitor: Subclass of AvdModel.

                                    """

                        class WanHa(AvdModel):
                            """Subclass of AvdModel."""

                            class HaInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            HaInterfaces._item_type = str

                            class FlowTracking(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                                enabled: bool | None
                                name: str | None
                                """Flow tracker name as defined in flow_tracking_settings."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        FlowTracking.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            name: Flow tracker name as defined in flow_tracking_settings.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "ipsec": {"type": bool, "default": True},
                                "mtu": {"type": int, "default": 9194},
                                "ha_interfaces": {"type": HaInterfaces},
                                "ha_ipv4_pool": {"type": str},
                                "port_channel_id": {"type": int},
                                "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                                "flow_tracking": {"type": FlowTracking},
                            }
                            enabled: bool | None
                            """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                            ipsec: bool
                            """
                            Enable / Disable IPsec over HA path-group when HA is enabled.

                            Default value: `True`
                            """
                            mtu: int
                            """
                            Set MTU on WAN HA interfaces.

                            Default value: `9194`
                            """
                            ha_interfaces: HaInterfaces
                            """
                            Local WAN HA interfaces
                            Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                            Can be used to filter uplink interfaces when there are multiple uplinks.
                            Limitations:
                              Either all
                            interfaces must be uplinks or all interfaces must not be uplinks.
                              Only one interface is supported
                            for non uplinks.

                            Subclass of AvdList with `str` items.
                            """
                            ha_ipv4_pool: str | None
                            """
                            Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                            The IPv4
                            subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                            first WAN router.
                            Not used for uplink interfaces.
                            """
                            port_channel_id: int | None
                            """Port-channel ID to use for direct HA."""
                            use_port_channel_for_direct_ha: bool
                            """
                            Enable or disable using a port-channel interface for direct HA when there is only one interface.
                            This feature was introduced in EOS 4.33.0F.

                            Default value: `True`
                            """
                            flow_tracking: FlowTracking
                            """
                            Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                            setting.

                            Subclass of AvdModel.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    ipsec: bool | UndefinedType = Undefined,
                                    mtu: int | UndefinedType = Undefined,
                                    ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                    ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                    port_channel_id: int | None | UndefinedType = Undefined,
                                    use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    WanHa.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                        ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                        mtu: Set MTU on WAN HA interfaces.
                                        ha_interfaces:
                                           Local WAN HA interfaces
                                           Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                           Can be used to filter uplink interfaces when there are multiple uplinks.
                                           Limitations:
                                             Either all
                                           interfaces must be uplinks or all interfaces must not be uplinks.
                                             Only one interface is supported
                                           for non uplinks.

                                           Subclass of AvdList with `str` items.
                                        ha_ipv4_pool:
                                           Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                           The IPv4
                                           subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                           first WAN router.
                                           Not used for uplink interfaces.
                                        port_channel_id: Port-channel ID to use for direct HA.
                                        use_port_channel_for_direct_ha:
                                           Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                           This feature was introduced in EOS 4.33.0F.
                                        flow_tracking:
                                           Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                           setting.

                                           Subclass of AvdModel.

                                    """

                        class L3InterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class Bgp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "peer_as": {"type": str},
                                    "ipv4_prefix_list_in": {"type": str},
                                    "ipv4_prefix_list_out": {"type": str},
                                }
                                peer_as: str
                                """
                                BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For asdot notation in
                                YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                number.
                                """
                                ipv4_prefix_list_in: str | None
                                """
                                Prefix List Name. Accept routes for only these prefixes from the peer.
                                Required for wan interfaces.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """
                                ipv4_prefix_list_out: str | None
                                """
                                Prefix List Name. Advertise routes for only these prefixes.
                                If not specified, nothing would be
                                advertised.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        peer_as: str | UndefinedType = Undefined,
                                        ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                        ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Bgp.


                                        Subclass of AvdModel.

                                        Args:
                                            peer_as:
                                               BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For asdot notation in
                                               YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                               number.
                                            ipv4_prefix_list_in:
                                               Prefix List Name. Accept routes for only these prefixes from the peer.
                                               Required for wan interfaces.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                            ipv4_prefix_list_out:
                                               Prefix List Name. Advertise routes for only these prefixes.
                                               If not specified, nothing would be
                                               advertised.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                        """

                            class StaticRoutesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"prefix": {"type": str}}
                                prefix: str
                                """IPv4_network/Mask."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                        """
                                        StaticRoutesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            prefix: IPv4_network/Mask.

                                        """

                            class StaticRoutes(AvdList[StaticRoutesItem]):
                                """Subclass of AvdList with `StaticRoutesItem` items."""

                            StaticRoutes._item_type = StaticRoutesItem

                            class CvPathfinderInternetExit(AvdModel):
                                """Subclass of AvdModel."""

                                class PoliciesItem(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                    name: str
                                    """Internet-exit policy name."""
                                    tunnel_interface_numbers: str | None
                                    """
                                    Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                    interface.
                                    Examples: '1-3' or '100,200,300'
                                    """

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                        ) -> None:
                                            """
                                            PoliciesItem.


                                            Subclass of AvdModel.

                                            Args:
                                                name: Internet-exit policy name.
                                                tunnel_interface_numbers:
                                                   Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                                   interface.
                                                   Examples: '1-3' or '100,200,300'

                                            """

                                class Policies(AvdIndexedList[str, PoliciesItem]):
                                    """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                    _primary_key: ClassVar[str] = "name"

                                Policies._item_type = PoliciesItem

                                _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                                policies: Policies
                                """
                                List of Internet-exit policies using this interface as exit.

                                Subclass of AvdIndexedList with
                                `PoliciesItem` items. Primary key is `name` (`str`).
                                """

                                if TYPE_CHECKING:

                                    def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                        """
                                        CvPathfinderInternetExit.


                                        Subclass of AvdModel.

                                        Args:
                                            policies:
                                               List of Internet-exit policies using this interface as exit.

                                               Subclass of AvdIndexedList with
                                               `PoliciesItem` items. Primary key is `name` (`str`).

                                        """

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            class FlowTracking(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                                enabled: bool | None
                                name: str | None
                                """Flow tracker name as defined in flow_tracking_settings."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        FlowTracking.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            name: Flow tracker name as defined in flow_tracking_settings.

                                        """

                            _fields: ClassVar[dict] = {
                                "profile": {"type": str},
                                "name": {"type": str},
                                "description": {"type": str},
                                "ip_address": {"type": str},
                                "dhcp_ip": {"type": str},
                                "public_ip": {"type": str},
                                "encapsulation_dot1q_vlan": {"type": int},
                                "dhcp_accept_default_route": {"type": bool, "default": True},
                                "enabled": {"type": bool, "default": True},
                                "speed": {"type": str},
                                "receive_bandwidth": {"type": int},
                                "transmit_bandwidth": {"type": int},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "peer_ip": {"type": str},
                                "bgp": {"type": Bgp},
                                "ipv4_acl_in": {"type": str},
                                "ipv4_acl_out": {"type": str},
                                "static_routes": {"type": StaticRoutes},
                                "qos_profile": {"type": str},
                                "wan_carrier": {"type": str},
                                "wan_circuit_id": {"type": str},
                                "connected_to_pathfinder": {"type": bool, "default": True},
                                "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                                "rx_queue": {"type": RxQueue},
                                "raw_eos_cli": {"type": str},
                                "flow_tracking": {"type": FlowTracking},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            profile: str | None
                            """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                            For a
                            subinterface, the parent physical interface is automatically created.
                            """
                            description: str | None
                            """
                            Interface description.
                            If not set a default description will be configured with '[<peer>[
                            <peer_interface>]]'.
                            """
                            ip_address: str | None
                            """Node IPv4 address/Mask or 'dhcp'."""
                            dhcp_ip: str | None
                            """
                            When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                            IPv4 address
                            (without mask) to be allocated on the interface if known.
                            This is not rendered in the configuration
                            but can be used for substitution of 'interface_ip' in the Access-list
                            set under `ipv4_acl_in` and
                            `ipv4_acl_out`.
                            """
                            public_ip: str | None
                            """
                            Node IPv4 address (no mask).

                            This is used to get the public IP (if known) when the device is behind
                            NAT.
                            This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                            with the following preference:
                              `wan_route_servers.path_groups.interfaces.ip_address`
                                  ->
                            `l3_interfaces.public_ip`
                                      -> `l3_interfaces.ip_address`

                            The determined Public IP is used
                            by WAN routers when peering with this interface.
                            """
                            encapsulation_dot1q_vlan: int | None
                            """
                            For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                            specified.
                            """
                            dhcp_accept_default_route: bool
                            """
                            Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                            Default value: `True`
                            """
                            enabled: bool
                            """
                            Enable or Shutdown the interface.

                            Default value: `True`
                            """
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            receive_bandwidth: int | None
                            """
                            Maximum allowed receive bandwidth (download) in Mbps for this interface.
                            This is currently used on
                            CVaaS to provide more information in the visualization.
                            """
                            transmit_bandwidth: int | None
                            """
                            Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                            This is currently used on
                            CVaaS to provide more information in the visualization.
                            """
                            peer: str | None
                            """The peer device name. Used for description and documentation."""
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            peer_ip: str | None
                            """
                            The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                            and `ip` is an IP address.
                            """
                            bgp: Bgp
                            """
                            Enforce IPv4 BGP peering for the peer

                            Subclass of AvdModel.
                            """
                            ipv4_acl_in: str | None
                            """
                            Name of the IPv4 access-list to be assigned in the ingress direction.
                            The access-list must be
                            defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            Required
                            for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                            `wan_carriers`.
                            """
                            ipv4_acl_out: str | None
                            """
                            Name of the IPv4 Access-list to be assigned in the egress direction.
                            The access-list must be defined
                            under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            """
                            static_routes: StaticRoutes
                            """
                            Configure IPv4 static routes pointing to `peer_ip`.

                            Subclass of AvdList with `StaticRoutesItem`
                            items.
                            """
                            qos_profile: str | None
                            """QOS service profile."""
                            wan_carrier: str | None
                            """
                            The WAN carrier this interface is connected to.
                            This is used to infer the path-groups in which this
                            interface should be configured.
                            Unless the carrier is marked as 'trusted' under `wan_carriers`,
                            `ipv4_acl_in` is also required on all WAN interfaces.
                            """
                            wan_circuit_id: str | None
                            """
                            The WAN circuit ID for this interface.
                            This is not rendered in the configuration but used for WAN
                            designs.
                            """
                            connected_to_pathfinder: bool
                            """
                            For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                            Default value: `True`
                            """
                            cv_pathfinder_internet_exit: CvPathfinderInternetExit
                            """
                            PREVIEW: This key is in preview mode

                            Subclass of AvdModel.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the interface in the final EOS configuration."""
                            flow_tracking: FlowTracking
                            """
                            Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the Ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    profile: str | None | UndefinedType = Undefined,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    dhcp_ip: str | None | UndefinedType = Undefined,
                                    public_ip: str | None | UndefinedType = Undefined,
                                    encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                    dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                    enabled: bool | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    receive_bandwidth: int | None | UndefinedType = Undefined,
                                    transmit_bandwidth: int | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    peer_ip: str | None | UndefinedType = Undefined,
                                    bgp: Bgp | UndefinedType = Undefined,
                                    ipv4_acl_in: str | None | UndefinedType = Undefined,
                                    ipv4_acl_out: str | None | UndefinedType = Undefined,
                                    static_routes: StaticRoutes | UndefinedType = Undefined,
                                    qos_profile: str | None | UndefinedType = Undefined,
                                    wan_carrier: str | None | UndefinedType = Undefined,
                                    wan_circuit_id: str | None | UndefinedType = Undefined,
                                    connected_to_pathfinder: bool | UndefinedType = Undefined,
                                    cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    L3InterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                        name:
                                           Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                           For a
                                           subinterface, the parent physical interface is automatically created.
                                        description:
                                           Interface description.
                                           If not set a default description will be configured with '[<peer>[
                                           <peer_interface>]]'.
                                        ip_address: Node IPv4 address/Mask or 'dhcp'.
                                        dhcp_ip:
                                           When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                           IPv4 address
                                           (without mask) to be allocated on the interface if known.
                                           This is not rendered in the configuration
                                           but can be used for substitution of 'interface_ip' in the Access-list
                                           set under `ipv4_acl_in` and
                                           `ipv4_acl_out`.
                                        public_ip:
                                           Node IPv4 address (no mask).

                                           This is used to get the public IP (if known) when the device is behind
                                           NAT.
                                           This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                           with the following preference:
                                             `wan_route_servers.path_groups.interfaces.ip_address`
                                                 ->
                                           `l3_interfaces.public_ip`
                                                     -> `l3_interfaces.ip_address`

                                           The determined Public IP is used
                                           by WAN routers when peering with this interface.
                                        encapsulation_dot1q_vlan:
                                           For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                           specified.
                                        dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                        enabled: Enable or Shutdown the interface.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        receive_bandwidth:
                                           Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                           This is currently used on
                                           CVaaS to provide more information in the visualization.
                                        transmit_bandwidth:
                                           Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                           This is currently used on
                                           CVaaS to provide more information in the visualization.
                                        peer: The peer device name. Used for description and documentation.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        peer_ip:
                                           The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                           and `ip` is an IP address.
                                        bgp:
                                           Enforce IPv4 BGP peering for the peer

                                           Subclass of AvdModel.
                                        ipv4_acl_in:
                                           Name of the IPv4 access-list to be assigned in the ingress direction.
                                           The access-list must be
                                           defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                           Required
                                           for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                           `wan_carriers`.
                                        ipv4_acl_out:
                                           Name of the IPv4 Access-list to be assigned in the egress direction.
                                           The access-list must be defined
                                           under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                        static_routes:
                                           Configure IPv4 static routes pointing to `peer_ip`.

                                           Subclass of AvdList with `StaticRoutesItem`
                                           items.
                                        qos_profile: QOS service profile.
                                        wan_carrier:
                                           The WAN carrier this interface is connected to.
                                           This is used to infer the path-groups in which this
                                           interface should be configured.
                                           Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                           `ipv4_acl_in` is also required on all WAN interfaces.
                                        wan_circuit_id:
                                           The WAN circuit ID for this interface.
                                           This is not rendered in the configuration but used for WAN
                                           designs.
                                        connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                        cv_pathfinder_internet_exit:
                                           PREVIEW: This key is in preview mode

                                           Subclass of AvdModel.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                        flow_tracking:
                                           Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the Ethernet interface.

                                    """

                        class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                            """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        L3Interfaces._item_type = L3InterfacesItem

                        class L3PortChannelsItem(AvdModel):
                            """Subclass of AvdModel."""

                            class MemberInterfacesItem(AvdModel):
                                """Subclass of AvdModel."""

                                class RxQueue(AvdModel):
                                    """Subclass of AvdModel."""

                                    class Workers(AvdList[str]):
                                        """Subclass of AvdList with `str` items."""

                                    Workers._item_type = str

                                    _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                    count: int | None
                                    """
                                    Number of receive queues.
                                    The maximum value is determined by
                                    `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                    `platform` set on this device.
                                    """
                                    workers: Workers
                                    """Subclass of AvdList with `str` items."""
                                    mode: Literal["shared", "exclusive"] | None
                                    """Mode applicable to the workers."""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            count: int | None | UndefinedType = Undefined,
                                            workers: Workers | UndefinedType = Undefined,
                                            mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            RxQueue.


                                            Subclass of AvdModel.

                                            Args:
                                                count:
                                                   Number of receive queues.
                                                   The maximum value is determined by
                                                   `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                                   `platform` set on this device.
                                                workers: Subclass of AvdList with `str` items.
                                                mode: Mode applicable to the workers.

                                            """

                                _fields: ClassVar[dict] = {
                                    "name": {"type": str},
                                    "description": {"type": str},
                                    "peer": {"type": str},
                                    "peer_interface": {"type": str},
                                    "speed": {"type": str},
                                    "rx_queue": {"type": RxQueue},
                                    "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                                }
                                name: str
                                """
                                Ethernet interface name like 'Ethernet2'.
                                Member interface cannot be subinterface.
                                """
                                description: str | None
                                """
                                Interface description for this member.
                                If not set, a default description will be configured with
                                '[<peer>[ <peer_interface>]]'.
                                """
                                peer: str | None
                                """
                                The peer device name. Used for description and documentation.
                                If not set, this inherits the peer
                                setting on the port-channel interface.
                                """
                                peer_interface: str | None
                                """The peer device interface. Used for description and documentation."""
                                speed: str | None
                                """
                                Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                <interface_speed>`.
                                """
                                rx_queue: RxQueue
                                """
                                Receive queue parameters for platform SFE interface profile.
                                This setting is ignored unless the
                                `platform_sfe_interface_profile.supported` is set as `true` under
                                `platform_settings.feature_support` for the `platform` set on this device.

                                Subclass of AvdModel.
                                """
                                structured_config: EosCliConfigGen.EthernetInterfacesItem
                                """Custom structured config for the member ethernet interface."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        name: str | UndefinedType = Undefined,
                                        description: str | None | UndefinedType = Undefined,
                                        peer: str | None | UndefinedType = Undefined,
                                        peer_interface: str | None | UndefinedType = Undefined,
                                        speed: str | None | UndefinedType = Undefined,
                                        rx_queue: RxQueue | UndefinedType = Undefined,
                                        structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        MemberInterfacesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name:
                                               Ethernet interface name like 'Ethernet2'.
                                               Member interface cannot be subinterface.
                                            description:
                                               Interface description for this member.
                                               If not set, a default description will be configured with
                                               '[<peer>[ <peer_interface>]]'.
                                            peer:
                                               The peer device name. Used for description and documentation.
                                               If not set, this inherits the peer
                                               setting on the port-channel interface.
                                            peer_interface: The peer device interface. Used for description and documentation.
                                            speed:
                                               Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                               <interface_speed>`.
                                            rx_queue:
                                               Receive queue parameters for platform SFE interface profile.
                                               This setting is ignored unless the
                                               `platform_sfe_interface_profile.supported` is set as `true` under
                                               `platform_settings.feature_support` for the `platform` set on this device.

                                               Subclass of AvdModel.
                                            structured_config: Custom structured config for the member ethernet interface.

                                        """

                            class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                                """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            MemberInterfaces._item_type = MemberInterfacesItem

                            class Bgp(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {
                                    "peer_as": {"type": str},
                                    "ipv4_prefix_list_in": {"type": str},
                                    "ipv4_prefix_list_out": {"type": str},
                                }
                                peer_as: str
                                """
                                BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                For asdot notation in
                                YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                number.
                                """
                                ipv4_prefix_list_in: str | None
                                """
                                Prefix List Name. Accept routes for only these prefixes from the peer.
                                Required for wan interfaces.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """
                                ipv4_prefix_list_out: str | None
                                """
                                Prefix List Name. Advertise routes for only these prefixes.
                                If not specified, nothing would be
                                advertised.
                                The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        peer_as: str | UndefinedType = Undefined,
                                        ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                        ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Bgp.


                                        Subclass of AvdModel.

                                        Args:
                                            peer_as:
                                               BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                               For asdot notation in
                                               YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                               number.
                                            ipv4_prefix_list_in:
                                               Prefix List Name. Accept routes for only these prefixes from the peer.
                                               Required for wan interfaces.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                            ipv4_prefix_list_out:
                                               Prefix List Name. Advertise routes for only these prefixes.
                                               If not specified, nothing would be
                                               advertised.
                                               The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                        """

                            class StaticRoutesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"prefix": {"type": str}}
                                prefix: str
                                """IPv4_network/Mask."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                        """
                                        StaticRoutesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            prefix: IPv4_network/Mask.

                                        """

                            class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                                """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                                _primary_key: ClassVar[str] = "prefix"

                            StaticRoutes._item_type = StaticRoutesItem

                            class FlowTracking(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                                enabled: bool | None
                                name: str | None
                                """Flow tracker name as defined in flow_tracking_settings."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        FlowTracking.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled: enabled
                                            name: Flow tracker name as defined in flow_tracking_settings.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "mode": {"type": str, "default": "active"},
                                "member_interfaces": {"type": MemberInterfaces},
                                "ip_address": {"type": str},
                                "dhcp_ip": {"type": str},
                                "public_ip": {"type": str},
                                "encapsulation_dot1q_vlan": {"type": int},
                                "dhcp_accept_default_route": {"type": bool, "default": True},
                                "enabled": {"type": bool, "default": True},
                                "peer": {"type": str},
                                "peer_port_channel": {"type": str},
                                "peer_ip": {"type": str},
                                "bgp": {"type": Bgp},
                                "ipv4_acl_in": {"type": str},
                                "ipv4_acl_out": {"type": str},
                                "static_routes": {"type": StaticRoutes},
                                "qos_profile": {"type": str},
                                "wan_carrier": {"type": str},
                                "wan_circuit_id": {"type": str},
                                "connected_to_pathfinder": {"type": bool, "default": True},
                                "raw_eos_cli": {"type": str},
                                "flow_tracking": {"type": FlowTracking},
                                "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            }
                            name: str
                            """
                            Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                            For a
                            Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                            """
                            description: str | None
                            """
                            Interface description.
                            If not set, a default description will be configured with '[<peer>[
                            <peer_port_channel>]]'.
                            """
                            mode: Literal["active", "passive", "on"]
                            """
                            Port-Channel mode.
                            Should not be set on Port-Channel subinterfaces.

                            Default value: `"active"`
                            """
                            member_interfaces: MemberInterfaces
                            """
                            Port-Channel member interfaces.
                            Should not be set on Port-Channel subinterfaces.

                            Subclass of
                            AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                            """
                            ip_address: str | None
                            """Node IPv4 address/Mask or 'dhcp'."""
                            dhcp_ip: str | None
                            """
                            When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                            IPv4 address
                            (without mask) to be allocated on the interface if known.
                            This is not rendered in the configuration
                            but can be used for substitution of 'interface_ip' in the Access-list
                            set under `ipv4_acl_in` and
                            `ipv4_acl_out`.
                            """
                            public_ip: str | None
                            """
                            Node IPv4 address (no mask).

                            This is used to get the public IP (if known) when the device is behind
                            NAT.
                            This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                            with the following preference:
                              `wan_route_servers.path_groups.interfaces.ip_address`
                                  ->
                            `l3_port_channels.public_ip`
                                      -> `l3_port_channels.ip_address`

                            The determined Public IP is
                            used by WAN routers when peering with this interface.
                            """
                            encapsulation_dot1q_vlan: int | None
                            """
                            For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                            specified.
                            """
                            dhcp_accept_default_route: bool
                            """
                            Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                            Default value: `True`
                            """
                            enabled: bool
                            """
                            Enable or Shutdown the interface.

                            Default value: `True`
                            """
                            peer: str | None
                            """The peer device name. Used for description and documentation."""
                            peer_port_channel: str | None
                            """The peer device port-channel interface. Used for description and documentation."""
                            peer_ip: str | None
                            """
                            The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                            and `ip` is an IP address.
                            """
                            bgp: Bgp
                            """
                            Enforce IPv4 BGP peering for the peer

                            Subclass of AvdModel.
                            """
                            ipv4_acl_in: str | None
                            """
                            Name of the IPv4 access-list to be assigned in the ingress direction.
                            The access-list must be
                            defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            Required
                            for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                            `wan_carriers`.
                            """
                            ipv4_acl_out: str | None
                            """
                            Name of the IPv4 Access-list to be assigned in the egress direction.
                            The access-list must be defined
                            under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                            """
                            static_routes: StaticRoutes
                            """
                            Configure IPv4 static routes pointing to `peer_ip`.

                            Subclass of AvdIndexedList with
                            `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                            """
                            qos_profile: str | None
                            """QOS service profile."""
                            wan_carrier: str | None
                            """
                            The WAN carrier this interface is connected to.
                            This is used to infer the path-groups in which this
                            interface should be configured.
                            Unless the carrier is marked as 'trusted' under `wan_carriers`,
                            `ipv4_acl_in` is also required on all WAN interfaces.
                            """
                            wan_circuit_id: str | None
                            """
                            The WAN circuit ID for this interface.
                            This is not rendered in the configuration but used for WAN
                            designs.
                            """
                            connected_to_pathfinder: bool
                            """
                            For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                            Default value: `True`
                            """
                            raw_eos_cli: str | None
                            """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                            flow_tracking: FlowTracking
                            """
                            Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                            setting.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.PortChannelInterfacesItem
                            """Custom structured config for the Port-Channel interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                    member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    dhcp_ip: str | None | UndefinedType = Undefined,
                                    public_ip: str | None | UndefinedType = Undefined,
                                    encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                    dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                    enabled: bool | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_port_channel: str | None | UndefinedType = Undefined,
                                    peer_ip: str | None | UndefinedType = Undefined,
                                    bgp: Bgp | UndefinedType = Undefined,
                                    ipv4_acl_in: str | None | UndefinedType = Undefined,
                                    ipv4_acl_out: str | None | UndefinedType = Undefined,
                                    static_routes: StaticRoutes | UndefinedType = Undefined,
                                    qos_profile: str | None | UndefinedType = Undefined,
                                    wan_carrier: str | None | UndefinedType = Undefined,
                                    wan_circuit_id: str | None | UndefinedType = Undefined,
                                    connected_to_pathfinder: bool | UndefinedType = Undefined,
                                    raw_eos_cli: str | None | UndefinedType = Undefined,
                                    flow_tracking: FlowTracking | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    L3PortChannelsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                           For a
                                           Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                        description:
                                           Interface description.
                                           If not set, a default description will be configured with '[<peer>[
                                           <peer_port_channel>]]'.
                                        mode:
                                           Port-Channel mode.
                                           Should not be set on Port-Channel subinterfaces.
                                        member_interfaces:
                                           Port-Channel member interfaces.
                                           Should not be set on Port-Channel subinterfaces.

                                           Subclass of
                                           AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                        ip_address: Node IPv4 address/Mask or 'dhcp'.
                                        dhcp_ip:
                                           When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                           IPv4 address
                                           (without mask) to be allocated on the interface if known.
                                           This is not rendered in the configuration
                                           but can be used for substitution of 'interface_ip' in the Access-list
                                           set under `ipv4_acl_in` and
                                           `ipv4_acl_out`.
                                        public_ip:
                                           Node IPv4 address (no mask).

                                           This is used to get the public IP (if known) when the device is behind
                                           NAT.
                                           This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                           with the following preference:
                                             `wan_route_servers.path_groups.interfaces.ip_address`
                                                 ->
                                           `l3_port_channels.public_ip`
                                                     -> `l3_port_channels.ip_address`

                                           The determined Public IP is
                                           used by WAN routers when peering with this interface.
                                        encapsulation_dot1q_vlan:
                                           For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                           specified.
                                        dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                        enabled: Enable or Shutdown the interface.
                                        peer: The peer device name. Used for description and documentation.
                                        peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                        peer_ip:
                                           The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                           and `ip` is an IP address.
                                        bgp:
                                           Enforce IPv4 BGP peering for the peer

                                           Subclass of AvdModel.
                                        ipv4_acl_in:
                                           Name of the IPv4 access-list to be assigned in the ingress direction.
                                           The access-list must be
                                           defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                           Required
                                           for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                           `wan_carriers`.
                                        ipv4_acl_out:
                                           Name of the IPv4 Access-list to be assigned in the egress direction.
                                           The access-list must be defined
                                           under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                        static_routes:
                                           Configure IPv4 static routes pointing to `peer_ip`.

                                           Subclass of AvdIndexedList with
                                           `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                        qos_profile: QOS service profile.
                                        wan_carrier:
                                           The WAN carrier this interface is connected to.
                                           This is used to infer the path-groups in which this
                                           interface should be configured.
                                           Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                           `ipv4_acl_in` is also required on all WAN interfaces.
                                        wan_circuit_id:
                                           The WAN circuit ID for this interface.
                                           This is not rendered in the configuration but used for WAN
                                           designs.
                                        connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                        raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                        flow_tracking:
                                           Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                           setting.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the Port-Channel interface.

                                    """

                        class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                            """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        L3PortChannels._item_type = L3PortChannelsItem

                        class UnderlayMulticast(AvdModel):
                            """Subclass of AvdModel."""

                            class PimSm(AvdModel):
                                """Subclass of AvdModel."""

                                class UplinkInterfaces(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                UplinkInterfaces._item_type = str

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "uplinks": {"type": bool, "default": True},
                                    "uplink_interfaces": {"type": UplinkInterfaces},
                                    "mlag": {"type": bool, "default": True},
                                }
                                enabled: bool | None
                                """
                                When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                on all:
                                  - P2P uplink interfaces if enabled on uplink peer
                                  - MLAG L3 peer interface if also
                                enabled on MLAG peer
                                  - l3_edge and core interfaces
                                Overrides the global
                                `underlay_multicast_pim_sm`.
                                """
                                uplinks: bool
                                """
                                Enable/Disable PIM sparse-mode on uplinks.
                                Requires node setting `underlay_multicast.pim_sm.enabled:
                                true` or, if unset, global `underlay_multicast_pim_sm: true`

                                Default value: `True`
                                """
                                uplink_interfaces: UplinkInterfaces
                                """
                                Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                Effective only when
                                node settings `underlay_multicast.pim_sm.uplinks: true`.

                                Subclass of AvdList with `str` items.
                                """
                                mlag: bool
                                """
                                Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                Default value: `True`
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        uplinks: bool | UndefinedType = Undefined,
                                        uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                        mlag: bool | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        PimSm.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled:
                                               When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                               on all:
                                                 - P2P uplink interfaces if enabled on uplink peer
                                                 - MLAG L3 peer interface if also
                                               enabled on MLAG peer
                                                 - l3_edge and core interfaces
                                               Overrides the global
                                               `underlay_multicast_pim_sm`.
                                            uplinks:
                                               Enable/Disable PIM sparse-mode on uplinks.
                                               Requires node setting `underlay_multicast.pim_sm.enabled:
                                               true` or, if unset, global `underlay_multicast_pim_sm: true`
                                            uplink_interfaces:
                                               Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                               Effective only when
                                               node settings `underlay_multicast.pim_sm.uplinks: true`.

                                               Subclass of AvdList with `str` items.
                                            mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                        """

                            class Static(AvdModel):
                                """Subclass of AvdModel."""

                                class UplinkInterfaces(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                UplinkInterfaces._item_type = str

                                _fields: ClassVar[dict] = {
                                    "enabled": {"type": bool},
                                    "uplinks": {"type": bool, "default": True},
                                    "uplink_interfaces": {"type": UplinkInterfaces},
                                    "mlag": {"type": bool, "default": True},
                                }
                                enabled: bool | None
                                """
                                When enabled, configures multicast routing and by default configures static multicast in the
                                underlay on all:
                                  - P2P uplink interfaces if enabled on uplink peer
                                  - MLAG L3 peer interface if
                                also enabled on MLAG peer
                                  - l3_edge and core interfaces
                                Overrides the global
                                `underlay_multicast_multicast`.
                                """
                                uplinks: bool
                                """
                                Enable/Disable static multicast on uplinks.
                                Requires node setting
                                `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                                Default value: `True`
                                """
                                uplink_interfaces: UplinkInterfaces
                                """
                                Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                Effective
                                only when node settings `underlay_multicast.static.uplinks: true`.

                                Subclass of AvdList with `str`
                                items.
                                """
                                mlag: bool
                                """
                                Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                Default value: `True`
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        enabled: bool | None | UndefinedType = Undefined,
                                        uplinks: bool | UndefinedType = Undefined,
                                        uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                        mlag: bool | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Static.


                                        Subclass of AvdModel.

                                        Args:
                                            enabled:
                                               When enabled, configures multicast routing and by default configures static multicast in the
                                               underlay on all:
                                                 - P2P uplink interfaces if enabled on uplink peer
                                                 - MLAG L3 peer interface if
                                               also enabled on MLAG peer
                                                 - l3_edge and core interfaces
                                               Overrides the global
                                               `underlay_multicast_multicast`.
                                            uplinks:
                                               Enable/Disable static multicast on uplinks.
                                               Requires node setting
                                               `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                            uplink_interfaces:
                                               Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                               Effective
                                               only when node settings `underlay_multicast.static.uplinks: true`.

                                               Subclass of AvdList with `str`
                                               items.
                                            mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                        """

                            _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                            pim_sm: PimSm
                            """Subclass of AvdModel."""
                            static: Static
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                    """
                                    UnderlayMulticast.


                                    Subclass of AvdModel.

                                    Args:
                                        pim_sm: Subclass of AvdModel.
                                        static: Subclass of AvdModel.

                                    """

                        class DigitalTwin(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                            act_os_version: str | None
                            """
                            Desired ACT Digital Twin OS version.
                            Overrides global `digital_twin.fabric.act_os_version` flag.
                            """
                            mgmt_ip: str | None
                            """Desired management interface IPv4 address."""
                            act_internet_access: bool | None
                            """
                            Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                            This option
                            applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                            types.
                            ACT does not provide direct Internet access to cloudeos or veos devices by default.
                            Overrides
                            global `digital_twin.fabric.act_internet_access` flag.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    act_os_version: str | None | UndefinedType = Undefined,
                                    mgmt_ip: str | None | UndefinedType = Undefined,
                                    act_internet_access: bool | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    DigitalTwin.


                                    Subclass of AvdModel.

                                    Args:
                                        act_os_version:
                                           Desired ACT Digital Twin OS version.
                                           Overrides global `digital_twin.fabric.act_os_version` flag.
                                        mgmt_ip: Desired management interface IPv4 address.
                                        act_internet_access:
                                           Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                           This option
                                           applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                           types.
                                           ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                           Overrides
                                           global `digital_twin.fabric.act_internet_access` flag.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "downlink_pools": {"type": DownlinkPools},
                            "id": {"type": int},
                            "platform": {"type": str},
                            "mac_address": {"type": str},
                            "system_mac_address": {"type": str},
                            "serial_number": {"type": str},
                            "rack": {"type": str},
                            "mgmt_ip": {"type": str},
                            "mgmt_gateway": {"type": str},
                            "ipv6_mgmt_ip": {"type": str},
                            "ipv6_mgmt_gateway": {"type": str},
                            "mgmt_interface": {"type": str},
                            "link_tracking": {"type": LinkTracking},
                            "lacp_port_id_range": {"type": LacpPortIdRange},
                            "always_configure_ip_routing": {"type": bool, "default": False},
                            "raw_eos_cli": {"type": str},
                            "structured_config": {"type": EosCliConfigGen},
                            "uplink_type": {"type": str},
                            "uplink_ipv4_pool": {"type": str},
                            "uplink_ipv6_pool": {"type": str},
                            "uplink_interfaces": {"type": UplinkInterfaces},
                            "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                            "uplink_switches": {"type": UplinkSwitches},
                            "uplink_interface_speed": {"type": str},
                            "uplink_switch_interface_speed": {"type": str},
                            "uplink_mtu": {"type": int},
                            "max_uplink_switches": {"type": int},
                            "max_parallel_uplinks": {"type": int, "default": 1},
                            "uplink_bfd": {"type": bool, "default": False},
                            "uplink_native_vlan": {"type": int},
                            "uplink_ptp": {"type": UplinkPtp},
                            "uplink_macsec": {"type": UplinkMacsec},
                            "uplink_port_channel_id": {"type": int},
                            "uplink_switch_port_channel_id": {"type": int},
                            "uplink_structured_config": {"type": dict},
                            "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                            "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                            "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                            "short_esi": {"type": str},
                            "isis_system_id_prefix": {"type": str},
                            "isis_maximum_paths": {"type": int},
                            "is_type": {"type": str},
                            "node_sid_base": {"type": int, "default": 0},
                            "loopback_ipv4_pool": {"type": str},
                            "loopback_ipv4_address": {"type": str},
                            "vtep_loopback_ipv4_pool": {"type": str},
                            "vtep_loopback_ipv6_pool": {"type": str},
                            "vtep_loopback_ipv4_address": {"type": str},
                            "vtep_loopback_ipv6_address": {"type": str},
                            "loopback_ipv4_offset": {"type": int, "default": 0},
                            "router_id_pool": {"type": str},
                            "loopback_ipv6_pool": {"type": str},
                            "loopback_ipv6_offset": {"type": int, "default": 0},
                            "vtep": {"type": bool},
                            "vtep_loopback": {"type": str},
                            "bgp_as": {"type": str},
                            "bgp_defaults": {"type": BgpDefaults},
                            "evpn_role": {"type": str},
                            "evpn_route_servers": {"type": EvpnRouteServers},
                            "evpn_services_l2_only": {"type": bool, "default": False},
                            "filter": {"type": Filter},
                            "igmp_snooping_enabled": {"type": bool},
                            "evpn_gateway": {"type": EvpnGateway},
                            "ipvpn_gateway": {"type": IpvpnGateway},
                            "mlag": {"type": bool, "default": True},
                            "mlag_dual_primary_detection": {"type": bool, "default": False},
                            "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                            "mlag_interfaces": {"type": MlagInterfaces},
                            "mlag_interfaces_speed": {"type": str},
                            "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                            "mlag_peer_l3_ipv4_pool": {"type": str},
                            "mlag_peer_l3_ipv6_pool": {"type": str},
                            "mlag_peer_vlan": {"type": int, "default": 4094},
                            "mlag_peer_link_allowed_vlans": {"type": str},
                            "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                            "mlag_peer_ipv4_pool": {"type": str},
                            "mlag_peer_ipv6_pool": {"type": str},
                            "mlag_port_channel_id": {"type": int},
                            "mlag_domain_id": {"type": str},
                            "spanning_tree_mode": {"type": str},
                            "spanning_tree_priority": {"type": int, "default": 32768},
                            "spanning_tree_root_super": {"type": bool, "default": False},
                            "spanning_tree_mst_pvst_boundary": {"type": bool},
                            "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                            "virtual_router_mac_address": {"type": str},
                            "inband_mgmt_interface": {"type": str},
                            "inband_mgmt_vlan": {"type": int, "default": 4092},
                            "inband_mgmt_subnet": {"type": str},
                            "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                            "inband_mgmt_ip": {"type": str},
                            "inband_mgmt_gateway": {"type": str},
                            "inband_mgmt_ipv6_address": {"type": str},
                            "inband_mgmt_ipv6_subnet": {"type": str},
                            "inband_mgmt_ipv6_gateway": {"type": str},
                            "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                            "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                            "inband_mgmt_vrf": {"type": str, "default": "default"},
                            "inband_mgmt_mtu": {"type": int, "default": 1500},
                            "inband_ztp": {"type": bool, "default": False},
                            "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                            "mpls_overlay_role": {"type": str},
                            "overlay_address_families": {"type": OverlayAddressFamilies},
                            "mpls_route_reflectors": {"type": MplsRouteReflectors},
                            "bgp_cluster_id": {"type": str},
                            "ptp": {"type": Ptp},
                            "wan_role": {"type": str},
                            "cv_pathfinder_transit_mode": {"type": str},
                            "cv_pathfinder_region": {"type": str},
                            "cv_pathfinder_site": {"type": str},
                            "wan_ha": {"type": WanHa},
                            "dps_mss_ipv4": {"type": str, "default": "auto"},
                            "l3_interfaces": {"type": L3Interfaces},
                            "l3_port_channels": {"type": L3PortChannels},
                            "data_plane_cpu_allocation_max": {"type": int},
                            "flow_tracker_type": {"type": str},
                            "underlay_multicast": {"type": UnderlayMulticast},
                            "campus": {"type": str},
                            "campus_pod": {"type": str},
                            "campus_access_pod": {"type": str},
                            "cv_tags_topology_type": {"type": str},
                            "digital_twin": {"type": DigitalTwin},
                        }
                        name: str
                        """The Node Name is used as "hostname"."""
                        downlink_pools: DownlinkPools
                        """
                        IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                        with `uplink_ipv4_pool` set on the downlink switch.

                        Subclass of AvdList with `DownlinkPoolsItem`
                        items.
                        """
                        id: int | None
                        """Unique identifier used for IP addressing and other algorithms."""
                        platform: str | None
                        """Arista platform family."""
                        mac_address: str | None
                        """Leverage to document management interface mac address."""
                        system_mac_address: str | None
                        """
                        System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                        Set to the same MAC address as
                        available in "show version" on the device.
                        "system_mac_address" can also be set directly as a
                        hostvar.
                        If both are set, the setting under node type settings takes precedence.
                        """
                        serial_number: str | None
                        """
                        Set to the Serial Number of the device.
                        Only used for documentation purpose in the fabric
                        documentation and part of the structured_config.
                        "serial_number" can also be set directly as a
                        hostvar.
                        If both are set, the setting under node type settings takes precedence.
                        """
                        rack: str | None
                        """Rack that the switch is located in (only used in snmp_settings location)."""
                        mgmt_ip: str | None
                        """Node management interface IPv4 address."""
                        mgmt_gateway: str | None
                        """
                        This key sets the management gateway for the device. It takes precedence over the global
                        `mgmt_gateway`.
                        """
                        ipv6_mgmt_ip: str | None
                        """Node management interface IPv6 address."""
                        ipv6_mgmt_gateway: str | None
                        """
                        This key sets the ipv6 management gateway for the device. It takes precedence over the global
                        `ipv6_mgmt_gateway`.
                        """
                        mgmt_interface: str | None
                        """
                        Management Interface Name.
                        Default -> platform_management_interface -> mgmt_interface ->
                        "Management1".
                        """
                        link_tracking: LinkTracking
                        """
                        This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                        the upstream interfaces.
                        Useful in EVPN multhoming designs.


                        Subclass of AvdModel.
                        """
                        lacp_port_id_range: LacpPortIdRange
                        """
                        This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                        number of nodes in the "node_group".
                        Unique LACP port-id ranges are recommended for EVPN Multihoming
                        designs.


                        Subclass of AvdModel.
                        """
                        always_configure_ip_routing: bool
                        """
                        Force configuration of "ip routing" even on L2 devices.
                        Use this to retain behavior of AVD versions
                        below 4.0.0.

                        Default value: `False`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the root level of the final EOS configuration."""
                        structured_config: EosCliConfigGen
                        """Custom structured config for eos_cli_config_gen."""
                        uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                        """
                        Override the default `uplink_type` set at the `node_type_key` level.
                        `uplink_type` must be "p2p" if
                        `vtep` or `underlay_router` is true for the `node_type_key` definition.
                        """
                        uplink_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        IPv4
                        subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                        uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                        """
                        uplink_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        IPv6
                        subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                        uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                        """
                        uplink_interfaces: UplinkInterfaces
                        """
                        Local uplink interfaces.
                        Each list item supports range syntax that can be expanded into a list of
                        interfaces.
                        If uplink_interfaces is not defined, platform-specific defaults (defined under
                        default_interfaces) will be used instead.
                        Please note that default_interfaces are not defined by
                        default, you should define these yourself.


                        Subclass of AvdList with `str` items.
                        """
                        uplink_switch_interfaces: UplinkSwitchInterfaces
                        """
                        Interfaces located on uplink switches.

                        Subclass of AvdList with `str` items.
                        """
                        uplink_switches: UplinkSwitches
                        """Subclass of AvdList with `str` items."""
                        uplink_interface_speed: str | None
                        """
                        Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                        (Uplink switch
                        interface speed can be overridden with `uplink_switch_interface_speed`).
                        Speed should be set in the
                        format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                        """
                        uplink_switch_interface_speed: str | None
                        """
                        Set point-to-Point interface speed for the uplink switch interface only.
                        Speed should be set in the
                        format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                        """
                        uplink_mtu: int | None
                        """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                        max_uplink_switches: int | None
                        """
                        Maximum number of uplink switches.
                        Changing this value may change IP Addressing on uplinks.
                        Can be
                        used to reserve IP space for future expansions.
                        """
                        max_parallel_uplinks: int
                        """
                        Number of parallel links towards uplink switches.
                        Changing this value may change interface naming on
                        uplinks (and corresponding downlinks).
                        Can be used to reserve interfaces for future parallel
                        uplinks.

                        Default value: `1`
                        """
                        uplink_bfd: bool
                        """
                        Enable bfd on uplink interfaces.

                        Default value: `False`
                        """
                        uplink_native_vlan: int | None
                        """
                        Only applicable to switches with layer-2 port-channel uplinks.
                        A suspended (disabled) vlan will be
                        created in both ends of the link unless the vlan is defined under network services.
                        By default the
                        uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                        """
                        uplink_ptp: UplinkPtp
                        """
                        Enable PTP on all infrastructure links.

                        Subclass of AvdModel.
                        """
                        uplink_macsec: UplinkMacsec
                        """
                        Enable MacSec on all uplinks.

                        Subclass of AvdModel.
                        """
                        uplink_port_channel_id: int | None
                        """
                        Only applicable for L2 switches with `uplink_type: port-channel`.
                        By default the uplink Port-channel
                        ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                        For
                        example:
                          member ports [ Eth22, Eth23 ] -> ID 22
                          member ports [ Eth11/1, Eth22/1 ] -> ID 111
                        For
                        MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                        This
                        option overrides the default behavior and statically sets the local Port-channel ID.
                        Note! Make sure
                        the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                        Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                        value.
                        """
                        uplink_switch_port_channel_id: int | None
                        """
                        Only applicable for L2 switches with `uplink_type: port-channel`.
                        By default the uplink switch Port-
                        channel ID will be set to the number of the first interface defined under
                        `uplink_switch_interfaces`.
                        For example:
                          member ports [ Eth22, Eth23 ] -> ID 22
                          member ports [
                        Eth11/1, Eth22/1 ] -> ID 111
                        For MLAG port-channels ID will be based on the lowest member interface
                        on the first MLAG switch.
                        This option overrides the default behavior and statically sets the Port-
                        channel ID on the uplink switch.
                        Note! Make sure the ID is unique and does not overlap with
                        autogenerated Port-channel IDs in the Network Services.
                        Note! For MLAG pairs the ID must be between
                        1 and 2000 and both MLAG switches must have the same value.
                        """
                        uplink_structured_config: dict
                        """
                        Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                        When
                        uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                        for eos_cli_config_gen overrides the settings on the ethernet interface level.
                        When uplink_type ==
                        "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                        eos_cli_config_gen overrides the settings on the port-channel interface level.
                        "uplink_structured_config" is applied after "structured_config", so it can override
                        "structured_config" defined on node-level.
                        Note! The content of this dictionary is _not_ validated
                        by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                        """
                        uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config applied to `uplink_interfaces`."""
                        uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                        uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                        uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                        channel uplinks.
                        """
                        mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """
                        Custom structured config applied to MLAG peer link port-channel id.
                        Added under
                        port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                        Overrides the settings on the
                        port-channel interface level.
                        "mlag_port_channel_structured_config" is applied after
                        "structured_config", so it can override "structured_config" defined on node-level.
                        """
                        mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                        """
                        Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                        Added under
                        vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                        Overrides the settings on the vlan
                        interface level.
                        "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                        override "structured_config" defined on node-level.
                        """
                        mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                        """
                        Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                        Added under
                        vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                        Overrides the settings on the vlan
                        interface level.
                        "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                        can override "structured_config" defined on node-level.
                        """
                        short_esi: str | None
                        """
                        short_esi only valid for l2leaf devices using port-channel uplink.
                        Setting short_esi to "auto"
                        generates the short_esi automatically using a hash of configuration elements.
                        < 0000:0000:0000 |
                        auto >.
                        """
                        isis_system_id_prefix: str | None
                        """(4.4 hexadecimal)."""
                        isis_maximum_paths: int | None
                        """Number of path to configure in ECMP for ISIS."""
                        is_type: Literal["level-1-2", "level-1", "level-2"] | None
                        """Overrides `isis_default_is_type`."""
                        node_sid_base: int
                        """
                        Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                        Default value: `0`
                        """
                        loopback_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        address used for Loopback0 will be derived from this pool based on the node id and
                        'loopback_ipv4_offset'.
                        """
                        loopback_ipv4_address: str | None
                        """
                        IPv4 address without mask for Loopback0.
                        When set, it takes precedence over `loopback_ipv4_pool`.
                        Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                        """
                        vtep_loopback_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                        address used for VTEP-Loopback will be derived from this pool based on the node id and
                        'loopback_ipv4_offset'.
                        """
                        vtep_loopback_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                        address used for VTEP-Loopback will be derived from this pool based on the node id and
                        'loopback_ipv6_offset'.
                        """
                        vtep_loopback_ipv4_address: str | None
                        """
                        IPv4 address without mask for VTEP-Loopback.
                        When set, it takes precedence over
                        `vtep_loopback_ipv4_pool`.
                        Note: AVD does not check for validity of the IPv4 address and does not
                        catch duplicates.
                        """
                        vtep_loopback_ipv6_address: str | None
                        """
                        IPv6 address without mask for VTEP-Loopback.
                        When set, it takes precedence over
                        `vtep_loopback_ipv6_pool`.
                        Note: AVD does not check for validity of the IPv6 address and does not
                        catch duplicates.
                        """
                        loopback_ipv4_offset: int
                        """
                        Offset all assigned loopback IP addresses.
                        Required when the 'loopback_ipv4_pool' is the same for 2
                        different node_types (like spine and l3leaf) to avoid overlapping IPs.
                        For example, set the minimum
                        offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                        Default value: `0`
                        """
                        router_id_pool: str | None
                        """
                        Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                        router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                        will not exist on the device.
                        """
                        loopback_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                        address used for Loopback0 will be derived from this pool based on the node id and
                        'loopback_ipv6_offset'.
                        """
                        loopback_ipv6_offset: int
                        """
                        Offset all assigned loopback IPv6 addresses.
                        Required when the 'loopback_ipv6_pool' is same for 2
                        different node_types (like spine and l3leaf) to avoid overlapping IPs.
                        For example, set the minimum
                        offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                        Default value: `0`
                        """
                        vtep: bool | None
                        """
                        Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                        Overrides VTEP
                        setting inherited from node_type_keys.
                        """
                        vtep_loopback: str | None
                        """Set VXLAN source interface."""
                        bgp_as: str | None
                        """
                        BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in
                        YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                        number.
                        Required with eBGP.
                        """
                        bgp_defaults: BgpDefaults
                        """
                        List of EOS commands to apply to BGP daemon.

                        Subclass of AvdList with `str` items.
                        """
                        evpn_role: Literal["client", "server", "none"] | None
                        """
                        Acting role in EVPN control plane.
                        Default is set in node_type definition from node_type_keys.
                        """
                        evpn_route_servers: EvpnRouteServers
                        """
                        List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                        Subclass of AvdList with `str`
                        items.
                        """
                        evpn_services_l2_only: bool
                        """
                        Possibility to prevent configuration of Tenant VRFs and SVIs.
                        Override node definition
                        "network_services_l3" from node_type_keys.
                        This allows support for centralized routing.

                        Default value: `False`
                        """
                        filter: Filter
                        """
                        Filter L3 and L2 network services based on tenant and tags (and operation filter).
                        If filter is not
                        defined it will default to all.


                        Subclass of AvdModel.
                        """
                        igmp_snooping_enabled: bool | None
                        """Activate or deactivate IGMP snooping on device level."""
                        evpn_gateway: EvpnGateway
                        """
                        Node is acting as EVPN Multi-Domain Gateway.
                        New BGP peer-group is generated between EVPN GWs in
                        different domains or between GWs and Route Servers.
                        Name can be changed under
                        "bgp_peer_groups.evpn_overlay_core" variable.
                        L3 rechability for different EVPN GWs must be already
                        in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                        same Ansible inventory.


                        Subclass of AvdModel.
                        """
                        ipvpn_gateway: IpvpnGateway
                        """
                        Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                        this is "bgp_peer_groups.ipvpn_gateway_peers".
                        L3 Reachability is required for this to work, the
                        preferred method to establish underlay connectivity is to use core_interfaces.


                        Subclass of
                        AvdModel.
                        """
                        mlag: bool
                        """
                        Enable / Disable auto MLAG, when two nodes are defined in node group.

                        Default value: `True`
                        """
                        mlag_dual_primary_detection: bool
                        """
                        Enable / Disable MLAG dual primary detection.

                        Default value: `False`
                        """
                        mlag_ibgp_origin_incomplete: bool
                        """
                        Set origin of routes received from MLAG iBGP peer to incomplete.
                        The purpose is to optimize routing
                        for leaf loopbacks from spine perspective and
                        avoid suboptimal routing via peerlink for control
                        plane traffic.

                        Default value: `True`
                        """
                        mlag_interfaces: MlagInterfaces
                        """
                        Each list item supports range syntax that can be expanded into a list of interfaces.
                        Required when
                        MLAG leafs are present in the topology.


                        Subclass of AvdList with `str` items.
                        """
                        mlag_interfaces_speed: str | None
                        """
                        Set MLAG interface speed.
                        Speed should be set in the format `<interface_speed>` or `forced
                        <interface_speed>` or `auto <interface_speed>`.
                        """
                        mlag_peer_l3_vlan: int
                        """
                        Underlay L3 peering SVI interface id.
                        If set to 0 or the same vlan as mlag_peer_vlan, the
                        mlag_peer_vlan will be used for L3 peering.

                        Default value: `4093`
                        """
                        mlag_peer_l3_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                        MLAG switch.
                        Required when MLAG leafs present in topology and they are using a separate L3 peering
                        VLAN.
                        """
                        mlag_peer_l3_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        The IPv6
                        subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                        MLAG switch.
                        Required when MLAG leafs present in topology and they are using a separate L3 peering
                        VLAN.
                        """
                        mlag_peer_vlan: int
                        """
                        MLAG Peer Link (control link) SVI interface id.

                        Default value: `4094`
                        """
                        mlag_peer_link_allowed_vlans: str | None
                        mlag_peer_address_family: Literal["ipv4", "ipv6"]
                        """
                        IP address family used to establish MLAG Peer Link (control link).
                        `ipv6` requires EOS version
                        4.31.1F or higher.
                        Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                        (ex. `mlag_peer_l3_vlan` set to 4094).

                        Default value: `"ipv4"`
                        """
                        mlag_peer_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                        first MLAG switch.
                        Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                        """
                        mlag_peer_ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        The IPv6
                        address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                        first MLAG switch.
                        Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                        """
                        mlag_port_channel_id: int | None
                        """
                        If not set, the mlag port-channel id is generated based on the digits of the first interface present
                        in 'mlag_interfaces'.
                        Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                        999999 > for EOS >= 4.25.0F.
                        """
                        mlag_domain_id: str | None
                        """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                        spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                        spanning_tree_priority: int
                        """
                        Spanning-tree priority configured for the selected mode.
                        For `rapid-pvst` the priority can also be
                        set per VLAN under network services.

                        Default value: `32768`
                        """
                        spanning_tree_root_super: bool
                        """Default value: `False`"""
                        spanning_tree_mst_pvst_boundary: bool | None
                        """Enable MST PVST border ports."""
                        spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                        """Specify range of port-ids to reserve for port-channels."""
                        virtual_router_mac_address: str | None
                        """Virtual router mac address for anycast gateway."""
                        inband_mgmt_interface: str | None
                        """
                        Pointer to interface used for inband management.
                        All configuration must be done using other data
                        models like network services or structured_config.
                        'inband_mgmt_interface' is only used to refer to
                        this interface as source in various management protocol settings (future feature).

                        On L2 switches,
                        this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                        """
                        inband_mgmt_vlan: int
                        """
                        VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                        uplinks).
                        When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                        switch as well as all 'uplink_switches'.
                        When using 'inband_mgmt_ip' the VLAN and SVI will only be
                        created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                        created using network services data models.

                        Default value: `4092`
                        """
                        inband_mgmt_subnet: str | None
                        """
                        Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                        as uplinks).
                        Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                        ARP.
                        This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                        SVI IP address will be assigned as follows:
                        virtual-router: <subnet> + 1
                        l3leaf A      : <subnet> +
                        2 (same IP on all l3leaf A)
                        l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                        l2leafs       :
                        <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                        GW on l2leafs : <subnet> + 1
                        Assign range
                        larger than total l2leafs + 5

                        Setting is ignored if 'inband_mgmt_ip' is set.

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_subnet_offset: int
                        """
                        Offset value to adjust the calculated inband management IP address within the subnet.
                        The assigned
                        IP will be computed by adding this offset to the device ID.

                        Default value: `0`
                        """
                        inband_mgmt_ip: str | None
                        """
                        IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                        This overrides
                        'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                        If this is set the
                        VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                        The VLAN and SVI on
                        the parent switches must be created using network services data models.

                        This setting is applicable
                        to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_gateway: str | None
                        """
                        Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                        is derived from 'inband_mgmt_subnet' if set.

                        This setting is applicable to L2 switches (switches
                        using port-channel trunks as uplinks).
                        """
                        inband_mgmt_ipv6_address: str | None
                        """
                        IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                        This overrides
                        'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                        If this
                        is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                        The VLAN
                        and SVI on the parent switches must be created using network services data models.

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_ipv6_subnet: str | None
                        """
                        Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                        as uplinks).
                        Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                        on ARP.
                        This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                        extension.
                        SVI IP address will be assigned as follows:
                        virtual-router: <subnet> + 1
                        l3leaf A      :
                        <subnet> + 2 (same IP on all l3leaf A)
                        l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                        l2leafs       : <subnet> + 3 + <l2leaf id>
                        GW on l2leafs : <subnet> + 1
                        Assign range larger than
                        total l2leafs + 5

                        Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_ipv6_gateway: str | None
                        """
                        Default gateway configured in the 'inband_mgmt_vrf'.
                        Used when `inband_mgmt_ipv6_address` is set.
                        Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                        This setting is
                        applicable to L2 switches (switches using port-channel trunks as uplinks).
                        """
                        inband_mgmt_description: str
                        """
                        Description configured on the Inband Management SVI.

                        This setting is only applied on the devices
                        where it is set, it does not automatically affect any parent/child devices configuration, so it must
                        be set on each applicable node/node-group/node-type as needed.

                        Default value: `"Inband Management"`
                        """
                        inband_mgmt_vlan_name: str
                        """
                        Name configured on the Inband Management VLAN.
                        This setting is only applied on the devices where it
                        is set, it does not automatically affect any parent/child devices configuration, so it must be set
                        on each applicable node/node-group/node-type as needed.

                        Default value: `"INBAND_MGMT"`
                        """
                        inband_mgmt_vrf: str
                        """
                        VRF configured on the Inband Management Interface.
                        The VRF is created if not already created by
                        other means.
                        This setting is only applied on the devices where it is set, it does not automatically
                        affect any parent/child devices configuration, so it must be set on each applicable node/node-
                        group/node-type as needed.

                        Default value: `"default"`
                        """
                        inband_mgmt_mtu: int
                        """
                        MTU configured on the Inband Management Interface.
                        This setting is only applied on the devices where
                        it is set, it does not automatically affect any parent/child devices configuration, so it must be
                        set on each applicable node/node-group/node-type as needed.

                        Default value: `1500`
                        """
                        inband_ztp: bool
                        """
                        Enable to configure upstream device with proper configuration to allow downstream devices to be
                        Zero-Touch-Provisioned over the uplink interfaces.
                        For L2 devices this setting also requires that
                        the `inband_mgmt_vlan` is set for the node.

                        PREVIEW: Support for L3 devices is marked as "preview",
                        meaning the data models or generated configuration can change at any time.

                        Default value: `False`
                        """
                        inband_ztp_lacp_fallback_delay: int
                        """
                        Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                        ZTP node.
                        This setting also requires that `inband_ztp` is set for the node.

                        Default value: `30`
                        """
                        mpls_overlay_role: Literal["client", "server", "none"] | None
                        """
                        Set the default mpls overlay role.
                        Acting role in overlay control plane.
                        """
                        overlay_address_families: OverlayAddressFamilies
                        """
                        Set the default overlay address families.


                        Subclass of AvdList with `str` items.
                        """
                        mpls_route_reflectors: MplsRouteReflectors
                        """
                        List of inventory hostname acting as MPLS route-reflectors.

                        Subclass of AvdList with `str` items.
                        """
                        bgp_cluster_id: str | None
                        """Set BGP cluster id."""
                        ptp: Ptp
                        """Subclass of AvdModel."""
                        wan_role: Literal["client", "server"] | None
                        """
                        Override the default WAN role.

                        This is used both for AutoVPN and Pathfinder designs.
                        That means if
                        `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                        `server` indicates that the router is a
                        route-reflector.
                        """
                        cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                        """
                        Configure the transit mode for a WAN client for CV Pathfinder designs
                        only when the `wan_mode` root
                        key is set to `cv_pathfinder`.

                        'zone' is currently not supported.
                        """
                        cv_pathfinder_region: str | None
                        """
                        The CV Pathfinder region name.
                        This key is required for WAN routers but optional for pathfinders.
                        The region name must be defined under 'cv_pathfinder_regions'.
                        """
                        cv_pathfinder_site: str | None
                        """
                        The CV Pathfinder site name.
                        This key is required for WAN routers but optional for pathfinders.
                        For
                        WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                        relevant region under 'cv_pathfinder_regions'.
                        For pathfinders without `cv_pathfinder_region` set,
                        the site must be defined under `cv_pathfinder_global_sites`.
                        """
                        wan_ha: WanHa
                        """
                        The key is supported only if `wan_mode` == `cv-pathfinder`.
                        AutoVPN support is still to be
                        determined.

                        Maximum 2 devices supported by group for HA.

                        Subclass of AvdModel.
                        """
                        dps_mss_ipv4: str
                        """
                        IPv4 MSS value configured under "router path-selection" on WAN Devices.

                        Default value: `"auto"`
                        """
                        l3_interfaces: L3Interfaces
                        """
                        L3 Interfaces to configure on the node.

                        Subclass of AvdIndexedList with `L3InterfacesItem` items.
                        Primary key is `name` (`str`).
                        """
                        l3_port_channels: L3PortChannels
                        """
                        L3 Port-Channel interfaces to configure on the node.

                        Subclass of AvdIndexedList with
                        `L3PortChannelsItem` items. Primary key is `name` (`str`).
                        """
                        data_plane_cpu_allocation_max: int | None
                        """
                        Set the maximum number of CPU used for the data plane.
                        This setting is useful on virtual Route
                        Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                        """
                        flow_tracker_type: Literal["sampled", "hardware"] | None
                        """
                        Set the flow tracker type.
                        Override the `default_flow_tracker_type`` set at the `node_type_key`
                        level.
                        `default_flow_tracker_type` default value is `sampled`.
                        """
                        underlay_multicast: UnderlayMulticast
                        """Subclass of AvdModel."""
                        campus: str | None
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Name of the campus. Used to generate CloudVision device tags with the
                        `generate_cv_tags.campus_fabric` feature.
                        """
                        campus_pod: str | None
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Name of the campus pod. Used to generate CloudVision device tags with the
                        `generate_cv_tags.campus_fabric` feature.
                        """
                        campus_access_pod: str | None
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Name of the campus access pod. Used to generate CloudVision device tags with the
                        `generate_cv_tags.campus_fabric` feature.
                        """
                        cv_tags_topology_type: str | None
                        """
                        Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                        "edge" or "member-leaf".
                        """
                        digital_twin: DigitalTwin
                        """
                        PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                        change at any time.
                        Set the OS version and management IP address for the digital twin of the
                        associated node(s).

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                downlink_pools: DownlinkPools | UndefinedType = Undefined,
                                id: int | None | UndefinedType = Undefined,
                                platform: str | None | UndefinedType = Undefined,
                                mac_address: str | None | UndefinedType = Undefined,
                                system_mac_address: str | None | UndefinedType = Undefined,
                                serial_number: str | None | UndefinedType = Undefined,
                                rack: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                mgmt_gateway: str | None | UndefinedType = Undefined,
                                ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                                ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                                mgmt_interface: str | None | UndefinedType = Undefined,
                                link_tracking: LinkTracking | UndefinedType = Undefined,
                                lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                                always_configure_ip_routing: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen | UndefinedType = Undefined,
                                uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                                uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                                uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                                uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                                uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                                uplink_interface_speed: str | None | UndefinedType = Undefined,
                                uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                                uplink_mtu: int | None | UndefinedType = Undefined,
                                max_uplink_switches: int | None | UndefinedType = Undefined,
                                max_parallel_uplinks: int | UndefinedType = Undefined,
                                uplink_bfd: bool | UndefinedType = Undefined,
                                uplink_native_vlan: int | None | UndefinedType = Undefined,
                                uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                                uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                                uplink_port_channel_id: int | None | UndefinedType = Undefined,
                                uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                                uplink_structured_config: dict | UndefinedType = Undefined,
                                uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                                mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                                mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                                short_esi: str | None | UndefinedType = Undefined,
                                isis_system_id_prefix: str | None | UndefinedType = Undefined,
                                isis_maximum_paths: int | None | UndefinedType = Undefined,
                                is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                                node_sid_base: int | UndefinedType = Undefined,
                                loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                                loopback_ipv4_address: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                                vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                                loopback_ipv4_offset: int | UndefinedType = Undefined,
                                router_id_pool: str | None | UndefinedType = Undefined,
                                loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                                loopback_ipv6_offset: int | UndefinedType = Undefined,
                                vtep: bool | None | UndefinedType = Undefined,
                                vtep_loopback: str | None | UndefinedType = Undefined,
                                bgp_as: str | None | UndefinedType = Undefined,
                                bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                                evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                                evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                                evpn_services_l2_only: bool | UndefinedType = Undefined,
                                filter: Filter | UndefinedType = Undefined,
                                igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                                evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                                ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                                mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                                mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                                mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                                mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                                mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                                mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                                mlag_peer_vlan: int | UndefinedType = Undefined,
                                mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                                mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                                mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                                mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                                mlag_port_channel_id: int | None | UndefinedType = Undefined,
                                mlag_domain_id: str | None | UndefinedType = Undefined,
                                spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                                spanning_tree_priority: int | UndefinedType = Undefined,
                                spanning_tree_root_super: bool | UndefinedType = Undefined,
                                spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                                spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                                | UndefinedType = Undefined,
                                virtual_router_mac_address: str | None | UndefinedType = Undefined,
                                inband_mgmt_interface: str | None | UndefinedType = Undefined,
                                inband_mgmt_vlan: int | UndefinedType = Undefined,
                                inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                                inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                                inband_mgmt_ip: str | None | UndefinedType = Undefined,
                                inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                                inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                                inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                                inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                                inband_mgmt_description: str | UndefinedType = Undefined,
                                inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                                inband_mgmt_vrf: str | UndefinedType = Undefined,
                                inband_mgmt_mtu: int | UndefinedType = Undefined,
                                inband_ztp: bool | UndefinedType = Undefined,
                                inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                                mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                                overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                                mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                                bgp_cluster_id: str | None | UndefinedType = Undefined,
                                ptp: Ptp | UndefinedType = Undefined,
                                wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                                cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                                cv_pathfinder_region: str | None | UndefinedType = Undefined,
                                cv_pathfinder_site: str | None | UndefinedType = Undefined,
                                wan_ha: WanHa | UndefinedType = Undefined,
                                dps_mss_ipv4: str | UndefinedType = Undefined,
                                l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                                l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                                data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                                flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                                underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                                campus: str | None | UndefinedType = Undefined,
                                campus_pod: str | None | UndefinedType = Undefined,
                                campus_access_pod: str | None | UndefinedType = Undefined,
                                cv_tags_topology_type: str | None | UndefinedType = Undefined,
                                digital_twin: DigitalTwin | UndefinedType = Undefined,
                            ) -> None:
                                """
                                NodesItem.


                                Subclass of AvdModel.

                                Args:
                                    name: The Node Name is used as "hostname".
                                    downlink_pools:
                                       IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                                       with `uplink_ipv4_pool` set on the downlink switch.

                                       Subclass of AvdList with `DownlinkPoolsItem`
                                       items.
                                    id: Unique identifier used for IP addressing and other algorithms.
                                    platform: Arista platform family.
                                    mac_address: Leverage to document management interface mac address.
                                    system_mac_address:
                                       System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                       Set to the same MAC address as
                                       available in "show version" on the device.
                                       "system_mac_address" can also be set directly as a
                                       hostvar.
                                       If both are set, the setting under node type settings takes precedence.
                                    serial_number:
                                       Set to the Serial Number of the device.
                                       Only used for documentation purpose in the fabric
                                       documentation and part of the structured_config.
                                       "serial_number" can also be set directly as a
                                       hostvar.
                                       If both are set, the setting under node type settings takes precedence.
                                    rack: Rack that the switch is located in (only used in snmp_settings location).
                                    mgmt_ip: Node management interface IPv4 address.
                                    mgmt_gateway:
                                       This key sets the management gateway for the device. It takes precedence over the global
                                       `mgmt_gateway`.
                                    ipv6_mgmt_ip: Node management interface IPv6 address.
                                    ipv6_mgmt_gateway:
                                       This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                       `ipv6_mgmt_gateway`.
                                    mgmt_interface:
                                       Management Interface Name.
                                       Default -> platform_management_interface -> mgmt_interface ->
                                       "Management1".
                                    link_tracking:
                                       This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                       the upstream interfaces.
                                       Useful in EVPN multhoming designs.


                                       Subclass of AvdModel.
                                    lacp_port_id_range:
                                       This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                       number of nodes in the "node_group".
                                       Unique LACP port-id ranges are recommended for EVPN Multihoming
                                       designs.


                                       Subclass of AvdModel.
                                    always_configure_ip_routing:
                                       Force configuration of "ip routing" even on L2 devices.
                                       Use this to retain behavior of AVD versions
                                       below 4.0.0.
                                    raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                    structured_config: Custom structured config for eos_cli_config_gen.
                                    uplink_type:
                                       Override the default `uplink_type` set at the `node_type_key` level.
                                       `uplink_type` must be "p2p" if
                                       `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                    uplink_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       IPv4
                                       subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                       uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                    uplink_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       IPv6
                                       subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                       uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                    uplink_interfaces:
                                       Local uplink interfaces.
                                       Each list item supports range syntax that can be expanded into a list of
                                       interfaces.
                                       If uplink_interfaces is not defined, platform-specific defaults (defined under
                                       default_interfaces) will be used instead.
                                       Please note that default_interfaces are not defined by
                                       default, you should define these yourself.


                                       Subclass of AvdList with `str` items.
                                    uplink_switch_interfaces:
                                       Interfaces located on uplink switches.

                                       Subclass of AvdList with `str` items.
                                    uplink_switches: Subclass of AvdList with `str` items.
                                    uplink_interface_speed:
                                       Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                       (Uplink switch
                                       interface speed can be overridden with `uplink_switch_interface_speed`).
                                       Speed should be set in the
                                       format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                    uplink_switch_interface_speed:
                                       Set point-to-Point interface speed for the uplink switch interface only.
                                       Speed should be set in the
                                       format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                    uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                    max_uplink_switches:
                                       Maximum number of uplink switches.
                                       Changing this value may change IP Addressing on uplinks.
                                       Can be
                                       used to reserve IP space for future expansions.
                                    max_parallel_uplinks:
                                       Number of parallel links towards uplink switches.
                                       Changing this value may change interface naming on
                                       uplinks (and corresponding downlinks).
                                       Can be used to reserve interfaces for future parallel
                                       uplinks.
                                    uplink_bfd: Enable bfd on uplink interfaces.
                                    uplink_native_vlan:
                                       Only applicable to switches with layer-2 port-channel uplinks.
                                       A suspended (disabled) vlan will be
                                       created in both ends of the link unless the vlan is defined under network services.
                                       By default the
                                       uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                    uplink_ptp:
                                       Enable PTP on all infrastructure links.

                                       Subclass of AvdModel.
                                    uplink_macsec:
                                       Enable MacSec on all uplinks.

                                       Subclass of AvdModel.
                                    uplink_port_channel_id:
                                       Only applicable for L2 switches with `uplink_type: port-channel`.
                                       By default the uplink Port-channel
                                       ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                       For
                                       example:
                                         member ports [ Eth22, Eth23 ] -> ID 22
                                         member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                       For
                                       MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                       This
                                       option overrides the default behavior and statically sets the local Port-channel ID.
                                       Note! Make sure
                                       the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                       Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                       value.
                                    uplink_switch_port_channel_id:
                                       Only applicable for L2 switches with `uplink_type: port-channel`.
                                       By default the uplink switch Port-
                                       channel ID will be set to the number of the first interface defined under
                                       `uplink_switch_interfaces`.
                                       For example:
                                         member ports [ Eth22, Eth23 ] -> ID 22
                                         member ports [
                                       Eth11/1, Eth22/1 ] -> ID 111
                                       For MLAG port-channels ID will be based on the lowest member interface
                                       on the first MLAG switch.
                                       This option overrides the default behavior and statically sets the Port-
                                       channel ID on the uplink switch.
                                       Note! Make sure the ID is unique and does not overlap with
                                       autogenerated Port-channel IDs in the Network Services.
                                       Note! For MLAG pairs the ID must be between
                                       1 and 2000 and both MLAG switches must have the same value.
                                    uplink_structured_config:
                                       Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                       When
                                       uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                       for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                       When uplink_type ==
                                       "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                       eos_cli_config_gen overrides the settings on the port-channel interface level.
                                       "uplink_structured_config" is applied after "structured_config", so it can override
                                       "structured_config" defined on node-level.
                                       Note! The content of this dictionary is _not_ validated
                                       by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                    uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                    uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                    uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                    uplink_switch_port_channel_structured_config:
                                       Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                       channel uplinks.
                                    mlag_port_channel_structured_config:
                                       Custom structured config applied to MLAG peer link port-channel id.
                                       Added under
                                       port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                       Overrides the settings on the
                                       port-channel interface level.
                                       "mlag_port_channel_structured_config" is applied after
                                       "structured_config", so it can override "structured_config" defined on node-level.
                                    mlag_peer_vlan_structured_config:
                                       Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                       Added under
                                       vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                       Overrides the settings on the vlan
                                       interface level.
                                       "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                       override "structured_config" defined on node-level.
                                    mlag_peer_l3_vlan_structured_config:
                                       Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                       Added under
                                       vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                       Overrides the settings on the vlan
                                       interface level.
                                       "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                       can override "structured_config" defined on node-level.
                                    short_esi:
                                       short_esi only valid for l2leaf devices using port-channel uplink.
                                       Setting short_esi to "auto"
                                       generates the short_esi automatically using a hash of configuration elements.
                                       < 0000:0000:0000 |
                                       auto >.
                                    isis_system_id_prefix: (4.4 hexadecimal).
                                    isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                    is_type: Overrides `isis_default_is_type`.
                                    node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                    loopback_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       address used for Loopback0 will be derived from this pool based on the node id and
                                       'loopback_ipv4_offset'.
                                    loopback_ipv4_address:
                                       IPv4 address without mask for Loopback0.
                                       When set, it takes precedence over `loopback_ipv4_pool`.
                                       Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                    vtep_loopback_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                       address used for VTEP-Loopback will be derived from this pool based on the node id and
                                       'loopback_ipv4_offset'.
                                    vtep_loopback_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                       address used for VTEP-Loopback will be derived from this pool based on the node id and
                                       'loopback_ipv6_offset'.
                                    vtep_loopback_ipv4_address:
                                       IPv4 address without mask for VTEP-Loopback.
                                       When set, it takes precedence over
                                       `vtep_loopback_ipv4_pool`.
                                       Note: AVD does not check for validity of the IPv4 address and does not
                                       catch duplicates.
                                    vtep_loopback_ipv6_address:
                                       IPv6 address without mask for VTEP-Loopback.
                                       When set, it takes precedence over
                                       `vtep_loopback_ipv6_pool`.
                                       Note: AVD does not check for validity of the IPv6 address and does not
                                       catch duplicates.
                                    loopback_ipv4_offset:
                                       Offset all assigned loopback IP addresses.
                                       Required when the 'loopback_ipv4_pool' is the same for 2
                                       different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                       For example, set the minimum
                                       offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                    router_id_pool:
                                       Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                       router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                       will not exist on the device.
                                    loopback_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                       address used for Loopback0 will be derived from this pool based on the node id and
                                       'loopback_ipv6_offset'.
                                    loopback_ipv6_offset:
                                       Offset all assigned loopback IPv6 addresses.
                                       Required when the 'loopback_ipv6_pool' is same for 2
                                       different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                       For example, set the minimum
                                       offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                    vtep:
                                       Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                       Overrides VTEP
                                       setting inherited from node_type_keys.
                                    vtep_loopback: Set VXLAN source interface.
                                    bgp_as:
                                       BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                       For asdot notation in
                                       YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                       number.
                                       Required with eBGP.
                                    bgp_defaults:
                                       List of EOS commands to apply to BGP daemon.

                                       Subclass of AvdList with `str` items.
                                    evpn_role:
                                       Acting role in EVPN control plane.
                                       Default is set in node_type definition from node_type_keys.
                                    evpn_route_servers:
                                       List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                       Subclass of AvdList with `str`
                                       items.
                                    evpn_services_l2_only:
                                       Possibility to prevent configuration of Tenant VRFs and SVIs.
                                       Override node definition
                                       "network_services_l3" from node_type_keys.
                                       This allows support for centralized routing.
                                    filter:
                                       Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                       If filter is not
                                       defined it will default to all.


                                       Subclass of AvdModel.
                                    igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                    evpn_gateway:
                                       Node is acting as EVPN Multi-Domain Gateway.
                                       New BGP peer-group is generated between EVPN GWs in
                                       different domains or between GWs and Route Servers.
                                       Name can be changed under
                                       "bgp_peer_groups.evpn_overlay_core" variable.
                                       L3 rechability for different EVPN GWs must be already
                                       in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                       same Ansible inventory.


                                       Subclass of AvdModel.
                                    ipvpn_gateway:
                                       Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                       this is "bgp_peer_groups.ipvpn_gateway_peers".
                                       L3 Reachability is required for this to work, the
                                       preferred method to establish underlay connectivity is to use core_interfaces.


                                       Subclass of
                                       AvdModel.
                                    mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                    mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                    mlag_ibgp_origin_incomplete:
                                       Set origin of routes received from MLAG iBGP peer to incomplete.
                                       The purpose is to optimize routing
                                       for leaf loopbacks from spine perspective and
                                       avoid suboptimal routing via peerlink for control
                                       plane traffic.
                                    mlag_interfaces:
                                       Each list item supports range syntax that can be expanded into a list of interfaces.
                                       Required when
                                       MLAG leafs are present in the topology.


                                       Subclass of AvdList with `str` items.
                                    mlag_interfaces_speed:
                                       Set MLAG interface speed.
                                       Speed should be set in the format `<interface_speed>` or `forced
                                       <interface_speed>` or `auto <interface_speed>`.
                                    mlag_peer_l3_vlan:
                                       Underlay L3 peering SVI interface id.
                                       If set to 0 or the same vlan as mlag_peer_vlan, the
                                       mlag_peer_vlan will be used for L3 peering.
                                    mlag_peer_l3_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                       MLAG switch.
                                       Required when MLAG leafs present in topology and they are using a separate L3 peering
                                       VLAN.
                                    mlag_peer_l3_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       The IPv6
                                       subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                       MLAG switch.
                                       Required when MLAG leafs present in topology and they are using a separate L3 peering
                                       VLAN.
                                    mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                    mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                    mlag_peer_address_family:
                                       IP address family used to establish MLAG Peer Link (control link).
                                       `ipv6` requires EOS version
                                       4.31.1F or higher.
                                       Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                       (ex. `mlag_peer_l3_vlan` set to 4094).
                                    mlag_peer_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                       first MLAG switch.
                                       Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                    mlag_peer_ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       The IPv6
                                       address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                       first MLAG switch.
                                       Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                    mlag_port_channel_id:
                                       If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                       in 'mlag_interfaces'.
                                       Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                       999999 > for EOS >= 4.25.0F.
                                    mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                    spanning_tree_mode: spanning_tree_mode
                                    spanning_tree_priority:
                                       Spanning-tree priority configured for the selected mode.
                                       For `rapid-pvst` the priority can also be
                                       set per VLAN under network services.
                                    spanning_tree_root_super: spanning_tree_root_super
                                    spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                    spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                    virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                    inband_mgmt_interface:
                                       Pointer to interface used for inband management.
                                       All configuration must be done using other data
                                       models like network services or structured_config.
                                       'inband_mgmt_interface' is only used to refer to
                                       this interface as source in various management protocol settings (future feature).

                                       On L2 switches,
                                       this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                    inband_mgmt_vlan:
                                       VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                       uplinks).
                                       When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                       switch as well as all 'uplink_switches'.
                                       When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                       created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                       created using network services data models.
                                    inband_mgmt_subnet:
                                       Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                       as uplinks).
                                       Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                       ARP.
                                       This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                       SVI IP address will be assigned as follows:
                                       virtual-router: <subnet> + 1
                                       l3leaf A      : <subnet> +
                                       2 (same IP on all l3leaf A)
                                       l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                       l2leafs       :
                                       <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                       GW on l2leafs : <subnet> + 1
                                       Assign range
                                       larger than total l2leafs + 5

                                       Setting is ignored if 'inband_mgmt_ip' is set.

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_subnet_offset:
                                       Offset value to adjust the calculated inband management IP address within the subnet.
                                       The assigned
                                       IP will be computed by adding this offset to the device ID.
                                    inband_mgmt_ip:
                                       IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                       This overrides
                                       'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                       If this is set the
                                       VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                       The VLAN and SVI on
                                       the parent switches must be created using network services data models.

                                       This setting is applicable
                                       to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_gateway:
                                       Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                       is derived from 'inband_mgmt_subnet' if set.

                                       This setting is applicable to L2 switches (switches
                                       using port-channel trunks as uplinks).
                                    inband_mgmt_ipv6_address:
                                       IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                       This overrides
                                       'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                       If this
                                       is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                       The VLAN
                                       and SVI on the parent switches must be created using network services data models.

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_ipv6_subnet:
                                       Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                       as uplinks).
                                       Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                       on ARP.
                                       This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                       extension.
                                       SVI IP address will be assigned as follows:
                                       virtual-router: <subnet> + 1
                                       l3leaf A      :
                                       <subnet> + 2 (same IP on all l3leaf A)
                                       l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                       l2leafs       : <subnet> + 3 + <l2leaf id>
                                       GW on l2leafs : <subnet> + 1
                                       Assign range larger than
                                       total l2leafs + 5

                                       Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_ipv6_gateway:
                                       Default gateway configured in the 'inband_mgmt_vrf'.
                                       Used when `inband_mgmt_ipv6_address` is set.
                                       Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                       This setting is
                                       applicable to L2 switches (switches using port-channel trunks as uplinks).
                                    inband_mgmt_description:
                                       Description configured on the Inband Management SVI.

                                       This setting is only applied on the devices
                                       where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                       be set on each applicable node/node-group/node-type as needed.
                                    inband_mgmt_vlan_name:
                                       Name configured on the Inband Management VLAN.
                                       This setting is only applied on the devices where it
                                       is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                       on each applicable node/node-group/node-type as needed.
                                    inband_mgmt_vrf:
                                       VRF configured on the Inband Management Interface.
                                       The VRF is created if not already created by
                                       other means.
                                       This setting is only applied on the devices where it is set, it does not automatically
                                       affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                       group/node-type as needed.
                                    inband_mgmt_mtu:
                                       MTU configured on the Inband Management Interface.
                                       This setting is only applied on the devices where
                                       it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                       set on each applicable node/node-group/node-type as needed.
                                    inband_ztp:
                                       Enable to configure upstream device with proper configuration to allow downstream devices to be
                                       Zero-Touch-Provisioned over the uplink interfaces.
                                       For L2 devices this setting also requires that
                                       the `inband_mgmt_vlan` is set for the node.

                                       PREVIEW: Support for L3 devices is marked as "preview",
                                       meaning the data models or generated configuration can change at any time.
                                    inband_ztp_lacp_fallback_delay:
                                       Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                       ZTP node.
                                       This setting also requires that `inband_ztp` is set for the node.
                                    mpls_overlay_role:
                                       Set the default mpls overlay role.
                                       Acting role in overlay control plane.
                                    overlay_address_families:
                                       Set the default overlay address families.


                                       Subclass of AvdList with `str` items.
                                    mpls_route_reflectors:
                                       List of inventory hostname acting as MPLS route-reflectors.

                                       Subclass of AvdList with `str` items.
                                    bgp_cluster_id: Set BGP cluster id.
                                    ptp: Subclass of AvdModel.
                                    wan_role:
                                       Override the default WAN role.

                                       This is used both for AutoVPN and Pathfinder designs.
                                       That means if
                                       `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                       `server` indicates that the router is a
                                       route-reflector.
                                    cv_pathfinder_transit_mode:
                                       Configure the transit mode for a WAN client for CV Pathfinder designs
                                       only when the `wan_mode` root
                                       key is set to `cv_pathfinder`.

                                       'zone' is currently not supported.
                                    cv_pathfinder_region:
                                       The CV Pathfinder region name.
                                       This key is required for WAN routers but optional for pathfinders.
                                       The region name must be defined under 'cv_pathfinder_regions'.
                                    cv_pathfinder_site:
                                       The CV Pathfinder site name.
                                       This key is required for WAN routers but optional for pathfinders.
                                       For
                                       WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                       relevant region under 'cv_pathfinder_regions'.
                                       For pathfinders without `cv_pathfinder_region` set,
                                       the site must be defined under `cv_pathfinder_global_sites`.
                                    wan_ha:
                                       The key is supported only if `wan_mode` == `cv-pathfinder`.
                                       AutoVPN support is still to be
                                       determined.

                                       Maximum 2 devices supported by group for HA.

                                       Subclass of AvdModel.
                                    dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                    l3_interfaces:
                                       L3 Interfaces to configure on the node.

                                       Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                       Primary key is `name` (`str`).
                                    l3_port_channels:
                                       L3 Port-Channel interfaces to configure on the node.

                                       Subclass of AvdIndexedList with
                                       `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                    data_plane_cpu_allocation_max:
                                       Set the maximum number of CPU used for the data plane.
                                       This setting is useful on virtual Route
                                       Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                    flow_tracker_type:
                                       Set the flow tracker type.
                                       Override the `default_flow_tracker_type`` set at the `node_type_key`
                                       level.
                                       `default_flow_tracker_type` default value is `sampled`.
                                    underlay_multicast: Subclass of AvdModel.
                                    campus:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Name of the campus. Used to generate CloudVision device tags with the
                                       `generate_cv_tags.campus_fabric` feature.
                                    campus_pod:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Name of the campus pod. Used to generate CloudVision device tags with the
                                       `generate_cv_tags.campus_fabric` feature.
                                    campus_access_pod:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Name of the campus access pod. Used to generate CloudVision device tags with the
                                       `generate_cv_tags.campus_fabric` feature.
                                    cv_tags_topology_type:
                                       Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                       "edge" or "member-leaf".
                                    digital_twin:
                                       PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                       change at any time.
                                       Set the OS version and management IP address for the digital twin of the
                                       associated node(s).

                                       Subclass of AvdModel.

                                """

                    class Nodes(AvdIndexedList[str, NodesItem]):
                        """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    Nodes._item_type = NodesItem

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        class GroupsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                            name: str
                            """Tracking group name."""
                            recovery_delay: int | None
                            """default -> platform_settings_mlag_reload_delay -> 300."""
                            links_minimum: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    recovery_delay: int | None | UndefinedType = Undefined,
                                    links_minimum: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    GroupsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Tracking group name.
                                        recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                        links_minimum: links_minimum

                                    """

                        class Groups(AvdIndexedList[str, GroupsItem]):
                            """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        Groups._item_type = GroupsItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        groups: Groups
                        """
                        Link Tracking Groups.
                        By default a single group named "LT_GROUP1" is defined with default values.
                        Any groups defined under "groups" will replace the default.


                        Subclass of AvdIndexedList with
                        `GroupsItem` items. Primary key is `name` (`str`).

                        Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    groups:
                                       Link Tracking Groups.
                                       By default a single group named "LT_GROUP1" is defined with default values.
                                       Any groups defined under "groups" will replace the default.


                                       Subclass of AvdIndexedList with
                                       `GroupsItem` items. Primary key is `name` (`str`).

                                """

                    class LacpPortIdRange(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "size": {"type": int, "default": 128},
                            "offset": {"type": int, "default": 0},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        size: int
                        """
                        Recommended size > = number of ports in the switch.

                        Default value: `128`
                        """
                        offset: int
                        """
                        Offset is used to avoid overlapping port-id ranges of different switches.
                        Useful when a "connected-
                        endpoint" is connected to switches in different "node_groups".

                        Default value: `0`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                size: int | UndefinedType = Undefined,
                                offset: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LacpPortIdRange.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    size: Recommended size > = number of ports in the switch.
                                    offset:
                                       Offset is used to avoid overlapping port-id ranges of different switches.
                                       Useful when a "connected-
                                       endpoint" is connected to switches in different "node_groups".

                                """

                    class UplinkInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkInterfaces._item_type = str

                    class UplinkSwitchInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitchInterfaces._item_type = str

                    class UplinkSwitches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitches._item_type = str

                    class UplinkPtp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                        enable: bool
                        """Default value: `False`"""

                        if TYPE_CHECKING:

                            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                """
                                UplinkPtp.


                                Subclass of AvdModel.

                                Args:
                                    enable: enable

                                """

                    class UplinkMacsec(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}}
                        profile: str | None

                        if TYPE_CHECKING:

                            def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                """
                                UplinkMacsec.


                                Subclass of AvdModel.

                                Args:
                                    profile: profile

                                """

                    class BgpDefaults(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    BgpDefaults._item_type = str

                    class EvpnRouteServers(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EvpnRouteServers._item_type = str

                    class Filter(AvdModel):
                        """Subclass of AvdModel."""

                        class Tenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tenants._item_type = str

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class AllowVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AllowVrfs._item_type = str

                        class DenyVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DenyVrfs._item_type = str

                        class AlwaysIncludeVrfsInTenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AlwaysIncludeVrfsInTenants._item_type = str

                        _fields: ClassVar[dict] = {
                            "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                            "only_vlans_in_use": {"type": bool, "default": False},
                        }
                        tenants: Tenants
                        """
                        Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                        Tenants (default).
                        This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        tags: Tags
                        """
                        Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        allow_vrfs: AllowVrfs
                        """
                        Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                        (default).
                        This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                        Subclass of
                        AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        deny_vrfs: DenyVrfs
                        """
                        Prevent configuration of Network Services defined under these VRFs.
                        This list prevents the given
                        VRFs to be included by any other filtering mechanism.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                        """
                        List of tenants where VRFs will be configured even if VLANs are not included in tags.
                        Useful for L3
                        "border" leaf.


                        Subclass of AvdList with `str` items.
                        """
                        only_vlans_in_use: bool
                        """
                        Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                        Note! This
                        feature only considers configuration managed by eos_designs.
                        This excludes structured_config,
                        custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                        Default value: `False`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                tenants: Tenants | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                only_vlans_in_use: bool | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Filter.


                                Subclass of AvdModel.

                                Args:
                                    tenants:
                                       Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                       Tenants (default).
                                       This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                       Subclass of AvdList with `str` items.
                                    tags:
                                       Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                       Subclass of AvdList with `str` items.
                                    allow_vrfs:
                                       Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                       (default).
                                       This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                       Subclass of
                                       AvdList with `str` items.
                                    deny_vrfs:
                                       Prevent configuration of Network Services defined under these VRFs.
                                       This list prevents the given
                                       VRFs to be included by any other filtering mechanism.

                                       Subclass of AvdList with `str` items.
                                    always_include_vrfs_in_tenants:
                                       List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                       Useful for L3
                                       "border" leaf.


                                       Subclass of AvdList with `str` items.
                                    only_vlans_in_use:
                                       Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                       Note! This
                                       feature only considers configuration managed by eos_designs.
                                       This excludes structured_config,
                                       custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                """

                    class EvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote EVPN GW server."""
                            ip_address: str | None
                            """Peering IP of remote Route Server."""
                            bgp_as: str | None
                            """
                            Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                            interpreted as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    bgp_as: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote EVPN GW server.
                                        ip_address: Peering IP of remote Route Server.
                                        bgp_as:
                                           Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                           interpreted as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        class EvpnL2(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                            enabled: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL2.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class EvpnL3(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                            enabled: bool
                            """Default value: `False`"""
                            inter_domain: bool
                            """Default value: `True`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        inter_domain: inter_domain

                                    """

                        class AllActiveMultihoming(AvdModel):
                            """Subclass of AvdModel."""

                            class EvpnEthernetSegment(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                identifier: str
                                """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                rt_import: str
                                """Low-order 6 bytes of ES-Import Route Target."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnEthernetSegment.


                                        Subclass of AvdModel.

                                        Args:
                                            identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                            rt_import: Low-order 6 bytes of ES-Import Route Target.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "enable_d_path": {"type": bool, "default": True},
                                "evpn_domain_id_local": {"type": str},
                                "evpn_domain_id_remote": {"type": str},
                                "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                            }
                            enabled: bool
                            """Enable Active Active Multihoming resiliency model."""
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            evpn_domain_id_local: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_domain_id_remote: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_ethernet_segment: EvpnEthernetSegment
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    evpn_domain_id_local: str | UndefinedType = Undefined,
                                    evpn_domain_id_remote: str | UndefinedType = Undefined,
                                    evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AllActiveMultihoming.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable Active Active Multihoming resiliency model.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_ethernet_segment: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "remote_peers": {"type": RemotePeers},
                            "evpn_l2": {"type": EvpnL2},
                            "evpn_l3": {"type": EvpnL3},
                            "all_active_multihoming": {"type": AllActiveMultihoming},
                        }
                        remote_peers: RemotePeers
                        """
                        Define remote peers of the EVPN VXLAN Gateway.
                        If the hostname can be found in the inventory,
                        ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                        If the
                        peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                        Subclass
                        of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                        """
                        evpn_l2: EvpnL2
                        """
                        Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                        Subclass of AvdModel.
                        """
                        evpn_l3: EvpnL3
                        """
                        Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                        Subclass of AvdModel.
                        """
                        all_active_multihoming: AllActiveMultihoming
                        """
                        Enable Active Active Multihoming architecture for EVPN Gateways.
                        Not supported with MLAG or IPVPN
                        Gateway. Requires EVPN L3 inter-domain to be enabled.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                                evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    remote_peers:
                                       Define remote peers of the EVPN VXLAN Gateway.
                                       If the hostname can be found in the inventory,
                                       ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                       If the
                                       peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                       Subclass
                                       of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                    evpn_l2:
                                       Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                       Subclass of AvdModel.
                                    evpn_l3:
                                       Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                       Subclass of AvdModel.
                                    all_active_multihoming:
                                       Enable Active Active Multihoming architecture for EVPN Gateways.
                                       Not supported with MLAG or IPVPN
                                       Gateway. Requires EVPN L3 inter-domain to be enabled.

                                       Subclass of AvdModel.

                                """

                    class IpvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class AddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AddressFamilies._item_type = str

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote IPVPN Peer."""
                            ip_address: str
                            """Peering IP of remote IPVPN Peer."""
                            bgp_as: str
                            """
                            Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For
                            asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                            as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | UndefinedType = Undefined,
                                    bgp_as: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote IPVPN Peer.
                                        ip_address: Peering IP of remote IPVPN Peer.
                                        bgp_as:
                                           Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For
                                           asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                           as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "evpn_domain_id": {"type": str, "default": "65535:1"},
                            "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                            "enable_d_path": {"type": bool, "default": True},
                            "maximum_routes": {"type": int, "default": 0},
                            "local_as": {"type": str},
                            "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                            "remote_peers": {"type": RemotePeers},
                        }
                        enabled: bool
                        evpn_domain_id: str
                        """
                        Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:1"`
                        """
                        ipvpn_domain_id: str
                        """
                        Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:2"`
                        """
                        enable_d_path: bool
                        """
                        Enable D-path for use with BGP bestpath selection algorithm.

                        Default value: `True`
                        """
                        maximum_routes: int
                        """
                        Maximum routes to accept from IPVPN remote peers.

                        Default value: `0`
                        """
                        local_as: str | None
                        """
                        Local BGP AS applied to peering with IPVPN remote peers.
                        BGP AS <1-4294967295> or AS number in asdot
                        notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes,
                        to prevent it from being interpreted as a float number.
                        """
                        address_families: AddressFamilies
                        """
                        IPVPN address families to enable for remote peers.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                        """
                        remote_peers: RemotePeers
                        """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                evpn_domain_id: str | UndefinedType = Undefined,
                                ipvpn_domain_id: str | UndefinedType = Undefined,
                                enable_d_path: bool | UndefinedType = Undefined,
                                maximum_routes: int | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                address_families: AddressFamilies | UndefinedType = Undefined,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                    ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                    enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                    maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                    local_as:
                                       Local BGP AS applied to peering with IPVPN remote peers.
                                       BGP AS <1-4294967295> or AS number in asdot
                                       notation "<1-65535>.<0-65535>".
                                       For asdot notation in YAML inputs, the value must be put in quotes,
                                       to prevent it from being interpreted as a float number.
                                    address_families:
                                       IPVPN address families to enable for remote peers.

                                       Subclass of AvdList with `str` items.
                                    remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                """

                    class MlagInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MlagInterfaces._item_type = str

                    class OverlayAddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    OverlayAddressFamilies._item_type = str

                    class MplsRouteReflectors(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MplsRouteReflectors._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        class Uplinks(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Uplinks._item_type = str

                        class Dscp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                            general_messages: int | None
                            event_messages: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, general_messages: int | None | UndefinedType = Undefined, event_messages: int | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Dscp.


                                    Subclass of AvdModel.

                                    Args:
                                        general_messages: general_messages
                                        event_messages: event_messages

                                    """

                        class Monitor(AvdModel):
                            """Subclass of AvdModel."""

                            class Threshold(AvdModel):
                                """Subclass of AvdModel."""

                                class Drop(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                    offset_from_master: int | None
                                    mean_path_delay: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | None | UndefinedType = Undefined,
                                            mean_path_delay: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Drop.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay

                                            """

                                _fields: ClassVar[dict] = {
                                    "offset_from_master": {"type": int, "default": 250},
                                    "mean_path_delay": {"type": int, "default": 1500},
                                    "drop": {"type": Drop},
                                }
                                offset_from_master: int
                                """Default value: `250`"""
                                mean_path_delay: int
                                """Default value: `1500`"""
                                drop: Drop
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        offset_from_master: int | UndefinedType = Undefined,
                                        mean_path_delay: int | UndefinedType = Undefined,
                                        drop: Drop | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Threshold.


                                        Subclass of AvdModel.

                                        Args:
                                            offset_from_master: offset_from_master
                                            mean_path_delay: mean_path_delay
                                            drop: Subclass of AvdModel.

                                        """

                            class MissingMessage(AvdModel):
                                """Subclass of AvdModel."""

                                class Intervals(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                    announce: int | None
                                    follow_up: int | None
                                    sync: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            announce: int | None | UndefinedType = Undefined,
                                            follow_up: int | None | UndefinedType = Undefined,
                                            sync: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Intervals.


                                            Subclass of AvdModel.

                                            Args:
                                                announce: announce
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                class SequenceIds(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "enabled": {"type": bool, "default": True},
                                        "announce": {"type": int, "default": 3},
                                        "delay_resp": {"type": int, "default": 3},
                                        "follow_up": {"type": int, "default": 3},
                                        "sync": {"type": int, "default": 3},
                                    }
                                    enabled: bool
                                    """Default value: `True`"""
                                    announce: int
                                    """Default value: `3`"""
                                    delay_resp: int
                                    """Default value: `3`"""
                                    follow_up: int
                                    """Default value: `3`"""
                                    sync: int
                                    """Default value: `3`"""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            enabled: bool | UndefinedType = Undefined,
                                            announce: int | UndefinedType = Undefined,
                                            delay_resp: int | UndefinedType = Undefined,
                                            follow_up: int | UndefinedType = Undefined,
                                            sync: int | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            SequenceIds.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                announce: announce
                                                delay_resp: delay_resp
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                intervals: Intervals
                                """Subclass of AvdModel."""
                                sequence_ids: SequenceIds
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        MissingMessage.


                                        Subclass of AvdModel.

                                        Args:
                                            intervals: Subclass of AvdModel.
                                            sequence_ids: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": True},
                                "threshold": {"type": Threshold},
                                "missing_message": {"type": MissingMessage},
                            }
                            enabled: bool
                            """Default value: `True`"""
                            threshold: Threshold
                            """Subclass of AvdModel."""
                            missing_message: MissingMessage
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    threshold: Threshold | UndefinedType = Undefined,
                                    missing_message: MissingMessage | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Monitor.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        threshold: Subclass of AvdModel.
                                        missing_message: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "profile": {"type": str},
                            "uplinks": {"type": Uplinks},
                            "mlag": {"type": bool, "default": False},
                            "domain": {"type": int},
                            "priority1": {"type": int},
                            "priority2": {"type": int},
                            "auto_clock_identity": {"type": bool},
                            "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                            "clock_identity": {"type": str},
                            "source_ip": {"type": str},
                            "mode": {"type": str, "default": "boundary"},
                            "mode_one_step": {"type": bool, "default": False},
                            "ttl": {"type": int},
                            "forward_unicast": {"type": bool, "default": False},
                            "forward_v1": {"type": bool},
                            "dscp": {"type": Dscp},
                            "monitor": {"type": Monitor},
                        }
                        enabled: bool | None
                        profile: str | None
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"
                        """
                        uplinks: Uplinks
                        """Subclass of AvdList with `str` items."""
                        mlag: bool
                        """
                        Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                        configured on the MLAG peer-link port-channel.

                        Default value: `False`
                        """
                        domain: int | None
                        priority1: int | None
                        """default -> automatically set based on node_type."""
                        priority2: int | None
                        """default -> (node_id modulus 256)."""
                        auto_clock_identity: bool | None
                        """
                        If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                        default EOS behaviour, simply disable the automatic PTP clock identity.
                        default ->
                        (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                        HEX).
                        """
                        clock_identity_prefix: str
                        """
                        PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                        By default the 3-byte prefix is "00:1C:73".
                        This
                        can be overridden if auto_clock_identity is set to true (which is the default).

                        Default value: `"00:1C:73"`
                        """
                        clock_identity: str | None
                        """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                        source_ip: str | None
                        """
                        By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                        relevant SVI, which is the recommended behaviour.
                        This can be set manually if required, for example,
                        to a value of "10.1.2.3".
                        """
                        mode: Literal["boundary"]
                        """Default value: `"boundary"`"""
                        mode_one_step: bool
                        """Default value: `False`"""
                        ttl: int | None
                        forward_unicast: bool
                        """
                        Enable PTP unicast forwarding.

                        Default value: `False`
                        """
                        forward_v1: bool | None
                        """Forward dataplane PTP V1 packets."""
                        dscp: Dscp
                        """Subclass of AvdModel."""
                        monitor: Monitor
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                uplinks: Uplinks | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                domain: int | None | UndefinedType = Undefined,
                                priority1: int | None | UndefinedType = Undefined,
                                priority2: int | None | UndefinedType = Undefined,
                                auto_clock_identity: bool | None | UndefinedType = Undefined,
                                clock_identity_prefix: str | UndefinedType = Undefined,
                                clock_identity: str | None | UndefinedType = Undefined,
                                source_ip: str | None | UndefinedType = Undefined,
                                mode: Literal["boundary"] | UndefinedType = Undefined,
                                mode_one_step: bool | UndefinedType = Undefined,
                                ttl: int | None | UndefinedType = Undefined,
                                forward_unicast: bool | UndefinedType = Undefined,
                                forward_v1: bool | None | UndefinedType = Undefined,
                                dscp: Dscp | UndefinedType = Undefined,
                                monitor: Monitor | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"
                                    uplinks: Subclass of AvdList with `str` items.
                                    mlag:
                                       Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                       configured on the MLAG peer-link port-channel.
                                    domain: domain
                                    priority1: default -> automatically set based on node_type.
                                    priority2: default -> (node_id modulus 256).
                                    auto_clock_identity:
                                       If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                       default EOS behaviour, simply disable the automatic PTP clock identity.
                                       default ->
                                       (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                       HEX).
                                    clock_identity_prefix:
                                       PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                       By default the 3-byte prefix is "00:1C:73".
                                       This
                                       can be overridden if auto_clock_identity is set to true (which is the default).
                                    clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                    source_ip:
                                       By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                       relevant SVI, which is the recommended behaviour.
                                       This can be set manually if required, for example,
                                       to a value of "10.1.2.3".
                                    mode: mode
                                    mode_one_step: mode_one_step
                                    ttl: ttl
                                    forward_unicast: Enable PTP unicast forwarding.
                                    forward_v1: Forward dataplane PTP V1 packets.
                                    dscp: Subclass of AvdModel.
                                    monitor: Subclass of AvdModel.

                                """

                    class WanHa(AvdModel):
                        """Subclass of AvdModel."""

                        class HaInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        HaInterfaces._item_type = str

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "ipsec": {"type": bool, "default": True},
                            "mtu": {"type": int, "default": 9194},
                            "ha_interfaces": {"type": HaInterfaces},
                            "ha_ipv4_pool": {"type": str},
                            "port_channel_id": {"type": int},
                            "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                            "flow_tracking": {"type": FlowTracking},
                        }
                        enabled: bool | None
                        """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                        ipsec: bool
                        """
                        Enable / Disable IPsec over HA path-group when HA is enabled.

                        Default value: `True`
                        """
                        mtu: int
                        """
                        Set MTU on WAN HA interfaces.

                        Default value: `9194`
                        """
                        ha_interfaces: HaInterfaces
                        """
                        Local WAN HA interfaces
                        Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                        Can be used to filter uplink interfaces when there are multiple uplinks.
                        Limitations:
                          Either all
                        interfaces must be uplinks or all interfaces must not be uplinks.
                          Only one interface is supported
                        for non uplinks.

                        Subclass of AvdList with `str` items.
                        """
                        ha_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                        first WAN router.
                        Not used for uplink interfaces.
                        """
                        port_channel_id: int | None
                        """Port-channel ID to use for direct HA."""
                        use_port_channel_for_direct_ha: bool
                        """
                        Enable or disable using a port-channel interface for direct HA when there is only one interface.
                        This feature was introduced in EOS 4.33.0F.

                        Default value: `True`
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                        setting.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                ipsec: bool | UndefinedType = Undefined,
                                mtu: int | UndefinedType = Undefined,
                                ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                port_channel_id: int | None | UndefinedType = Undefined,
                                use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                            ) -> None:
                                """
                                WanHa.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                    ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                    mtu: Set MTU on WAN HA interfaces.
                                    ha_interfaces:
                                       Local WAN HA interfaces
                                       Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                       Can be used to filter uplink interfaces when there are multiple uplinks.
                                       Limitations:
                                         Either all
                                       interfaces must be uplinks or all interfaces must not be uplinks.
                                         Only one interface is supported
                                       for non uplinks.

                                       Subclass of AvdList with `str` items.
                                    ha_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                       first WAN router.
                                       Not used for uplink interfaces.
                                    port_channel_id: Port-channel ID to use for direct HA.
                                    use_port_channel_for_direct_ha:
                                       Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                       This feature was introduced in EOS 4.33.0F.
                                    flow_tracking:
                                       Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                       setting.

                                       Subclass of AvdModel.

                                """

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class CvPathfinderInternetExit(AvdModel):
                            """Subclass of AvdModel."""

                            class PoliciesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                name: str
                                """Internet-exit policy name."""
                                tunnel_interface_numbers: str | None
                                """
                                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                interface.
                                Examples: '1-3' or '100,200,300'
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        PoliciesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Internet-exit policy name.
                                            tunnel_interface_numbers:
                                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                               interface.
                                               Examples: '1-3' or '100,200,300'

                                        """

                            class Policies(AvdIndexedList[str, PoliciesItem]):
                                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Policies._item_type = PoliciesItem

                            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                            policies: Policies
                            """
                            List of Internet-exit policies using this interface as exit.

                            Subclass of AvdIndexedList with
                            `PoliciesItem` items. Primary key is `name` (`str`).
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                    """
                                    CvPathfinderInternetExit.


                                    Subclass of AvdModel.

                                    Args:
                                        policies:
                                           List of Internet-exit policies using this interface as exit.

                                           Subclass of AvdIndexedList with
                                           `PoliciesItem` items. Primary key is `name` (`str`).

                                    """

                        class RxQueue(AvdModel):
                            """Subclass of AvdModel."""

                            class Workers(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Workers._item_type = str

                            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                            count: int | None
                            """
                            Number of receive queues.
                            The maximum value is determined by
                            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                            `platform` set on this device.
                            """
                            workers: Workers
                            """Subclass of AvdList with `str` items."""
                            mode: Literal["shared", "exclusive"] | None
                            """Mode applicable to the workers."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    count: int | None | UndefinedType = Undefined,
                                    workers: Workers | UndefinedType = Undefined,
                                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RxQueue.


                                    Subclass of AvdModel.

                                    Args:
                                        count:
                                           Number of receive queues.
                                           The maximum value is determined by
                                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                           `platform` set on this device.
                                        workers: Subclass of AvdList with `str` items.
                                        mode: Mode applicable to the workers.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "profile": {"type": str},
                            "name": {"type": str},
                            "description": {"type": str},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "speed": {"type": str},
                            "receive_bandwidth": {"type": int},
                            "transmit_bandwidth": {"type": int},
                            "peer": {"type": str},
                            "peer_interface": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                            "rx_queue": {"type": RxQueue},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        }
                        profile: str | None
                        """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                        name: str
                        """
                        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                        For a
                        subinterface, the parent physical interface is automatically created.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set a default description will be configured with '[<peer>[
                        <peer_interface>]]'.
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_interfaces.public_ip`
                                  -> `l3_interfaces.ip_address`

                        The determined Public IP is used
                        by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        speed: str | None
                        """
                        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                        <interface_speed>`.
                        """
                        receive_bandwidth: int | None
                        """
                        Maximum allowed receive bandwidth (download) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        transmit_bandwidth: int | None
                        """
                        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_interface: str | None
                        """The peer device interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdList with `StaticRoutesItem`
                        items.
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        cv_pathfinder_internet_exit: CvPathfinderInternetExit
                        """
                        PREVIEW: This key is in preview mode

                        Subclass of AvdModel.
                        """
                        rx_queue: RxQueue
                        """
                        Receive queue parameters for platform SFE interface profile.
                        This setting is ignored unless the
                        `platform_sfe_interface_profile.supported` is set as `true` under
                        `platform_settings.feature_support` for the `platform` set on this device.

                        Subclass of AvdModel.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config for the Ethernet interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | None | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                speed: str | None | UndefinedType = Undefined,
                                receive_bandwidth: int | None | UndefinedType = Undefined,
                                transmit_bandwidth: int | None | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_interface: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                rx_queue: RxQueue | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                    name:
                                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                       For a
                                       subinterface, the parent physical interface is automatically created.
                                    description:
                                       Interface description.
                                       If not set a default description will be configured with '[<peer>[
                                       <peer_interface>]]'.
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_interfaces.public_ip`
                                                 -> `l3_interfaces.ip_address`

                                       The determined Public IP is used
                                       by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    speed:
                                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                       <interface_speed>`.
                                    receive_bandwidth:
                                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    transmit_bandwidth:
                                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_interface: The peer device interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdList with `StaticRoutesItem`
                                       items.
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    cv_pathfinder_internet_exit:
                                       PREVIEW: This key is in preview mode

                                       Subclass of AvdModel.
                                    rx_queue:
                                       Receive queue parameters for platform SFE interface profile.
                                       This setting is ignored unless the
                                       `platform_sfe_interface_profile.supported` is set as `true` under
                                       `platform_settings.feature_support` for the `platform` set on this device.

                                       Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Ethernet interface.

                                """

                    class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                        """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "rx_queue": {"type": RxQueue},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                            """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                            _primary_key: ClassVar[str] = "prefix"

                        StaticRoutes._item_type = StaticRoutesItem

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_port_channels.public_ip`
                                  -> `l3_port_channels.ip_address`

                        The determined Public IP is
                        used by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdIndexedList with
                        `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config for the Port-Channel interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_port_channels.public_ip`
                                                 -> `l3_port_channels.ip_address`

                                       The determined Public IP is
                                       used by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdIndexedList with
                                       `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Port-Channel interface.

                                """

                    class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                        """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3PortChannels._item_type = L3PortChannelsItem

                    class UnderlayMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        class PimSm(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                            on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if also
                            enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_pim_sm`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable PIM sparse-mode on uplinks.
                            Requires node setting `underlay_multicast.pim_sm.enabled:
                            true` or, if unset, global `underlay_multicast_pim_sm: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                            Effective only when
                            node settings `underlay_multicast.pim_sm.uplinks: true`.

                            Subclass of AvdList with `str` items.
                            """
                            mlag: bool
                            """
                            Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PimSm.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                           on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if also
                                           enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_pim_sm`.
                                        uplinks:
                                           Enable/Disable PIM sparse-mode on uplinks.
                                           Requires node setting `underlay_multicast.pim_sm.enabled:
                                           true` or, if unset, global `underlay_multicast_pim_sm: true`
                                        uplink_interfaces:
                                           Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective only when
                                           node settings `underlay_multicast.pim_sm.uplinks: true`.

                                           Subclass of AvdList with `str` items.
                                        mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                    """

                        class Static(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures static multicast in the
                            underlay on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if
                            also enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_multicast`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable static multicast on uplinks.
                            Requires node setting
                            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                            Effective
                            only when node settings `underlay_multicast.static.uplinks: true`.

                            Subclass of AvdList with `str`
                            items.
                            """
                            mlag: bool
                            """
                            Configure static multicast in the underlay on MLAG L3 peer interfacee.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Static.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures static multicast in the
                                           underlay on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if
                                           also enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_multicast`.
                                        uplinks:
                                           Enable/Disable static multicast on uplinks.
                                           Requires node setting
                                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                        uplink_interfaces:
                                           Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective
                                           only when node settings `underlay_multicast.static.uplinks: true`.

                                           Subclass of AvdList with `str`
                                           items.
                                        mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                    """

                        _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                        pim_sm: PimSm
                        """Subclass of AvdModel."""
                        static: Static
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                """
                                UnderlayMulticast.


                                Subclass of AvdModel.

                                Args:
                                    pim_sm: Subclass of AvdModel.
                                    static: Subclass of AvdModel.

                                """

                    class DigitalTwin(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                        act_os_version: str | None
                        """
                        Desired ACT Digital Twin OS version.
                        Overrides global `digital_twin.fabric.act_os_version` flag.
                        """
                        mgmt_ip: str | None
                        """Desired management interface IPv4 address."""
                        act_internet_access: bool | None
                        """
                        Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                        This option
                        applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                        types.
                        ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        Overrides
                        global `digital_twin.fabric.act_internet_access` flag.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                act_os_version: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                act_internet_access: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DigitalTwin.


                                Subclass of AvdModel.

                                Args:
                                    act_os_version:
                                       Desired ACT Digital Twin OS version.
                                       Overrides global `digital_twin.fabric.act_os_version` flag.
                                    mgmt_ip: Desired management interface IPv4 address.
                                    act_internet_access:
                                       Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                       This option
                                       applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                       types.
                                       ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                       Overrides
                                       global `digital_twin.fabric.act_internet_access` flag.

                                """

                    _fields: ClassVar[dict] = {
                        "group": {"type": str},
                        "nodes": {"type": Nodes},
                        "id": {"type": int},
                        "platform": {"type": str},
                        "mac_address": {"type": str},
                        "system_mac_address": {"type": str},
                        "serial_number": {"type": str},
                        "rack": {"type": str},
                        "mgmt_ip": {"type": str},
                        "mgmt_gateway": {"type": str},
                        "ipv6_mgmt_ip": {"type": str},
                        "ipv6_mgmt_gateway": {"type": str},
                        "mgmt_interface": {"type": str},
                        "link_tracking": {"type": LinkTracking},
                        "lacp_port_id_range": {"type": LacpPortIdRange},
                        "always_configure_ip_routing": {"type": bool, "default": False},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                        "uplink_type": {"type": str},
                        "uplink_ipv4_pool": {"type": str},
                        "uplink_ipv6_pool": {"type": str},
                        "uplink_interfaces": {"type": UplinkInterfaces},
                        "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                        "uplink_switches": {"type": UplinkSwitches},
                        "uplink_interface_speed": {"type": str},
                        "uplink_switch_interface_speed": {"type": str},
                        "uplink_mtu": {"type": int},
                        "max_uplink_switches": {"type": int},
                        "max_parallel_uplinks": {"type": int, "default": 1},
                        "uplink_bfd": {"type": bool, "default": False},
                        "uplink_native_vlan": {"type": int},
                        "uplink_ptp": {"type": UplinkPtp},
                        "uplink_macsec": {"type": UplinkMacsec},
                        "uplink_port_channel_id": {"type": int},
                        "uplink_switch_port_channel_id": {"type": int},
                        "uplink_structured_config": {"type": dict},
                        "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "short_esi": {"type": str},
                        "isis_system_id_prefix": {"type": str},
                        "isis_maximum_paths": {"type": int},
                        "is_type": {"type": str},
                        "node_sid_base": {"type": int, "default": 0},
                        "loopback_ipv4_pool": {"type": str},
                        "loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv4_pool": {"type": str},
                        "vtep_loopback_ipv6_pool": {"type": str},
                        "vtep_loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv6_address": {"type": str},
                        "loopback_ipv4_offset": {"type": int, "default": 0},
                        "router_id_pool": {"type": str},
                        "loopback_ipv6_pool": {"type": str},
                        "loopback_ipv6_offset": {"type": int, "default": 0},
                        "vtep": {"type": bool},
                        "vtep_loopback": {"type": str},
                        "bgp_as": {"type": str},
                        "bgp_defaults": {"type": BgpDefaults},
                        "evpn_role": {"type": str},
                        "evpn_route_servers": {"type": EvpnRouteServers},
                        "evpn_services_l2_only": {"type": bool, "default": False},
                        "filter": {"type": Filter},
                        "igmp_snooping_enabled": {"type": bool},
                        "evpn_gateway": {"type": EvpnGateway},
                        "ipvpn_gateway": {"type": IpvpnGateway},
                        "mlag": {"type": bool, "default": True},
                        "mlag_dual_primary_detection": {"type": bool, "default": False},
                        "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                        "mlag_interfaces": {"type": MlagInterfaces},
                        "mlag_interfaces_speed": {"type": str},
                        "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                        "mlag_peer_l3_ipv4_pool": {"type": str},
                        "mlag_peer_l3_ipv6_pool": {"type": str},
                        "mlag_peer_vlan": {"type": int, "default": 4094},
                        "mlag_peer_link_allowed_vlans": {"type": str},
                        "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                        "mlag_peer_ipv4_pool": {"type": str},
                        "mlag_peer_ipv6_pool": {"type": str},
                        "mlag_port_channel_id": {"type": int},
                        "mlag_domain_id": {"type": str},
                        "spanning_tree_mode": {"type": str},
                        "spanning_tree_priority": {"type": int, "default": 32768},
                        "spanning_tree_root_super": {"type": bool, "default": False},
                        "spanning_tree_mst_pvst_boundary": {"type": bool},
                        "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                        "virtual_router_mac_address": {"type": str},
                        "inband_mgmt_interface": {"type": str},
                        "inband_mgmt_vlan": {"type": int, "default": 4092},
                        "inband_mgmt_subnet": {"type": str},
                        "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                        "inband_mgmt_ip": {"type": str},
                        "inband_mgmt_gateway": {"type": str},
                        "inband_mgmt_ipv6_address": {"type": str},
                        "inband_mgmt_ipv6_subnet": {"type": str},
                        "inband_mgmt_ipv6_gateway": {"type": str},
                        "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                        "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                        "inband_mgmt_vrf": {"type": str, "default": "default"},
                        "inband_mgmt_mtu": {"type": int, "default": 1500},
                        "inband_ztp": {"type": bool, "default": False},
                        "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                        "mpls_overlay_role": {"type": str},
                        "overlay_address_families": {"type": OverlayAddressFamilies},
                        "mpls_route_reflectors": {"type": MplsRouteReflectors},
                        "bgp_cluster_id": {"type": str},
                        "ptp": {"type": Ptp},
                        "wan_role": {"type": str},
                        "cv_pathfinder_transit_mode": {"type": str},
                        "cv_pathfinder_region": {"type": str},
                        "cv_pathfinder_site": {"type": str},
                        "wan_ha": {"type": WanHa},
                        "dps_mss_ipv4": {"type": str, "default": "auto"},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "data_plane_cpu_allocation_max": {"type": int},
                        "flow_tracker_type": {"type": str},
                        "underlay_multicast": {"type": UnderlayMulticast},
                        "campus": {"type": str},
                        "campus_pod": {"type": str},
                        "campus_access_pod": {"type": str},
                        "cv_tags_topology_type": {"type": str},
                        "digital_twin": {"type": DigitalTwin},
                    }
                    group: str
                    """
                    The Node Group Name is used for MLAG domain unless set with 'mlag_domain_id'.
                    The Node Group Name is
                    also used for peer description on downstream switches' uplinks.
                    """
                    nodes: Nodes
                    """
                    Define variables per node.

                    Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                    (`str`).
                    """
                    id: int | None
                    """Unique identifier used for IP addressing and other algorithms."""
                    platform: str | None
                    """Arista platform family."""
                    mac_address: str | None
                    """Leverage to document management interface mac address."""
                    system_mac_address: str | None
                    """
                    System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                    Set to the same MAC address as
                    available in "show version" on the device.
                    "system_mac_address" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    serial_number: str | None
                    """
                    Set to the Serial Number of the device.
                    Only used for documentation purpose in the fabric
                    documentation and part of the structured_config.
                    "serial_number" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    rack: str | None
                    """Rack that the switch is located in (only used in snmp_settings location)."""
                    mgmt_ip: str | None
                    """Node management interface IPv4 address."""
                    mgmt_gateway: str | None
                    """
                    This key sets the management gateway for the device. It takes precedence over the global
                    `mgmt_gateway`.
                    """
                    ipv6_mgmt_ip: str | None
                    """Node management interface IPv6 address."""
                    ipv6_mgmt_gateway: str | None
                    """
                    This key sets the ipv6 management gateway for the device. It takes precedence over the global
                    `ipv6_mgmt_gateway`.
                    """
                    mgmt_interface: str | None
                    """
                    Management Interface Name.
                    Default -> platform_management_interface -> mgmt_interface ->
                    "Management1".
                    """
                    link_tracking: LinkTracking
                    """
                    This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                    the upstream interfaces.
                    Useful in EVPN multhoming designs.


                    Subclass of AvdModel.
                    """
                    lacp_port_id_range: LacpPortIdRange
                    """
                    This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                    number of nodes in the "node_group".
                    Unique LACP port-id ranges are recommended for EVPN Multihoming
                    designs.


                    Subclass of AvdModel.
                    """
                    always_configure_ip_routing: bool
                    """
                    Force configuration of "ip routing" even on L2 devices.
                    Use this to retain behavior of AVD versions
                    below 4.0.0.

                    Default value: `False`
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""
                    uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                    """
                    Override the default `uplink_type` set at the `node_type_key` level.
                    `uplink_type` must be "p2p" if
                    `vtep` or `underlay_router` is true for the `node_type_key` definition.
                    """
                    uplink_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    IPv4
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    IPv6
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_interfaces: UplinkInterfaces
                    """
                    Local uplink interfaces.
                    Each list item supports range syntax that can be expanded into a list of
                    interfaces.
                    If uplink_interfaces is not defined, platform-specific defaults (defined under
                    default_interfaces) will be used instead.
                    Please note that default_interfaces are not defined by
                    default, you should define these yourself.


                    Subclass of AvdList with `str` items.
                    """
                    uplink_switch_interfaces: UplinkSwitchInterfaces
                    """
                    Interfaces located on uplink switches.

                    Subclass of AvdList with `str` items.
                    """
                    uplink_switches: UplinkSwitches
                    """Subclass of AvdList with `str` items."""
                    uplink_interface_speed: str | None
                    """
                    Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                    (Uplink switch
                    interface speed can be overridden with `uplink_switch_interface_speed`).
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_switch_interface_speed: str | None
                    """
                    Set point-to-Point interface speed for the uplink switch interface only.
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_mtu: int | None
                    """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                    max_uplink_switches: int | None
                    """
                    Maximum number of uplink switches.
                    Changing this value may change IP Addressing on uplinks.
                    Can be
                    used to reserve IP space for future expansions.
                    """
                    max_parallel_uplinks: int
                    """
                    Number of parallel links towards uplink switches.
                    Changing this value may change interface naming on
                    uplinks (and corresponding downlinks).
                    Can be used to reserve interfaces for future parallel
                    uplinks.

                    Default value: `1`
                    """
                    uplink_bfd: bool
                    """
                    Enable bfd on uplink interfaces.

                    Default value: `False`
                    """
                    uplink_native_vlan: int | None
                    """
                    Only applicable to switches with layer-2 port-channel uplinks.
                    A suspended (disabled) vlan will be
                    created in both ends of the link unless the vlan is defined under network services.
                    By default the
                    uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                    """
                    uplink_ptp: UplinkPtp
                    """
                    Enable PTP on all infrastructure links.

                    Subclass of AvdModel.
                    """
                    uplink_macsec: UplinkMacsec
                    """
                    Enable MacSec on all uplinks.

                    Subclass of AvdModel.
                    """
                    uplink_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink Port-channel
                    ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                    For
                    example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [ Eth11/1, Eth22/1 ] -> ID 111
                    For
                    MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                    This
                    option overrides the default behavior and statically sets the local Port-channel ID.
                    Note! Make sure
                    the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                    value.
                    """
                    uplink_switch_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink switch Port-
                    channel ID will be set to the number of the first interface defined under
                    `uplink_switch_interfaces`.
                    For example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [
                    Eth11/1, Eth22/1 ] -> ID 111
                    For MLAG port-channels ID will be based on the lowest member interface
                    on the first MLAG switch.
                    This option overrides the default behavior and statically sets the Port-
                    channel ID on the uplink switch.
                    Note! Make sure the ID is unique and does not overlap with
                    autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between
                    1 and 2000 and both MLAG switches must have the same value.
                    """
                    uplink_structured_config: dict
                    """
                    Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                    When
                    uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                    for eos_cli_config_gen overrides the settings on the ethernet interface level.
                    When uplink_type ==
                    "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                    eos_cli_config_gen overrides the settings on the port-channel interface level.
                    "uplink_structured_config" is applied after "structured_config", so it can override
                    "structured_config" defined on node-level.
                    Note! The content of this dictionary is _not_ validated
                    by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                    """
                    uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_interfaces`."""
                    uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                    uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                    uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                    channel uplinks.
                    """
                    mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to MLAG peer link port-channel id.
                    Added under
                    port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the
                    port-channel interface level.
                    "mlag_port_channel_structured_config" is applied after
                    "structured_config", so it can override "structured_config" defined on node-level.
                    """
                    mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                    override "structured_config" defined on node-level.
                    """
                    mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                    can override "structured_config" defined on node-level.
                    """
                    short_esi: str | None
                    """
                    short_esi only valid for l2leaf devices using port-channel uplink.
                    Setting short_esi to "auto"
                    generates the short_esi automatically using a hash of configuration elements.
                    < 0000:0000:0000 |
                    auto >.
                    """
                    isis_system_id_prefix: str | None
                    """(4.4 hexadecimal)."""
                    isis_maximum_paths: int | None
                    """Number of path to configure in ECMP for ISIS."""
                    is_type: Literal["level-1-2", "level-1", "level-2"] | None
                    """Overrides `isis_default_is_type`."""
                    node_sid_base: int
                    """
                    Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                    Default value: `0`
                    """
                    loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for Loopback0.
                    When set, it takes precedence over `loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                    """
                    vtep_loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    vtep_loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    vtep_loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not
                    catch duplicates.
                    """
                    vtep_loopback_ipv6_address: str | None
                    """
                    IPv6 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv6_pool`.
                    Note: AVD does not check for validity of the IPv6 address and does not
                    catch duplicates.
                    """
                    loopback_ipv4_offset: int
                    """
                    Offset all assigned loopback IP addresses.
                    Required when the 'loopback_ipv4_pool' is the same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    router_id_pool: str | None
                    """
                    Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                    router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                    will not exist on the device.
                    """
                    loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    loopback_ipv6_offset: int
                    """
                    Offset all assigned loopback IPv6 addresses.
                    Required when the 'loopback_ipv6_pool' is same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    vtep: bool | None
                    """
                    Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                    Overrides VTEP
                    setting inherited from node_type_keys.
                    """
                    vtep_loopback: str | None
                    """Set VXLAN source interface."""
                    bgp_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    Required with eBGP.
                    """
                    bgp_defaults: BgpDefaults
                    """
                    List of EOS commands to apply to BGP daemon.

                    Subclass of AvdList with `str` items.
                    """
                    evpn_role: Literal["client", "server", "none"] | None
                    """
                    Acting role in EVPN control plane.
                    Default is set in node_type definition from node_type_keys.
                    """
                    evpn_route_servers: EvpnRouteServers
                    """
                    List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                    Subclass of AvdList with `str`
                    items.
                    """
                    evpn_services_l2_only: bool
                    """
                    Possibility to prevent configuration of Tenant VRFs and SVIs.
                    Override node definition
                    "network_services_l3" from node_type_keys.
                    This allows support for centralized routing.

                    Default value: `False`
                    """
                    filter: Filter
                    """
                    Filter L3 and L2 network services based on tenant and tags (and operation filter).
                    If filter is not
                    defined it will default to all.


                    Subclass of AvdModel.
                    """
                    igmp_snooping_enabled: bool | None
                    """Activate or deactivate IGMP snooping on device level."""
                    evpn_gateway: EvpnGateway
                    """
                    Node is acting as EVPN Multi-Domain Gateway.
                    New BGP peer-group is generated between EVPN GWs in
                    different domains or between GWs and Route Servers.
                    Name can be changed under
                    "bgp_peer_groups.evpn_overlay_core" variable.
                    L3 rechability for different EVPN GWs must be already
                    in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                    same Ansible inventory.


                    Subclass of AvdModel.
                    """
                    ipvpn_gateway: IpvpnGateway
                    """
                    Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                    this is "bgp_peer_groups.ipvpn_gateway_peers".
                    L3 Reachability is required for this to work, the
                    preferred method to establish underlay connectivity is to use core_interfaces.


                    Subclass of
                    AvdModel.
                    """
                    mlag: bool
                    """
                    Enable / Disable auto MLAG, when two nodes are defined in node group.

                    Default value: `True`
                    """
                    mlag_dual_primary_detection: bool
                    """
                    Enable / Disable MLAG dual primary detection.

                    Default value: `False`
                    """
                    mlag_ibgp_origin_incomplete: bool
                    """
                    Set origin of routes received from MLAG iBGP peer to incomplete.
                    The purpose is to optimize routing
                    for leaf loopbacks from spine perspective and
                    avoid suboptimal routing via peerlink for control
                    plane traffic.

                    Default value: `True`
                    """
                    mlag_interfaces: MlagInterfaces
                    """
                    Each list item supports range syntax that can be expanded into a list of interfaces.
                    Required when
                    MLAG leafs are present in the topology.


                    Subclass of AvdList with `str` items.
                    """
                    mlag_interfaces_speed: str | None
                    """
                    Set MLAG interface speed.
                    Speed should be set in the format `<interface_speed>` or `forced
                    <interface_speed>` or `auto <interface_speed>`.
                    """
                    mlag_peer_l3_vlan: int
                    """
                    Underlay L3 peering SVI interface id.
                    If set to 0 or the same vlan as mlag_peer_vlan, the
                    mlag_peer_vlan will be used for L3 peering.

                    Default value: `4093`
                    """
                    mlag_peer_l3_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_l3_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_vlan: int
                    """
                    MLAG Peer Link (control link) SVI interface id.

                    Default value: `4094`
                    """
                    mlag_peer_link_allowed_vlans: str | None
                    mlag_peer_address_family: Literal["ipv4", "ipv6"]
                    """
                    IP address family used to establish MLAG Peer Link (control link).
                    `ipv6` requires EOS version
                    4.31.1F or higher.
                    Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                    (ex. `mlag_peer_l3_vlan` set to 4094).

                    Default value: `"ipv4"`
                    """
                    mlag_peer_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                    """
                    mlag_peer_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                    """
                    mlag_port_channel_id: int | None
                    """
                    If not set, the mlag port-channel id is generated based on the digits of the first interface present
                    in 'mlag_interfaces'.
                    Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                    999999 > for EOS >= 4.25.0F.
                    """
                    mlag_domain_id: str | None
                    """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                    spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                    spanning_tree_priority: int
                    """
                    Spanning-tree priority configured for the selected mode.
                    For `rapid-pvst` the priority can also be
                    set per VLAN under network services.

                    Default value: `32768`
                    """
                    spanning_tree_root_super: bool
                    """Default value: `False`"""
                    spanning_tree_mst_pvst_boundary: bool | None
                    """Enable MST PVST border ports."""
                    spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                    """Specify range of port-ids to reserve for port-channels."""
                    virtual_router_mac_address: str | None
                    """Virtual router mac address for anycast gateway."""
                    inband_mgmt_interface: str | None
                    """
                    Pointer to interface used for inband management.
                    All configuration must be done using other data
                    models like network services or structured_config.
                    'inband_mgmt_interface' is only used to refer to
                    this interface as source in various management protocol settings (future feature).

                    On L2 switches,
                    this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                    """
                    inband_mgmt_vlan: int
                    """
                    VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                    uplinks).
                    When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                    switch as well as all 'uplink_switches'.
                    When using 'inband_mgmt_ip' the VLAN and SVI will only be
                    created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                    created using network services data models.

                    Default value: `4092`
                    """
                    inband_mgmt_subnet: str | None
                    """
                    Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                    ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      : <subnet> +
                    2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       :
                    <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                    GW on l2leafs : <subnet> + 1
                    Assign range
                    larger than total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ip' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_subnet_offset: int
                    """
                    Offset value to adjust the calculated inband management IP address within the subnet.
                    The assigned
                    IP will be computed by adding this offset to the device ID.

                    Default value: `0`
                    """
                    inband_mgmt_ip: str | None
                    """
                    IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                    If this is set the
                    VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN and SVI on
                    the parent switches must be created using network services data models.

                    This setting is applicable
                    to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                    is derived from 'inband_mgmt_subnet' if set.

                    This setting is applicable to L2 switches (switches
                    using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_address: str | None
                    """
                    IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                    If this
                    is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN
                    and SVI on the parent switches must be created using network services data models.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_subnet: str | None
                    """
                    Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                    on ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                    extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      :
                    <subnet> + 2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       : <subnet> + 3 + <l2leaf id>
                    GW on l2leafs : <subnet> + 1
                    Assign range larger than
                    total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf'.
                    Used when `inband_mgmt_ipv6_address` is set.
                    Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_description: str
                    """
                    Description configured on the Inband Management SVI.

                    This setting is only applied on the devices
                    where it is set, it does not automatically affect any parent/child devices configuration, so it must
                    be set on each applicable node/node-group/node-type as needed.

                    Default value: `"Inband Management"`
                    """
                    inband_mgmt_vlan_name: str
                    """
                    Name configured on the Inband Management VLAN.
                    This setting is only applied on the devices where it
                    is set, it does not automatically affect any parent/child devices configuration, so it must be set
                    on each applicable node/node-group/node-type as needed.

                    Default value: `"INBAND_MGMT"`
                    """
                    inband_mgmt_vrf: str
                    """
                    VRF configured on the Inband Management Interface.
                    The VRF is created if not already created by
                    other means.
                    This setting is only applied on the devices where it is set, it does not automatically
                    affect any parent/child devices configuration, so it must be set on each applicable node/node-
                    group/node-type as needed.

                    Default value: `"default"`
                    """
                    inband_mgmt_mtu: int
                    """
                    MTU configured on the Inband Management Interface.
                    This setting is only applied on the devices where
                    it is set, it does not automatically affect any parent/child devices configuration, so it must be
                    set on each applicable node/node-group/node-type as needed.

                    Default value: `1500`
                    """
                    inband_ztp: bool
                    """
                    Enable to configure upstream device with proper configuration to allow downstream devices to be
                    Zero-Touch-Provisioned over the uplink interfaces.
                    For L2 devices this setting also requires that
                    the `inband_mgmt_vlan` is set for the node.

                    PREVIEW: Support for L3 devices is marked as "preview",
                    meaning the data models or generated configuration can change at any time.

                    Default value: `False`
                    """
                    inband_ztp_lacp_fallback_delay: int
                    """
                    Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                    ZTP node.
                    This setting also requires that `inband_ztp` is set for the node.

                    Default value: `30`
                    """
                    mpls_overlay_role: Literal["client", "server", "none"] | None
                    """
                    Set the default mpls overlay role.
                    Acting role in overlay control plane.
                    """
                    overlay_address_families: OverlayAddressFamilies
                    """
                    Set the default overlay address families.


                    Subclass of AvdList with `str` items.
                    """
                    mpls_route_reflectors: MplsRouteReflectors
                    """
                    List of inventory hostname acting as MPLS route-reflectors.

                    Subclass of AvdList with `str` items.
                    """
                    bgp_cluster_id: str | None
                    """Set BGP cluster id."""
                    ptp: Ptp
                    """Subclass of AvdModel."""
                    wan_role: Literal["client", "server"] | None
                    """
                    Override the default WAN role.

                    This is used both for AutoVPN and Pathfinder designs.
                    That means if
                    `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                    `server` indicates that the router is a
                    route-reflector.
                    """
                    cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                    """
                    Configure the transit mode for a WAN client for CV Pathfinder designs
                    only when the `wan_mode` root
                    key is set to `cv_pathfinder`.

                    'zone' is currently not supported.
                    """
                    cv_pathfinder_region: str | None
                    """
                    The CV Pathfinder region name.
                    This key is required for WAN routers but optional for pathfinders.
                    The region name must be defined under 'cv_pathfinder_regions'.
                    """
                    cv_pathfinder_site: str | None
                    """
                    The CV Pathfinder site name.
                    This key is required for WAN routers but optional for pathfinders.
                    For
                    WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                    relevant region under 'cv_pathfinder_regions'.
                    For pathfinders without `cv_pathfinder_region` set,
                    the site must be defined under `cv_pathfinder_global_sites`.
                    """
                    wan_ha: WanHa
                    """
                    The key is supported only if `wan_mode` == `cv-pathfinder`.
                    AutoVPN support is still to be
                    determined.

                    Maximum 2 devices supported by group for HA.

                    Subclass of AvdModel.
                    """
                    dps_mss_ipv4: str
                    """
                    IPv4 MSS value configured under "router path-selection" on WAN Devices.

                    Default value: `"auto"`
                    """
                    l3_interfaces: L3Interfaces
                    """
                    L3 Interfaces to configure on the node.

                    Subclass of AvdIndexedList with `L3InterfacesItem` items.
                    Primary key is `name` (`str`).
                    """
                    l3_port_channels: L3PortChannels
                    """
                    L3 Port-Channel interfaces to configure on the node.

                    Subclass of AvdIndexedList with
                    `L3PortChannelsItem` items. Primary key is `name` (`str`).
                    """
                    data_plane_cpu_allocation_max: int | None
                    """
                    Set the maximum number of CPU used for the data plane.
                    This setting is useful on virtual Route
                    Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                    """
                    flow_tracker_type: Literal["sampled", "hardware"] | None
                    """
                    Set the flow tracker type.
                    Override the `default_flow_tracker_type`` set at the `node_type_key`
                    level.
                    `default_flow_tracker_type` default value is `sampled`.
                    """
                    underlay_multicast: UnderlayMulticast
                    """Subclass of AvdModel."""
                    campus: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_access_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus access pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    cv_tags_topology_type: str | None
                    """
                    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                    "edge" or "member-leaf".
                    """
                    digital_twin: DigitalTwin
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Set the OS version and management IP address for the digital twin of the
                    associated node(s).

                    Subclass of AvdModel.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            group: str | UndefinedType = Undefined,
                            nodes: Nodes | UndefinedType = Undefined,
                            id: int | None | UndefinedType = Undefined,
                            platform: str | None | UndefinedType = Undefined,
                            mac_address: str | None | UndefinedType = Undefined,
                            system_mac_address: str | None | UndefinedType = Undefined,
                            serial_number: str | None | UndefinedType = Undefined,
                            rack: str | None | UndefinedType = Undefined,
                            mgmt_ip: str | None | UndefinedType = Undefined,
                            mgmt_gateway: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                            mgmt_interface: str | None | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                            always_configure_ip_routing: bool | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                            uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                            uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                            uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                            uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                            uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                            uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                            uplink_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_mtu: int | None | UndefinedType = Undefined,
                            max_uplink_switches: int | None | UndefinedType = Undefined,
                            max_parallel_uplinks: int | UndefinedType = Undefined,
                            uplink_bfd: bool | UndefinedType = Undefined,
                            uplink_native_vlan: int | None | UndefinedType = Undefined,
                            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                            uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                            uplink_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_structured_config: dict | UndefinedType = Undefined,
                            uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            short_esi: str | None | UndefinedType = Undefined,
                            isis_system_id_prefix: str | None | UndefinedType = Undefined,
                            isis_maximum_paths: int | None | UndefinedType = Undefined,
                            is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                            node_sid_base: int | UndefinedType = Undefined,
                            loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                            loopback_ipv4_offset: int | UndefinedType = Undefined,
                            router_id_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_offset: int | UndefinedType = Undefined,
                            vtep: bool | None | UndefinedType = Undefined,
                            vtep_loopback: str | None | UndefinedType = Undefined,
                            bgp_as: str | None | UndefinedType = Undefined,
                            bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                            evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                            evpn_services_l2_only: bool | UndefinedType = Undefined,
                            filter: Filter | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                            ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                            mlag: bool | UndefinedType = Undefined,
                            mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                            mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                            mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                            mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                            mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_vlan: int | UndefinedType = Undefined,
                            mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                            mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                            mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_port_channel_id: int | None | UndefinedType = Undefined,
                            mlag_domain_id: str | None | UndefinedType = Undefined,
                            spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                            spanning_tree_priority: int | UndefinedType = Undefined,
                            spanning_tree_root_super: bool | UndefinedType = Undefined,
                            spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                            spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                            | UndefinedType = Undefined,
                            virtual_router_mac_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_interface: str | None | UndefinedType = Undefined,
                            inband_mgmt_vlan: int | UndefinedType = Undefined,
                            inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                            inband_mgmt_ip: str | None | UndefinedType = Undefined,
                            inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_description: str | UndefinedType = Undefined,
                            inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                            inband_mgmt_vrf: str | UndefinedType = Undefined,
                            inband_mgmt_mtu: int | UndefinedType = Undefined,
                            inband_ztp: bool | UndefinedType = Undefined,
                            inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                            mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                            mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                            bgp_cluster_id: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                            cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                            cv_pathfinder_region: str | None | UndefinedType = Undefined,
                            cv_pathfinder_site: str | None | UndefinedType = Undefined,
                            wan_ha: WanHa | UndefinedType = Undefined,
                            dps_mss_ipv4: str | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                            flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                            underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                            campus: str | None | UndefinedType = Undefined,
                            campus_pod: str | None | UndefinedType = Undefined,
                            campus_access_pod: str | None | UndefinedType = Undefined,
                            cv_tags_topology_type: str | None | UndefinedType = Undefined,
                            digital_twin: DigitalTwin | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodeGroupsItem.


                            Subclass of AvdModel.

                            Args:
                                group:
                                   The Node Group Name is used for MLAG domain unless set with 'mlag_domain_id'.
                                   The Node Group Name is
                                   also used for peer description on downstream switches' uplinks.
                                nodes:
                                   Define variables per node.

                                   Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                                   (`str`).
                                id: Unique identifier used for IP addressing and other algorithms.
                                platform: Arista platform family.
                                mac_address: Leverage to document management interface mac address.
                                system_mac_address:
                                   System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                   Set to the same MAC address as
                                   available in "show version" on the device.
                                   "system_mac_address" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                serial_number:
                                   Set to the Serial Number of the device.
                                   Only used for documentation purpose in the fabric
                                   documentation and part of the structured_config.
                                   "serial_number" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                rack: Rack that the switch is located in (only used in snmp_settings location).
                                mgmt_ip: Node management interface IPv4 address.
                                mgmt_gateway:
                                   This key sets the management gateway for the device. It takes precedence over the global
                                   `mgmt_gateway`.
                                ipv6_mgmt_ip: Node management interface IPv6 address.
                                ipv6_mgmt_gateway:
                                   This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                   `ipv6_mgmt_gateway`.
                                mgmt_interface:
                                   Management Interface Name.
                                   Default -> platform_management_interface -> mgmt_interface ->
                                   "Management1".
                                link_tracking:
                                   This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                   the upstream interfaces.
                                   Useful in EVPN multhoming designs.


                                   Subclass of AvdModel.
                                lacp_port_id_range:
                                   This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                   number of nodes in the "node_group".
                                   Unique LACP port-id ranges are recommended for EVPN Multihoming
                                   designs.


                                   Subclass of AvdModel.
                                always_configure_ip_routing:
                                   Force configuration of "ip routing" even on L2 devices.
                                   Use this to retain behavior of AVD versions
                                   below 4.0.0.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.
                                uplink_type:
                                   Override the default `uplink_type` set at the `node_type_key` level.
                                   `uplink_type` must be "p2p" if
                                   `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                uplink_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   IPv4
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   IPv6
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_interfaces:
                                   Local uplink interfaces.
                                   Each list item supports range syntax that can be expanded into a list of
                                   interfaces.
                                   If uplink_interfaces is not defined, platform-specific defaults (defined under
                                   default_interfaces) will be used instead.
                                   Please note that default_interfaces are not defined by
                                   default, you should define these yourself.


                                   Subclass of AvdList with `str` items.
                                uplink_switch_interfaces:
                                   Interfaces located on uplink switches.

                                   Subclass of AvdList with `str` items.
                                uplink_switches: Subclass of AvdList with `str` items.
                                uplink_interface_speed:
                                   Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                   (Uplink switch
                                   interface speed can be overridden with `uplink_switch_interface_speed`).
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_switch_interface_speed:
                                   Set point-to-Point interface speed for the uplink switch interface only.
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                max_uplink_switches:
                                   Maximum number of uplink switches.
                                   Changing this value may change IP Addressing on uplinks.
                                   Can be
                                   used to reserve IP space for future expansions.
                                max_parallel_uplinks:
                                   Number of parallel links towards uplink switches.
                                   Changing this value may change interface naming on
                                   uplinks (and corresponding downlinks).
                                   Can be used to reserve interfaces for future parallel
                                   uplinks.
                                uplink_bfd: Enable bfd on uplink interfaces.
                                uplink_native_vlan:
                                   Only applicable to switches with layer-2 port-channel uplinks.
                                   A suspended (disabled) vlan will be
                                   created in both ends of the link unless the vlan is defined under network services.
                                   By default the
                                   uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                uplink_ptp:
                                   Enable PTP on all infrastructure links.

                                   Subclass of AvdModel.
                                uplink_macsec:
                                   Enable MacSec on all uplinks.

                                   Subclass of AvdModel.
                                uplink_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink Port-channel
                                   ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                   For
                                   example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                   For
                                   MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                   This
                                   option overrides the default behavior and statically sets the local Port-channel ID.
                                   Note! Make sure
                                   the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                   value.
                                uplink_switch_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink switch Port-
                                   channel ID will be set to the number of the first interface defined under
                                   `uplink_switch_interfaces`.
                                   For example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [
                                   Eth11/1, Eth22/1 ] -> ID 111
                                   For MLAG port-channels ID will be based on the lowest member interface
                                   on the first MLAG switch.
                                   This option overrides the default behavior and statically sets the Port-
                                   channel ID on the uplink switch.
                                   Note! Make sure the ID is unique and does not overlap with
                                   autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between
                                   1 and 2000 and both MLAG switches must have the same value.
                                uplink_structured_config:
                                   Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                   When
                                   uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                   for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                   When uplink_type ==
                                   "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                   eos_cli_config_gen overrides the settings on the port-channel interface level.
                                   "uplink_structured_config" is applied after "structured_config", so it can override
                                   "structured_config" defined on node-level.
                                   Note! The content of this dictionary is _not_ validated
                                   by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                uplink_switch_port_channel_structured_config:
                                   Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                   channel uplinks.
                                mlag_port_channel_structured_config:
                                   Custom structured config applied to MLAG peer link port-channel id.
                                   Added under
                                   port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the
                                   port-channel interface level.
                                   "mlag_port_channel_structured_config" is applied after
                                   "structured_config", so it can override "structured_config" defined on node-level.
                                mlag_peer_vlan_structured_config:
                                   Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                   override "structured_config" defined on node-level.
                                mlag_peer_l3_vlan_structured_config:
                                   Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                   can override "structured_config" defined on node-level.
                                short_esi:
                                   short_esi only valid for l2leaf devices using port-channel uplink.
                                   Setting short_esi to "auto"
                                   generates the short_esi automatically using a hash of configuration elements.
                                   < 0000:0000:0000 |
                                   auto >.
                                isis_system_id_prefix: (4.4 hexadecimal).
                                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                is_type: Overrides `isis_default_is_type`.
                                node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                loopback_ipv4_address:
                                   IPv4 address without mask for Loopback0.
                                   When set, it takes precedence over `loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                vtep_loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                vtep_loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                vtep_loopback_ipv4_address:
                                   IPv4 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not
                                   catch duplicates.
                                vtep_loopback_ipv6_address:
                                   IPv6 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv6_pool`.
                                   Note: AVD does not check for validity of the IPv6 address and does not
                                   catch duplicates.
                                loopback_ipv4_offset:
                                   Offset all assigned loopback IP addresses.
                                   Required when the 'loopback_ipv4_pool' is the same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                router_id_pool:
                                   Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                   router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                   will not exist on the device.
                                loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                loopback_ipv6_offset:
                                   Offset all assigned loopback IPv6 addresses.
                                   Required when the 'loopback_ipv6_pool' is same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                vtep:
                                   Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                   Overrides VTEP
                                   setting inherited from node_type_keys.
                                vtep_loopback: Set VXLAN source interface.
                                bgp_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                   Required with eBGP.
                                bgp_defaults:
                                   List of EOS commands to apply to BGP daemon.

                                   Subclass of AvdList with `str` items.
                                evpn_role:
                                   Acting role in EVPN control plane.
                                   Default is set in node_type definition from node_type_keys.
                                evpn_route_servers:
                                   List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                   Subclass of AvdList with `str`
                                   items.
                                evpn_services_l2_only:
                                   Possibility to prevent configuration of Tenant VRFs and SVIs.
                                   Override node definition
                                   "network_services_l3" from node_type_keys.
                                   This allows support for centralized routing.
                                filter:
                                   Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                   If filter is not
                                   defined it will default to all.


                                   Subclass of AvdModel.
                                igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                evpn_gateway:
                                   Node is acting as EVPN Multi-Domain Gateway.
                                   New BGP peer-group is generated between EVPN GWs in
                                   different domains or between GWs and Route Servers.
                                   Name can be changed under
                                   "bgp_peer_groups.evpn_overlay_core" variable.
                                   L3 rechability for different EVPN GWs must be already
                                   in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                   same Ansible inventory.


                                   Subclass of AvdModel.
                                ipvpn_gateway:
                                   Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                   this is "bgp_peer_groups.ipvpn_gateway_peers".
                                   L3 Reachability is required for this to work, the
                                   preferred method to establish underlay connectivity is to use core_interfaces.


                                   Subclass of
                                   AvdModel.
                                mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                mlag_ibgp_origin_incomplete:
                                   Set origin of routes received from MLAG iBGP peer to incomplete.
                                   The purpose is to optimize routing
                                   for leaf loopbacks from spine perspective and
                                   avoid suboptimal routing via peerlink for control
                                   plane traffic.
                                mlag_interfaces:
                                   Each list item supports range syntax that can be expanded into a list of interfaces.
                                   Required when
                                   MLAG leafs are present in the topology.


                                   Subclass of AvdList with `str` items.
                                mlag_interfaces_speed:
                                   Set MLAG interface speed.
                                   Speed should be set in the format `<interface_speed>` or `forced
                                   <interface_speed>` or `auto <interface_speed>`.
                                mlag_peer_l3_vlan:
                                   Underlay L3 peering SVI interface id.
                                   If set to 0 or the same vlan as mlag_peer_vlan, the
                                   mlag_peer_vlan will be used for L3 peering.
                                mlag_peer_l3_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_l3_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                mlag_peer_address_family:
                                   IP address family used to establish MLAG Peer Link (control link).
                                   `ipv6` requires EOS version
                                   4.31.1F or higher.
                                   Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                   (ex. `mlag_peer_l3_vlan` set to 4094).
                                mlag_peer_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                mlag_peer_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                mlag_port_channel_id:
                                   If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                   in 'mlag_interfaces'.
                                   Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                   999999 > for EOS >= 4.25.0F.
                                mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                spanning_tree_mode: spanning_tree_mode
                                spanning_tree_priority:
                                   Spanning-tree priority configured for the selected mode.
                                   For `rapid-pvst` the priority can also be
                                   set per VLAN under network services.
                                spanning_tree_root_super: spanning_tree_root_super
                                spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                inband_mgmt_interface:
                                   Pointer to interface used for inband management.
                                   All configuration must be done using other data
                                   models like network services or structured_config.
                                   'inband_mgmt_interface' is only used to refer to
                                   this interface as source in various management protocol settings (future feature).

                                   On L2 switches,
                                   this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                inband_mgmt_vlan:
                                   VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                   uplinks).
                                   When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                   switch as well as all 'uplink_switches'.
                                   When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                   created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                   created using network services data models.
                                inband_mgmt_subnet:
                                   Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                   ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      : <subnet> +
                                   2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       :
                                   <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range
                                   larger than total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ip' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_subnet_offset:
                                   Offset value to adjust the calculated inband management IP address within the subnet.
                                   The assigned
                                   IP will be computed by adding this offset to the device ID.
                                inband_mgmt_ip:
                                   IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                   If this is set the
                                   VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN and SVI on
                                   the parent switches must be created using network services data models.

                                   This setting is applicable
                                   to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                   is derived from 'inband_mgmt_subnet' if set.

                                   This setting is applicable to L2 switches (switches
                                   using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_address:
                                   IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                   If this
                                   is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN
                                   and SVI on the parent switches must be created using network services data models.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_subnet:
                                   Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                   on ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                   extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      :
                                   <subnet> + 2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       : <subnet> + 3 + <l2leaf id>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range larger than
                                   total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf'.
                                   Used when `inband_mgmt_ipv6_address` is set.
                                   Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_description:
                                   Description configured on the Inband Management SVI.

                                   This setting is only applied on the devices
                                   where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                   be set on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vlan_name:
                                   Name configured on the Inband Management VLAN.
                                   This setting is only applied on the devices where it
                                   is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                   on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vrf:
                                   VRF configured on the Inband Management Interface.
                                   The VRF is created if not already created by
                                   other means.
                                   This setting is only applied on the devices where it is set, it does not automatically
                                   affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                   group/node-type as needed.
                                inband_mgmt_mtu:
                                   MTU configured on the Inband Management Interface.
                                   This setting is only applied on the devices where
                                   it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                   set on each applicable node/node-group/node-type as needed.
                                inband_ztp:
                                   Enable to configure upstream device with proper configuration to allow downstream devices to be
                                   Zero-Touch-Provisioned over the uplink interfaces.
                                   For L2 devices this setting also requires that
                                   the `inband_mgmt_vlan` is set for the node.

                                   PREVIEW: Support for L3 devices is marked as "preview",
                                   meaning the data models or generated configuration can change at any time.
                                inband_ztp_lacp_fallback_delay:
                                   Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                   ZTP node.
                                   This setting also requires that `inband_ztp` is set for the node.
                                mpls_overlay_role:
                                   Set the default mpls overlay role.
                                   Acting role in overlay control plane.
                                overlay_address_families:
                                   Set the default overlay address families.


                                   Subclass of AvdList with `str` items.
                                mpls_route_reflectors:
                                   List of inventory hostname acting as MPLS route-reflectors.

                                   Subclass of AvdList with `str` items.
                                bgp_cluster_id: Set BGP cluster id.
                                ptp: Subclass of AvdModel.
                                wan_role:
                                   Override the default WAN role.

                                   This is used both for AutoVPN and Pathfinder designs.
                                   That means if
                                   `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                   `server` indicates that the router is a
                                   route-reflector.
                                cv_pathfinder_transit_mode:
                                   Configure the transit mode for a WAN client for CV Pathfinder designs
                                   only when the `wan_mode` root
                                   key is set to `cv_pathfinder`.

                                   'zone' is currently not supported.
                                cv_pathfinder_region:
                                   The CV Pathfinder region name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   The region name must be defined under 'cv_pathfinder_regions'.
                                cv_pathfinder_site:
                                   The CV Pathfinder site name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   For
                                   WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                   relevant region under 'cv_pathfinder_regions'.
                                   For pathfinders without `cv_pathfinder_region` set,
                                   the site must be defined under `cv_pathfinder_global_sites`.
                                wan_ha:
                                   The key is supported only if `wan_mode` == `cv-pathfinder`.
                                   AutoVPN support is still to be
                                   determined.

                                   Maximum 2 devices supported by group for HA.

                                   Subclass of AvdModel.
                                dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                l3_interfaces:
                                   L3 Interfaces to configure on the node.

                                   Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                   Primary key is `name` (`str`).
                                l3_port_channels:
                                   L3 Port-Channel interfaces to configure on the node.

                                   Subclass of AvdIndexedList with
                                   `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                data_plane_cpu_allocation_max:
                                   Set the maximum number of CPU used for the data plane.
                                   This setting is useful on virtual Route
                                   Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                flow_tracker_type:
                                   Set the flow tracker type.
                                   Override the `default_flow_tracker_type`` set at the `node_type_key`
                                   level.
                                   `default_flow_tracker_type` default value is `sampled`.
                                underlay_multicast: Subclass of AvdModel.
                                campus:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_access_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus access pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                cv_tags_topology_type:
                                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                   "edge" or "member-leaf".
                                digital_twin:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Set the OS version and management IP address for the digital twin of the
                                   associated node(s).

                                   Subclass of AvdModel.

                            """

                class NodeGroups(AvdIndexedList[str, NodeGroupsItem]):
                    """Subclass of AvdIndexedList with `NodeGroupsItem` items. Primary key is `group` (`str`)."""

                    _primary_key: ClassVar[str] = "group"

                NodeGroups._item_type = NodeGroupsItem

                class NodesItem(AvdModel):
                    """Subclass of AvdModel."""

                    class DownlinkPoolsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class DownlinkInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DownlinkInterfaces._item_type = str

                        _fields: ClassVar[dict] = {"ipv4_pool": {"type": str}, "ipv6_pool": {"type": str}, "downlink_interfaces": {"type": DownlinkInterfaces}}
                        ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        IPv4
                        subnets used for links to downlink switches will be derived from this pool based on index the peer's
                        uplink interface's index in 'downlink_interfaces'.
                        """
                        ipv6_pool: str | None
                        """
                        Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                        IPv6
                        subnets used for links to downlink switches will be derived from this pool based on index the peer's
                        uplink interface's index in 'downlink_interfaces'.
                        """
                        downlink_interfaces: DownlinkInterfaces
                        """
                        List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                        this list will determine which subnet will be taken from the pool.

                        Subclass of AvdList with `str`
                        items.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                ipv4_pool: str | None | UndefinedType = Undefined,
                                ipv6_pool: str | None | UndefinedType = Undefined,
                                downlink_interfaces: DownlinkInterfaces | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DownlinkPoolsItem.


                                Subclass of AvdModel.

                                Args:
                                    ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       IPv4
                                       subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                       uplink interface's index in 'downlink_interfaces'.
                                    ipv6_pool:
                                       Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                       IPv6
                                       subnets used for links to downlink switches will be derived from this pool based on index the peer's
                                       uplink interface's index in 'downlink_interfaces'.
                                    downlink_interfaces:
                                       List of downlink interfaces or ranges of interfaces to use this pool. The index of the interface in
                                       this list will determine which subnet will be taken from the pool.

                                       Subclass of AvdList with `str`
                                       items.

                                """

                    class DownlinkPools(AvdList[DownlinkPoolsItem]):
                        """Subclass of AvdList with `DownlinkPoolsItem` items."""

                    DownlinkPools._item_type = DownlinkPoolsItem

                    class LinkTracking(AvdModel):
                        """Subclass of AvdModel."""

                        class GroupsItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"name": {"type": str}, "recovery_delay": {"type": int}, "links_minimum": {"type": int}}
                            name: str
                            """Tracking group name."""
                            recovery_delay: int | None
                            """default -> platform_settings_mlag_reload_delay -> 300."""
                            links_minimum: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    recovery_delay: int | None | UndefinedType = Undefined,
                                    links_minimum: int | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    GroupsItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name: Tracking group name.
                                        recovery_delay: default -> platform_settings_mlag_reload_delay -> 300.
                                        links_minimum: links_minimum

                                    """

                        class Groups(AvdIndexedList[str, GroupsItem]):
                            """Subclass of AvdIndexedList with `GroupsItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        Groups._item_type = GroupsItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "groups": {"type": Groups, "default": lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        groups: Groups
                        """
                        Link Tracking Groups.
                        By default a single group named "LT_GROUP1" is defined with default values.
                        Any groups defined under "groups" will replace the default.


                        Subclass of AvdIndexedList with
                        `GroupsItem` items. Primary key is `name` (`str`).

                        Default value: `lambda cls: coerce_type([{"name": "LT_GROUP1"}], target_type=cls)`
                        """

                        if TYPE_CHECKING:

                            def __init__(self, *, enabled: bool | UndefinedType = Undefined, groups: Groups | UndefinedType = Undefined) -> None:
                                """
                                LinkTracking.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    groups:
                                       Link Tracking Groups.
                                       By default a single group named "LT_GROUP1" is defined with default values.
                                       Any groups defined under "groups" will replace the default.


                                       Subclass of AvdIndexedList with
                                       `GroupsItem` items. Primary key is `name` (`str`).

                                """

                    class LacpPortIdRange(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool, "default": False},
                            "size": {"type": int, "default": 128},
                            "offset": {"type": int, "default": 0},
                        }
                        enabled: bool
                        """Default value: `False`"""
                        size: int
                        """
                        Recommended size > = number of ports in the switch.

                        Default value: `128`
                        """
                        offset: int
                        """
                        Offset is used to avoid overlapping port-id ranges of different switches.
                        Useful when a "connected-
                        endpoint" is connected to switches in different "node_groups".

                        Default value: `0`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                size: int | UndefinedType = Undefined,
                                offset: int | UndefinedType = Undefined,
                            ) -> None:
                                """
                                LacpPortIdRange.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    size: Recommended size > = number of ports in the switch.
                                    offset:
                                       Offset is used to avoid overlapping port-id ranges of different switches.
                                       Useful when a "connected-
                                       endpoint" is connected to switches in different "node_groups".

                                """

                    class UplinkInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkInterfaces._item_type = str

                    class UplinkSwitchInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitchInterfaces._item_type = str

                    class UplinkSwitches(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    UplinkSwitches._item_type = str

                    class UplinkPtp(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"enable": {"type": bool, "default": False}}
                        enable: bool
                        """Default value: `False`"""

                        if TYPE_CHECKING:

                            def __init__(self, *, enable: bool | UndefinedType = Undefined) -> None:
                                """
                                UplinkPtp.


                                Subclass of AvdModel.

                                Args:
                                    enable: enable

                                """

                    class UplinkMacsec(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"profile": {"type": str}}
                        profile: str | None

                        if TYPE_CHECKING:

                            def __init__(self, *, profile: str | None | UndefinedType = Undefined) -> None:
                                """
                                UplinkMacsec.


                                Subclass of AvdModel.

                                Args:
                                    profile: profile

                                """

                    class BgpDefaults(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    BgpDefaults._item_type = str

                    class EvpnRouteServers(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    EvpnRouteServers._item_type = str

                    class Filter(AvdModel):
                        """Subclass of AvdModel."""

                        class Tenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tenants._item_type = str

                        class Tags(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Tags._item_type = str

                        class AllowVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AllowVrfs._item_type = str

                        class DenyVrfs(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        DenyVrfs._item_type = str

                        class AlwaysIncludeVrfsInTenants(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AlwaysIncludeVrfsInTenants._item_type = str

                        _fields: ClassVar[dict] = {
                            "tenants": {"type": Tenants, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "tags": {"type": Tags, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "allow_vrfs": {"type": AllowVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "deny_vrfs": {"type": DenyVrfs, "default": lambda cls: coerce_type(["all"], target_type=cls)},
                            "always_include_vrfs_in_tenants": {"type": AlwaysIncludeVrfsInTenants},
                            "only_vlans_in_use": {"type": bool, "default": False},
                        }
                        tenants: Tenants
                        """
                        Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                        Tenants (default).
                        This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        tags: Tags
                        """
                        Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        allow_vrfs: AllowVrfs
                        """
                        Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                        (default).
                        This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                        Subclass of
                        AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        deny_vrfs: DenyVrfs
                        """
                        Prevent configuration of Network Services defined under these VRFs.
                        This list prevents the given
                        VRFs to be included by any other filtering mechanism.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["all"], target_type=cls)`
                        """
                        always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants
                        """
                        List of tenants where VRFs will be configured even if VLANs are not included in tags.
                        Useful for L3
                        "border" leaf.


                        Subclass of AvdList with `str` items.
                        """
                        only_vlans_in_use: bool
                        """
                        Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                        Note! This
                        feature only considers configuration managed by eos_designs.
                        This excludes structured_config,
                        custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                        Default value: `False`
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                tenants: Tenants | UndefinedType = Undefined,
                                tags: Tags | UndefinedType = Undefined,
                                allow_vrfs: AllowVrfs | UndefinedType = Undefined,
                                deny_vrfs: DenyVrfs | UndefinedType = Undefined,
                                always_include_vrfs_in_tenants: AlwaysIncludeVrfsInTenants | UndefinedType = Undefined,
                                only_vlans_in_use: bool | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Filter.


                                Subclass of AvdModel.

                                Args:
                                    tenants:
                                       Limit configured Network Services to those defined under these Tenants. Set to ['all'] for all
                                       Tenants (default).
                                       This list also limits Tenants included by `always_include_vrfs_in_tenants`.
                                       Subclass of AvdList with `str` items.
                                    tags:
                                       Limit configured VLANs to those matching the given tags. Set to ['all'] for all VLANs (default).
                                       Subclass of AvdList with `str` items.
                                    allow_vrfs:
                                       Limit configured Network Services to those defined under these VRFs. Set to ['all'] for all VRFs
                                       (default).
                                       This list also limits VRFs included by `always_include_vrfs_in_tenants`.

                                       Subclass of
                                       AvdList with `str` items.
                                    deny_vrfs:
                                       Prevent configuration of Network Services defined under these VRFs.
                                       This list prevents the given
                                       VRFs to be included by any other filtering mechanism.

                                       Subclass of AvdList with `str` items.
                                    always_include_vrfs_in_tenants:
                                       List of tenants where VRFs will be configured even if VLANs are not included in tags.
                                       Useful for L3
                                       "border" leaf.


                                       Subclass of AvdList with `str` items.
                                    only_vlans_in_use:
                                       Only configure VLANs, SVIs, VRFs in use by connected endpoints or downstream L2 switches.
                                       Note! This
                                       feature only considers configuration managed by eos_designs.
                                       This excludes structured_config,
                                       custom_structured_configuration_, raw_eos_cli, eos_cli, custom templates, configlets etc.

                                """

                    class EvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote EVPN GW server."""
                            ip_address: str | None
                            """Peering IP of remote Route Server."""
                            bgp_as: str | None
                            """
                            Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                            interpreted as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | None | UndefinedType = Undefined,
                                    bgp_as: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote EVPN GW server.
                                        ip_address: Peering IP of remote Route Server.
                                        bgp_as:
                                           Remote Route Server's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being
                                           interpreted as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        class EvpnL2(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}}
                            enabled: bool
                            """Default value: `False`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL2.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled

                                    """

                        class EvpnL3(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool, "default": False}, "inter_domain": {"type": bool, "default": True}}
                            enabled: bool
                            """Default value: `False`"""
                            inter_domain: bool
                            """Default value: `True`"""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | UndefinedType = Undefined, inter_domain: bool | UndefinedType = Undefined) -> None:
                                    """
                                    EvpnL3.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        inter_domain: inter_domain

                                    """

                        class AllActiveMultihoming(AvdModel):
                            """Subclass of AvdModel."""

                            class EvpnEthernetSegment(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"identifier": {"type": str}, "rt_import": {"type": str}}
                                identifier: str
                                """EVPN Ethernet Segment Identifier (Type 1 format)"""
                                rt_import: str
                                """Low-order 6 bytes of ES-Import Route Target."""

                                if TYPE_CHECKING:

                                    def __init__(self, *, identifier: str | UndefinedType = Undefined, rt_import: str | UndefinedType = Undefined) -> None:
                                        """
                                        EvpnEthernetSegment.


                                        Subclass of AvdModel.

                                        Args:
                                            identifier: EVPN Ethernet Segment Identifier (Type 1 format)
                                            rt_import: Low-order 6 bytes of ES-Import Route Target.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "enable_d_path": {"type": bool, "default": True},
                                "evpn_domain_id_local": {"type": str},
                                "evpn_domain_id_remote": {"type": str},
                                "evpn_ethernet_segment": {"type": EvpnEthernetSegment},
                            }
                            enabled: bool
                            """Enable Active Active Multihoming resiliency model."""
                            enable_d_path: bool
                            """
                            Enable D-path for use with BGP bestpath selection algorithm.

                            Default value: `True`
                            """
                            evpn_domain_id_local: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_domain_id_remote: str
                            """ASN(asplain):local_admin or ASN(asdot):local_admin notation"""
                            evpn_ethernet_segment: EvpnEthernetSegment
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    enable_d_path: bool | UndefinedType = Undefined,
                                    evpn_domain_id_local: str | UndefinedType = Undefined,
                                    evpn_domain_id_remote: str | UndefinedType = Undefined,
                                    evpn_ethernet_segment: EvpnEthernetSegment | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    AllActiveMultihoming.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: Enable Active Active Multihoming resiliency model.
                                        enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                        evpn_domain_id_local: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_domain_id_remote: ASN(asplain):local_admin or ASN(asdot):local_admin notation
                                        evpn_ethernet_segment: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "remote_peers": {"type": RemotePeers},
                            "evpn_l2": {"type": EvpnL2},
                            "evpn_l3": {"type": EvpnL3},
                            "all_active_multihoming": {"type": AllActiveMultihoming},
                        }
                        remote_peers: RemotePeers
                        """
                        Define remote peers of the EVPN VXLAN Gateway.
                        If the hostname can be found in the inventory,
                        ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                        If the
                        peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                        Subclass
                        of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                        """
                        evpn_l2: EvpnL2
                        """
                        Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                        Subclass of AvdModel.
                        """
                        evpn_l3: EvpnL3
                        """
                        Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                        Subclass of AvdModel.
                        """
                        all_active_multihoming: AllActiveMultihoming
                        """
                        Enable Active Active Multihoming architecture for EVPN Gateways.
                        Not supported with MLAG or IPVPN
                        Gateway. Requires EVPN L3 inter-domain to be enabled.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                                evpn_l2: EvpnL2 | UndefinedType = Undefined,
                                evpn_l3: EvpnL3 | UndefinedType = Undefined,
                                all_active_multihoming: AllActiveMultihoming | UndefinedType = Undefined,
                            ) -> None:
                                """
                                EvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    remote_peers:
                                       Define remote peers of the EVPN VXLAN Gateway.
                                       If the hostname can be found in the inventory,
                                       ip_address and BGP ASN will be automatically populated. Manual override takes precedence.
                                       If the
                                       peer's hostname can not be found in the inventory, ip_address and bgp_as must be defined.


                                       Subclass
                                       of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).
                                    evpn_l2:
                                       Enable EVPN Gateway functionality for route-types 2 (MAC-IP) and 3 (IMET).

                                       Subclass of AvdModel.
                                    evpn_l3:
                                       Enable EVPN Gateway functionality for route-type 5 (IP-PREFIX).

                                       Subclass of AvdModel.
                                    all_active_multihoming:
                                       Enable Active Active Multihoming architecture for EVPN Gateways.
                                       Not supported with MLAG or IPVPN
                                       Gateway. Requires EVPN L3 inter-domain to be enabled.

                                       Subclass of AvdModel.

                                """

                    class IpvpnGateway(AvdModel):
                        """Subclass of AvdModel."""

                        class AddressFamilies(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        AddressFamilies._item_type = str

                        class RemotePeersItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"hostname": {"type": str}, "ip_address": {"type": str}, "bgp_as": {"type": str}}
                            hostname: str
                            """Hostname of remote IPVPN Peer."""
                            ip_address: str
                            """Peering IP of remote IPVPN Peer."""
                            bgp_as: str
                            """
                            Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For
                            asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                            as a float number.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    hostname: str | UndefinedType = Undefined,
                                    ip_address: str | UndefinedType = Undefined,
                                    bgp_as: str | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RemotePeersItem.


                                    Subclass of AvdModel.

                                    Args:
                                        hostname: Hostname of remote IPVPN Peer.
                                        ip_address: Peering IP of remote IPVPN Peer.
                                        bgp_as:
                                           Remote IPVPN Peer's BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For
                                           asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted
                                           as a float number.

                                    """

                        class RemotePeers(AvdIndexedList[str, RemotePeersItem]):
                            """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                            _primary_key: ClassVar[str] = "hostname"

                        RemotePeers._item_type = RemotePeersItem

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "evpn_domain_id": {"type": str, "default": "65535:1"},
                            "ipvpn_domain_id": {"type": str, "default": "65535:2"},
                            "enable_d_path": {"type": bool, "default": True},
                            "maximum_routes": {"type": int, "default": 0},
                            "local_as": {"type": str},
                            "address_families": {"type": AddressFamilies, "default": lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)},
                            "remote_peers": {"type": RemotePeers},
                        }
                        enabled: bool
                        evpn_domain_id: str
                        """
                        Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:1"`
                        """
                        ipvpn_domain_id: str
                        """
                        Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.

                        Default value: `"65535:2"`
                        """
                        enable_d_path: bool
                        """
                        Enable D-path for use with BGP bestpath selection algorithm.

                        Default value: `True`
                        """
                        maximum_routes: int
                        """
                        Maximum routes to accept from IPVPN remote peers.

                        Default value: `0`
                        """
                        local_as: str | None
                        """
                        Local BGP AS applied to peering with IPVPN remote peers.
                        BGP AS <1-4294967295> or AS number in asdot
                        notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes,
                        to prevent it from being interpreted as a float number.
                        """
                        address_families: AddressFamilies
                        """
                        IPVPN address families to enable for remote peers.

                        Subclass of AvdList with `str` items.

                        Default value: `lambda cls: coerce_type(["vpn-ipv4"], target_type=cls)`
                        """
                        remote_peers: RemotePeers
                        """Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`)."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | UndefinedType = Undefined,
                                evpn_domain_id: str | UndefinedType = Undefined,
                                ipvpn_domain_id: str | UndefinedType = Undefined,
                                enable_d_path: bool | UndefinedType = Undefined,
                                maximum_routes: int | UndefinedType = Undefined,
                                local_as: str | None | UndefinedType = Undefined,
                                address_families: AddressFamilies | UndefinedType = Undefined,
                                remote_peers: RemotePeers | UndefinedType = Undefined,
                            ) -> None:
                                """
                                IpvpnGateway.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    evpn_domain_id: Domain ID to assign to EVPN address family for use with D-path. Format <nn>:<nn>.
                                    ipvpn_domain_id: Domain ID to assign to IPVPN address families for use with D-path. Format <nn>:<nn>.
                                    enable_d_path: Enable D-path for use with BGP bestpath selection algorithm.
                                    maximum_routes: Maximum routes to accept from IPVPN remote peers.
                                    local_as:
                                       Local BGP AS applied to peering with IPVPN remote peers.
                                       BGP AS <1-4294967295> or AS number in asdot
                                       notation "<1-65535>.<0-65535>".
                                       For asdot notation in YAML inputs, the value must be put in quotes,
                                       to prevent it from being interpreted as a float number.
                                    address_families:
                                       IPVPN address families to enable for remote peers.

                                       Subclass of AvdList with `str` items.
                                    remote_peers: Subclass of AvdIndexedList with `RemotePeersItem` items. Primary key is `hostname` (`str`).

                                """

                    class MlagInterfaces(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MlagInterfaces._item_type = str

                    class OverlayAddressFamilies(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    OverlayAddressFamilies._item_type = str

                    class MplsRouteReflectors(AvdList[str]):
                        """Subclass of AvdList with `str` items."""

                    MplsRouteReflectors._item_type = str

                    class Ptp(AvdModel):
                        """Subclass of AvdModel."""

                        class Uplinks(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        Uplinks._item_type = str

                        class Dscp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"general_messages": {"type": int}, "event_messages": {"type": int}}
                            general_messages: int | None
                            event_messages: int | None

                            if TYPE_CHECKING:

                                def __init__(
                                    self, *, general_messages: int | None | UndefinedType = Undefined, event_messages: int | None | UndefinedType = Undefined
                                ) -> None:
                                    """
                                    Dscp.


                                    Subclass of AvdModel.

                                    Args:
                                        general_messages: general_messages
                                        event_messages: event_messages

                                    """

                        class Monitor(AvdModel):
                            """Subclass of AvdModel."""

                            class Threshold(AvdModel):
                                """Subclass of AvdModel."""

                                class Drop(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"offset_from_master": {"type": int}, "mean_path_delay": {"type": int}}
                                    offset_from_master: int | None
                                    mean_path_delay: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            offset_from_master: int | None | UndefinedType = Undefined,
                                            mean_path_delay: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Drop.


                                            Subclass of AvdModel.

                                            Args:
                                                offset_from_master: offset_from_master
                                                mean_path_delay: mean_path_delay

                                            """

                                _fields: ClassVar[dict] = {
                                    "offset_from_master": {"type": int, "default": 250},
                                    "mean_path_delay": {"type": int, "default": 1500},
                                    "drop": {"type": Drop},
                                }
                                offset_from_master: int
                                """Default value: `250`"""
                                mean_path_delay: int
                                """Default value: `1500`"""
                                drop: Drop
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        offset_from_master: int | UndefinedType = Undefined,
                                        mean_path_delay: int | UndefinedType = Undefined,
                                        drop: Drop | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        Threshold.


                                        Subclass of AvdModel.

                                        Args:
                                            offset_from_master: offset_from_master
                                            mean_path_delay: mean_path_delay
                                            drop: Subclass of AvdModel.

                                        """

                            class MissingMessage(AvdModel):
                                """Subclass of AvdModel."""

                                class Intervals(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {"announce": {"type": int}, "follow_up": {"type": int}, "sync": {"type": int}}
                                    announce: int | None
                                    follow_up: int | None
                                    sync: int | None

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            announce: int | None | UndefinedType = Undefined,
                                            follow_up: int | None | UndefinedType = Undefined,
                                            sync: int | None | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            Intervals.


                                            Subclass of AvdModel.

                                            Args:
                                                announce: announce
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                class SequenceIds(AvdModel):
                                    """Subclass of AvdModel."""

                                    _fields: ClassVar[dict] = {
                                        "enabled": {"type": bool, "default": True},
                                        "announce": {"type": int, "default": 3},
                                        "delay_resp": {"type": int, "default": 3},
                                        "follow_up": {"type": int, "default": 3},
                                        "sync": {"type": int, "default": 3},
                                    }
                                    enabled: bool
                                    """Default value: `True`"""
                                    announce: int
                                    """Default value: `3`"""
                                    delay_resp: int
                                    """Default value: `3`"""
                                    follow_up: int
                                    """Default value: `3`"""
                                    sync: int
                                    """Default value: `3`"""

                                    if TYPE_CHECKING:

                                        def __init__(
                                            self,
                                            *,
                                            enabled: bool | UndefinedType = Undefined,
                                            announce: int | UndefinedType = Undefined,
                                            delay_resp: int | UndefinedType = Undefined,
                                            follow_up: int | UndefinedType = Undefined,
                                            sync: int | UndefinedType = Undefined,
                                        ) -> None:
                                            """
                                            SequenceIds.


                                            Subclass of AvdModel.

                                            Args:
                                                enabled: enabled
                                                announce: announce
                                                delay_resp: delay_resp
                                                follow_up: follow_up
                                                sync: sync

                                            """

                                _fields: ClassVar[dict] = {"intervals": {"type": Intervals}, "sequence_ids": {"type": SequenceIds}}
                                intervals: Intervals
                                """Subclass of AvdModel."""
                                sequence_ids: SequenceIds
                                """Subclass of AvdModel."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, intervals: Intervals | UndefinedType = Undefined, sequence_ids: SequenceIds | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        MissingMessage.


                                        Subclass of AvdModel.

                                        Args:
                                            intervals: Subclass of AvdModel.
                                            sequence_ids: Subclass of AvdModel.

                                        """

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool, "default": True},
                                "threshold": {"type": Threshold},
                                "missing_message": {"type": MissingMessage},
                            }
                            enabled: bool
                            """Default value: `True`"""
                            threshold: Threshold
                            """Subclass of AvdModel."""
                            missing_message: MissingMessage
                            """Subclass of AvdModel."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | UndefinedType = Undefined,
                                    threshold: Threshold | UndefinedType = Undefined,
                                    missing_message: MissingMessage | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Monitor.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        threshold: Subclass of AvdModel.
                                        missing_message: Subclass of AvdModel.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "profile": {"type": str},
                            "uplinks": {"type": Uplinks},
                            "mlag": {"type": bool, "default": False},
                            "domain": {"type": int},
                            "priority1": {"type": int},
                            "priority2": {"type": int},
                            "auto_clock_identity": {"type": bool},
                            "clock_identity_prefix": {"type": str, "default": "00:1C:73"},
                            "clock_identity": {"type": str},
                            "source_ip": {"type": str},
                            "mode": {"type": str, "default": "boundary"},
                            "mode_one_step": {"type": bool, "default": False},
                            "ttl": {"type": int},
                            "forward_unicast": {"type": bool, "default": False},
                            "forward_v1": {"type": bool},
                            "dscp": {"type": Dscp},
                            "monitor": {"type": Monitor},
                        }
                        enabled: bool | None
                        profile: str | None
                        """
                        Default available profiles are:
                          - "aes67"
                          - "aes67-r16-2016"
                          - "smpte2059-2"
                        """
                        uplinks: Uplinks
                        """Subclass of AvdList with `str` items."""
                        mlag: bool
                        """
                        Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                        configured on the MLAG peer-link port-channel.

                        Default value: `False`
                        """
                        domain: int | None
                        priority1: int | None
                        """default -> automatically set based on node_type."""
                        priority2: int | None
                        """default -> (node_id modulus 256)."""
                        auto_clock_identity: bool | None
                        """
                        If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                        default EOS behaviour, simply disable the automatic PTP clock identity.
                        default ->
                        (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                        HEX).
                        """
                        clock_identity_prefix: str
                        """
                        PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                        By default the 3-byte prefix is "00:1C:73".
                        This
                        can be overridden if auto_clock_identity is set to true (which is the default).

                        Default value: `"00:1C:73"`
                        """
                        clock_identity: str | None
                        """Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06"."""
                        source_ip: str | None
                        """
                        By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                        relevant SVI, which is the recommended behaviour.
                        This can be set manually if required, for example,
                        to a value of "10.1.2.3".
                        """
                        mode: Literal["boundary"]
                        """Default value: `"boundary"`"""
                        mode_one_step: bool
                        """Default value: `False`"""
                        ttl: int | None
                        forward_unicast: bool
                        """
                        Enable PTP unicast forwarding.

                        Default value: `False`
                        """
                        forward_v1: bool | None
                        """Forward dataplane PTP V1 packets."""
                        dscp: Dscp
                        """Subclass of AvdModel."""
                        monitor: Monitor
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                profile: str | None | UndefinedType = Undefined,
                                uplinks: Uplinks | UndefinedType = Undefined,
                                mlag: bool | UndefinedType = Undefined,
                                domain: int | None | UndefinedType = Undefined,
                                priority1: int | None | UndefinedType = Undefined,
                                priority2: int | None | UndefinedType = Undefined,
                                auto_clock_identity: bool | None | UndefinedType = Undefined,
                                clock_identity_prefix: str | UndefinedType = Undefined,
                                clock_identity: str | None | UndefinedType = Undefined,
                                source_ip: str | None | UndefinedType = Undefined,
                                mode: Literal["boundary"] | UndefinedType = Undefined,
                                mode_one_step: bool | UndefinedType = Undefined,
                                ttl: int | None | UndefinedType = Undefined,
                                forward_unicast: bool | UndefinedType = Undefined,
                                forward_v1: bool | None | UndefinedType = Undefined,
                                dscp: Dscp | UndefinedType = Undefined,
                                monitor: Monitor | UndefinedType = Undefined,
                            ) -> None:
                                """
                                Ptp.


                                Subclass of AvdModel.

                                Args:
                                    enabled: enabled
                                    profile:
                                       Default available profiles are:
                                         - "aes67"
                                         - "aes67-r16-2016"
                                         - "smpte2059-2"
                                    uplinks: Subclass of AvdList with `str` items.
                                    mlag:
                                       Configure PTP on the MLAG peer-link port-channel when PTP is enabled. By default PTP will not be
                                       configured on the MLAG peer-link port-channel.
                                    domain: domain
                                    priority1: default -> automatically set based on node_type.
                                    priority2: default -> (node_id modulus 256).
                                    auto_clock_identity:
                                       If you prefer to have PTP clock identity be the system MAC-address of the switch, which is the
                                       default EOS behaviour, simply disable the automatic PTP clock identity.
                                       default ->
                                       (clock_identity_prefix = 00:1C:73 (default)) + (PTP priority 1 as HEX) + ":00:" + (PTP priority 2 as
                                       HEX).
                                    clock_identity_prefix:
                                       PTP clock idetentiy 3-byte prefix. i.e. "01:02:03".
                                       By default the 3-byte prefix is "00:1C:73".
                                       This
                                       can be overridden if auto_clock_identity is set to true (which is the default).
                                    clock_identity: Set PTP clock identity manually. 6-byte value i.e. "01:02:03:04:05:06".
                                    source_ip:
                                       By default in EOS, PTP packets are sourced with an IP address from the routed port or from the
                                       relevant SVI, which is the recommended behaviour.
                                       This can be set manually if required, for example,
                                       to a value of "10.1.2.3".
                                    mode: mode
                                    mode_one_step: mode_one_step
                                    ttl: ttl
                                    forward_unicast: Enable PTP unicast forwarding.
                                    forward_v1: Forward dataplane PTP V1 packets.
                                    dscp: Subclass of AvdModel.
                                    monitor: Subclass of AvdModel.

                                """

                    class WanHa(AvdModel):
                        """Subclass of AvdModel."""

                        class HaInterfaces(AvdList[str]):
                            """Subclass of AvdList with `str` items."""

                        HaInterfaces._item_type = str

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "enabled": {"type": bool},
                            "ipsec": {"type": bool, "default": True},
                            "mtu": {"type": int, "default": 9194},
                            "ha_interfaces": {"type": HaInterfaces},
                            "ha_ipv4_pool": {"type": str},
                            "port_channel_id": {"type": int},
                            "use_port_channel_for_direct_ha": {"type": bool, "default": True},
                            "flow_tracking": {"type": FlowTracking},
                        }
                        enabled: bool | None
                        """Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group."""
                        ipsec: bool
                        """
                        Enable / Disable IPsec over HA path-group when HA is enabled.

                        Default value: `True`
                        """
                        mtu: int
                        """
                        Set MTU on WAN HA interfaces.

                        Default value: `9194`
                        """
                        ha_interfaces: HaInterfaces
                        """
                        Local WAN HA interfaces
                        Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                        Can be used to filter uplink interfaces when there are multiple uplinks.
                        Limitations:
                          Either all
                        interfaces must be uplinks or all interfaces must not be uplinks.
                          Only one interface is supported
                        for non uplinks.

                        Subclass of AvdList with `str` items.
                        """
                        ha_ipv4_pool: str | None
                        """
                        Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                        The IPv4
                        subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                        first WAN router.
                        Not used for uplink interfaces.
                        """
                        port_channel_id: int | None
                        """Port-channel ID to use for direct HA."""
                        use_port_channel_for_direct_ha: bool
                        """
                        Enable or disable using a port-channel interface for direct HA when there is only one interface.
                        This feature was introduced in EOS 4.33.0F.

                        Default value: `True`
                        """
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                        setting.

                        Subclass of AvdModel.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                enabled: bool | None | UndefinedType = Undefined,
                                ipsec: bool | UndefinedType = Undefined,
                                mtu: int | UndefinedType = Undefined,
                                ha_interfaces: HaInterfaces | UndefinedType = Undefined,
                                ha_ipv4_pool: str | None | UndefinedType = Undefined,
                                port_channel_id: int | None | UndefinedType = Undefined,
                                use_port_channel_for_direct_ha: bool | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                            ) -> None:
                                """
                                WanHa.


                                Subclass of AvdModel.

                                Args:
                                    enabled: Enable / Disable auto CV-Pathfinder HA, when two nodes are defined in the same node_group.
                                    ipsec: Enable / Disable IPsec over HA path-group when HA is enabled.
                                    mtu: Set MTU on WAN HA interfaces.
                                    ha_interfaces:
                                       Local WAN HA interfaces
                                       Overwrite the default behavior which is to pick all the `uplink_interfaces`.
                                       Can be used to filter uplink interfaces when there are multiple uplinks.
                                       Limitations:
                                         Either all
                                       interfaces must be uplinks or all interfaces must not be uplinks.
                                         Only one interface is supported
                                       for non uplinks.

                                       Subclass of AvdList with `str` items.
                                    ha_ipv4_pool:
                                       Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                       The IPv4
                                       subnet used for direct WAN HA connectivity is derived from this pool based on the node ID of the
                                       first WAN router.
                                       Not used for uplink interfaces.
                                    port_channel_id: Port-channel ID to use for direct HA.
                                    use_port_channel_for_direct_ha:
                                       Enable or disable using a port-channel interface for direct HA when there is only one interface.
                                       This feature was introduced in EOS 4.33.0F.
                                    flow_tracking:
                                       Configures flow-tracking on the HA interfaces. Overrides `fabric_flow_tracking.wan_ha_links`
                                       setting.

                                       Subclass of AvdModel.

                                """

                    class L3InterfacesItem(AvdModel):
                        """Subclass of AvdModel."""

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdList[StaticRoutesItem]):
                            """Subclass of AvdList with `StaticRoutesItem` items."""

                        StaticRoutes._item_type = StaticRoutesItem

                        class CvPathfinderInternetExit(AvdModel):
                            """Subclass of AvdModel."""

                            class PoliciesItem(AvdModel):
                                """Subclass of AvdModel."""

                                _fields: ClassVar[dict] = {"name": {"type": str}, "tunnel_interface_numbers": {"type": str}}
                                name: str
                                """Internet-exit policy name."""
                                tunnel_interface_numbers: str | None
                                """
                                Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                interface.
                                Examples: '1-3' or '100,200,300'
                                """

                                if TYPE_CHECKING:

                                    def __init__(
                                        self, *, name: str | UndefinedType = Undefined, tunnel_interface_numbers: str | None | UndefinedType = Undefined
                                    ) -> None:
                                        """
                                        PoliciesItem.


                                        Subclass of AvdModel.

                                        Args:
                                            name: Internet-exit policy name.
                                            tunnel_interface_numbers:
                                               Number range to use for Tunnel interfaces to an internet-exit service provider using this local
                                               interface.
                                               Examples: '1-3' or '100,200,300'

                                        """

                            class Policies(AvdIndexedList[str, PoliciesItem]):
                                """Subclass of AvdIndexedList with `PoliciesItem` items. Primary key is `name` (`str`)."""

                                _primary_key: ClassVar[str] = "name"

                            Policies._item_type = PoliciesItem

                            _fields: ClassVar[dict] = {"policies": {"type": Policies}}
                            policies: Policies
                            """
                            List of Internet-exit policies using this interface as exit.

                            Subclass of AvdIndexedList with
                            `PoliciesItem` items. Primary key is `name` (`str`).
                            """

                            if TYPE_CHECKING:

                                def __init__(self, *, policies: Policies | UndefinedType = Undefined) -> None:
                                    """
                                    CvPathfinderInternetExit.


                                    Subclass of AvdModel.

                                    Args:
                                        policies:
                                           List of Internet-exit policies using this interface as exit.

                                           Subclass of AvdIndexedList with
                                           `PoliciesItem` items. Primary key is `name` (`str`).

                                    """

                        class RxQueue(AvdModel):
                            """Subclass of AvdModel."""

                            class Workers(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            Workers._item_type = str

                            _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                            count: int | None
                            """
                            Number of receive queues.
                            The maximum value is determined by
                            `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                            `platform` set on this device.
                            """
                            workers: Workers
                            """Subclass of AvdList with `str` items."""
                            mode: Literal["shared", "exclusive"] | None
                            """Mode applicable to the workers."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    count: int | None | UndefinedType = Undefined,
                                    workers: Workers | UndefinedType = Undefined,
                                    mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    RxQueue.


                                    Subclass of AvdModel.

                                    Args:
                                        count:
                                           Number of receive queues.
                                           The maximum value is determined by
                                           `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                           `platform` set on this device.
                                        workers: Subclass of AvdList with `str` items.
                                        mode: Mode applicable to the workers.

                                    """

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "profile": {"type": str},
                            "name": {"type": str},
                            "description": {"type": str},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "speed": {"type": str},
                            "receive_bandwidth": {"type": int},
                            "transmit_bandwidth": {"type": int},
                            "peer": {"type": str},
                            "peer_interface": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "cv_pathfinder_internet_exit": {"type": CvPathfinderInternetExit},
                            "rx_queue": {"type": RxQueue},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        }
                        profile: str | None
                        """L3 interface profile name. Profile defined under `l3_interface_profiles`."""
                        name: str
                        """
                        Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                        For a
                        subinterface, the parent physical interface is automatically created.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set a default description will be configured with '[<peer>[
                        <peer_interface>]]'.
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_interfaces.public_ip`
                                  -> `l3_interfaces.ip_address`

                        The determined Public IP is used
                        by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        speed: str | None
                        """
                        Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                        <interface_speed>`.
                        """
                        receive_bandwidth: int | None
                        """
                        Maximum allowed receive bandwidth (download) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        transmit_bandwidth: int | None
                        """
                        Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                        This is currently used on
                        CVaaS to provide more information in the visualization.
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_interface: str | None
                        """The peer device interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdList with `StaticRoutesItem`
                        items.
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        cv_pathfinder_internet_exit: CvPathfinderInternetExit
                        """
                        PREVIEW: This key is in preview mode

                        Subclass of AvdModel.
                        """
                        rx_queue: RxQueue
                        """
                        Receive queue parameters for platform SFE interface profile.
                        This setting is ignored unless the
                        `platform_sfe_interface_profile.supported` is set as `true` under
                        `platform_settings.feature_support` for the `platform` set on this device.

                        Subclass of AvdModel.
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.EthernetInterfacesItem
                        """Custom structured config for the Ethernet interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                profile: str | None | UndefinedType = Undefined,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                speed: str | None | UndefinedType = Undefined,
                                receive_bandwidth: int | None | UndefinedType = Undefined,
                                transmit_bandwidth: int | None | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_interface: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                cv_pathfinder_internet_exit: CvPathfinderInternetExit | UndefinedType = Undefined,
                                rx_queue: RxQueue | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3InterfacesItem.


                                Subclass of AvdModel.

                                Args:
                                    profile: L3 interface profile name. Profile defined under `l3_interface_profiles`.
                                    name:
                                       Ethernet interface name like 'Ethernet2' or subinterface name like 'Ethernet2.42'.
                                       For a
                                       subinterface, the parent physical interface is automatically created.
                                    description:
                                       Interface description.
                                       If not set a default description will be configured with '[<peer>[
                                       <peer_interface>]]'.
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_interfaces.public_ip`
                                                 -> `l3_interfaces.ip_address`

                                       The determined Public IP is used
                                       by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    speed:
                                       Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                       <interface_speed>`.
                                    receive_bandwidth:
                                       Maximum allowed receive bandwidth (download) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    transmit_bandwidth:
                                       Maximum allowed transmit bandwidth (upload) in Mbps for this interface.
                                       This is currently used on
                                       CVaaS to provide more information in the visualization.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_interface: The peer device interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdList with `StaticRoutesItem`
                                       items.
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    cv_pathfinder_internet_exit:
                                       PREVIEW: This key is in preview mode

                                       Subclass of AvdModel.
                                    rx_queue:
                                       Receive queue parameters for platform SFE interface profile.
                                       This setting is ignored unless the
                                       `platform_sfe_interface_profile.supported` is set as `true` under
                                       `platform_settings.feature_support` for the `platform` set on this device.

                                       Subclass of AvdModel.
                                    raw_eos_cli: EOS CLI rendered directly on the interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Ethernet interface.

                                """

                    class L3Interfaces(AvdIndexedList[str, L3InterfacesItem]):
                        """Subclass of AvdIndexedList with `L3InterfacesItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3Interfaces._item_type = L3InterfacesItem

                    class L3PortChannelsItem(AvdModel):
                        """Subclass of AvdModel."""

                        class MemberInterfacesItem(AvdModel):
                            """Subclass of AvdModel."""

                            class RxQueue(AvdModel):
                                """Subclass of AvdModel."""

                                class Workers(AvdList[str]):
                                    """Subclass of AvdList with `str` items."""

                                Workers._item_type = str

                                _fields: ClassVar[dict] = {"count": {"type": int}, "workers": {"type": Workers}, "mode": {"type": str}}
                                count: int | None
                                """
                                Number of receive queues.
                                The maximum value is determined by
                                `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                `platform` set on this device.
                                """
                                workers: Workers
                                """Subclass of AvdList with `str` items."""
                                mode: Literal["shared", "exclusive"] | None
                                """Mode applicable to the workers."""

                                if TYPE_CHECKING:

                                    def __init__(
                                        self,
                                        *,
                                        count: int | None | UndefinedType = Undefined,
                                        workers: Workers | UndefinedType = Undefined,
                                        mode: Literal["shared", "exclusive"] | None | UndefinedType = Undefined,
                                    ) -> None:
                                        """
                                        RxQueue.


                                        Subclass of AvdModel.

                                        Args:
                                            count:
                                               Number of receive queues.
                                               The maximum value is determined by
                                               `platform_sfe_interface_profile.max_rx_queues` under `platform_settings.feature_support` for the
                                               `platform` set on this device.
                                            workers: Subclass of AvdList with `str` items.
                                            mode: Mode applicable to the workers.

                                        """

                            _fields: ClassVar[dict] = {
                                "name": {"type": str},
                                "description": {"type": str},
                                "peer": {"type": str},
                                "peer_interface": {"type": str},
                                "speed": {"type": str},
                                "rx_queue": {"type": RxQueue},
                                "structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                            }
                            name: str
                            """
                            Ethernet interface name like 'Ethernet2'.
                            Member interface cannot be subinterface.
                            """
                            description: str | None
                            """
                            Interface description for this member.
                            If not set, a default description will be configured with
                            '[<peer>[ <peer_interface>]]'.
                            """
                            peer: str | None
                            """
                            The peer device name. Used for description and documentation.
                            If not set, this inherits the peer
                            setting on the port-channel interface.
                            """
                            peer_interface: str | None
                            """The peer device interface. Used for description and documentation."""
                            speed: str | None
                            """
                            Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                            <interface_speed>`.
                            """
                            rx_queue: RxQueue
                            """
                            Receive queue parameters for platform SFE interface profile.
                            This setting is ignored unless the
                            `platform_sfe_interface_profile.supported` is set as `true` under
                            `platform_settings.feature_support` for the `platform` set on this device.

                            Subclass of AvdModel.
                            """
                            structured_config: EosCliConfigGen.EthernetInterfacesItem
                            """Custom structured config for the member ethernet interface."""

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    name: str | UndefinedType = Undefined,
                                    description: str | None | UndefinedType = Undefined,
                                    peer: str | None | UndefinedType = Undefined,
                                    peer_interface: str | None | UndefinedType = Undefined,
                                    speed: str | None | UndefinedType = Undefined,
                                    rx_queue: RxQueue | UndefinedType = Undefined,
                                    structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    MemberInterfacesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        name:
                                           Ethernet interface name like 'Ethernet2'.
                                           Member interface cannot be subinterface.
                                        description:
                                           Interface description for this member.
                                           If not set, a default description will be configured with
                                           '[<peer>[ <peer_interface>]]'.
                                        peer:
                                           The peer device name. Used for description and documentation.
                                           If not set, this inherits the peer
                                           setting on the port-channel interface.
                                        peer_interface: The peer device interface. Used for description and documentation.
                                        speed:
                                           Speed should be set in the format `<interface_speed>` or `forced <interface_speed>` or `auto
                                           <interface_speed>`.
                                        rx_queue:
                                           Receive queue parameters for platform SFE interface profile.
                                           This setting is ignored unless the
                                           `platform_sfe_interface_profile.supported` is set as `true` under
                                           `platform_settings.feature_support` for the `platform` set on this device.

                                           Subclass of AvdModel.
                                        structured_config: Custom structured config for the member ethernet interface.

                                    """

                        class MemberInterfaces(AvdIndexedList[str, MemberInterfacesItem]):
                            """Subclass of AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`)."""

                            _primary_key: ClassVar[str] = "name"

                        MemberInterfaces._item_type = MemberInterfacesItem

                        class Bgp(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"peer_as": {"type": str}, "ipv4_prefix_list_in": {"type": str}, "ipv4_prefix_list_out": {"type": str}}
                            peer_as: str
                            """
                            BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                            For asdot notation in
                            YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                            number.
                            """
                            ipv4_prefix_list_in: str | None
                            """
                            Prefix List Name. Accept routes for only these prefixes from the peer.
                            Required for wan interfaces.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """
                            ipv4_prefix_list_out: str | None
                            """
                            Prefix List Name. Advertise routes for only these prefixes.
                            If not specified, nothing would be
                            advertised.
                            The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    peer_as: str | UndefinedType = Undefined,
                                    ipv4_prefix_list_in: str | None | UndefinedType = Undefined,
                                    ipv4_prefix_list_out: str | None | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Bgp.


                                    Subclass of AvdModel.

                                    Args:
                                        peer_as:
                                           BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                           For asdot notation in
                                           YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                           number.
                                        ipv4_prefix_list_in:
                                           Prefix List Name. Accept routes for only these prefixes from the peer.
                                           Required for wan interfaces.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.
                                        ipv4_prefix_list_out:
                                           Prefix List Name. Advertise routes for only these prefixes.
                                           If not specified, nothing would be
                                           advertised.
                                           The specified prefix list name must exist in `ipv4_prefix_list_catalog`.

                                    """

                        class StaticRoutesItem(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"prefix": {"type": str}}
                            prefix: str
                            """IPv4_network/Mask."""

                            if TYPE_CHECKING:

                                def __init__(self, *, prefix: str | UndefinedType = Undefined) -> None:
                                    """
                                    StaticRoutesItem.


                                    Subclass of AvdModel.

                                    Args:
                                        prefix: IPv4_network/Mask.

                                    """

                        class StaticRoutes(AvdIndexedList[str, StaticRoutesItem]):
                            """Subclass of AvdIndexedList with `StaticRoutesItem` items. Primary key is `prefix` (`str`)."""

                            _primary_key: ClassVar[str] = "prefix"

                        StaticRoutes._item_type = StaticRoutesItem

                        class FlowTracking(AvdModel):
                            """Subclass of AvdModel."""

                            _fields: ClassVar[dict] = {"enabled": {"type": bool}, "name": {"type": str}}
                            enabled: bool | None
                            name: str | None
                            """Flow tracker name as defined in flow_tracking_settings."""

                            if TYPE_CHECKING:

                                def __init__(self, *, enabled: bool | None | UndefinedType = Undefined, name: str | None | UndefinedType = Undefined) -> None:
                                    """
                                    FlowTracking.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled: enabled
                                        name: Flow tracker name as defined in flow_tracking_settings.

                                    """

                        _fields: ClassVar[dict] = {
                            "name": {"type": str},
                            "description": {"type": str},
                            "mode": {"type": str, "default": "active"},
                            "member_interfaces": {"type": MemberInterfaces},
                            "ip_address": {"type": str},
                            "dhcp_ip": {"type": str},
                            "public_ip": {"type": str},
                            "encapsulation_dot1q_vlan": {"type": int},
                            "dhcp_accept_default_route": {"type": bool, "default": True},
                            "enabled": {"type": bool, "default": True},
                            "peer": {"type": str},
                            "peer_port_channel": {"type": str},
                            "peer_ip": {"type": str},
                            "bgp": {"type": Bgp},
                            "ipv4_acl_in": {"type": str},
                            "ipv4_acl_out": {"type": str},
                            "static_routes": {"type": StaticRoutes},
                            "qos_profile": {"type": str},
                            "wan_carrier": {"type": str},
                            "wan_circuit_id": {"type": str},
                            "connected_to_pathfinder": {"type": bool, "default": True},
                            "raw_eos_cli": {"type": str},
                            "flow_tracking": {"type": FlowTracking},
                            "structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        }
                        name: str
                        """
                        Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                        For a
                        Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                        """
                        description: str | None
                        """
                        Interface description.
                        If not set, a default description will be configured with '[<peer>[
                        <peer_port_channel>]]'.
                        """
                        mode: Literal["active", "passive", "on"]
                        """
                        Port-Channel mode.
                        Should not be set on Port-Channel subinterfaces.

                        Default value: `"active"`
                        """
                        member_interfaces: MemberInterfaces
                        """
                        Port-Channel member interfaces.
                        Should not be set on Port-Channel subinterfaces.

                        Subclass of
                        AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                        """
                        ip_address: str | None
                        """Node IPv4 address/Mask or 'dhcp'."""
                        dhcp_ip: str | None
                        """
                        When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                        IPv4 address
                        (without mask) to be allocated on the interface if known.
                        This is not rendered in the configuration
                        but can be used for substitution of 'interface_ip' in the Access-list
                        set under `ipv4_acl_in` and
                        `ipv4_acl_out`.
                        """
                        public_ip: str | None
                        """
                        Node IPv4 address (no mask).

                        This is used to get the public IP (if known) when the device is behind
                        NAT.
                        This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                        with the following preference:
                          `wan_route_servers.path_groups.interfaces.ip_address`
                              ->
                        `l3_port_channels.public_ip`
                                  -> `l3_port_channels.ip_address`

                        The determined Public IP is
                        used by WAN routers when peering with this interface.
                        """
                        encapsulation_dot1q_vlan: int | None
                        """
                        For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                        specified.
                        """
                        dhcp_accept_default_route: bool
                        """
                        Accept a default route from DHCP if `ip_address` is set to `dhcp`.

                        Default value: `True`
                        """
                        enabled: bool
                        """
                        Enable or Shutdown the interface.

                        Default value: `True`
                        """
                        peer: str | None
                        """The peer device name. Used for description and documentation."""
                        peer_port_channel: str | None
                        """The peer device port-channel interface. Used for description and documentation."""
                        peer_ip: str | None
                        """
                        The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                        and `ip` is an IP address.
                        """
                        bgp: Bgp
                        """
                        Enforce IPv4 BGP peering for the peer

                        Subclass of AvdModel.
                        """
                        ipv4_acl_in: str | None
                        """
                        Name of the IPv4 access-list to be assigned in the ingress direction.
                        The access-list must be
                        defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        Required
                        for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                        `wan_carriers`.
                        """
                        ipv4_acl_out: str | None
                        """
                        Name of the IPv4 Access-list to be assigned in the egress direction.
                        The access-list must be defined
                        under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                        """
                        static_routes: StaticRoutes
                        """
                        Configure IPv4 static routes pointing to `peer_ip`.

                        Subclass of AvdIndexedList with
                        `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                        """
                        qos_profile: str | None
                        """QOS service profile."""
                        wan_carrier: str | None
                        """
                        The WAN carrier this interface is connected to.
                        This is used to infer the path-groups in which this
                        interface should be configured.
                        Unless the carrier is marked as 'trusted' under `wan_carriers`,
                        `ipv4_acl_in` is also required on all WAN interfaces.
                        """
                        wan_circuit_id: str | None
                        """
                        The WAN circuit ID for this interface.
                        This is not rendered in the configuration but used for WAN
                        designs.
                        """
                        connected_to_pathfinder: bool
                        """
                        For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.

                        Default value: `True`
                        """
                        raw_eos_cli: str | None
                        """EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration."""
                        flow_tracking: FlowTracking
                        """
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                        setting.

                        Subclass of AvdModel.
                        """
                        structured_config: EosCliConfigGen.PortChannelInterfacesItem
                        """Custom structured config for the Port-Channel interface."""

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                name: str | UndefinedType = Undefined,
                                description: str | None | UndefinedType = Undefined,
                                mode: Literal["active", "passive", "on"] | UndefinedType = Undefined,
                                member_interfaces: MemberInterfaces | UndefinedType = Undefined,
                                ip_address: str | None | UndefinedType = Undefined,
                                dhcp_ip: str | None | UndefinedType = Undefined,
                                public_ip: str | None | UndefinedType = Undefined,
                                encapsulation_dot1q_vlan: int | None | UndefinedType = Undefined,
                                dhcp_accept_default_route: bool | UndefinedType = Undefined,
                                enabled: bool | UndefinedType = Undefined,
                                peer: str | None | UndefinedType = Undefined,
                                peer_port_channel: str | None | UndefinedType = Undefined,
                                peer_ip: str | None | UndefinedType = Undefined,
                                bgp: Bgp | UndefinedType = Undefined,
                                ipv4_acl_in: str | None | UndefinedType = Undefined,
                                ipv4_acl_out: str | None | UndefinedType = Undefined,
                                static_routes: StaticRoutes | UndefinedType = Undefined,
                                qos_profile: str | None | UndefinedType = Undefined,
                                wan_carrier: str | None | UndefinedType = Undefined,
                                wan_circuit_id: str | None | UndefinedType = Undefined,
                                connected_to_pathfinder: bool | UndefinedType = Undefined,
                                raw_eos_cli: str | None | UndefinedType = Undefined,
                                flow_tracking: FlowTracking | UndefinedType = Undefined,
                                structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            ) -> None:
                                """
                                L3PortChannelsItem.


                                Subclass of AvdModel.

                                Args:
                                    name:
                                       Port-Channel interface name like 'Port-Channel2' or subinterface name like 'Port-Channel2.42'.
                                       For a
                                       Port-Channel subinterface, the parent Port-Channel interface must be defined as well.
                                    description:
                                       Interface description.
                                       If not set, a default description will be configured with '[<peer>[
                                       <peer_port_channel>]]'.
                                    mode:
                                       Port-Channel mode.
                                       Should not be set on Port-Channel subinterfaces.
                                    member_interfaces:
                                       Port-Channel member interfaces.
                                       Should not be set on Port-Channel subinterfaces.

                                       Subclass of
                                       AvdIndexedList with `MemberInterfacesItem` items. Primary key is `name` (`str`).
                                    ip_address: Node IPv4 address/Mask or 'dhcp'.
                                    dhcp_ip:
                                       When the `ip_address` is `dhcp`, this optional field allows to indicate the expected
                                       IPv4 address
                                       (without mask) to be allocated on the interface if known.
                                       This is not rendered in the configuration
                                       but can be used for substitution of 'interface_ip' in the Access-list
                                       set under `ipv4_acl_in` and
                                       `ipv4_acl_out`.
                                    public_ip:
                                       Node IPv4 address (no mask).

                                       This is used to get the public IP (if known) when the device is behind
                                       NAT.
                                       This is only used for `wan_rr` routers (AutoVPN RRs and Pathfinders) to determine the Public IP
                                       with the following preference:
                                         `wan_route_servers.path_groups.interfaces.ip_address`
                                             ->
                                       `l3_port_channels.public_ip`
                                                 -> `l3_port_channels.ip_address`

                                       The determined Public IP is
                                       used by WAN routers when peering with this interface.
                                    encapsulation_dot1q_vlan:
                                       For subinterfaces the dot1q vlan is derived from the interface name by default, but can also be
                                       specified.
                                    dhcp_accept_default_route: Accept a default route from DHCP if `ip_address` is set to `dhcp`.
                                    enabled: Enable or Shutdown the interface.
                                    peer: The peer device name. Used for description and documentation.
                                    peer_port_channel: The peer device port-channel interface. Used for description and documentation.
                                    peer_ip:
                                       The peer device IPv4 address (no mask). Used as default route gateway if `set_default_route` is true
                                       and `ip` is an IP address.
                                    bgp:
                                       Enforce IPv4 BGP peering for the peer

                                       Subclass of AvdModel.
                                    ipv4_acl_in:
                                       Name of the IPv4 access-list to be assigned in the ingress direction.
                                       The access-list must be
                                       defined under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                       Required
                                       for all WAN interfaces (`wan_carrier` is set) unless the carrier is marked as 'trusted' under
                                       `wan_carriers`.
                                    ipv4_acl_out:
                                       Name of the IPv4 Access-list to be assigned in the egress direction.
                                       The access-list must be defined
                                       under `ipv4_acls` and supports field substitution for "interface_ip" and "peer_ip".
                                    static_routes:
                                       Configure IPv4 static routes pointing to `peer_ip`.

                                       Subclass of AvdIndexedList with
                                       `StaticRoutesItem` items. Primary key is `prefix` (`str`).
                                    qos_profile: QOS service profile.
                                    wan_carrier:
                                       The WAN carrier this interface is connected to.
                                       This is used to infer the path-groups in which this
                                       interface should be configured.
                                       Unless the carrier is marked as 'trusted' under `wan_carriers`,
                                       `ipv4_acl_in` is also required on all WAN interfaces.
                                    wan_circuit_id:
                                       The WAN circuit ID for this interface.
                                       This is not rendered in the configuration but used for WAN
                                       designs.
                                    connected_to_pathfinder: For a WAN interface (`wan_carrier` is set), allow to disable the static tunnel towards Pathfinders.
                                    raw_eos_cli: EOS CLI rendered directly on the Port-Channel interface in the final EOS configuration.
                                    flow_tracking:
                                       Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_port_channels`
                                       setting.

                                       Subclass of AvdModel.
                                    structured_config: Custom structured config for the Port-Channel interface.

                                """

                    class L3PortChannels(AvdIndexedList[str, L3PortChannelsItem]):
                        """Subclass of AvdIndexedList with `L3PortChannelsItem` items. Primary key is `name` (`str`)."""

                        _primary_key: ClassVar[str] = "name"

                    L3PortChannels._item_type = L3PortChannelsItem

                    class UnderlayMulticast(AvdModel):
                        """Subclass of AvdModel."""

                        class PimSm(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                            on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if also
                            enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_pim_sm`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable PIM sparse-mode on uplinks.
                            Requires node setting `underlay_multicast.pim_sm.enabled:
                            true` or, if unset, global `underlay_multicast_pim_sm: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                            Effective only when
                            node settings `underlay_multicast.pim_sm.uplinks: true`.

                            Subclass of AvdList with `str` items.
                            """
                            mlag: bool
                            """
                            Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    PimSm.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                                           on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if also
                                           enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_pim_sm`.
                                        uplinks:
                                           Enable/Disable PIM sparse-mode on uplinks.
                                           Requires node setting `underlay_multicast.pim_sm.enabled:
                                           true` or, if unset, global `underlay_multicast_pim_sm: true`
                                        uplink_interfaces:
                                           Limit PIM SM to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective only when
                                           node settings `underlay_multicast.pim_sm.uplinks: true`.

                                           Subclass of AvdList with `str` items.
                                        mlag: Configure PIM sparse-mode in the underlay on the MLAG L3 peer VLAN interface.

                                    """

                        class Static(AvdModel):
                            """Subclass of AvdModel."""

                            class UplinkInterfaces(AvdList[str]):
                                """Subclass of AvdList with `str` items."""

                            UplinkInterfaces._item_type = str

                            _fields: ClassVar[dict] = {
                                "enabled": {"type": bool},
                                "uplinks": {"type": bool, "default": True},
                                "uplink_interfaces": {"type": UplinkInterfaces},
                                "mlag": {"type": bool, "default": True},
                            }
                            enabled: bool | None
                            """
                            When enabled, configures multicast routing and by default configures static multicast in the
                            underlay on all:
                              - P2P uplink interfaces if enabled on uplink peer
                              - MLAG L3 peer interface if
                            also enabled on MLAG peer
                              - l3_edge and core interfaces
                            Overrides the global
                            `underlay_multicast_multicast`.
                            """
                            uplinks: bool
                            """
                            Enable/Disable static multicast on uplinks.
                            Requires node setting
                            `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`

                            Default value: `True`
                            """
                            uplink_interfaces: UplinkInterfaces
                            """
                            Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                            Effective
                            only when node settings `underlay_multicast.static.uplinks: true`.

                            Subclass of AvdList with `str`
                            items.
                            """
                            mlag: bool
                            """
                            Configure static multicast in the underlay on MLAG L3 peer interfacee.

                            Default value: `True`
                            """

                            if TYPE_CHECKING:

                                def __init__(
                                    self,
                                    *,
                                    enabled: bool | None | UndefinedType = Undefined,
                                    uplinks: bool | UndefinedType = Undefined,
                                    uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                                    mlag: bool | UndefinedType = Undefined,
                                ) -> None:
                                    """
                                    Static.


                                    Subclass of AvdModel.

                                    Args:
                                        enabled:
                                           When enabled, configures multicast routing and by default configures static multicast in the
                                           underlay on all:
                                             - P2P uplink interfaces if enabled on uplink peer
                                             - MLAG L3 peer interface if
                                           also enabled on MLAG peer
                                             - l3_edge and core interfaces
                                           Overrides the global
                                           `underlay_multicast_multicast`.
                                        uplinks:
                                           Enable/Disable static multicast on uplinks.
                                           Requires node setting
                                           `underlay_multicast.static.enabled: true` or, if unset, global `underlay_multicast_static: true`
                                        uplink_interfaces:
                                           Limit static multicast to the uplink_interfaces in this list. All interfaces if unset.
                                           Effective
                                           only when node settings `underlay_multicast.static.uplinks: true`.

                                           Subclass of AvdList with `str`
                                           items.
                                        mlag: Configure static multicast in the underlay on MLAG L3 peer interfacee.

                                    """

                        _fields: ClassVar[dict] = {"pim_sm": {"type": PimSm}, "static": {"type": Static}}
                        pim_sm: PimSm
                        """Subclass of AvdModel."""
                        static: Static
                        """Subclass of AvdModel."""

                        if TYPE_CHECKING:

                            def __init__(self, *, pim_sm: PimSm | UndefinedType = Undefined, static: Static | UndefinedType = Undefined) -> None:
                                """
                                UnderlayMulticast.


                                Subclass of AvdModel.

                                Args:
                                    pim_sm: Subclass of AvdModel.
                                    static: Subclass of AvdModel.

                                """

                    class DigitalTwin(AvdModel):
                        """Subclass of AvdModel."""

                        _fields: ClassVar[dict] = {"act_os_version": {"type": str}, "mgmt_ip": {"type": str}, "act_internet_access": {"type": bool}}
                        act_os_version: str | None
                        """
                        Desired ACT Digital Twin OS version.
                        Overrides global `digital_twin.fabric.act_os_version` flag.
                        """
                        mgmt_ip: str | None
                        """Desired management interface IPv4 address."""
                        act_internet_access: bool | None
                        """
                        Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                        This option
                        applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                        types.
                        ACT does not provide direct Internet access to cloudeos or veos devices by default.
                        Overrides
                        global `digital_twin.fabric.act_internet_access` flag.
                        """

                        if TYPE_CHECKING:

                            def __init__(
                                self,
                                *,
                                act_os_version: str | None | UndefinedType = Undefined,
                                mgmt_ip: str | None | UndefinedType = Undefined,
                                act_internet_access: bool | None | UndefinedType = Undefined,
                            ) -> None:
                                """
                                DigitalTwin.


                                Subclass of AvdModel.

                                Args:
                                    act_os_version:
                                       Desired ACT Digital Twin OS version.
                                       Overrides global `digital_twin.fabric.act_os_version` flag.
                                    mgmt_ip: Desired management interface IPv4 address.
                                    act_internet_access:
                                       Specifies if the ACT Digital Twin device is deployed with direct access to the Internet.
                                       This option
                                       applies only to the 'cloudeos' and 'veos' node types and will be ignored for all other ACT node
                                       types.
                                       ACT does not provide direct Internet access to cloudeos or veos devices by default.
                                       Overrides
                                       global `digital_twin.fabric.act_internet_access` flag.

                                """

                    _fields: ClassVar[dict] = {
                        "name": {"type": str},
                        "downlink_pools": {"type": DownlinkPools},
                        "id": {"type": int},
                        "platform": {"type": str},
                        "mac_address": {"type": str},
                        "system_mac_address": {"type": str},
                        "serial_number": {"type": str},
                        "rack": {"type": str},
                        "mgmt_ip": {"type": str},
                        "mgmt_gateway": {"type": str},
                        "ipv6_mgmt_ip": {"type": str},
                        "ipv6_mgmt_gateway": {"type": str},
                        "mgmt_interface": {"type": str},
                        "link_tracking": {"type": LinkTracking},
                        "lacp_port_id_range": {"type": LacpPortIdRange},
                        "always_configure_ip_routing": {"type": bool, "default": False},
                        "raw_eos_cli": {"type": str},
                        "structured_config": {"type": EosCliConfigGen},
                        "uplink_type": {"type": str},
                        "uplink_ipv4_pool": {"type": str},
                        "uplink_ipv6_pool": {"type": str},
                        "uplink_interfaces": {"type": UplinkInterfaces},
                        "uplink_switch_interfaces": {"type": UplinkSwitchInterfaces},
                        "uplink_switches": {"type": UplinkSwitches},
                        "uplink_interface_speed": {"type": str},
                        "uplink_switch_interface_speed": {"type": str},
                        "uplink_mtu": {"type": int},
                        "max_uplink_switches": {"type": int},
                        "max_parallel_uplinks": {"type": int, "default": 1},
                        "uplink_bfd": {"type": bool, "default": False},
                        "uplink_native_vlan": {"type": int},
                        "uplink_ptp": {"type": UplinkPtp},
                        "uplink_macsec": {"type": UplinkMacsec},
                        "uplink_port_channel_id": {"type": int},
                        "uplink_switch_port_channel_id": {"type": int},
                        "uplink_structured_config": {"type": dict},
                        "uplink_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "uplink_switch_ethernet_structured_config": {"type": EosCliConfigGen.EthernetInterfacesItem},
                        "uplink_switch_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_port_channel_structured_config": {"type": EosCliConfigGen.PortChannelInterfacesItem},
                        "mlag_peer_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "mlag_peer_l3_vlan_structured_config": {"type": EosCliConfigGen.VlanInterfacesItem},
                        "short_esi": {"type": str},
                        "isis_system_id_prefix": {"type": str},
                        "isis_maximum_paths": {"type": int},
                        "is_type": {"type": str},
                        "node_sid_base": {"type": int, "default": 0},
                        "loopback_ipv4_pool": {"type": str},
                        "loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv4_pool": {"type": str},
                        "vtep_loopback_ipv6_pool": {"type": str},
                        "vtep_loopback_ipv4_address": {"type": str},
                        "vtep_loopback_ipv6_address": {"type": str},
                        "loopback_ipv4_offset": {"type": int, "default": 0},
                        "router_id_pool": {"type": str},
                        "loopback_ipv6_pool": {"type": str},
                        "loopback_ipv6_offset": {"type": int, "default": 0},
                        "vtep": {"type": bool},
                        "vtep_loopback": {"type": str},
                        "bgp_as": {"type": str},
                        "bgp_defaults": {"type": BgpDefaults},
                        "evpn_role": {"type": str},
                        "evpn_route_servers": {"type": EvpnRouteServers},
                        "evpn_services_l2_only": {"type": bool, "default": False},
                        "filter": {"type": Filter},
                        "igmp_snooping_enabled": {"type": bool},
                        "evpn_gateway": {"type": EvpnGateway},
                        "ipvpn_gateway": {"type": IpvpnGateway},
                        "mlag": {"type": bool, "default": True},
                        "mlag_dual_primary_detection": {"type": bool, "default": False},
                        "mlag_ibgp_origin_incomplete": {"type": bool, "default": True},
                        "mlag_interfaces": {"type": MlagInterfaces},
                        "mlag_interfaces_speed": {"type": str},
                        "mlag_peer_l3_vlan": {"type": int, "default": 4093},
                        "mlag_peer_l3_ipv4_pool": {"type": str},
                        "mlag_peer_l3_ipv6_pool": {"type": str},
                        "mlag_peer_vlan": {"type": int, "default": 4094},
                        "mlag_peer_link_allowed_vlans": {"type": str},
                        "mlag_peer_address_family": {"type": str, "default": "ipv4"},
                        "mlag_peer_ipv4_pool": {"type": str},
                        "mlag_peer_ipv6_pool": {"type": str},
                        "mlag_port_channel_id": {"type": int},
                        "mlag_domain_id": {"type": str},
                        "spanning_tree_mode": {"type": str},
                        "spanning_tree_priority": {"type": int, "default": 32768},
                        "spanning_tree_root_super": {"type": bool, "default": False},
                        "spanning_tree_mst_pvst_boundary": {"type": bool},
                        "spanning_tree_port_id_allocation_port_channel_range": {"type": EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange},
                        "virtual_router_mac_address": {"type": str},
                        "inband_mgmt_interface": {"type": str},
                        "inband_mgmt_vlan": {"type": int, "default": 4092},
                        "inband_mgmt_subnet": {"type": str},
                        "inband_mgmt_subnet_offset": {"type": int, "default": 0},
                        "inband_mgmt_ip": {"type": str},
                        "inband_mgmt_gateway": {"type": str},
                        "inband_mgmt_ipv6_address": {"type": str},
                        "inband_mgmt_ipv6_subnet": {"type": str},
                        "inband_mgmt_ipv6_gateway": {"type": str},
                        "inband_mgmt_description": {"type": str, "default": "Inband Management"},
                        "inband_mgmt_vlan_name": {"type": str, "default": "INBAND_MGMT"},
                        "inband_mgmt_vrf": {"type": str, "default": "default"},
                        "inband_mgmt_mtu": {"type": int, "default": 1500},
                        "inband_ztp": {"type": bool, "default": False},
                        "inband_ztp_lacp_fallback_delay": {"type": int, "default": 30},
                        "mpls_overlay_role": {"type": str},
                        "overlay_address_families": {"type": OverlayAddressFamilies},
                        "mpls_route_reflectors": {"type": MplsRouteReflectors},
                        "bgp_cluster_id": {"type": str},
                        "ptp": {"type": Ptp},
                        "wan_role": {"type": str},
                        "cv_pathfinder_transit_mode": {"type": str},
                        "cv_pathfinder_region": {"type": str},
                        "cv_pathfinder_site": {"type": str},
                        "wan_ha": {"type": WanHa},
                        "dps_mss_ipv4": {"type": str, "default": "auto"},
                        "l3_interfaces": {"type": L3Interfaces},
                        "l3_port_channels": {"type": L3PortChannels},
                        "data_plane_cpu_allocation_max": {"type": int},
                        "flow_tracker_type": {"type": str},
                        "underlay_multicast": {"type": UnderlayMulticast},
                        "campus": {"type": str},
                        "campus_pod": {"type": str},
                        "campus_access_pod": {"type": str},
                        "cv_tags_topology_type": {"type": str},
                        "digital_twin": {"type": DigitalTwin},
                    }
                    name: str
                    """The Node Name is used as "hostname"."""
                    downlink_pools: DownlinkPools
                    """
                    IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                    with `uplink_ipv4_pool` set on the downlink switch.

                    Subclass of AvdList with `DownlinkPoolsItem`
                    items.
                    """
                    id: int | None
                    """Unique identifier used for IP addressing and other algorithms."""
                    platform: str | None
                    """Arista platform family."""
                    mac_address: str | None
                    """Leverage to document management interface mac address."""
                    system_mac_address: str | None
                    """
                    System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                    Set to the same MAC address as
                    available in "show version" on the device.
                    "system_mac_address" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    serial_number: str | None
                    """
                    Set to the Serial Number of the device.
                    Only used for documentation purpose in the fabric
                    documentation and part of the structured_config.
                    "serial_number" can also be set directly as a
                    hostvar.
                    If both are set, the setting under node type settings takes precedence.
                    """
                    rack: str | None
                    """Rack that the switch is located in (only used in snmp_settings location)."""
                    mgmt_ip: str | None
                    """Node management interface IPv4 address."""
                    mgmt_gateway: str | None
                    """
                    This key sets the management gateway for the device. It takes precedence over the global
                    `mgmt_gateway`.
                    """
                    ipv6_mgmt_ip: str | None
                    """Node management interface IPv6 address."""
                    ipv6_mgmt_gateway: str | None
                    """
                    This key sets the ipv6 management gateway for the device. It takes precedence over the global
                    `ipv6_mgmt_gateway`.
                    """
                    mgmt_interface: str | None
                    """
                    Management Interface Name.
                    Default -> platform_management_interface -> mgmt_interface ->
                    "Management1".
                    """
                    link_tracking: LinkTracking
                    """
                    This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                    the upstream interfaces.
                    Useful in EVPN multhoming designs.


                    Subclass of AvdModel.
                    """
                    lacp_port_id_range: LacpPortIdRange
                    """
                    This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                    number of nodes in the "node_group".
                    Unique LACP port-id ranges are recommended for EVPN Multihoming
                    designs.


                    Subclass of AvdModel.
                    """
                    always_configure_ip_routing: bool
                    """
                    Force configuration of "ip routing" even on L2 devices.
                    Use this to retain behavior of AVD versions
                    below 4.0.0.

                    Default value: `False`
                    """
                    raw_eos_cli: str | None
                    """EOS CLI rendered directly on the root level of the final EOS configuration."""
                    structured_config: EosCliConfigGen
                    """Custom structured config for eos_cli_config_gen."""
                    uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None
                    """
                    Override the default `uplink_type` set at the `node_type_key` level.
                    `uplink_type` must be "p2p" if
                    `vtep` or `underlay_router` is true for the `node_type_key` definition.
                    """
                    uplink_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    IPv4
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    IPv6
                    subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                    uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                    """
                    uplink_interfaces: UplinkInterfaces
                    """
                    Local uplink interfaces.
                    Each list item supports range syntax that can be expanded into a list of
                    interfaces.
                    If uplink_interfaces is not defined, platform-specific defaults (defined under
                    default_interfaces) will be used instead.
                    Please note that default_interfaces are not defined by
                    default, you should define these yourself.


                    Subclass of AvdList with `str` items.
                    """
                    uplink_switch_interfaces: UplinkSwitchInterfaces
                    """
                    Interfaces located on uplink switches.

                    Subclass of AvdList with `str` items.
                    """
                    uplink_switches: UplinkSwitches
                    """Subclass of AvdList with `str` items."""
                    uplink_interface_speed: str | None
                    """
                    Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                    (Uplink switch
                    interface speed can be overridden with `uplink_switch_interface_speed`).
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_switch_interface_speed: str | None
                    """
                    Set point-to-Point interface speed for the uplink switch interface only.
                    Speed should be set in the
                    format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                    """
                    uplink_mtu: int | None
                    """Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting."""
                    max_uplink_switches: int | None
                    """
                    Maximum number of uplink switches.
                    Changing this value may change IP Addressing on uplinks.
                    Can be
                    used to reserve IP space for future expansions.
                    """
                    max_parallel_uplinks: int
                    """
                    Number of parallel links towards uplink switches.
                    Changing this value may change interface naming on
                    uplinks (and corresponding downlinks).
                    Can be used to reserve interfaces for future parallel
                    uplinks.

                    Default value: `1`
                    """
                    uplink_bfd: bool
                    """
                    Enable bfd on uplink interfaces.

                    Default value: `False`
                    """
                    uplink_native_vlan: int | None
                    """
                    Only applicable to switches with layer-2 port-channel uplinks.
                    A suspended (disabled) vlan will be
                    created in both ends of the link unless the vlan is defined under network services.
                    By default the
                    uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                    """
                    uplink_ptp: UplinkPtp
                    """
                    Enable PTP on all infrastructure links.

                    Subclass of AvdModel.
                    """
                    uplink_macsec: UplinkMacsec
                    """
                    Enable MacSec on all uplinks.

                    Subclass of AvdModel.
                    """
                    uplink_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink Port-channel
                    ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                    For
                    example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [ Eth11/1, Eth22/1 ] -> ID 111
                    For
                    MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                    This
                    option overrides the default behavior and statically sets the local Port-channel ID.
                    Note! Make sure
                    the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                    value.
                    """
                    uplink_switch_port_channel_id: int | None
                    """
                    Only applicable for L2 switches with `uplink_type: port-channel`.
                    By default the uplink switch Port-
                    channel ID will be set to the number of the first interface defined under
                    `uplink_switch_interfaces`.
                    For example:
                      member ports [ Eth22, Eth23 ] -> ID 22
                      member ports [
                    Eth11/1, Eth22/1 ] -> ID 111
                    For MLAG port-channels ID will be based on the lowest member interface
                    on the first MLAG switch.
                    This option overrides the default behavior and statically sets the Port-
                    channel ID on the uplink switch.
                    Note! Make sure the ID is unique and does not overlap with
                    autogenerated Port-channel IDs in the Network Services.
                    Note! For MLAG pairs the ID must be between
                    1 and 2000 and both MLAG switches must have the same value.
                    """
                    uplink_structured_config: dict
                    """
                    Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                    When
                    uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                    for eos_cli_config_gen overrides the settings on the ethernet interface level.
                    When uplink_type ==
                    "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                    eos_cli_config_gen overrides the settings on the port-channel interface level.
                    "uplink_structured_config" is applied after "structured_config", so it can override
                    "structured_config" defined on node-level.
                    Note! The content of this dictionary is _not_ validated
                    by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                    """
                    uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_interfaces`."""
                    uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """Custom structured config applied to the uplink Port-Channel when using port-channel uplinks."""
                    uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem
                    """Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`."""
                    uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                    channel uplinks.
                    """
                    mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem
                    """
                    Custom structured config applied to MLAG peer link port-channel id.
                    Added under
                    port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the
                    port-channel interface level.
                    "mlag_port_channel_structured_config" is applied after
                    "structured_config", so it can override "structured_config" defined on node-level.
                    """
                    mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                    override "structured_config" defined on node-level.
                    """
                    mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem
                    """
                    Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                    Added under
                    vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                    Overrides the settings on the vlan
                    interface level.
                    "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                    can override "structured_config" defined on node-level.
                    """
                    short_esi: str | None
                    """
                    short_esi only valid for l2leaf devices using port-channel uplink.
                    Setting short_esi to "auto"
                    generates the short_esi automatically using a hash of configuration elements.
                    < 0000:0000:0000 |
                    auto >.
                    """
                    isis_system_id_prefix: str | None
                    """(4.4 hexadecimal)."""
                    isis_maximum_paths: int | None
                    """Number of path to configure in ECMP for ISIS."""
                    is_type: Literal["level-1-2", "level-1", "level-2"] | None
                    """Overrides `isis_default_is_type`."""
                    node_sid_base: int
                    """
                    Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.

                    Default value: `0`
                    """
                    loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for Loopback0.
                    When set, it takes precedence over `loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                    """
                    vtep_loopback_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv4_offset'.
                    """
                    vtep_loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for VTEP-Loopback will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    vtep_loopback_ipv4_address: str | None
                    """
                    IPv4 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv4_pool`.
                    Note: AVD does not check for validity of the IPv4 address and does not
                    catch duplicates.
                    """
                    vtep_loopback_ipv6_address: str | None
                    """
                    IPv6 address without mask for VTEP-Loopback.
                    When set, it takes precedence over
                    `vtep_loopback_ipv6_pool`.
                    Note: AVD does not check for validity of the IPv6 address and does not
                    catch duplicates.
                    """
                    loopback_ipv4_offset: int
                    """
                    Offset all assigned loopback IP addresses.
                    Required when the 'loopback_ipv4_pool' is the same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    router_id_pool: str | None
                    """
                    Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                    router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                    will not exist on the device.
                    """
                    loopback_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                    address used for Loopback0 will be derived from this pool based on the node id and
                    'loopback_ipv6_offset'.
                    """
                    loopback_ipv6_offset: int
                    """
                    Offset all assigned loopback IPv6 addresses.
                    Required when the 'loopback_ipv6_pool' is same for 2
                    different node_types (like spine and l3leaf) to avoid overlapping IPs.
                    For example, set the minimum
                    offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.

                    Default value: `0`
                    """
                    vtep: bool | None
                    """
                    Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                    Overrides VTEP
                    setting inherited from node_type_keys.
                    """
                    vtep_loopback: str | None
                    """Set VXLAN source interface."""
                    bgp_as: str | None
                    """
                    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                    For asdot notation in
                    YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                    number.
                    Required with eBGP.
                    """
                    bgp_defaults: BgpDefaults
                    """
                    List of EOS commands to apply to BGP daemon.

                    Subclass of AvdList with `str` items.
                    """
                    evpn_role: Literal["client", "server", "none"] | None
                    """
                    Acting role in EVPN control plane.
                    Default is set in node_type definition from node_type_keys.
                    """
                    evpn_route_servers: EvpnRouteServers
                    """
                    List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                    Subclass of AvdList with `str`
                    items.
                    """
                    evpn_services_l2_only: bool
                    """
                    Possibility to prevent configuration of Tenant VRFs and SVIs.
                    Override node definition
                    "network_services_l3" from node_type_keys.
                    This allows support for centralized routing.

                    Default value: `False`
                    """
                    filter: Filter
                    """
                    Filter L3 and L2 network services based on tenant and tags (and operation filter).
                    If filter is not
                    defined it will default to all.


                    Subclass of AvdModel.
                    """
                    igmp_snooping_enabled: bool | None
                    """Activate or deactivate IGMP snooping on device level."""
                    evpn_gateway: EvpnGateway
                    """
                    Node is acting as EVPN Multi-Domain Gateway.
                    New BGP peer-group is generated between EVPN GWs in
                    different domains or between GWs and Route Servers.
                    Name can be changed under
                    "bgp_peer_groups.evpn_overlay_core" variable.
                    L3 rechability for different EVPN GWs must be already
                    in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                    same Ansible inventory.


                    Subclass of AvdModel.
                    """
                    ipvpn_gateway: IpvpnGateway
                    """
                    Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                    this is "bgp_peer_groups.ipvpn_gateway_peers".
                    L3 Reachability is required for this to work, the
                    preferred method to establish underlay connectivity is to use core_interfaces.


                    Subclass of
                    AvdModel.
                    """
                    mlag: bool
                    """
                    Enable / Disable auto MLAG, when two nodes are defined in node group.

                    Default value: `True`
                    """
                    mlag_dual_primary_detection: bool
                    """
                    Enable / Disable MLAG dual primary detection.

                    Default value: `False`
                    """
                    mlag_ibgp_origin_incomplete: bool
                    """
                    Set origin of routes received from MLAG iBGP peer to incomplete.
                    The purpose is to optimize routing
                    for leaf loopbacks from spine perspective and
                    avoid suboptimal routing via peerlink for control
                    plane traffic.

                    Default value: `True`
                    """
                    mlag_interfaces: MlagInterfaces
                    """
                    Each list item supports range syntax that can be expanded into a list of interfaces.
                    Required when
                    MLAG leafs are present in the topology.


                    Subclass of AvdList with `str` items.
                    """
                    mlag_interfaces_speed: str | None
                    """
                    Set MLAG interface speed.
                    Speed should be set in the format `<interface_speed>` or `forced
                    <interface_speed>` or `auto <interface_speed>`.
                    """
                    mlag_peer_l3_vlan: int
                    """
                    Underlay L3 peering SVI interface id.
                    If set to 0 or the same vlan as mlag_peer_vlan, the
                    mlag_peer_vlan will be used for L3 peering.

                    Default value: `4093`
                    """
                    mlag_peer_l3_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_l3_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                    MLAG switch.
                    Required when MLAG leafs present in topology and they are using a separate L3 peering
                    VLAN.
                    """
                    mlag_peer_vlan: int
                    """
                    MLAG Peer Link (control link) SVI interface id.

                    Default value: `4094`
                    """
                    mlag_peer_link_allowed_vlans: str | None
                    mlag_peer_address_family: Literal["ipv4", "ipv6"]
                    """
                    IP address family used to establish MLAG Peer Link (control link).
                    `ipv6` requires EOS version
                    4.31.1F or higher.
                    Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                    (ex. `mlag_peer_l3_vlan` set to 4094).

                    Default value: `"ipv4"`
                    """
                    mlag_peer_ipv4_pool: str | None
                    """
                    Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                    The IPv4
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                    """
                    mlag_peer_ipv6_pool: str | None
                    """
                    Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                    The IPv6
                    address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                    first MLAG switch.
                    Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                    """
                    mlag_port_channel_id: int | None
                    """
                    If not set, the mlag port-channel id is generated based on the digits of the first interface present
                    in 'mlag_interfaces'.
                    Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                    999999 > for EOS >= 4.25.0F.
                    """
                    mlag_domain_id: str | None
                    """MLAG Domain ID. If not set the node group name (Set with "group" key) will be used."""
                    spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None
                    spanning_tree_priority: int
                    """
                    Spanning-tree priority configured for the selected mode.
                    For `rapid-pvst` the priority can also be
                    set per VLAN under network services.

                    Default value: `32768`
                    """
                    spanning_tree_root_super: bool
                    """Default value: `False`"""
                    spanning_tree_mst_pvst_boundary: bool | None
                    """Enable MST PVST border ports."""
                    spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                    """Specify range of port-ids to reserve for port-channels."""
                    virtual_router_mac_address: str | None
                    """Virtual router mac address for anycast gateway."""
                    inband_mgmt_interface: str | None
                    """
                    Pointer to interface used for inband management.
                    All configuration must be done using other data
                    models like network services or structured_config.
                    'inband_mgmt_interface' is only used to refer to
                    this interface as source in various management protocol settings (future feature).

                    On L2 switches,
                    this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                    """
                    inband_mgmt_vlan: int
                    """
                    VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                    uplinks).
                    When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                    switch as well as all 'uplink_switches'.
                    When using 'inband_mgmt_ip' the VLAN and SVI will only be
                    created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                    created using network services data models.

                    Default value: `4092`
                    """
                    inband_mgmt_subnet: str | None
                    """
                    Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                    ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      : <subnet> +
                    2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       :
                    <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                    GW on l2leafs : <subnet> + 1
                    Assign range
                    larger than total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ip' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_subnet_offset: int
                    """
                    Offset value to adjust the calculated inband management IP address within the subnet.
                    The assigned
                    IP will be computed by adding this offset to the device ID.

                    Default value: `0`
                    """
                    inband_mgmt_ip: str | None
                    """
                    IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                    If this is set the
                    VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN and SVI on
                    the parent switches must be created using network services data models.

                    This setting is applicable
                    to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                    is derived from 'inband_mgmt_subnet' if set.

                    This setting is applicable to L2 switches (switches
                    using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_address: str | None
                    """
                    IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                    This overrides
                    'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                    If this
                    is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                    The VLAN
                    and SVI on the parent switches must be created using network services data models.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_subnet: str | None
                    """
                    Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                    as uplinks).
                    Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                    on ARP.
                    This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                    extension.
                    SVI IP address will be assigned as follows:
                    virtual-router: <subnet> + 1
                    l3leaf A      :
                    <subnet> + 2 (same IP on all l3leaf A)
                    l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                    l2leafs       : <subnet> + 3 + <l2leaf id>
                    GW on l2leafs : <subnet> + 1
                    Assign range larger than
                    total l2leafs + 5

                    Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_ipv6_gateway: str | None
                    """
                    Default gateway configured in the 'inband_mgmt_vrf'.
                    Used when `inband_mgmt_ipv6_address` is set.
                    Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                    This setting is
                    applicable to L2 switches (switches using port-channel trunks as uplinks).
                    """
                    inband_mgmt_description: str
                    """
                    Description configured on the Inband Management SVI.

                    This setting is only applied on the devices
                    where it is set, it does not automatically affect any parent/child devices configuration, so it must
                    be set on each applicable node/node-group/node-type as needed.

                    Default value: `"Inband Management"`
                    """
                    inband_mgmt_vlan_name: str
                    """
                    Name configured on the Inband Management VLAN.
                    This setting is only applied on the devices where it
                    is set, it does not automatically affect any parent/child devices configuration, so it must be set
                    on each applicable node/node-group/node-type as needed.

                    Default value: `"INBAND_MGMT"`
                    """
                    inband_mgmt_vrf: str
                    """
                    VRF configured on the Inband Management Interface.
                    The VRF is created if not already created by
                    other means.
                    This setting is only applied on the devices where it is set, it does not automatically
                    affect any parent/child devices configuration, so it must be set on each applicable node/node-
                    group/node-type as needed.

                    Default value: `"default"`
                    """
                    inband_mgmt_mtu: int
                    """
                    MTU configured on the Inband Management Interface.
                    This setting is only applied on the devices where
                    it is set, it does not automatically affect any parent/child devices configuration, so it must be
                    set on each applicable node/node-group/node-type as needed.

                    Default value: `1500`
                    """
                    inband_ztp: bool
                    """
                    Enable to configure upstream device with proper configuration to allow downstream devices to be
                    Zero-Touch-Provisioned over the uplink interfaces.
                    For L2 devices this setting also requires that
                    the `inband_mgmt_vlan` is set for the node.

                    PREVIEW: Support for L3 devices is marked as "preview",
                    meaning the data models or generated configuration can change at any time.

                    Default value: `False`
                    """
                    inband_ztp_lacp_fallback_delay: int
                    """
                    Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                    ZTP node.
                    This setting also requires that `inband_ztp` is set for the node.

                    Default value: `30`
                    """
                    mpls_overlay_role: Literal["client", "server", "none"] | None
                    """
                    Set the default mpls overlay role.
                    Acting role in overlay control plane.
                    """
                    overlay_address_families: OverlayAddressFamilies
                    """
                    Set the default overlay address families.


                    Subclass of AvdList with `str` items.
                    """
                    mpls_route_reflectors: MplsRouteReflectors
                    """
                    List of inventory hostname acting as MPLS route-reflectors.

                    Subclass of AvdList with `str` items.
                    """
                    bgp_cluster_id: str | None
                    """Set BGP cluster id."""
                    ptp: Ptp
                    """Subclass of AvdModel."""
                    wan_role: Literal["client", "server"] | None
                    """
                    Override the default WAN role.

                    This is used both for AutoVPN and Pathfinder designs.
                    That means if
                    `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                    `server` indicates that the router is a
                    route-reflector.
                    """
                    cv_pathfinder_transit_mode: Literal["region", "zone"] | None
                    """
                    Configure the transit mode for a WAN client for CV Pathfinder designs
                    only when the `wan_mode` root
                    key is set to `cv_pathfinder`.

                    'zone' is currently not supported.
                    """
                    cv_pathfinder_region: str | None
                    """
                    The CV Pathfinder region name.
                    This key is required for WAN routers but optional for pathfinders.
                    The region name must be defined under 'cv_pathfinder_regions'.
                    """
                    cv_pathfinder_site: str | None
                    """
                    The CV Pathfinder site name.
                    This key is required for WAN routers but optional for pathfinders.
                    For
                    WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                    relevant region under 'cv_pathfinder_regions'.
                    For pathfinders without `cv_pathfinder_region` set,
                    the site must be defined under `cv_pathfinder_global_sites`.
                    """
                    wan_ha: WanHa
                    """
                    The key is supported only if `wan_mode` == `cv-pathfinder`.
                    AutoVPN support is still to be
                    determined.

                    Maximum 2 devices supported by group for HA.

                    Subclass of AvdModel.
                    """
                    dps_mss_ipv4: str
                    """
                    IPv4 MSS value configured under "router path-selection" on WAN Devices.

                    Default value: `"auto"`
                    """
                    l3_interfaces: L3Interfaces
                    """
                    L3 Interfaces to configure on the node.

                    Subclass of AvdIndexedList with `L3InterfacesItem` items.
                    Primary key is `name` (`str`).
                    """
                    l3_port_channels: L3PortChannels
                    """
                    L3 Port-Channel interfaces to configure on the node.

                    Subclass of AvdIndexedList with
                    `L3PortChannelsItem` items. Primary key is `name` (`str`).
                    """
                    data_plane_cpu_allocation_max: int | None
                    """
                    Set the maximum number of CPU used for the data plane.
                    This setting is useful on virtual Route
                    Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                    """
                    flow_tracker_type: Literal["sampled", "hardware"] | None
                    """
                    Set the flow tracker type.
                    Override the `default_flow_tracker_type`` set at the `node_type_key`
                    level.
                    `default_flow_tracker_type` default value is `sampled`.
                    """
                    underlay_multicast: UnderlayMulticast
                    """Subclass of AvdModel."""
                    campus: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    campus_access_pod: str | None
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Name of the campus access pod. Used to generate CloudVision device tags with the
                    `generate_cv_tags.campus_fabric` feature.
                    """
                    cv_tags_topology_type: str | None
                    """
                    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                    "edge" or "member-leaf".
                    """
                    digital_twin: DigitalTwin
                    """
                    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                    change at any time.
                    Set the OS version and management IP address for the digital twin of the
                    associated node(s).

                    Subclass of AvdModel.
                    """

                    if TYPE_CHECKING:

                        def __init__(
                            self,
                            *,
                            name: str | UndefinedType = Undefined,
                            downlink_pools: DownlinkPools | UndefinedType = Undefined,
                            id: int | None | UndefinedType = Undefined,
                            platform: str | None | UndefinedType = Undefined,
                            mac_address: str | None | UndefinedType = Undefined,
                            system_mac_address: str | None | UndefinedType = Undefined,
                            serial_number: str | None | UndefinedType = Undefined,
                            rack: str | None | UndefinedType = Undefined,
                            mgmt_ip: str | None | UndefinedType = Undefined,
                            mgmt_gateway: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_ip: str | None | UndefinedType = Undefined,
                            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
                            mgmt_interface: str | None | UndefinedType = Undefined,
                            link_tracking: LinkTracking | UndefinedType = Undefined,
                            lacp_port_id_range: LacpPortIdRange | UndefinedType = Undefined,
                            always_configure_ip_routing: bool | UndefinedType = Undefined,
                            raw_eos_cli: str | None | UndefinedType = Undefined,
                            structured_config: EosCliConfigGen | UndefinedType = Undefined,
                            uplink_type: Literal["p2p", "port-channel", "p2p-vrfs", "lan"] | None | UndefinedType = Undefined,
                            uplink_ipv4_pool: str | None | UndefinedType = Undefined,
                            uplink_ipv6_pool: str | None | UndefinedType = Undefined,
                            uplink_interfaces: UplinkInterfaces | UndefinedType = Undefined,
                            uplink_switch_interfaces: UplinkSwitchInterfaces | UndefinedType = Undefined,
                            uplink_switches: UplinkSwitches | UndefinedType = Undefined,
                            uplink_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_switch_interface_speed: str | None | UndefinedType = Undefined,
                            uplink_mtu: int | None | UndefinedType = Undefined,
                            max_uplink_switches: int | None | UndefinedType = Undefined,
                            max_parallel_uplinks: int | UndefinedType = Undefined,
                            uplink_bfd: bool | UndefinedType = Undefined,
                            uplink_native_vlan: int | None | UndefinedType = Undefined,
                            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
                            uplink_macsec: UplinkMacsec | UndefinedType = Undefined,
                            uplink_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_switch_port_channel_id: int | None | UndefinedType = Undefined,
                            uplink_structured_config: dict | UndefinedType = Undefined,
                            uplink_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_ethernet_structured_config: EosCliConfigGen.EthernetInterfacesItem | UndefinedType = Undefined,
                            uplink_switch_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_port_channel_structured_config: EosCliConfigGen.PortChannelInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            mlag_peer_l3_vlan_structured_config: EosCliConfigGen.VlanInterfacesItem | UndefinedType = Undefined,
                            short_esi: str | None | UndefinedType = Undefined,
                            isis_system_id_prefix: str | None | UndefinedType = Undefined,
                            isis_maximum_paths: int | None | UndefinedType = Undefined,
                            is_type: Literal["level-1-2", "level-1", "level-2"] | None | UndefinedType = Undefined,
                            node_sid_base: int | UndefinedType = Undefined,
                            loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv4_address: str | None | UndefinedType = Undefined,
                            vtep_loopback_ipv6_address: str | None | UndefinedType = Undefined,
                            loopback_ipv4_offset: int | UndefinedType = Undefined,
                            router_id_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_pool: str | None | UndefinedType = Undefined,
                            loopback_ipv6_offset: int | UndefinedType = Undefined,
                            vtep: bool | None | UndefinedType = Undefined,
                            vtep_loopback: str | None | UndefinedType = Undefined,
                            bgp_as: str | None | UndefinedType = Undefined,
                            bgp_defaults: BgpDefaults | UndefinedType = Undefined,
                            evpn_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            evpn_route_servers: EvpnRouteServers | UndefinedType = Undefined,
                            evpn_services_l2_only: bool | UndefinedType = Undefined,
                            filter: Filter | UndefinedType = Undefined,
                            igmp_snooping_enabled: bool | None | UndefinedType = Undefined,
                            evpn_gateway: EvpnGateway | UndefinedType = Undefined,
                            ipvpn_gateway: IpvpnGateway | UndefinedType = Undefined,
                            mlag: bool | UndefinedType = Undefined,
                            mlag_dual_primary_detection: bool | UndefinedType = Undefined,
                            mlag_ibgp_origin_incomplete: bool | UndefinedType = Undefined,
                            mlag_interfaces: MlagInterfaces | UndefinedType = Undefined,
                            mlag_interfaces_speed: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_vlan: int | UndefinedType = Undefined,
                            mlag_peer_l3_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_l3_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_vlan: int | UndefinedType = Undefined,
                            mlag_peer_link_allowed_vlans: str | None | UndefinedType = Undefined,
                            mlag_peer_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
                            mlag_peer_ipv4_pool: str | None | UndefinedType = Undefined,
                            mlag_peer_ipv6_pool: str | None | UndefinedType = Undefined,
                            mlag_port_channel_id: int | None | UndefinedType = Undefined,
                            mlag_domain_id: str | None | UndefinedType = Undefined,
                            spanning_tree_mode: Literal["mstp", "rstp", "rapid-pvst", "none"] | None | UndefinedType = Undefined,
                            spanning_tree_priority: int | UndefinedType = Undefined,
                            spanning_tree_root_super: bool | UndefinedType = Undefined,
                            spanning_tree_mst_pvst_boundary: bool | None | UndefinedType = Undefined,
                            spanning_tree_port_id_allocation_port_channel_range: EosCliConfigGen.SpanningTree.PortIdAllocationPortChannelRange
                            | UndefinedType = Undefined,
                            virtual_router_mac_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_interface: str | None | UndefinedType = Undefined,
                            inband_mgmt_vlan: int | UndefinedType = Undefined,
                            inband_mgmt_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_subnet_offset: int | UndefinedType = Undefined,
                            inband_mgmt_ip: str | None | UndefinedType = Undefined,
                            inband_mgmt_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_address: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_subnet: str | None | UndefinedType = Undefined,
                            inband_mgmt_ipv6_gateway: str | None | UndefinedType = Undefined,
                            inband_mgmt_description: str | UndefinedType = Undefined,
                            inband_mgmt_vlan_name: str | UndefinedType = Undefined,
                            inband_mgmt_vrf: str | UndefinedType = Undefined,
                            inband_mgmt_mtu: int | UndefinedType = Undefined,
                            inband_ztp: bool | UndefinedType = Undefined,
                            inband_ztp_lacp_fallback_delay: int | UndefinedType = Undefined,
                            mpls_overlay_role: Literal["client", "server", "none"] | None | UndefinedType = Undefined,
                            overlay_address_families: OverlayAddressFamilies | UndefinedType = Undefined,
                            mpls_route_reflectors: MplsRouteReflectors | UndefinedType = Undefined,
                            bgp_cluster_id: str | None | UndefinedType = Undefined,
                            ptp: Ptp | UndefinedType = Undefined,
                            wan_role: Literal["client", "server"] | None | UndefinedType = Undefined,
                            cv_pathfinder_transit_mode: Literal["region", "zone"] | None | UndefinedType = Undefined,
                            cv_pathfinder_region: str | None | UndefinedType = Undefined,
                            cv_pathfinder_site: str | None | UndefinedType = Undefined,
                            wan_ha: WanHa | UndefinedType = Undefined,
                            dps_mss_ipv4: str | UndefinedType = Undefined,
                            l3_interfaces: L3Interfaces | UndefinedType = Undefined,
                            l3_port_channels: L3PortChannels | UndefinedType = Undefined,
                            data_plane_cpu_allocation_max: int | None | UndefinedType = Undefined,
                            flow_tracker_type: Literal["sampled", "hardware"] | None | UndefinedType = Undefined,
                            underlay_multicast: UnderlayMulticast | UndefinedType = Undefined,
                            campus: str | None | UndefinedType = Undefined,
                            campus_pod: str | None | UndefinedType = Undefined,
                            campus_access_pod: str | None | UndefinedType = Undefined,
                            cv_tags_topology_type: str | None | UndefinedType = Undefined,
                            digital_twin: DigitalTwin | UndefinedType = Undefined,
                        ) -> None:
                            """
                            NodesItem.


                            Subclass of AvdModel.

                            Args:
                                name: The Node Name is used as "hostname".
                                downlink_pools:
                                   IPv4 pools used for links to downlink switches. Set this on the parent switch. Cannot be combined
                                   with `uplink_ipv4_pool` set on the downlink switch.

                                   Subclass of AvdList with `DownlinkPoolsItem`
                                   items.
                                id: Unique identifier used for IP addressing and other algorithms.
                                platform: Arista platform family.
                                mac_address: Leverage to document management interface mac address.
                                system_mac_address:
                                   System MAC Address in this following format: "xx:xx:xx:xx:xx:xx".
                                   Set to the same MAC address as
                                   available in "show version" on the device.
                                   "system_mac_address" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                serial_number:
                                   Set to the Serial Number of the device.
                                   Only used for documentation purpose in the fabric
                                   documentation and part of the structured_config.
                                   "serial_number" can also be set directly as a
                                   hostvar.
                                   If both are set, the setting under node type settings takes precedence.
                                rack: Rack that the switch is located in (only used in snmp_settings location).
                                mgmt_ip: Node management interface IPv4 address.
                                mgmt_gateway:
                                   This key sets the management gateway for the device. It takes precedence over the global
                                   `mgmt_gateway`.
                                ipv6_mgmt_ip: Node management interface IPv6 address.
                                ipv6_mgmt_gateway:
                                   This key sets the ipv6 management gateway for the device. It takes precedence over the global
                                   `ipv6_mgmt_gateway`.
                                mgmt_interface:
                                   Management Interface Name.
                                   Default -> platform_management_interface -> mgmt_interface ->
                                   "Management1".
                                link_tracking:
                                   This configures the Link Tracking Group on a switch as well as adds the p2p-uplinks of the switch as
                                   the upstream interfaces.
                                   Useful in EVPN multhoming designs.


                                   Subclass of AvdModel.
                                lacp_port_id_range:
                                   This will generate the "lacp port-id range", "begin" and "end" values based on node "id" and the
                                   number of nodes in the "node_group".
                                   Unique LACP port-id ranges are recommended for EVPN Multihoming
                                   designs.


                                   Subclass of AvdModel.
                                always_configure_ip_routing:
                                   Force configuration of "ip routing" even on L2 devices.
                                   Use this to retain behavior of AVD versions
                                   below 4.0.0.
                                raw_eos_cli: EOS CLI rendered directly on the root level of the final EOS configuration.
                                structured_config: Custom structured config for eos_cli_config_gen.
                                uplink_type:
                                   Override the default `uplink_type` set at the `node_type_key` level.
                                   `uplink_type` must be "p2p" if
                                   `vtep` or `underlay_router` is true for the `node_type_key` definition.
                                uplink_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   IPv4
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   IPv6
                                   subnets used to connect to uplink switches will be deviced from this pool based on the node id,
                                   uplink interface index, 'max_uplink_switches' and 'max_parallel_uplinks'.
                                uplink_interfaces:
                                   Local uplink interfaces.
                                   Each list item supports range syntax that can be expanded into a list of
                                   interfaces.
                                   If uplink_interfaces is not defined, platform-specific defaults (defined under
                                   default_interfaces) will be used instead.
                                   Please note that default_interfaces are not defined by
                                   default, you should define these yourself.


                                   Subclass of AvdList with `str` items.
                                uplink_switch_interfaces:
                                   Interfaces located on uplink switches.

                                   Subclass of AvdList with `str` items.
                                uplink_switches: Subclass of AvdList with `str` items.
                                uplink_interface_speed:
                                   Set point-to-Point interface speed and will apply to uplink interfaces on both ends.
                                   (Uplink switch
                                   interface speed can be overridden with `uplink_switch_interface_speed`).
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_switch_interface_speed:
                                   Set point-to-Point interface speed for the uplink switch interface only.
                                   Speed should be set in the
                                   format `<interface_speed>` or `forced <interface_speed>` or `auto <interface_speed>`.
                                uplink_mtu: Point-to-Point uplinks MTU in bytes. This setting overrides the `p2p_uplinks_mtu` setting.
                                max_uplink_switches:
                                   Maximum number of uplink switches.
                                   Changing this value may change IP Addressing on uplinks.
                                   Can be
                                   used to reserve IP space for future expansions.
                                max_parallel_uplinks:
                                   Number of parallel links towards uplink switches.
                                   Changing this value may change interface naming on
                                   uplinks (and corresponding downlinks).
                                   Can be used to reserve interfaces for future parallel
                                   uplinks.
                                uplink_bfd: Enable bfd on uplink interfaces.
                                uplink_native_vlan:
                                   Only applicable to switches with layer-2 port-channel uplinks.
                                   A suspended (disabled) vlan will be
                                   created in both ends of the link unless the vlan is defined under network services.
                                   By default the
                                   uplink will not have a native_vlan configured, so EOS defaults to vlan 1.
                                uplink_ptp:
                                   Enable PTP on all infrastructure links.

                                   Subclass of AvdModel.
                                uplink_macsec:
                                   Enable MacSec on all uplinks.

                                   Subclass of AvdModel.
                                uplink_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink Port-channel
                                   ID will be set to the number of the lowest member interface defined under `uplink_interfaces`.
                                   For
                                   example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [ Eth11/1, Eth22/1 ] -> ID 111
                                   For
                                   MLAG port-channels ID will be based on the lowest member interface on the first MLAG switch.
                                   This
                                   option overrides the default behavior and statically sets the local Port-channel ID.
                                   Note! Make sure
                                   the ID is unique and does not overlap with autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between 1 and 2000 and both MLAG switches must have the same
                                   value.
                                uplink_switch_port_channel_id:
                                   Only applicable for L2 switches with `uplink_type: port-channel`.
                                   By default the uplink switch Port-
                                   channel ID will be set to the number of the first interface defined under
                                   `uplink_switch_interfaces`.
                                   For example:
                                     member ports [ Eth22, Eth23 ] -> ID 22
                                     member ports [
                                   Eth11/1, Eth22/1 ] -> ID 111
                                   For MLAG port-channels ID will be based on the lowest member interface
                                   on the first MLAG switch.
                                   This option overrides the default behavior and statically sets the Port-
                                   channel ID on the uplink switch.
                                   Note! Make sure the ID is unique and does not overlap with
                                   autogenerated Port-channel IDs in the Network Services.
                                   Note! For MLAG pairs the ID must be between
                                   1 and 2000 and both MLAG switches must have the same value.
                                uplink_structured_config:
                                   Custom structured config applied to "uplink_interfaces", and "uplink_switch_interfaces".
                                   When
                                   uplink_type == "p2p", custom structured config added under ethernet_interfaces.[name=<interface>]
                                   for eos_cli_config_gen overrides the settings on the ethernet interface level.
                                   When uplink_type ==
                                   "port-channel", custom structured config added under port_channel_interfaces.[name=<interface>] for
                                   eos_cli_config_gen overrides the settings on the port-channel interface level.
                                   "uplink_structured_config" is applied after "structured_config", so it can override
                                   "structured_config" defined on node-level.
                                   Note! The content of this dictionary is _not_ validated
                                   by the schema, since it can be either ethernet_interfaces or port_channel_interfaces.
                                uplink_ethernet_structured_config: Custom structured config applied to `uplink_interfaces`.
                                uplink_port_channel_structured_config: Custom structured config applied to the uplink Port-Channel when using port-channel uplinks.
                                uplink_switch_ethernet_structured_config: Custom structured config applied to `uplink_switch_interfaces` on the `uplink_switches`.
                                uplink_switch_port_channel_structured_config:
                                   Custom structured config applied to the Port-Channel on the `uplink_switches` when using port-
                                   channel uplinks.
                                mlag_port_channel_structured_config:
                                   Custom structured config applied to MLAG peer link port-channel id.
                                   Added under
                                   port_channel_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the
                                   port-channel interface level.
                                   "mlag_port_channel_structured_config" is applied after
                                   "structured_config", so it can override "structured_config" defined on node-level.
                                mlag_peer_vlan_structured_config:
                                   Custom structured config applied to MLAG Peer Link (control link) SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_vlan_structured_config" is applied after "structured_config", so it can
                                   override "structured_config" defined on node-level.
                                mlag_peer_l3_vlan_structured_config:
                                   Custom structured config applied to MLAG underlay L3 peering SVI interface id.
                                   Added under
                                   vlan_interfaces.[name=<interface>] for eos_cli_config_gen.
                                   Overrides the settings on the vlan
                                   interface level.
                                   "mlag_peer_l3_vlan_structured_config" is applied after "structured_config", so it
                                   can override "structured_config" defined on node-level.
                                short_esi:
                                   short_esi only valid for l2leaf devices using port-channel uplink.
                                   Setting short_esi to "auto"
                                   generates the short_esi automatically using a hash of configuration elements.
                                   < 0000:0000:0000 |
                                   auto >.
                                isis_system_id_prefix: (4.4 hexadecimal).
                                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                                is_type: Overrides `isis_default_is_type`.
                                node_sid_base: Node-SID base for isis-sr underlay variants. Combined with node id to generate ISIS-SR node-SID.
                                loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                loopback_ipv4_address:
                                   IPv4 address without mask for Loopback0.
                                   When set, it takes precedence over `loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not catch duplicates.
                                vtep_loopback_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address). The IPv4
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv4_offset'.
                                vtep_loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for VTEP-Loopback will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                vtep_loopback_ipv4_address:
                                   IPv4 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv4_pool`.
                                   Note: AVD does not check for validity of the IPv4 address and does not
                                   catch duplicates.
                                vtep_loopback_ipv6_address:
                                   IPv6 address without mask for VTEP-Loopback.
                                   When set, it takes precedence over
                                   `vtep_loopback_ipv6_pool`.
                                   Note: AVD does not check for validity of the IPv6 address and does not
                                   catch duplicates.
                                loopback_ipv4_offset:
                                   Offset all assigned loopback IP addresses.
                                   Required when the 'loopback_ipv4_pool' is the same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv4_offset: < total # spine switches > or vice versa.
                                router_id_pool:
                                   Required when underlay_ipv6_numbered is used to configured an IPv6 underlay and IPv6 overlay.
                                   router_id_pool is an IPv4 subnet used only for allocation of BGP router-id's since an IPv4 address
                                   will not exist on the device.
                                loopback_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address). The IPv6
                                   address used for Loopback0 will be derived from this pool based on the node id and
                                   'loopback_ipv6_offset'.
                                loopback_ipv6_offset:
                                   Offset all assigned loopback IPv6 addresses.
                                   Required when the 'loopback_ipv6_pool' is same for 2
                                   different node_types (like spine and l3leaf) to avoid overlapping IPs.
                                   For example, set the minimum
                                   offset l3leaf.defaults.loopback_ipv6_offset: < total # spine switches > or vice versa.
                                vtep:
                                   Node is configured as a VTEP when applicable based on 'overlay_routing_protocol'.
                                   Overrides VTEP
                                   setting inherited from node_type_keys.
                                vtep_loopback: Set VXLAN source interface.
                                bgp_as:
                                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                                   For asdot notation in
                                   YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float
                                   number.
                                   Required with eBGP.
                                bgp_defaults:
                                   List of EOS commands to apply to BGP daemon.

                                   Subclass of AvdList with `str` items.
                                evpn_role:
                                   Acting role in EVPN control plane.
                                   Default is set in node_type definition from node_type_keys.
                                evpn_route_servers:
                                   List of nodes acting as EVPN Route-Servers / Route-Reflectors.

                                   Subclass of AvdList with `str`
                                   items.
                                evpn_services_l2_only:
                                   Possibility to prevent configuration of Tenant VRFs and SVIs.
                                   Override node definition
                                   "network_services_l3" from node_type_keys.
                                   This allows support for centralized routing.
                                filter:
                                   Filter L3 and L2 network services based on tenant and tags (and operation filter).
                                   If filter is not
                                   defined it will default to all.


                                   Subclass of AvdModel.
                                igmp_snooping_enabled: Activate or deactivate IGMP snooping on device level.
                                evpn_gateway:
                                   Node is acting as EVPN Multi-Domain Gateway.
                                   New BGP peer-group is generated between EVPN GWs in
                                   different domains or between GWs and Route Servers.
                                   Name can be changed under
                                   "bgp_peer_groups.evpn_overlay_core" variable.
                                   L3 rechability for different EVPN GWs must be already
                                   in place, it is recommended to use DCI & L3 Edge if Route Servers and GWs are not defined under the
                                   same Ansible inventory.


                                   Subclass of AvdModel.
                                ipvpn_gateway:
                                   Node is acting as IP-VPN Gateway for EVPN to MPLS-IP-VPN Interworking. The BGP peer group used for
                                   this is "bgp_peer_groups.ipvpn_gateway_peers".
                                   L3 Reachability is required for this to work, the
                                   preferred method to establish underlay connectivity is to use core_interfaces.


                                   Subclass of
                                   AvdModel.
                                mlag: Enable / Disable auto MLAG, when two nodes are defined in node group.
                                mlag_dual_primary_detection: Enable / Disable MLAG dual primary detection.
                                mlag_ibgp_origin_incomplete:
                                   Set origin of routes received from MLAG iBGP peer to incomplete.
                                   The purpose is to optimize routing
                                   for leaf loopbacks from spine perspective and
                                   avoid suboptimal routing via peerlink for control
                                   plane traffic.
                                mlag_interfaces:
                                   Each list item supports range syntax that can be expanded into a list of interfaces.
                                   Required when
                                   MLAG leafs are present in the topology.


                                   Subclass of AvdList with `str` items.
                                mlag_interfaces_speed:
                                   Set MLAG interface speed.
                                   Speed should be set in the format `<interface_speed>` or `forced
                                   <interface_speed>` or `auto <interface_speed>`.
                                mlag_peer_l3_vlan:
                                   Underlay L3 peering SVI interface id.
                                   If set to 0 or the same vlan as mlag_peer_vlan, the
                                   mlag_peer_vlan will be used for L3 peering.
                                mlag_peer_l3_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_l3_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   subnet used for MLAG underlay L3 peering is derived from this pool based on the node id of the first
                                   MLAG switch.
                                   Required when MLAG leafs present in topology and they are using a separate L3 peering
                                   VLAN.
                                mlag_peer_vlan: MLAG Peer Link (control link) SVI interface id.
                                mlag_peer_link_allowed_vlans: mlag_peer_link_allowed_vlans
                                mlag_peer_address_family:
                                   IP address family used to establish MLAG Peer Link (control link).
                                   `ipv6` requires EOS version
                                   4.31.1F or higher.
                                   Note: `ipv6` is not supported in combination with a common MLAG peer link VLAN
                                   (ex. `mlag_peer_l3_vlan` set to 4094).
                                mlag_peer_ipv4_pool:
                                   Comma separated list of prefixes (IPv4 address/Mask) or ranges (IPv4_address-IPv4_address).
                                   The IPv4
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv4` (default).
                                mlag_peer_ipv6_pool:
                                   Comma separated list of prefixes (IPv6 address/Mask) or ranges (IPv6_address-IPv6_address).
                                   The IPv6
                                   address used for MLAG Peer Link (control link) is derived from this pool based on the node id of the
                                   first MLAG switch.
                                   Required for MLAG leafs when `mlag_peer_address_family` is `ipv6`.
                                mlag_port_channel_id:
                                   If not set, the mlag port-channel id is generated based on the digits of the first interface present
                                   in 'mlag_interfaces'.
                                   Valid port-channel id numbers are < 1-2000 > for EOS < 4.25.0F and < 1 -
                                   999999 > for EOS >= 4.25.0F.
                                mlag_domain_id: MLAG Domain ID. If not set the node group name (Set with "group" key) will be used.
                                spanning_tree_mode: spanning_tree_mode
                                spanning_tree_priority:
                                   Spanning-tree priority configured for the selected mode.
                                   For `rapid-pvst` the priority can also be
                                   set per VLAN under network services.
                                spanning_tree_root_super: spanning_tree_root_super
                                spanning_tree_mst_pvst_boundary: Enable MST PVST border ports.
                                spanning_tree_port_id_allocation_port_channel_range: Specify range of port-ids to reserve for port-channels.
                                virtual_router_mac_address: Virtual router mac address for anycast gateway.
                                inband_mgmt_interface:
                                   Pointer to interface used for inband management.
                                   All configuration must be done using other data
                                   models like network services or structured_config.
                                   'inband_mgmt_interface' is only used to refer to
                                   this interface as source in various management protocol settings (future feature).

                                   On L2 switches,
                                   this defaults to Vlan<inband_mgmt_vlan> if either 'inband_mgmt_subnet' or 'inband_mgmt_ip' is set.
                                inband_mgmt_vlan:
                                   VLAN number used for inband management on L2 switches (switches using port-channel trunks as
                                   uplinks).
                                   When using 'inband_mgmt_subnet' the VLAN and SVIs will be created automatically on this
                                   switch as well as all 'uplink_switches'.
                                   When using 'inband_mgmt_ip' the VLAN and SVI will only be
                                   created on this device and added to uplink trunk. The VLAN and SVI on the parent switches must be
                                   created using network services data models.
                                inband_mgmt_subnet:
                                   Optional IP subnet assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ip virtual-router" and host-route injection based on
                                   ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      : <subnet> +
                                   2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       :
                                   <subnet> + 3 + <l2leaf id> + <inband_mgmt_subnet_offset>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range
                                   larger than total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ip' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_subnet_offset:
                                   Offset value to adjust the calculated inband management IP address within the subnet.
                                   The assigned
                                   IP will be computed by adding this offset to the device ID.
                                inband_mgmt_ip:
                                   IP address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_subnet', hence all behavior of 'inband_mgmt_subnet' is removed.

                                   If this is set the
                                   VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN and SVI on
                                   the parent switches must be created using network services data models.

                                   This setting is applicable
                                   to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf' when using 'inband_mgmt_ip'. Otherwise gateway
                                   is derived from 'inband_mgmt_subnet' if set.

                                   This setting is applicable to L2 switches (switches
                                   using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_address:
                                   IPv6 address assigned to the inband management interface set with 'inband_mgmt_vlan'.
                                   This overrides
                                   'inband_mgmt_ipv6_subnet', hence the configuration of 'inband_mgmt_ipv6_subnet' is ignored.

                                   If this
                                   is set the VLAN and SVI will only be created on the L2 switch and added to uplink trunk.
                                   The VLAN
                                   and SVI on the parent switches must be created using network services data models.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_subnet:
                                   Optional IPv6 prefix assigned to inband management SVIs on L2 switches (switches using port-channels
                                   as uplinks).
                                   Parent l3leafs will have SVI with "ipv6 virtual-router" and host-route injection based
                                   on ARP.
                                   This allows all l3leafs to reuse the same subnet across multiple racks without VXLAN
                                   extension.
                                   SVI IP address will be assigned as follows:
                                   virtual-router: <subnet> + 1
                                   l3leaf A      :
                                   <subnet> + 2 (same IP on all l3leaf A)
                                   l3leaf B      : <subnet> + 3 (same IP on all l3leaf B)
                                   l2leafs       : <subnet> + 3 + <l2leaf id>
                                   GW on l2leafs : <subnet> + 1
                                   Assign range larger than
                                   total l2leafs + 5

                                   Setting is ignored if 'inband_mgmt_ipv6_address' is set.

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_ipv6_gateway:
                                   Default gateway configured in the 'inband_mgmt_vrf'.
                                   Used when `inband_mgmt_ipv6_address` is set.
                                   Ignored when 'inband_mgmt_ipv6_subnet' is set (first IP in subnet used as gateway).

                                   This setting is
                                   applicable to L2 switches (switches using port-channel trunks as uplinks).
                                inband_mgmt_description:
                                   Description configured on the Inband Management SVI.

                                   This setting is only applied on the devices
                                   where it is set, it does not automatically affect any parent/child devices configuration, so it must
                                   be set on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vlan_name:
                                   Name configured on the Inband Management VLAN.
                                   This setting is only applied on the devices where it
                                   is set, it does not automatically affect any parent/child devices configuration, so it must be set
                                   on each applicable node/node-group/node-type as needed.
                                inband_mgmt_vrf:
                                   VRF configured on the Inband Management Interface.
                                   The VRF is created if not already created by
                                   other means.
                                   This setting is only applied on the devices where it is set, it does not automatically
                                   affect any parent/child devices configuration, so it must be set on each applicable node/node-
                                   group/node-type as needed.
                                inband_mgmt_mtu:
                                   MTU configured on the Inband Management Interface.
                                   This setting is only applied on the devices where
                                   it is set, it does not automatically affect any parent/child devices configuration, so it must be
                                   set on each applicable node/node-group/node-type as needed.
                                inband_ztp:
                                   Enable to configure upstream device with proper configuration to allow downstream devices to be
                                   Zero-Touch-Provisioned over the uplink interfaces.
                                   For L2 devices this setting also requires that
                                   the `inband_mgmt_vlan` is set for the node.

                                   PREVIEW: Support for L3 devices is marked as "preview",
                                   meaning the data models or generated configuration can change at any time.
                                inband_ztp_lacp_fallback_delay:
                                   Set the LACP fallback timeout of the upstream device's port-channel towards the downstream inband
                                   ZTP node.
                                   This setting also requires that `inband_ztp` is set for the node.
                                mpls_overlay_role:
                                   Set the default mpls overlay role.
                                   Acting role in overlay control plane.
                                overlay_address_families:
                                   Set the default overlay address families.


                                   Subclass of AvdList with `str` items.
                                mpls_route_reflectors:
                                   List of inventory hostname acting as MPLS route-reflectors.

                                   Subclass of AvdList with `str` items.
                                bgp_cluster_id: Set BGP cluster id.
                                ptp: Subclass of AvdModel.
                                wan_role:
                                   Override the default WAN role.

                                   This is used both for AutoVPN and Pathfinder designs.
                                   That means if
                                   `wan_mode` root key is set to `autovpn` or `cv-pathfinder`.
                                   `server` indicates that the router is a
                                   route-reflector.
                                cv_pathfinder_transit_mode:
                                   Configure the transit mode for a WAN client for CV Pathfinder designs
                                   only when the `wan_mode` root
                                   key is set to `cv_pathfinder`.

                                   'zone' is currently not supported.
                                cv_pathfinder_region:
                                   The CV Pathfinder region name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   The region name must be defined under 'cv_pathfinder_regions'.
                                cv_pathfinder_site:
                                   The CV Pathfinder site name.
                                   This key is required for WAN routers but optional for pathfinders.
                                   For
                                   WAN routers and pathfinders with `cv_pathfinder_region`, the site name must be defined for the
                                   relevant region under 'cv_pathfinder_regions'.
                                   For pathfinders without `cv_pathfinder_region` set,
                                   the site must be defined under `cv_pathfinder_global_sites`.
                                wan_ha:
                                   The key is supported only if `wan_mode` == `cv-pathfinder`.
                                   AutoVPN support is still to be
                                   determined.

                                   Maximum 2 devices supported by group for HA.

                                   Subclass of AvdModel.
                                dps_mss_ipv4: IPv4 MSS value configured under "router path-selection" on WAN Devices.
                                l3_interfaces:
                                   L3 Interfaces to configure on the node.

                                   Subclass of AvdIndexedList with `L3InterfacesItem` items.
                                   Primary key is `name` (`str`).
                                l3_port_channels:
                                   L3 Port-Channel interfaces to configure on the node.

                                   Subclass of AvdIndexedList with
                                   `L3PortChannelsItem` items. Primary key is `name` (`str`).
                                data_plane_cpu_allocation_max:
                                   Set the maximum number of CPU used for the data plane.
                                   This setting is useful on virtual Route
                                   Reflectors and Pathfinders where more CPU cores should be allocated for control plane.
                                flow_tracker_type:
                                   Set the flow tracker type.
                                   Override the `default_flow_tracker_type`` set at the `node_type_key`
                                   level.
                                   `default_flow_tracker_type` default value is `sampled`.
                                underlay_multicast: Subclass of AvdModel.
                                campus:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                campus_access_pod:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Name of the campus access pod. Used to generate CloudVision device tags with the
                                   `generate_cv_tags.campus_fabric` feature.
                                cv_tags_topology_type:
                                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                                   "edge" or "member-leaf".
                                digital_twin:
                                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                                   change at any time.
                                   Set the OS version and management IP address for the digital twin of the
                                   associated node(s).

                                   Subclass of AvdModel.

                            """

                class Nodes(AvdIndexedList[str, NodesItem]):
                    """Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name` (`str`)."""

                    _primary_key: ClassVar[str] = "name"

                Nodes._item_type = NodesItem

                _fields: ClassVar[dict] = {"defaults": {"type": Defaults}, "node_groups": {"type": NodeGroups}, "nodes": {"type": Nodes}}
                defaults: Defaults
                """
                Define variables for all nodes of this type.

                Subclass of AvdModel.
                """
                node_groups: NodeGroups
                """
                Define variables related to all nodes part of this group.

                Subclass of AvdIndexedList with
                `NodeGroupsItem` items. Primary key is `group` (`str`).
                """
                nodes: Nodes
                """
                Define variables per node.

                Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                (`str`).
                """

                if TYPE_CHECKING:

                    def __init__(
                        self,
                        *,
                        defaults: Defaults | UndefinedType = Undefined,
                        node_groups: NodeGroups | UndefinedType = Undefined,
                        nodes: Nodes | UndefinedType = Undefined,
                    ) -> None:
                        """
                        NodeTypes.


                        Subclass of AvdModel.

                        Args:
                            defaults:
                               Define variables for all nodes of this type.

                               Subclass of AvdModel.
                            node_groups:
                               Define variables related to all nodes part of this group.

                               Subclass of AvdIndexedList with
                               `NodeGroupsItem` items. Primary key is `group` (`str`).
                            nodes:
                               Define variables per node.

                               Subclass of AvdIndexedList with `NodesItem` items. Primary key is `name`
                               (`str`).

                        """

            _fields: ClassVar[dict] = {"key": {"type": str}, "value": {"type": NodeTypes}}
            _field_to_key_map: ClassVar[dict] = {"value": "node_type_keys_key"}
            _key_to_field_map: ClassVar[dict] = {"node_type_keys_key": "value"}
            key: str
            """Key used as dynamic key"""
            value: NodeTypes
            """Value of dynamic key"""

            if TYPE_CHECKING:

                def __init__(self, *, key: str | UndefinedType = Undefined, value: NodeTypes | UndefinedType = Undefined) -> None:
                    """
                    DynamicNodeTypesItem.


                    Args:
                        key: Key used as dynamic key
                        value: Value of dynamic key

                    """

        class DynamicNodeTypes(AvdIndexedList[str, DynamicNodeTypesItem]):
            _primary_key: ClassVar[str] = "key"

        DynamicNodeTypes._item_type = DynamicNodeTypesItem

        _dynamic_key_maps: ClassVar[tuple[dict, ...]] = (
            {"dynamic_keys_path": "connected_endpoints_keys.key", "model_key": "connected_endpoints"},
            {"dynamic_keys_path": "custom_connected_endpoints_keys.key", "model_key": "custom_connected_endpoints"},
            {"dynamic_keys_path": "custom_node_type_keys.key", "model_key": "custom_node_types"},
            {"dynamic_keys_path": "network_services_keys.name", "model_key": "network_services"},
            {"dynamic_keys_path": "node_type_keys.key", "model_key": "node_types"},
        )
        _fields: ClassVar[dict] = {
            "connected_endpoints": {"type": DynamicConnectedEndpoints},
            "custom_connected_endpoints": {"type": DynamicCustomConnectedEndpoints},
            "custom_node_types": {"type": DynamicCustomNodeTypes},
            "network_services": {"type": DynamicNetworkServices},
            "node_types": {"type": DynamicNodeTypes},
        }
        connected_endpoints: DynamicConnectedEndpoints
        """Collection of dynamic 'connected_endpoints'."""
        custom_connected_endpoints: DynamicCustomConnectedEndpoints
        """Collection of dynamic 'custom_connected_endpoints'."""
        custom_node_types: DynamicCustomNodeTypes
        """Collection of dynamic 'custom_node_types'."""
        network_services: DynamicNetworkServices
        """Collection of dynamic 'network_services'."""
        node_types: DynamicNodeTypes
        """Collection of dynamic 'node_types'."""

        if TYPE_CHECKING:

            def __init__(
                self,
                *,
                connected_endpoints: DynamicConnectedEndpoints | UndefinedType = Undefined,
                custom_connected_endpoints: DynamicCustomConnectedEndpoints | UndefinedType = Undefined,
                custom_node_types: DynamicCustomNodeTypes | UndefinedType = Undefined,
                network_services: DynamicNetworkServices | UndefinedType = Undefined,
                node_types: DynamicNodeTypes | UndefinedType = Undefined,
            ) -> None:
                """
                _DynamicKeys.


                Data models for dynamic keys.

                Args:
                    connected_endpoints: Collection of dynamic 'connected_endpoints'.
                    custom_connected_endpoints: Collection of dynamic 'custom_connected_endpoints'.
                    custom_node_types: Collection of dynamic 'custom_node_types'.
                    network_services: Collection of dynamic 'network_services'.
                    node_types: Collection of dynamic 'node_types'.

                """

    _fields: ClassVar[dict] = {
        "aaa_settings": {"type": AaaSettings},
        "address_locking_settings": {"type": AddressLockingSettings},
        "application_classification": {"type": EosCliConfigGen.ApplicationTrafficRecognition},
        "avd_6_behaviors": {"type": Avd6Behaviors},
        "avd_data_validation_mode": {"type": str, "default": "error"},
        "avd_digital_twin_mode": {"type": bool, "default": False},
        "avd_eos_designs_debug": {"type": bool, "default": False},
        "avd_eos_designs_enforce_duplication_checks_across_all_models": {"type": bool, "default": False},
        "avd_eos_designs_structured_config": {"type": bool, "default": True},
        "avd_eos_designs_unset_facts": {"type": bool, "default": True},
        "bfd_multihop": {"type": BfdMultihop, "default": lambda cls: coerce_type({"interval": 300, "min_rx": 300, "multiplier": 3}, target_type=cls)},
        "bgp_as": {"type": str},
        "bgp_default_ipv4_unicast": {"type": bool, "default": False},
        "bgp_distance": {"type": EosCliConfigGen.RouterBgp.Distance},
        "bgp_ecmp": {"type": int},
        "bgp_graceful_restart": {"type": BgpGracefulRestart},
        "bgp_maximum_paths": {"type": int},
        "bgp_mesh_pes": {"type": bool, "default": False},
        "bgp_peer_groups": {"type": BgpPeerGroups},
        "bgp_update_wait_install": {"type": bool, "default": True},
        "bgp_update_wait_for_convergence": {"type": bool, "default": False},
        "campus": {"type": str},
        "campus_access_pod": {"type": str},
        "campus_pod": {"type": str},
        "custom_connected_endpoints_keys": {"type": CustomConnectedEndpointsKeys},
        "connected_endpoints_keys": {
            "type": ConnectedEndpointsKeys,
            "default": lambda cls: coerce_type(
                [
                    {"key": "servers", "type": "server", "description": "Server"},
                    {"key": "firewalls", "type": "firewall", "description": "Firewall"},
                    {"key": "routers", "type": "router", "description": "Router"},
                    {"key": "load_balancers", "type": "load_balancer", "description": "Load Balancer"},
                    {"key": "storage_arrays", "type": "storage_array", "description": "Storage Array"},
                    {"key": "cpes", "type": "cpe", "description": "CPE"},
                    {"key": "workstations", "type": "workstation", "description": "Workstation"},
                    {"key": "access_points", "type": "access_point", "description": "Access Point"},
                    {"key": "phones", "type": "phone", "description": "Phone"},
                    {"key": "printers", "type": "printer", "description": "Printer"},
                    {"key": "cameras", "type": "camera", "description": "Camera"},
                    {"key": "generic_devices", "type": "generic_device", "description": "Generic Device"},
                ],
                target_type=cls,
            ),
        },
        "core_interfaces": {"type": CoreInterfaces},
        "custom_structured_configuration_list_merge": {"type": str, "default": "append_rp"},
        "custom_structured_configuration_prefix": {
            "type": CustomStructuredConfigurationPrefix,
            "default": lambda cls: coerce_type(["custom_structured_configuration_"], target_type=cls),
        },
        "cv_pathfinder_global_sites": {"type": CvPathfinderGlobalSites},
        "cv_pathfinder_internet_exit_policies": {"type": CvPathfinderInternetExitPolicies},
        "cv_pathfinder_regions": {"type": CvPathfinderRegions},
        "cv_server": {"type": str},
        "cv_settings": {"type": CvSettings},
        "cv_tags_topology_type": {"type": str},
        "cv_token": {"type": str},
        "cv_topology": {"type": CvTopology},
        "cvp_ingestauth_key": {"type": str},
        "cvp_instance_ips": {"type": CvpInstanceIps},
        "cvp_token_file": {"type": str},
        "dc_name": {"type": str},
        "default_connected_endpoints_description": {"type": str, "default": "{endpoint_type!u}_{endpoint}{endpoint_port?<_}"},
        "default_connected_endpoints_port_channel_description": {"type": str, "default": "{endpoint_type!u}_{endpoint}{endpoint_port_channel?<_}"},
        "default_igmp_snooping_enabled": {"type": bool, "default": True},
        "default_interface_mtu": {"type": int},
        "default_interfaces": {"type": DefaultInterfaces},
        "default_mgmt_method": {"type": str, "default": "oob"},
        "default_network_ports_description": {"type": str, "default": "{endpoint?}"},
        "default_network_ports_port_channel_description": {"type": str, "default": "{endpoint?}{endpoint_port_channel?<_}"},
        "default_node_types": {"type": DefaultNodeTypes},
        "default_underlay_p2p_ethernet_description": {"type": str, "default": "P2P_{peer}_{peer_interface}{vrf?<_VRF_}"},
        "default_underlay_p2p_port_channel_description": {"type": str, "default": "P2P_{peer}_{peer_interface}"},
        "default_vrf_diag_loopback_description": {"type": str, "default": "DIAG_VRF_{vrf}"},
        "design": {"type": Design},
        "digital_twin": {"type": DigitalTwin},
        "dns_settings": {"type": DnsSettings},
        "enable_trunk_groups": {"type": bool, "default": False},
        "eos_designs_custom_templates": {"type": EosDesignsCustomTemplates},
        "eos_designs_documentation": {"type": EosDesignsDocumentation},
        "event_handlers": {"type": EosCliConfigGen.EventHandlers},
        "event_monitor": {"type": EosCliConfigGen.EventMonitor},
        "evpn_ebgp_gateway_inter_domain": {"type": bool},
        "evpn_ebgp_gateway_multihop": {"type": int, "default": 15},
        "evpn_ebgp_multihop": {"type": int, "default": 3},
        "evpn_hostflap_detection": {"type": EvpnHostflapDetection},
        "evpn_import_pruning": {"type": bool, "default": False},
        "evpn_multicast": {"type": bool, "default": False},
        "evpn_overlay_bgp_rtc": {"type": bool, "default": False},
        "evpn_prevent_readvertise_to_server": {"type": bool, "default": False},
        "evpn_short_esi_prefix": {"type": str, "default": "0000:0000:"},
        "evpn_vlan_aware_bundles": {"type": bool, "default": False},
        "evpn_vlan_bundles": {"type": EvpnVlanBundles},
        "fabric_evpn_encapsulation": {"type": str},
        "fabric_flow_tracking": {"type": FabricFlowTracking},
        "fabric_ip_addressing": {"type": FabricIpAddressing},
        "fabric_name": {"type": str},
        "fabric_numbering": {"type": FabricNumbering},
        "fabric_numbering_node_id_pool": {"type": str, "default": "fabric_name={fabric_name}{dc_name?</dc_name=}{pod_name?</pod_name=}{type?</type=}"},
        "fabric_sflow": {"type": FabricSflow},
        "flow_tracking_settings": {"type": FlowTrackingSettings},
        "generate_cv_tags": {"type": GenerateCvTags},
        "hardware_counters": {"type": EosCliConfigGen.HardwareCounters},
        "inband_ztp_bootstrap_file": {"type": str},
        "internal_vlan_order": {
            "type": InternalVlanOrder,
            "default": lambda cls: coerce_type({"allocation": "ascending", "range": {"beginning": 1006, "ending": 1199}}, target_type=cls),
        },
        "ipsec_settings": {"type": IpsecSettings},
        "ipv4_acls": {"type": Ipv4Acls},
        "ipv4_prefix_list_catalog": {"type": Ipv4PrefixListCatalog},
        "ipv6_mgmt_destination_networks": {"type": Ipv6MgmtDestinationNetworks},
        "ipv6_mgmt_gateway": {"type": str},
        "is_deployed": {"type": bool, "default": True},
        "isis_advertise_passive_only": {"type": bool, "default": False},
        "isis_area_id": {"type": str, "default": "49.0001"},
        "isis_default_circuit_type": {"type": str, "default": "level-2"},
        "isis_default_is_type": {"type": str, "default": "level-2"},
        "isis_default_metric": {"type": int, "default": 50},
        "isis_maximum_paths": {"type": int, "default": 4},
        "isis_system_id_format": {"type": str, "default": "underlay_loopback"},
        "isis_ti_lfa": {"type": IsisTiLfa},
        "l2vlan_profiles": {"type": L2vlanProfiles},
        "l3_edge": {"type": L3Edge},
        "l3_interface_profiles": {"type": L3InterfaceProfiles},
        "load_interval": {"type": EosCliConfigGen.LoadInterval},
        "local_users": {"type": EosCliConfigGen.LocalUsers},
        "logging_settings": {"type": LoggingSettings},
        "mac_address_table": {"type": EosCliConfigGen.MacAddressTable},
        "management_eapi": {"type": ManagementEapi},
        "mgmt_destination_networks": {"type": MgmtDestinationNetworks},
        "mgmt_gateway": {"type": str},
        "mgmt_interface": {"type": str, "default": "Management1"},
        "mgmt_interface_description": {"type": str, "default": "OOB_MANAGEMENT"},
        "mgmt_interface_vrf": {"type": str, "default": "MGMT"},
        "mgmt_vrf_routing": {"type": bool, "default": False},
        "mlag_bgp_peer_description": {"type": str, "default": "{mlag_peer}_{peer_interface}"},
        "mlag_bgp_peer_group_description": {"type": str, "default": "{mlag_peer}"},
        "mlag_ibgp_peering_vrfs": {"type": MlagIbgpPeeringVrfs},
        "mlag_member_description": {"type": str, "default": "MLAG_{mlag_peer}_{peer_interface}"},
        "mlag_on_orphan_port_channel_downlink": {"type": bool, "default": False},
        "mlag_peer_l3_svi_description": {"type": str, "default": "MLAG_L3"},
        "mlag_peer_l3_vlan_name": {"type": str, "default": "MLAG_L3"},
        "mlag_peer_l3_vrf_svi_description": {"type": str, "default": "MLAG_L3_VRF_{vrf}"},
        "mlag_peer_l3_vrf_vlan_name": {"type": str, "default": "MLAG_L3_VRF_{vrf}"},
        "mlag_peer_svi_description": {"type": str, "default": "MLAG"},
        "mlag_peer_vlan_name": {"type": str, "default": "MLAG"},
        "mlag_port_channel_description": {"type": str, "default": "MLAG_{mlag_peer}_{peer_interface}"},
        "name_servers": {"type": NameServers},
        "network_ports": {"type": NetworkPorts},
        "network_services_keys": {"type": NetworkServicesKeys, "default": lambda cls: coerce_type([{"name": "tenants"}], target_type=cls)},
        "custom_node_type_keys": {"type": CustomNodeTypeKeys},
        "node_type_keys": {"type": NodeTypeKeys},
        "ntp_settings": {"type": NtpSettings},
        "only_local_vlan_trunk_groups": {"type": bool, "default": False},
        "overlay_bgp_peer_description": {"type": str, "default": "{peer}{peer_interface?<_}"},
        "overlay_cvx_servers": {"type": OverlayCvxServers},
        "overlay_her_flood_list_per_vni": {"type": bool, "default": False},
        "overlay_her_flood_list_scope": {"type": str, "default": "fabric"},
        "overlay_loopback_description": {"type": str},
        "overlay_mlag_rfc5549": {"type": bool, "default": False},
        "overlay_rd_type": {"type": OverlayRdType},
        "overlay_routing_protocol": {"type": str},
        "overlay_routing_protocol_address_family": {"type": str, "default": "ipv4"},
        "overlay_rt_type": {"type": OverlayRtType},
        "p2p_uplinks_mtu": {"type": int, "default": 9214},
        "p2p_uplinks_qos_profile": {"type": str},
        "custom_platform_settings": {"type": CustomPlatformSettings},
        "platform_settings": {
            "type": PlatformSettings,
            "default": lambda cls: coerce_type(
                [
                    {
                        "platforms": ["default"],
                        "feature_support": {"queue_monitor_length_notify": False},
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7050X3"],
                        "feature_support": {"queue_monitor_length_notify": False},
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072",
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["720XP"],
                        "feature_support": {"poe": True, "queue_monitor_length_notify": False},
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "trident_forwarding_table_partition": "flexible exact-match 16000 l2-shared 18000 l3-shared 22000",
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["750", "755", "758"],
                        "management_interface": "Management0",
                        "feature_support": {"poe": True, "queue_monitor_length_notify": False},
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["720DP", "722XP", "710P"],
                        "feature_support": {"poe": True, "queue_monitor_length_notify": False},
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7010TX"],
                        "feature_support": {"queue_monitor_length_notify": False, "per_interface_mtu": False},
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7280R", "7280R2", "7020R"],
                        "lag_hardware_only": True,
                        "reload_delay": {"mlag": 900, "non_mlag": 1020},
                        "tcam_profile": "vxlan-routing",
                        "feature_support": {"private_vlan": False},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7280R3"],
                        "reload_delay": {"mlag": 900, "non_mlag": 1020},
                        "tcam_profile": "vxlan-routing",
                        "feature_support": {"evpn_gateway_all_active_multihoming": True, "private_vlan": False},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7500R", "7500R2"],
                        "lag_hardware_only": True,
                        "management_interface": "Management0",
                        "reload_delay": {"mlag": 900, "non_mlag": 1020},
                        "tcam_profile": "vxlan-routing",
                        "feature_support": {"private_vlan": False},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7500R3", "7800R3"],
                        "management_interface": "Management0",
                        "reload_delay": {"mlag": 900, "non_mlag": 1020},
                        "tcam_profile": "vxlan-routing",
                        "feature_support": {"evpn_gateway_all_active_multihoming": True, "private_vlan": False},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7358X4"],
                        "management_interface": "Management1/1",
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "feature_support": {
                            "queue_monitor_length_notify": False,
                            "interface_storm_control": True,
                            "bgp_update_wait_for_convergence": True,
                            "bgp_update_wait_install": False,
                        },
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7368X4"],
                        "management_interface": "Management0",
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["7300X3"],
                        "management_interface": "Management0",
                        "reload_delay": {"mlag": 1200, "non_mlag": 1320},
                        "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072",
                        "digital_twin": {"platform": "vEOS-lab"},
                    },
                    {
                        "platforms": ["VEOS", "VEOS-LAB", "vEOS", "vEOS-lab"],
                        "feature_support": {
                            "bgp_update_wait_for_convergence": False,
                            "bgp_update_wait_install": False,
                            "interface_storm_control": False,
                            "queue_monitor_length_notify": False,
                            "evpn_gateway_all_active_multihoming": True,
                        },
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"act_node_type": "veos"},
                    },
                    {
                        "platforms": ["CEOS", "cEOS", "ceos", "cEOSLab"],
                        "feature_support": {
                            "bgp_update_wait_for_convergence": False,
                            "bgp_update_wait_install": False,
                            "interface_storm_control": False,
                            "queue_monitor_length_notify": False,
                            "evpn_gateway_all_active_multihoming": True,
                        },
                        "management_interface": "Management0",
                        "reload_delay": {"mlag": 300, "non_mlag": 330},
                        "digital_twin": {"act_node_type": "veos"},
                    },
                    {
                        "platforms": ["CloudEOS"],
                        "feature_support": {"bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False},
                        "p2p_uplinks_mtu": 9194,
                        "digital_twin": {"act_node_type": "cloudeos"},
                    },
                    {
                        "platforms": ["AWE-5310", "AWE-7230R"],
                        "feature_support": {
                            "bgp_update_wait_for_convergence": True,
                            "bgp_update_wait_install": False,
                            "interface_storm_control": False,
                            "queue_monitor_length_notify": False,
                            "platform_sfe_interface_profile": {"supported": True, "max_rx_queues": 6},
                        },
                        "management_interface": "Management1/1",
                        "p2p_uplinks_mtu": 9194,
                        "digital_twin": {"platform": "CloudEOS"},
                    },
                    {
                        "platforms": ["AWE-5510", "AWE-7250R"],
                        "feature_support": {
                            "bgp_update_wait_for_convergence": True,
                            "bgp_update_wait_install": False,
                            "interface_storm_control": False,
                            "queue_monitor_length_notify": False,
                            "platform_sfe_interface_profile": {"supported": True, "max_rx_queues": 16},
                        },
                        "management_interface": "Management1/1",
                        "p2p_uplinks_mtu": 9194,
                        "digital_twin": {"platform": "CloudEOS"},
                    },
                    {
                        "platforms": ["AWE-7220R"],
                        "feature_support": {
                            "bgp_update_wait_for_convergence": True,
                            "bgp_update_wait_install": False,
                            "interface_storm_control": False,
                            "queue_monitor_length_notify": False,
                            "poe": True,
                        },
                        "management_interface": "Management1",
                        "p2p_uplinks_mtu": 9194,
                        "digital_twin": {"platform": "CloudEOS"},
                    },
                ],
                target_type=cls,
            ),
        },
        "platform_speed_groups": {"type": PlatformSpeedGroups},
        "pod_name": {"type": str},
        "port_profiles": {"type": PortProfiles},
        "ptp_profiles": {
            "type": PtpProfiles,
            "default": lambda cls: coerce_type(
                [
                    {
                        "profile": "aes67-r16-2016",
                        "announce": {"interval": 0, "timeout": 3},
                        "delay_req": -3,
                        "sync_message": {"interval": -3},
                        "transport": "ipv4",
                    },
                    {
                        "profile": "smpte2059-2",
                        "announce": {"interval": -2, "timeout": 3},
                        "delay_req": -4,
                        "sync_message": {"interval": -4},
                        "transport": "ipv4",
                    },
                    {"profile": "aes67", "announce": {"interval": 2, "timeout": 3}, "delay_req": 0, "sync_message": {"interval": 0}, "transport": "ipv4"},
                ],
                target_type=cls,
            ),
        },
        "ptp_settings": {"type": PtpSettings},
        "queue_monitor_length": {"type": QueueMonitorLength},
        "queue_monitor_streaming": {"type": EosCliConfigGen.QueueMonitorStreaming},
        "redundancy": {"type": Redundancy},
        "router_id_loopback_description": {"type": str, "default": "ROUTER_ID"},
        "serial_number": {"type": str},
        "sflow_settings": {"type": SflowSettings},
        "shutdown_bgp_towards_undeployed_peers": {"type": bool, "default": True},
        "shutdown_interfaces_towards_undeployed_peers": {"type": bool, "default": True},
        "snmp_settings": {"type": SnmpSettings},
        "source_interfaces": {"type": SourceInterfaces},
        "ssh_settings": {"type": SshSettings},
        "svi_profiles": {"type": SviProfiles},
        "system_mac_address": {"type": str},
        "terminattr_disable_aaa": {"type": bool, "default": False},
        "terminattr_ingestexclude": {"type": str, "default": "/Sysdb/cell/1/agent,/Sysdb/cell/2/agent"},
        "terminattr_ingestgrpcurl_port": {"type": int, "default": 9910},
        "terminattr_smashexcludes": {"type": str, "default": "ale,flexCounter,hardware,kni,pulse,strata"},
        "timezone": {"type": str},
        "trunk_groups": {"type": TrunkGroups},
        "type": {"type": str},
        "underlay_filter_peer_as": {"type": bool, "default": False},
        "underlay_filter_redistribute_connected": {"type": bool, "default": True},
        "underlay_ipv6": {"type": bool, "default": False},
        "underlay_ipv6_numbered": {"type": bool, "default": False},
        "underlay_isis_authentication_cleartext_key": {"type": str},
        "underlay_isis_authentication_key": {"type": str},
        "underlay_isis_authentication_mode": {"type": str},
        "underlay_isis_bfd": {"type": bool, "default": False},
        "underlay_isis_instance_name": {"type": str},
        "underlay_l2_ethernet_description": {"type": str, "default": "L2_{peer}_{peer_interface}"},
        "underlay_l2_port_channel_description": {"type": str, "default": "L2_{peer_node_group_or_peer}_{peer_interface}"},
        "underlay_multicast": {"type": bool, "default": False},
        "underlay_multicast_pim_sm": {"type": bool},
        "underlay_multicast_static": {"type": bool, "default": False},
        "underlay_multicast_anycast_rp": {"type": UnderlayMulticastAnycastRp},
        "underlay_multicast_rps": {"type": UnderlayMulticastRps},
        "underlay_ospf_area": {"type": str, "default": "0.0.0.0"},
        "underlay_ospf_authentication": {"type": UnderlayOspfAuthentication},
        "underlay_ospf_bfd_enable": {"type": bool, "default": False},
        "underlay_ospf_graceful_restart": {"type": bool, "default": False},
        "underlay_ospf_max_lsa": {"type": int, "default": 12000},
        "underlay_ospf_maximum_paths": {"type": int},
        "underlay_ospf_process_id": {"type": int, "default": 100},
        "underlay_rfc5549": {"type": bool, "default": False},
        "underlay_routing_protocol": {"type": str},
        "unsupported_transceiver": {"type": EosCliConfigGen.ServiceUnsupportedTransceiver},
        "uplink_ptp": {"type": UplinkPtp},
        "use_cv_topology": {"type": bool},
        "use_router_general_for_router_id": {"type": bool, "default": False},
        "vtep_loopback_description": {"type": str, "default": "VXLAN_TUNNEL_SOURCE"},
        "vtep_vvtep_ip": {"type": str},
        "wan_carriers": {"type": WanCarriers},
        "wan_encapsulation": {"type": str, "default": "path-selection"},
        "wan_ha": {"type": WanHa},
        "wan_ipsec_profiles": {"type": WanIpsecProfiles},
        "wan_mode": {"type": str, "default": "cv-pathfinder"},
        "wan_path_groups": {"type": WanPathGroups},
        "wan_route_servers": {"type": WanRouteServers},
        "wan_stun_dtls_disable": {"type": bool, "default": False},
        "wan_stun_dtls_profile_name": {"type": str, "default": "STUN-DTLS"},
        "wan_use_agent_env_var_for_kernel_software_forwarding_ecmp": {"type": bool, "default": True},
        "wan_use_evpn_node_settings_for_lan": {"type": bool, "default": False},
        "wan_virtual_topologies": {"type": WanVirtualTopologies},
        "zscaler_endpoints": {"type": ZscalerEndpoints},
        "_custom_structured_configurations": {"type": _CustomStructuredConfigurations},
        "_dynamic_keys": {"type": _DynamicKeys},
    }
    _allow_other_keys: ClassVar[bool] = True
    aaa_settings: AaaSettings
    """Subclass of AvdModel."""
    address_locking_settings: AddressLockingSettings
    """Subclass of AvdModel."""
    application_classification: EosCliConfigGen.ApplicationTrafficRecognition
    """Application traffic recognition configuration."""
    avd_6_behaviors: Avd6Behaviors
    """
    Opt-in to AVD 6 behaviors. These behaviors will be the default behaviors in AVD 6.0.

    Subclass of
    AvdModel.
    """
    avd_data_validation_mode: Literal["error", "warning"]
    """
    Validation Mode for AVD input data validation.
    Input data validation will validate the input
    variables according to the schema.
    During validation, messages will generated with information about
    the host(s) and key(s) which failed validation.
    "error" will produce error messages and fail the
    task.
    "warning" will produce warning messages.

    Default value: `"error"`
    """
    avd_digital_twin_mode: bool
    """
    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
    change at any time.
    Enable generation of the Digital Twin version of the fabric (Digital Twin
    topology, adjusted configuration, etc.).
    By default, Digital Twin artifacts (such as the topology
    file, adjusted structured and EOS configuration, device and fabric documentation) will replace
    original fabric artifacts.
    To keep Digital Twin artifacts separate, adjust the `output_dir_name` and
    `documentation_dir_name` variables for both `eos_designs` and `eos_cli_config_gen` to point to a
    dedicated output location.

    Default value: `False`
    """
    avd_eos_designs_debug: bool
    """
    Dump all vars and facts per device after generating `avd_switch_facts`.

    Default value: `False`
    """
    avd_eos_designs_enforce_duplication_checks_across_all_models: bool
    """
    PREVIEW: This option is marked as "preview", while we refactor the code to conform to the described
    behavior.
    When this is enabled, the generation of Structured Config in `eos_designs` will prevent
    duplicate objects generated
    by different input models. This will also improve performance since
    `eos_designs` will not maintain separate copied of the Structured Configuration.
    As an example, if
    you define an Ethernet interface under `l3_edge` and use the same interface for connectivity under
    `servers`:
    - With this option disabled (default), AVD will merge these configurations together for
    the interface and not raise an error.
    - With this option enabled, AVD will raise an error about
    duplicate interface definitions.

    Default value: `False`
    """
    avd_eos_designs_structured_config: bool
    """
    Generate structured configuration per device.

    Default value: `True`
    """
    avd_eos_designs_unset_facts: bool
    """
    Unset `avd_switch_facts` to gain a small performance improvement since Ansible needs to handle fewer
    variables.

    Default value: `True`
    """
    bfd_multihop: BfdMultihop
    """
    BFD Multihop tuning.

    Subclass of AvdModel.

    Default value: `lambda cls: coerce_type({"interval": 300, "min_rx": 300, "multiplier": 3}, target_type=cls)`
    """
    bgp_as: str | None
    """
    BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>" to use to configure
    overlay when "overlay_routing_protocol" == ibgp.
    For asdot notation in YAML inputs, the value must
    be put in quotes, to prevent it from being interpreted as a float number.
    """
    bgp_default_ipv4_unicast: bool
    """
    Default activation of IPv4 unicast address-family on all IPv4 neighbors.
    It is best practice to
    disable activation.

    Default value: `False`
    """
    bgp_distance: EosCliConfigGen.RouterBgp.Distance
    bgp_ecmp: int | None
    """
    Maximum ECMP for BGP multi-path.
    The default value is 4 except for WAN Routers where the default
    value is unset (falls back to EOS default).
    """
    bgp_graceful_restart: BgpGracefulRestart
    """
    BGP graceful-restart allows a BGP speaker with separate control plane and data plane processing to
    continue forwarding traffic during a BGP restart.
    Its neighbors (receiving speakers) may retain
    routing information from the restarting speaker while a BGP session with it is being re-established,
    reducing route flapping.


    Subclass of AvdModel.
    """
    bgp_maximum_paths: int | None
    """
    Maximum Paths for BGP multi-path.
    The default value is 4 except for WAN Routers where the default
    value is 16.
    """
    bgp_mesh_pes: bool
    """
    Configure an iBGP full mesh between PEs, either because there is no RR used or other reasons.
    Only
    supported in combination with MPLS overlay.

    Default value: `False`
    """
    bgp_peer_groups: BgpPeerGroups
    """
    Leverage an Arista EOS switch to generate the encrypted password using the correct peer group name.
    Note that the name of the peer groups use '-' instead of '_' in EOS configuration.


    Subclass of
    AvdModel.
    """
    bgp_update_wait_install: bool
    """
    Do not advertise reachability to a prefix until that prefix has been installed in hardware.
    This
    will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix
    that may not yet be installed into the forwarding plane.

    Default value: `True`
    """
    bgp_update_wait_for_convergence: bool
    """
    Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP
    convergence state is reached.

    Default value: `False`
    """
    campus: str | None
    """
    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
    change at any time.
    Name of the Campus fabric.
    Used to generate CloudVision device tags with the
    `generate_cv_tags.campus_fabric` feature.
    """
    campus_access_pod: str | None
    """
    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
    change at any time.
    Name of the Campus access pod.
    Used to generate CloudVision device tags with the
    `generate_cv_tags.campus_fabric` feature.
    """
    campus_pod: str | None
    """
    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
    change at any time.
    Name of the Campus pod.
    Used to generate CloudVision device tags with the
    `generate_cv_tags.campus_fabric` feature.
    """
    custom_connected_endpoints_keys: CustomConnectedEndpointsKeys
    """
    `custom_connected_endpoints_keys` offers a flexible way to extend endpoint definitions without
    altering the `connected_endpoints_keys`.
    The values defined in `custom_connected_endpoints_keys`,
    are prepended to the ones in `connected_endpoint_keys`, taking precedence over any values in
    `connected_endpoint_keys`.
    This approach helps preserving the default `connected_endpoints_keys`,
    unlike directly overriding it.

    Subclass of AvdIndexedList with `CustomConnectedEndpointsKeysItem`
    items. Primary key is `key` (`str`).
    """
    connected_endpoints_keys: ConnectedEndpointsKeys
    """
    Endpoints connecting to the fabric can be grouped by using separate keys.
    The keys can be customized
    to provide a better organization or grouping of your data.
    `connected_endpoints_keys` should be
    defined in the top level group_vars for the fabric.
    The default values will be overridden if
    defining this key, so it is recommended to copy the defaults and modify them.
    If you need to add
    custom `connected_endpoints_keys`, create them under `custom_connected_endpoints_keys`.
    Entries
    under `custom_connected_endpoint_keys` will take precedence over entries in
    `connected_endpoint_keys`.


    Subclass of AvdIndexedList with `ConnectedEndpointsKeysItem` items.
    Primary key is `key` (`str`).

    Default value: `lambda cls: coerce_type([{"key": "servers", "type": "server", "description": "Server"}, {"key": "firewalls", "type": "firewall", "description": "Firewall"}, {"key": "routers", "type": "router", "description": "Router"}, {"key": "load_balancers", "type": "load_balancer", "description": "Load Balancer"}, {"key": "storage_arrays", "type": "storage_array", "description": "Storage Array"}, {"key": "cpes", "type": "cpe", "description": "CPE"}, {"key": "workstations", "type": "workstation", "description": "Workstation"}, {"key": "access_points", "type": "access_point", "description": "Access Point"}, {"key": "phones", "type": "phone", "description": "Phone"}, {"key": "printers", "type": "printer", "description": "Printer"}, {"key": "cameras", "type": "camera", "description": "Camera"}, {"key": "generic_devices", "type": "generic_device", "description": "Generic Device"}], target_type=cls)`
    """
    core_interfaces: CoreInterfaces
    """Subclass of AvdModel."""
    custom_structured_configuration_list_merge: Literal["replace", "append", "keep", "prepend", "append_rp", "prepend_rp"]
    """
    The List-merge strategy used when merging custom structured configurations.

    This applies to all
    vars prefixed by prefixes in `custom_structured_configuration_prefix`
    and all data under the various
    `structured_config` options.

    The available list merge strategies:
    - `replace`:
      - Any list will be
    replaced with the list defined in custom structured configurations.
    - `append`:
      - Existing list
    items with the same "Primary key"-value will be updated.
      - New items will be appended to the
    existing list (including duplicates).
    - `keep`:
      - Only set list if there is no existing list or
    existing list is `None`.
    - `prepend`:
      - Existing list items with the same "Primary key"-value will
    be updated.
      - New items will be prepended to the existing list (including duplicates).
    -
    `append_rp`:
      - Existing list items with the same "Primary key"-value will be updated.
      - New
    unique items will be appended to the existing list.
    - `prepend_rp`:
      - Existing list items with the
    same "Primary key"-value will be updated.
      - New unique items will be prepended to the existing
    list.

    Default value: `"append_rp"`
    """
    custom_structured_configuration_prefix: CustomStructuredConfigurationPrefix
    """
    Custom EOS Structured Configuration keys can be set on any group or host_var level using the name
    of
    the corresponding `eos_cli_config_gen` key prefixed with content of
    `custom_structured_configuration_prefix`.

    The content of Custom Structured Configuration variables
    will be merged with the structured config generated by the eos_designs role.

    The merge is done
    recursively, so it is possible to update a sub-key of a variable set by `eos_designs` role already.
    The merge follow these recursive merge strategies:
    - New keys will be added for all types.
    -
    Existing keys of type "List" with a "Primary key" set in the schema:
      - Strategy can be changed
    with `custom_structured_configuration_list_merge`. Default strategy:
        - Existing list items with
    the same "Primary key"-value will be updated.
        - New unique items will be appended to the
    existing list
    - Other keys of type "List" will have new unique items appended the the existing list.
    - Existing keys of type "Dictionary" will recursively merge
    - Other existing keys will be replaced.
    Subclass of AvdList with `str` items.

    Default value: `lambda cls: coerce_type(["custom_structured_configuration_"], target_type=cls)`
    """
    cv_pathfinder_global_sites: CvPathfinderGlobalSites
    """
    Define sites that are outside of the CV Pathfinder hierarchy.
    This is used to arrange pathfinders in
    the CloudVision topology layout.

    Subclass of AvdIndexedList with `CvPathfinderGlobalSitesItem`
    items. Primary key is `name` (`str`).
    """
    cv_pathfinder_internet_exit_policies: CvPathfinderInternetExitPolicies
    """
    PREVIEW: These keys are in preview mode.

    List of internet-exit policies used for the WAN
    configuration.

    Subclass of AvdIndexedList with `CvPathfinderInternetExitPoliciesItem` items.
    Primary key is `name` (`str`).
    """
    cv_pathfinder_regions: CvPathfinderRegions
    """
    Define the CV Pathfinder hierarchy.

    Subclass of AvdIndexedList with `CvPathfinderRegionsItem`
    items. Primary key is `name` (`str`).
    """
    cv_server: str | None
    """
    PREVIEW: These keys are in preview mode.

    Hostname or IP address of CloudVision host. Ex.
    "www.arista.io" for CVaaS.
    For `eos_designs` this variable is only used for the WAN Internet-exit
    integration with Zscaler.
    The same variable name is also used by the `cv_deploy` role, and will
    override the value of `ansible_host` on inventory 'cloudvision' host.
    Make sure to set it in a
    common group_vars file.
    """
    cv_settings: CvSettings
    """
    Settings for CloudVision telemetry streaming and provisioning.

    Subclass of AvdModel.
    """
    cv_tags_topology_type: str | None
    """
    Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
    "edge" or "member-leaf". Defaults to the setting under node_type_keys.
    """
    cv_token: str | None
    """
    PREVIEW: These keys are in preview mode.

    Service account token as defined on CloudVision. This
    value should be using Ansible Vault.
    For `eos_designs` this variable is only used for the WAN
    Internet-exit integration with Zscaler.
    The same variable name is also used by the `cv_deploy` role,
    and will override the value of `ansible_password` on inventory 'cloudvision' host.
    Make sure to set
    it in a common group_vars file.
    """
    cv_topology: CvTopology
    """
    Generate AVD configurations directly from the given CloudVision topology.
    Activate this feature by
    setting `use_cv_topology` to `true`.
    Requires `default_interfaces` to be set for the relevant
    platforms and node types to detect the proper interface roles automatically.
    Neighbor hostnames must
    match the inventory hostnames of the AVD inventory to be taken into consideration.

    Subclass of
    AvdIndexedList with `CvTopologyItem` items. Primary key is `hostname` (`str`).
    """
    cvp_ingestauth_key: str | None
    """
    On-premise CVP ingest auth key. If set, TerminAttr will be configured with key-based authentication
    for on-premise CVP.
    If not set, TerminAttr will be configured with certificate based authentication:
    - On-premise using token onboarding. Default token path is '/tmp/token'.
    - CVaaS using token-secure
    onboarding. Default token path is '/tmp/cv-onboarding-token'.
    Token must be copied to the device
    first.
    """
    cvp_instance_ips: CvpInstanceIps
    """
    List of IPv4 addresses or DNS names for CloudVision.
    For on-premise CloudVision enter all the nodes
    of the cluster.
    For CloudVision as a Service enter the DNS name of the instance.
    `eos_designs` only
    supports one CloudVision cluster.


    Subclass of AvdList with `str` items.
    """
    cvp_token_file: str | None
    """
    cvp_token_file is the path to the token file on the switch.
    If not set the default locations for on-
    premise or CVaaS will be used.
    See cvp_ingestauth_key for details.
    """
    dc_name: str | None
    """
    DC Name is used in:
    - Fabric Documentation (Optional, falls back to fabric_name)
    - SNMP Location:
    `snmp_settings.location` (Optional)
    - HER Overlay DC scoped flood lists:
    `overlay_her_flood_list_scope: dc` (Required)
    """
    default_connected_endpoints_description: str
    """
    Default description or description template to be used on all ports to connected endpoints.
    This can
    be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `endpoint_type`: The `type` from `connected_endpoints_keys` like `server`, `router` etc.
      -
    `endpoint`: The name of the connected endpoint
      - `endpoint_port`: The value from `endpoint_ports`
    for this switch port if set.
      - `port_channel_id`: The port-channel number for the switch.

    By
    default the description is templated from the type, name and port of the endpoint if set.

    Default value: `"{endpoint_type!u}_{endpoint}{endpoint_port?<_}"`
    """
    default_connected_endpoints_port_channel_description: str
    """
    Default description or description template to be used on all port-channels to connected endpoints.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `endpoint_type`: The `type` from `connected_endpoints_keys` like `server`, `router` etc.
      -
    `endpoint`: The name of the connected endpoint
      - `endpoint_port_channel`: The value of
    `endpoint_port_channel` if set.
      - `port_channel_id`: The port-channel number for the switch.
      -
    `adapter_description`: The adapter's description if set.
      - `adapter_description_or_endpoint`:
    Helper alias of the adapter_description or endpoint.

    By default the description is templated from
    the type, name and port-channel name of the endpoint if set.

    Default value: `"{endpoint_type!u}_{endpoint}{endpoint_port_channel?<_}"`
    """
    default_igmp_snooping_enabled: bool
    """
    When set to false, disables IGMP snooping at fabric level and overrides per vlan settings.

    Default value: `True`
    """
    default_interface_mtu: int | None
    """
    Default interface MTU configured on EOS under "interface defaults".
    Can be overridden per platform
    under platform settings.
    """
    default_interfaces: DefaultInterfaces
    """
    Default uplink, downlink, and MLAG interfaces, which will be used if these interfaces are not
    defined on a device (either directly or through inheritance).


    Subclass of AvdList with
    `DefaultInterfacesItem` items.
    """
    default_mgmt_method: Literal["oob", "inband", "none"]
    """
    `default_mgmt_method` controls the default VRF and source interface used for the following
    management and monitoring protocols configured with `eos_designs`:
      - `aaa_settings`
      -
    `cv_settings`
      - `logging_settings`
      - `management_eapi`
      - `ntp_settings`
      - `sflow_settings`
    - `snmp_settings`
      - `ssh_settings`

    `oob` means the protocols will be configured with the VRF set
    by `mgmt_interface_vrf` and `mgmt_interface` as the source interface.
    `inband` means the protocols
    will be configured with the VRF set by `inband_mgmt_vrf` and `inband_mgmt_interface` as the source
    interface.
    `none` means the VRF and or interface must be manually set for each protocol.
    This can be
    overridden under the settings for each protocol.

    Default value: `"oob"`
    """
    default_network_ports_description: str
    """
    Default description or description template to be used on all ports defined under `network_ports`.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `endpoint_type`: Always set to `network_port`.
      - `endpoint`: The value of the `endpoint` key if
    set.
      - `port_channel_id`: The port-channel number for the switch.

    By default the description is
    templated from the `endpoint` key if set.

    Default value: `"{endpoint?}"`
    """
    default_network_ports_port_channel_description: str
    """
    Default description or description template to be used on all port-channels defined under
    `network_ports`.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `endpoint_type`: Always set to `network_port`.
      - `endpoint`: The value of the `endpoint` key if
    set.
      - `endpoint_port_channel`: The value of `endpoint_port_channel` if set.
      -
    `port_channel_id`: The port-channel number for the switch.
      - `adapter_description`: The adapter's
    description if set.
      - `adapter_description_or_endpoint`: Helper alias of the adapter_description
    or endpoint.

    By default the description is templated from the `endpoint` key if set.

    Default value: `"{endpoint?}{endpoint_port_channel?<_}"`
    """
    default_node_types: DefaultNodeTypes
    """
    Uses hostname matches against a regular expression to determine the node type.

    Subclass of
    AvdIndexedList with `DefaultNodeTypesItem` items. Primary key is `node_type` (`str`).
    """
    default_underlay_p2p_ethernet_description: str
    """
    The default description or description template to be used on L3 point-to-point ethernet interfaces.
    The interfaces using this are the routed uplinks and `p2p_links` defined under `l3_edge` or
    `core_interfaces`.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      - `peer`:
    The name of the peer.
      - `interface`: The local interface name.
      - `peer_interface`: The interface
    on the peer.
      - `vrf`: The name of the VRF if set (Only applicable for `uplink_type: p2p-vrfs`).
    By default the description is templated from the name and interface of the peer.

    Default value: `"P2P_{peer}_{peer_interface}{vrf?<_VRF_}"`
    """
    default_underlay_p2p_port_channel_description: str
    """
    The default description or description template to be used on L3 point-to-point port-channel
    interfaces.
    The port-channels using this are `p2p_links` defined under `l3_edge` or
    `core_interfaces`.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      - `peer`:
    The name of the peer.
      - `interface`: The local interface name.
      - `peer_interface`: The interface
    on the peer.
      - `port_channel_id`: The local port-channel ID.
      - `peer_port_channel_id`: The ID of
    the port-channel on the peer.

    By default the description is templated from the name and interface
    of the peer.

    Default value: `"P2P_{peer}_{peer_interface}"`
    """
    default_vrf_diag_loopback_description: str
    """
    The default description or description template to be used on VRF diagnostic loopback interfaces.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `interface`: The Loopback interface name.
      - `vrf`: The VRF name.
      - `tenant`: The tenant name.
    By default the description is templated from the VRF name.

    Default value: `"DIAG_VRF_{vrf}"`
    """
    design: Design
    """Subclass of AvdModel."""
    digital_twin: DigitalTwin
    """
    PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
    change at any time.
    Global settings to configure the Digital Twin of the Fabric.

    Subclass of
    AvdModel.
    """
    dns_settings: DnsSettings
    """
    DNS settings

    Subclass of AvdModel.
    """
    enable_trunk_groups: bool
    """
    Enable Trunk Group support across eos_designs.
    Warning: Because of the nature of the EOS Trunk Group
    feature, enabling this is "all or nothing".
    *All* vlans and *all* trunks towards connected endpoints
    must be using trunk groups as well.
    If trunk groups are not assigned to a trunk, no vlans will be
    enabled on that trunk.
    See "Details on enable_trunk_groups" below before enabling this feature.

    Default value: `False`
    """
    eos_designs_custom_templates: EosDesignsCustomTemplates
    """Subclass of AvdList with `EosDesignsCustomTemplatesItem` items."""
    eos_designs_documentation: EosDesignsDocumentation
    """
    Control fabric documentation generation.


    Subclass of AvdModel.
    """
    event_handlers: EosCliConfigGen.EventHandlers
    """
    Gives the ability to monitor and react to Syslog messages.
    Event Handlers provide a powerful and
    flexible tool that can be used to apply self-healing actions,
    customize the system behavior, and
    implement workarounds to problems discovered in the field.
    """
    event_monitor: EosCliConfigGen.EventMonitor
    evpn_ebgp_gateway_inter_domain: bool | None
    evpn_ebgp_gateway_multihop: int
    """
    Default of 15, considering a large value to avoid BGP reachability issues in very complex DCI
    networks.
    Adapt the value for your specific topology.

    Default value: `15`
    """
    evpn_ebgp_multihop: int
    """
    Default of 3, the recommended value for a 3 stage spine and leaf topology.
    Set to a higher value to
    allow for very large and complex topologies.

    Default value: `3`
    """
    evpn_hostflap_detection: EvpnHostflapDetection
    """Subclass of AvdModel."""
    evpn_import_pruning: bool
    """
    Enable VPN import pruning (Min. EOS 4.24.2F).
    The Route Target extended communities carried by
    incoming VPN paths will be examined.
    If none of those Route Targets have been configured for import,
    the path will be immediately discarded.

    Default value: `False`
    """
    evpn_multicast: bool
    """
    General Configuration required for EVPN Multicast. "evpn_l2_multicast" or "evpn_l3_multicast" must
    also be configured under the Network Services (tenants).
    Requires `underlay_multicast_pim_sm: true`
    and IGMP snooping enabled globally (default).
    For MLAG devices Route Distinguisher must be unique
    since this feature will create multi-vtep configuration.
    Warning !!! For Trident3 based platforms
    i.e 7050X3, 7300X3, 720XP.
      The Following default platform setting will be configured on 7050X3 and
    7300X3: "platform trident forwarding-table partition flexible exact-match 16384 l2-shared 98304
    l3-shared 131072"
      The Following default platform setting will be configured on 720XP: "flexible
    exact-match 16000 l2-shared 18000 l3-shared 22000"
      All forwarding agents will be restarted when
    this configuration is applied.
      You can tune the settings by overriding the default variable:
    "platform_settings[platforms].trident_forwarding_table_partition:"
      Please contact an Arista
    representative for help with determining the appropriate values for your environment.

    Default value: `False`
    """
    evpn_overlay_bgp_rtc: bool
    """
    Enable Route Target Membership Constraint Address Family on EVPN overlay BGP peerings (Min. EOS
    4.25.1F).
    Requires use eBGP as overlay protocol.

    Default value: `False`
    """
    evpn_prevent_readvertise_to_server: bool
    """
    Configure route-map on eBGP sessions towards route-servers, where prefixes with the peer's ASN in
    the AS Path are filtered away.
    This is very useful in large-scale networks, where convergence will
    be quicker by not returning all updates received
    from Route-server-1 to Router-server-2 just for
    Route-server-2 to throw them away because of AS Path loop detection.

    Default value: `False`
    """
    evpn_short_esi_prefix: str
    """
    Configure prefix for "short_esi" values.

    Default value: `"0000:0000:"`
    """
    evpn_vlan_aware_bundles: bool
    """
    Enable VLAN aware bundles for every EVPN MAC-VRF.
    If set to `true` all SVIs in a VRF are configured
    in a vlan-aware-bundle using the VRF name as the bundle name. `l2vlans` are bundled in vlan-aware-
    bundles using the VLAN name as the bundle name.

    The `evpn_vlan_bundle` option under `svis` and
    `l2vlans` takes precedence and overrides this behavior. Per svi/l2vlan `evpn_vlan_bundle` also works
    when this setting is disabled which allow mixing vlan-aware-bundles with regular MAC-VRFs.

    Default value: `False`
    """
    evpn_vlan_bundles: EvpnVlanBundles
    """Subclass of AvdIndexedList with `EvpnVlanBundlesItem` items. Primary key is `name` (`str`)."""
    fabric_evpn_encapsulation: Literal["vxlan", "mpls"] | None
    """
    Should be set to mpls for evpn-mpls scenario. This overrides the evpn_encapsulation setting under
    node_type_keys.
    """
    fabric_flow_tracking: FabricFlowTracking
    """
    Default enabling of flow-tracking(IPFIX) for various interface types across the fabric.
    Flow
    Tracking can also be enabled/disabled under each of the specific data models.
    For general flow-
    tracking settings see `flow_tracking_settings`.

    Subclass of AvdModel.
    """
    fabric_ip_addressing: FabricIpAddressing
    """Subclass of AvdModel."""
    fabric_name: str
    """
    Fabric Name, required to match Ansible Group name covering all devices in the Fabric, **must** be an
    inventory group name.
    """
    fabric_numbering: FabricNumbering
    """
    PREVIEW: This feature is in marked as "preview", which means it is subject to change at any time.
    Assignment policies for numbers like Node ID.

    Subclass of AvdModel.
    """
    fabric_numbering_node_id_pool: str
    """
    Name of Node ID pool or template used to render the name of each Node ID pool.
    For each device the
    Node ID is assigned from a pool shared by all devices rendering the same pool name.
    This can be
    modified to include fewer or more fields to keep separate pools or to use the same pool across
    areas.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `fabric_name`: The `fabric_name` assigned to the device.
      - `dc_name`: The `dc_name` assigned to
    the device.
      - `pod_name`: The `pod_name` assigned to the device.
      - `type`: The `type` assigned
    to the device.
      - `rack`: The `rack` assigned to the device.

    By default the Node ID pool key is
    templated from `fabric_name`, `dc_name`, `pod_name` and `type`.

    Default value: `"fabric_name={fabric_name}{dc_name?</dc_name=}{pod_name?</pod_name=}{type?</type=}"`
    """
    fabric_sflow: FabricSflow
    """
    Default enabling of sFlow for various interface types across the fabric.
    sFlow can also be
    enabled/disabled under each of the specific data models.
    For general sFlow settings see
    `sflow_settings`.

    Subclass of AvdModel.
    """
    flow_tracking_settings: FlowTrackingSettings
    """
    Define the flow tracking parameters for this topology.

    Subclass of AvdModel.
    """
    generate_cv_tags: GenerateCvTags
    """
    Generate CloudVision Tags based on AVD data.

    Subclass of AvdModel.
    """
    hardware_counters: EosCliConfigGen.HardwareCounters
    inband_ztp_bootstrap_file: str | None
    """
    Bootstrap URL configured in DHCP to use for inband ZTP.
    If not set and `cvp_instance_ips` is set
    then the bootstrap value will be set to:
        `https://{cvp_instance_ips[0]}/ztp/bootstrap`
    Otherwise
    no value will be configured.
    """
    internal_vlan_order: InternalVlanOrder
    """
    Internal vlan allocation order and range.

    Subclass of AvdModel.

    Default value: `lambda cls: coerce_type({"allocation": "ascending", "range": {"beginning": 1006, "ending": 1199}}, target_type=cls)`
    """
    ipsec_settings: IpsecSettings
    """
    Settings applicable to all IPsec connections.

    Subclass of AvdModel.
    """
    ipv4_acls: Ipv4Acls
    """
    IPv4 extended access-lists supporting substitution on certain fields.
    These access-lists can be
    referenced under node settings `l3_interfaces`, and will only be configured on devices where they
    are in use.

    The substitution is useful when assigning the same access-list on multiple interfaces,
    but where certain fields require unique values like the "interface_ip" or "peer_ip".
    When using
    substitution, the interface name will be appended to the ACL name.

    Subclass of AvdIndexedList with
    `Ipv4AclsItem` items. Primary key is `name` (`str`).
    """
    ipv4_prefix_list_catalog: Ipv4PrefixListCatalog
    """
    IPv4 prefix-list catalog.
    Note: Entries defined in `ipv4_prefix_list_catalog` are only rendered in
    the configuration when
    they are explicitly referenced in one of the following node config keys:
    -
    `l3_interfaces.[].bgp.ipv4_prefix_list_in`
    - `l3_interfaces.[].bgp.ipv4_prefix_list_out`
    -
    `l3_port_channels.[].bgp.ipv4_prefix_list_in`
    - `l3_port_channels.[].bgp.ipv4_prefix_list_out`.
    Subclass of AvdIndexedList with `Ipv4PrefixListCatalogItem` items. Primary key is `name` (`str`).
    """
    ipv6_mgmt_destination_networks: Ipv6MgmtDestinationNetworks
    """
    List of IPv6 prefixes to configure as static routes towards the OOB IPv6 Management interface
    gateway.
    Replaces the default route.


    Subclass of AvdList with `str` items.
    """
    ipv6_mgmt_gateway: str | None
    """
    OOB Management interface gateway in IPv6 format.
    Used as next-hop for default gateway or static
    routes defined under 'ipv6_mgmt_destination_networks'.
    """
    is_deployed: bool
    """
    If the device is already deployed in the fabric.
    When set to false:
      - The `cv_deploy` role will
    not apply configurations to this device.
      - Peer interfaces toward this device may be shutdown
    based on the `shutdown_interfaces_towards_undeployed_peers` setting.
      - BGP peerings toward this
    device may be shutdown based on the `shutdown_bgp_towards_undeployed_peers` setting.
      - Validation
    tests by the `anta_runner` role are automatically skipped for this device.

    Default value: `True`
    """
    isis_advertise_passive_only: bool
    """Default value: `False`"""
    isis_area_id: str
    """Default value: `"49.0001"`"""
    isis_default_circuit_type: Literal["level-1-2", "level-1", "level-2"]
    """
    These fabric level parameters can be used with core_interfaces running ISIS, and may be overridden
    on link profile or link level.

    Default value: `"level-2"`
    """
    isis_default_is_type: Literal["level-1-2", "level-1", "level-2"]
    """Default value: `"level-2"`"""
    isis_default_metric: int
    """
    These fabric level parameters can be used with core_interfaces running ISIS, and may be overridden
    at link profile or link level.

    Default value: `50`
    """
    isis_maximum_paths: int
    """
    Number of path to configure in ECMP for ISIS.

    Default value: `4`
    """
    isis_system_id_format: Literal["node_id", "underlay_loopback"]
    """
    Configures source for the system-id within the ISIS net id.
    If this key is set to `node_id`, the
    fields `id` and `isis_system_id_prefix` configured under the node attributes are used to generate
    the system-id.
    If `underlay_loopback` is selected then all node `isis_system_id_prefix` settings
    will be ignored and the loopback address will be used to generate the system-id.

    Default value: `"underlay_loopback"`
    """
    isis_ti_lfa: IsisTiLfa
    """Subclass of AvdModel."""
    l2vlan_profiles: L2vlanProfiles
    """
    Profiles to inherit common settings for l2vlans defined under the network_services key.

    Subclass of
    AvdIndexedList with `L2vlanProfilesItem` items. Primary key is `profile` (`str`).
    """
    l3_edge: L3Edge
    """Subclass of AvdModel."""
    l3_interface_profiles: L3InterfaceProfiles
    """
    Profiles to inherit common settings for l3_interfaces defined under the node type key.
    These
    profiles will *not* work for `l3_interfaces` defined under `vrfs`.

    Subclass of AvdIndexedList with
    `L3InterfaceProfilesItem` items. Primary key is `profile` (`str`).
    """
    load_interval: EosCliConfigGen.LoadInterval
    local_users: EosCliConfigGen.LocalUsers
    logging_settings: LoggingSettings
    """
    Logging settings

    Subclass of AvdModel.
    """
    mac_address_table: EosCliConfigGen.MacAddressTable
    management_eapi: ManagementEapi
    """
    Default is HTTPS management eAPI enabled.


    Subclass of AvdModel.
    """
    mgmt_destination_networks: MgmtDestinationNetworks
    """
    List of IPv4 prefixes to configure as static routes towards the OOB Management interface gateway.
    Replaces the default route.

    Subclass of AvdList with `str` items.
    """
    mgmt_gateway: str | None
    """
    OOB Management interface gateway in IPv4 format.
    Used as next-hop for default gateway or static
    routes defined under 'mgmt_destination_networks'.
    """
    mgmt_interface: str
    """
    OOB Management interface.

    Default value: `"Management1"`
    """
    mgmt_interface_description: str
    """
    Management interface description.

    Default value: `"OOB_MANAGEMENT"`
    """
    mgmt_interface_vrf: str
    """
    OOB Management VRF.

    Default value: `"MGMT"`
    """
    mgmt_vrf_routing: bool
    """
    Configure IP routing for the OOB Management VRF.

    Default value: `False`
    """
    mlag_bgp_peer_description: str
    """
    Description or description template to be used on the MLAG BGP peers including those in VRFs.
    This
    can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `interface`: The local MLAG L3 VLAN interface.
      -
    `peer_interface`: The MLAG L3 VLAN interface on the MLAG peer.
      - `vrf`: The name of the VRF. Not
    available for the underlay peering.

    The default description is built from the name and interface of
    the MLAG peer and optionally the VRF.

    Default value: `"{mlag_peer}_{peer_interface}"`
    """
    mlag_bgp_peer_group_description: str
    """
    Description or description template to be used on the MLAG BGP peer-group.
    This can be a template
    using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.

    The default description is the name of the MLAG peers.

    Default value: `"{mlag_peer}"`
    """
    mlag_ibgp_peering_vrfs: MlagIbgpPeeringVrfs
    """
    On mlag leafs, an SVI interface is defined per vrf, to establish iBGP peering (required when there
    are MLAG leafs in topology).
    The SVI id will be derived from the base vlan defined:
    mlag_ibgp_peering_vrfs.base_vlan + (vrf_id or vrf_vni) - 1.
    Depending on the values of vrf_id /
    vrf_vni it may be required to adjust the base_vlan to avoid overlaps or invalid vlan ids.
    The SVI ip
    address derived from mlag_l3_peer_ipv4_pool is reused across all iBGP peerings.


    Subclass of
    AvdModel.
    """
    mlag_member_description: str
    """
    Description or description template to be used on MLAG peer-link ethernet interfaces.
    This can be a
    template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `interface`: The local MLAG port-channel interface.
      -
    `peer_interface`: The port-channel interface on the MLAG peer.
      - `mlag_port_channel_id`: The local
    MLAG port-channel ID.
      - `mlag_peer_port_channel_id`: The port-channel ID on the MLAG peer.

    By
    default the description is templated from the name and interface of the MLAG peer.

    Default value: `"MLAG_{mlag_peer}_{peer_interface}"`
    """
    mlag_on_orphan_port_channel_downlink: bool
    """
    If `true` an MLAG ID will always be configured on a Port-Channel downlink even if the downlink is
    only on one node in the MLAG pair.
    If `false` (default) an MLAG ID will only be configured on Port-
    Channel downlinks dual-homed to two MLAG switches.

    Default value: `False`
    """
    mlag_peer_l3_svi_description: str
    """
    Description or description template to be used on MLAG L3 peering SVI (Interface Vlan4093 by
    default).
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `interface`: The MLAG L3 peering SVI name.
      -
    `mlag_peer_l3_vlan`: The MLAG L3 peering VLAN ID.

    Default value: `"MLAG_L3"`
    """
    mlag_peer_l3_vlan_name: str
    """
    Name or name template to be used on MLAG L3 VLAN (VLAN 4093 by default).
    This can be a template
    using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `mlag_peer_l3_vlan`: The MLAG L3 peering VLAN ID.

    Default value: `"MLAG_L3"`
    """
    mlag_peer_l3_vrf_svi_description: str
    """
    Description or description template to be used on MLAG L3 peering SVI for VRFs.
    This can be a
    template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `interface`: The MLAG L3 VRF peering SVI name.
      -
    `vlan`: The MLAG L3 VRF peering VLAN ID.
      - `vrf`: The VRF name.

    Default value: `"MLAG_L3_VRF_{vrf}"`
    """
    mlag_peer_l3_vrf_vlan_name: str
    """
    Name or name template to be used on MLAG L3 peering VLAN for VRFs.
    This can be a template using the
    AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `vlan`: The MLAG L3 VRF peering VLAN ID.
      - `vrf`: The
    VRF name.

    Default value: `"MLAG_L3_VRF_{vrf}"`
    """
    mlag_peer_svi_description: str
    """
    Description or description template to be used on MLAG peering SVI (Interface Vlan4094 by default).
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `interface`: The MLAG peering SVI name.
      -
    `mlag_peer_vlan`: The MLAG peering VLAN ID.

    Default value: `"MLAG"`
    """
    mlag_peer_vlan_name: str
    """
    Name or name template to be used on MLAG peering VLAN (VLAN 4094 by default).
    This can be a template
    using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `mlag_peer_vlan`: The MLAG peering VLAN ID.

    Default value: `"MLAG"`
    """
    mlag_port_channel_description: str
    """
    Description or description template to be used on MLAG peer-link port-channel interfaces.
    This can
    be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      -
    `mlag_peer`: The name of the MLAG peer.
      - `interface`: The local MLAG port-channel interface.
      -
    `peer_interface`: The port-channel interface on the MLAG peer.
      - `mlag_port_channel_id`: The local
    MLAG port-channel ID.
      - `mlag_peer_port_channel_id`: The port-channel ID on the MLAG peer.

    By
    default the description is templated from the name and port-channel interface of the MLAG peer.

    Default value: `"MLAG_{mlag_peer}_{peer_interface}"`
    """
    name_servers: NameServers
    """
    List of DNS servers. The VRF is set to < mgmt_interface_vrf >.

    Subclass of AvdList with `str`
    items.
    """
    network_ports: NetworkPorts
    """Subclass of AvdList with `NetworkPortsItem` items."""
    network_services_keys: NetworkServicesKeys
    """
    Network Services can be grouped by using separate keys.
    The keys can be customized to provide a
    better better organization or grouping of your data.
    `network_services_keys` should be defined in
    the top level group_vars for the fabric.
    The default values will be overridden if defining this key,
    so it is recommended to copy the defaults and modify them.


    Subclass of AvdIndexedList with
    `NetworkServicesKeysItem` items. Primary key is `name` (`str`).

    Default value: `lambda cls: coerce_type([{"name": "tenants"}], target_type=cls)`
    """
    custom_node_type_keys: CustomNodeTypeKeys
    """
    Define Custom Node Type Keys, to specify the properties of each node type in the fabric.
    This allows
    for complete customization of the fabric layout and functionality.
    `custom_node_type_keys` should be
    defined in top level group_var for the fabric.
    These values will be combined with the defaults;
    custom node type keys named the same as a
    default node_type_key will replace the default.

    Subclass
    of AvdIndexedList with `CustomNodeTypeKeysItem` items. Primary key is `key` (`str`).
    """
    node_type_keys: NodeTypeKeys
    """
    Define Node Type Keys, to specify the properties of each node type in the fabric.
    This allows for
    complete customization of the fabric layout and functionality.
    `node_type_keys` should be defined in
    top level group_var for the fabric.

    The default values will be overridden if this key is defined.
    If you need to change all the existing `node_type_keys`, it is recommended to copy the defaults and
    modify them.
    If you need to add custom `node_type_keys`, create them under `custom_node_type_keys` -
    if named identically to default `node_type_keys` entries,
    custom entries will replace the equivalent
    default entry.

    Subclass of AvdIndexedList with `NodeTypeKeysItem` items. Primary key is `key`
    (`str`).
    """
    ntp_settings: NtpSettings
    """
    NTP settings

    Subclass of AvdModel.
    """
    only_local_vlan_trunk_groups: bool
    """
    A vlan can have many trunk_groups assigned.
    To avoid unneeded configuration changes on all leaf
    switches when a new trunk group is added,
    this feature will only configure the vlan trunk groups
    matched with local connected_endpoints.
    See "Details on only_local_vlan_trunk_groups" below.
    Requires "enable_trunk_groups: true".

    Default value: `False`
    """
    overlay_bgp_peer_description: str
    """
    Description or description template to be used on the overlay BGP peers.
    This can be a template
    using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      - `peer`:
    The name of the BGP peer.
      - `peer_interface`: The interface on the BGP peer if available.

    The
    default description is built from the name and interface of the BGP peer.

    Default value: `"{peer}{peer_interface?<_}"`
    """
    overlay_cvx_servers: OverlayCvxServers
    """
    List of CVX vxlan overlay controllers.
    Required if overlay_routing_protocol == CVX.
    CVX servers
    (VMs) are peering using their management interface, so mgmt_ip must be set for all CVX servers.
    Subclass of AvdList with `str` items.
    """
    overlay_her_flood_list_per_vni: bool
    """
    When using Head-End Replication, configure flood-lists per VNI.
    By default HER will be configured
    with a common flood-list containing all VTEPs.
    This behavior can be changed to per-VNI flood-lists
    by setting `overlay_her_flood_list_per_vni: true`.
    This will make `eos_designs` consider configured
    VLANs per VTEP, and only include the relevant VTEPs to each VNI's flood-list.

    Default value: `False`
    """
    overlay_her_flood_list_scope: Literal["fabric", "dc"]
    """
    When using Head-End Replication, set the scope of flood-lists to Fabric or DC.
    By default all VTEPs
    in the Fabric (part of the inventory group referenced by "fabric_name") are added to the flood-
    lists.
    This can be changed to all VTEPs in the DC (sharing the same "dc_name" value).
    This is useful
    if Border Leaf switches are dividing the VXLAN overlay into separate domains.

    Default value: `"fabric"`
    """
    overlay_loopback_description: str | None
    """Customize the description on overlay interface Loopback0."""
    overlay_mlag_rfc5549: bool
    """
    IPv6 Unnumbered for MLAG iBGP connections.
    Requires "underlay_rfc5549: true".

    Default value: `False`
    """
    overlay_rd_type: OverlayRdType
    """
    Configuration options for the Administrator subfield (first part of RD) and the Assigned Number
    subfield (second part of RD).

    By default Route Distinguishers (RD) are set to:
    -
    `<overlay_loopback>:<mac_vrf_id_base + vlan_id or mac_vrf_vni_base + vlan_id>` for VLANs and VLAN-
    Aware Bundles with L2 vlans.
    - `<overlay_loopback>:<vlan_aware_bundle_number_base + vrf_id>` for
    VLAN-Aware Bundles with SVIs.
    - `<overlay_loopback>:<vlan_aware_bundle_number_base + id>` for VLAN-
    Aware Bundles defined under 'evpn_vlan_bundles'.
    - `<overlay_loopback>:<vrf_id>` for VRFs.

    Note:
    RD
    is a 48-bit value which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.
    When using loopback or
    32-bit ASN/number the assigned number can only be a 16-bit number. This may be a problem with large
    VNIs.
    For 16-bit ASN/number the assigned number can be a 32-bit number.


    Subclass of AvdModel.
    """
    overlay_routing_protocol: Literal["ebgp", "ibgp", "cvx", "her", "none"] | None
    """
    - The following overlay routing protocols are supported:
      - ebgp: Configures fabric with eBGP,
    default for l3ls-evpn design.
      - ibgp: Configured fabric with iBGP, only supported with OSPF or
    ISIS variants in underlay, default for mpls design.
      - cvx: Configures fabric to leverage
    CloudVision eXchange as the overlay controller.
      - her: Configures fabric with Head-End
    Replication, configures static VXLAN flood-lists instead of using a dynamic overlay protocol.
      -
    none: No overlay configuration will be generated, default for l2ls design.

      If not set, the
    default_overlay_routing_protocol defined under the node_type_keys will be used (default is "ebgp").
    """
    overlay_routing_protocol_address_family: Literal["ipv4", "ipv6"]
    """
    When set to `ipv6`, enable overlay EVPN peering with IPv6 addresses.
    This feature depends on
    underlay_ipv6 variable. As of today, only RFC5549 is capable to transport IPv6 in the underlay.

    Default value: `"ipv4"`
    """
    overlay_rt_type: OverlayRtType
    """
    Configuration options for the Administrator subfield (first part of RT) and the Assigned Number
    subfield (second part of RT).

    By default Route Targets (RT) are set to:
    - `<(mac_vrf_id_base or
    mac_vrf_vni_base) + vlan_id>:<(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id>` for VLANs and VLAN-
    Aware Bundles with L2 vlans.
    - `<vlan_aware_bundle_number_base +
    vrf_id>:<vlan_aware_bundle_number_base + vrf_id>` for VLAN-Aware Bundles with SVIs.
    -
    `<vlan_aware_bundle_number_base + id>:<vlan_aware_bundle_number_base + id>` for VLAN-Aware Bundles
    defined under 'evpn_vlan_bundles'.
    - `<vrf_id>:<vrf_id>` for VRFs.

    Notes:
    RT is a 48-bit value
    which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.
    When using 32-bit ASN/number the VNI can
    only be a 16-bit number. Alternatively use vlan_id/vrf_id as assigned number.
    For 16-bit ASN/number
    the assigned number can be a 32-bit number.


    Subclass of AvdModel.
    """
    p2p_uplinks_mtu: int
    """
    Point to Point Links MTU.
    Precedence: <node_type>.uplink_mtu -> platform_settings.p2p_uplinks_mtu ->
    p2p_uplinks_mtu -> 9214

    Default value: `9214`
    """
    p2p_uplinks_qos_profile: str | None
    """QOS Profile assigned on all infrastructure links."""
    custom_platform_settings: CustomPlatformSettings
    """
    Custom Platform settings to override the default `platform_settings`. This list will be prepended to
    the list of `platform_settings`. The first entry containing `platforms` matching the `platform` node
    setting will be chosen. If no matches are found, the first entry containing a platform `default`
    will be chosen.

    Subclass of AvdList with `CustomPlatformSettingsItem` items.
    """
    platform_settings: PlatformSettings
    """
    Platform settings. The first entry containing `platforms` matching the `platform` node setting will
    be chosen. If no matches are found, the first entry containing a platform `default` will be chosen.
    The default values will be overridden if `platform_settings` is defined. If you need to replace all
    the default platforms, it is recommended to copy the defaults and modify them. If you need to add
    custom platforms, create them under `custom_platform_settings`. Entries under
    `custom_platform_settings` will be matched before the equivalent entries from `platform_settings`.
    Subclass of AvdList with `PlatformSettingsItem` items.

    Default value: `lambda cls: coerce_type([{"platforms": ["default"], "feature_support": {"queue_monitor_length_notify": False}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7050X3"], "feature_support": {"queue_monitor_length_notify": False}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072", "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["720XP"], "feature_support": {"poe": True, "queue_monitor_length_notify": False}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "trident_forwarding_table_partition": "flexible exact-match 16000 l2-shared 18000 l3-shared 22000", "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["750", "755", "758"], "management_interface": "Management0", "feature_support": {"poe": True, "queue_monitor_length_notify": False}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["720DP", "722XP", "710P"], "feature_support": {"poe": True, "queue_monitor_length_notify": False}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7010TX"], "feature_support": {"queue_monitor_length_notify": False, "per_interface_mtu": False}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7280R", "7280R2", "7020R"], "lag_hardware_only": True, "reload_delay": {"mlag": 900, "non_mlag": 1020}, "tcam_profile": "vxlan-routing", "feature_support": {"private_vlan": False}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7280R3"], "reload_delay": {"mlag": 900, "non_mlag": 1020}, "tcam_profile": "vxlan-routing", "feature_support": {"evpn_gateway_all_active_multihoming": True, "private_vlan": False}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7500R", "7500R2"], "lag_hardware_only": True, "management_interface": "Management0", "reload_delay": {"mlag": 900, "non_mlag": 1020}, "tcam_profile": "vxlan-routing", "feature_support": {"private_vlan": False}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7500R3", "7800R3"], "management_interface": "Management0", "reload_delay": {"mlag": 900, "non_mlag": 1020}, "tcam_profile": "vxlan-routing", "feature_support": {"evpn_gateway_all_active_multihoming": True, "private_vlan": False}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7358X4"], "management_interface": "Management1/1", "reload_delay": {"mlag": 300, "non_mlag": 330}, "feature_support": {"queue_monitor_length_notify": False, "interface_storm_control": True, "bgp_update_wait_for_convergence": True, "bgp_update_wait_install": False}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7368X4"], "management_interface": "Management0", "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["7300X3"], "management_interface": "Management0", "reload_delay": {"mlag": 1200, "non_mlag": 1320}, "trident_forwarding_table_partition": "flexible exact-match 16384 l2-shared 98304 l3-shared 131072", "digital_twin": {"platform": "vEOS-lab"}}, {"platforms": ["VEOS", "VEOS-LAB", "vEOS", "vEOS-lab"], "feature_support": {"bgp_update_wait_for_convergence": False, "bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False, "evpn_gateway_all_active_multihoming": True}, "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"act_node_type": "veos"}}, {"platforms": ["CEOS", "cEOS", "ceos", "cEOSLab"], "feature_support": {"bgp_update_wait_for_convergence": False, "bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False, "evpn_gateway_all_active_multihoming": True}, "management_interface": "Management0", "reload_delay": {"mlag": 300, "non_mlag": 330}, "digital_twin": {"act_node_type": "veos"}}, {"platforms": ["CloudEOS"], "feature_support": {"bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False}, "p2p_uplinks_mtu": 9194, "digital_twin": {"act_node_type": "cloudeos"}}, {"platforms": ["AWE-5310", "AWE-7230R"], "feature_support": {"bgp_update_wait_for_convergence": True, "bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False, "platform_sfe_interface_profile": {"supported": True, "max_rx_queues": 6}}, "management_interface": "Management1/1", "p2p_uplinks_mtu": 9194, "digital_twin": {"platform": "CloudEOS"}}, {"platforms": ["AWE-5510", "AWE-7250R"], "feature_support": {"bgp_update_wait_for_convergence": True, "bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False, "platform_sfe_interface_profile": {"supported": True, "max_rx_queues": 16}}, "management_interface": "Management1/1", "p2p_uplinks_mtu": 9194, "digital_twin": {"platform": "CloudEOS"}}, {"platforms": ["AWE-7220R"], "feature_support": {"bgp_update_wait_for_convergence": True, "bgp_update_wait_install": False, "interface_storm_control": False, "queue_monitor_length_notify": False, "poe": True}, "management_interface": "Management1", "p2p_uplinks_mtu": 9194, "digital_twin": {"platform": "CloudEOS"}}], target_type=cls)`
    """
    platform_speed_groups: PlatformSpeedGroups
    """
    Set Hardware Speed Groups per Platform.

    Subclass of AvdIndexedList with `PlatformSpeedGroupsItem`
    items. Primary key is `platform` (`str`).
    """
    pod_name: str | None
    """
    POD Name is used in:
    - Fabric Documentation (Optional, falls back to dc_name and then to
    fabric_name)
    - SNMP Location: `snmp_settings.location` (Optional)
    - VRF Loopbacks:
    `vtep_diagnostic.loopback_ip_pools.pod` (Required)

    Recommended to be common between Spines and
    Leafs within a POD (One l3ls topology).
    """
    port_profiles: PortProfiles
    """
    Optional profiles to share common settings for connected_endpoints and/or network_ports.
    Keys are
    the same used under endpoints adapters. Keys defined under endpoints adapters take precedence.
    Subclass of AvdIndexedList with `PortProfilesItem` items. Primary key is `profile` (`str`).
    """
    ptp_profiles: PtpProfiles
    """
    Subclass of AvdIndexedList with `PtpProfilesItem` items. Primary key is `profile` (`str`).

    Default value: `lambda cls: coerce_type([{"profile": "aes67-r16-2016", "announce": {"interval": 0, "timeout": 3}, "delay_req": -3, "sync_message": {"interval": -3}, "transport": "ipv4"}, {"profile": "smpte2059-2", "announce": {"interval": -2, "timeout": 3}, "delay_req": -4, "sync_message": {"interval": -4}, "transport": "ipv4"}, {"profile": "aes67", "announce": {"interval": 2, "timeout": 3}, "delay_req": 0, "sync_message": {"interval": 0}, "transport": "ipv4"}], target_type=cls)`
    """
    ptp_settings: PtpSettings
    """
    Common PTP settings.

    Subclass of AvdModel.
    """
    queue_monitor_length: QueueMonitorLength
    """Subclass of AvdModel."""
    queue_monitor_streaming: EosCliConfigGen.QueueMonitorStreaming
    redundancy: Redundancy
    """
    Redundancy for chassis platforms with dual supervisors | Optional.

    Subclass of AvdModel.
    """
    router_id_loopback_description: str
    """
    Customize the description on Router ID interface Loopback0.

    Default value: `"ROUTER_ID"`
    """
    serial_number: str | None
    """
    Serial Number of the device.
    Used for documentation purpose in the fabric documentation as can also
    be used by the 'eos_config_deploy_cvp' role.
    "serial_number" can also be set directly under node
    type settings.
    If both are set, the value under node type settings takes precedence.
    """
    sflow_settings: SflowSettings
    """
    sFlow settings.
    The sFlow process will only be configured if any interface is enabled for sFlow.
    For
    default enabling of sFlow for various interface types across the fabric see `fabric_sflow`.
    Subclass of AvdModel.
    """
    shutdown_bgp_towards_undeployed_peers: bool
    """
    Administratively shuts down BGP peerings towards devices marked with `is_deployed: false`.

    Default value: `True`
    """
    shutdown_interfaces_towards_undeployed_peers: bool
    """
    Administratively shuts down interfaces on deployed devices that connect to a peer marked with
    `is_deployed: false`.

    Default value: `True`
    """
    snmp_settings: SnmpSettings
    """
    SNMP settings.
    Configuration of remote SNMP engine IDs are currently only possible using
    `structured_config`.

    Subclass of AvdModel.
    """
    source_interfaces: SourceInterfaces
    """
    Configure source-interfaces based on the management interfaces set for other `eos_designs` data
    models.
    By default, no source-interfaces will be configured. They can still be configured manually
    using `eos_cli_config_gen` and custom structured configuration.
    EOS supports a single source-
    interface per VRF, so an error will be raised in case of conflicts.
    Errors will also be raised if an
    interface is not found for a device.

    Subclass of AvdModel.
    """
    ssh_settings: SshSettings
    """Subclass of AvdModel."""
    svi_profiles: SviProfiles
    """
    Profiles to share common settings for SVIs under `<network_services_key>.[].vrfs.svis`.
    Keys are the
    same used under SVIs. Keys defined under SVIs take precedence.
    Note: structured configuration is not
    merged recursively and will be taken directly from the most specific level in the following order:
    1. svi.nodes[inventory_hostname].structured_config
    2.
    svi_profile.nodes[inventory_hostname].structured_config
    3.
    svi_parent_profile.nodes[inventory_hostname].structured_config
    4. svi.structured_config
    5.
    svi_profile.structured_config
    6. svi_parent_profile.structured_config


    Subclass of AvdIndexedList
    with `SviProfilesItem` items. Primary key is `profile` (`str`).
    """
    system_mac_address: str | None
    """
    Set to the same MAC address as available in "show version" on the device.
    "system_mac_address" can
    also be set under node type settings.
    If both are set, the value under node type settings takes
    precedence.
    """
    terminattr_disable_aaa: bool
    """Default value: `False`"""
    terminattr_ingestexclude: str
    """Default value: `"/Sysdb/cell/1/agent,/Sysdb/cell/2/agent"`"""
    terminattr_ingestgrpcurl_port: int
    """
    Port number used for Terminattr connection to an on-premise CloudVision cluster.
    The port number is
    always 443 when using CloudVision as a Service, so this value is ignored.

    Default value: `9910`
    """
    terminattr_smashexcludes: str
    """Default value: `"ale,flexCounter,hardware,kni,pulse,strata"`"""
    timezone: str | None
    """Clock timezone like "CET" or "US/Pacific"."""
    trunk_groups: TrunkGroups
    """Subclass of AvdModel."""
    type: str | None
    """
    The `type:` variable needs to be defined for each device in the fabric.
    This is leveraged to load
    the appropriate template to generate the configuration.
    """
    underlay_filter_peer_as: bool
    """
    Configure route-map on eBGP sessions towards underlay peers, where prefixes with the peer's ASN in
    the AS Path are filtered away.
    This is very useful in very large scale networks not using EVPN
    overlays, where convergence will be quicker by not having to return
    all updates received from
    Spine-1 to Spine-2 just for Spine-2 to throw them away because of AS Path loop detection.
    Note that
    this setting cannot be used while there are EVPN services present in the default VRF.

    Default value: `False`
    """
    underlay_filter_redistribute_connected: bool
    """
    Filter redistribution of connected into the underlay routing protocol.
    Only applicable when
    overlay_routing_protocol != 'none' and underlay_routing_protocol == BGP.
    Creates a route-map and
    prefix-list assigned to redistribute connected permitting only loopbacks and inband management
    subnets.

    Default value: `True`
    """
    underlay_ipv6: bool
    """
    This feature allows IPv6 underlay routing protocol with RFC5549 addresses to be used along with IPv4
    advertisements as VXLAN tunnel endpoints.
    Requires "underlay_rfc5549: true" and "loopback_ipv6_pool"
    under the node type settings.

    Default value: `False`
    """
    underlay_ipv6_numbered: bool
    """
    This feature allows pure IPv6 underlay routing protocol with numbered addresses.
    Currently sets both
    underlay and overlay, including MLAG, to use IPv6 addresses.
    Currently BGP peer-groups are named
    with IPv4 by default. This can be modified under `bgp_peer_groups`.
    Requires:
      - "underlay_ipv6:
    true"
      - "loopback_ipv6_pool"
      - "underlay_routing_protocol: ebgp"
    Some settings are not yet
    supported with IPv6 underlay:
      - underlay_multicast
      - underlay_multicast_rp_interfaces
      -
    underlay_rfc5549
      - wan_role
      - vtep_vvtep_ip
      - inband_ztp

    Default value: `False`
    """
    underlay_isis_authentication_cleartext_key: str | None
    """
    Cleartext password.
    Encrypted to Type 7 by AVD.
    To protect the password at rest it is strongly
    recommended to make use of a vault or similar.
    """
    underlay_isis_authentication_key: str | None
    """
    Type-7 encrypted password.
    Takes precedence over `underlay_isis_authentication_cleartext_key`.
    To
    protect the password at rest it is strongly recommended to make use of a vault or similar.
    """
    underlay_isis_authentication_mode: Literal["md5", "text"] | None
    """Underlay ISIS authentication mode."""
    underlay_isis_bfd: bool
    """
    Enable BFD for ISIS on all underlay links.

    Default value: `False`
    """
    underlay_isis_instance_name: str | None
    """Default -> "EVPN_UNDERLAY" for l3ls, "CORE" for mpls."""
    underlay_l2_ethernet_description: str
    """
    The description or description template to be used on L2 ethernet interfaces.
    The interfaces using
    this are the member interfaces of port-channel uplinks.
    This can be a template using the AVD string
    formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      - `peer`:
    The name of the peer.
      - `interface`: The local interface name.
      - `peer_interface`: The interface
    on the peer.

    By default the description is templated from the hostname and interface of the peer.

    Default value: `"L2_{peer}_{peer_interface}"`
    """
    underlay_l2_port_channel_description: str
    """
    The description or description template to be used on L2 port-channel interfaces.
    The interfaces
    using this are port-channel uplinks.
    This can be a template using the AVD string formatter syntax:
    https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
    descriptions-names.html#avd-string-formatter-syntax.
    The available template fields are:
      - `peer`:
    The name of the peer.
      - `interface`: The local interface name.
      - `peer_interface`: The interface
    on the peer.
      - `port_channel_id`: The local port-channel ID.
      - `peer_port_channel_id`: The ID of
    the port-channel on the peer.
      - `peer_node_group`: The node group of the peer if the peer is an
    MLAG member or running EVPN A/A.
      - `peer_node_group_or_peer`: Helper alias of the peer_node_group
    or peer.
      - `peer_node_group_or_uppercase_peer`: Helper alias of the peer_node_group or peer
    hostname in uppercase.

    By default the description is templated from the peer's node group (for MLAG
    or EVPN A/A) or hostname and port-channel interface of the peer.

    Default value: `"L2_{peer_node_group_or_peer}_{peer_interface}"`
    """
    underlay_multicast: bool
    """
    Enable Multicast in the underlay on all p2p uplink interfaces and mlag l3 peer interface.
    Specifically PIM Sparse-Mode will be configured on all routed underlay interfaces.
    No other
    configuration is added, so the underlay will only support Source-Specific Multicast (SSM).
    The
    configuration is intended to be used as multicast underlay for EVPN OISM overlay.

    Default value: `False`
    """
    underlay_multicast_pim_sm: bool | None
    """
    When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
    on all:
      - P2P uplink interfaces if enabled on uplink peer
      - MLAG L3 peer interface if also
    enabled on MLAG peer
      - l3_edge and core interfaces

    Note: This changes the default behavior for
    l3_edge / core_interfaces to automatically include the interfaces
    in multicast, unless
    `include_in_underlay_protocol: false` or `multicast_pim_sm: false`.
    """
    underlay_multicast_static: bool
    """
    When enabled, configures multicast routing and by default configures static multicast in the
    underlay on all:
      - P2P uplink interfaces if enabled on uplink peer
      - MLAG L3 peer interface if
    also enabled on MLAG peer
      - l3_edge and core interfaces

    Default value: `False`
    """
    underlay_multicast_anycast_rp: UnderlayMulticastAnycastRp
    """
    If multiple nodes are configured under 'underlay_multicast_rps.[].nodes' for the same RP address,
    they will be configured
    with one of the following methods:
    - Anycast RP using PIM (RFC4610).
    -
    Anycast RP using MSDP (RFC4611).

    NOTE: When using MSDP, all nodes across all MSDP enabled RPs will
    be added to a single MSDP mesh group named "ANYCAST-RP".


    Subclass of AvdModel.
    """
    underlay_multicast_rps: UnderlayMulticastRps
    """
    List of PIM Sparse-Mode Rendevouz Points configured for underlay multicast on all devices.
    The
    device(s) listed under 'nodes', will be configured as the Rendevouz point router(s).
    If multiple
    nodes are configured under 'nodes' for the same RP address, they will be configured
    according to the
    'underlay_multicast_anycast_rp.mode' setting.

    Requires 'underlay_multicast_pim_sm: true'.
    Subclass of AvdIndexedList with `UnderlayMulticastRpsItem` items. Primary key is `rp` (`str`).
    """
    underlay_ospf_area: str
    """Default value: `"0.0.0.0"`"""
    underlay_ospf_authentication: UnderlayOspfAuthentication
    """Subclass of AvdModel."""
    underlay_ospf_bfd_enable: bool
    """Default value: `False`"""
    underlay_ospf_graceful_restart: bool
    """
    Enable graceful restart for OSPF underlay.

    Default value: `False`
    """
    underlay_ospf_max_lsa: int
    """Default value: `12000`"""
    underlay_ospf_maximum_paths: int | None
    """Maximum number of next-hops in an ECMP route."""
    underlay_ospf_process_id: int
    """Default value: `100`"""
    underlay_rfc5549: bool
    """
    Point to Point Underlay with RFC 5549(eBGP), i.e. IPv6 Unnumbered.
    Requires
    "underlay_routing_protocol: ebgp".

    Default value: `False`
    """
    underlay_routing_protocol: Literal["ebgp", "ospf", "ospf-ldp", "isis", "isis-sr", "isis-ldp", "isis-sr-ldp", "none"] | None
    """
    - The following underlay routing protocols are supported:
      - EBGP (default for l3ls-evpn)
      - OSPF.
    - OSPF-LDP*.
      - ISIS.
      - ISIS-SR*.
      - ISIS-LDP*.
      - ISIS-SR-LDP*.
      - No underlay routing
    protocol (none)
    - The variables should be applied to all devices in the fabric.
    *Only supported with
    core_interfaces data model.
    """
    unsupported_transceiver: EosCliConfigGen.ServiceUnsupportedTransceiver
    uplink_ptp: UplinkPtp
    """
    Enable PTP on all infrastructure links.

    Subclass of AvdModel.
    """
    use_cv_topology: bool | None
    """
    Generate AVD configurations directly from a given CloudVision topology.
    See `cv_topology` for
    details.
    """
    use_router_general_for_router_id: bool
    """
    Use `router general` to set router ID for all routing protocols and VRFs.

    Default value: `False`
    """
    vtep_loopback_description: str
    """
    Customize the description on the VTEP interface, typically Loopback1.

    Default value: `"VXLAN_TUNNEL_SOURCE"`
    """
    vtep_vvtep_ip: str | None
    """
    IP Address used as Virtual VTEP. Will be configured as secondary IP on Loopback1.
    This is only
    needed for centralized routing designs.
    """
    wan_carriers: WanCarriers
    """
    List of carriers used for the WAN configuration and their mapping to path-groups.

    Subclass of
    AvdIndexedList with `WanCarriersItem` items. Primary key is `name` (`str`).
    """
    wan_encapsulation: Literal["path-selection", "vxlan"]
    """
    Select the encapsulation to use for EVPN peerings for WAN BGP peers.

    Default value: `"path-selection"`
    """
    wan_ha: WanHa
    """Subclass of AvdModel."""
    wan_ipsec_profiles: WanIpsecProfiles
    """
    Define IPsec profiles parameters for WAN configuration.

    Subclass of AvdModel.
    """
    wan_mode: Literal["autovpn", "cv-pathfinder"]
    """
    Select if the WAN should be run using CV Pathfinder or AutoVPN only.

    Default value: `"cv-pathfinder"`
    """
    wan_path_groups: WanPathGroups
    """
    List of path-groups used for the WAN configuration.

    Subclass of AvdIndexedList with
    `WanPathGroupsItem` items. Primary key is `name` (`str`).
    """
    wan_route_servers: WanRouteServers
    """
    List of the AutoVPN RRs when using `wan_mode: autovpn`, or the Pathfinders
    when using `wan_mode: cv-
    pathfinder`, to which the device should connect to.
    This is also used to establish iBGP sessions
    between WAN route servers.

    When the route server is part of the same inventory as the WAN routers,
    only the name is required.

    Subclass of AvdIndexedList with `WanRouteServersItem` items. Primary key
    is `hostname` (`str`).
    """
    wan_stun_dtls_disable: bool
    """
    WAN STUN connections are authenticated and secured with DTLS by default.
    For CV Pathfinder
    deployments CloudVision will automatically deploy certificates on the devices.
    In case of AutoVPN
    the certificates must be deployed manually to all devices.

    For LAB environments this can be
    disabled, if there are no certificates available.
    This should NOT be disabled for a WAN network
    connected to the internet, since it will leave the STUN service exposed with no authentication.

    Default value: `False`
    """
    wan_stun_dtls_profile_name: str
    """
    Name of the SSL profile used for DTLS on WAN STUN connections.
    When using automatic ceritficate
    deployment via CloudVision this name must be the same on all WAN routers.

    Default value: `"STUN-DTLS"`
    """
    wan_use_agent_env_var_for_kernel_software_forwarding_ecmp: bool
    """
    For EOS kernel forwarding, ECMP programming can be enabled in two different ways depending on the
    EOS version.

    - `true`: For older EOS versions use an agent environment variable. Changing this
    requires a restart of the KernelFib agent.
    - `false`: For newer EOS versions (starting 4.33.2) use
    the proper CLI.

    Default value: `True`
    """
    wan_use_evpn_node_settings_for_lan: bool
    """
    PREVIEW: This key is currently not supported and may produce invalid configuration.
    When true,
    `eos_designs` will use `overlay_routing_protocol`, `evpn_role` and `vtep`
    node settings for LAN side
    on WAN devices. Otherwise these will be ignored for WAN.
    This will be the default in AVD version
    6.0.0 and this option will be removed.

    Default value: `False`
    """
    wan_virtual_topologies: WanVirtualTopologies
    """
    Configure Virtual Topologies for CV Pathfinder and AutoVPN.
    Auto create a control plane
    profile/policy/application and enforce it being first in the default VRF.

    Subclass of AvdModel.
    """
    zscaler_endpoints: ZscalerEndpoints
    """
    PREVIEW: These keys are in preview mode.

    Special data model used for testing the WAN internet-exit
    integration with Zscaler.
    The model is supposed to be autofilled per-device by `eos_designs`.
    Manually setting this model will take precedence and prevent `eos_designs` from trying to contact
    CloudVision.
    This can be useful for offline testing or if CloudVision is not available or not
    configured for Zscaler integration.

    Subclass of AvdModel.
    """
    _custom_structured_configurations: _CustomStructuredConfigurations
    _dynamic_keys: _DynamicKeys
    """Dynamic keys"""

    if TYPE_CHECKING:

        def __init__(
            self,
            *,
            aaa_settings: AaaSettings | UndefinedType = Undefined,
            address_locking_settings: AddressLockingSettings | UndefinedType = Undefined,
            application_classification: EosCliConfigGen.ApplicationTrafficRecognition | UndefinedType = Undefined,
            avd_6_behaviors: Avd6Behaviors | UndefinedType = Undefined,
            avd_data_validation_mode: Literal["error", "warning"] | UndefinedType = Undefined,
            avd_digital_twin_mode: bool | UndefinedType = Undefined,
            avd_eos_designs_debug: bool | UndefinedType = Undefined,
            avd_eos_designs_enforce_duplication_checks_across_all_models: bool | UndefinedType = Undefined,
            avd_eos_designs_structured_config: bool | UndefinedType = Undefined,
            avd_eos_designs_unset_facts: bool | UndefinedType = Undefined,
            bfd_multihop: BfdMultihop | UndefinedType = Undefined,
            bgp_as: str | None | UndefinedType = Undefined,
            bgp_default_ipv4_unicast: bool | UndefinedType = Undefined,
            bgp_distance: EosCliConfigGen.RouterBgp.Distance | UndefinedType = Undefined,
            bgp_ecmp: int | None | UndefinedType = Undefined,
            bgp_graceful_restart: BgpGracefulRestart | UndefinedType = Undefined,
            bgp_maximum_paths: int | None | UndefinedType = Undefined,
            bgp_mesh_pes: bool | UndefinedType = Undefined,
            bgp_peer_groups: BgpPeerGroups | UndefinedType = Undefined,
            bgp_update_wait_install: bool | UndefinedType = Undefined,
            bgp_update_wait_for_convergence: bool | UndefinedType = Undefined,
            campus: str | None | UndefinedType = Undefined,
            campus_access_pod: str | None | UndefinedType = Undefined,
            campus_pod: str | None | UndefinedType = Undefined,
            custom_connected_endpoints_keys: CustomConnectedEndpointsKeys | UndefinedType = Undefined,
            connected_endpoints_keys: ConnectedEndpointsKeys | UndefinedType = Undefined,
            core_interfaces: CoreInterfaces | UndefinedType = Undefined,
            custom_structured_configuration_list_merge: Literal["replace", "append", "keep", "prepend", "append_rp", "prepend_rp"] | UndefinedType = Undefined,
            custom_structured_configuration_prefix: CustomStructuredConfigurationPrefix | UndefinedType = Undefined,
            cv_pathfinder_global_sites: CvPathfinderGlobalSites | UndefinedType = Undefined,
            cv_pathfinder_internet_exit_policies: CvPathfinderInternetExitPolicies | UndefinedType = Undefined,
            cv_pathfinder_regions: CvPathfinderRegions | UndefinedType = Undefined,
            cv_server: str | None | UndefinedType = Undefined,
            cv_settings: CvSettings | UndefinedType = Undefined,
            cv_tags_topology_type: str | None | UndefinedType = Undefined,
            cv_token: str | None | UndefinedType = Undefined,
            cv_topology: CvTopology | UndefinedType = Undefined,
            cvp_ingestauth_key: str | None | UndefinedType = Undefined,
            cvp_instance_ips: CvpInstanceIps | UndefinedType = Undefined,
            cvp_token_file: str | None | UndefinedType = Undefined,
            dc_name: str | None | UndefinedType = Undefined,
            default_connected_endpoints_description: str | UndefinedType = Undefined,
            default_connected_endpoints_port_channel_description: str | UndefinedType = Undefined,
            default_igmp_snooping_enabled: bool | UndefinedType = Undefined,
            default_interface_mtu: int | None | UndefinedType = Undefined,
            default_interfaces: DefaultInterfaces | UndefinedType = Undefined,
            default_mgmt_method: Literal["oob", "inband", "none"] | UndefinedType = Undefined,
            default_network_ports_description: str | UndefinedType = Undefined,
            default_network_ports_port_channel_description: str | UndefinedType = Undefined,
            default_node_types: DefaultNodeTypes | UndefinedType = Undefined,
            default_underlay_p2p_ethernet_description: str | UndefinedType = Undefined,
            default_underlay_p2p_port_channel_description: str | UndefinedType = Undefined,
            default_vrf_diag_loopback_description: str | UndefinedType = Undefined,
            design: Design | UndefinedType = Undefined,
            digital_twin: DigitalTwin | UndefinedType = Undefined,
            dns_settings: DnsSettings | UndefinedType = Undefined,
            enable_trunk_groups: bool | UndefinedType = Undefined,
            eos_designs_custom_templates: EosDesignsCustomTemplates | UndefinedType = Undefined,
            eos_designs_documentation: EosDesignsDocumentation | UndefinedType = Undefined,
            event_handlers: EosCliConfigGen.EventHandlers | UndefinedType = Undefined,
            event_monitor: EosCliConfigGen.EventMonitor | UndefinedType = Undefined,
            evpn_ebgp_gateway_inter_domain: bool | None | UndefinedType = Undefined,
            evpn_ebgp_gateway_multihop: int | UndefinedType = Undefined,
            evpn_ebgp_multihop: int | UndefinedType = Undefined,
            evpn_hostflap_detection: EvpnHostflapDetection | UndefinedType = Undefined,
            evpn_import_pruning: bool | UndefinedType = Undefined,
            evpn_multicast: bool | UndefinedType = Undefined,
            evpn_overlay_bgp_rtc: bool | UndefinedType = Undefined,
            evpn_prevent_readvertise_to_server: bool | UndefinedType = Undefined,
            evpn_short_esi_prefix: str | UndefinedType = Undefined,
            evpn_vlan_aware_bundles: bool | UndefinedType = Undefined,
            evpn_vlan_bundles: EvpnVlanBundles | UndefinedType = Undefined,
            fabric_evpn_encapsulation: Literal["vxlan", "mpls"] | None | UndefinedType = Undefined,
            fabric_flow_tracking: FabricFlowTracking | UndefinedType = Undefined,
            fabric_ip_addressing: FabricIpAddressing | UndefinedType = Undefined,
            fabric_name: str | UndefinedType = Undefined,
            fabric_numbering: FabricNumbering | UndefinedType = Undefined,
            fabric_numbering_node_id_pool: str | UndefinedType = Undefined,
            fabric_sflow: FabricSflow | UndefinedType = Undefined,
            flow_tracking_settings: FlowTrackingSettings | UndefinedType = Undefined,
            generate_cv_tags: GenerateCvTags | UndefinedType = Undefined,
            hardware_counters: EosCliConfigGen.HardwareCounters | UndefinedType = Undefined,
            inband_ztp_bootstrap_file: str | None | UndefinedType = Undefined,
            internal_vlan_order: InternalVlanOrder | UndefinedType = Undefined,
            ipsec_settings: IpsecSettings | UndefinedType = Undefined,
            ipv4_acls: Ipv4Acls | UndefinedType = Undefined,
            ipv4_prefix_list_catalog: Ipv4PrefixListCatalog | UndefinedType = Undefined,
            ipv6_mgmt_destination_networks: Ipv6MgmtDestinationNetworks | UndefinedType = Undefined,
            ipv6_mgmt_gateway: str | None | UndefinedType = Undefined,
            is_deployed: bool | UndefinedType = Undefined,
            isis_advertise_passive_only: bool | UndefinedType = Undefined,
            isis_area_id: str | UndefinedType = Undefined,
            isis_default_circuit_type: Literal["level-1-2", "level-1", "level-2"] | UndefinedType = Undefined,
            isis_default_is_type: Literal["level-1-2", "level-1", "level-2"] | UndefinedType = Undefined,
            isis_default_metric: int | UndefinedType = Undefined,
            isis_maximum_paths: int | UndefinedType = Undefined,
            isis_system_id_format: Literal["node_id", "underlay_loopback"] | UndefinedType = Undefined,
            isis_ti_lfa: IsisTiLfa | UndefinedType = Undefined,
            l2vlan_profiles: L2vlanProfiles | UndefinedType = Undefined,
            l3_edge: L3Edge | UndefinedType = Undefined,
            l3_interface_profiles: L3InterfaceProfiles | UndefinedType = Undefined,
            load_interval: EosCliConfigGen.LoadInterval | UndefinedType = Undefined,
            local_users: EosCliConfigGen.LocalUsers | UndefinedType = Undefined,
            logging_settings: LoggingSettings | UndefinedType = Undefined,
            mac_address_table: EosCliConfigGen.MacAddressTable | UndefinedType = Undefined,
            management_eapi: ManagementEapi | UndefinedType = Undefined,
            mgmt_destination_networks: MgmtDestinationNetworks | UndefinedType = Undefined,
            mgmt_gateway: str | None | UndefinedType = Undefined,
            mgmt_interface: str | UndefinedType = Undefined,
            mgmt_interface_description: str | UndefinedType = Undefined,
            mgmt_interface_vrf: str | UndefinedType = Undefined,
            mgmt_vrf_routing: bool | UndefinedType = Undefined,
            mlag_bgp_peer_description: str | UndefinedType = Undefined,
            mlag_bgp_peer_group_description: str | UndefinedType = Undefined,
            mlag_ibgp_peering_vrfs: MlagIbgpPeeringVrfs | UndefinedType = Undefined,
            mlag_member_description: str | UndefinedType = Undefined,
            mlag_on_orphan_port_channel_downlink: bool | UndefinedType = Undefined,
            mlag_peer_l3_svi_description: str | UndefinedType = Undefined,
            mlag_peer_l3_vlan_name: str | UndefinedType = Undefined,
            mlag_peer_l3_vrf_svi_description: str | UndefinedType = Undefined,
            mlag_peer_l3_vrf_vlan_name: str | UndefinedType = Undefined,
            mlag_peer_svi_description: str | UndefinedType = Undefined,
            mlag_peer_vlan_name: str | UndefinedType = Undefined,
            mlag_port_channel_description: str | UndefinedType = Undefined,
            name_servers: NameServers | UndefinedType = Undefined,
            network_ports: NetworkPorts | UndefinedType = Undefined,
            network_services_keys: NetworkServicesKeys | UndefinedType = Undefined,
            custom_node_type_keys: CustomNodeTypeKeys | UndefinedType = Undefined,
            node_type_keys: NodeTypeKeys | UndefinedType = Undefined,
            ntp_settings: NtpSettings | UndefinedType = Undefined,
            only_local_vlan_trunk_groups: bool | UndefinedType = Undefined,
            overlay_bgp_peer_description: str | UndefinedType = Undefined,
            overlay_cvx_servers: OverlayCvxServers | UndefinedType = Undefined,
            overlay_her_flood_list_per_vni: bool | UndefinedType = Undefined,
            overlay_her_flood_list_scope: Literal["fabric", "dc"] | UndefinedType = Undefined,
            overlay_loopback_description: str | None | UndefinedType = Undefined,
            overlay_mlag_rfc5549: bool | UndefinedType = Undefined,
            overlay_rd_type: OverlayRdType | UndefinedType = Undefined,
            overlay_routing_protocol: Literal["ebgp", "ibgp", "cvx", "her", "none"] | None | UndefinedType = Undefined,
            overlay_routing_protocol_address_family: Literal["ipv4", "ipv6"] | UndefinedType = Undefined,
            overlay_rt_type: OverlayRtType | UndefinedType = Undefined,
            p2p_uplinks_mtu: int | UndefinedType = Undefined,
            p2p_uplinks_qos_profile: str | None | UndefinedType = Undefined,
            custom_platform_settings: CustomPlatformSettings | UndefinedType = Undefined,
            platform_settings: PlatformSettings | UndefinedType = Undefined,
            platform_speed_groups: PlatformSpeedGroups | UndefinedType = Undefined,
            pod_name: str | None | UndefinedType = Undefined,
            port_profiles: PortProfiles | UndefinedType = Undefined,
            ptp_profiles: PtpProfiles | UndefinedType = Undefined,
            ptp_settings: PtpSettings | UndefinedType = Undefined,
            queue_monitor_length: QueueMonitorLength | UndefinedType = Undefined,
            queue_monitor_streaming: EosCliConfigGen.QueueMonitorStreaming | UndefinedType = Undefined,
            redundancy: Redundancy | UndefinedType = Undefined,
            router_id_loopback_description: str | UndefinedType = Undefined,
            serial_number: str | None | UndefinedType = Undefined,
            sflow_settings: SflowSettings | UndefinedType = Undefined,
            shutdown_bgp_towards_undeployed_peers: bool | UndefinedType = Undefined,
            shutdown_interfaces_towards_undeployed_peers: bool | UndefinedType = Undefined,
            snmp_settings: SnmpSettings | UndefinedType = Undefined,
            source_interfaces: SourceInterfaces | UndefinedType = Undefined,
            ssh_settings: SshSettings | UndefinedType = Undefined,
            svi_profiles: SviProfiles | UndefinedType = Undefined,
            system_mac_address: str | None | UndefinedType = Undefined,
            terminattr_disable_aaa: bool | UndefinedType = Undefined,
            terminattr_ingestexclude: str | UndefinedType = Undefined,
            terminattr_ingestgrpcurl_port: int | UndefinedType = Undefined,
            terminattr_smashexcludes: str | UndefinedType = Undefined,
            timezone: str | None | UndefinedType = Undefined,
            trunk_groups: TrunkGroups | UndefinedType = Undefined,
            type: str | None | UndefinedType = Undefined,
            underlay_filter_peer_as: bool | UndefinedType = Undefined,
            underlay_filter_redistribute_connected: bool | UndefinedType = Undefined,
            underlay_ipv6: bool | UndefinedType = Undefined,
            underlay_ipv6_numbered: bool | UndefinedType = Undefined,
            underlay_isis_authentication_cleartext_key: str | None | UndefinedType = Undefined,
            underlay_isis_authentication_key: str | None | UndefinedType = Undefined,
            underlay_isis_authentication_mode: Literal["md5", "text"] | None | UndefinedType = Undefined,
            underlay_isis_bfd: bool | UndefinedType = Undefined,
            underlay_isis_instance_name: str | None | UndefinedType = Undefined,
            underlay_l2_ethernet_description: str | UndefinedType = Undefined,
            underlay_l2_port_channel_description: str | UndefinedType = Undefined,
            underlay_multicast: bool | UndefinedType = Undefined,
            underlay_multicast_pim_sm: bool | None | UndefinedType = Undefined,
            underlay_multicast_static: bool | UndefinedType = Undefined,
            underlay_multicast_anycast_rp: UnderlayMulticastAnycastRp | UndefinedType = Undefined,
            underlay_multicast_rps: UnderlayMulticastRps | UndefinedType = Undefined,
            underlay_ospf_area: str | UndefinedType = Undefined,
            underlay_ospf_authentication: UnderlayOspfAuthentication | UndefinedType = Undefined,
            underlay_ospf_bfd_enable: bool | UndefinedType = Undefined,
            underlay_ospf_graceful_restart: bool | UndefinedType = Undefined,
            underlay_ospf_max_lsa: int | UndefinedType = Undefined,
            underlay_ospf_maximum_paths: int | None | UndefinedType = Undefined,
            underlay_ospf_process_id: int | UndefinedType = Undefined,
            underlay_rfc5549: bool | UndefinedType = Undefined,
            underlay_routing_protocol: Literal["ebgp", "ospf", "ospf-ldp", "isis", "isis-sr", "isis-ldp", "isis-sr-ldp", "none"]
            | None
            | UndefinedType = Undefined,
            unsupported_transceiver: EosCliConfigGen.ServiceUnsupportedTransceiver | UndefinedType = Undefined,
            uplink_ptp: UplinkPtp | UndefinedType = Undefined,
            use_cv_topology: bool | None | UndefinedType = Undefined,
            use_router_general_for_router_id: bool | UndefinedType = Undefined,
            vtep_loopback_description: str | UndefinedType = Undefined,
            vtep_vvtep_ip: str | None | UndefinedType = Undefined,
            wan_carriers: WanCarriers | UndefinedType = Undefined,
            wan_encapsulation: Literal["path-selection", "vxlan"] | UndefinedType = Undefined,
            wan_ha: WanHa | UndefinedType = Undefined,
            wan_ipsec_profiles: WanIpsecProfiles | UndefinedType = Undefined,
            wan_mode: Literal["autovpn", "cv-pathfinder"] | UndefinedType = Undefined,
            wan_path_groups: WanPathGroups | UndefinedType = Undefined,
            wan_route_servers: WanRouteServers | UndefinedType = Undefined,
            wan_stun_dtls_disable: bool | UndefinedType = Undefined,
            wan_stun_dtls_profile_name: str | UndefinedType = Undefined,
            wan_use_agent_env_var_for_kernel_software_forwarding_ecmp: bool | UndefinedType = Undefined,
            wan_use_evpn_node_settings_for_lan: bool | UndefinedType = Undefined,
            wan_virtual_topologies: WanVirtualTopologies | UndefinedType = Undefined,
            zscaler_endpoints: ZscalerEndpoints | UndefinedType = Undefined,
            _custom_structured_configurations: _CustomStructuredConfigurations | UndefinedType = Undefined,
            _dynamic_keys: _DynamicKeys | UndefinedType = Undefined,
        ) -> None:
            """
            EosDesigns.


            Subclass of EosDesignsRootModel.

            Args:
                aaa_settings: Subclass of AvdModel.
                address_locking_settings: Subclass of AvdModel.
                application_classification: Application traffic recognition configuration.
                avd_6_behaviors:
                   Opt-in to AVD 6 behaviors. These behaviors will be the default behaviors in AVD 6.0.

                   Subclass of
                   AvdModel.
                avd_data_validation_mode:
                   Validation Mode for AVD input data validation.
                   Input data validation will validate the input
                   variables according to the schema.
                   During validation, messages will generated with information about
                   the host(s) and key(s) which failed validation.
                   "error" will produce error messages and fail the
                   task.
                   "warning" will produce warning messages.
                avd_digital_twin_mode:
                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                   change at any time.
                   Enable generation of the Digital Twin version of the fabric (Digital Twin
                   topology, adjusted configuration, etc.).
                   By default, Digital Twin artifacts (such as the topology
                   file, adjusted structured and EOS configuration, device and fabric documentation) will replace
                   original fabric artifacts.
                   To keep Digital Twin artifacts separate, adjust the `output_dir_name` and
                   `documentation_dir_name` variables for both `eos_designs` and `eos_cli_config_gen` to point to a
                   dedicated output location.
                avd_eos_designs_debug: Dump all vars and facts per device after generating `avd_switch_facts`.
                avd_eos_designs_enforce_duplication_checks_across_all_models:
                   PREVIEW: This option is marked as "preview", while we refactor the code to conform to the described
                   behavior.
                   When this is enabled, the generation of Structured Config in `eos_designs` will prevent
                   duplicate objects generated
                   by different input models. This will also improve performance since
                   `eos_designs` will not maintain separate copied of the Structured Configuration.
                   As an example, if
                   you define an Ethernet interface under `l3_edge` and use the same interface for connectivity under
                   `servers`:
                   - With this option disabled (default), AVD will merge these configurations together for
                   the interface and not raise an error.
                   - With this option enabled, AVD will raise an error about
                   duplicate interface definitions.
                avd_eos_designs_structured_config: Generate structured configuration per device.
                avd_eos_designs_unset_facts:
                   Unset `avd_switch_facts` to gain a small performance improvement since Ansible needs to handle fewer
                   variables.
                bfd_multihop:
                   BFD Multihop tuning.

                   Subclass of AvdModel.
                bgp_as:
                   BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>" to use to configure
                   overlay when "overlay_routing_protocol" == ibgp.
                   For asdot notation in YAML inputs, the value must
                   be put in quotes, to prevent it from being interpreted as a float number.
                bgp_default_ipv4_unicast:
                   Default activation of IPv4 unicast address-family on all IPv4 neighbors.
                   It is best practice to
                   disable activation.
                bgp_distance: bgp_distance
                bgp_ecmp:
                   Maximum ECMP for BGP multi-path.
                   The default value is 4 except for WAN Routers where the default
                   value is unset (falls back to EOS default).
                bgp_graceful_restart:
                   BGP graceful-restart allows a BGP speaker with separate control plane and data plane processing to
                   continue forwarding traffic during a BGP restart.
                   Its neighbors (receiving speakers) may retain
                   routing information from the restarting speaker while a BGP session with it is being re-established,
                   reducing route flapping.


                   Subclass of AvdModel.
                bgp_maximum_paths:
                   Maximum Paths for BGP multi-path.
                   The default value is 4 except for WAN Routers where the default
                   value is 16.
                bgp_mesh_pes:
                   Configure an iBGP full mesh between PEs, either because there is no RR used or other reasons.
                   Only
                   supported in combination with MPLS overlay.
                bgp_peer_groups:
                   Leverage an Arista EOS switch to generate the encrypted password using the correct peer group name.
                   Note that the name of the peer groups use '-' instead of '_' in EOS configuration.


                   Subclass of
                   AvdModel.
                bgp_update_wait_install:
                   Do not advertise reachability to a prefix until that prefix has been installed in hardware.
                   This
                   will eliminate any temporary black holes due to a BGP speaker advertising reachability to a prefix
                   that may not yet be installed into the forwarding plane.
                bgp_update_wait_for_convergence:
                   Disables FIB updates and route advertisement when the BGP instance is initiated until the BGP
                   convergence state is reached.
                campus:
                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                   change at any time.
                   Name of the Campus fabric.
                   Used to generate CloudVision device tags with the
                   `generate_cv_tags.campus_fabric` feature.
                campus_access_pod:
                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                   change at any time.
                   Name of the Campus access pod.
                   Used to generate CloudVision device tags with the
                   `generate_cv_tags.campus_fabric` feature.
                campus_pod:
                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                   change at any time.
                   Name of the Campus pod.
                   Used to generate CloudVision device tags with the
                   `generate_cv_tags.campus_fabric` feature.
                custom_connected_endpoints_keys:
                   `custom_connected_endpoints_keys` offers a flexible way to extend endpoint definitions without
                   altering the `connected_endpoints_keys`.
                   The values defined in `custom_connected_endpoints_keys`,
                   are prepended to the ones in `connected_endpoint_keys`, taking precedence over any values in
                   `connected_endpoint_keys`.
                   This approach helps preserving the default `connected_endpoints_keys`,
                   unlike directly overriding it.

                   Subclass of AvdIndexedList with `CustomConnectedEndpointsKeysItem`
                   items. Primary key is `key` (`str`).
                connected_endpoints_keys:
                   Endpoints connecting to the fabric can be grouped by using separate keys.
                   The keys can be customized
                   to provide a better organization or grouping of your data.
                   `connected_endpoints_keys` should be
                   defined in the top level group_vars for the fabric.
                   The default values will be overridden if
                   defining this key, so it is recommended to copy the defaults and modify them.
                   If you need to add
                   custom `connected_endpoints_keys`, create them under `custom_connected_endpoints_keys`.
                   Entries
                   under `custom_connected_endpoint_keys` will take precedence over entries in
                   `connected_endpoint_keys`.


                   Subclass of AvdIndexedList with `ConnectedEndpointsKeysItem` items.
                   Primary key is `key` (`str`).
                core_interfaces: Subclass of AvdModel.
                custom_structured_configuration_list_merge:
                   The List-merge strategy used when merging custom structured configurations.

                   This applies to all
                   vars prefixed by prefixes in `custom_structured_configuration_prefix`
                   and all data under the various
                   `structured_config` options.

                   The available list merge strategies:
                   - `replace`:
                     - Any list will be
                   replaced with the list defined in custom structured configurations.
                   - `append`:
                     - Existing list
                   items with the same "Primary key"-value will be updated.
                     - New items will be appended to the
                   existing list (including duplicates).
                   - `keep`:
                     - Only set list if there is no existing list or
                   existing list is `None`.
                   - `prepend`:
                     - Existing list items with the same "Primary key"-value will
                   be updated.
                     - New items will be prepended to the existing list (including duplicates).
                   -
                   `append_rp`:
                     - Existing list items with the same "Primary key"-value will be updated.
                     - New
                   unique items will be appended to the existing list.
                   - `prepend_rp`:
                     - Existing list items with the
                   same "Primary key"-value will be updated.
                     - New unique items will be prepended to the existing
                   list.
                custom_structured_configuration_prefix:
                   Custom EOS Structured Configuration keys can be set on any group or host_var level using the name
                   of
                   the corresponding `eos_cli_config_gen` key prefixed with content of
                   `custom_structured_configuration_prefix`.

                   The content of Custom Structured Configuration variables
                   will be merged with the structured config generated by the eos_designs role.

                   The merge is done
                   recursively, so it is possible to update a sub-key of a variable set by `eos_designs` role already.
                   The merge follow these recursive merge strategies:
                   - New keys will be added for all types.
                   -
                   Existing keys of type "List" with a "Primary key" set in the schema:
                     - Strategy can be changed
                   with `custom_structured_configuration_list_merge`. Default strategy:
                       - Existing list items with
                   the same "Primary key"-value will be updated.
                       - New unique items will be appended to the
                   existing list
                   - Other keys of type "List" will have new unique items appended the the existing list.
                   - Existing keys of type "Dictionary" will recursively merge
                   - Other existing keys will be replaced.
                   Subclass of AvdList with `str` items.
                cv_pathfinder_global_sites:
                   Define sites that are outside of the CV Pathfinder hierarchy.
                   This is used to arrange pathfinders in
                   the CloudVision topology layout.

                   Subclass of AvdIndexedList with `CvPathfinderGlobalSitesItem`
                   items. Primary key is `name` (`str`).
                cv_pathfinder_internet_exit_policies:
                   PREVIEW: These keys are in preview mode.

                   List of internet-exit policies used for the WAN
                   configuration.

                   Subclass of AvdIndexedList with `CvPathfinderInternetExitPoliciesItem` items.
                   Primary key is `name` (`str`).
                cv_pathfinder_regions:
                   Define the CV Pathfinder hierarchy.

                   Subclass of AvdIndexedList with `CvPathfinderRegionsItem`
                   items. Primary key is `name` (`str`).
                cv_server:
                   PREVIEW: These keys are in preview mode.

                   Hostname or IP address of CloudVision host. Ex.
                   "www.arista.io" for CVaaS.
                   For `eos_designs` this variable is only used for the WAN Internet-exit
                   integration with Zscaler.
                   The same variable name is also used by the `cv_deploy` role, and will
                   override the value of `ansible_host` on inventory 'cloudvision' host.
                   Make sure to set it in a
                   common group_vars file.
                cv_settings:
                   Settings for CloudVision telemetry streaming and provisioning.

                   Subclass of AvdModel.
                cv_tags_topology_type:
                   Device type that CloudVision should use when generating the Topology like "leaf", "spine", "core",
                   "edge" or "member-leaf". Defaults to the setting under node_type_keys.
                cv_token:
                   PREVIEW: These keys are in preview mode.

                   Service account token as defined on CloudVision. This
                   value should be using Ansible Vault.
                   For `eos_designs` this variable is only used for the WAN
                   Internet-exit integration with Zscaler.
                   The same variable name is also used by the `cv_deploy` role,
                   and will override the value of `ansible_password` on inventory 'cloudvision' host.
                   Make sure to set
                   it in a common group_vars file.
                cv_topology:
                   Generate AVD configurations directly from the given CloudVision topology.
                   Activate this feature by
                   setting `use_cv_topology` to `true`.
                   Requires `default_interfaces` to be set for the relevant
                   platforms and node types to detect the proper interface roles automatically.
                   Neighbor hostnames must
                   match the inventory hostnames of the AVD inventory to be taken into consideration.

                   Subclass of
                   AvdIndexedList with `CvTopologyItem` items. Primary key is `hostname` (`str`).
                cvp_ingestauth_key:
                   On-premise CVP ingest auth key. If set, TerminAttr will be configured with key-based authentication
                   for on-premise CVP.
                   If not set, TerminAttr will be configured with certificate based authentication:
                   - On-premise using token onboarding. Default token path is '/tmp/token'.
                   - CVaaS using token-secure
                   onboarding. Default token path is '/tmp/cv-onboarding-token'.
                   Token must be copied to the device
                   first.
                cvp_instance_ips:
                   List of IPv4 addresses or DNS names for CloudVision.
                   For on-premise CloudVision enter all the nodes
                   of the cluster.
                   For CloudVision as a Service enter the DNS name of the instance.
                   `eos_designs` only
                   supports one CloudVision cluster.


                   Subclass of AvdList with `str` items.
                cvp_token_file:
                   cvp_token_file is the path to the token file on the switch.
                   If not set the default locations for on-
                   premise or CVaaS will be used.
                   See cvp_ingestauth_key for details.
                dc_name:
                   DC Name is used in:
                   - Fabric Documentation (Optional, falls back to fabric_name)
                   - SNMP Location:
                   `snmp_settings.location` (Optional)
                   - HER Overlay DC scoped flood lists:
                   `overlay_her_flood_list_scope: dc` (Required)
                default_connected_endpoints_description:
                   Default description or description template to be used on all ports to connected endpoints.
                   This can
                   be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `endpoint_type`: The `type` from `connected_endpoints_keys` like `server`, `router` etc.
                     -
                   `endpoint`: The name of the connected endpoint
                     - `endpoint_port`: The value from `endpoint_ports`
                   for this switch port if set.
                     - `port_channel_id`: The port-channel number for the switch.

                   By
                   default the description is templated from the type, name and port of the endpoint if set.
                default_connected_endpoints_port_channel_description:
                   Default description or description template to be used on all port-channels to connected endpoints.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `endpoint_type`: The `type` from `connected_endpoints_keys` like `server`, `router` etc.
                     -
                   `endpoint`: The name of the connected endpoint
                     - `endpoint_port_channel`: The value of
                   `endpoint_port_channel` if set.
                     - `port_channel_id`: The port-channel number for the switch.
                     -
                   `adapter_description`: The adapter's description if set.
                     - `adapter_description_or_endpoint`:
                   Helper alias of the adapter_description or endpoint.

                   By default the description is templated from
                   the type, name and port-channel name of the endpoint if set.
                default_igmp_snooping_enabled: When set to false, disables IGMP snooping at fabric level and overrides per vlan settings.
                default_interface_mtu:
                   Default interface MTU configured on EOS under "interface defaults".
                   Can be overridden per platform
                   under platform settings.
                default_interfaces:
                   Default uplink, downlink, and MLAG interfaces, which will be used if these interfaces are not
                   defined on a device (either directly or through inheritance).


                   Subclass of AvdList with
                   `DefaultInterfacesItem` items.
                default_mgmt_method:
                   `default_mgmt_method` controls the default VRF and source interface used for the following
                   management and monitoring protocols configured with `eos_designs`:
                     - `aaa_settings`
                     -
                   `cv_settings`
                     - `logging_settings`
                     - `management_eapi`
                     - `ntp_settings`
                     - `sflow_settings`
                   - `snmp_settings`
                     - `ssh_settings`

                   `oob` means the protocols will be configured with the VRF set
                   by `mgmt_interface_vrf` and `mgmt_interface` as the source interface.
                   `inband` means the protocols
                   will be configured with the VRF set by `inband_mgmt_vrf` and `inband_mgmt_interface` as the source
                   interface.
                   `none` means the VRF and or interface must be manually set for each protocol.
                   This can be
                   overridden under the settings for each protocol.
                default_network_ports_description:
                   Default description or description template to be used on all ports defined under `network_ports`.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `endpoint_type`: Always set to `network_port`.
                     - `endpoint`: The value of the `endpoint` key if
                   set.
                     - `port_channel_id`: The port-channel number for the switch.

                   By default the description is
                   templated from the `endpoint` key if set.
                default_network_ports_port_channel_description:
                   Default description or description template to be used on all port-channels defined under
                   `network_ports`.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `endpoint_type`: Always set to `network_port`.
                     - `endpoint`: The value of the `endpoint` key if
                   set.
                     - `endpoint_port_channel`: The value of `endpoint_port_channel` if set.
                     -
                   `port_channel_id`: The port-channel number for the switch.
                     - `adapter_description`: The adapter's
                   description if set.
                     - `adapter_description_or_endpoint`: Helper alias of the adapter_description
                   or endpoint.

                   By default the description is templated from the `endpoint` key if set.
                default_node_types:
                   Uses hostname matches against a regular expression to determine the node type.

                   Subclass of
                   AvdIndexedList with `DefaultNodeTypesItem` items. Primary key is `node_type` (`str`).
                default_underlay_p2p_ethernet_description:
                   The default description or description template to be used on L3 point-to-point ethernet interfaces.
                   The interfaces using this are the routed uplinks and `p2p_links` defined under `l3_edge` or
                   `core_interfaces`.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     - `peer`:
                   The name of the peer.
                     - `interface`: The local interface name.
                     - `peer_interface`: The interface
                   on the peer.
                     - `vrf`: The name of the VRF if set (Only applicable for `uplink_type: p2p-vrfs`).
                   By default the description is templated from the name and interface of the peer.
                default_underlay_p2p_port_channel_description:
                   The default description or description template to be used on L3 point-to-point port-channel
                   interfaces.
                   The port-channels using this are `p2p_links` defined under `l3_edge` or
                   `core_interfaces`.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     - `peer`:
                   The name of the peer.
                     - `interface`: The local interface name.
                     - `peer_interface`: The interface
                   on the peer.
                     - `port_channel_id`: The local port-channel ID.
                     - `peer_port_channel_id`: The ID of
                   the port-channel on the peer.

                   By default the description is templated from the name and interface
                   of the peer.
                default_vrf_diag_loopback_description:
                   The default description or description template to be used on VRF diagnostic loopback interfaces.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `interface`: The Loopback interface name.
                     - `vrf`: The VRF name.
                     - `tenant`: The tenant name.
                   By default the description is templated from the VRF name.
                design: Subclass of AvdModel.
                digital_twin:
                   PREVIEW: This option is marked as "preview", meaning the data models or generated configuration can
                   change at any time.
                   Global settings to configure the Digital Twin of the Fabric.

                   Subclass of
                   AvdModel.
                dns_settings:
                   DNS settings

                   Subclass of AvdModel.
                enable_trunk_groups:
                   Enable Trunk Group support across eos_designs.
                   Warning: Because of the nature of the EOS Trunk Group
                   feature, enabling this is "all or nothing".
                   *All* vlans and *all* trunks towards connected endpoints
                   must be using trunk groups as well.
                   If trunk groups are not assigned to a trunk, no vlans will be
                   enabled on that trunk.
                   See "Details on enable_trunk_groups" below before enabling this feature.
                eos_designs_custom_templates: Subclass of AvdList with `EosDesignsCustomTemplatesItem` items.
                eos_designs_documentation:
                   Control fabric documentation generation.


                   Subclass of AvdModel.
                event_handlers:
                   Gives the ability to monitor and react to Syslog messages.
                   Event Handlers provide a powerful and
                   flexible tool that can be used to apply self-healing actions,
                   customize the system behavior, and
                   implement workarounds to problems discovered in the field.
                event_monitor: event_monitor
                evpn_ebgp_gateway_inter_domain: evpn_ebgp_gateway_inter_domain
                evpn_ebgp_gateway_multihop:
                   Default of 15, considering a large value to avoid BGP reachability issues in very complex DCI
                   networks.
                   Adapt the value for your specific topology.
                evpn_ebgp_multihop:
                   Default of 3, the recommended value for a 3 stage spine and leaf topology.
                   Set to a higher value to
                   allow for very large and complex topologies.
                evpn_hostflap_detection: Subclass of AvdModel.
                evpn_import_pruning:
                   Enable VPN import pruning (Min. EOS 4.24.2F).
                   The Route Target extended communities carried by
                   incoming VPN paths will be examined.
                   If none of those Route Targets have been configured for import,
                   the path will be immediately discarded.
                evpn_multicast:
                   General Configuration required for EVPN Multicast. "evpn_l2_multicast" or "evpn_l3_multicast" must
                   also be configured under the Network Services (tenants).
                   Requires `underlay_multicast_pim_sm: true`
                   and IGMP snooping enabled globally (default).
                   For MLAG devices Route Distinguisher must be unique
                   since this feature will create multi-vtep configuration.
                   Warning !!! For Trident3 based platforms
                   i.e 7050X3, 7300X3, 720XP.
                     The Following default platform setting will be configured on 7050X3 and
                   7300X3: "platform trident forwarding-table partition flexible exact-match 16384 l2-shared 98304
                   l3-shared 131072"
                     The Following default platform setting will be configured on 720XP: "flexible
                   exact-match 16000 l2-shared 18000 l3-shared 22000"
                     All forwarding agents will be restarted when
                   this configuration is applied.
                     You can tune the settings by overriding the default variable:
                   "platform_settings[platforms].trident_forwarding_table_partition:"
                     Please contact an Arista
                   representative for help with determining the appropriate values for your environment.
                evpn_overlay_bgp_rtc:
                   Enable Route Target Membership Constraint Address Family on EVPN overlay BGP peerings (Min. EOS
                   4.25.1F).
                   Requires use eBGP as overlay protocol.
                evpn_prevent_readvertise_to_server:
                   Configure route-map on eBGP sessions towards route-servers, where prefixes with the peer's ASN in
                   the AS Path are filtered away.
                   This is very useful in large-scale networks, where convergence will
                   be quicker by not returning all updates received
                   from Route-server-1 to Router-server-2 just for
                   Route-server-2 to throw them away because of AS Path loop detection.
                evpn_short_esi_prefix: Configure prefix for "short_esi" values.
                evpn_vlan_aware_bundles:
                   Enable VLAN aware bundles for every EVPN MAC-VRF.
                   If set to `true` all SVIs in a VRF are configured
                   in a vlan-aware-bundle using the VRF name as the bundle name. `l2vlans` are bundled in vlan-aware-
                   bundles using the VLAN name as the bundle name.

                   The `evpn_vlan_bundle` option under `svis` and
                   `l2vlans` takes precedence and overrides this behavior. Per svi/l2vlan `evpn_vlan_bundle` also works
                   when this setting is disabled which allow mixing vlan-aware-bundles with regular MAC-VRFs.
                evpn_vlan_bundles: Subclass of AvdIndexedList with `EvpnVlanBundlesItem` items. Primary key is `name` (`str`).
                fabric_evpn_encapsulation:
                   Should be set to mpls for evpn-mpls scenario. This overrides the evpn_encapsulation setting under
                   node_type_keys.
                fabric_flow_tracking:
                   Default enabling of flow-tracking(IPFIX) for various interface types across the fabric.
                   Flow
                   Tracking can also be enabled/disabled under each of the specific data models.
                   For general flow-
                   tracking settings see `flow_tracking_settings`.

                   Subclass of AvdModel.
                fabric_ip_addressing: Subclass of AvdModel.
                fabric_name:
                   Fabric Name, required to match Ansible Group name covering all devices in the Fabric, **must** be an
                   inventory group name.
                fabric_numbering:
                   PREVIEW: This feature is in marked as "preview", which means it is subject to change at any time.
                   Assignment policies for numbers like Node ID.

                   Subclass of AvdModel.
                fabric_numbering_node_id_pool:
                   Name of Node ID pool or template used to render the name of each Node ID pool.
                   For each device the
                   Node ID is assigned from a pool shared by all devices rendering the same pool name.
                   This can be
                   modified to include fewer or more fields to keep separate pools or to use the same pool across
                   areas.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `fabric_name`: The `fabric_name` assigned to the device.
                     - `dc_name`: The `dc_name` assigned to
                   the device.
                     - `pod_name`: The `pod_name` assigned to the device.
                     - `type`: The `type` assigned
                   to the device.
                     - `rack`: The `rack` assigned to the device.

                   By default the Node ID pool key is
                   templated from `fabric_name`, `dc_name`, `pod_name` and `type`.
                fabric_sflow:
                   Default enabling of sFlow for various interface types across the fabric.
                   sFlow can also be
                   enabled/disabled under each of the specific data models.
                   For general sFlow settings see
                   `sflow_settings`.

                   Subclass of AvdModel.
                flow_tracking_settings:
                   Define the flow tracking parameters for this topology.

                   Subclass of AvdModel.
                generate_cv_tags:
                   Generate CloudVision Tags based on AVD data.

                   Subclass of AvdModel.
                hardware_counters: hardware_counters
                inband_ztp_bootstrap_file:
                   Bootstrap URL configured in DHCP to use for inband ZTP.
                   If not set and `cvp_instance_ips` is set
                   then the bootstrap value will be set to:
                       `https://{cvp_instance_ips[0]}/ztp/bootstrap`
                   Otherwise
                   no value will be configured.
                internal_vlan_order:
                   Internal vlan allocation order and range.

                   Subclass of AvdModel.
                ipsec_settings:
                   Settings applicable to all IPsec connections.

                   Subclass of AvdModel.
                ipv4_acls:
                   IPv4 extended access-lists supporting substitution on certain fields.
                   These access-lists can be
                   referenced under node settings `l3_interfaces`, and will only be configured on devices where they
                   are in use.

                   The substitution is useful when assigning the same access-list on multiple interfaces,
                   but where certain fields require unique values like the "interface_ip" or "peer_ip".
                   When using
                   substitution, the interface name will be appended to the ACL name.

                   Subclass of AvdIndexedList with
                   `Ipv4AclsItem` items. Primary key is `name` (`str`).
                ipv4_prefix_list_catalog:
                   IPv4 prefix-list catalog.
                   Note: Entries defined in `ipv4_prefix_list_catalog` are only rendered in
                   the configuration when
                   they are explicitly referenced in one of the following node config keys:
                   -
                   `l3_interfaces.[].bgp.ipv4_prefix_list_in`
                   - `l3_interfaces.[].bgp.ipv4_prefix_list_out`
                   -
                   `l3_port_channels.[].bgp.ipv4_prefix_list_in`
                   - `l3_port_channels.[].bgp.ipv4_prefix_list_out`.
                   Subclass of AvdIndexedList with `Ipv4PrefixListCatalogItem` items. Primary key is `name` (`str`).
                ipv6_mgmt_destination_networks:
                   List of IPv6 prefixes to configure as static routes towards the OOB IPv6 Management interface
                   gateway.
                   Replaces the default route.


                   Subclass of AvdList with `str` items.
                ipv6_mgmt_gateway:
                   OOB Management interface gateway in IPv6 format.
                   Used as next-hop for default gateway or static
                   routes defined under 'ipv6_mgmt_destination_networks'.
                is_deployed:
                   If the device is already deployed in the fabric.
                   When set to false:
                     - The `cv_deploy` role will
                   not apply configurations to this device.
                     - Peer interfaces toward this device may be shutdown
                   based on the `shutdown_interfaces_towards_undeployed_peers` setting.
                     - BGP peerings toward this
                   device may be shutdown based on the `shutdown_bgp_towards_undeployed_peers` setting.
                     - Validation
                   tests by the `anta_runner` role are automatically skipped for this device.
                isis_advertise_passive_only: isis_advertise_passive_only
                isis_area_id: isis_area_id
                isis_default_circuit_type:
                   These fabric level parameters can be used with core_interfaces running ISIS, and may be overridden
                   on link profile or link level.
                isis_default_is_type: isis_default_is_type
                isis_default_metric:
                   These fabric level parameters can be used with core_interfaces running ISIS, and may be overridden
                   at link profile or link level.
                isis_maximum_paths: Number of path to configure in ECMP for ISIS.
                isis_system_id_format:
                   Configures source for the system-id within the ISIS net id.
                   If this key is set to `node_id`, the
                   fields `id` and `isis_system_id_prefix` configured under the node attributes are used to generate
                   the system-id.
                   If `underlay_loopback` is selected then all node `isis_system_id_prefix` settings
                   will be ignored and the loopback address will be used to generate the system-id.
                isis_ti_lfa: Subclass of AvdModel.
                l2vlan_profiles:
                   Profiles to inherit common settings for l2vlans defined under the network_services key.

                   Subclass of
                   AvdIndexedList with `L2vlanProfilesItem` items. Primary key is `profile` (`str`).
                l3_edge: Subclass of AvdModel.
                l3_interface_profiles:
                   Profiles to inherit common settings for l3_interfaces defined under the node type key.
                   These
                   profiles will *not* work for `l3_interfaces` defined under `vrfs`.

                   Subclass of AvdIndexedList with
                   `L3InterfaceProfilesItem` items. Primary key is `profile` (`str`).
                load_interval: load_interval
                local_users: local_users
                logging_settings:
                   Logging settings

                   Subclass of AvdModel.
                mac_address_table: mac_address_table
                management_eapi:
                   Default is HTTPS management eAPI enabled.


                   Subclass of AvdModel.
                mgmt_destination_networks:
                   List of IPv4 prefixes to configure as static routes towards the OOB Management interface gateway.
                   Replaces the default route.

                   Subclass of AvdList with `str` items.
                mgmt_gateway:
                   OOB Management interface gateway in IPv4 format.
                   Used as next-hop for default gateway or static
                   routes defined under 'mgmt_destination_networks'.
                mgmt_interface: OOB Management interface.
                mgmt_interface_description: Management interface description.
                mgmt_interface_vrf: OOB Management VRF.
                mgmt_vrf_routing: Configure IP routing for the OOB Management VRF.
                mlag_bgp_peer_description:
                   Description or description template to be used on the MLAG BGP peers including those in VRFs.
                   This
                   can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `interface`: The local MLAG L3 VLAN interface.
                     -
                   `peer_interface`: The MLAG L3 VLAN interface on the MLAG peer.
                     - `vrf`: The name of the VRF. Not
                   available for the underlay peering.

                   The default description is built from the name and interface of
                   the MLAG peer and optionally the VRF.
                mlag_bgp_peer_group_description:
                   Description or description template to be used on the MLAG BGP peer-group.
                   This can be a template
                   using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.

                   The default description is the name of the MLAG peers.
                mlag_ibgp_peering_vrfs:
                   On mlag leafs, an SVI interface is defined per vrf, to establish iBGP peering (required when there
                   are MLAG leafs in topology).
                   The SVI id will be derived from the base vlan defined:
                   mlag_ibgp_peering_vrfs.base_vlan + (vrf_id or vrf_vni) - 1.
                   Depending on the values of vrf_id /
                   vrf_vni it may be required to adjust the base_vlan to avoid overlaps or invalid vlan ids.
                   The SVI ip
                   address derived from mlag_l3_peer_ipv4_pool is reused across all iBGP peerings.


                   Subclass of
                   AvdModel.
                mlag_member_description:
                   Description or description template to be used on MLAG peer-link ethernet interfaces.
                   This can be a
                   template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `interface`: The local MLAG port-channel interface.
                     -
                   `peer_interface`: The port-channel interface on the MLAG peer.
                     - `mlag_port_channel_id`: The local
                   MLAG port-channel ID.
                     - `mlag_peer_port_channel_id`: The port-channel ID on the MLAG peer.

                   By
                   default the description is templated from the name and interface of the MLAG peer.
                mlag_on_orphan_port_channel_downlink:
                   If `true` an MLAG ID will always be configured on a Port-Channel downlink even if the downlink is
                   only on one node in the MLAG pair.
                   If `false` (default) an MLAG ID will only be configured on Port-
                   Channel downlinks dual-homed to two MLAG switches.
                mlag_peer_l3_svi_description:
                   Description or description template to be used on MLAG L3 peering SVI (Interface Vlan4093 by
                   default).
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `interface`: The MLAG L3 peering SVI name.
                     -
                   `mlag_peer_l3_vlan`: The MLAG L3 peering VLAN ID.
                mlag_peer_l3_vlan_name:
                   Name or name template to be used on MLAG L3 VLAN (VLAN 4093 by default).
                   This can be a template
                   using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `mlag_peer_l3_vlan`: The MLAG L3 peering VLAN ID.
                mlag_peer_l3_vrf_svi_description:
                   Description or description template to be used on MLAG L3 peering SVI for VRFs.
                   This can be a
                   template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `interface`: The MLAG L3 VRF peering SVI name.
                     -
                   `vlan`: The MLAG L3 VRF peering VLAN ID.
                     - `vrf`: The VRF name.
                mlag_peer_l3_vrf_vlan_name:
                   Name or name template to be used on MLAG L3 peering VLAN for VRFs.
                   This can be a template using the
                   AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `vlan`: The MLAG L3 VRF peering VLAN ID.
                     - `vrf`: The
                   VRF name.
                mlag_peer_svi_description:
                   Description or description template to be used on MLAG peering SVI (Interface Vlan4094 by default).
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `interface`: The MLAG peering SVI name.
                     -
                   `mlag_peer_vlan`: The MLAG peering VLAN ID.
                mlag_peer_vlan_name:
                   Name or name template to be used on MLAG peering VLAN (VLAN 4094 by default).
                   This can be a template
                   using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `mlag_peer_vlan`: The MLAG peering VLAN ID.
                mlag_port_channel_description:
                   Description or description template to be used on MLAG peer-link port-channel interfaces.
                   This can
                   be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     -
                   `mlag_peer`: The name of the MLAG peer.
                     - `interface`: The local MLAG port-channel interface.
                     -
                   `peer_interface`: The port-channel interface on the MLAG peer.
                     - `mlag_port_channel_id`: The local
                   MLAG port-channel ID.
                     - `mlag_peer_port_channel_id`: The port-channel ID on the MLAG peer.

                   By
                   default the description is templated from the name and port-channel interface of the MLAG peer.
                name_servers:
                   List of DNS servers. The VRF is set to < mgmt_interface_vrf >.

                   Subclass of AvdList with `str`
                   items.
                network_ports: Subclass of AvdList with `NetworkPortsItem` items.
                network_services_keys:
                   Network Services can be grouped by using separate keys.
                   The keys can be customized to provide a
                   better better organization or grouping of your data.
                   `network_services_keys` should be defined in
                   the top level group_vars for the fabric.
                   The default values will be overridden if defining this key,
                   so it is recommended to copy the defaults and modify them.


                   Subclass of AvdIndexedList with
                   `NetworkServicesKeysItem` items. Primary key is `name` (`str`).
                custom_node_type_keys:
                   Define Custom Node Type Keys, to specify the properties of each node type in the fabric.
                   This allows
                   for complete customization of the fabric layout and functionality.
                   `custom_node_type_keys` should be
                   defined in top level group_var for the fabric.
                   These values will be combined with the defaults;
                   custom node type keys named the same as a
                   default node_type_key will replace the default.

                   Subclass
                   of AvdIndexedList with `CustomNodeTypeKeysItem` items. Primary key is `key` (`str`).
                node_type_keys:
                   Define Node Type Keys, to specify the properties of each node type in the fabric.
                   This allows for
                   complete customization of the fabric layout and functionality.
                   `node_type_keys` should be defined in
                   top level group_var for the fabric.

                   The default values will be overridden if this key is defined.
                   If you need to change all the existing `node_type_keys`, it is recommended to copy the defaults and
                   modify them.
                   If you need to add custom `node_type_keys`, create them under `custom_node_type_keys` -
                   if named identically to default `node_type_keys` entries,
                   custom entries will replace the equivalent
                   default entry.

                   Subclass of AvdIndexedList with `NodeTypeKeysItem` items. Primary key is `key`
                   (`str`).
                ntp_settings:
                   NTP settings

                   Subclass of AvdModel.
                only_local_vlan_trunk_groups:
                   A vlan can have many trunk_groups assigned.
                   To avoid unneeded configuration changes on all leaf
                   switches when a new trunk group is added,
                   this feature will only configure the vlan trunk groups
                   matched with local connected_endpoints.
                   See "Details on only_local_vlan_trunk_groups" below.
                   Requires "enable_trunk_groups: true".
                overlay_bgp_peer_description:
                   Description or description template to be used on the overlay BGP peers.
                   This can be a template
                   using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     - `peer`:
                   The name of the BGP peer.
                     - `peer_interface`: The interface on the BGP peer if available.

                   The
                   default description is built from the name and interface of the BGP peer.
                overlay_cvx_servers:
                   List of CVX vxlan overlay controllers.
                   Required if overlay_routing_protocol == CVX.
                   CVX servers
                   (VMs) are peering using their management interface, so mgmt_ip must be set for all CVX servers.
                   Subclass of AvdList with `str` items.
                overlay_her_flood_list_per_vni:
                   When using Head-End Replication, configure flood-lists per VNI.
                   By default HER will be configured
                   with a common flood-list containing all VTEPs.
                   This behavior can be changed to per-VNI flood-lists
                   by setting `overlay_her_flood_list_per_vni: true`.
                   This will make `eos_designs` consider configured
                   VLANs per VTEP, and only include the relevant VTEPs to each VNI's flood-list.
                overlay_her_flood_list_scope:
                   When using Head-End Replication, set the scope of flood-lists to Fabric or DC.
                   By default all VTEPs
                   in the Fabric (part of the inventory group referenced by "fabric_name") are added to the flood-
                   lists.
                   This can be changed to all VTEPs in the DC (sharing the same "dc_name" value).
                   This is useful
                   if Border Leaf switches are dividing the VXLAN overlay into separate domains.
                overlay_loopback_description: Customize the description on overlay interface Loopback0.
                overlay_mlag_rfc5549:
                   IPv6 Unnumbered for MLAG iBGP connections.
                   Requires "underlay_rfc5549: true".
                overlay_rd_type:
                   Configuration options for the Administrator subfield (first part of RD) and the Assigned Number
                   subfield (second part of RD).

                   By default Route Distinguishers (RD) are set to:
                   -
                   `<overlay_loopback>:<mac_vrf_id_base + vlan_id or mac_vrf_vni_base + vlan_id>` for VLANs and VLAN-
                   Aware Bundles with L2 vlans.
                   - `<overlay_loopback>:<vlan_aware_bundle_number_base + vrf_id>` for
                   VLAN-Aware Bundles with SVIs.
                   - `<overlay_loopback>:<vlan_aware_bundle_number_base + id>` for VLAN-
                   Aware Bundles defined under 'evpn_vlan_bundles'.
                   - `<overlay_loopback>:<vrf_id>` for VRFs.

                   Note:  # fmt: skip
                   RD
                   is a 48-bit value which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.
                   When using loopback or
                   32-bit ASN/number the assigned number can only be a 16-bit number. This may be a problem with large
                   VNIs.
                   For 16-bit ASN/number the assigned number can be a 32-bit number.


                   Subclass of AvdModel.
                overlay_routing_protocol:
                   - The following overlay routing protocols are supported:
                     - ebgp: Configures fabric with eBGP,
                   default for l3ls-evpn design.
                     - ibgp: Configured fabric with iBGP, only supported with OSPF or
                   ISIS variants in underlay, default for mpls design.
                     - cvx: Configures fabric to leverage
                   CloudVision eXchange as the overlay controller.
                     - her: Configures fabric with Head-End
                   Replication, configures static VXLAN flood-lists instead of using a dynamic overlay protocol.
                     -
                   none: No overlay configuration will be generated, default for l2ls design.

                     If not set, the
                   default_overlay_routing_protocol defined under the node_type_keys will be used (default is "ebgp").
                overlay_routing_protocol_address_family:
                   When set to `ipv6`, enable overlay EVPN peering with IPv6 addresses.
                   This feature depends on
                   underlay_ipv6 variable. As of today, only RFC5549 is capable to transport IPv6 in the underlay.
                overlay_rt_type:
                   Configuration options for the Administrator subfield (first part of RT) and the Assigned Number
                   subfield (second part of RT).

                   By default Route Targets (RT) are set to:
                   - `<(mac_vrf_id_base or
                   mac_vrf_vni_base) + vlan_id>:<(mac_vrf_id_base or mac_vrf_vni_base) + vlan_id>` for VLANs and VLAN-
                   Aware Bundles with L2 vlans.
                   - `<vlan_aware_bundle_number_base +
                   vrf_id>:<vlan_aware_bundle_number_base + vrf_id>` for VLAN-Aware Bundles with SVIs.
                   -
                   `<vlan_aware_bundle_number_base + id>:<vlan_aware_bundle_number_base + id>` for VLAN-Aware Bundles
                   defined under 'evpn_vlan_bundles'.
                   - `<vrf_id>:<vrf_id>` for VRFs.

                   Notes:  # fmt: skip
                   RT is a 48-bit value
                   which is split into <16-bit>:<32-bit> or <32-bit>:<16-bit>.
                   When using 32-bit ASN/number the VNI can
                   only be a 16-bit number. Alternatively use vlan_id/vrf_id as assigned number.
                   For 16-bit ASN/number
                   the assigned number can be a 32-bit number.


                   Subclass of AvdModel.
                p2p_uplinks_mtu:
                   Point to Point Links MTU.
                   Precedence: <node_type>.uplink_mtu -> platform_settings.p2p_uplinks_mtu ->
                   p2p_uplinks_mtu -> 9214
                p2p_uplinks_qos_profile: QOS Profile assigned on all infrastructure links.
                custom_platform_settings:
                   Custom Platform settings to override the default `platform_settings`. This list will be prepended to
                   the list of `platform_settings`. The first entry containing `platforms` matching the `platform` node
                   setting will be chosen. If no matches are found, the first entry containing a platform `default`
                   will be chosen.

                   Subclass of AvdList with `CustomPlatformSettingsItem` items.
                platform_settings:
                   Platform settings. The first entry containing `platforms` matching the `platform` node setting will
                   be chosen. If no matches are found, the first entry containing a platform `default` will be chosen.
                   The default values will be overridden if `platform_settings` is defined. If you need to replace all
                   the default platforms, it is recommended to copy the defaults and modify them. If you need to add
                   custom platforms, create them under `custom_platform_settings`. Entries under
                   `custom_platform_settings` will be matched before the equivalent entries from `platform_settings`.
                   Subclass of AvdList with `PlatformSettingsItem` items.
                platform_speed_groups:
                   Set Hardware Speed Groups per Platform.

                   Subclass of AvdIndexedList with `PlatformSpeedGroupsItem`
                   items. Primary key is `platform` (`str`).
                pod_name:
                   POD Name is used in:
                   - Fabric Documentation (Optional, falls back to dc_name and then to
                   fabric_name)
                   - SNMP Location: `snmp_settings.location` (Optional)
                   - VRF Loopbacks:
                   `vtep_diagnostic.loopback_ip_pools.pod` (Required)

                   Recommended to be common between Spines and
                   Leafs within a POD (One l3ls topology).
                port_profiles:
                   Optional profiles to share common settings for connected_endpoints and/or network_ports.
                   Keys are
                   the same used under endpoints adapters. Keys defined under endpoints adapters take precedence.
                   Subclass of AvdIndexedList with `PortProfilesItem` items. Primary key is `profile` (`str`).
                ptp_profiles: Subclass of AvdIndexedList with `PtpProfilesItem` items. Primary key is `profile` (`str`).
                ptp_settings:
                   Common PTP settings.

                   Subclass of AvdModel.
                queue_monitor_length: Subclass of AvdModel.
                queue_monitor_streaming: queue_monitor_streaming
                redundancy:
                   Redundancy for chassis platforms with dual supervisors | Optional.

                   Subclass of AvdModel.
                router_id_loopback_description: Customize the description on Router ID interface Loopback0.
                serial_number:
                   Serial Number of the device.
                   Used for documentation purpose in the fabric documentation as can also
                   be used by the 'eos_config_deploy_cvp' role.
                   "serial_number" can also be set directly under node
                   type settings.
                   If both are set, the value under node type settings takes precedence.
                sflow_settings:
                   sFlow settings.
                   The sFlow process will only be configured if any interface is enabled for sFlow.
                   For
                   default enabling of sFlow for various interface types across the fabric see `fabric_sflow`.
                   Subclass of AvdModel.
                shutdown_bgp_towards_undeployed_peers: Administratively shuts down BGP peerings towards devices marked with `is_deployed: false`.
                shutdown_interfaces_towards_undeployed_peers:
                   Administratively shuts down interfaces on deployed devices that connect to a peer marked with
                   `is_deployed: false`.
                snmp_settings:
                   SNMP settings.
                   Configuration of remote SNMP engine IDs are currently only possible using
                   `structured_config`.

                   Subclass of AvdModel.
                source_interfaces:
                   Configure source-interfaces based on the management interfaces set for other `eos_designs` data
                   models.
                   By default, no source-interfaces will be configured. They can still be configured manually
                   using `eos_cli_config_gen` and custom structured configuration.
                   EOS supports a single source-
                   interface per VRF, so an error will be raised in case of conflicts.
                   Errors will also be raised if an
                   interface is not found for a device.

                   Subclass of AvdModel.
                ssh_settings: Subclass of AvdModel.
                svi_profiles:
                   Profiles to share common settings for SVIs under `<network_services_key>.[].vrfs.svis`.
                   Keys are the
                   same used under SVIs. Keys defined under SVIs take precedence.
                   Note: structured configuration is not
                   merged recursively and will be taken directly from the most specific level in the following order:
                   1. svi.nodes[inventory_hostname].structured_config
                   2.
                   svi_profile.nodes[inventory_hostname].structured_config
                   3.
                   svi_parent_profile.nodes[inventory_hostname].structured_config
                   4. svi.structured_config
                   5.
                   svi_profile.structured_config
                   6. svi_parent_profile.structured_config


                   Subclass of AvdIndexedList
                   with `SviProfilesItem` items. Primary key is `profile` (`str`).
                system_mac_address:
                   Set to the same MAC address as available in "show version" on the device.
                   "system_mac_address" can
                   also be set under node type settings.
                   If both are set, the value under node type settings takes
                   precedence.
                terminattr_disable_aaa: terminattr_disable_aaa
                terminattr_ingestexclude: terminattr_ingestexclude
                terminattr_ingestgrpcurl_port:
                   Port number used for Terminattr connection to an on-premise CloudVision cluster.
                   The port number is
                   always 443 when using CloudVision as a Service, so this value is ignored.
                terminattr_smashexcludes: terminattr_smashexcludes
                timezone: Clock timezone like "CET" or "US/Pacific".
                trunk_groups: Subclass of AvdModel.
                type:
                   The `type:` variable needs to be defined for each device in the fabric.
                   This is leveraged to load
                   the appropriate template to generate the configuration.
                underlay_filter_peer_as:
                   Configure route-map on eBGP sessions towards underlay peers, where prefixes with the peer's ASN in
                   the AS Path are filtered away.
                   This is very useful in very large scale networks not using EVPN
                   overlays, where convergence will be quicker by not having to return
                   all updates received from
                   Spine-1 to Spine-2 just for Spine-2 to throw them away because of AS Path loop detection.
                   Note that
                   this setting cannot be used while there are EVPN services present in the default VRF.
                underlay_filter_redistribute_connected:
                   Filter redistribution of connected into the underlay routing protocol.
                   Only applicable when
                   overlay_routing_protocol != 'none' and underlay_routing_protocol == BGP.
                   Creates a route-map and
                   prefix-list assigned to redistribute connected permitting only loopbacks and inband management
                   subnets.
                underlay_ipv6:
                   This feature allows IPv6 underlay routing protocol with RFC5549 addresses to be used along with IPv4
                   advertisements as VXLAN tunnel endpoints.
                   Requires "underlay_rfc5549: true" and "loopback_ipv6_pool"
                   under the node type settings.
                underlay_ipv6_numbered:
                   This feature allows pure IPv6 underlay routing protocol with numbered addresses.
                   Currently sets both
                   underlay and overlay, including MLAG, to use IPv6 addresses.
                   Currently BGP peer-groups are named
                   with IPv4 by default. This can be modified under `bgp_peer_groups`.
                   Requires:
                     - "underlay_ipv6:
                   true"
                     - "loopback_ipv6_pool"
                     - "underlay_routing_protocol: ebgp"
                   Some settings are not yet
                   supported with IPv6 underlay:
                     - underlay_multicast
                     - underlay_multicast_rp_interfaces
                     -
                   underlay_rfc5549
                     - wan_role
                     - vtep_vvtep_ip
                     - inband_ztp
                underlay_isis_authentication_cleartext_key:
                   Cleartext password.
                   Encrypted to Type 7 by AVD.
                   To protect the password at rest it is strongly
                   recommended to make use of a vault or similar.
                underlay_isis_authentication_key:
                   Type-7 encrypted password.
                   Takes precedence over `underlay_isis_authentication_cleartext_key`.
                   To
                   protect the password at rest it is strongly recommended to make use of a vault or similar.
                underlay_isis_authentication_mode: Underlay ISIS authentication mode.
                underlay_isis_bfd: Enable BFD for ISIS on all underlay links.
                underlay_isis_instance_name: Default -> "EVPN_UNDERLAY" for l3ls, "CORE" for mpls.
                underlay_l2_ethernet_description:
                   The description or description template to be used on L2 ethernet interfaces.
                   The interfaces using
                   this are the member interfaces of port-channel uplinks.
                   This can be a template using the AVD string
                   formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     - `peer`:
                   The name of the peer.
                     - `interface`: The local interface name.
                     - `peer_interface`: The interface
                   on the peer.

                   By default the description is templated from the hostname and interface of the peer.
                underlay_l2_port_channel_description:
                   The description or description template to be used on L2 port-channel interfaces.
                   The interfaces
                   using this are port-channel uplinks.
                   This can be a template using the AVD string formatter syntax:
                   https://avd.arista.com/stable/ansible_collections/arista/avd/roles/eos_designs/docs/how-to/custom-
                   descriptions-names.html#avd-string-formatter-syntax.
                   The available template fields are:
                     - `peer`:
                   The name of the peer.
                     - `interface`: The local interface name.
                     - `peer_interface`: The interface
                   on the peer.
                     - `port_channel_id`: The local port-channel ID.
                     - `peer_port_channel_id`: The ID of
                   the port-channel on the peer.
                     - `peer_node_group`: The node group of the peer if the peer is an
                   MLAG member or running EVPN A/A.
                     - `peer_node_group_or_peer`: Helper alias of the peer_node_group
                   or peer.
                     - `peer_node_group_or_uppercase_peer`: Helper alias of the peer_node_group or peer
                   hostname in uppercase.

                   By default the description is templated from the peer's node group (for MLAG
                   or EVPN A/A) or hostname and port-channel interface of the peer.
                underlay_multicast:
                   Enable Multicast in the underlay on all p2p uplink interfaces and mlag l3 peer interface.
                   Specifically PIM Sparse-Mode will be configured on all routed underlay interfaces.
                   No other
                   configuration is added, so the underlay will only support Source-Specific Multicast (SSM).
                   The
                   configuration is intended to be used as multicast underlay for EVPN OISM overlay.
                underlay_multicast_pim_sm:
                   When enabled, configures multicast routing and by default configures PIM sparse-mode in the underlay
                   on all:
                     - P2P uplink interfaces if enabled on uplink peer
                     - MLAG L3 peer interface if also
                   enabled on MLAG peer
                     - l3_edge and core interfaces

                   Note: This changes the default behavior for
                   l3_edge / core_interfaces to automatically include the interfaces
                   in multicast, unless
                   `include_in_underlay_protocol: false` or `multicast_pim_sm: false`.
                underlay_multicast_static:
                   When enabled, configures multicast routing and by default configures static multicast in the
                   underlay on all:
                     - P2P uplink interfaces if enabled on uplink peer
                     - MLAG L3 peer interface if
                   also enabled on MLAG peer
                     - l3_edge and core interfaces
                underlay_multicast_anycast_rp:
                   If multiple nodes are configured under 'underlay_multicast_rps.[].nodes' for the same RP address,
                   they will be configured
                   with one of the following methods:
                   - Anycast RP using PIM (RFC4610).
                   -
                   Anycast RP using MSDP (RFC4611).

                   NOTE: When using MSDP, all nodes across all MSDP enabled RPs will
                   be added to a single MSDP mesh group named "ANYCAST-RP".


                   Subclass of AvdModel.
                underlay_multicast_rps:
                   List of PIM Sparse-Mode Rendevouz Points configured for underlay multicast on all devices.
                   The
                   device(s) listed under 'nodes', will be configured as the Rendevouz point router(s).
                   If multiple
                   nodes are configured under 'nodes' for the same RP address, they will be configured
                   according to the
                   'underlay_multicast_anycast_rp.mode' setting.

                   Requires 'underlay_multicast_pim_sm: true'.
                   Subclass of AvdIndexedList with `UnderlayMulticastRpsItem` items. Primary key is `rp` (`str`).
                underlay_ospf_area: underlay_ospf_area
                underlay_ospf_authentication: Subclass of AvdModel.
                underlay_ospf_bfd_enable: underlay_ospf_bfd_enable
                underlay_ospf_graceful_restart: Enable graceful restart for OSPF underlay.
                underlay_ospf_max_lsa: underlay_ospf_max_lsa
                underlay_ospf_maximum_paths: Maximum number of next-hops in an ECMP route.
                underlay_ospf_process_id: underlay_ospf_process_id
                underlay_rfc5549:
                   Point to Point Underlay with RFC 5549(eBGP), i.e. IPv6 Unnumbered.
                   Requires
                   "underlay_routing_protocol: ebgp".
                underlay_routing_protocol:
                   - The following underlay routing protocols are supported:
                     - EBGP (default for l3ls-evpn)
                     - OSPF.
                   - OSPF-LDP*.
                     - ISIS.
                     - ISIS-SR*.
                     - ISIS-LDP*.
                     - ISIS-SR-LDP*.
                     - No underlay routing
                   protocol (none)
                   - The variables should be applied to all devices in the fabric.
                   *Only supported with
                   core_interfaces data model.
                unsupported_transceiver: unsupported_transceiver
                uplink_ptp:
                   Enable PTP on all infrastructure links.

                   Subclass of AvdModel.
                use_cv_topology:
                   Generate AVD configurations directly from a given CloudVision topology.
                   See `cv_topology` for
                   details.
                use_router_general_for_router_id: Use `router general` to set router ID for all routing protocols and VRFs.
                vtep_loopback_description: Customize the description on the VTEP interface, typically Loopback1.
                vtep_vvtep_ip:
                   IP Address used as Virtual VTEP. Will be configured as secondary IP on Loopback1.
                   This is only
                   needed for centralized routing designs.
                wan_carriers:
                   List of carriers used for the WAN configuration and their mapping to path-groups.

                   Subclass of
                   AvdIndexedList with `WanCarriersItem` items. Primary key is `name` (`str`).
                wan_encapsulation: Select the encapsulation to use for EVPN peerings for WAN BGP peers.
                wan_ha: Subclass of AvdModel.
                wan_ipsec_profiles:
                   Define IPsec profiles parameters for WAN configuration.

                   Subclass of AvdModel.
                wan_mode: Select if the WAN should be run using CV Pathfinder or AutoVPN only.
                wan_path_groups:
                   List of path-groups used for the WAN configuration.

                   Subclass of AvdIndexedList with
                   `WanPathGroupsItem` items. Primary key is `name` (`str`).
                wan_route_servers:
                   List of the AutoVPN RRs when using `wan_mode: autovpn`, or the Pathfinders
                   when using `wan_mode: cv-
                   pathfinder`, to which the device should connect to.
                   This is also used to establish iBGP sessions
                   between WAN route servers.

                   When the route server is part of the same inventory as the WAN routers,
                   only the name is required.

                   Subclass of AvdIndexedList with `WanRouteServersItem` items. Primary key
                   is `hostname` (`str`).
                wan_stun_dtls_disable:
                   WAN STUN connections are authenticated and secured with DTLS by default.
                   For CV Pathfinder
                   deployments CloudVision will automatically deploy certificates on the devices.
                   In case of AutoVPN
                   the certificates must be deployed manually to all devices.

                   For LAB environments this can be
                   disabled, if there are no certificates available.
                   This should NOT be disabled for a WAN network
                   connected to the internet, since it will leave the STUN service exposed with no authentication.
                wan_stun_dtls_profile_name:
                   Name of the SSL profile used for DTLS on WAN STUN connections.
                   When using automatic ceritficate
                   deployment via CloudVision this name must be the same on all WAN routers.
                wan_use_agent_env_var_for_kernel_software_forwarding_ecmp:
                   For EOS kernel forwarding, ECMP programming can be enabled in two different ways depending on the
                   EOS version.

                   - `true`: For older EOS versions use an agent environment variable. Changing this
                   requires a restart of the KernelFib agent.
                   - `false`: For newer EOS versions (starting 4.33.2) use
                   the proper CLI.
                wan_use_evpn_node_settings_for_lan:
                   PREVIEW: This key is currently not supported and may produce invalid configuration.
                   When true,
                   `eos_designs` will use `overlay_routing_protocol`, `evpn_role` and `vtep`
                   node settings for LAN side
                   on WAN devices. Otherwise these will be ignored for WAN.
                   This will be the default in AVD version
                   6.0.0 and this option will be removed.
                wan_virtual_topologies:
                   Configure Virtual Topologies for CV Pathfinder and AutoVPN.
                   Auto create a control plane
                   profile/policy/application and enforce it being first in the default VRF.

                   Subclass of AvdModel.
                zscaler_endpoints:
                   PREVIEW: These keys are in preview mode.

                   Special data model used for testing the WAN internet-exit
                   integration with Zscaler.
                   The model is supposed to be autofilled per-device by `eos_designs`.
                   Manually setting this model will take precedence and prevent `eos_designs` from trying to contact
                   CloudVision.
                   This can be useful for offline testing or if CloudVision is not available or not
                   configured for Zscaler integration.

                   Subclass of AvdModel.
                _custom_structured_configurations: _custom_structured_configurations
                _dynamic_keys: Dynamic keys

            """
