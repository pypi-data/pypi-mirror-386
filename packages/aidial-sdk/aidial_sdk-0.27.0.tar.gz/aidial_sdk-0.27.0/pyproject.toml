[project]
name = "aidial-sdk"
version = "0.27.0"
description = "Framework to create applications and model adapters for AI DIAL"
authors = [{ name = "EPAM RAIL", email = "SpecialEPM-DIALDevTeam@epam.com" }]
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.9,<4.0"
dependencies = [
    "fastapi (>=0.51,<1.0)",
    "uvicorn (>=0.19,<1.0)",
    "pydantic (>=1.10.17,<3)",
    "wrapt (>=1.10,<2)",
]

[project.urls]
Homepage = "https://epam-rail.com"
Documentation = "https://epam-rail.com/dial_api"
Repository = "https://github.com/epam/ai-dial-sdk"

[project.optional-dependencies]
telemetry = [
    "opentelemetry-sdk (>=1.22.0,<2.0)",
    "opentelemetry-api (>=1.22.0,<2.0)",
    "opentelemetry-exporter-otlp-proto-grpc (>=1.22.0,<2.0)",
    "opentelemetry-instrumentation-aiohttp-client (>=0.43b0)",
    "opentelemetry-instrumentation-fastapi (>=0.43b0)",
    "opentelemetry-instrumentation-httpx (>=0.43b0)",
    "opentelemetry-instrumentation-logging (>=0.43b0)",
    "opentelemetry-instrumentation-requests (>=0.43b0)",
    "opentelemetry-instrumentation-system-metrics (>=0.43b0)",
    "opentelemetry-instrumentation-urllib (>=0.43b0)",
    "opentelemetry-exporter-prometheus (>=0.43b0)",
    "prometheus-client (>=0.17.1,<=0.21)",
]
httpx = ["httpx (>=0.25.0,<1)"]

[tool.poetry.group.test.dependencies]
pytest = "^8.2"
pytest-asyncio = "^0.24.0"
nox = "^2023.4.22"
pillow = [
    {version = "11.1.0", python = ">=3.12"},
    {version = "10.3.0", python = "<3.12"}
]
httpx = "^0.25.0"
respx = "^0.21.1"
aiohttp = "^3.12.14"
aioresponses = "^0.7.6"
requests = "^2.32"
responses = "^0.25.3"

[tool.poetry.group.lint.dependencies]
flake8 = "^6.0.0"
black = ">=23.3,<25.0"
isort = "^5.12.0"
pyright = "1.1.385"
autoflake = "^2.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
addopts = "--asyncio-mode=auto"
testpaths = [
    "tests"
]
filterwarnings = [
    "error",
    # muting deprecation warnings coming from old pydantic
    "ignore::DeprecationWarning:pydantic.typing",
]
markers = [
    "slow: marker for slow running tests",
]

[tool.pyright]
typeCheckingMode = "basic"
reportDeprecated = "error"
reportUnusedVariable = "error"
reportIncompatibleMethodOverride = "error"
exclude = [
    ".git",
    "**/.venv",
    ".nox",
    ".pytest_cache",
    "**/__pycache__",
    "build",
    "examples/langchain_rag"
]

[tool.black]
line-length = 80

[tool.isort]
line_length = 80
profile = "black"

[tool.autoflake]
ignore_init_module_imports = true
remove_all_unused_imports = true
in_place = true
recursive = true
quiet = true
exclude = [
    ".nox",
    ".pytest_cache",
    "\\.venv",
    "_pydantic.py"
]
