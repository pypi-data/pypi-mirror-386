# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABC, ABCMeta
from dataclasses import dataclass, field
from typing import Any
from uuid import uuid4

from google.protobuf.message import Message as _Message
from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from luminarycloud.types import Vector3, LcFloat
from luminarycloud.types.adfloat import _to_ad_proto, _from_ad_proto
from luminarycloud._helpers._entity_identifier import _create_entity_identifier
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
from luminarycloud._helpers import CodeRepr
import luminarycloud.params.enum._enum_wrappers as enum

from luminarycloud.params.simulation._lib import ParamGroupWrapper, create_unique_id

from luminarycloud.params.simulation.entity_relationships.volume_material_relationship_ import (
    VolumeMaterialRelationship,
)
from luminarycloud.params.simulation.entity_relationships.volume_material_relationship_ import *
from luminarycloud.params.simulation.entity_relationships.volume_physics_relationship_ import (
    VolumePhysicsRelationship,
)
from luminarycloud.params.simulation.entity_relationships.volume_physics_relationship_ import *


@dataclass(kw_only=True)
class EntityRelationships(CodeRepr, ParamGroupWrapper[clientpb.EntityRelationships]):
    """Relationships between different entities."""

    volume_material_relationship: list[VolumeMaterialRelationship] = field(default_factory=list)
    "Tracks volume entity(1) -> material entity(1) relationship."
    volume_physics_relationship: list[VolumePhysicsRelationship] = field(default_factory=list)
    "Tracks volume entity(1) -> physics entity(1) relationship."

    def _to_proto(self) -> clientpb.EntityRelationships:
        _proto = clientpb.EntityRelationships()
        if self.volume_material_relationship is not None:
            _proto.volume_material_relationship.extend(
                v._to_proto() for v in self.volume_material_relationship
            )
        if self.volume_physics_relationship is not None:
            _proto.volume_physics_relationship.extend(
                v._to_proto() for v in self.volume_physics_relationship
            )
        return _proto

    def _from_proto(self, proto: clientpb.EntityRelationships) -> None:
        self.volume_material_relationship = [
            VolumeMaterialRelationship.from_proto(v) for v in proto.volume_material_relationship
        ]
        self.volume_physics_relationship = [
            VolumePhysicsRelationship.from_proto(v) for v in proto.volume_physics_relationship
        ]
        return None
