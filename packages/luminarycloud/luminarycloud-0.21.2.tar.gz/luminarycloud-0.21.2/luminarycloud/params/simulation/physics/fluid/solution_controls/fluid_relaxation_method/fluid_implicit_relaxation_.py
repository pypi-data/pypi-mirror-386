# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABC, ABCMeta
from dataclasses import dataclass, field
from typing import Any
from uuid import uuid4

from google.protobuf.message import Message as _Message
from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from luminarycloud.types import Vector3, LcFloat
from luminarycloud.types.adfloat import _to_ad_proto, _from_ad_proto
from luminarycloud._helpers._entity_identifier import _create_entity_identifier
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
from luminarycloud._helpers import CodeRepr
import luminarycloud.params.enum._enum_wrappers as enum

from luminarycloud.params.simulation._lib import ParamGroupWrapper, create_unique_id

from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method_ import (
    FluidRelaxationMethod,
)
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method_ import *
from luminarycloud.params.simulation.physics.solution_controls.linear_solver_type.gauss_seidel_ import (
    GaussSeidel,
)
from luminarycloud.params.simulation.physics.solution_controls.linear_solver_type.gauss_seidel_ import *
from luminarycloud.params.simulation.physics.solution_controls.linear_solver_type.krylov_amg_ import (
    KrylovAmg,
)
from luminarycloud.params.simulation.physics.solution_controls.linear_solver_type.krylov_amg_ import *
from luminarycloud.params.simulation.physics.solution_controls.linear_solver_type_ import (
    LinearSolverType,
)
from luminarycloud.params.simulation.physics.solution_controls.linear_solver_type_ import *
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup_ import (
    RobustStartup,
)
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup_ import *
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup.robust_startup_auto_ import (
    RobustStartupAuto,
)
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup.robust_startup_auto_ import *
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup.robust_startup_off_ import (
    RobustStartupOff,
)
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup.robust_startup_off_ import *
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup.robust_startup_on_ import (
    RobustStartupOn,
)
from luminarycloud.params.simulation.physics.fluid.solution_controls.fluid_relaxation_method.fluid_implicit_relaxation.robust_startup.robust_startup_on_ import *


@dataclass(kw_only=True)
class FluidImplicitRelaxation(FluidRelaxationMethod):
    """Apply an implicit relaxation scheme."""

    implicit_method: enum.ImplicitMethod = enum.ImplicitMethod.BACKWARD_EULER
    "Scheme for implicit relaxation of the governing equations."
    linear_solver_type: LinearSolverType = field(default_factory=GaussSeidel)
    "Type of linear solver used for implicit relaxation. Possible types: ``GaussSeidel``, ``KrylovAmg`` from the ``linear_solver_type`` module."
    jacobian_update_method: enum.JacobianUpdateMethod = (
        enum.JacobianUpdateMethod.EXPLICIT_INTERVAL_AND_WARMUP
    )
    "Method for determining how often to ."
    jacobian_update_interval: LcFloat = 1.0
    "How many iterations in between updating the Jacobian values for implicit solving."
    jacobian_warmup_threshold: int = 300
    "How many iterations to update Jacobians every iteration before switching to the specified 'Jacobian Update Interval'."
    robust_startup: RobustStartup = field(default_factory=RobustStartupAuto)
    "Applies a robust startup process during the initial transients of a simulation. Applicable to steady problems only. Possible types: ``RobustStartupOn``, ``RobustStartupAuto``, ``RobustStartupOff`` from the ``robust_startup`` module."
    relaxation_flow: LcFloat = 1.0
    "Under-relaxation factor in [0,1] applied to the mean flow solution update with each implicit nonlinear iteration. Default of 1.0."
    relaxation_turb: LcFloat = 0.5
    "Under-relaxation factor in [0,1] applied to the turbulence model solution update with each implicit nonlinear iteration. Default of 0.5."
    update_limit_flow: LcFloat = 0.2
    "Allowable percent change in the mean flow solution variables (pressure, temperature) with each implicit nonlinear iteration. Values in [0,1] with a default of 0.2."
    update_limit_turb: LcFloat = 0.99
    "Allowable percent change in the turbulence solution variables with each implicit nonlinear iteration. Values in [0,1] with a default of 0.99."
