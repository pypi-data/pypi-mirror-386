# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABC, ABCMeta, abstractmethod
from dataclasses import dataclass, field
from typing import Any, TypeVar, Generic, Type
from uuid import uuid4

from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from luminarycloud.types import Vector3, LcFloat
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum


Self = TypeVar("Self")


def create_unique_id() -> str:
    return str(uuid4())


T = TypeVar("T")


class ParamGroupWrapper(Generic[T], metaclass=ABCMeta):
    """Base class for all parameter group wrappers."""

    @abstractmethod
    def _to_proto(self) -> T:
        pass

    @abstractmethod
    def _from_proto(self, proto: T) -> None:
        pass

    @classmethod
    def from_proto(cls: Type[Self], proto: T) -> Self:
        _wrapper = cls()
        _wrapper._from_proto(proto)  # type: ignore
        return _wrapper
