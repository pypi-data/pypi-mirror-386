"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import luminarycloud._proto.base.base_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class AerodynamicForces(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRESSURE_FORCE_LEGACY_FIELD_NUMBER: builtins.int
    FRICTION_FORCE_FIELD_NUMBER: builtins.int
    MOMENT_FIELD_NUMBER: builtins.int
    DRAG_FIELD_NUMBER: builtins.int
    LIFT_FIELD_NUMBER: builtins.int
    PRESSURE_FORCE_FIELD_NUMBER: builtins.int
    @property
    def pressure_force_legacy(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def friction_force(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def moment(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def drag(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def lift(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def pressure_force(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    def __init__(
        self,
        *,
        pressure_force_legacy: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        friction_force: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        moment: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        drag: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        lift: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        pressure_force: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["drag", b"drag", "friction_force", b"friction_force", "lift", b"lift", "moment", b"moment", "pressure_force", b"pressure_force", "pressure_force_legacy", b"pressure_force_legacy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["drag", b"drag", "friction_force", b"friction_force", "lift", b"lift", "moment", b"moment", "pressure_force", b"pressure_force", "pressure_force_legacy", b"pressure_force_legacy"]) -> None: ...

global___AerodynamicForces = AerodynamicForces

class AveragedQuantities(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRESSURE_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    DENSITY_FIELD_NUMBER: builtins.int
    TOTAL_PRESSURE_FIELD_NUMBER: builtins.int
    TOTAL_TEMPERATURE_FIELD_NUMBER: builtins.int
    MACH_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    ABS_VELOCITY_FIELD_NUMBER: builtins.int
    VELOCITY_MAG_FIELD_NUMBER: builtins.int
    Y_PLUS_FIELD_NUMBER: builtins.int
    ENERGY_FLUX_FIELD_NUMBER: builtins.int
    @property
    def pressure(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def temperature(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def density(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def total_pressure(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def total_temperature(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def mach(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def velocity(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def abs_velocity(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def velocity_mag(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def y_plus(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def energy_flux(self) -> luminarycloud._proto.base.base_pb2.AdFloatType:
        """TODO(LC-8466) How to treat new analyzer fields."""
    def __init__(
        self,
        *,
        pressure: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        temperature: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        density: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        total_pressure: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        total_temperature: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        mach: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        velocity: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        abs_velocity: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        velocity_mag: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        y_plus: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        energy_flux: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_energy_flux", b"_energy_flux", "abs_velocity", b"abs_velocity", "density", b"density", "energy_flux", b"energy_flux", "mach", b"mach", "pressure", b"pressure", "temperature", b"temperature", "total_pressure", b"total_pressure", "total_temperature", b"total_temperature", "velocity", b"velocity", "velocity_mag", b"velocity_mag", "y_plus", b"y_plus"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_energy_flux", b"_energy_flux", "abs_velocity", b"abs_velocity", "density", b"density", "energy_flux", b"energy_flux", "mach", b"mach", "pressure", b"pressure", "temperature", b"temperature", "total_pressure", b"total_pressure", "total_temperature", b"total_temperature", "velocity", b"velocity", "velocity_mag", b"velocity_mag", "y_plus", b"y_plus"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_energy_flux", b"_energy_flux"]) -> typing_extensions.Literal["energy_flux"] | None: ...

global___AveragedQuantities = AveragedQuantities

class ProbeQuantities(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRESSURE_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    DENSITY_FIELD_NUMBER: builtins.int
    MACH_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    DISTANCE_FIELD_NUMBER: builtins.int
    @property
    def pressure(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def temperature(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def density(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def mach(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def velocity(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def distance(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    def __init__(
        self,
        *,
        pressure: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        temperature: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        density: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        mach: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        velocity: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        distance: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["density", b"density", "distance", b"distance", "mach", b"mach", "pressure", b"pressure", "temperature", b"temperature", "velocity", b"velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["density", b"density", "distance", b"distance", "mach", b"mach", "pressure", b"pressure", "temperature", b"temperature", "velocity", b"velocity"]) -> None: ...

global___ProbeQuantities = ProbeQuantities

class VolumeQuantities(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRESSURE_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    SA_VARIABLE_FIELD_NUMBER: builtins.int
    TKE_FIELD_NUMBER: builtins.int
    OMEGA_FIELD_NUMBER: builtins.int
    VELOCITY_MAG_FIELD_NUMBER: builtins.int
    TOTAL_PRESSURE_FIELD_NUMBER: builtins.int
    TOTAL_TEMPERATURE_FIELD_NUMBER: builtins.int
    EDDY_VISCOSITY_FIELD_NUMBER: builtins.int
    @property
    def pressure(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def velocity(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def temperature(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def sa_variable(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def tke(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def omega(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def velocity_mag(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def total_pressure(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def total_temperature(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def eddy_viscosity(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    def __init__(
        self,
        *,
        pressure: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        velocity: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        temperature: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        sa_variable: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        tke: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        omega: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        velocity_mag: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        total_pressure: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        total_temperature: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        eddy_viscosity: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["eddy_viscosity", b"eddy_viscosity", "omega", b"omega", "pressure", b"pressure", "sa_variable", b"sa_variable", "temperature", b"temperature", "tke", b"tke", "total_pressure", b"total_pressure", "total_temperature", b"total_temperature", "velocity", b"velocity", "velocity_mag", b"velocity_mag"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["eddy_viscosity", b"eddy_viscosity", "omega", b"omega", "pressure", b"pressure", "sa_variable", b"sa_variable", "temperature", b"temperature", "tke", b"tke", "total_pressure", b"total_pressure", "total_temperature", b"total_temperature", "velocity", b"velocity", "velocity_mag", b"velocity_mag"]) -> None: ...

global___VolumeQuantities = VolumeQuantities

class IntegralOutput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FORCES_FIELD_NUMBER: builtins.int
    MASS_FLOW_FIELD_NUMBER: builtins.int
    ABS_MASS_FLOW_FIELD_NUMBER: builtins.int
    AREA_FIELD_NUMBER: builtins.int
    AREA_AVERAGED_FIELD_NUMBER: builtins.int
    MASS_FLOW_AVERAGED_FIELD_NUMBER: builtins.int
    NORMAL_FIELD_NUMBER: builtins.int
    CENTER_FIELD_NUMBER: builtins.int
    ACT_DISK_ROTATION_RATE_FIELD_NUMBER: builtins.int
    @property
    def forces(self) -> global___AerodynamicForces: ...
    @property
    def mass_flow(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def abs_mass_flow(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def area(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def area_averaged(self) -> global___AveragedQuantities: ...
    @property
    def mass_flow_averaged(self) -> global___AveragedQuantities: ...
    @property
    def normal(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def center(self) -> luminarycloud._proto.base.base_pb2.AdVector3: ...
    @property
    def act_disk_rotation_rate(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    def __init__(
        self,
        *,
        forces: global___AerodynamicForces | None = ...,
        mass_flow: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        abs_mass_flow: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        area: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        area_averaged: global___AveragedQuantities | None = ...,
        mass_flow_averaged: global___AveragedQuantities | None = ...,
        normal: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        center: luminarycloud._proto.base.base_pb2.AdVector3 | None = ...,
        act_disk_rotation_rate: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["abs_mass_flow", b"abs_mass_flow", "act_disk_rotation_rate", b"act_disk_rotation_rate", "area", b"area", "area_averaged", b"area_averaged", "center", b"center", "forces", b"forces", "mass_flow", b"mass_flow", "mass_flow_averaged", b"mass_flow_averaged", "normal", b"normal"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["abs_mass_flow", b"abs_mass_flow", "act_disk_rotation_rate", b"act_disk_rotation_rate", "area", b"area", "area_averaged", b"area_averaged", "center", b"center", "forces", b"forces", "mass_flow", b"mass_flow", "mass_flow_averaged", b"mass_flow_averaged", "normal", b"normal"]) -> None: ...

global___IntegralOutput = IntegralOutput

class VolumeReductionOutput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MIN_FIELD_NUMBER: builtins.int
    MAX_FIELD_NUMBER: builtins.int
    VOLUME_AVERAGED_FIELD_NUMBER: builtins.int
    VOLUME_FIELD_NUMBER: builtins.int
    @property
    def min(self) -> global___VolumeQuantities: ...
    @property
    def max(self) -> global___VolumeQuantities: ...
    @property
    def volume_averaged(self) -> global___VolumeQuantities: ...
    @property
    def volume(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    def __init__(
        self,
        *,
        min: global___VolumeQuantities | None = ...,
        max: global___VolumeQuantities | None = ...,
        volume_averaged: global___VolumeQuantities | None = ...,
        volume: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["max", b"max", "min", b"min", "volume", b"volume", "volume_averaged", b"volume_averaged"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["max", b"max", "min", b"min", "volume", b"volume", "volume_averaged", b"volume_averaged"]) -> None: ...

global___VolumeReductionOutput = VolumeReductionOutput

class Residuals(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESIDUAL_DENSITY_FIELD_NUMBER: builtins.int
    RESIDUAL_X_MOMENTUM_FIELD_NUMBER: builtins.int
    RESIDUAL_Y_MOMENTUM_FIELD_NUMBER: builtins.int
    RESIDUAL_Z_MOMENTUM_FIELD_NUMBER: builtins.int
    RESIDUAL_ENERGY_FIELD_NUMBER: builtins.int
    RESIDUAL_SA_VARIABLE_FIELD_NUMBER: builtins.int
    RESIDUAL_TKE_FIELD_NUMBER: builtins.int
    RESIDUAL_OMEGA_FIELD_NUMBER: builtins.int
    RESIDUAL_GAMMA_FIELD_NUMBER: builtins.int
    RESIDUAL_RE_THETA_FIELD_NUMBER: builtins.int
    RESIDUAL_N_TILDE_FIELD_NUMBER: builtins.int
    @property
    def residual_density(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_x_momentum(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_y_momentum(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_z_momentum(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_energy(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_sa_variable(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_tke(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_omega(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_gamma(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_re_theta(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    @property
    def residual_n_tilde(self) -> luminarycloud._proto.base.base_pb2.AdFloatType: ...
    def __init__(
        self,
        *,
        residual_density: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_x_momentum: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_y_momentum: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_z_momentum: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_energy: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_sa_variable: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_tke: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_omega: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_gamma: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_re_theta: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
        residual_n_tilde: luminarycloud._proto.base.base_pb2.AdFloatType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["residual_density", b"residual_density", "residual_energy", b"residual_energy", "residual_gamma", b"residual_gamma", "residual_n_tilde", b"residual_n_tilde", "residual_omega", b"residual_omega", "residual_re_theta", b"residual_re_theta", "residual_sa_variable", b"residual_sa_variable", "residual_tke", b"residual_tke", "residual_x_momentum", b"residual_x_momentum", "residual_y_momentum", b"residual_y_momentum", "residual_z_momentum", b"residual_z_momentum"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["residual_density", b"residual_density", "residual_energy", b"residual_energy", "residual_gamma", b"residual_gamma", "residual_n_tilde", b"residual_n_tilde", "residual_omega", b"residual_omega", "residual_re_theta", b"residual_re_theta", "residual_sa_variable", b"residual_sa_variable", "residual_tke", b"residual_tke", "residual_x_momentum", b"residual_x_momentum", "residual_y_momentum", b"residual_y_momentum", "residual_z_momentum", b"residual_z_momentum"]) -> None: ...

global___Residuals = Residuals

class GlobalSolution(google.protobuf.message.Message):
    """Holds the state of one physical model at the current iteration"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class BoundEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___IntegralOutput: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___IntegralOutput | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    class ProbesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ProbeQuantities: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ProbeQuantities | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    class VolumeEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___VolumeReductionOutput: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___VolumeReductionOutput | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ITER_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    ELAPSED_SOLVER_TIME_FIELD_NUMBER: builtins.int
    INTEGRAL_OUTPUT_FIELD_NUMBER: builtins.int
    BOUND_FIELD_NUMBER: builtins.int
    ABSOLUTE_RESIDUALS_FIELD_NUMBER: builtins.int
    RELATIVE_RESIDUALS_FIELD_NUMBER: builtins.int
    JACOBIAN_CONSTRUCTION_COUNT_FIELD_NUMBER: builtins.int
    LINEAR_ITERATION_COUNT_FIELD_NUMBER: builtins.int
    INNER_ITERATION_COUNT_FIELD_NUMBER: builtins.int
    PROBES_FIELD_NUMBER: builtins.int
    VOLUME_FIELD_NUMBER: builtins.int
    iter: builtins.int
    """Current iteration index"""
    time: builtins.float
    """Current physical time"""
    elapsed_solver_time: builtins.float
    """Elapsed wall-clock time"""
    @property
    def integral_output(self) -> global___IntegralOutput:
        """Integral output accumulated over all physical boundaries"""
    @property
    def bound(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___IntegralOutput]:
        """Integral output per physical boundary"""
    @property
    def absolute_residuals(self) -> global___Residuals: ...
    @property
    def relative_residuals(self) -> global___Residuals: ...
    jacobian_construction_count: builtins.int
    """Total number of Jacobian Constructions"""
    linear_iteration_count: builtins.int
    """Total number of Linear Iterations performed"""
    inner_iteration_count: builtins.int
    """Number of inner iterations for time-implicit cases"""
    @property
    def probes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ProbeQuantities]:
        """A map of probes with the name of the probe being the key"""
    @property
    def volume(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___VolumeReductionOutput]:
        """A map of zone names to volume reduction outputs"""
    def __init__(
        self,
        *,
        iter: builtins.int = ...,
        time: builtins.float = ...,
        elapsed_solver_time: builtins.float = ...,
        integral_output: global___IntegralOutput | None = ...,
        bound: collections.abc.Mapping[builtins.str, global___IntegralOutput] | None = ...,
        absolute_residuals: global___Residuals | None = ...,
        relative_residuals: global___Residuals | None = ...,
        jacobian_construction_count: builtins.int = ...,
        linear_iteration_count: builtins.int = ...,
        inner_iteration_count: builtins.int = ...,
        probes: collections.abc.Mapping[builtins.str, global___ProbeQuantities] | None = ...,
        volume: collections.abc.Mapping[builtins.str, global___VolumeReductionOutput] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["absolute_residuals", b"absolute_residuals", "integral_output", b"integral_output", "relative_residuals", b"relative_residuals"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["absolute_residuals", b"absolute_residuals", "bound", b"bound", "elapsed_solver_time", b"elapsed_solver_time", "inner_iteration_count", b"inner_iteration_count", "integral_output", b"integral_output", "iter", b"iter", "jacobian_construction_count", b"jacobian_construction_count", "linear_iteration_count", b"linear_iteration_count", "probes", b"probes", "relative_residuals", b"relative_residuals", "time", b"time", "volume", b"volume"]) -> None: ...

global___GlobalSolution = GlobalSolution
