# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABC, ABCMeta
from dataclasses import dataclass, field
from typing import Any
from uuid import uuid4

from google.protobuf.message import Message as _Message
from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from luminarycloud.types import Vector3, LcFloat
from luminarycloud.types.adfloat import _to_ad_proto, _from_ad_proto
from luminarycloud._helpers._entity_identifier import _create_entity_identifier
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
from luminarycloud._helpers import CodeRepr
import luminarycloud.params.enum._enum_wrappers as enum

from luminarycloud.params.simulation._lib import ParamGroupWrapper, create_unique_id


@dataclass(kw_only=True)
class AdjointControlsFluid(CodeRepr, ParamGroupWrapper[clientpb.AdjointControlsFluid]):
    """"""

    solution_method: enum.AdjointSolutionMethod = enum.AdjointSolutionMethod.ADJOINT_METHOD_GMRES
    "The method used to solve the discrete adjoint equations."
    gmres_restart_iters: int = 50
    "Number of iterations between GMRES restarts. A larger period makes the method more effective for tougher problems (for example incompressible flows), but increases the computational cost."
    second_order_damping: LcFloat = 0
    "Simplify the adjoint equations (at the expense of accuracy) by reducing the blend between first-order and second-order convective schemes used in the primal simulation."
    frozen_turbulence: bool = False
    "Simplify the adjoint equations (at the expense of accuracy) by assuming that eddy viscosity does not depend on the turbulence variables."
    frozen_transition: bool = False
    "Simplify the adjoint equations (at the expense of accuracy) by assuming that turbulence variables are not affected by turbulence intermittency (Î³)."

    def _to_proto(self) -> clientpb.AdjointControlsFluid:
        _proto = clientpb.AdjointControlsFluid()
        _proto.adjoint_solution_method = self.solution_method.value
        _proto.adjoint_gmres_restart_iters.value = self.gmres_restart_iters
        _proto.adjoint_second_order_damping.CopyFrom(_to_ad_proto(self.second_order_damping))
        _proto.adjoint_frozen_turbulence = self.frozen_turbulence
        _proto.adjoint_frozen_transition = self.frozen_transition
        return _proto

    def _from_proto(self, proto: clientpb.AdjointControlsFluid) -> None:
        self.solution_method = enum.AdjointSolutionMethod(proto.adjoint_solution_method)
        self.gmres_restart_iters = proto.adjoint_gmres_restart_iters.value
        self.second_order_damping = _from_ad_proto(proto.adjoint_second_order_damping)
        self.frozen_turbulence = proto.adjoint_frozen_turbulence
        self.frozen_transition = proto.adjoint_frozen_transition
        return None
