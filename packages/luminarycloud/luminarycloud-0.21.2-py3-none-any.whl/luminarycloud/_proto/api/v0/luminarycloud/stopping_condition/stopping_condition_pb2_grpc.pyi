"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2

class StoppingConditionServiceStub:
    """Manages stopping conditions for a simulation template."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetBasicStoppingConditions: grpc.UnaryUnaryMultiCallable[
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetBasicStoppingConditionsRequest,
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetBasicStoppingConditionsResponse,
    ]
    """Retrieves the basic stopping conditions."""
    UpdateBasicStoppingConditions: grpc.UnaryUnaryMultiCallable[
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.UpdateBasicStoppingConditionsRequest,
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.UpdateBasicStoppingConditionsResponse,
    ]
    """Updates the basic stopping conditions."""
    CreateOrUpdateStoppingCondition: grpc.UnaryUnaryMultiCallable[
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.CreateOrUpdateStoppingConditionRequest,
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.CreateOrUpdateStoppingConditionResponse,
    ]
    """Create a stopping condition on an output definition, or update it if the stopping condition
    already has one.

    While this API will prevent the creation of multiple stopping conditions on the same output
    definition, the UI does not. If this endpoint is invoked with an output definition that has
    multiple stopping conditions, all but one will be deleted, and the remaining one will be
    updated.
    """
    GetStoppingCondition: grpc.UnaryUnaryMultiCallable[
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetStoppingConditionRequest,
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetStoppingConditionResponse,
    ]
    """Retrieves a stopping condition."""
    ListStoppingConditions: grpc.UnaryUnaryMultiCallable[
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.ListStoppingConditionsRequest,
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.ListStoppingConditionsResponse,
    ]
    """Lists all stopping conditions for a simulation template."""
    DeleteStoppingCondition: grpc.UnaryUnaryMultiCallable[
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.DeleteStoppingConditionRequest,
        luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.DeleteStoppingConditionResponse,
    ]
    """Deletes a stopping condition."""

class StoppingConditionServiceServicer(metaclass=abc.ABCMeta):
    """Manages stopping conditions for a simulation template."""

    @abc.abstractmethod
    def GetBasicStoppingConditions(
        self,
        request: luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetBasicStoppingConditionsRequest,
        context: grpc.ServicerContext,
    ) -> luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetBasicStoppingConditionsResponse:
        """Retrieves the basic stopping conditions."""
    @abc.abstractmethod
    def UpdateBasicStoppingConditions(
        self,
        request: luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.UpdateBasicStoppingConditionsRequest,
        context: grpc.ServicerContext,
    ) -> luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.UpdateBasicStoppingConditionsResponse:
        """Updates the basic stopping conditions."""
    @abc.abstractmethod
    def CreateOrUpdateStoppingCondition(
        self,
        request: luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.CreateOrUpdateStoppingConditionRequest,
        context: grpc.ServicerContext,
    ) -> luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.CreateOrUpdateStoppingConditionResponse:
        """Create a stopping condition on an output definition, or update it if the stopping condition
        already has one.

        While this API will prevent the creation of multiple stopping conditions on the same output
        definition, the UI does not. If this endpoint is invoked with an output definition that has
        multiple stopping conditions, all but one will be deleted, and the remaining one will be
        updated.
        """
    @abc.abstractmethod
    def GetStoppingCondition(
        self,
        request: luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetStoppingConditionRequest,
        context: grpc.ServicerContext,
    ) -> luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.GetStoppingConditionResponse:
        """Retrieves a stopping condition."""
    @abc.abstractmethod
    def ListStoppingConditions(
        self,
        request: luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.ListStoppingConditionsRequest,
        context: grpc.ServicerContext,
    ) -> luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.ListStoppingConditionsResponse:
        """Lists all stopping conditions for a simulation template."""
    @abc.abstractmethod
    def DeleteStoppingCondition(
        self,
        request: luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.DeleteStoppingConditionRequest,
        context: grpc.ServicerContext,
    ) -> luminarycloud._proto.api.v0.luminarycloud.stopping_condition.stopping_condition_pb2.DeleteStoppingConditionResponse:
        """Deletes a stopping condition."""

def add_StoppingConditionServiceServicer_to_server(servicer: StoppingConditionServiceServicer, server: grpc.Server) -> None: ...
