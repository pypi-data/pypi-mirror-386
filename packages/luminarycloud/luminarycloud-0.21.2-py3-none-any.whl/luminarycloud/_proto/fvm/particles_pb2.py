# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/fvm/particles.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from luminarycloud._proto.base import base_pb2 as proto_dot_base_dot_base__pb2
from luminarycloud._proto.table import table_pb2 as proto_dot_table_dot_table__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x19proto/fvm/particles.proto\x12\x12luminary.proto.fvm\x1a\x15proto/base/base.proto\x1a\x17proto/table/table.proto\"\xf6\x01\n!ActuatorDiskRadialDistributionRow\x12\x38\n\x0eradial_station\x18\x01 \x01(\x0b\x32 .luminary.proto.base.AdFloatType\x12/\n\x05\x61xial\x18\x02 \x01(\x0b\x32 .luminary.proto.base.AdFloatType\x12\x34\n\ntangential\x18\x03 \x01(\x0b\x32 .luminary.proto.base.AdFloatType\x12\x30\n\x06radial\x18\x04 \x01(\x0b\x32 .luminary.proto.base.AdFloatType\"i\n#ActuatorDiskRadialDistributionTable\x12\x42\n\x03row\x18\x01 \x03(\x0b\x32\x35.luminary.proto.fvm.ActuatorDiskRadialDistributionRow\"\xea\x03\n\x16\x42ladeElementDefinition\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\t\x12\x32\n\nblade_root\x18\x03 \x01(\x0b\x32\x1e.luminary.proto.base.AdVector3\x12\x35\n\x0b\x62lade_angle\x18\x04 \x01(\x0b\x32 .luminary.proto.base.AdFloatType\x12\x38\n\x08geometry\x18\x05 \x01(\x0b\x32&.luminary.proto.table.RectilinearTable\x12\x37\n\x07\x61irfoil\x18\x06 \x01(\x0b\x32&.luminary.proto.table.RectilinearTable\x12/\n\x05\x61lpha\x18\x07 \x03(\x0b\x32 .luminary.proto.base.AdFloatType\x12.\n\x04mach\x18\x08 \x03(\x0b\x32 .luminary.proto.base.AdFloatType\x12\x39\n\x0freynolds_number\x18\t \x03(\x0b\x32 .luminary.proto.base.AdFloatType\x12<\n\x0c\x61\x65rodynamics\x18\n \x03(\x0b\x32&.luminary.proto.table.RectilinearTableB\"Z luminarycloud.com/core/proto/fvmb\x06proto3')



_ACTUATORDISKRADIALDISTRIBUTIONROW = DESCRIPTOR.message_types_by_name['ActuatorDiskRadialDistributionRow']
_ACTUATORDISKRADIALDISTRIBUTIONTABLE = DESCRIPTOR.message_types_by_name['ActuatorDiskRadialDistributionTable']
_BLADEELEMENTDEFINITION = DESCRIPTOR.message_types_by_name['BladeElementDefinition']
ActuatorDiskRadialDistributionRow = _reflection.GeneratedProtocolMessageType('ActuatorDiskRadialDistributionRow', (_message.Message,), {
  'DESCRIPTOR' : _ACTUATORDISKRADIALDISTRIBUTIONROW,
  '__module__' : 'proto.fvm.particles_pb2'
  # @@protoc_insertion_point(class_scope:luminary.proto.fvm.ActuatorDiskRadialDistributionRow)
  })
_sym_db.RegisterMessage(ActuatorDiskRadialDistributionRow)

ActuatorDiskRadialDistributionTable = _reflection.GeneratedProtocolMessageType('ActuatorDiskRadialDistributionTable', (_message.Message,), {
  'DESCRIPTOR' : _ACTUATORDISKRADIALDISTRIBUTIONTABLE,
  '__module__' : 'proto.fvm.particles_pb2'
  # @@protoc_insertion_point(class_scope:luminary.proto.fvm.ActuatorDiskRadialDistributionTable)
  })
_sym_db.RegisterMessage(ActuatorDiskRadialDistributionTable)

BladeElementDefinition = _reflection.GeneratedProtocolMessageType('BladeElementDefinition', (_message.Message,), {
  'DESCRIPTOR' : _BLADEELEMENTDEFINITION,
  '__module__' : 'proto.fvm.particles_pb2'
  # @@protoc_insertion_point(class_scope:luminary.proto.fvm.BladeElementDefinition)
  })
_sym_db.RegisterMessage(BladeElementDefinition)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z luminarycloud.com/core/proto/fvm'
  _ACTUATORDISKRADIALDISTRIBUTIONROW._serialized_start=98
  _ACTUATORDISKRADIALDISTRIBUTIONROW._serialized_end=344
  _ACTUATORDISKRADIALDISTRIBUTIONTABLE._serialized_start=346
  _ACTUATORDISKRADIALDISTRIBUTIONTABLE._serialized_end=451
  _BLADEELEMENTDEFINITION._serialized_start=454
  _BLADEELEMENTDEFINITION._serialized_end=944
# @@protoc_insertion_point(module_scope)
