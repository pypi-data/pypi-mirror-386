"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Condition(google.protobuf.message.Message):
    """Options for parameters defined in fvm/param.proto

    Represents a condition of a parameter that must be fullfilled in order for
    the parameter to be available
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHOICE_FIELD_NUMBER: builtins.int
    ANYOF_FIELD_NUMBER: builtins.int
    ALLOF_FIELD_NUMBER: builtins.int
    FALSE_FIELD_NUMBER: builtins.int
    NOT_FIELD_NUMBER: builtins.int
    BOOLEAN_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    @property
    def choice(self) -> global___Choice: ...
    @property
    def anyof(self) -> global___AnyOf: ...
    @property
    def allof(self) -> global___AllOf: ...
    @property
    def false(self) -> global____r_False: ...
    @property
    def boolean(self) -> global___TrueFalse: ...
    @property
    def tag(self) -> global___Tag: ...
    def __init__(
        self,
        *,
        choice: global___Choice | None = ...,
        anyof: global___AnyOf | None = ...,
        allof: global___AllOf | None = ...,
        false: global____r_False | None = ...,
        boolean: global___TrueFalse | None = ...,
        tag: global___Tag | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["allof", b"allof", "anyof", b"anyof", "boolean", b"boolean", "choice", b"choice", "false", b"false", "not", b"not", "tag", b"tag", "typ", b"typ"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allof", b"allof", "anyof", b"anyof", "boolean", b"boolean", "choice", b"choice", "false", b"false", "not", b"not", "tag", b"tag", "typ", b"typ"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["typ", b"typ"]) -> typing_extensions.Literal["choice", "anyof", "allof", "false", "not", "boolean", "tag"] | None: ...

global___Condition = Condition

class Choice(google.protobuf.message.Message):
    """A choice condition that must be enabled in order for a parameter to be
    available
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAG_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    PARAM_NAME_FIELD_NUMBER: builtins.int
    tag: builtins.int
    name: builtins.str
    param_name: builtins.str
    def __init__(
        self,
        *,
        tag: builtins.int = ...,
        name: builtins.str = ...,
        param_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name", b"name", "param_name", b"param_name", "tag", b"tag"]) -> None: ...

global___Choice = Choice

class AnyOf(google.protobuf.message.Message):
    """Group of conditions in which any of them must be fulfilled in order for a
    parameter to be available
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COND_FIELD_NUMBER: builtins.int
    @property
    def cond(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Condition]: ...
    def __init__(
        self,
        *,
        cond: collections.abc.Iterable[global___Condition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cond", b"cond"]) -> None: ...

global___AnyOf = AnyOf

class AllOf(google.protobuf.message.Message):
    """Group of conditions in which all of them must be fulfilled in order for a
    parameter to be available
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COND_FIELD_NUMBER: builtins.int
    @property
    def cond(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Condition]: ...
    def __init__(
        self,
        *,
        cond: collections.abc.Iterable[global___Condition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cond", b"cond"]) -> None: ...

global___AllOf = AllOf

class _r_False(google.protobuf.message.Message):
    """The parameter is always hidden."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global____r_False = _r_False

class Not(google.protobuf.message.Message):
    """Logical complement for a condition"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COND_FIELD_NUMBER: builtins.int
    @property
    def cond(self) -> global___Condition: ...
    def __init__(
        self,
        *,
        cond: global___Condition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cond", b"cond"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cond", b"cond"]) -> None: ...

global___Not = Not

class TrueFalse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARAM_NAME_TAG_FIELD_NUMBER: builtins.int
    param_name_tag: builtins.int
    def __init__(
        self,
        *,
        param_name_tag: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["param_name_tag", b"param_name_tag"]) -> None: ...

global___TrueFalse = TrueFalse

class Tag(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAG_NAME_FIELD_NUMBER: builtins.int
    tag_name: builtins.str
    def __init__(
        self,
        *,
        tag_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["tag_name", b"tag_name"]) -> None: ...

global___Tag = Tag
