[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tgiot-device-simulator"
version = "1.0.0"
description = "A comprehensive IoT device simulator for Azure IoT Hub and IoT Platform servers"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [{ name = "IoT Platform Team", email = "iot-platform@example.com" }]
keywords = ["iot", "azure", "simulator", "device", "telemetry"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
]

dependencies = [
    "azure-iot-device>=2.12.0",
    "aiohttp>=3.10.0",
    "rich>=13.6.0",
    "pydantic>=2.12.0",
    "authlib>=1.2.0",
    "faker>=26.0.0",
    "PyJWT>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]
test = ["pytest>=7.4.0", "pytest-asyncio>=0.21.0", "pytest-cov>=4.1.0"]
lint = ["ruff>=0.1.0", "mypy>=1.6.0", "black>=23.0.0", "isort>=5.12.0"]

[project.urls]
Homepage = "https://github.com/your-org/iot-device-simulator"
Documentation = "https://iot-device-simulator.readthedocs.io"
Repository = "https://github.com/your-org/iot-device-simulator.git"
"Bug Tracker" = "https://github.com/your-org/iot-device-simulator/issues"

[project.scripts]
iot-simulator = "simulator.main:cli_main"

[tool.setuptools.packages.find]
where = ["."]
include = ["simulator*"]
exclude = ["tests*", "docs*", "api/generated*", "venv*"]

[tool.setuptools.package-data]
simulator = ["schemas/*.json", "config/*.json", "config/*.toml", "config/templates/*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | api/generated
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["simulator"]
skip_glob = ["api/generated/*"]

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "api/generated",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["azure.iot.device.*", "faker.*", "rich.*", "aiohttp.*", "authlib.*"]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["simulator", "src"]
omit = ["*/tests/*", "*/test_*", "api/generated/*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
