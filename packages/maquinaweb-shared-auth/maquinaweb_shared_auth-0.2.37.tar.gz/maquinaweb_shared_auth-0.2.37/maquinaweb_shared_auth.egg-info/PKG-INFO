Metadata-Version: 2.4
Name: maquinaweb-shared-auth
Version: 0.2.37
Summary: Models read-only para autentica√ß√£o compartilhada entre projetos Django.
Author-email: Seu Nome <seuemail@dominio.com>
License: MIT
Project-URL: Homepage, https://github.com/maquinaweb/maquinaweb-shared-auth
Project-URL: Repository, https://github.com/maquinaweb/maquinaweb-shared-auth
Project-URL: Issues, https://github.com/maquinaweb/maquinaweb-shared-auth/issues
Keywords: django,auth,models,shared
Classifier: Framework :: Django
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: django>=5
Requires-Dist: django-storages>=1.14.6
Requires-Dist: djangorestframework>=3
Requires-Dist: setuptools>=70
Dynamic: requires-python

# üîê Maquinaweb Shared Auth

> Biblioteca Django para autentica√ß√£o compartilhada entre m√∫ltiplos sistemas usando um √∫nico banco de dados centralizado.

[![Python](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![Django](https://img.shields.io/badge/django-4.2+-green.svg)](https://www.djangoproject.com/)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)

## üìã √çndice

- [Vis√£o Geral](#-vis√£o-geral)
- [Caracter√≠sticas](#-caracter√≠sticas)
- [Arquitetura](#Ô∏è-arquitetura)
- [Instala√ß√£o](#-instala√ß√£o)
- [Configura√ß√£o](#Ô∏è-configura√ß√£o)
- [Uso B√°sico](#-uso-b√°sico)
- [Guias Avan√ßados](#-guias-avan√ßados)
- [API Reference](#-api-reference)

---

## üéØ Vis√£o Geral

A **Maquinaweb Shared Auth** permite que m√∫ltiplos sistemas Django compartilhem dados de autentica√ß√£o, usu√°rios e organiza√ß√µes atrav√©s de um banco de dados centralizado, sem necessidade de requisi√ß√µes HTTP.

### Problema Resolvido

Ao inv√©s de:
- ‚ùå Duplicar dados de usu√°rios em cada sistema
- ‚ùå Fazer requisi√ß√µes HTTP entre sistemas
- ‚ùå Manter m√∫ltiplos bancos de autentica√ß√£o sincronizados

Voc√™ pode:
- ‚úÖ Acessar dados de autentica√ß√£o diretamente do banco central
- ‚úÖ Usar a interface familiar do Django ORM
- ‚úÖ Garantir consist√™ncia de dados entre sistemas
- ‚úÖ Trabalhar com models read-only seguros

---

## ‚ú® Caracter√≠sticas

### Core Features

- **üîê Autentica√ß√£o Centralizada**: Token-based authentication compartilhado
- **üè¢ Multi-Tenancy**: Suporte completo a organiza√ß√µes e filiais
- **üë• Gest√£o de Membros**: Relacionamento usu√°rios ‚Üî organiza√ß√µes
- **üîí Read-Only Safety**: Prote√ß√£o contra modifica√ß√µes acidentais
- **‚ö° Performance**: Managers otimizados com prefetch autom√°tico
- **üé® DRF Ready**: Mixins para serializers com dados aninhados

### Componentes Principais

| Componente | Descri√ß√£o |
|------------|-----------|
| **Models** | SharedOrganization, User, SharedMember, SharedToken |
| **Mixins** | OrganizationMixin, UserMixin, OrganizationUserMixin |
| **Serializers** | OrganizationSerializerMixin, UserSerializerMixin |
| **Authentication** | SharedTokenAuthentication |
| **Middleware** | SharedAuthMiddleware, OrganizationMiddleware |
| **Permissions** | IsAuthenticated, HasActiveOrganization, IsSameOrganization |
| **Managers** | M√©todos otimizados com prefetch e valida√ß√µes |

---

## üèóÔ∏è Arquitetura

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Sistema de Autentica√ß√£o Central  ‚îÇ
‚îÇ                                     ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇOrganization  ‚îÇ  ‚îÇ    User    ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ         ‚îÇ                ‚îÇ         ‚îÇ
‚îÇ         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò         ‚îÇ
‚îÇ                  ‚îÇ                 ‚îÇ
‚îÇ           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê         ‚îÇ
‚îÇ           ‚îÇ   Member    ‚îÇ         ‚îÇ
‚îÇ           ‚îÇ   Token     ‚îÇ         ‚îÇ
‚îÇ           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                   ‚îÇ
      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
      ‚îÇ  PostgreSQL/MySQL       ‚îÇ
      ‚îÇ  (auth_db)              ‚îÇ
      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                   ‚îÇ
      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
      ‚îÇ                         ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Sistema A ‚îÇ            ‚îÇ Sistema B ‚îÇ
‚îÇ           ‚îÇ            ‚îÇ           ‚îÇ
‚îÇ Pedidos   ‚îÇ            ‚îÇ Estoque   ‚îÇ
‚îÇ ‚îú‚îÄ org    ‚îÇ            ‚îÇ ‚îú‚îÄ org    ‚îÇ
‚îÇ ‚îî‚îÄ user   ‚îÇ            ‚îÇ ‚îî‚îÄ user   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Fluxo de Autentica√ß√£o:**

1. Cliente envia request com token no header
2. Middleware valida token no banco `auth_db`
3. Dados do usu√°rio e organiza√ß√£o s√£o anexados ao `request`
4. Sistema cliente acessa dados via ORM (read-only)

---

## üì¶ Instala√ß√£o

### 1. Instalar a Biblioteca

```bash
# Via pip (quando publicado)
pip install maquinaweb-shared-auth

# Ou modo desenvolvimento
pip install -e /path/to/maquinaweb-shared-auth
```

### 2. Adicionar ao requirements.txt

```txt
Django>=4.2
djangorestframework>=3.14
maquinaweb-shared-auth>=0.2.25
```

---

## ‚öôÔ∏è Configura√ß√£o

### 1. Settings do Django

```python
# settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'rest_framework',
    
    # Adicionar shared_auth
    'shared_auth',
    
    # Suas apps
    'myapp',
]
```

### 2. Configurar Banco de Dados

```python
# settings.py

DATABASES = {
    'default': {
        # Banco do sistema atual
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'meu_sistema_db',
        'USER': 'meu_user',
        'PASSWORD': 'senha',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    'auth_db': {
        # Banco centralizado de autentica√ß√£o (READ-ONLY)
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'sistema_auth_db',
        'USER': 'readonly_user',
        'PASSWORD': 'senha_readonly',
        'HOST': 'auth-server.example.com',
        'PORT': '5432',
    }
}

# Router para direcionar queries
DATABASE_ROUTERS = ['shared_auth.router.SharedAuthRouter']
```

### 3. Configurar Autentica√ß√£o (DRF)

```python
# settings.py

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'shared_auth.authentication.SharedTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'shared_auth.permissions.IsAuthenticated',
    ],
}
```

### 4. Configurar Middleware (Opcional)

```python
# settings.py

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    
    # Middlewares da shared_auth
    'shared_auth.middleware.SharedAuthMiddleware',
    'shared_auth.middleware.OrganizationMiddleware',
    
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]
```

### 5. Configurar Tabelas (Opcional)

```python
# settings.py

# Customizar nomes das tabelas (se necess√°rio)
SHARED_AUTH_ORGANIZATION_TABLE = 'organization_organization'
SHARED_AUTH_USER_TABLE = 'auth_user'
SHARED_AUTH_MEMBER_TABLE = 'organization_member'
SHARED_AUTH_TOKEN_TABLE = 'authtoken_token'
```

### 6. Criar Usu√°rio Read-Only no PostgreSQL

```sql
-- No servidor de autentica√ß√£o
CREATE USER readonly_user WITH PASSWORD 'senha_segura_aqui';

-- Conceder permiss√µes
GRANT CONNECT ON DATABASE sistema_auth_db TO readonly_user;
GRANT USAGE ON SCHEMA public TO readonly_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user;

-- Para tabelas futuras
ALTER DEFAULT PRIVILEGES IN SCHEMA public 
GRANT SELECT ON TABLES TO readonly_user;

-- Garantir read-only
ALTER USER readonly_user SET default_transaction_read_only = on;
```

---

## üöÄ Uso B√°sico

### 1. Models com Mixins

```python
# myapp/models.py
from django.db import models
from shared_auth.mixins import OrganizationUserMixin, TimestampedMixin
from shared_auth.managers import BaseAuthManager

class Pedido(OrganizationUserMixin, TimestampedMixin):
    """Model que pertence a organiza√ß√£o e usu√°rio"""
    
    numero = models.CharField(max_length=20, unique=True)
    valor_total = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, default='pending')
    
    objects = BaseAuthManager()
    
    def __str__(self):
        return f"Pedido {self.numero}"
```

**O que voc√™ ganha automaticamente:**
- ‚úÖ Campos: `organization_id`, `user_id`, `created_at`, `updated_at`
- ‚úÖ Properties: `organization`, `user`, `organization_name`, `user_email`
- ‚úÖ M√©todos: `validate_user_belongs_to_organization()`, `user_can_access()`

### 2. Serializers com Dados Aninhados

```python
# myapp/serializers.py
from rest_framework import serializers
from shared_auth.serializers import OrganizationUserSerializerMixin
from .models import Pedido

class PedidoSerializer(OrganizationUserSerializerMixin, serializers.ModelSerializer):
    class Meta:
        model = Pedido
        fields = [
            'id', 'numero', 'valor_total', 'status',
            'organization',  # Objeto completo
            'user',          # Objeto completo
            'created_at',
        ]
        read_only_fields = ['organization', 'user', 'created_at']
```

**Response JSON:**
```json
{
  "id": 1,
  "numero": "PED-001",
  "valor_total": "1500.00",
  "status": "pending",
  "organization": {
    "id": 123,
    "name": "Empresa XYZ Ltda",
    "fantasy_name": "XYZ",
    "cnpj": "12.345.678/0001-90",
    "email": "contato@xyz.com",
    "is_active": true
  },
  "user": {
    "id": 456,
    "username": "joao.silva",
    "email": "joao@xyz.com",
    "full_name": "Jo√£o Silva",
    "is_active": true
  },
  "created_at": "2025-10-01T10:00:00Z"
}
```

### 3. ViewSets com Organiza√ß√£o

```python
# myapp/views.py
from rest_framework import viewsets
from shared_auth.mixins import LoggedOrganizationMixin
from shared_auth.permissions import HasActiveOrganization, IsSameOrganization
from .models import Pedido
from .serializers import PedidoSerializer

class PedidoViewSet(LoggedOrganizationMixin, viewsets.ModelViewSet):
    """
    ViewSet que filtra automaticamente por organiza√ß√£o logada
    """
    serializer_class = PedidoSerializer
    permission_classes = [HasActiveOrganization, IsSameOrganization]
    
    # get_queryset() j√° filtra por organization_id automaticamente
    # perform_create() j√° adiciona organization_id automaticamente
```

### 4. Acessar Dados Compartilhados

```python
# Em qualquer lugar do c√≥digo
from shared_auth.models import SharedOrganization, User, SharedMember

# Buscar organiza√ß√£o
org = SharedOrganization.objects.get_or_fail(123)
print(org.name)  # "Empresa XYZ"
print(org.members)  # QuerySet de membros

# Buscar usu√°rio
user = User.objects.get_or_fail(456)
print(user.email)  # "joao@xyz.com"
print(user.organizations)  # Organiza√ß√µes do usu√°rio

# Verificar membership
member = SharedMember.objects.filter(
    user_id=456,
    organization_id=123
).first()

if member:
    print(f"{member.user.email} √© membro de {member.organization.name}")
```

---

## üìö Guias Avan√ßados

### Mixins para Models

#### 1. OrganizationMixin
Para models que pertencem apenas a uma organiza√ß√£o.

```python
from shared_auth.mixins import OrganizationMixin

class EmpresaConfig(OrganizationMixin):
    tema_cor = models.CharField(max_length=7, default='#3490dc')
    logo = models.ImageField(upload_to='logos/')
    
# Uso
config = EmpresaConfig.objects.create(organization_id=123, tema_cor='#ff0000')
print(config.organization.name)  # Acesso autom√°tico
print(config.organization_members)  # Membros da organiza√ß√£o
```

#### 2. UserMixin
Para models que pertencem apenas a um usu√°rio.

```python
from shared_auth.mixins import UserMixin

class UserPreferences(UserMixin):
    theme = models.CharField(max_length=20, default='light')
    notifications_enabled = models.BooleanField(default=True)

# Uso
prefs = UserPreferences.objects.create(user_id=456, theme='dark')
print(prefs.user.email)
print(prefs.user_full_name)
```

#### 3. OrganizationUserMixin
Para models que pertencem a organiza√ß√£o E usu√°rio (mais comum).

```python
from shared_auth.mixins import OrganizationUserMixin, TimestampedMixin

class Tarefa(OrganizationUserMixin, TimestampedMixin):
    titulo = models.CharField(max_length=200)
    descricao = models.TextField()
    status = models.CharField(max_length=20, default='pending')

# Uso
tarefa = Tarefa.objects.create(
    organization_id=123,
    user_id=456,
    titulo='Implementar feature X'
)

# Valida√ß√µes
if tarefa.validate_user_belongs_to_organization():
    print("‚úì Usu√°rio pertence √† organiza√ß√£o")

if tarefa.user_can_access(outro_user_id):
    print("‚úì Outro usu√°rio pode acessar")
```

### Managers Otimizados

```python
from shared_auth.managers import BaseAuthManager

class Pedido(OrganizationUserMixin):
    # ...
    objects = BaseAuthManager()

# Filtrar por organiza√ß√£o
pedidos = Pedido.objects.for_organization(123)

# Filtrar por usu√°rio
meus_pedidos = Pedido.objects.for_user(456)

# Prefetch autom√°tico (evita N+1)
pedidos = Pedido.objects.with_auth_data()
for pedido in pedidos:
    print(pedido.organization.name)  # Sem query adicional
    print(pedido.user.email)  # Sem query adicional
```

### Serializers - Varia√ß√µes

#### Vers√£o Completa (Detail)
```python
from shared_auth.serializers import OrganizationUserSerializerMixin

class PedidoDetailSerializer(OrganizationUserSerializerMixin, serializers.ModelSerializer):
    class Meta:
        model = Pedido
        fields = ['id', 'numero', 'organization', 'user', 'created_at']
```

#### Vers√£o Simplificada (List)
```python
from shared_auth.serializers import (
    OrganizationSimpleSerializerMixin,
    UserSimpleSerializerMixin
)

class PedidoListSerializer(
    OrganizationSimpleSerializerMixin,
    UserSimpleSerializerMixin,
    serializers.ModelSerializer
):
    class Meta:
        model = Pedido
        fields = ['id', 'numero', 'organization', 'user']
    
# Response com dados reduzidos
{
  "id": 1,
  "numero": "PED-001",
  "organization": {
    "id": 123,
    "name": "Empresa XYZ",
    "cnpj": "12.345.678/0001-90"
  },
  "user": {
    "id": 456,
    "email": "joao@xyz.com",
    "full_name": "Jo√£o Silva"
  }
}
```

#### Customiza√ß√£o Avan√ßada
```python
class PedidoSerializer(OrganizationUserSerializerMixin, serializers.ModelSerializer):
    
    def get_organization(self, obj):
        """Override para adicionar campos customizados"""
        org_data = super().get_organization(obj)
        
        if org_data:
            # Adicionar dados extras
            org_data['logo_url'] = f"/logos/{obj.organization_id}.png"
            org_data['member_count'] = obj.organization.members.count()
        
        return org_data
```

### Middleware

#### SharedAuthMiddleware
Autentica usu√°rio baseado no token.

```python
# settings.py
MIDDLEWARE = [
    # ...
    'shared_auth.middleware.SharedAuthMiddleware',
]
```

**Busca token em:**
- Header: `Authorization: Token <token>`
- Header: `X-Auth-Token: <token>`
- Cookie: `auth_token`

**Adiciona ao request:**
- `request.user` - Objeto User autenticado
- `request.auth` - Token object

#### OrganizationMiddleware
Adiciona organiza√ß√£o logada ao request.

```python
# settings.py
MIDDLEWARE = [
    'shared_auth.middleware.SharedAuthMiddleware',
    'shared_auth.middleware.OrganizationMiddleware',  # Depois do Auth
]
```

**Busca organiza√ß√£o:**
1. Header `X-Organization: <org_id>`
2. Primeira organiza√ß√£o do usu√°rio autenticado

**Adiciona ao request:**
- `request.organization_id` - ID da organiza√ß√£o
- `request.organization` - Objeto SharedOrganization

**Uso em views:**
```python
def my_view(request):
    org_id = request.organization_id
    org = request.organization
    
    if org:
        print(f"Organiza√ß√£o logada: {org.name}")
```

### Permissions

```python
from shared_auth.permissions import (
    IsAuthenticated,
    HasActiveOrganization,
    IsSameOrganization,
    IsOwnerOrSameOrganization,
)

class PedidoViewSet(viewsets.ModelViewSet):
    permission_classes = [
        IsAuthenticated,           # Requer autentica√ß√£o
        HasActiveOrganization,     # Requer organiza√ß√£o ativa
        IsSameOrganization,        # Objeto da mesma org
    ]
    
# Ou combina√ß√µes
class TarefaViewSet(viewsets.ModelViewSet):
    permission_classes = [IsOwnerOrSameOrganization]
    # Permite se for dono OU da mesma organiza√ß√£o
```

### Authentication

```python
# Em qualquer view/viewset DRF
from shared_auth.authentication import SharedTokenAuthentication

class MyAPIView(APIView):
    authentication_classes = [SharedTokenAuthentication]
    
    def get(self, request):
        user = request.user  # User autenticado
        token = request.auth  # SharedToken object
        
        return Response({
            'user': user.email,
            'token_created': token.created
        })
```

---

## üîç API Reference

### Models

#### SharedOrganization

```python
from shared_auth.models import SharedOrganization

# Campos
org.id
org.name
org.fantasy_name
org.cnpj
org.email
org.telephone
org.cellphone
org.image_organization
org.is_branch
org.main_organization_id
org.created_at
org.updated_at
org.deleted_at

# Properties
org.main_organization  # SharedOrganization | None
org.branches  # QuerySet[SharedOrganization]
org.members  # QuerySet[SharedMember]
org.users  # QuerySet[User]

# M√©todos
org.is_active()  # bool
```

#### User

```python
from shared_auth.models import User

# Campos (AbstractUser + custom)
user.id
user.username
user.email
user.first_name
user.last_name
user.is_active
user.is_staff
user.is_superuser
user.date_joined
user.last_login
user.avatar
user.createdat
user.updatedat
user.deleted_at

# Properties
user.organizations  # QuerySet[SharedOrganization]

# M√©todos
user.get_full_name()  # str
user.get_org(organization_id)  # SharedOrganization | raise
```

#### SharedMember

```python
from shared_auth.models import SharedMember

# Campos
member.id
member.user_id
member.organization_id
member.metadata  # JSONField

# Properties
member.user  # User
member.organization  # SharedOrganization
```

#### SharedToken

```python
from shared_auth.models import SharedToken

# Campos
token.key  # Primary Key
token.user_id
token.created

# Properties
token.user  # User

# M√©todos
token.is_valid()  # bool
```

### Managers

#### SharedOrganizationManager

```python
from shared_auth.models import SharedOrganization

SharedOrganization.objects.get_or_fail(123)  # Org | raise OrganizationNotFoundError
SharedOrganization.objects.active()  # QuerySet (deleted_at is null)
SharedOrganization.objects.branches()  # QuerySet (is_branch=True)
SharedOrganization.objects.main_organizations()  # QuerySet (is_branch=False)
SharedOrganization.objects.by_cnpj('12.345.678/0001-90')  # Org | None
```

#### UserManager

```python
from shared_auth.models import User

User.objects.get_or_fail(456)  # User | raise UserNotFoundError
User.objects.active()  # QuerySet (is_active=True, deleted_at is null)
User.objects.by_email('user@example.com')  # User | None
```

#### SharedMemberManager

```python
from shared_auth.models import SharedMember

SharedMember.objects.for_user(456)  # QuerySet
SharedMember.objects.for_organization(123)  # QuerySet
```

#### BaseAuthManager (para seus models)

```python
# Quando usa OrganizationMixin
Model.objects.for_organization(123)  # QuerySet
Model.objects.for_organizations([123, 456])  # QuerySet
Model.objects.with_organization_data()  # List com prefetch

# Quando usa UserMixin
Model.objects.for_user(456)  # QuerySet
Model.objects.for_users([456, 789])  # QuerySet
Model.objects.with_user_data()  # List com prefetch

# Quando usa OrganizationUserMixin
Model.objects.with_auth_data()  # List com prefetch de org e user
Model.objects.create_with_validation(
    organization_id=123,
    user_id=456,
    **kwargs
)  # Valida membership antes de criar
```

### Exceptions

```python
from shared_auth.exceptions import (
    SharedAuthError,
    OrganizationNotFoundError,
    UserNotFoundError,
    DatabaseConnectionError,
)

try:
    org = SharedOrganization.objects.get_or_fail(999)
except OrganizationNotFoundError as e:
    print(e)  # "Organiza√ß√£o com ID 999 n√£o encontrada"
```

---

## üéØ Casos de Uso Reais

### Sistema de Pedidos Multi-Tenant

```python
# models.py
from shared_auth.mixins import OrganizationUserMixin, TimestampedMixin

class Pedido(OrganizationUserMixin, TimestampedMixin):
    numero = models.CharField(max_length=20, unique=True)
    valor_total = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20)
    
    objects = BaseAuthManager()

class ItemPedido(models.Model):
    pedido = models.ForeignKey(Pedido, related_name='itens')
    produto = models.CharField(max_length=200)
    quantidade = models.IntegerField()
    valor_unitario = models.DecimalField(max_digits=10, decimal_places=2)

# serializers.py
from shared_auth.serializers import OrganizationUserSerializerMixin

class ItemPedidoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ItemPedido
        fields = ['id', 'produto', 'quantidade', 'valor_unitario']

class PedidoSerializer(OrganizationUserSerializerMixin, serializers.ModelSerializer):
    itens = ItemPedidoSerializer(many=True, read_only=True)
    
    class Meta:
        model = Pedido
        fields = [
            'id', 'numero', 'valor_total', 'status',
            'organization', 'user', 'itens', 'created_at'
        ]

# views.py
from shared_auth.mixins import LoggedOrganizationMixin
from shared_auth.permissions import HasActiveOrganization

class PedidoViewSet(LoggedOrganizationMixin, viewsets.ModelViewSet):
    serializer_class = PedidoSerializer
    permission_classes = [HasActiveOrganization]
    
    def get_queryset(self):
        # J√° filtra por organization_id automaticamente
        return super().get_queryset().with_auth_data()
```

### Sistema de Tarefas com Respons√°veis

```python
# models.py
class Tarefa(OrganizationUserMixin, TimestampedMixin):
    """
    user_id = criador
    responsavel_id = quem vai executar
    """
    titulo = models.CharField(max_length=200)
    descricao = models.TextField()
    responsavel_id = models.IntegerField()
    status = models.CharField(max_length=20, default='pending')
    
    objects = BaseAuthManager()
    
    @property
    def responsavel(self):
        """Acessa usu√°rio respons√°vel"""
        if not hasattr(self, '_cached_responsavel'):
            from shared_auth.models import User
            self._cached_responsavel = User.objects.get_or_fail(self.responsavel_id)
        return self._cached_responsavel

# serializers.py
class TarefaSerializer(OrganizationUserSerializerMixin, serializers.ModelSerializer):
    responsavel = serializers.SerializerMethodField()
    
    def get_responsavel(self, obj):
        try:
            resp = obj.responsavel
            return {
                'id': resp.pk,
                'email': resp.email,
                'full_name': resp.get_full_name(),
            }
        except:
            return None
    
    class Meta:
        model = Tarefa
        fields = [
            'id', 'titulo', 'descricao', 'status',
            'organization',  # Organiza√ß√£o dona
            'user',  # Criador
            'responsavel',  # Executor
            'created_at'
        ]
```

---

## üîß Troubleshooting

### Problema: Queries lentas (N+1)

**Solu√ß√£o:** Use os managers com prefetch

```python
# ‚ùå Ruim - Causa N+1
pedidos = Pedido.objects.all()
for pedido in pedidos:
    print(pedido.organization.name)  # Query por item!

# ‚úÖ Bom - 3 queries total
pedidos = Pedido.objects.with_auth_data()
for pedido in pedidos:
    print(pedido.organization.name)  # Sem query adicional
```

### Problema: OrganizationNotFoundError

**Causa:** ID de organiza√ß√£o inv√°lido ou deletada

**Solu√ß√£o:**
```python
# Usar try/except
try:
    org = SharedOrganization.objects.get_or_fail(org_id)
except OrganizationNotFoundError:
    # Tratar erro
    return Response({'error': 'Organiza√ß√£o n√£o encontrada'}, status=404)

# Ou usar filter
org = SharedOrganization.objects.filter(pk=org_id).first()
if not org:
    # Tratar
```

### Problema: Erro de conex√£o com auth_db

**Solu√ß√£o:** Verificar configura√ß√£o do database router e permiss√µes

```python
# Testar conex√£o
from django.db import connections

connection = connections['auth_db']
with connection.cursor() as cursor:
    cursor.execute("SELECT 1")
    print("‚úì Conex√£o OK")
```

---

## üìù Changelog

### v0.2.25
- ‚ú® Adicionado suporte a imagens (avatar, logo)
- ‚ú® StorageBackend para arquivos compartilhados
- üêõ Corre√ß√µes nos serializers
- üìö Documenta√ß√£o melhorada

### v0.2.0
- ‚ú® Middlewares: SharedAuthMiddleware, OrganizationMiddleware
- ‚ú® Permissions customizadas
- ‚ú® Managers otimizados com prefetch
- ‚ú® Serializer mixins com dados aninhados

### v0.1.0
- üéâ Vers√£o inicial
- ‚ú® Models compartilhados
- ‚ú® Mixins b√°sicos
- ‚ú® Autentica√ß√£o via token

---

## üìÑ Licen√ßa

MIT License - veja [LICENSE](LICENSE) para detalhes.

---

## ü§ù Contribuindo

Contribui√ß√µes s√£o bem-vindas! Por favor, abra uma issue ou pull request.

---

## üìß Suporte

Para suporte, abra uma issue no GitHub ou entre em contato com a equipe Maquinaweb.

---

**Desenvolvido com ‚ù§Ô∏è por Maquinaweb**
