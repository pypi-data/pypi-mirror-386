{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json",
        "dbt_version": "0.20.1",
        "generated_at": "2021-09-16T21:44:51.749394Z",
        "invocation_id": "3b44f6e7-0a4a-4c81-8859-468b2d15075e",
        "env": {},
        "project_id": "68c4283db8074b12df1660b31c0220a9",
        "user_id": "e9290916-67f7-49e7-9351-0cdd3fd1476e",
        "send_anonymous_usage_stats": true,
        "adapter_type": "snowflake"
    },
    "nodes": {
        "model.analytics.metric_types": {
            "raw_sql": "select 1",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.analytics.recent_metrics"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "analytics",
            "schema": "prod",
            "fqn": [
                "analytics",
                "metrics",
                "metric_types"
            ],
            "unique_id": "model.analytics.metric_types",
            "package_name": "analytics",
            "root_path": "/Users/andyliu/workspace/dbt/analytics",
            "path": "metrics/metric_types.sql",
            "original_file_path": "models/metrics/metric_types.sql",
            "name": "metric_types",
            "alias": "metric_types",
            "checksum": {
                "name": "sha256",
                "checksum": "c493227a25afdb64bce587c27b8ed163084e7f28b1113cf3280e4d672a78d0bc"
            },
            "tags": [],
            "refs": [
                [
                    "recent_metrics"
                ]
            ],
            "sources": [],
            "description": "View of the various metric types seen over the last 60 days (e.g. total_row_count, total_byte_count)",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "analytics://models/metrics/schema.yml",
            "compiled_path": "target/compiled/analytics/models/metrics/metric_types.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1631828693,
            "compiled_sql": "select 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "analytics.prod.metric_types"
        },
        "model.analytics.recent_metrics": {
            "raw_sql": "select 1",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.analytics.normalized_events.resolved_metrics"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "analytics",
            "schema": "prod",
            "fqn": [
                "analytics",
                "metrics",
                "recent_metrics"
            ],
            "unique_id": "model.analytics.recent_metrics",
            "package_name": "analytics",
            "root_path": "/Users/andyliu/workspace/dbt/analytics",
            "path": "metrics/recent_metrics.sql",
            "original_file_path": "models/metrics/recent_metrics.sql",
            "name": "recent_metrics",
            "alias": "recent_metrics",
            "checksum": {
                "name": "sha256",
                "checksum": "9f12fb71529c6a218d5354ad643b3b539f4c08bd942099e70fb67af0c1b1693b"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "normalized_events",
                    "resolved_metrics"
                ]
            ],
            "description": "Snapshot of metrics, with measurement_index",
            "columns": {
                "resource_id": {
                    "name": "resource_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "metric": {
                    "name": "metric",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {
                "montecarlo": {
                    "freshness": [
                        {
                            "table": "analytics:prod.recent_metrics",
                            "description": "recent_metrics freshness",
                            "freshness_threshold": 80,
                            "schedule": {
                                "type": "fixed",
                                "interval_minutes": 10,
                                "start_time": "2021-07-27T00:00:00"
                            }
                        }
                    ]
                }
            },
            "docs": {
                "show": true
            },
            "patch_path": "analytics://models/metrics/schema.yml",
            "compiled_path": "target/compiled/analytics/models/metrics/recent_metrics.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental"
            },
            "created_at": 1631828693,
            "compiled_sql": "select 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "analytics.prod.recent_metrics"
        },
        "model.analytics.lineage_nodes": {
            "raw_sql": "--\n-- Create nodes by selecting all sources and destinations from normalized\n-- query log events, generating a natural ID, and deduping.\n--\nwith nodes_from_sources as (\n  select\n     account_id,\n     resource_id,\n     source.value:global_id::varchar as global_id,\n     source.value:unqualified_name::varchar as unqualified_name,\n     source.value:table_type::varchar as table_type,\n     source.value:table_path[0]::varchar as project_id,\n     source.value:table_path[1]::varchar as dataset_id,\n     source.value:table_path[2]::varchar as table_id,\n     lineage_query_logs.value:resource:resource_type::varchar as resource_type,\n     timestamp::timestamp_ntz as timestamp\n  from\n     {{ ref('lineage_query_logs') }},\n     lateral flatten(input => value:payload:sources) as source\n),\nnodes_from_destination as (\n  select\n      account_id,\n      resource_id,\n      value:payload:destination:global_id::varchar as global_id,\n      value:payload:destination:unqualified_name::varchar as unqualified_name,\n      value:payload:destination:table_type::varchar as table_type,\n      value:payload:destination:table_path[0]::varchar as project_id,\n      value:payload:destination:table_path[1]::varchar as dataset_id,\n      value:payload:destination:table_path[2]::varchar as table_id,\n      value:resource:resource_type::varchar as resource_type,\n      timestamp::timestamp_ntz as timestamp\n  from\n     {{ ref('lineage_query_logs') }}\n  where value:payload:destination is not null\n),\nnodes as (\n  select * from nodes_from_sources\n  union\n  select * from nodes_from_destination\n),\nnodes_with_ids as (\n  select\n      sha1(concat_ws('-',\n          coalesce(account_id::varchar, ''),\n          coalesce(resource_id::varchar, ''),\n          coalesce(global_id::varchar, unqualified_name::varchar, '')\n      )) as node_id,\n      row_number() over (\n        partition by node_id\n        order by timestamp desc\n      ) as row_num,\n      *\n  from nodes\n)\nselect\n    node_id,\n    account_id,\n    resource_id,\n    resource_type,\n    global_id,\n    unqualified_name,\n    project_id,\n    dataset_id,\n    table_id,\n    coalesce(global_id::varchar, unqualified_name::varchar) as display_name,\n    coalesce(global_id::varchar, unqualified_name::varchar) as canonical_name,\n    IFF(table_type is null and (\n        unqualified_name ilike any (\n            '%s3://%',\n            'gs://%',\n            '%.gz',\n            '%.csv',\n            '%/stages%',\n            '@%',\n            '%@stages%'\n        )\n        or unqualified_name rlike '.*/[^/]+\\.+.+' -- At least one \"/\" and an extension (a \".\" followed by at least one character)\n        or table_id ilike any (\n            '@%spark%',\n            '@%s3%',\n            '@%temp%',\n            '@%kafka%'\n        )\n    ), 'EXTERNAL', table_type) as table_type,\n    timestamp as last_seen,\n    false as blocked\nfrom nodes_with_ids\nwhere row_num = 1",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.analytics.lineage_query_logs",
                    "model.analytics.lineage_query_logs"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "lineage",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "analytics",
            "schema": "prod_lineage",
            "fqn": [
                "analytics",
                "lineage",
                "lineage_nodes"
            ],
            "unique_id": "model.analytics.lineage_nodes",
            "package_name": "analytics",
            "root_path": "/Users/andyliu/workspace/dbt/analytics",
            "path": "lineage/lineage_nodes.sql",
            "original_file_path": "models/lineage/lineage_nodes.sql",
            "name": "lineage_nodes",
            "alias": "lineage_nodes",
            "checksum": {
                "name": "sha256",
                "checksum": "74891e00bf33db647d72bd024381e4c6dd62377881403621c0a700fec50cbc31"
            },
            "tags": [],
            "refs": [
                [
                    "lineage_query_logs"
                ],
                [
                    "lineage_query_logs"
                ]
            ],
            "sources": [],
            "description": "Lineage nodes, selected from normalized query logs",
            "columns": {
                "account_id": {
                    "name": "account_id",
                    "description": "Account ID",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "resource_id": {
                    "name": "resource_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "node_id": {
                    "name": "node_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": [
                        "test_tag"
                    ]
                },
                "canonical_name": {
                    "name": "canonical_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {
                "montecarlo": {
                    "dimension_tracking": [
                        {
                            "table": "analytics:prod_lineage.lineage_nodes",
                            "timestamp_field": "created",
                            "field": "account_id",
                            "schedule": {
                                "type": "dynamic"
                            }
                        }
                    ]
                }
            },
            "docs": {
                "show": true
            },
            "patch_path": "analytics://models/lineage/schema.yml",
            "compiled_path": "target/compiled/analytics/models/lineage/lineage_nodes.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "lineage"
            },
            "created_at": 1631906056,
            "compiled_sql": "--\n-- Create nodes by selecting all sources and destinations from normalized\n-- query log events, generating a natural ID, and deduping.\n--\nwith nodes_from_sources as (\n  select\n     account_id,\n     resource_id,\n     source.value:global_id::varchar as global_id,\n     source.value:unqualified_name::varchar as unqualified_name,\n     source.value:table_type::varchar as table_type,\n     source.value:table_path[0]::varchar as project_id,\n     source.value:table_path[1]::varchar as dataset_id,\n     source.value:table_path[2]::varchar as table_id,\n     lineage_query_logs.value:resource:resource_type::varchar as resource_type,\n     timestamp::timestamp_ntz as timestamp\n  from\n     analytics.prod_lineage.lineage_query_logs,\n     lateral flatten(input => value:payload:sources) as source\n),\nnodes_from_destination as (\n  select\n      account_id,\n      resource_id,\n      value:payload:destination:global_id::varchar as global_id,\n      value:payload:destination:unqualified_name::varchar as unqualified_name,\n      value:payload:destination:table_type::varchar as table_type,\n      value:payload:destination:table_path[0]::varchar as project_id,\n      value:payload:destination:table_path[1]::varchar as dataset_id,\n      value:payload:destination:table_path[2]::varchar as table_id,\n      value:resource:resource_type::varchar as resource_type,\n      timestamp::timestamp_ntz as timestamp\n  from\n     analytics.prod_lineage.lineage_query_logs\n  where value:payload:destination is not null\n),\nnodes as (\n  select * from nodes_from_sources\n  union\n  select * from nodes_from_destination\n),\nnodes_with_ids as (\n  select\n      sha1(concat_ws('-',\n          coalesce(account_id::varchar, ''),\n          coalesce(resource_id::varchar, ''),\n          coalesce(global_id::varchar, unqualified_name::varchar, '')\n      )) as node_id,\n      row_number() over (\n        partition by node_id\n        order by timestamp desc\n      ) as row_num,\n      *\n  from nodes\n)\nselect\n    node_id,\n    account_id,\n    resource_id,\n    resource_type,\n    global_id,\n    unqualified_name,\n    project_id,\n    dataset_id,\n    table_id,\n    coalesce(global_id::varchar, unqualified_name::varchar) as display_name,\n    coalesce(global_id::varchar, unqualified_name::varchar) as canonical_name,\n    IFF(table_type is null and (\n        unqualified_name ilike any (\n            '%s3://%',\n            'gs://%',\n            '%.gz',\n            '%.csv',\n            '%/stages%',\n            '@%',\n            '%@stages%'\n        )\n        or unqualified_name rlike '.*/[^/]+\\.+.+' -- At least one \"/\" and an extension (a \".\" followed by at least one character)\n        or table_id ilike any (\n            '@%spark%',\n            '@%s3%',\n            '@%temp%',\n            '@%kafka%'\n        )\n    ), 'EXTERNAL', table_type) as table_type,\n    timestamp as last_seen,\n    false as blocked\nfrom nodes_with_ids\nwhere row_num = 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "analytics.prod_lineage.lineage_nodes"
        }
    }
}

