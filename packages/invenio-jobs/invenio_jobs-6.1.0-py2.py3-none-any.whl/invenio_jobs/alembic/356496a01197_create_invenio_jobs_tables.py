#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
# Copyright (C) 2024 Graz University of Technology.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create invenio-jobs tables."""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from invenio_db import db
from sqlalchemy.dialects import postgresql
from sqlalchemy_utils.types import ChoiceType

from invenio_jobs.models import RunStatusEnum

# revision identifiers, used by Alembic.
revision = "356496a01197"
down_revision = "371f4cbcb73d"
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "job",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("task", sa.String(length=255), nullable=True),
        sa.Column("default_queue", sa.String(length=64), nullable=True),
        sa.Column(
            "default_args",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column(
            "schedule",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_job")),
    )
    op.create_table(
        "run",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("job_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("started_by_id", sa.Integer(), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("finished_at", sa.DateTime(), nullable=True),
        sa.Column("task_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column(
            "status",
            ChoiceType(RunStatusEnum, impl=db.String(1)),
            nullable=False,
            default=RunStatusEnum.QUEUED.value,
        ),
        sa.Column("message", sa.Text(), nullable=True),
        sa.Column("title", sa.Text(), nullable=True),
        sa.Column(
            "args",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("queue", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(["job_id"], ["job.id"], name=op.f("fk_run_job_id_job")),
        sa.ForeignKeyConstraint(
            ["started_by_id"],
            ["accounts_user.id"],
            name=op.f("fk_run_started_by_id_accounts_user"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_run")),
    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("run")
    op.drop_table("job")
    # ### end Alembic commands ###
