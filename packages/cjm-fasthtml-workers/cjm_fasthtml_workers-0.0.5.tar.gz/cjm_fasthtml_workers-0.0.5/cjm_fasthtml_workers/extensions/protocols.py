"""Optional integration protocols for plugin registries, resource management, and event broadcasting."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/extensions/protocols.ipynb.

# %% auto 0
__all__ = ['PluginRegistryProtocol', 'ResourceManagerProtocol', 'EventBroadcasterProtocol']

# %% ../../nbs/extensions/protocols.ipynb 3
from typing import Dict, Any, Protocol, Optional, List

# %% ../../nbs/extensions/protocols.ipynb 6
class PluginRegistryProtocol(Protocol):
    """Protocol for plugin registry integration."""
    
    def get_plugins_by_category(
        self, 
        category:Any  # Plugin category (can be enum, string, etc.)
    ) -> list:  # List of plugin metadata objects
        """Get all plugins in a specific category."""
        ...
    
    def get_plugin(
        self, 
        plugin_id:str  # Unique plugin identifier
    ) -> Any:  # Plugin metadata object or None
        """Get a specific plugin by ID."""
        ...
    
    def load_plugin_config(
        self, 
        plugin_id:str  # Unique plugin identifier
    ) -> Dict[str, Any]:  # Plugin configuration dictionary
        """Load configuration for a plugin."""
        ...

# %% ../../nbs/extensions/protocols.ipynb 8
class ResourceManagerProtocol(Protocol):
    """Protocol for resource management integration."""
    
    def register_worker(
        self,
        pid:int,  # Worker process ID
        worker_type:str  # Type of worker (e.g., 'transcription', 'llm')
    ) -> None:
        """Register a new worker process."""
        ...
    
    def unregister_worker(
        self, 
        pid:int  # Process ID of the worker to unregister
    ) -> None:
        """Unregister a worker process."""
        ...
    
    def update_worker_state(
        self,
        pid:int,  # Worker process ID
        status:Optional[str]=None,  # Worker status: 'idle', 'running', etc.
        job_id:Optional[str]=None,  # Current job ID (None if idle)
        plugin_name:Optional[str]=None,  # Currently loaded plugin name
        plugin_id:Optional[str]=None,  # Currently loaded plugin ID
        loaded_plugin_resource:Optional[str]=None,  # Currently loaded plugin resource identifier
        config:Optional[Dict[str, Any]]=None,  # Current plugin configuration
    ) -> None:
        """Update worker state information."""
        ...

# %% ../../nbs/extensions/protocols.ipynb 10
class EventBroadcasterProtocol(Protocol):
    """Protocol for SSE event broadcasting."""
    
    async def broadcast(
        self,
        event_type:str,  # Event type identifier
        data:Dict[str, Any]  # Event data payload
    ) -> None:
        """Broadcast an event to all connected clients."""
        ...
