"""
Production settings for {{ project_name }}.

This file contains production-ready security and performance configurations:
- DEBUG disabled
- PostgreSQL database
- Security middleware and settings
- Static file serving with WhiteNoise
- Comprehensive logging

REQUIRED ENVIRONMENT VARIABLES:
- SECRET_KEY: Django secret key (generate with: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())')
- DATABASE_URL: PostgreSQL connection string (e.g., postgresql://user:password@localhost:5432/dbname)
- ALLOWED_HOSTS: Comma-separated list of allowed hostnames
- SENTRY_DSN: (optional) Sentry error tracking DSN
"""

from decouple import config

from .base import *  # noqa: F403

# SECURITY: DEBUG must be False in production
DEBUG = False

# SECURITY: Restrict allowed hosts
# Parse comma-separated ALLOWED_HOSTS from environment
_allowed_hosts = config(
    "ALLOWED_HOSTS",
    default="",
    cast=lambda v: [s.strip() for s in v.split(",") if s.strip()],
)

# Railway healthchecks come from healthcheck.railway.app - always allow this
# See: https://docs.railway.com/guides/healthchecks
# Use list(set(...)) to avoid duplicates if healthcheck.railway.app is already in env var
ALLOWED_HOSTS = list(set(_allowed_hosts + ["healthcheck.railway.app"]))

# SECURITY: Require HTTPS in production
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default=True, cast=bool)
# Exempt healthcheck endpoint from HTTPS redirect (Railway healthchecks use HTTP)
SECURE_REDIRECT_EXEMPT = [r"^healthcheck/$"]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# SECURITY: Cookie security
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True

# SECURITY: HSTS (HTTP Strict Transport Security)
SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS", default=31536000, cast=int)  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# SECURITY: Content Security Policy headers
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"

# Database - PostgreSQL for production
# Use DATABASE_URL environment variable for Railway deployment
import dj_database_url
import sys

# Validate DATABASE_URL is set in production
database_url = config("DATABASE_URL", default=None)

if database_url is None:
    # Only raise error for production commands that need database
    # Allow collectstatic and other non-DB commands to run
    if "collectstatic" not in sys.argv and "compilemessages" not in sys.argv:
        raise ValueError(
            "DATABASE_URL environment variable is not set. "
            "Railway requires DATABASE_URL to connect to PostgreSQL. "
            "Ensure the database service is linked to your app service in Railway dashboard."
        )
    # Provide a dummy URL for collectstatic to work
    database_url = "postgresql://dummy:dummy@localhost:5432/dummy"

DATABASES = {
    "default": dj_database_url.config(
        default=database_url,
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Email configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST", default="localhost")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="noreply@{{ project_name }}.com")
SERVER_EMAIL = config("SERVER_EMAIL", default="server@{{ project_name }}.com")

# Static files - WhiteNoise for efficient serving
# STATIC_ROOT and STORAGES are inherited from base.py
STATIC_ROOT = BASE_DIR / "staticfiles"  # noqa: F405

# Media files - consider using cloud storage (S3, GCS) in production
# MEDIA_URL = config("MEDIA_URL", default="/media/")
# MEDIA_ROOT = BASE_DIR / "media"  # noqa: F405

# Cache configuration - Redis recommended for production
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": config("REDIS_URL", default="redis://localhost:6379/1"),
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#     }
# }

# Session backend - Redis for better performance (optional)
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"

# Sentry error tracking (optional but recommended)
# Uncomment and configure if using Sentry
# import sentry_sdk
# from sentry_sdk.integrations.django import DjangoIntegration
#
# SENTRY_DSN = config("SENTRY_DSN", default="")
# if SENTRY_DSN:
#     sentry_sdk.init(
#         dsn=SENTRY_DSN,
#         integrations=[DjangoIntegration()],
#         traces_sample_rate=config("SENTRY_TRACES_SAMPLE_RATE", default=0.1, cast=float),
#         send_default_pii=False,
#         environment=config("ENVIRONMENT", default="production"),
#     )

# Logging - production configuration (console only for Railway/cloud deployments)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "{{ project_name }}": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# ADMINS - receive error emails
ADMINS = [
    ("Admin", config("ADMIN_EMAIL", default="admin@{{ project_name }}.com")),
]
MANAGERS = ADMINS
