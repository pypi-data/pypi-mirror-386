# {{ project_name }}

A Django project generated with QuickScale - a production-ready starter with best practices built-in.

## üöÄ Quick Start

### Prerequisites

- Python 3.10+ installed
- Poetry installed (`pip install poetry`)
- Docker and Docker Compose (optional, for containerized development)

### Setup (Local Development)

```bash
# 1. Install dependencies
poetry install

# 2. Copy environment variables
cp .env.example .env
# Edit .env and set your SECRET_KEY and other configuration

# 3. Run migrations
poetry run python manage.py migrate

# 4. Create a superuser (optional)
poetry run python manage.py createsuperuser

# 5. Run the development server
poetry run python manage.py runserver
```

Visit http://127.0.0.1:8000 to see your application.

### Setup (Docker)

```bash
# 1. Copy environment variables
cp .env.example .env
# Edit .env and set your SECRET_KEY and other configuration

# 2. Build and start containers
docker-compose up --build

# 3. Run migrations (in another terminal)
docker-compose exec web python manage.py migrate

# 4. Create a superuser (optional)
docker-compose exec web python manage.py createsuperuser
```

Visit http://127.0.0.1:8000 to see your application.

## üìã What's Included

This project comes pre-configured with:

- ‚úÖ **Django 5.0+** - Latest stable Django version
- ‚úÖ **PostgreSQL** - Production database (SQLite for local dev by default)
- ‚úÖ **Docker** - Containerized development and production deployment
- ‚úÖ **Environment-based settings** - Separate configs for local/production
- ‚úÖ **Security best practices** - SECRET_KEY management, ALLOWED_HOSTS, security middleware
- ‚úÖ **Testing infrastructure** - pytest, pytest-django, factory_boy, pytest-cov
- ‚úÖ **Code quality tools** - pre-commit hooks with ruff (format + lint)
- ‚úÖ **CI/CD pipeline** - GitHub Actions workflow for automated testing
- ‚úÖ **Static files** - WhiteNoise for serving static files in production
- ‚úÖ **Production server** - Gunicorn WSGI server configured

## üõ†Ô∏è Development

### Running Tests

```bash
# Run all tests
poetry run pytest

# Run with coverage
poetry run pytest --cov={{ project_name }} --cov-report=html

# Run specific test file
poetry run pytest tests/test_example.py

# Run tests in verbose mode
poetry run pytest -v
```

View coverage report: `open htmlcov/index.html`

### Code Quality

```bash
# Format code with ruff
poetry run ruff format .

# Check code style
poetry run ruff check .

# Auto-fix issues
poetry run ruff check --fix .

# Run pre-commit hooks manually
poetry run pre-commit run --all-files
```

### Database Management

```bash
# Create migrations
poetry run python manage.py makemigrations

# Apply migrations
poetry run python manage.py migrate

# Open Django shell
poetry run python manage.py shell

# Access database shell
poetry run python manage.py dbshell
```

### Creating Django Apps

```bash
# Create a new Django app
poetry run python manage.py startapp myapp

# Add app to INSTALLED_APPS in settings/base.py
# Run migrations if you add models
```

## üö¢ Deployment

### Environment Variables

Copy `.env.example` to `.env` and configure:

```bash
# Required for production
SECRET_KEY=your-secret-key-here
DEBUG=False
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com

# Server Configuration
PORT=8000  # Change this if port 8000 is already in use

# Database (if using PostgreSQL)
DATABASE_URL=postgresql://user:password@localhost:5432/dbname

# Optional: Sentry error tracking
# SENTRY_DSN=your-sentry-dsn-here
```

### Production Checklist

Before deploying to production:

- [ ] Set `DEBUG=False` in production environment
- [ ] Configure `ALLOWED_HOSTS` with your domain(s)
- [ ] Set a strong `SECRET_KEY` (use `python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'`)
- [ ] Use PostgreSQL database (not SQLite)
- [ ] Configure static files serving (WhiteNoise is included)
- [ ] Set up HTTPS/SSL certificates
- [ ] Review security settings in `settings/production.py`
- [ ] Configure email backend for production
- [ ] Set up error monitoring (e.g., Sentry)
- [ ] Run migrations: `python manage.py migrate`
- [ ] Collect static files: `python manage.py collectstatic`

### Docker Deployment

The included `Dockerfile` and `docker-compose.yml` are ready for production use:

```bash
# Build production image
docker build -t {{ project_name }}:latest .

# Run with docker-compose
docker-compose -f docker-compose.yml up -d
```

## üìö Project Structure

```
{{ project_name }}/
‚îú‚îÄ‚îÄ {{ project_name }}/           # Main Django project
‚îÇ   ‚îú‚îÄ‚îÄ settings/                 # Split settings (base, local, production)
‚îÇ   ‚îú‚îÄ‚îÄ urls.py                   # Root URL configuration
‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py                   # WSGI application
‚îÇ   ‚îî‚îÄ‚îÄ asgi.py                   # ASGI application
‚îú‚îÄ‚îÄ templates/                    # HTML templates
‚îú‚îÄ‚îÄ static/                       # Static files (CSS, JS, images)
‚îú‚îÄ‚îÄ tests/                        # Project-level tests
‚îú‚îÄ‚îÄ manage.py                     # Django management script
‚îú‚îÄ‚îÄ pyproject.toml                # Poetry dependencies
‚îú‚îÄ‚îÄ Dockerfile                    # Docker configuration
‚îú‚îÄ‚îÄ docker-compose.yml            # Docker Compose configuration
‚îú‚îÄ‚îÄ .env.example                  # Environment variables template
‚îú‚îÄ‚îÄ .pre-commit-config.yaml       # Pre-commit hooks configuration
‚îî‚îÄ‚îÄ README.md                     # This file
```

## üîß Configuration

### Settings

This project uses split settings for different environments:

- `settings/base.py` - Common settings shared across all environments
- `settings/local.py` - Local development settings (DEBUG=True, SQLite)
- `settings/production.py` - Production settings (DEBUG=False, PostgreSQL, security)

The active settings module is controlled by the `DJANGO_SETTINGS_MODULE` environment variable:

```bash
# Local development (default in manage.py)
export DJANGO_SETTINGS_MODULE={{ project_name }}.settings.local

# Production
export DJANGO_SETTINGS_MODULE={{ project_name }}.settings.production
```

### Adding Dependencies

```bash
# Add a new package
poetry add package-name

# Add a development-only package
poetry add --group dev package-name

# Update dependencies
poetry update
```

## üêõ Troubleshooting

### Common Issues

**Issue: `ImportError` when running manage.py**
```bash
# Make sure you're using Poetry to run commands
poetry run python manage.py <command>

# Or activate the Poetry virtualenv first
poetry shell
python manage.py <command>
```

**Issue: Database connection errors**
```bash
# Check your DATABASE_URL in .env
# For local development, SQLite is used by default (no setup needed)
# For production, ensure PostgreSQL is running and configured
```

**Issue: Static files not loading**
```bash
# Collect static files
poetry run python manage.py collectstatic --noinput

# In development, Django serves static files automatically
# In production, WhiteNoise handles static files
```

**Issue: Port already in use**
```bash
# Solution 1: Change the PORT in your .env file (recommended)
# Edit .env and set: PORT=8001
# Then restart your server or Docker containers

# Solution 2: Run Django on a different port directly
poetry run python manage.py runserver 8001

# Solution 3: Find and kill the process using port 8000
lsof -ti:8000 | xargs kill -9
```

## üìñ Learn More

- [Django Documentation](https://docs.djangoproject.com/)
- [Poetry Documentation](https://python-poetry.org/docs/)
- [pytest Documentation](https://docs.pytest.org/)
- [Docker Documentation](https://docs.docker.com/)
- [QuickScale Documentation](https://github.com/Experto-AI/quickscale)

## ü§ù Contributing

This project was generated with QuickScale, but it's now yours to own and modify. Feel free to:

- Add new Django apps and features
- Modify the project structure to fit your needs
- Customize templates, settings, and configurations
- Remove components you don't need

For QuickScale-specific contributions, see [QuickScale Contributing Guide](https://github.com/Experto-AI/quickscale/blob/main/docs/contrib/contributing.md).

## üìÑ License

This project is yours - use it as you see fit. QuickScale is MIT licensed.
