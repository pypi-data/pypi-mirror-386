# Copyright 2025 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
name = "rs-client-libraries"
dynamic = ["version"] # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "rs-client-libraries"
version = "1.0a3"
description = "Copernicus Sentinel rs-client library and processing workflows."
license = "Apache-2.0"
authors = ["ESA under contract with Airbus and CS <ops_coprs@airbus.com>"]
readme = "README.adoc"
homepage = "https://home.rs-python.eu/"
repository = "https://github.com/RS-PYTHON/rs-client-libraries"
documentation = "https://home.rs-python.eu/rs-documentation/rs-client-libraries/docs/doc/"
keywords = ["stac", "copernicus", "sentinel", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

packages = [
    { include = "rs_client" },
    { include = "rs_common" },
    { include = "rs_workflows" },
]

# Add configuration files to the .whl package
include = [
    { path = "config", format = ["wheel"] }
]

[tool.poetry.dependencies]
python = "^3.11"
opentelemetry-distro = "^0.59b0" # then run 'poetry run opentelemetry-bootstrap -a install'
opentelemetry-instrumentation-aws-lambda = "^0.59b0"
opentelemetry-test-utils = "^0.59b0"
opentelemetry-exporter-otlp = "^1.38.0"
protobuf = ">=5.29.5"
python-logging-loki = "^0.3.1" # to avoid otl error: No module named 'logging_loki'
cachetools = ">=5.5.2"
pystac = "^1.13.0"
pystac-client = "^0.9.0"
python-dateutil = "^2.9.0.post0"
stac-pydantic = "^3.4.0"
openapi-core = "^0.19.5"
click = "8.1.8"
prefect = { version = "3.2.13", extras = ["aws"] }
requests = "^2.32.4"
urllib3 = ">=2.5.0"
SQLAlchemy = "^2.0.37"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-docker = "^3.2.3"
pytest-error-for-skips = "^2.0.2"
pytest-mock = "^3.15.1"
black = "==25.1.0"
mypy = "^1.16.0"
pre-commit = "^4.1.0"
bandit = "^1.8.3"
safety = "^3.5.2"
pylint = "^3.3.4"
sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.2"
flake8 = "^7.1.1"
flake8-pyproject = "^1.2.3"
responses = "^0.25.7"
starlette = "^0.48.0"

[tool.poetry.group.demo.dependencies] # for hybrid mode
jupyterlab = "^4.2.1"
boto3 = "^1.38.34"
papermill = "^2.6.0"
tornado = "^6.5" # fix trivy vulnerability

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = false
metadata = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true
disable_error_code = ["call-overload"]

[tool.flake8]
max-line-length = 120
# per-file-ignores = [
#     '__init__.py:F401',
# ]

[tool.pylint.messages_control]
max-line-length=120
disable = [
    "logging-fstring-interpolation",
    "global-statement",
    "too-many-arguments",
    "too-many-positional-arguments",
    "not-context-manager",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
]

[tool.pylint.MASTER]
ignore-paths = '^docs/.*$'

[tool.pylint.MISCELLANEOUS]
notes = ["XXX"] # no errors on TODO and FIXME

[tool.pylint.SIMILARITIES]
# Minimum lines number of a similarity FIXME.
min-similarity-lines=10

[tool.bandit.assert_used]
skips = ['*/test_*.py']
