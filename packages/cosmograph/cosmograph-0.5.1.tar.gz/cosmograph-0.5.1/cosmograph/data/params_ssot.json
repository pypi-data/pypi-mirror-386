[
    {
        "name":"disable_simulation",
        "default":false,
        "annotation":"bool",
        "description":"Prevents the simulation from running, merely rendering the graph."
    },
    {
        "name":"polygonal_selector_stroke_color",
        "default":null,
        "annotation":"str",
        "description":"Stroke color for the lasso selection"
    },
    {
        "name":"polygonal_selector_line_width",
        "default":1,
        "annotation":"float",
        "description":"Line width for the lasso selection"
    },
    {
        "name":"select_point_on_click",
        "default": null,
        "annotation":"typing.Union[bool, str]",
        "description":"Controls whether to select a clicked point with the connected points. When `true`: Selects the clicked point and all connected points to it. When `'single'`: Selects only the clicked point. Will also focus (render ring around) the clicked point if `focusPointOnClick` is `undefined`."
    },
    {
        "name":"select_point_on_label_click",
        "default": null,
        "annotation":"typing.Union[bool, str]",
        "description":"Controls whether to select a point with the connected points when the point's label is clicked. When `true`: Selects the clicked point and all connected points to it. When `'single'`: Selects only the clicked point. Will also focus (render ring around) the clicked point if `focusPointOnClick` is `undefined`."
    },
    {
        "name":"reset_selection_on_empty_canvas_click",
        "default": null,
        "annotation":"bool",
        "description":"Reset selection on empty canvas click. When `true`: Resets the selection when the canvas is clicked and no points are selected. Default value: `true`."
    },
    {
        "name":"focus_point_on_click",
        "default": null,
        "annotation":"bool",
        "description":"Controls whether to focus on a point when the point itself is clicked."
    },
    {
        "name":"focus_point_on_label_click",
        "default": null,
        "annotation":"bool",
        "description":"Controls whether to focus on a point when the point's label is clicked."
    },
    {
        "name":"components_display_state_mode",
        "default": null,
        "annotation":"typing.Union[str, bool]",
        "description":"Controls display state messages behavior for all Cosmograph components. When `undefined`: Show all state messages (loading, no data). When `'loading'`: Show only loading state message, hide no data message. When `false`: Disable all state messages. This will be applied to all components unless explicitly overridden in component-specific configuration. @default `undefined`"
    },
    {
        "name":"status_indicator_mode",
        "default": null,
        "annotation":"typing.Union[str, bool]",
        "description":"Chooses which kind of status indicator to show during loading or errors. - `'spinner'` (default): show a spinner during loading, falling back to text on errors. - `'text'`: always show descriptive messages. - `false`: hide the status indicator entirely. @default 'spinner'"
    },
    {
        "name":"preserve_point_positions_on_data_update",
        "default": null,
        "annotation":"bool",
        "description":"Preserve positions for points with same ids (`pointIdBy`) during point data update. When `true`: - Points with same ids will stay where they were instead of generating new positions - New points get new positions (or positions from `pointXBy`/`pointYBy` if set) - Preserved positions take priority over new coordinates from `pointXBy`/`pointYBy` for existing points @default false"
    },
    {
        "name":"simulation_decay",
        "default":1000,
        "annotation":"float",
        "description":"Defines how quickly the simulation cools down."
    },
    {
        "name":"simulation_gravity",
        "default":0,
        "annotation":"float",
        "description":"Coefficient for gravity force."
    },
    {
        "name":"simulation_center",
        "default":0,
        "annotation":"float",
        "description":"Centers the mass force coefficient."
    },
    {
        "name":"simulation_repulsion",
        "default":0.1,
        "annotation":"float",
        "description":"Configures point repulsion between points."
    },
    {
        "name":"simulation_repulsion_theta",
        "default":1.7,
        "annotation":"float",
        "description":"Decreases \/ increases the detalization of the Many-Body force calculations."
    },
    {
        "name":"simulation_repulsion_quadtree_levels",
        "default":12,
        "annotation":"float",
        "description":"Barnes\u2013Hut approximation depth, usable when useQuadtree is set to True."
    },
    {
        "name":"simulation_link_spring",
        "default":1,
        "annotation":"float",
        "description":"Spring constant for links."
    },
    {
        "name":"simulation_link_distance",
        "default":2,
        "annotation":"float",
        "description":"Default distance for links."
    },
    {
        "name":"simulation_link_dist_random_variation_range",
        "default":[
            1,
            1.2
        ],
        "annotation":"list[typing.Any]",
        "description":"Random link distance range."
    },
    {
        "name":"simulation_repulsion_from_mouse",
        "default":2,
        "annotation":"float",
        "description":"Mouse position repulsion coefficient, activated by right-click."
    },
    {
        "name":"simulation_friction",
        "default":0.85,
        "annotation":"float",
        "description":"Sets simulation friction."
    },
    {
        "name":"simulation_cluster",
        "default":null,
        "annotation":"float",
        "description":"Cluster coefficient. Default value: `0.1`."
    },
    {
        "name":"background_color",
        "default":"#222222",
        "annotation":"typing.Union[str, list[float]]",
        "description":"Canvas background color."
    },
    {
        "name":"space_size",
        "default":4096,
        "annotation":"int",
        "description":"Size of the simulation space."
    },
    {
        "name":"point_color",
        "default":"#b3b3b3",
        "annotation":"typing.Union[str, list[float]]",
        "description":"Column name for point colors."
    },
    {
        "name":"point_greyout_opacity",
        "default":0.1,
        "annotation":"float",
        "description":"Opacity of unselected nodes during selection."
    },
    {
        "name":"point_size",
        "default":4,
        "annotation":"float",
        "description":"Column name for point sizes."
    },
    {
        "name":"point_size_scale",
        "default":1,
        "annotation":"float",
        "description":"Scale factor for point sizes."
    },
    {
        "name":"hovered_point_cursor",
        "default":null,
        "annotation":"str",
        "description":"Cursor type when hovering over a point."
    },
    {
        "name":"render_hovered_point_ring",
        "default":false,
        "annotation":"bool",
        "description":"Enables ring around hovered points."
    },
    {
        "name":"hovered_point_ring_color",
        "default":"white",
        "annotation":"typing.Union[str, list[float]]",
        "description":"Color of hovered point ring."
    },
    {
        "name":"focused_point_ring_color",
        "default":null,
        "annotation":"typing.Union[str, list[float]]",
        "description":"Color of the focused point ring."
    },
    {
        "name":"focused_point_index",
        "default":null,
        "annotation":"int",
        "description":"Index of the focused point, prioritized over focus_point method."
    },
    {
        "name":"render_links",
        "default":true,
        "annotation":"bool",
        "description":"Enables or disables link rendering."
    },
    {
        "name":"link_color",
        "default":"#666666",
        "annotation":"typing.Union[str, list[float]]",
        "description":"Column name for link colors."
    },
    {
        "name":"link_greyout_opacity",
        "default":0.1,
        "annotation":"float",
        "description":"Opacity of unselected links during selection."
    },
    {
        "name":"link_width",
        "default":1,
        "annotation":"float",
        "description":"Column name for link widths."
    },
    {
        "name":"link_width_scale",
        "default":1,
        "annotation":"float",
        "description":"Scale factor for link widths."
    },
    {
        "name":"curved_links",
        "default":false,
        "annotation":"bool",
        "description":"Enables or disables curved links."
    },
    {
        "name":"curved_link_segments",
        "default":19,
        "annotation":"int",
        "description":"Segments defining curved links."
    },
    {
        "name":"curved_link_weight",
        "default":0.8,
        "annotation":"float",
        "description":"Weight factor for link curvature."
    },
    {
        "name":"curved_link_control_point_distance",
        "default":0.5,
        "annotation":"float",
        "description":"Control point positioning for curves."
    },
    {
        "name":"link_arrows",
        "default":null,
        "annotation":"bool",
        "description":""
    },
    {
        "name":"link_arrows_size_scale",
        "default":1,
        "annotation":"float",
        "description":"Scale factor for link arrow size."
    },
    {
        "name":"link_visibility_distance_range",
        "default":[
            50,
            150
        ],
        "annotation":"list[float]",
        "description":"Pixel distance range for link transparency."
    },
    {
        "name":"link_visibility_min_transparency",
        "default":0.25,
        "annotation":"float",
        "description":"Minimum transparency of links based on link_visibility_distance_range."
    },
    {
        "name":"use_quadtree",
        "default":false,
        "annotation":"bool",
        "description":"Activates quadtree algorithm for Many-Body force when set to True."
    },
    {
        "name":"show_fps_monitor",
        "default":false,
        "annotation":"bool",
        "description":"Display an FPS counter in the upper right corner of the canvas."
    },
    {
        "name":"pixel_ratio",
        "default":2,
        "annotation":"float",
        "description":"Canvas pixel ratio."
    },
    {
        "name":"scale_points_on_zoom",
        "default":true,
        "annotation":"bool",
        "description":"Scales point sizes when zooming."
    },
    {
        "name":"scale_links_on_zoom",
        "default":true,
        "annotation":"bool",
        "description":"Increase or decrease the size of the links when zooming in or out."
    },
    {
        "name":"initial_zoom_level",
        "default":3,
        "annotation":"float",
        "description":"Starting zoom level."
    },
    {
        "name":"disable_zoom",
        "default":false,
        "annotation":"bool",
        "description":"Enables or disables zooming."
    },
    {
        "name":"enable_drag",
        "default":null,
        "annotation":"bool",
        "description":"Allows graph dragging."
    },
    {
        "name":"fit_view_on_init",
        "default":true,
        "annotation":"bool",
        "description":"Automatically fits view to all points upon initialization."
    },
    {
        "name":"fit_view_delay",
        "default":250,
        "annotation":"float",
        "description":"Delay for fitting view after initialization in milliseconds."
    },
    {
        "name":"fit_view_padding",
        "default":null,
        "annotation":"float",
        "description":"Padding around fit view area."
    },
    {
        "name":"fit_view_duration",
        "default":null,
        "annotation":"float",
        "description":"Animation duration for view fitting in milliseconds."
    },
    {
        "name":"fit_view_by_points_in_rect",
        "default":null,
        "annotation":"list[list[float]]",
        "description":"Fits view to specified rectangle of points, active when fit_view_on_init is True."
    },
    {
        "name":"random_seed",
        "default":null,
        "annotation":"typing.Union[int, str]",
        "description":"Seed value for generating random numbers in simulations."
    },
    {
        "name":"point_sampling_distance",
        "default":150,
        "annotation":"int",
        "description":"Distance threshold for sampling points."
    },
    {
        "name":"point_id_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_index_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_color_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_color_palette",
        "default":null,
        "annotation":"list[str]",
        "description":"An optional array of color strings that can be used to color the points in the visualization. If provided, the points will be colored using the colors in this palette, cycling through the array as needed. Used when point_color_strategy is set to `'palette'`, `'interpolatePalette'`, `'degree'`, or `'linkDirection'`."
    },
    {
        "name":"point_color_by_map",
        "default":null,
        "annotation":"typing.Dict[str, typing.Union[str, list[float]]]",
        "description":"An optional mapping of values to colors for the points in the visualization. The keys in the map should be string and the values can be either color strings or arrays of RGBA values. Used when point_color_strategy is set to `'map'`."
    },
    {
        "name":"point_color_strategy",
        "default":null,
        "annotation":"str",
        "description":"Specifies the strategy for coloring points based on data from the point_color_by column. Available strategies: `undefined` (default): Automatically uses the optimal strategy based on input configuration and color data type. Current strategy can be acquired with cosmograph.activePointColorStrategy. `'palette'`: Uses colors from point_color_palette without interpolation. For numeric data: Creates equal-width buckets mapped to point_color_palette colors. For categorical data: Assigns colors from point_color_palette in order, cycling when unique values exceed palette length. `'interpolatePalette'`: Interpolates colors from point_color_palette. For numeric data: Creates continuous color scale between point_color_palette colors. For categorical data: Creates evenly-spaced color scale by interpolating between point_color_palette colors to match the number of unique values so every value is a unique color. `'map'`: Uses color mapping from point_color_by_map to values in point_color_by. Applies exact color from point_color_by_map for matching values. Falls back to point_color when value is not found in map or invalid. `'degree'`: Colors points based on their degree (number of connections) using interpolated point_color_palette with quantile-based boundaries. Maps point degrees to continuous color scale between point_color_palette colors. Has effect only if links provided. `'linkDirection'`: Colors points based on their link direction (in, out, bidirectional, isolated) using point_color_palette. Has effect only if links provided. `'direct'`: Directly uses point_color_by column values as colors. Applies the color if it's a valid color string (hex, rgb, named color, etc) or an array of [r, g, b, a]. If point_color_by_fn exists, applies it to transform point_color_by values into custom colors. Falls back to point_color if invalid color. If neither point_color_by nor point_color_by_fn exist, colors all points with point_color."
    },
    {
        "name":"point_size_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_size_range",
        "default":null,
        "annotation":"list[float]",
        "description":""
    },
    {
        "name":"point_size_strategy",
        "default":null,
        "annotation":"str",
        "description":"Specifies the strategy for sizing points based on data from the point_size_by column."
    },
    {
        "name":"point_label_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_label_weight_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_x_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_y_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_cluster_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"point_cluster_strength_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"cluster_positions_map",
        "default":null,
        "annotation":"typing.Dict[str, list[float]]",
        "description":"Mapping of cluster keys to [x, y] coordinate positions. Keys should match values from the pointClusterBy column. Missing cluster keys will be automatically positioned using the centermass. Won't take effect if point positions are provided by pointXBy or pointYBy. @example Object mapping cluster keys to coordinates: clusterPositionsMap: { 'Rock': [10, 20], 'Rap': [30, 40] }"
    },
    {
        "name":"point_include_columns",
        "default":null,
        "annotation":"list[str]",
        "description":"An array of additional column names to include in point data."
    },
    {
        "name":"point_timeline_by",
        "default":null,
        "annotation":"str",
        "description":"Column to determine values for the point timeline. Shows a point timeline if set."
    },
    {
        "name":"link_source_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_source_index_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_target_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_target_index_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_color_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_width_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_arrow_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_strength_by",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"link_strength_range",
        "default":null,
        "annotation":"list[float]",
        "description":""
    },
    {
        "name":"link_include_columns",
        "default":null,
        "annotation":"list[str]",
        "description":"An array of additional column names to include in link data."
    },
    {
        "name":"link_timeline_by",
        "default":null,
        "annotation":"str",
        "description":"Column to determine values for the link timeline. Shows a timeline for links if set."
    },
    {
        "name":"show_labels",
        "default":null,
        "annotation":"bool",
        "description":""
    },
    {
        "name":"show_dynamic_labels",
        "default":null,
        "annotation":"bool",
        "description":"Flag to show dynamic labels for visible points."
    },
    {
        "name":"show_labels_for",
        "default":null,
        "annotation":"list[str]",
        "description":"An array of point ids for which to show labels."
    },
    {
        "name":"show_top_labels",
        "default":null,
        "annotation":"bool",
        "description":"Flag to display labels for the top points."
    },
    {
        "name":"show_top_labels_limit",
        "default":null,
        "annotation":"int",
        "description":"Maximum number of top points to show labels for."
    },
    {
        "name":"show_cluster_labels",
        "default":false,
        "annotation":"bool",
        "description":"Show labels for the clusters based on the `pointClusterBy` column. When any point is selected, cluster labels will be hidden until the selection is cleared."
    },
    {
        "name":"point_label_color",
        "default":null,
        "annotation":"str",
        "description":"Specifies the CSS color to use for the point labels."
    },
    {
        "name":"point_label_font_size",
        "default":13,
        "annotation":"float",
        "description":"Specifies the font size to use for the point labels."
    },
    {
        "name":"cluster_label_font_size",
        "default":16,
        "annotation":"float",
        "description":"Specifies the font size to use for the cluster labels."
    },
    {
        "name":"scale_cluster_labels",
        "default":true,
        "annotation":"bool",
        "description":"Whether to scale the cluster labels based on the number of points in the cluster."
    },
    {
        "name":"static_label_weight",
        "default":0.8,
        "annotation":"float",
        "description":"Specifies the weight of the static labels."
    },
    {
        "name":"dynamic_label_weight",
        "default":0.7,
        "annotation":"float",
        "description":"Specifies the weight of the dynamic labels."
    },
    {
        "name":"label_margin",
        "default":5,
        "annotation":"float",
        "description":"Specifies the margin between the label and the point."
    },
    {
        "name":"label_padding",
        "default":[6.5, 4.5, 6.5, 4.5],
        "annotation":"list[float]",
        "description":"Specifies the [left, top, right, bottom] padding of the label element."
    },
    {
        "name":"use_point_color_strategy_for_cluster_labels",
        "default":null,
        "annotation":"bool",
        "description":"If `true`, cluster labels will acquire colors from the current point coloring strategy (`pointColorStrategy`). This can be useful when `pointClusterBy` and `pointColorBy` refer to the same data. Default: `false`"
    },
    {
        "name":"select_cluster_on_label_click",
        "default":null,
        "annotation":"bool",
        "description":"Controls whether to select points of a cluster when its label is clicked."
    },
    {
        "name":"show_hovered_point_label",
        "default":true,
        "annotation":"bool",
        "description":"Whether to show a hovered point label."
    },
    {
        "name":"disable_point_size_legend",
        "default":null,
        "annotation":"bool",
        "description":""
    },
    {
        "name":"disable_link_width_legend",
        "default":null,
        "annotation":"bool",
        "description":""
    },
    {
        "name":"disable_point_color_legend",
        "default":null,
        "annotation":"bool",
        "description":""
    },
    {
        "name":"disable_link_color_legend",
        "default":null,
        "annotation":"bool",
        "description":""
    },
    {
        "name":"points",
        "default":null,
        "annotation":"object",
        "description":"Data in a pandas DataFrame format."
    },
    {
        "name":"links",
        "default":null,
        "annotation":"object",
        "description":"Data in a pandas DataFrame format."
    },
    {
        "name":"clicked_point_index",
        "default":null,
        "annotation":"int",
        "description":""
    },
    {
        "name":"clicked_point_id",
        "default":null,
        "annotation":"str",
        "description":""
    },
    {
        "name":"selected_point_indices",
        "default":null,
        "annotation":"list[int]",
        "description":""
    },
    {
        "name":"selected_point_ids",
        "default":null,
        "annotation":"list[str]",
        "description":""
    },
    {
        "name":"api_key",
        "default":null,
        "annotation":"str",
        "description":"API key for authenticating with Cosmograph services. Can be set globally using set_api_key() function."
    }
]