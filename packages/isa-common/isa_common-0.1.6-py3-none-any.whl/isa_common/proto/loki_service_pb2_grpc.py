# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import loki_service_pb2 as loki__service__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in loki_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LokiServiceStub(object):
    """========================================
    Loki 日志聚合服务
    ========================================
    这是一个统一的日志聚合服务，为所有后端服务提供日志管理能力
    支持：
    - 用户和组织级别的日志隔离
    - 批量日志推送
    - LogQL 查询
    - 标签管理和过滤
    - 日志流式推送
    - 多租户支持

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PushLog = channel.unary_unary(
                '/isa.loki.LokiService/PushLog',
                request_serializer=loki__service__pb2.PushLogRequest.SerializeToString,
                response_deserializer=loki__service__pb2.PushLogResponse.FromString,
                _registered_method=True)
        self.PushLogBatch = channel.unary_unary(
                '/isa.loki.LokiService/PushLogBatch',
                request_serializer=loki__service__pb2.PushLogBatchRequest.SerializeToString,
                response_deserializer=loki__service__pb2.PushLogBatchResponse.FromString,
                _registered_method=True)
        self.PushLogStream = channel.stream_unary(
                '/isa.loki.LokiService/PushLogStream',
                request_serializer=loki__service__pb2.PushLogRequest.SerializeToString,
                response_deserializer=loki__service__pb2.PushLogBatchResponse.FromString,
                _registered_method=True)
        self.PushSimpleLog = channel.unary_unary(
                '/isa.loki.LokiService/PushSimpleLog',
                request_serializer=loki__service__pb2.PushSimpleLogRequest.SerializeToString,
                response_deserializer=loki__service__pb2.PushLogResponse.FromString,
                _registered_method=True)
        self.QueryLogs = channel.unary_unary(
                '/isa.loki.LokiService/QueryLogs',
                request_serializer=loki__service__pb2.QueryLogsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.QueryLogsResponse.FromString,
                _registered_method=True)
        self.QueryRange = channel.unary_unary(
                '/isa.loki.LokiService/QueryRange',
                request_serializer=loki__service__pb2.QueryRangeRequest.SerializeToString,
                response_deserializer=loki__service__pb2.QueryRangeResponse.FromString,
                _registered_method=True)
        self.TailLogs = channel.unary_stream(
                '/isa.loki.LokiService/TailLogs',
                request_serializer=loki__service__pb2.TailLogsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.LogEntry.FromString,
                _registered_method=True)
        self.QueryStats = channel.unary_unary(
                '/isa.loki.LokiService/QueryStats',
                request_serializer=loki__service__pb2.QueryStatsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.QueryStatsResponse.FromString,
                _registered_method=True)
        self.GetLabels = channel.unary_unary(
                '/isa.loki.LokiService/GetLabels',
                request_serializer=loki__service__pb2.GetLabelsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.GetLabelsResponse.FromString,
                _registered_method=True)
        self.GetLabelValues = channel.unary_unary(
                '/isa.loki.LokiService/GetLabelValues',
                request_serializer=loki__service__pb2.GetLabelValuesRequest.SerializeToString,
                response_deserializer=loki__service__pb2.GetLabelValuesResponse.FromString,
                _registered_method=True)
        self.ValidateLabels = channel.unary_unary(
                '/isa.loki.LokiService/ValidateLabels',
                request_serializer=loki__service__pb2.ValidateLabelsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.ValidateLabelsResponse.FromString,
                _registered_method=True)
        self.ListStreams = channel.unary_unary(
                '/isa.loki.LokiService/ListStreams',
                request_serializer=loki__service__pb2.ListStreamsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.ListStreamsResponse.FromString,
                _registered_method=True)
        self.GetStreamInfo = channel.unary_unary(
                '/isa.loki.LokiService/GetStreamInfo',
                request_serializer=loki__service__pb2.GetStreamInfoRequest.SerializeToString,
                response_deserializer=loki__service__pb2.GetStreamInfoResponse.FromString,
                _registered_method=True)
        self.DeleteStream = channel.unary_unary(
                '/isa.loki.LokiService/DeleteStream',
                request_serializer=loki__service__pb2.DeleteStreamRequest.SerializeToString,
                response_deserializer=loki__service__pb2.DeleteStreamResponse.FromString,
                _registered_method=True)
        self.ExportLogs = channel.unary_stream(
                '/isa.loki.LokiService/ExportLogs',
                request_serializer=loki__service__pb2.ExportLogsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.ExportLogsResponse.FromString,
                _registered_method=True)
        self.GetExportStatus = channel.unary_unary(
                '/isa.loki.LokiService/GetExportStatus',
                request_serializer=loki__service__pb2.GetExportStatusRequest.SerializeToString,
                response_deserializer=loki__service__pb2.GetExportStatusResponse.FromString,
                _registered_method=True)
        self.GetStatistics = channel.unary_unary(
                '/isa.loki.LokiService/GetStatistics',
                request_serializer=loki__service__pb2.GetStatisticsRequest.SerializeToString,
                response_deserializer=loki__service__pb2.GetStatisticsResponse.FromString,
                _registered_method=True)
        self.GetUserQuota = channel.unary_unary(
                '/isa.loki.LokiService/GetUserQuota',
                request_serializer=loki__service__pb2.GetUserQuotaRequest.SerializeToString,
                response_deserializer=loki__service__pb2.GetUserQuotaResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/isa.loki.LokiService/HealthCheck',
                request_serializer=loki__service__pb2.LokiHealthCheckRequest.SerializeToString,
                response_deserializer=loki__service__pb2.LokiHealthCheckResponse.FromString,
                _registered_method=True)


class LokiServiceServicer(object):
    """========================================
    Loki 日志聚合服务
    ========================================
    这是一个统一的日志聚合服务，为所有后端服务提供日志管理能力
    支持：
    - 用户和组织级别的日志隔离
    - 批量日志推送
    - LogQL 查询
    - 标签管理和过滤
    - 日志流式推送
    - 多租户支持

    """

    def PushLog(self, request, context):
        """========== 日志推送 ==========
        推送单条日志
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushLogBatch(self, request, context):
        """批量推送日志
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushLogStream(self, request_iterator, context):
        """流式推送日志（高吞吐量）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushSimpleLog(self, request, context):
        """简化的日志推送（自动添加标签）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryLogs(self, request, context):
        """========== 日志查询 ==========
        LogQL 查询
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryRange(self, request, context):
        """范围查询（时间范围内的日志）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TailLogs(self, request, context):
        """实时日志尾部查询（类似 tail -f）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryStats(self, request, context):
        """查询日志统计
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabels(self, request, context):
        """========== 标签管理 ==========
        查询可用标签
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabelValues(self, request, context):
        """查询标签值
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateLabels(self, request, context):
        """验证标签
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreams(self, request, context):
        """========== 日志流管理 ==========
        列出日志流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStreamInfo(self, request, context):
        """获取流信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteStream(self, request, context):
        """删除日志流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportLogs(self, request, context):
        """========== 导出和备份 ==========
        导出日志到文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExportStatus(self, request, context):
        """获取导出任务状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatistics(self, request, context):
        """========== 统计和监控 ==========
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserQuota(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """========== 健康检查 ==========
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LokiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PushLog': grpc.unary_unary_rpc_method_handler(
                    servicer.PushLog,
                    request_deserializer=loki__service__pb2.PushLogRequest.FromString,
                    response_serializer=loki__service__pb2.PushLogResponse.SerializeToString,
            ),
            'PushLogBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PushLogBatch,
                    request_deserializer=loki__service__pb2.PushLogBatchRequest.FromString,
                    response_serializer=loki__service__pb2.PushLogBatchResponse.SerializeToString,
            ),
            'PushLogStream': grpc.stream_unary_rpc_method_handler(
                    servicer.PushLogStream,
                    request_deserializer=loki__service__pb2.PushLogRequest.FromString,
                    response_serializer=loki__service__pb2.PushLogBatchResponse.SerializeToString,
            ),
            'PushSimpleLog': grpc.unary_unary_rpc_method_handler(
                    servicer.PushSimpleLog,
                    request_deserializer=loki__service__pb2.PushSimpleLogRequest.FromString,
                    response_serializer=loki__service__pb2.PushLogResponse.SerializeToString,
            ),
            'QueryLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLogs,
                    request_deserializer=loki__service__pb2.QueryLogsRequest.FromString,
                    response_serializer=loki__service__pb2.QueryLogsResponse.SerializeToString,
            ),
            'QueryRange': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRange,
                    request_deserializer=loki__service__pb2.QueryRangeRequest.FromString,
                    response_serializer=loki__service__pb2.QueryRangeResponse.SerializeToString,
            ),
            'TailLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.TailLogs,
                    request_deserializer=loki__service__pb2.TailLogsRequest.FromString,
                    response_serializer=loki__service__pb2.LogEntry.SerializeToString,
            ),
            'QueryStats': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryStats,
                    request_deserializer=loki__service__pb2.QueryStatsRequest.FromString,
                    response_serializer=loki__service__pb2.QueryStatsResponse.SerializeToString,
            ),
            'GetLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabels,
                    request_deserializer=loki__service__pb2.GetLabelsRequest.FromString,
                    response_serializer=loki__service__pb2.GetLabelsResponse.SerializeToString,
            ),
            'GetLabelValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabelValues,
                    request_deserializer=loki__service__pb2.GetLabelValuesRequest.FromString,
                    response_serializer=loki__service__pb2.GetLabelValuesResponse.SerializeToString,
            ),
            'ValidateLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateLabels,
                    request_deserializer=loki__service__pb2.ValidateLabelsRequest.FromString,
                    response_serializer=loki__service__pb2.ValidateLabelsResponse.SerializeToString,
            ),
            'ListStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStreams,
                    request_deserializer=loki__service__pb2.ListStreamsRequest.FromString,
                    response_serializer=loki__service__pb2.ListStreamsResponse.SerializeToString,
            ),
            'GetStreamInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStreamInfo,
                    request_deserializer=loki__service__pb2.GetStreamInfoRequest.FromString,
                    response_serializer=loki__service__pb2.GetStreamInfoResponse.SerializeToString,
            ),
            'DeleteStream': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteStream,
                    request_deserializer=loki__service__pb2.DeleteStreamRequest.FromString,
                    response_serializer=loki__service__pb2.DeleteStreamResponse.SerializeToString,
            ),
            'ExportLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.ExportLogs,
                    request_deserializer=loki__service__pb2.ExportLogsRequest.FromString,
                    response_serializer=loki__service__pb2.ExportLogsResponse.SerializeToString,
            ),
            'GetExportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExportStatus,
                    request_deserializer=loki__service__pb2.GetExportStatusRequest.FromString,
                    response_serializer=loki__service__pb2.GetExportStatusResponse.SerializeToString,
            ),
            'GetStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistics,
                    request_deserializer=loki__service__pb2.GetStatisticsRequest.FromString,
                    response_serializer=loki__service__pb2.GetStatisticsResponse.SerializeToString,
            ),
            'GetUserQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserQuota,
                    request_deserializer=loki__service__pb2.GetUserQuotaRequest.FromString,
                    response_serializer=loki__service__pb2.GetUserQuotaResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=loki__service__pb2.LokiHealthCheckRequest.FromString,
                    response_serializer=loki__service__pb2.LokiHealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'isa.loki.LokiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('isa.loki.LokiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LokiService(object):
    """========================================
    Loki 日志聚合服务
    ========================================
    这是一个统一的日志聚合服务，为所有后端服务提供日志管理能力
    支持：
    - 用户和组织级别的日志隔离
    - 批量日志推送
    - LogQL 查询
    - 标签管理和过滤
    - 日志流式推送
    - 多租户支持

    """

    @staticmethod
    def PushLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/PushLog',
            loki__service__pb2.PushLogRequest.SerializeToString,
            loki__service__pb2.PushLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushLogBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/PushLogBatch',
            loki__service__pb2.PushLogBatchRequest.SerializeToString,
            loki__service__pb2.PushLogBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushLogStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/isa.loki.LokiService/PushLogStream',
            loki__service__pb2.PushLogRequest.SerializeToString,
            loki__service__pb2.PushLogBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushSimpleLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/PushSimpleLog',
            loki__service__pb2.PushSimpleLogRequest.SerializeToString,
            loki__service__pb2.PushLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/QueryLogs',
            loki__service__pb2.QueryLogsRequest.SerializeToString,
            loki__service__pb2.QueryLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/QueryRange',
            loki__service__pb2.QueryRangeRequest.SerializeToString,
            loki__service__pb2.QueryRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TailLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/isa.loki.LokiService/TailLogs',
            loki__service__pb2.TailLogsRequest.SerializeToString,
            loki__service__pb2.LogEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/QueryStats',
            loki__service__pb2.QueryStatsRequest.SerializeToString,
            loki__service__pb2.QueryStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/GetLabels',
            loki__service__pb2.GetLabelsRequest.SerializeToString,
            loki__service__pb2.GetLabelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLabelValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/GetLabelValues',
            loki__service__pb2.GetLabelValuesRequest.SerializeToString,
            loki__service__pb2.GetLabelValuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/ValidateLabels',
            loki__service__pb2.ValidateLabelsRequest.SerializeToString,
            loki__service__pb2.ValidateLabelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/ListStreams',
            loki__service__pb2.ListStreamsRequest.SerializeToString,
            loki__service__pb2.ListStreamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStreamInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/GetStreamInfo',
            loki__service__pb2.GetStreamInfoRequest.SerializeToString,
            loki__service__pb2.GetStreamInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/DeleteStream',
            loki__service__pb2.DeleteStreamRequest.SerializeToString,
            loki__service__pb2.DeleteStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/isa.loki.LokiService/ExportLogs',
            loki__service__pb2.ExportLogsRequest.SerializeToString,
            loki__service__pb2.ExportLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/GetExportStatus',
            loki__service__pb2.GetExportStatusRequest.SerializeToString,
            loki__service__pb2.GetExportStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/GetStatistics',
            loki__service__pb2.GetStatisticsRequest.SerializeToString,
            loki__service__pb2.GetStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/GetUserQuota',
            loki__service__pb2.GetUserQuotaRequest.SerializeToString,
            loki__service__pb2.GetUserQuotaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/isa.loki.LokiService/HealthCheck',
            loki__service__pb2.LokiHealthCheckRequest.SerializeToString,
            loki__service__pb2.LokiHealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
