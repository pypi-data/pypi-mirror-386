from typing import Any, List, Sequence, Tuple, Union

class VisibilityGraph:
	def __init__(self) -> None: ...
	def add_vertex(self, x: float, y: float) -> int: ...
	def add_edge(self, v1: int, v2: int) -> None: ...
	def remove_vertex(self, index: int) -> None: ...
	def remove_edge(self, v1: int, v2: int) -> bool: ...
	def node_count(self) -> int: ...
	def edge_count(self) -> int: ...

	@property
	def vertices(self) -> List[Tuple[float, float]]: ...

	@property
	def edges(self) -> List[Tuple[int, int]]: ...


class HorizontalVisibilityGraph:
	def __init__(self) -> None: ...
	def add_vertex(self, x: float, y: float) -> int: ...
	def add_edge(self, v1: int, v2: int) -> None: ...
	def remove_vertex(self, index: int) -> None: ...
	def remove_edge(self, v1: int, v2: int) -> bool: ...
	def node_count(self) -> int: ...
	def edge_count(self) -> int: ...

	@property
	def vertices(self) -> List[Tuple[float, float]]: ...

	@property
	def edges(self) -> List[Tuple[int, int]]: ...


def build_visibility_graph(
	time_series: Sequence[float],
	skip_adjacent: bool = ...,
) -> VisibilityGraph: ...


def build_subgraph_between(
	time_series: Sequence[float],
	i: int,
	j: int,
	skip_adjacent: bool = ...,
) -> VisibilityGraph: ...


def indices_are_visible(time_series: Sequence[float], i: int, j: int) -> bool: ...


def indices_are_horizontally_visible(time_series: Sequence[float], i: int, j: int) -> bool: ...


def build_horizontal_visibility_graph(
	time_series: Sequence[float],
	skip_adjacent: bool = ...,
) -> HorizontalVisibilityGraph: ...


def build_horizontal_subgraph_between(
	time_series: Sequence[float],
	i: int,
	j: int,
	skip_adjacent: bool = ...,
) -> HorizontalVisibilityGraph: ...

def horizontal_window_motif_scores(
	time_series: Sequence[float],
	window_size: int,
	skip_adjacent: bool = ...,
) -> List[int]: ...


def subseries_between(time_series: Sequence[float], i: int, j: int) -> List[float]: ...


def segment_is_visible(
	p1: Tuple[float, float],
	p2: Tuple[float, float],
	obstacles: Sequence[Tuple[Tuple[float, float], Tuple[float, float]]],
) -> bool: ...

def to_networkx_graph(
	graph: Union[VisibilityGraph, HorizontalVisibilityGraph],
	create_using: Any = ...,
) -> Any: ...