"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import modal_proto.task_command_router_pb2

class TaskCommandRouterStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    TaskExecPoll: grpc.UnaryUnaryMultiCallable[
        modal_proto.task_command_router_pb2.TaskExecPollRequest,
        modal_proto.task_command_router_pb2.TaskExecPollResponse,
    ]
    """Poll for the exit status of an exec'd command."""
    TaskExecStart: grpc.UnaryUnaryMultiCallable[
        modal_proto.task_command_router_pb2.TaskExecStartRequest,
        modal_proto.task_command_router_pb2.TaskExecStartResponse,
    ]
    """Execute a command in the task."""
    TaskExecStdinWrite: grpc.UnaryUnaryMultiCallable[
        modal_proto.task_command_router_pb2.TaskExecStdinWriteRequest,
        modal_proto.task_command_router_pb2.TaskExecStdinWriteResponse,
    ]
    """Write to the stdin stream of an exec'd command."""
    TaskExecStdioRead: grpc.UnaryStreamMultiCallable[
        modal_proto.task_command_router_pb2.TaskExecStdioReadRequest,
        modal_proto.task_command_router_pb2.TaskExecStdioReadResponse,
    ]
    """Get a stream of output from the stdout or stderr stream of an exec'd command."""
    TaskExecWait: grpc.UnaryUnaryMultiCallable[
        modal_proto.task_command_router_pb2.TaskExecWaitRequest,
        modal_proto.task_command_router_pb2.TaskExecWaitResponse,
    ]
    """Wait for an exec'd command to exit and return the exit code."""

class TaskCommandRouterServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def TaskExecPoll(
        self,
        request: modal_proto.task_command_router_pb2.TaskExecPollRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.task_command_router_pb2.TaskExecPollResponse:
        """Poll for the exit status of an exec'd command."""
    @abc.abstractmethod
    def TaskExecStart(
        self,
        request: modal_proto.task_command_router_pb2.TaskExecStartRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.task_command_router_pb2.TaskExecStartResponse:
        """Execute a command in the task."""
    @abc.abstractmethod
    def TaskExecStdinWrite(
        self,
        request: modal_proto.task_command_router_pb2.TaskExecStdinWriteRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.task_command_router_pb2.TaskExecStdinWriteResponse:
        """Write to the stdin stream of an exec'd command."""
    @abc.abstractmethod
    def TaskExecStdioRead(
        self,
        request: modal_proto.task_command_router_pb2.TaskExecStdioReadRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[modal_proto.task_command_router_pb2.TaskExecStdioReadResponse]:
        """Get a stream of output from the stdout or stderr stream of an exec'd command."""
    @abc.abstractmethod
    def TaskExecWait(
        self,
        request: modal_proto.task_command_router_pb2.TaskExecWaitRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.task_command_router_pb2.TaskExecWaitResponse:
        """Wait for an exec'd command to exit and return the exit code."""

def add_TaskCommandRouterServicer_to_server(servicer: TaskCommandRouterServicer, server: grpc.Server) -> None: ...
