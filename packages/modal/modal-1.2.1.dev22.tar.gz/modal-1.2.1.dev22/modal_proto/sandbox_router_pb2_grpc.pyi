"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import modal_proto.sandbox_router_pb2

class SandboxRouterStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    SandboxExecPoll: grpc.UnaryUnaryMultiCallable[
        modal_proto.sandbox_router_pb2.SandboxExecPollRequest,
        modal_proto.sandbox_router_pb2.SandboxExecPollResponse,
    ]
    """Poll for the exit status of an exec'd command."""
    SandboxExecStart: grpc.UnaryUnaryMultiCallable[
        modal_proto.sandbox_router_pb2.SandboxExecStartRequest,
        modal_proto.sandbox_router_pb2.SandboxExecStartResponse,
    ]
    """Execute a command in the sandbox."""
    SandboxExecStdinWrite: grpc.UnaryUnaryMultiCallable[
        modal_proto.sandbox_router_pb2.SandboxExecStdinWriteRequest,
        modal_proto.sandbox_router_pb2.SandboxExecStdinWriteResponse,
    ]
    """Write to the stdin stream of an exec'd command."""
    SandboxExecStdioRead: grpc.UnaryStreamMultiCallable[
        modal_proto.sandbox_router_pb2.SandboxExecStdioReadRequest,
        modal_proto.sandbox_router_pb2.SandboxExecStdioReadResponse,
    ]
    """Get a stream of output from the stdout or stderr stream of an exec'd command."""
    SandboxExecWait: grpc.UnaryUnaryMultiCallable[
        modal_proto.sandbox_router_pb2.SandboxExecWaitRequest,
        modal_proto.sandbox_router_pb2.SandboxExecWaitResponse,
    ]
    """Wait for an exec'd command to exit and return the exit code."""

class SandboxRouterServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def SandboxExecPoll(
        self,
        request: modal_proto.sandbox_router_pb2.SandboxExecPollRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.sandbox_router_pb2.SandboxExecPollResponse:
        """Poll for the exit status of an exec'd command."""
    @abc.abstractmethod
    def SandboxExecStart(
        self,
        request: modal_proto.sandbox_router_pb2.SandboxExecStartRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.sandbox_router_pb2.SandboxExecStartResponse:
        """Execute a command in the sandbox."""
    @abc.abstractmethod
    def SandboxExecStdinWrite(
        self,
        request: modal_proto.sandbox_router_pb2.SandboxExecStdinWriteRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.sandbox_router_pb2.SandboxExecStdinWriteResponse:
        """Write to the stdin stream of an exec'd command."""
    @abc.abstractmethod
    def SandboxExecStdioRead(
        self,
        request: modal_proto.sandbox_router_pb2.SandboxExecStdioReadRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[modal_proto.sandbox_router_pb2.SandboxExecStdioReadResponse]:
        """Get a stream of output from the stdout or stderr stream of an exec'd command."""
    @abc.abstractmethod
    def SandboxExecWait(
        self,
        request: modal_proto.sandbox_router_pb2.SandboxExecWaitRequest,
        context: grpc.ServicerContext,
    ) -> modal_proto.sandbox_router_pb2.SandboxExecWaitResponse:
        """Wait for an exec'd command to exit and return the exit code."""

def add_SandboxRouterServicer_to_server(servicer: SandboxRouterServicer, server: grpc.Server) -> None: ...
