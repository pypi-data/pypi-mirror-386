[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "workers-py"
version = "1.6.2"
description = "A set of libraries and tools for Python Workers"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.0.0,<9.0.0",
    "rich>=13.0.0",
    "pyodide-cli",
    "pyjson5>=1.6.0",
    "pyodide-py",
    "workers-runtime-sdk>=0.1.0",
]

[dependency-groups]
dev = [
  "pytest>=7.0.0",
  "click>=8.0.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
  "mypy>=1.0.0",
  "pre-commit>=4.3.0",
]

[project.optional-dependencies]
build = ["uv ~= 0.5.23"]

[project.scripts]
pywrangler = "pywrangler.cli:app"

[project.urls]
"Homepage" = "https://github.com/cloudflare/workers-py"
"Bug Tracker" = "https://github.com/cloudflare/workers-py/issues"

[tool.ruff]
target-version = "py312"
lint.select = [
  "B0",     # bugbear (all B0* checks enabled by default)
  "B904",   # bugbear (Within an except clause, raise exceptions with raise ... from err)
  "B905",   # bugbear (zip() without an explicit strict= parameter set.)
  "C4",     # flake8-comprehensions
  "C9",     # mccabe complexity
  "E",      # pycodestyles
  "F",      # pyflakes
  "I",      # isort
  "PERF",   # Perflint
  "PGH",    # pygrep-hooks
  "PL",     # Pylint
  "UP",     # pyupgrade
  "W",      # pycodestyles
]
lint.ignore = ["E402", "E501", "E731", "E741", "PLW2901", "UP031"]
lint.flake8-comprehensions.allow-dict-calls-with-keyword-arguments = true

[tool.mypy]
packages = ["pywrangler"]
python_version = "3.12"

show_error_codes = true

strict = true
warn_unreachable = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/pywrangler"]

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]
build_command = """
  python -m pip install -e .[build]
  uv lock --upgrade-package "$PACKAGE_NAME"
  git add uv.lock
  uv build
"""

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]
mode = "update"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
