[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "taskx"
version = "0.2.1"
description = "Modern Python task runner - npm scripts for Python"
readme = "README.md"
license = {text = "Proprietary - See LICENSE file"}
requires-python = ">=3.8"
authors = [
    {name = "taskx Project"}
]
keywords = [
    "task runner",
    "automation",
    "build tool",
    "python",
    "cli",
    "make",
    "npm scripts",
    "workflow"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Systems Administration",
    "Environment :: Console",
]

dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "tomli>=2.0.0; python_version<'3.11'",
    "watchfiles>=0.18.0",
    "questionary>=2.0.0",
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "memory-profiler>=0.61.0",
    "tox>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "types-setuptools",
]

[project.urls]
Homepage = "https://github.com/0xV8/taskx"
Repository = "https://github.com/0xV8/taskx"
"Bug Tracker" = "https://github.com/0xV8/taskx/issues"

[project.scripts]
taskx = "taskx.cli.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["taskx"]

[tool.hatch.build]
include = [
    "taskx/**/*.py",
    "taskx/templates/**/*.j2",
    "taskx/templates/**/*.md",
]

[tool.hatch.build.targets.sdist]
include = [
    "taskx/",
    "tests/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]

# ============================================================================
# Testing Configuration
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=taskx",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "windows: marks tests that only run on Windows",
    "unix: marks tests that only run on Unix systems",
    "requires_shell: marks tests that require a real shell",
]
timeout = 300
asyncio_mode = "auto"

[tool.coverage.run]
source = ["taskx"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
]

# ============================================================================
# Type Checking Configuration
# ============================================================================

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

# ============================================================================
# Linting Configuration
# ============================================================================

[tool.ruff]
line-length = 100
target-version = "py38"
src = ["taskx", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (pytest uses asserts)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert allowed in tests
    "ARG",    # unused arguments OK in tests (fixtures)
    "S108",   # hardcoded temp file paths
]

[tool.ruff.lint.isort]
known-first-party = ["taskx"]

# ============================================================================
# Formatting Configuration
# ============================================================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["taskx", "tests"]

# ============================================================================
# taskx Configuration (dogfooding - use taskx to build taskx!)
# ============================================================================

[tool.taskx.env]
PYTHON = "python3"
PYTEST_ARGS = "-v --cov=taskx --cov-report=term-missing"

[tool.taskx.aliases]
t = "test"
ta = "test-all"
f = "format"
l = "lint"

[tool.taskx.tasks]
# Development tasks
dev = { cmd = "echo 'taskx development environment ready!'", description = "Start development" }
install = { cmd = "pip install -e '.[dev]'", description = "Install in development mode" }

# Code quality tasks
format = { cmd = "black taskx tests && isort taskx tests", description = "Format code with black and isort" }
lint = { cmd = "ruff check taskx tests", description = "Lint code with ruff" }
typecheck = { cmd = "mypy taskx", description = "Type check with mypy" }

# Testing tasks
test = { cmd = "pytest tests/unit", description = "Run unit tests" }
test-integration = { cmd = "pytest tests/integration", description = "Run integration tests" }
test-e2e = { cmd = "pytest tests/e2e", description = "Run e2e tests" }
test-all = { cmd = "pytest tests/", description = "Run all tests" }
test-cov = { cmd = "pytest tests/ --cov=taskx --cov-report=html", description = "Run tests with coverage report" }
test-watch = { cmd = "pytest-watch tests/", description = "Run tests in watch mode" }

# Quality gate
check = { parallel = ["ruff check taskx tests", "mypy taskx", "pytest tests/unit -q"], description = "Run all quality checks in parallel" }

# Build tasks
clean = { cmd = "rm -rf build dist *.egg-info htmlcov .coverage .pytest_cache .mypy_cache .ruff_cache", description = "Clean build artifacts" }
build = { cmd = "python -m build", description = "Build distribution packages" }

# Deployment tasks
publish-test = { depends = ["check", "build"], cmd = "twine upload --repository testpypi dist/*", description = "Publish to TestPyPI", confirm = "Are you sure you want to publish to TestPyPI?" }
publish = { depends = ["check", "build"], cmd = "twine upload dist/*", description = "Publish to PyPI", confirm = "Are you sure you want to publish to PyPI?" }

# Test task with prompts
greet = { cmd = "echo 'Hello ${NAME}! You selected: ${OPTION}'", description = "Test interactive prompts", prompt = { NAME = { type = "text", message = "What's your name?", default = "World" }, OPTION = { type = "select", message = "Choose an option:", choices = ["Option A", "Option B", "Option C"] } } }

# Documentation
docs-serve = { cmd = "mkdocs serve", description = "Serve documentation locally" }
docs-build = { cmd = "mkdocs build", description = "Build documentation" }
