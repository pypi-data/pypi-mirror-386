# coding: utf-8

"""
BeeKeeperAI EscrowAI Enclave API

Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

The version of the OpenAPI document: 2.1.1
Contact: engineering@beekeeperai.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class WriteFileRequest(BaseModel):
    """
    WriteFileRequest
    """  # noqa: E501

    content: StrictStr = Field(
        description='The file content to write. For binary content, use base64 encoding and set contentEncoding to "base64". For text content, provide the content directly as a string. '
    )
    content_type: Optional[StrictStr] = Field(
        default=None, description="MIME type of the content", alias="contentType"
    )
    content_encoding: Optional[StrictStr] = Field(
        default=None,
        description='Content encoding used for the content field. Set to "base64" for binary content, omit for text content. ',
        alias="contentEncoding",
    )
    overwrite: Optional[StrictBool] = Field(
        default=False,
        description="Whether to overwrite existing file (defaults to false)",
    )
    metadata: Optional[Dict[str, StrictStr]] = Field(
        default=None, description="Optional metadata to associate with the file"
    )
    __properties: ClassVar[List[str]] = [
        "content",
        "contentType",
        "contentEncoding",
        "overwrite",
        "metadata",
    ]

    @field_validator("content_encoding")
    def content_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["base64"]):
            raise ValueError("must be one of enum values ('base64')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WriteFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WriteFileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "content": obj.get("content"),
                "contentType": obj.get("contentType"),
                "contentEncoding": obj.get("contentEncoding"),
                "overwrite": obj.get("overwrite")
                if obj.get("overwrite") is not None
                else False,
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
