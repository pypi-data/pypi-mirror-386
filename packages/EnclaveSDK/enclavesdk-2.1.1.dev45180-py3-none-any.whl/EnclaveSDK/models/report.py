# coding: utf-8

"""
BeeKeeperAI EscrowAI Enclave API

Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

The version of the OpenAPI document: 2.1.1
Contact: engineering@beekeeperai.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from EnclaveSDK.models.report_json_schema import ReportJsonSchema
from typing import Set
from typing_extensions import Self


class Report(BaseModel):
    """
    Report schema
    """  # noqa: E501

    status: StrictStr = Field(description="The status of the report")
    json_data: Optional[Any]
    json_schema: Optional[ReportJsonSchema] = None
    name: Optional[StrictStr] = Field(
        default=None, description="A unique identifier for the report (optional)"
    )
    upload_location: Optional[StrictStr] = Field(
        default=None, description="The upload location (optional)"
    )
    project: Optional[StrictStr] = Field(
        default=None, description="The project ID (optional)"
    )
    run_configuration: Optional[StrictStr] = Field(
        default=None, description="The run configuration ID (optional)"
    )
    run: Optional[StrictStr] = Field(default=None, description="The run ID (optional)")
    __properties: ClassVar[List[str]] = [
        "status",
        "json_data",
        "json_schema",
        "name",
        "upload_location",
        "project",
        "run_configuration",
        "run",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["In Progress", "Completed", "Paused", "Failed"]):
            raise ValueError(
                "must be one of enum values ('In Progress', 'Completed', 'Paused', 'Failed')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of json_schema
        if self.json_schema:
            _dict["json_schema"] = self.json_schema.to_dict()
        # set to None if json_data (nullable) is None
        # and model_fields_set contains the field
        if self.json_data is None and "json_data" in self.model_fields_set:
            _dict["json_data"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "status": obj.get("status"),
                "json_data": obj.get("json_data"),
                "json_schema": ReportJsonSchema.from_dict(obj["json_schema"])
                if obj.get("json_schema") is not None
                else None,
                "name": obj.get("name"),
                "upload_location": obj.get("upload_location"),
                "project": obj.get("project"),
                "run_configuration": obj.get("run_configuration"),
                "run": obj.get("run"),
            }
        )
        return _obj
