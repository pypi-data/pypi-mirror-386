# coding: utf-8

"""
BeeKeeperAI EscrowAI Enclave API

Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

The version of the OpenAPI document: 2.1.1
Contact: engineering@beekeeperai.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from EnclaveSDK.models.sas_object_s3_config import SASObjectS3Config
from typing import Set
from typing_extensions import Self


class SASObject(BaseModel):
    """
    SASObject
    """  # noqa: E501

    sas_url: Optional[StrictStr] = Field(
        default=None, description="Optional SAS URL to access the file", alias="SASUrl"
    )
    secretkeypath: Optional[StrictStr] = Field(
        default=None,
        description="Optional path to secret key for decrypting the dataset. This is only for testing in the sandbox and is not to be used in production.",
    )
    s3_config: Optional[SASObjectS3Config] = Field(default=None, alias="s3Config")
    __properties: ClassVar[List[str]] = ["SASUrl", "secretkeypath", "s3Config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SASObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of s3_config
        if self.s3_config:
            _dict["s3Config"] = self.s3_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SASObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "SASUrl": obj.get("SASUrl"),
                "secretkeypath": obj.get("secretkeypath"),
                "s3Config": SASObjectS3Config.from_dict(obj["s3Config"])
                if obj.get("s3Config") is not None
                else None,
            }
        )
        return _obj
