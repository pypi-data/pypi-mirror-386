# coding: utf-8

"""
BeeKeeperAI EscrowAI Enclave API

Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

The version of the OpenAPI document: 2.1.1
Contact: engineering@beekeeperai.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from EnclaveSDK.models.api_v1_data_files_get200_response import (
    ApiV1DataFilesGet200Response,
)
from EnclaveSDK.models.write_file_request import WriteFileRequest
from EnclaveSDK.models.write_file_response import WriteFileResponse

from EnclaveSDK.api_client import ApiClient, RequestSerialized
from EnclaveSDK.api_response import ApiResponse
from EnclaveSDK.rest import RESTResponseType


class WritebackApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def api_v1_writeback_file_delete(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a writeback file

        Delete a file from the writeback storage. In enclave mode, the server will use the configured writeback credentials. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_delete_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "403": "BasicMessage",
            "404": None,
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_writeback_file_delete_with_http_info(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a writeback file

        Delete a file from the writeback storage. In enclave mode, the server will use the configured writeback credentials. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_delete_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "403": "BasicMessage",
            "404": None,
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_writeback_file_delete_without_preload_content(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a writeback file

        Delete a file from the writeback storage. In enclave mode, the server will use the configured writeback credentials. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_delete_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "403": "BasicMessage",
            "404": None,
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_writeback_file_delete_serialize(
        self,
        filepath,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filepath is not None:
            _query_params.append(("filepath", filepath))

        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/api/v1/writeback/file",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_writeback_file_get(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Retrieve a writeback file

        Retrieve a file previously written to the writeback storage. In enclave mode, the server will use the configured writeback SAS URL. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_get_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "403": "BasicMessage",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_writeback_file_get_with_http_info(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Retrieve a writeback file

        Retrieve a file previously written to the writeback storage. In enclave mode, the server will use the configured writeback SAS URL. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_get_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "403": "BasicMessage",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_writeback_file_get_without_preload_content(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a writeback file

        Retrieve a file previously written to the writeback storage. In enclave mode, the server will use the configured writeback SAS URL. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the writeback file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_get_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "403": "BasicMessage",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_writeback_file_get_serialize(
        self,
        filepath,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filepath is not None:
            _query_params.append(("filepath", filepath))

        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/octet-stream", "application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/v1/writeback/file",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_writeback_file_post(
        self,
        write_file_request: WriteFileRequest,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL for storage (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WriteFileResponse:
        """Create a writeback file

        Create a new file in the writeback storage. Supports both JSON and multipart uploads. In enclave mode, content is encrypted prior to storage.

        :param write_file_request: (required)
        :type write_file_request: WriteFileRequest
        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL for storage (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_post_serialize(
            write_file_request=write_file_request,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "WriteFileResponse",
            "200": "WriteFileResponse",
            "403": "BasicMessage",
            "400": "BasicMessage",
            "413": None,
            "415": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_writeback_file_post_with_http_info(
        self,
        write_file_request: WriteFileRequest,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL for storage (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WriteFileResponse]:
        """Create a writeback file

        Create a new file in the writeback storage. Supports both JSON and multipart uploads. In enclave mode, content is encrypted prior to storage.

        :param write_file_request: (required)
        :type write_file_request: WriteFileRequest
        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL for storage (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_post_serialize(
            write_file_request=write_file_request,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "WriteFileResponse",
            "200": "WriteFileResponse",
            "403": "BasicMessage",
            "400": "BasicMessage",
            "413": None,
            "415": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_writeback_file_post_without_preload_content(
        self,
        write_file_request: WriteFileRequest,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL for storage (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a writeback file

        Create a new file in the writeback storage. Supports both JSON and multipart uploads. In enclave mode, content is encrypted prior to storage.

        :param write_file_request: (required)
        :type write_file_request: WriteFileRequest
        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL for storage (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_post_serialize(
            write_file_request=write_file_request,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "WriteFileResponse",
            "200": "WriteFileResponse",
            "403": "BasicMessage",
            "400": "BasicMessage",
            "413": None,
            "415": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_writeback_file_post_serialize(
        self,
        write_file_request,
        filepath,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filepath is not None:
            _query_params.append(("filepath", filepath))

        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if write_file_request is not None:
            _body_params = write_file_request

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/api/v1/writeback/file",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_writeback_file_put(
        self,
        write_file_request: WriteFileRequest,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL for storage (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WriteFileResponse:
        """Upsert a writeback file

        Create or replace a file in the writeback storage. Supports both JSON and multipart uploads.

        :param write_file_request: (required)
        :type write_file_request: WriteFileRequest
        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL for storage (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_put_serialize(
            write_file_request=write_file_request,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WriteFileResponse",
            "201": "WriteFileResponse",
            "403": "BasicMessage",
            "400": None,
            "413": None,
            "415": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_writeback_file_put_with_http_info(
        self,
        write_file_request: WriteFileRequest,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL for storage (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WriteFileResponse]:
        """Upsert a writeback file

        Create or replace a file in the writeback storage. Supports both JSON and multipart uploads.

        :param write_file_request: (required)
        :type write_file_request: WriteFileRequest
        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL for storage (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_put_serialize(
            write_file_request=write_file_request,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WriteFileResponse",
            "201": "WriteFileResponse",
            "403": "BasicMessage",
            "400": None,
            "413": None,
            "415": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_writeback_file_put_without_preload_content(
        self,
        write_file_request: WriteFileRequest,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL for storage (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upsert a writeback file

        Create or replace a file in the writeback storage. Supports both JSON and multipart uploads.

        :param write_file_request: (required)
        :type write_file_request: WriteFileRequest
        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL for storage (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_file_put_serialize(
            write_file_request=write_file_request,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WriteFileResponse",
            "201": "WriteFileResponse",
            "403": "BasicMessage",
            "400": None,
            "413": None,
            "415": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_writeback_file_put_serialize(
        self,
        write_file_request,
        filepath,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filepath is not None:
            _query_params.append(("filepath", filepath))

        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if write_file_request is not None:
            _body_params = write_file_request

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/api/v1/writeback/file",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_writeback_files_get(
        self,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback container (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiV1DataFilesGet200Response:
        """Retrieve a list of available writeback files

        Retrieve a list of files in writeback storage. In enclave mode, the server will use the configured writeback credentials. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param sas_url: Optional SAS URL to access the writeback container (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_files_get_serialize(
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ApiV1DataFilesGet200Response",
            "403": "BasicMessage",
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_writeback_files_get_with_http_info(
        self,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback container (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiV1DataFilesGet200Response]:
        """Retrieve a list of available writeback files

        Retrieve a list of files in writeback storage. In enclave mode, the server will use the configured writeback credentials. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param sas_url: Optional SAS URL to access the writeback container (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_files_get_serialize(
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ApiV1DataFilesGet200Response",
            "403": "BasicMessage",
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_writeback_files_get_without_preload_content(
        self,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the writeback container (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of available writeback files

        Retrieve a list of files in writeback storage. In enclave mode, the server will use the configured writeback credentials. In sandbox mode, storage credentials must be provided via query parameters (Azure or S3).

        :param sas_url: Optional SAS URL to access the writeback container (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_writeback_files_get_serialize(
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ApiV1DataFilesGet200Response",
            "403": "BasicMessage",
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_writeback_files_get_serialize(
        self,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/v1/writeback/files",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
