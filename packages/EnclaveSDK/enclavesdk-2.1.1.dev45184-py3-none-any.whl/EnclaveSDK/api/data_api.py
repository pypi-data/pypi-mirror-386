# coding: utf-8

"""
BeeKeeperAI EscrowAI Enclave API

Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

The version of the OpenAPI document: 2.1.1
Contact: engineering@beekeeperai.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from EnclaveSDK.models.api_v1_data_files_get200_response import (
    ApiV1DataFilesGet200Response,
)
from EnclaveSDK.models.request_file_data import RequestFileData
from EnclaveSDK.models.sql_query import SQLQuery
from EnclaveSDK.models.sql_response import SQLResponse

from EnclaveSDK.api_client import ApiClient, RequestSerialized
from EnclaveSDK.api_response import ApiResponse
from EnclaveSDK.rest import RESTResponseType


class DataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def api_v1_data_file_get(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Retrieve a file by its filename and optionally SASUrl as a get request


        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_file_get_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_data_file_get_with_http_info(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Retrieve a file by its filename and optionally SASUrl as a get request


        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_file_get_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_data_file_get_without_preload_content(
        self,
        filepath: StrictStr,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a file by its filename and optionally SASUrl as a get request


        :param filepath: (required)
        :type filepath: str
        :param sas_url: Optional SAS URL to access the file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_file_get_serialize(
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_data_file_get_serialize(
        self,
        filepath,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filepath is not None:
            _query_params.append(("filepath", filepath))

        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/octet-stream"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/v1/data/file",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_data_file_post(
        self,
        request_file_data: Optional[RequestFileData] = None,
        filepath: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) File path as query parameter. Use request body instead for new implementations."
            ),
        ] = None,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) Optional SAS URL to access the file. Use request body instead for new implementations."
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS region where the S3 bucket is located. Use request body instead for new implementations."
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS Access Key ID. Use request body instead for new implementations."
            ),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS Secret Access Key. Use request body instead for new implementations."
            ),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) S3 bucket name. Use request body instead for new implementations."
            ),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) S3 key prefix for organizing files. Use request body instead for new implementations."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Retrieve a file by its filename and optionally SASUrl as a post request

        Retrieve a file using request body (recommended) or query parameters (legacy). For backward compatibility with older deployments, filepath can be provided as a query parameter, but new clients should use the request body format.

        :param request_file_data:
        :type request_file_data: RequestFileData
        :param filepath: (LEGACY) File path as query parameter. Use request body instead for new implementations.
        :type filepath: str
        :param sas_url: (LEGACY) Optional SAS URL to access the file. Use request body instead for new implementations.
        :type sas_url: str
        :param s3_region: (LEGACY) AWS region where the S3 bucket is located. Use request body instead for new implementations.
        :type s3_region: str
        :param s3_access_key_id: (LEGACY) AWS Access Key ID. Use request body instead for new implementations.
        :type s3_access_key_id: str
        :param s3_secret_access_key: (LEGACY) AWS Secret Access Key. Use request body instead for new implementations.
        :type s3_secret_access_key: str
        :param s3_bucket_name: (LEGACY) S3 bucket name. Use request body instead for new implementations.
        :type s3_bucket_name: str
        :param s3_prefix: (LEGACY) S3 key prefix for organizing files. Use request body instead for new implementations.
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_file_post_serialize(
            request_file_data=request_file_data,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_data_file_post_with_http_info(
        self,
        request_file_data: Optional[RequestFileData] = None,
        filepath: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) File path as query parameter. Use request body instead for new implementations."
            ),
        ] = None,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) Optional SAS URL to access the file. Use request body instead for new implementations."
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS region where the S3 bucket is located. Use request body instead for new implementations."
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS Access Key ID. Use request body instead for new implementations."
            ),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS Secret Access Key. Use request body instead for new implementations."
            ),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) S3 bucket name. Use request body instead for new implementations."
            ),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) S3 key prefix for organizing files. Use request body instead for new implementations."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Retrieve a file by its filename and optionally SASUrl as a post request

        Retrieve a file using request body (recommended) or query parameters (legacy). For backward compatibility with older deployments, filepath can be provided as a query parameter, but new clients should use the request body format.

        :param request_file_data:
        :type request_file_data: RequestFileData
        :param filepath: (LEGACY) File path as query parameter. Use request body instead for new implementations.
        :type filepath: str
        :param sas_url: (LEGACY) Optional SAS URL to access the file. Use request body instead for new implementations.
        :type sas_url: str
        :param s3_region: (LEGACY) AWS region where the S3 bucket is located. Use request body instead for new implementations.
        :type s3_region: str
        :param s3_access_key_id: (LEGACY) AWS Access Key ID. Use request body instead for new implementations.
        :type s3_access_key_id: str
        :param s3_secret_access_key: (LEGACY) AWS Secret Access Key. Use request body instead for new implementations.
        :type s3_secret_access_key: str
        :param s3_bucket_name: (LEGACY) S3 bucket name. Use request body instead for new implementations.
        :type s3_bucket_name: str
        :param s3_prefix: (LEGACY) S3 key prefix for organizing files. Use request body instead for new implementations.
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_file_post_serialize(
            request_file_data=request_file_data,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_data_file_post_without_preload_content(
        self,
        request_file_data: Optional[RequestFileData] = None,
        filepath: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) File path as query parameter. Use request body instead for new implementations."
            ),
        ] = None,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) Optional SAS URL to access the file. Use request body instead for new implementations."
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS region where the S3 bucket is located. Use request body instead for new implementations."
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS Access Key ID. Use request body instead for new implementations."
            ),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) AWS Secret Access Key. Use request body instead for new implementations."
            ),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) S3 bucket name. Use request body instead for new implementations."
            ),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(
                description="(LEGACY) S3 key prefix for organizing files. Use request body instead for new implementations."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a file by its filename and optionally SASUrl as a post request

        Retrieve a file using request body (recommended) or query parameters (legacy). For backward compatibility with older deployments, filepath can be provided as a query parameter, but new clients should use the request body format.

        :param request_file_data:
        :type request_file_data: RequestFileData
        :param filepath: (LEGACY) File path as query parameter. Use request body instead for new implementations.
        :type filepath: str
        :param sas_url: (LEGACY) Optional SAS URL to access the file. Use request body instead for new implementations.
        :type sas_url: str
        :param s3_region: (LEGACY) AWS region where the S3 bucket is located. Use request body instead for new implementations.
        :type s3_region: str
        :param s3_access_key_id: (LEGACY) AWS Access Key ID. Use request body instead for new implementations.
        :type s3_access_key_id: str
        :param s3_secret_access_key: (LEGACY) AWS Secret Access Key. Use request body instead for new implementations.
        :type s3_secret_access_key: str
        :param s3_bucket_name: (LEGACY) S3 bucket name. Use request body instead for new implementations.
        :type s3_bucket_name: str
        :param s3_prefix: (LEGACY) S3 key prefix for organizing files. Use request body instead for new implementations.
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_file_post_serialize(
            request_file_data=request_file_data,
            filepath=filepath,
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "404": None,
            "400": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_data_file_post_serialize(
        self,
        request_file_data,
        filepath,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filepath is not None:
            _query_params.append(("filepath", filepath))

        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_file_data is not None:
            _body_params = request_file_data

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/octet-stream"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/api/v1/data/file",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_data_files_get(
        self,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiV1DataFilesGet200Response:
        """Retrieve a list of available files


        :param sas_url: Optional SAS URL to access the file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_files_get_serialize(
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ApiV1DataFilesGet200Response",
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_data_files_get_with_http_info(
        self,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiV1DataFilesGet200Response]:
        """Retrieve a list of available files


        :param sas_url: Optional SAS URL to access the file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_files_get_serialize(
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ApiV1DataFilesGet200Response",
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_data_files_get_without_preload_content(
        self,
        sas_url: Annotated[
            Optional[StrictStr],
            Field(
                description="Optional SAS URL to access the file (mutually exclusive with S3 parameters)"
            ),
        ] = None,
        s3_region: Annotated[
            Optional[StrictStr],
            Field(
                description="AWS region where the S3 bucket is located (required if using S3)"
            ),
        ] = None,
        s3_access_key_id: Annotated[
            Optional[StrictStr],
            Field(description="AWS Access Key ID (required if using S3)"),
        ] = None,
        s3_secret_access_key: Annotated[
            Optional[StrictStr],
            Field(description="AWS Secret Access Key (required if using S3)"),
        ] = None,
        s3_bucket_name: Annotated[
            Optional[StrictStr],
            Field(description="S3 bucket name (required if using S3)"),
        ] = None,
        s3_prefix: Annotated[
            Optional[StrictStr],
            Field(description="S3 key prefix for organizing files (optional for S3)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of available files


        :param sas_url: Optional SAS URL to access the file (mutually exclusive with S3 parameters)
        :type sas_url: str
        :param s3_region: AWS region where the S3 bucket is located (required if using S3)
        :type s3_region: str
        :param s3_access_key_id: AWS Access Key ID (required if using S3)
        :type s3_access_key_id: str
        :param s3_secret_access_key: AWS Secret Access Key (required if using S3)
        :type s3_secret_access_key: str
        :param s3_bucket_name: S3 bucket name (required if using S3)
        :type s3_bucket_name: str
        :param s3_prefix: S3 key prefix for organizing files (optional for S3)
        :type s3_prefix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_files_get_serialize(
            sas_url=sas_url,
            s3_region=s3_region,
            s3_access_key_id=s3_access_key_id,
            s3_secret_access_key=s3_secret_access_key,
            s3_bucket_name=s3_bucket_name,
            s3_prefix=s3_prefix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ApiV1DataFilesGet200Response",
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_data_files_get_serialize(
        self,
        sas_url,
        s3_region,
        s3_access_key_id,
        s3_secret_access_key,
        s3_bucket_name,
        s3_prefix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sas_url is not None:
            _query_params.append(("SASUrl", sas_url))

        if s3_region is not None:
            _query_params.append(("s3Region", s3_region))

        if s3_access_key_id is not None:
            _query_params.append(("s3AccessKeyId", s3_access_key_id))

        if s3_secret_access_key is not None:
            _query_params.append(("s3SecretAccessKey", s3_secret_access_key))

        if s3_bucket_name is not None:
            _query_params.append(("s3BucketName", s3_bucket_name))

        if s3_prefix is not None:
            _query_params.append(("s3Prefix", s3_prefix))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/v1/data/files",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def api_v1_data_sql_select_post(
        self,
        sql_query: SQLQuery,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SQLResponse:
        """Execute a SQL query

        This endpoint allows you to execute a SQL query and get the result.

        :param sql_query: (required)
        :type sql_query: SQLQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_sql_select_post_serialize(
            sql_query=sql_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SQLResponse",
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def api_v1_data_sql_select_post_with_http_info(
        self,
        sql_query: SQLQuery,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SQLResponse]:
        """Execute a SQL query

        This endpoint allows you to execute a SQL query and get the result.

        :param sql_query: (required)
        :type sql_query: SQLQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_sql_select_post_serialize(
            sql_query=sql_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SQLResponse",
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def api_v1_data_sql_select_post_without_preload_content(
        self,
        sql_query: SQLQuery,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Execute a SQL query

        This endpoint allows you to execute a SQL query and get the result.

        :param sql_query: (required)
        :type sql_query: SQLQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._api_v1_data_sql_select_post_serialize(
            sql_query=sql_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SQLResponse",
            "400": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _api_v1_data_sql_select_post_serialize(
        self,
        sql_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if sql_query is not None:
            _body_params = sql_query

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/api/v1/data/sql/select",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
