"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Function:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _FunctionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Function.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    FUNCTION_UNSPECIFIED: _Function.ValueType  # 0
    FUNCTION_SUM: _Function.ValueType  # 1
    FUNCTION_AVERAGE: _Function.ValueType  # 2
    """deprecated, use FUNCTION_AVG instead"""
    FUNCTION_COUNT: _Function.ValueType  # 3
    FUNCTION_P50: _Function.ValueType  # 4
    FUNCTION_P75: _Function.ValueType  # 12
    FUNCTION_P90: _Function.ValueType  # 5
    FUNCTION_P95: _Function.ValueType  # 6
    FUNCTION_P99: _Function.ValueType  # 7
    FUNCTION_AVG: _Function.ValueType  # 8
    FUNCTION_MAX: _Function.ValueType  # 9
    FUNCTION_MIN: _Function.ValueType  # 10
    FUNCTION_UNIQ: _Function.ValueType  # 11

class Function(_Function, metaclass=_FunctionEnumTypeWrapper): ...

FUNCTION_UNSPECIFIED: Function.ValueType  # 0
FUNCTION_SUM: Function.ValueType  # 1
FUNCTION_AVERAGE: Function.ValueType  # 2
"""deprecated, use FUNCTION_AVG instead"""
FUNCTION_COUNT: Function.ValueType  # 3
FUNCTION_P50: Function.ValueType  # 4
FUNCTION_P75: Function.ValueType  # 12
FUNCTION_P90: Function.ValueType  # 5
FUNCTION_P95: Function.ValueType  # 6
FUNCTION_P99: Function.ValueType  # 7
FUNCTION_AVG: Function.ValueType  # 8
FUNCTION_MAX: Function.ValueType  # 9
FUNCTION_MIN: Function.ValueType  # 10
FUNCTION_UNIQ: Function.ValueType  # 11
global___Function = Function

class _ExtrapolationMode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ExtrapolationModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ExtrapolationMode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EXTRAPOLATION_MODE_UNSPECIFIED: _ExtrapolationMode.ValueType  # 0
    EXTRAPOLATION_MODE_NONE: _ExtrapolationMode.ValueType  # 1
    EXTRAPOLATION_MODE_SAMPLE_WEIGHTED: _ExtrapolationMode.ValueType  # 2
    EXTRAPOLATION_MODE_CLIENT_ONLY: _ExtrapolationMode.ValueType  # 3
    EXTRAPOLATION_MODE_SERVER_ONLY: _ExtrapolationMode.ValueType  # 4

class ExtrapolationMode(_ExtrapolationMode, metaclass=_ExtrapolationModeEnumTypeWrapper): ...

EXTRAPOLATION_MODE_UNSPECIFIED: ExtrapolationMode.ValueType  # 0
EXTRAPOLATION_MODE_NONE: ExtrapolationMode.ValueType  # 1
EXTRAPOLATION_MODE_SAMPLE_WEIGHTED: ExtrapolationMode.ValueType  # 2
EXTRAPOLATION_MODE_CLIENT_ONLY: ExtrapolationMode.ValueType  # 3
EXTRAPOLATION_MODE_SERVER_ONLY: ExtrapolationMode.ValueType  # 4
global___ExtrapolationMode = ExtrapolationMode

class _Reliability:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ReliabilityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Reliability.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RELIABILITY_UNSPECIFIED: _Reliability.ValueType  # 0
    RELIABILITY_LOW: _Reliability.ValueType  # 1
    RELIABILITY_HIGH: _Reliability.ValueType  # 2

class Reliability(_Reliability, metaclass=_ReliabilityEnumTypeWrapper): ...

RELIABILITY_UNSPECIFIED: Reliability.ValueType  # 0
RELIABILITY_LOW: Reliability.ValueType  # 1
RELIABILITY_HIGH: Reliability.ValueType  # 2
global___Reliability = Reliability

@typing.final
class AttributeKey(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[AttributeKey._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TYPE_UNSPECIFIED: AttributeKey._Type.ValueType  # 0
        """protobuf requirement, do not send this"""
        TYPE_STRING: AttributeKey._Type.ValueType  # 1
        TYPE_BOOLEAN: AttributeKey._Type.ValueType  # 2
        TYPE_FLOAT: AttributeKey._Type.ValueType  # 3
        """deprecated, use TYPE_DOUBLE instead"""
        TYPE_INT: AttributeKey._Type.ValueType  # 4
        """note: all numbers are stored as float64, so massive integers can be rounded. USE STRING FOR IDS."""
        TYPE_DOUBLE: AttributeKey._Type.ValueType  # 5

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """this mostly reflects what types are able to be ingested, see eap_spans consumer for ingest details"""

    TYPE_UNSPECIFIED: AttributeKey.Type.ValueType  # 0
    """protobuf requirement, do not send this"""
    TYPE_STRING: AttributeKey.Type.ValueType  # 1
    TYPE_BOOLEAN: AttributeKey.Type.ValueType  # 2
    TYPE_FLOAT: AttributeKey.Type.ValueType  # 3
    """deprecated, use TYPE_DOUBLE instead"""
    TYPE_INT: AttributeKey.Type.ValueType  # 4
    """note: all numbers are stored as float64, so massive integers can be rounded. USE STRING FOR IDS."""
    TYPE_DOUBLE: AttributeKey.Type.ValueType  # 5

    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    type: global___AttributeKey.Type.ValueType
    name: builtins.str
    """the name of the trace item attribute, everything that sentry sends by default is prefixed with
    `sentry.` to allow users to send attributes of the same name.
    Exampe: `sentry.duration`, `sentry.span_id` etc
    """
    def __init__(
        self,
        *,
        type: global___AttributeKey.Type.ValueType = ...,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "type", b"type"]) -> None: ...

global___AttributeKey = AttributeKey

@typing.final
class VirtualColumnContext(google.protobuf.message.Message):
    """custom mappings of column values

    for example, `project_name` is changeable by the user and not stored in EAP,
    but sorting by it may be desired. So something like this might be done:

    ORDER BY sentry.project_name
    VirtualColumnContext(
      from_column_name="sentry.project_id",
      to_column_name="sentry.project_name",
      value_map={"1": "sentry", "2": "snuba"},
    )

    in this example `sentry.project_name` is a virtual column created by mapping
    values from the real column `sentry.project_id` to new values. project_id of 1
    gets mapped to project_name="sentry" etc.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ValueMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    FROM_COLUMN_NAME_FIELD_NUMBER: builtins.int
    TO_COLUMN_NAME_FIELD_NUMBER: builtins.int
    VALUE_MAP_FIELD_NUMBER: builtins.int
    DEFAULT_VALUE_FIELD_NUMBER: builtins.int
    from_column_name: builtins.str
    to_column_name: builtins.str
    default_value: builtins.str
    @property
    def value_map(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        from_column_name: builtins.str = ...,
        to_column_name: builtins.str = ...,
        value_map: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        default_value: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["default_value", b"default_value", "from_column_name", b"from_column_name", "to_column_name", b"to_column_name", "value_map", b"value_map"]) -> None: ...

global___VirtualColumnContext = VirtualColumnContext

@typing.final
class StrArray(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___StrArray = StrArray

@typing.final
class IntArray(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___IntArray = IntArray

@typing.final
class FloatArray(google.protobuf.message.Message):
    """DEPRECATED, use DoubleArray instead"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___FloatArray = FloatArray

@typing.final
class DoubleArray(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["values", b"values"]) -> None: ...

global___DoubleArray = DoubleArray

@typing.final
class AttributeValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IS_NULL_FIELD_NUMBER: builtins.int
    VAL_BOOL_FIELD_NUMBER: builtins.int
    VAL_STR_FIELD_NUMBER: builtins.int
    VAL_FLOAT_FIELD_NUMBER: builtins.int
    VAL_INT_FIELD_NUMBER: builtins.int
    VAL_NULL_FIELD_NUMBER: builtins.int
    VAL_STR_ARRAY_FIELD_NUMBER: builtins.int
    VAL_INT_ARRAY_FIELD_NUMBER: builtins.int
    VAL_FLOAT_ARRAY_FIELD_NUMBER: builtins.int
    VAL_DOUBLE_FIELD_NUMBER: builtins.int
    VAL_DOUBLE_ARRAY_FIELD_NUMBER: builtins.int
    is_null: builtins.bool
    """true if the value is null"""
    val_bool: builtins.bool
    val_str: builtins.str
    val_float: builtins.float
    """deprecated, use val_double instead"""
    val_int: builtins.int
    val_null: builtins.bool
    """set to true if value is null"""
    val_double: builtins.float
    @property
    def val_str_array(self) -> global___StrArray: ...
    @property
    def val_int_array(self) -> global___IntArray: ...
    @property
    def val_float_array(self) -> global___FloatArray:
        """deprecated, use val_double_array instead"""

    @property
    def val_double_array(self) -> global___DoubleArray: ...
    def __init__(
        self,
        *,
        is_null: builtins.bool = ...,
        val_bool: builtins.bool = ...,
        val_str: builtins.str = ...,
        val_float: builtins.float = ...,
        val_int: builtins.int = ...,
        val_null: builtins.bool = ...,
        val_str_array: global___StrArray | None = ...,
        val_int_array: global___IntArray | None = ...,
        val_float_array: global___FloatArray | None = ...,
        val_double: builtins.float = ...,
        val_double_array: global___DoubleArray | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["val_bool", b"val_bool", "val_double", b"val_double", "val_double_array", b"val_double_array", "val_float", b"val_float", "val_float_array", b"val_float_array", "val_int", b"val_int", "val_int_array", b"val_int_array", "val_null", b"val_null", "val_str", b"val_str", "val_str_array", b"val_str_array", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["is_null", b"is_null", "val_bool", b"val_bool", "val_double", b"val_double", "val_double_array", b"val_double_array", "val_float", b"val_float", "val_float_array", b"val_float_array", "val_int", b"val_int", "val_int_array", b"val_int_array", "val_null", b"val_null", "val_str", b"val_str", "val_str_array", b"val_str_array", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["val_bool", "val_str", "val_float", "val_int", "val_null", "val_str_array", "val_int_array", "val_float_array", "val_double", "val_double_array"] | None: ...

global___AttributeValue = AttributeValue

@typing.final
class AttributeAggregation(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AGGREGATE_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    EXTRAPOLATION_MODE_FIELD_NUMBER: builtins.int
    aggregate: global___Function.ValueType
    label: builtins.str
    extrapolation_mode: global___ExtrapolationMode.ValueType
    @property
    def key(self) -> global___AttributeKey: ...
    def __init__(
        self,
        *,
        aggregate: global___Function.ValueType = ...,
        key: global___AttributeKey | None = ...,
        label: builtins.str = ...,
        extrapolation_mode: global___ExtrapolationMode.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggregate", b"aggregate", "extrapolation_mode", b"extrapolation_mode", "key", b"key", "label", b"label"]) -> None: ...

global___AttributeAggregation = AttributeAggregation
