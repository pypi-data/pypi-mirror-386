"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sentry_protos.snuba.v1.request_common_pb2
import sentry_protos.snuba.v1.trace_item_attribute_pb2
import sentry_protos.snuba.v1.trace_item_filter_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TraceAttribute(google.protobuf.message.Message):
    """TraceAttribute represents the attribute of a trace."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Key:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _KeyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[TraceAttribute._Key.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        KEY_UNSPECIFIED: TraceAttribute._Key.ValueType  # 0
        KEY_TRACE_ID: TraceAttribute._Key.ValueType  # 1
        KEY_START_TIMESTAMP: TraceAttribute._Key.ValueType  # 2
        """KEY_START_TIMESTAMP will return the earliest timestamp seen in the trace."""
        KEY_ROOT_SPAN_NAME: TraceAttribute._Key.ValueType  # 3
        """KEY_ROOT_SPAN_NAME will return the name of the root (segment) span of
        the trace.
        """
        KEY_TOTAL_ITEM_COUNT: TraceAttribute._Key.ValueType  # 4
        """KEY_TOTAL_ITEM_COUNT will return the count of all the items in a trace,
        regardless of the conditions applied.
        """
        KEY_FILTERED_ITEM_COUNT: TraceAttribute._Key.ValueType  # 5
        """KEY_FILTERED_ITEM_COUNT will return the count of items where the filters
        apply.
        For example, in a trace with 5 items (1 http.server span, 4 db spans),
        if we query for traces with span.op == "db", this will return 4.
        """
        KEY_ROOT_SPAN_DURATION_MS: TraceAttribute._Key.ValueType  # 6
        """KEY_ROOT_SPAN_DURATION_MS will return the duration of the root span in
        milliseconds.
        """
        KEY_ROOT_SPAN_PROJECT_ID: TraceAttribute._Key.ValueType  # 7
        """KEY_ROOT_SPAN_PROJECT_ID returns the project ID associated with the root
        span.
        """
        KEY_EARLIEST_SPAN_NAME: TraceAttribute._Key.ValueType  # 8
        """KEY_EARLIEST_SPAN_NAME returns the name of the earliest span of a trace,
        regardless if it's a root span or not
        """
        KEY_EARLIEST_FRONTEND_SPAN: TraceAttribute._Key.ValueType  # 9
        """KEY_EARLIEST_FRONTEND_SPAN returns the name of the earliest span emitted
        by the frontend (for example, span op being `pageload` or `navigation`).
        """
        KEY_END_TIMESTAMP: TraceAttribute._Key.ValueType  # 10
        """KEY_END_TIMESTAMP will return the latest timestamp seen in the trace."""
        KEY_EARLIEST_SPAN_PROJECT_ID: TraceAttribute._Key.ValueType  # 11
        """KEY_EARLIEST_SPAN_PROJECT_ID returns the project ID associated with the earliest span."""
        KEY_EARLIEST_SPAN_DURATION_MS: TraceAttribute._Key.ValueType  # 12
        """KEY_EARLIEST_SPAN_DURATION_MS will return the duration of the earliest span in milliseconds."""
        KEY_EARLIEST_FRONTEND_SPAN_PROJECT_ID: TraceAttribute._Key.ValueType  # 13
        """KEY_EARLIEST_FRONTEND_SPAN_PROJECT_ID returns the project ID associated with the earliest frontend span."""
        KEY_EARLIEST_FRONTEND_SPAN_DURATION_MS: TraceAttribute._Key.ValueType  # 14
        """KEY_EARLIEST_FRONTEND_SPAN_DURATION_MS will return the duration of the earliest frontend span in milliseconds."""

    class Key(_Key, metaclass=_KeyEnumTypeWrapper):
        """Key lists the available trace attribute keys you can query."""

    KEY_UNSPECIFIED: TraceAttribute.Key.ValueType  # 0
    KEY_TRACE_ID: TraceAttribute.Key.ValueType  # 1
    KEY_START_TIMESTAMP: TraceAttribute.Key.ValueType  # 2
    """KEY_START_TIMESTAMP will return the earliest timestamp seen in the trace."""
    KEY_ROOT_SPAN_NAME: TraceAttribute.Key.ValueType  # 3
    """KEY_ROOT_SPAN_NAME will return the name of the root (segment) span of
    the trace.
    """
    KEY_TOTAL_ITEM_COUNT: TraceAttribute.Key.ValueType  # 4
    """KEY_TOTAL_ITEM_COUNT will return the count of all the items in a trace,
    regardless of the conditions applied.
    """
    KEY_FILTERED_ITEM_COUNT: TraceAttribute.Key.ValueType  # 5
    """KEY_FILTERED_ITEM_COUNT will return the count of items where the filters
    apply.
    For example, in a trace with 5 items (1 http.server span, 4 db spans),
    if we query for traces with span.op == "db", this will return 4.
    """
    KEY_ROOT_SPAN_DURATION_MS: TraceAttribute.Key.ValueType  # 6
    """KEY_ROOT_SPAN_DURATION_MS will return the duration of the root span in
    milliseconds.
    """
    KEY_ROOT_SPAN_PROJECT_ID: TraceAttribute.Key.ValueType  # 7
    """KEY_ROOT_SPAN_PROJECT_ID returns the project ID associated with the root
    span.
    """
    KEY_EARLIEST_SPAN_NAME: TraceAttribute.Key.ValueType  # 8
    """KEY_EARLIEST_SPAN_NAME returns the name of the earliest span of a trace,
    regardless if it's a root span or not
    """
    KEY_EARLIEST_FRONTEND_SPAN: TraceAttribute.Key.ValueType  # 9
    """KEY_EARLIEST_FRONTEND_SPAN returns the name of the earliest span emitted
    by the frontend (for example, span op being `pageload` or `navigation`).
    """
    KEY_END_TIMESTAMP: TraceAttribute.Key.ValueType  # 10
    """KEY_END_TIMESTAMP will return the latest timestamp seen in the trace."""
    KEY_EARLIEST_SPAN_PROJECT_ID: TraceAttribute.Key.ValueType  # 11
    """KEY_EARLIEST_SPAN_PROJECT_ID returns the project ID associated with the earliest span."""
    KEY_EARLIEST_SPAN_DURATION_MS: TraceAttribute.Key.ValueType  # 12
    """KEY_EARLIEST_SPAN_DURATION_MS will return the duration of the earliest span in milliseconds."""
    KEY_EARLIEST_FRONTEND_SPAN_PROJECT_ID: TraceAttribute.Key.ValueType  # 13
    """KEY_EARLIEST_FRONTEND_SPAN_PROJECT_ID returns the project ID associated with the earliest frontend span."""
    KEY_EARLIEST_FRONTEND_SPAN_DURATION_MS: TraceAttribute.Key.ValueType  # 14
    """KEY_EARLIEST_FRONTEND_SPAN_DURATION_MS will return the duration of the earliest frontend span in milliseconds."""

    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    key: global___TraceAttribute.Key.ValueType
    type: sentry_protos.snuba.v1.trace_item_attribute_pb2.AttributeKey.Type.ValueType
    """AttributeKey.Type will specify the type of the attribute we return.
    It does not need to be sent when requesting an attribute.
    """
    @property
    def value(self) -> sentry_protos.snuba.v1.trace_item_attribute_pb2.AttributeValue: ...
    def __init__(
        self,
        *,
        key: global___TraceAttribute.Key.ValueType = ...,
        value: sentry_protos.snuba.v1.trace_item_attribute_pb2.AttributeValue | None = ...,
        type: sentry_protos.snuba.v1.trace_item_attribute_pb2.AttributeKey.Type.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "type", b"type", "value", b"value"]) -> None: ...

global___TraceAttribute = TraceAttribute

@typing.final
class GetTracesRequest(google.protobuf.message.Message):
    """GetTracesRequest lets you query traces with various attributes."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class OrderBy(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        DESCENDING_FIELD_NUMBER: builtins.int
        key: global___TraceAttribute.Key.ValueType
        descending: builtins.bool
        def __init__(
            self,
            *,
            key: global___TraceAttribute.Key.ValueType = ...,
            descending: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["descending", b"descending", "key", b"key"]) -> None: ...

    @typing.final
    class TraceFilter(google.protobuf.message.Message):
        """TraceFilter specifies conditions to apply on the items contained in a trace."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ITEM_NAME_FIELD_NUMBER: builtins.int
        FILTER_FIELD_NUMBER: builtins.int
        ITEM_TYPE_FIELD_NUMBER: builtins.int
        item_name: sentry_protos.snuba.v1.request_common_pb2.TraceItemName.ValueType
        """DEPRECATED: use item_type"""
        item_type: sentry_protos.snuba.v1.request_common_pb2.TraceItemType.ValueType
        """the item type we will apply the filter condition on."""
        @property
        def filter(self) -> sentry_protos.snuba.v1.trace_item_filter_pb2.TraceItemFilter: ...
        def __init__(
            self,
            *,
            item_name: sentry_protos.snuba.v1.request_common_pb2.TraceItemName.ValueType = ...,
            filter: sentry_protos.snuba.v1.trace_item_filter_pb2.TraceItemFilter | None = ...,
            item_type: sentry_protos.snuba.v1.request_common_pb2.TraceItemType.ValueType = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["filter", b"filter", "item_name", b"item_name", "item_type", b"item_type"]) -> None: ...

    META_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    FILTERS_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    limit: builtins.int
    @property
    def meta(self) -> sentry_protos.snuba.v1.request_common_pb2.RequestMeta: ...
    @property
    def page_token(self) -> sentry_protos.snuba.v1.request_common_pb2.PageToken: ...
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetTracesRequest.TraceFilter]:
        """List of filters on items of the trace we'll use when querying."""

    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetTracesRequest.OrderBy]:
        """List of attributes we'd like to order by."""

    @property
    def attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TraceAttribute]:
        """List of attributes we want to query."""

    def __init__(
        self,
        *,
        meta: sentry_protos.snuba.v1.request_common_pb2.RequestMeta | None = ...,
        page_token: sentry_protos.snuba.v1.request_common_pb2.PageToken | None = ...,
        limit: builtins.int = ...,
        filters: collections.abc.Iterable[global___GetTracesRequest.TraceFilter] | None = ...,
        order_by: collections.abc.Iterable[global___GetTracesRequest.OrderBy] | None = ...,
        attributes: collections.abc.Iterable[global___TraceAttribute] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["meta", b"meta", "page_token", b"page_token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attributes", b"attributes", "filters", b"filters", "limit", b"limit", "meta", b"meta", "order_by", b"order_by", "page_token", b"page_token"]) -> None: ...

global___GetTracesRequest = GetTracesRequest

@typing.final
class GetTracesResponse(google.protobuf.message.Message):
    """GetTracesResponse contains a list of traces returned by the request."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Trace(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ATTRIBUTES_FIELD_NUMBER: builtins.int
        @property
        def attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TraceAttribute]:
            """List of attributes queried."""

        def __init__(
            self,
            *,
            attributes: collections.abc.Iterable[global___TraceAttribute] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["attributes", b"attributes"]) -> None: ...

    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    META_FIELD_NUMBER: builtins.int
    TRACES_FIELD_NUMBER: builtins.int
    @property
    def page_token(self) -> sentry_protos.snuba.v1.request_common_pb2.PageToken: ...
    @property
    def meta(self) -> sentry_protos.snuba.v1.request_common_pb2.ResponseMeta: ...
    @property
    def traces(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetTracesResponse.Trace]:
        """List of traces matching conditions."""

    def __init__(
        self,
        *,
        page_token: sentry_protos.snuba.v1.request_common_pb2.PageToken | None = ...,
        meta: sentry_protos.snuba.v1.request_common_pb2.ResponseMeta | None = ...,
        traces: collections.abc.Iterable[global___GetTracesResponse.Trace] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["meta", b"meta", "page_token", b"page_token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["meta", b"meta", "page_token", b"page_token", "traces", b"traces"]) -> None: ...

global___GetTracesResponse = GetTracesResponse
