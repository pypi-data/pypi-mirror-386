[project]
name = "fastapi-injectable"
version = "1.4.3"
description = "Allow you to painlessly use dependency injection mechanism (`Depends`) of FastAPI outside the FastAPI routes"
authors = [{ name = "Jasper Sui", email = "suiyang03@gmail.com" }]
requires-python = ">=3.10"
readme = "README.md"
license = "MIT"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Free Threading :: 3 - Stable",
    "Framework :: FastAPI",
    "License :: OSI Approved :: MIT License",
]
dependencies = ["fastapi>=0.112.4,<1.0.0"]

[project.urls]
Homepage = "https://github.com/JasperSui/fastapi-injectable"
Repository = "https://github.com/JasperSui/fastapi-injectable"
Documentation = "https://fastapi-injectable.readthedocs.io"
Changelog = "https://github.com/JasperSui/fastapi-injectable/releases"

[dependency-groups]
dev = [
    "nox>=2025.05.01",
    "Pygments>=2.18.0",
    "ruff>=0.8.3,<0.9",
    "mypy>=1.13.0,<2",
    "pytest>=8.3.2,<9",
    "pytest-asyncio>=1.2.0,<2",
    "sphinx>=8.1.3",
    "sphinx-autobuild>=2024.10.3,<2025",
    "myst-parser>=4.0.0,<5",
    "ipython>=8.30.0,<9",
    "ipdb>=0.13.13,<0.14",
    "furo>=2024.8.6,<2025",
    "coverage[toml]>=7.6.9,<8",
    "httpx>=0.28.1,<0.29",
    "pre-commit>=4.0.0,<5",
    "pre-commit-hooks>=5.0.0,<6",
]

[tool.hatch.build.targets.sdist]
include = ["src/fastapi_injectable"]

[tool.hatch.build.targets.wheel]
include = ["src/fastapi_injectable"]

[tool.hatch.build.targets.wheel.sources]
"src/fastapi_injectable" = "fastapi_injectable"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
required-version = ">=0.5.0"

[tool.ruff]
lint.ignore = [
    "EXE002",

    # Docstring rules ignore
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",

    # Allow TODOs
    "FIX002",

    # For convenience
    "G004",

    # Avoid conflicts with ruff formatter
    "COM812",
    "ISC001",
]
lint.select = ["ALL"]
lint.fixable = ["ALL"]
target-version = "py310"
exclude = [".git", ".mypy_cache", ".ruff_cache"]
line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends"]

[tool.ruff.lint.extend-per-file-ignores]
"test/**/*.py" = ["S101", "ARG", "PLR2004", "FBT", "SLF001"]

[tool.mypy]
strict = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
warn_return_any = true
strict_equality = true
pretty = true
show_column_numbers = true
disallow_untyped_decorators = false
ignore_missing_imports = true
implicit_reexport = true
show_error_codes = true
show_error_context = true
plugins = ["fastapi_injectable.mypy"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["test", "*/test"]

[tool.coverage.run]
parallel = true
branch = true
source = ["src"]
omit = [
    "src/fastapi_injectable/mypy.py", # The mypy plugin is fragile
]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "except RuntimeError:",
    "def set_original_func",
    "@overload",
]
omit = ["example/*"]
