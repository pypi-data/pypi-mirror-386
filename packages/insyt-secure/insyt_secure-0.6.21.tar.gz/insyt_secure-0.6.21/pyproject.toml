[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "insyt-secure"
version = "0.6.21"
description = "A proprietary service for secure database and API interactions"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Proprietary"}
authors = [
    {name = "Insyt.co", email = "support@insyt.co"}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent"
]
dependencies = [
    # Core dependencies
    "paho-mqtt==1.6.1",
    "requests==2.31.0",
    "python-json-logger==2.0.7",
    "httpx==0.25.1",
    "tenacity==8.2.3",
    "backoff==2.2.1",
    "python-dateutil==2.8.2",
    "pytz==2023.3",
    "protobuf>=3.19.5,<6.0.0dev",
    
    # Core ML & text processing (minimum set needed by all)
    "numpy==2.2.3",
    "pandas==2.2.3", 
    "scipy==1.15.2",
    "scikit-learn==1.6.1",
    "rapidfuzz==3.5.2",
    "statsmodels==0.14.4", # Advanced data science libraries
    "sympy==1.12",
    "polars==0.19.12", 
    "scikit-survival==0.24.0",
    "featuretools==1.27.0",

    "numexpr>=2.8.7",
    "bottleneck>=1.3.7",
    "pyarrow>=14.0.1",
    "orjson>=3.9.10",
    "thriftpy2>=0.4.16",
    # "grpcio-tools>=1.71.0",
    # Use an older version of grpcio-tools compatible with protobuf < 5.0
    "grpcio-tools>=1.59.0",
    
    # Web interface and audit logging
    "flask>=3.0.0",
    "werkzeug>=3.0.0",
    "bcrypt>=4.0.0",
    "waitress>=2.1.0",  # Production WSGI server
    "cryptography>=41.0.0",  # For environment variable encryption
]

# Register the command-line entry point
[project.scripts]
insyt-secure = "insyt_secure.main:run_main"
insyt-audit-web = "insyt_secure.web.run_server:main"

[project.optional-dependencies]



# Database connectors with native drivers
rdbms = [
    # SQL
    "asyncpg>=0.29.0",     # Fast PostgreSQL
    "pg8000==1.29.4",      # Pure Python PostgreSQL (backup)
    "psycopg2-binary==2.9.10",
    "aiomysql>=0.2.0",     # Async MySQL
    "pymysql==1.1.0",      # Pure Python MySQL (backup)
    "mysql-connector-python>=8.0.31",  # Official MySQL connector (pure Python)
    "sqlalchemy==2.0.23",
    "alembic==1.12.1",
    "oracledb>=1.4.1",     # Oracle
    "pymssql>=2.2.7",      # MS SQL Server
    "pyodbc>=4.0.39",      # Alternative MS SQL and ODBC
    "clickhouse-driver>=0.2.6", # ClickHouse
    "snowflake-connector-python>=3.5.0",
    "duckdb>=0.9.1",
]

postgres = [
    "asyncpg>=0.29.0",     # Fast PostgreSQL
    "pg8000==1.29.4",      # Pure Python PostgreSQL (backup)
    "psycopg2-binary==2.9.10",
]

mysql = [
    "aiomysql>=0.2.0",     # Async MySQL
    "pymysql==1.1.0",      # Pure Python MySQL (backup)
    "mysql-connector-python>=8.0.31",  # Official MySQL connector (pure Python)
]

mssql = [
    "pymssql>=2.2.7",      # MS SQL Server
]

oracle = [
    "oracledb>=1.4.1",     # Oracle
]

clickhouse = [
    "clickhouse-driver>=0.2.6", # ClickHouse
]

snowflake = [
    "snowflake-connector-python>=3.5.0",
]

duckdb = [
    "duckdb>=0.9.1",
]







nosql = [ 
    # NoSQL 
    "pymongo==4.6.0",
    "motor>=3.3.2",        # Async MongoDB
    "redis==5.0.1",
    "cassandra-driver==3.28.0",
    "scylla-driver==3.26.3",
    "neo4j==5.14.1",
    "elasticsearch==8.11.0",
    "couchdb==1.2.0",
    "happybase==1.2.0",
    "pysolr==3.9.0",
]

mongodb = [
    "pymongo==4.6.0",
    "motor>=3.3.2",        # Async MongoDB
]

redis = [
    "redis==5.0.1",
]

cassandra = [
    "cassandra-driver==3.28.0",
]

neo4j = [
    "neo4j==5.14.1",
]

elasticsearch = [
    "elasticsearch==8.11.0",
]

couchdb = [
    "couchdb==1.2.0",
]

happybase = [
    "happybase==1.2.0",
]

pysolr = [
    "pysolr==3.9.0",
]



vector = [   
    # Vector DBs
    "pinecone-client==2.2.4",
    "qdrant-client==1.13.3",
    "milvus==2.2.16",
    "weaviate-client==3.24.1",
    "pyvespa==0.36.0",
    "chromadb>=0.4.17",
    "faiss-cpu>=1.7.4",    # Facebook AI Similarity Search
]

pinecone = [
    "pinecone-client==2.2.4",
]

qdrant = [
    "qdrant-client==1.13.3",
]

milvus = [
    "milvus==2.2.16",
]

weaviate = [
    "weaviate-client==3.24.1",
]

pyvespa = [
    "pyvespa==0.36.0",
]

chroma = [
    "chromadb>=0.4.17",
]

faiss = [
    "faiss-cpu>=1.7.4",    # Facebook AI Similarity Search
]




# Cloud services
cloud = [
    
    "boto3==1.33.6",
    "google-cloud-storage==2.13.0", 
    "google-cloud-bigquery==3.11.4",
    "google-cloud-firestore==2.13.1",
    "azure-cosmos==4.5.1",
    "azure-storage-blob==12.19.0",
    "azure-data-tables==12.4.4",
]

aws = [
    "boto3==1.33.6",
    "google-cloud-storage==2.13.0", 
    "google-cloud-bigquery==3.11.4",
    "google-cloud-firestore==2.13.1",
]

azure = [
    "azure-cosmos==4.5.1",
    "azure-storage-blob==12.19.0",
    "azure-data-tables==12.4.4",
]




# Messaging systems with native drivers
messaging = [
    "confluent-kafka>=2.3.0", # Apache Kafka
    "pulsar-client>=3.6.1",   # Apache Pulsar
    "pika==1.3.1",            # RabbitMQ
    "nats-py==2.6.0",
    "stomp.py==8.1.0",
    "google-cloud-pubsub==2.18.4",
]

kafka = [
    "confluent-kafka>=2.3.0", # Apache Kafka
]

pulsar = [
    "pulsar-client>=3.6.1",   # Apache Pulsar
]   

rabbitmq = [
    "pika==1.3.1",            # RabbitMQ
]





# Complete installation (without performance extensions)
all = [
    "insyt-secure[rdbms,nosql,vector,cloud,messaging]"
]

# Complete installation with performance libraries
all-performance = [
    "insyt-secure[all,performance]"
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
insyt_secure = ["web/templates/*.html"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?\$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.coverage.run]
source = ["insyt_secure"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]