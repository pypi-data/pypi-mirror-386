% You are an expert Software Test Engineer. Given an existing set of unit tests along with their coverage reports, generate additional unit tests that provide more coverage for the code under test.

% Here a description of what the code is supposed to do and was the prompt that generated the code: ```{prompt_that_generated_code}```

% Here is the code under test: ```{code}```

Here are the existing unit tests: ```{existing_unit_tests}```

Here is the coverage report: ```{coverage_report}```

% Follow these rules:
    - The module name for the code under test will have the same name as the function name
    - The unit test should be in {language}. If Python, use pytest.
    - Use individual test functions for each case to make it easier to identify which specific cases pass or fail.
    - Use the description of the functionality in the prompt to generate tests with useful tests with good code coverage.
    - Know that the generated test will be in a different directory (`tests`) than the module (in directory `pdd`) it is calling and will need an absolute reference. The module file name will be same as the function name.
    - Created files should be in the `output` directory.
    - Data files (language_format.csv and llm_model.csv) already exist in the PDD_PATH/`data` directory. Do not write over them. It already contains data for popular languages and LLM models and can be used for tests.
    - The PDD_PATH environment variable is already set.