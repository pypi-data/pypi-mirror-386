from logging import Logger

from . import helpers
from .sc_settings import Settings
from .sc_types import {{ data.function.return_types|sort()|join(', ') }}


def {{data.function.id}}(
    user_log: Logger,
    settings: Settings
):
    """
    TODO: a brief description of what this function does
    {# TODO: use the first line to dictate the function description in the manifest #}
    """
    user_log.info("Getting '%s' from '%s'", {{data.function.return_types[0]}}.__name__, settings.get("url"))

    # Here we create an example item to yield
    example_type = {{data.function.return_types[0]}}({"id": "1", "name": "Item 1"})

    yield example_type

    ############################################################
    ## TODO: Add code here to connect to the third party,
    ## retrieve the assets and for each asset yield an item with its content

    ## We set and keep track of the current page number
    # current_page = 1

    ## Instantiate the {{data.client_prefix}}Client
    # client = helpers.{{data.client_prefix}}Client(user_log, settings)

    # while True:

    #     # Get some assets from the client
    #     r = client.get_assets(current_page)

    #     data = r.get("data", [])

    #     if data:

    #         user_log.info("Processing %d items from page %d", len(data), current_page)

    #         # For each asset in the response, yield a {{data.function.return_types[0]}} type to ingest
    #         for asset in data:

    #             yield {{data.function.return_types[0]}}(asset)

    #     # If this is the last page, break out
    #     # Otherwise, set the next page number to fetch
    #     if r.get("page") == r.get("total_pages"):
    #         user_log.debug("This is a debug log. We have reached the last page: %d", current_page)
    #         break
    #     else:
    #         next_page = current_page + 1
    #         user_log.debug("This is a debug log. Moving to the next page: %d", next_page)
    #         current_page = next_page

    ############################################################
