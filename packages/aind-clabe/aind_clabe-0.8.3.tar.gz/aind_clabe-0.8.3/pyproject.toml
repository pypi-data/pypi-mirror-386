[build-system]
requires = ["uv_build>=0.8.22"]
build-backend = "uv_build"

[project]
name = "aind-clabe"
description = "A library for a minimal framework that can be used to build experimental interfaces."
authors = [
    { name = "Bruno Cruz", email = "bruno.cruz@alleninstitute.org" }
]
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.11"
version = "0.8.3"
readme = {file = "README.md", content-type = "text/markdown"}

classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: Microsoft :: Windows"
]

dependencies = [
    "pydantic>=2.7",
    "pydantic-settings",
    "gitpython",
    "semver",
    "rich",
    "aind_behavior_services < 1",
]

[project.urls]
Documentation = "https://allenneuraldynamics.github.io/clabe/"
Repository = "https://github.com/AllenNeuralDynamics/clabe/"
Issues = "https://github.com/AllenNeuralDynamics/clabe/issues"
Changelog = "https://github.com/AllenNeuralDynamics/clabe/releases"

[project.optional-dependencies]
aind-services = [
    "aind-data-schema",
    "ms-active-directory",
    "aind-data-transfer-service",
    "cryptography",
    "winkerberos; sys_platform == 'win32'",
    "ldap3; sys_platform == 'win32'",
    "msal; sys_platform == 'win32'",
    "requests",
    "pyyaml",
    "pykeepass",
]

[dependency-groups]

dev = [
    "ruff",
    "codespell",
    "coverage",
    'pytest',
    'pytest-cov',
    'interrogate',
    "aind-clabe[aind-services]",
]

docs = [
    "aind-clabe[aind-services]",
    'mkdocs',
    'mkdocs-material',
    'mkdocstrings[python]',
    'pymdown-extensions',
    'ruff',
]

[tool.uv]
default-groups = ['dev']

[tool.uv.build-backend]
module-name = "clabe"

[tool.ruff]
line-length = 120
target-version = "py311"
exclude = ["tests/assets/*"]

[tool.ruff.lint]
extend-select = ["Q", "RUF100", "C90", "I"]
extend-ignore = []
mccabe = { max-complexity = 14 }
pydocstyle = { convention = "google" }

[tool.codespell]
skip = '.git,*.pdf,*.svg,./bonsai,*.bonsai,./docs/_build,uv.lock'
ignore-words-list = "nd, assertIn"

[tool.pytest.ini_options]
addopts = "--strict-markers --tb=short --cov=src --cov-report=term-missing --ignore=tests/assets"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]


[tool.interrogate]
ignore-init-method = true
ignore-magic = true
ignore_module = true
ignore_nested_functions=true
ignore_overloaded_functions=true
ignore-private = true
fail-under = 100
exclude = ["__init__.py", "tests", "docs", "build", "setup.py", "examples", "site"]
