[tool.poetry]
name = "cmem-cmemc"
version = "25.5.0rc1"
description = "Command line client for eccenca Corporate Memory"
license = "Apache-2.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Customer Service",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Database", "Topic :: Utilities",
    "Topic :: Utilities"
    ]
homepage = "https://eccenca.com/go/cmemc"
authors = ["eccenca <cmempy-developer@eccenca.com>", "Sebastian Tramp <sebastian.tramp@eccenca.com>"]
readme = "README-public.md"

[tool.poetry.dependencies]
python = "^3.10"
beautifulsoup4 = "^4.13.3"
certifi = ">=2024.2.2"
click = "^8.3.0"
click-didyoumean = "^0.3.1"
click-help-colors = "^0.9.4"
cmem-cmempy = "==25.4.0"
# cmem-cmempy = { path = "cmempy", develop = true }
configparser = "^7.2.0"
jinja2 = "^3.1.6"
junit-xml = "^1.9"
natsort = "^8.4.0"
packaging = "^24.2"
prometheus-client = "^0.21.1"
pygments = "^2.19.1"
pyjwt = "^2.10.1"
python-dateutil = "^2.9.0.post0"
requests = "^2.32.3"
rich = "^14.0.0"
six = "^1.17.0"
smart-open = "^7.1.0"
timeago = "^1.0.16"
treelib = "^1.7.1"
urllib3 = "^2.3.0"

[tool.poetry.scripts]
cmemc = 'cmem_cmemc.cli:main'

[tool.poetry.group.dev.dependencies]
genbadge = {extras = ["coverage"], version = "^1.1.1"}
mypy = "1.15.0"
pip = "^25"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
pytest-dotenv = "^0.5.2"
pytest-html = "^4.1.1"
pytest-memray = { version = "^1.7.0",  markers = "platform_system != 'Windows'" }
pytest-mock = "^3.14.1"
requests-mock = "^1.12.1"
ruff = "^0.7.4"
safety = "^1.10.3"
semver = "^3.0.4"
types-python-dateutil = "^2.9.0.20240316"
types-requests = "^2.32.0.20241016"
types-six = "^1.16.21.20240425"

[build-system]
requires = ["poetry-core>=1.2.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
dirty = true

[tool.mypy]
warn_return_any = true
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = ""

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.format]
line-ending = "lf" # Use `\n` line endings for all files

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN204",  # Missing return type annotation for special method `__init__`
    "COM812",  # missing-trailing-comma
    "D107",    # Missing docstring in __init__
    "D203",    # [*] 1 blank line required before class docstring
    "D211",    # No blank lines allowed before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D415",    # First line should end with a period, question mark, or exclamation point
    "EM",      # Exception texts - https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "FBT",     # The Boolean Trap - https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
    "FIX002",  # Allow to add TODO notes in the code
    "G004",    # Logging statement uses f-string
    "ISC001",  # single-line-implicit-string-concatenation
    "PD",      # opinionated linting for pandas code
    "S101",    # use of assert detected
    "TRY003",  # Avoid specifying long messages outside the exception class
    "UP017",   # We need compatibility 3.10 at the moment
]

