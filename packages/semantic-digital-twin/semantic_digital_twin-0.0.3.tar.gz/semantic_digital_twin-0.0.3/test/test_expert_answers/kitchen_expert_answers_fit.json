[
  "def get_value_for_world_views_of_type_handle(case: World) -> Union[set, list, Handle]:\n    \"\"\"Get possible value(s) for World.views of types list/set of Handle\"\"\"\n    return [Handle(b) for b in case.bodies if \"handle\" in b.name.lower()]\nreturn get_value_for_world_views_of_type_handle(case)",
  "return True",
  "def get_value_for_world_views_of_type_container(case: World) -> Union[set, Container, list]:\n    \"\"\"Get possible value(s) for World.views of types list/set of Container\"\"\"\n    prismatic_connections = [c for c in case.connections if c.type == JointType.PRISMATIC]\n    fixed_connections = [c for c in case.connections if c.type == JointType.FIXED]\n    children_of_prismatic_connections = [c.child for c in prismatic_connections]\n    handles = [v for v in case.views if type(v) is Handle]\n    fixed_connections_with_handle_child = [fc for fc in fixed_connections if fc.child in [h.body for h in handles]]\n    drawer_containers = set(children_of_prismatic_connections).intersection(\n        set([fc.parent for fc in fixed_connections_with_handle_child]))\n    return [Container(b) for b in drawer_containers]\nreturn get_value_for_world_views_of_type_container(case)",
  "return len([v for v in case.views if type(v) is Handle]) > 0",
  "def get_value_for_world_views_of_type_drawer(case: World) -> Union[set, list, Drawer]:\n    \"\"\"Get possible value(s) for World.views of types list/set of Drawer\"\"\"\n    handles = [v for v in case.views if type(v) is Handle]\n    containers = [v for v in case.views if type(v) is Container]\n    fixed_connections = [c for c in case.connections if\n                         c.type == JointType.FIXED and c.parent in [cont.body for cont in containers] and c.child in [\n                             h.body for h in handles]]\n    prismatic_connections = [c for c in case.connections if\n                             c.type == JointType.PRISMATIC and c.child in [cont.body for cont in containers]]\n    drawer_handle_connections = [fc for fc in fixed_connections if\n                                 fc.parent in [pc.child for pc in prismatic_connections]]\n    drawers = [Drawer([cont for cont in containers if dc.parent == cont.body][0],\n                      [h for h in handles if dc.child == h.body][0]) for dc in drawer_handle_connections]\n    return drawers\nreturn get_value_for_world_views_of_type_drawer(case)",
  "return len([v for v in case.views if type(v) is Handle]) > 0 and len([v for v in case.views if type(v) is Container]) > 0",
  "def get_value_for_world_views_of_type_cabinet(case: World) -> Union[set, Cabinet, list]:\n    \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n    drawers = [v for v in case.views if type(v) is Drawer]\n    prismatic_connections = [c for c in case.connections if\n                             c.type == JointType.PRISMATIC and c.child in [drawer.container.body for drawer in drawers]]\n    cabinet_container_bodies = [pc.parent for pc in prismatic_connections]\n    cabinets = []\n    for ccb in cabinet_container_bodies:\n        if ccb in [cabinet.container.body for cabinet in cabinets]:\n            continue\n        cc_prismatic_connections = [pc for pc in prismatic_connections if pc.parent is ccb]\n        cabinet_drawer_container_bodies = [pc.child for pc in cc_prismatic_connections]\n        cabinet_drawers = [d for d in drawers if d.container.body in cabinet_drawer_container_bodies]\n        cabinets.append(Cabinet(Container(ccb), cabinet_drawers))\n\n    return cabinets\nreturn get_value_for_world_views_of_type_cabinet(case)",
  "return len([v for v in case.views if type(v) is Drawer]) > 0"
]