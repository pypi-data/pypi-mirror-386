# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import (
    Column,
    ForeignKey,
    Integer,
    String,
    Float,
    Boolean,
    DateTime,
    Enum,
    JSON,
)
from sqlalchemy.orm import relationship, Mapped, mapped_column, DeclarativeBase
from typing_extensions import Optional, List, Type

import semantic_digital_twin.datastructures.prefixed_name
import semantic_digital_twin.orm.model
import semantic_digital_twin.robots.abstract_robot
import semantic_digital_twin.semantic_annotations.semantic_annotations
import semantic_digital_twin.spatial_types.spatial_types
import semantic_digital_twin.world
import semantic_digital_twin.world_description.connections
import semantic_digital_twin.world_description.degree_of_freedom
import semantic_digital_twin.world_description.geometry
import semantic_digital_twin.world_description.shape_collection
import semantic_digital_twin.world_description.world_entity
import trimesh.base


from ormatic.dao import DataAccessObject
from ormatic.custom_types import TypeType


class Base(DeclarativeBase):
    type_mappings = {
        Type: TypeType,
        trimesh.base.Trimesh: semantic_digital_twin.orm.model.TrimeshType,
    }


class HasDoorsDAO(
    Base,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.HasDoors
    ],
):
    __tablename__ = "HasDoorsDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    doors: Mapped[List[DoorDAO]] = relationship(
        "DoorDAO", foreign_keys="[DoorDAO.hasdoorsdao_doors_id]", post_update=True
    )


class ShapeDAO(
    Base, DataAccessObject[semantic_digital_twin.world_description.geometry.Shape]
):
    __tablename__ = "ShapeDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    polymorphic_type: Mapped[str] = mapped_column(String(255), nullable=False)

    origin_id: Mapped[int] = mapped_column(
        ForeignKey("TransformationMatrixMappingDAO.id", use_alter=True), nullable=True
    )
    color_id: Mapped[int] = mapped_column(
        ForeignKey("ColorDAO.id", use_alter=True), nullable=True
    )
    shapecollectiondao_shapes_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("ShapeCollectionDAO.id", use_alter=True), nullable=True
    )

    origin: Mapped[TransformationMatrixMappingDAO] = relationship(
        "TransformationMatrixMappingDAO",
        uselist=False,
        foreign_keys=[origin_id],
        post_update=True,
    )
    color: Mapped[ColorDAO] = relationship(
        "ColorDAO", uselist=False, foreign_keys=[color_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_on": "polymorphic_type",
        "polymorphic_identity": "ShapeDAO",
    }


class FieldOfViewDAO(
    Base, DataAccessObject[semantic_digital_twin.robots.abstract_robot.FieldOfView]
):
    __tablename__ = "FieldOfViewDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    vertical_angle: Mapped[float]
    horizontal_angle: Mapped[float]


class HasDrawersDAO(
    Base,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.HasDrawers
    ],
):
    __tablename__ = "HasDrawersDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    drawers: Mapped[List[DrawerDAO]] = relationship(
        "DrawerDAO",
        foreign_keys="[DrawerDAO.hasdrawersdao_drawers_id]",
        post_update=True,
    )


class WorldEntityDAO(
    Base,
    DataAccessObject[semantic_digital_twin.world_description.world_entity.WorldEntity],
):
    __tablename__ = "WorldEntityDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    polymorphic_type: Mapped[str] = mapped_column(String(255), nullable=False)

    name_id: Mapped[int] = mapped_column(
        ForeignKey("PrefixedNameDAO.id", use_alter=True), nullable=True
    )

    name: Mapped[PrefixedNameDAO] = relationship(
        "PrefixedNameDAO", uselist=False, foreign_keys=[name_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_on": "polymorphic_type",
        "polymorphic_identity": "WorldEntityDAO",
    }


class PrefixedNameDAO(
    Base,
    DataAccessObject[semantic_digital_twin.datastructures.prefixed_name.PrefixedName],
):
    __tablename__ = "PrefixedNameDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    name: Mapped[str] = mapped_column(String(255), nullable=False)
    prefix: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)


class QuaternionMappingDAO(
    Base, DataAccessObject[semantic_digital_twin.orm.model.QuaternionMapping]
):
    __tablename__ = "QuaternionMappingDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]
    w: Mapped[float]

    reference_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )

    reference_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[reference_frame_id],
        post_update=True,
    )


class Point3MappingDAO(
    Base, DataAccessObject[semantic_digital_twin.orm.model.Point3Mapping]
):
    __tablename__ = "Point3MappingDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]

    reference_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )

    reference_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[reference_frame_id],
        post_update=True,
    )


class RotationMatrixMappingDAO(
    Base, DataAccessObject[semantic_digital_twin.orm.model.RotationMatrixMapping]
):
    __tablename__ = "RotationMatrixMappingDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    rotation_id: Mapped[int] = mapped_column(
        ForeignKey("QuaternionMappingDAO.id", use_alter=True), nullable=True
    )
    reference_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )

    rotation: Mapped[QuaternionMappingDAO] = relationship(
        "QuaternionMappingDAO",
        uselist=False,
        foreign_keys=[rotation_id],
        post_update=True,
    )
    reference_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[reference_frame_id],
        post_update=True,
    )


class ScaleDAO(
    Base, DataAccessObject[semantic_digital_twin.world_description.geometry.Scale]
):
    __tablename__ = "ScaleDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]


class Vector3MappingDAO(
    Base, DataAccessObject[semantic_digital_twin.orm.model.Vector3Mapping]
):
    __tablename__ = "Vector3MappingDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]

    reference_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )

    reference_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[reference_frame_id],
        post_update=True,
    )


class ShapeCollectionDAO(
    Base,
    DataAccessObject[
        semantic_digital_twin.world_description.shape_collection.ShapeCollection
    ],
):
    __tablename__ = "ShapeCollectionDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    polymorphic_type: Mapped[str] = mapped_column(String(255), nullable=False)

    reference_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )

    shapes: Mapped[List[ShapeDAO]] = relationship(
        "ShapeDAO",
        foreign_keys="[ShapeDAO.shapecollectiondao_shapes_id]",
        post_update=True,
    )
    reference_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[reference_frame_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_on": "polymorphic_type",
        "polymorphic_identity": "ShapeCollectionDAO",
    }


class CollisionCheckingConfigDAO(
    Base,
    DataAccessObject[
        semantic_digital_twin.world_description.world_entity.CollisionCheckingConfig
    ],
):
    __tablename__ = "CollisionCheckingConfigDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    buffer_zone_distance: Mapped[Optional[float]]
    violated_distance: Mapped[float]
    disabled: Mapped[Optional[bool]]
    max_avoided_bodies: Mapped[int]


class TransformationMatrixMappingDAO(
    Base, DataAccessObject[semantic_digital_twin.orm.model.TransformationMatrixMapping]
):
    __tablename__ = "TransformationMatrixMappingDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    position_id: Mapped[int] = mapped_column(
        ForeignKey("Point3MappingDAO.id", use_alter=True), nullable=True
    )
    rotation_id: Mapped[int] = mapped_column(
        ForeignKey("QuaternionMappingDAO.id", use_alter=True), nullable=True
    )
    reference_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )
    child_frame_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )

    position: Mapped[Point3MappingDAO] = relationship(
        "Point3MappingDAO", uselist=False, foreign_keys=[position_id], post_update=True
    )
    rotation: Mapped[QuaternionMappingDAO] = relationship(
        "QuaternionMappingDAO",
        uselist=False,
        foreign_keys=[rotation_id],
        post_update=True,
    )
    reference_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[reference_frame_id],
        post_update=True,
    )
    child_frame: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[child_frame_id],
        post_update=True,
    )


class BoundingBoxDAO(
    Base, DataAccessObject[semantic_digital_twin.world_description.geometry.BoundingBox]
):
    __tablename__ = "BoundingBoxDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    min_x: Mapped[float]
    min_y: Mapped[float]
    min_z: Mapped[float]
    max_x: Mapped[float]
    max_y: Mapped[float]
    max_z: Mapped[float]

    origin_id: Mapped[int] = mapped_column(
        ForeignKey("TransformationMatrixMappingDAO.id", use_alter=True), nullable=True
    )
    boundingboxcollectiondao_shapes_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("BoundingBoxCollectionDAO.id", use_alter=True), nullable=True
    )

    origin: Mapped[TransformationMatrixMappingDAO] = relationship(
        "TransformationMatrixMappingDAO",
        uselist=False,
        foreign_keys=[origin_id],
        post_update=True,
    )


class ColorDAO(
    Base, DataAccessObject[semantic_digital_twin.world_description.geometry.Color]
):
    __tablename__ = "ColorDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    R: Mapped[float]
    G: Mapped[float]
    B: Mapped[float]
    A: Mapped[float]


class WorldMappingDAO(
    Base, DataAccessObject[semantic_digital_twin.orm.model.WorldMapping]
):
    __tablename__ = "WorldMappingDAO"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    name: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)

    kinematic_structure_entities: Mapped[List[KinematicStructureEntityDAO]] = (
        relationship(
            "KinematicStructureEntityDAO",
            foreign_keys="[KinematicStructureEntityDAO.worldmappingdao_kinematic_structure_entities_id]",
            post_update=True,
        )
    )
    connections: Mapped[List[ConnectionDAO]] = relationship(
        "ConnectionDAO",
        foreign_keys="[ConnectionDAO.worldmappingdao_connections_id]",
        post_update=True,
    )
    semantic_annotations: Mapped[List[SemanticAnnotationDAO]] = relationship(
        "SemanticAnnotationDAO",
        foreign_keys="[SemanticAnnotationDAO.worldmappingdao_semantic_annotations_id]",
        post_update=True,
    )
    degrees_of_freedom: Mapped[List[DegreeOfFreedomMappingDAO]] = relationship(
        "DegreeOfFreedomMappingDAO",
        foreign_keys="[DegreeOfFreedomMappingDAO.worldmappingdao_degrees_of_freedom_id]",
        post_update=True,
    )


class BoxDAO(
    ShapeDAO, DataAccessObject[semantic_digital_twin.world_description.geometry.Box]
):
    __tablename__ = "BoxDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ShapeDAO.id), primary_key=True)

    scale_id: Mapped[int] = mapped_column(
        ForeignKey("ScaleDAO.id", use_alter=True), nullable=True
    )

    scale: Mapped[ScaleDAO] = relationship(
        "ScaleDAO", uselist=False, foreign_keys=[scale_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "BoxDAO",
        "inherit_condition": id == ShapeDAO.id,
    }


class SphereDAO(
    ShapeDAO, DataAccessObject[semantic_digital_twin.world_description.geometry.Sphere]
):
    __tablename__ = "SphereDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ShapeDAO.id), primary_key=True)

    radius: Mapped[float]

    __mapper_args__ = {
        "polymorphic_identity": "SphereDAO",
        "inherit_condition": id == ShapeDAO.id,
    }


class CylinderDAO(
    ShapeDAO,
    DataAccessObject[semantic_digital_twin.world_description.geometry.Cylinder],
):
    __tablename__ = "CylinderDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ShapeDAO.id), primary_key=True)

    width: Mapped[float]
    height: Mapped[float]

    __mapper_args__ = {
        "polymorphic_identity": "CylinderDAO",
        "inherit_condition": id == ShapeDAO.id,
    }


class MeshDAO(
    ShapeDAO, DataAccessObject[semantic_digital_twin.world_description.geometry.Mesh]
):
    __tablename__ = "MeshDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ShapeDAO.id), primary_key=True)

    scale_id: Mapped[int] = mapped_column(
        ForeignKey("ScaleDAO.id", use_alter=True), nullable=True
    )

    scale: Mapped[ScaleDAO] = relationship(
        "ScaleDAO", uselist=False, foreign_keys=[scale_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "MeshDAO",
        "inherit_condition": id == ShapeDAO.id,
    }


class KinematicStructureEntityDAO(
    WorldEntityDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.world_entity.KinematicStructureEntity
    ],
):
    __tablename__ = "KinematicStructureEntityDAO"

    id: Mapped[int] = mapped_column(ForeignKey(WorldEntityDAO.id), primary_key=True)

    index: Mapped[Optional[int]]

    worldmappingdao_kinematic_structure_entities_id: Mapped[Optional[int]] = (
        mapped_column(ForeignKey("WorldMappingDAO.id", use_alter=True), nullable=True)
    )

    __mapper_args__ = {
        "polymorphic_identity": "KinematicStructureEntityDAO",
        "inherit_condition": id == WorldEntityDAO.id,
    }


class SemanticAnnotationDAO(
    WorldEntityDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.world_entity.SemanticAnnotation
    ],
):
    __tablename__ = "SemanticAnnotationDAO"

    id: Mapped[int] = mapped_column(ForeignKey(WorldEntityDAO.id), primary_key=True)

    worldmappingdao_semantic_annotations_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("WorldMappingDAO.id", use_alter=True), nullable=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "SemanticAnnotationDAO",
        "inherit_condition": id == WorldEntityDAO.id,
    }


class DegreeOfFreedomMappingDAO(
    WorldEntityDAO,
    DataAccessObject[semantic_digital_twin.orm.model.DegreeOfFreedomMapping],
):
    __tablename__ = "DegreeOfFreedomMappingDAO"

    id: Mapped[int] = mapped_column(ForeignKey(WorldEntityDAO.id), primary_key=True)

    lower_limits: Mapped[List[float]] = mapped_column(JSON, nullable=False)
    upper_limits: Mapped[List[float]] = mapped_column(JSON, nullable=False)

    worldmappingdao_degrees_of_freedom_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("WorldMappingDAO.id", use_alter=True), nullable=True
    )
    name_id: Mapped[int] = mapped_column(
        ForeignKey("PrefixedNameDAO.id", use_alter=True), nullable=True
    )

    name: Mapped[PrefixedNameDAO] = relationship(
        "PrefixedNameDAO", uselist=False, foreign_keys=[name_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DegreeOfFreedomMappingDAO",
        "inherit_condition": id == WorldEntityDAO.id,
    }


class ConnectionDAO(
    WorldEntityDAO,
    DataAccessObject[semantic_digital_twin.world_description.world_entity.Connection],
):
    __tablename__ = "ConnectionDAO"

    id: Mapped[int] = mapped_column(ForeignKey(WorldEntityDAO.id), primary_key=True)

    worldmappingdao_connections_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("WorldMappingDAO.id", use_alter=True), nullable=True
    )
    parent_id: Mapped[int] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )
    child_id: Mapped[int] = mapped_column(
        ForeignKey("KinematicStructureEntityDAO.id", use_alter=True), nullable=True
    )
    parent_T_connection_expression_id: Mapped[int] = mapped_column(
        ForeignKey("TransformationMatrixMappingDAO.id", use_alter=True), nullable=True
    )
    connection_T_child_expression_id: Mapped[int] = mapped_column(
        ForeignKey("TransformationMatrixMappingDAO.id", use_alter=True), nullable=True
    )

    parent: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[parent_id],
        post_update=True,
    )
    child: Mapped[KinematicStructureEntityDAO] = relationship(
        "KinematicStructureEntityDAO",
        uselist=False,
        foreign_keys=[child_id],
        post_update=True,
    )
    parent_T_connection_expression: Mapped[TransformationMatrixMappingDAO] = (
        relationship(
            "TransformationMatrixMappingDAO",
            uselist=False,
            foreign_keys=[parent_T_connection_expression_id],
            post_update=True,
        )
    )
    connection_T_child_expression: Mapped[TransformationMatrixMappingDAO] = (
        relationship(
            "TransformationMatrixMappingDAO",
            uselist=False,
            foreign_keys=[connection_T_child_expression_id],
            post_update=True,
        )
    )

    __mapper_args__ = {
        "polymorphic_identity": "ConnectionDAO",
        "inherit_condition": id == WorldEntityDAO.id,
    }


class BoundingBoxCollectionDAO(
    ShapeCollectionDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.shape_collection.BoundingBoxCollection
    ],
):
    __tablename__ = "BoundingBoxCollectionDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ShapeCollectionDAO.id), primary_key=True)

    shapes: Mapped[List[BoundingBoxDAO]] = relationship(
        "BoundingBoxDAO",
        foreign_keys="[BoundingBoxDAO.boundingboxcollectiondao_shapes_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "BoundingBoxCollectionDAO",
        "inherit_condition": id == ShapeCollectionDAO.id,
    }


class TriangleMeshDAO(
    MeshDAO,
    DataAccessObject[semantic_digital_twin.world_description.geometry.TriangleMesh],
):
    __tablename__ = "TriangleMeshDAO"

    id: Mapped[int] = mapped_column(ForeignKey(MeshDAO.id), primary_key=True)

    mesh: Mapped[Optional[semantic_digital_twin.orm.model.TrimeshType]] = mapped_column(
        semantic_digital_twin.orm.model.TrimeshType, nullable=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "TriangleMeshDAO",
        "inherit_condition": id == MeshDAO.id,
    }


class FileMeshDAO(
    MeshDAO, DataAccessObject[semantic_digital_twin.world_description.geometry.FileMesh]
):
    __tablename__ = "FileMeshDAO"

    id: Mapped[int] = mapped_column(ForeignKey(MeshDAO.id), primary_key=True)

    filename: Mapped[str] = mapped_column(String(255), nullable=False)

    __mapper_args__ = {
        "polymorphic_identity": "FileMeshDAO",
        "inherit_condition": id == MeshDAO.id,
    }


class RegionDAO(
    KinematicStructureEntityDAO,
    DataAccessObject[semantic_digital_twin.world_description.world_entity.Region],
):
    __tablename__ = "RegionDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(KinematicStructureEntityDAO.id), primary_key=True
    )

    area_id: Mapped[int] = mapped_column(
        ForeignKey("ShapeCollectionDAO.id", use_alter=True), nullable=True
    )

    area: Mapped[ShapeCollectionDAO] = relationship(
        "ShapeCollectionDAO", uselist=False, foreign_keys=[area_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "RegionDAO",
        "inherit_condition": id == KinematicStructureEntityDAO.id,
    }


class BodyDAO(
    KinematicStructureEntityDAO,
    DataAccessObject[semantic_digital_twin.world_description.world_entity.Body],
):
    __tablename__ = "BodyDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(KinematicStructureEntityDAO.id), primary_key=True
    )

    index: Mapped[Optional[int]]

    visual_id: Mapped[int] = mapped_column(
        ForeignKey("ShapeCollectionDAO.id", use_alter=True), nullable=True
    )
    collision_id: Mapped[int] = mapped_column(
        ForeignKey("ShapeCollectionDAO.id", use_alter=True), nullable=True
    )
    collision_config_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("CollisionCheckingConfigDAO.id", use_alter=True), nullable=True
    )
    temp_collision_config_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("CollisionCheckingConfigDAO.id", use_alter=True), nullable=True
    )

    visual: Mapped[ShapeCollectionDAO] = relationship(
        "ShapeCollectionDAO", uselist=False, foreign_keys=[visual_id], post_update=True
    )
    collision: Mapped[ShapeCollectionDAO] = relationship(
        "ShapeCollectionDAO",
        uselist=False,
        foreign_keys=[collision_id],
        post_update=True,
    )
    collision_config: Mapped[CollisionCheckingConfigDAO] = relationship(
        "CollisionCheckingConfigDAO",
        uselist=False,
        foreign_keys=[collision_config_id],
        post_update=True,
    )
    temp_collision_config: Mapped[CollisionCheckingConfigDAO] = relationship(
        "CollisionCheckingConfigDAO",
        uselist=False,
        foreign_keys=[temp_collision_config_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "BodyDAO",
        "inherit_condition": id == KinematicStructureEntityDAO.id,
    }


class ContainerDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Container
    ],
):
    __tablename__ = "ContainerDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ContainerDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class ComponentsDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Components
    ],
):
    __tablename__ = "ComponentsDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ComponentsDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class TableDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Table
    ],
):
    __tablename__ = "TableDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    top_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    top: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[top_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "TableDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class WallDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Wall
    ],
):
    __tablename__ = "WallDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )
    doors: Mapped[List[DoorDAO]] = relationship(
        "DoorDAO", foreign_keys="[DoorDAO.walldao_doors_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "WallDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class FurnitureDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Furniture
    ],
):
    __tablename__ = "FurnitureDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "FurnitureDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class HandleDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Handle
    ],
):
    __tablename__ = "HandleDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "HandleDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class RoomDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Room
    ],
):
    __tablename__ = "RoomDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    floor_id: Mapped[int] = mapped_column(
        ForeignKey("FloorDAO.id", use_alter=True), nullable=True
    )

    floor: Mapped[FloorDAO] = relationship(
        "FloorDAO", uselist=False, foreign_keys=[floor_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "RoomDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class SupportingSurfaceDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.SupportingSurface
    ],
):
    __tablename__ = "SupportingSurfaceDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    region_id: Mapped[int] = mapped_column(
        ForeignKey("RegionDAO.id", use_alter=True), nullable=True
    )

    region: Mapped[RegionDAO] = relationship(
        "RegionDAO", uselist=False, foreign_keys=[region_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "SupportingSurfaceDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class FridgeDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Fridge
    ],
):
    __tablename__ = "FridgeDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )
    door_id: Mapped[int] = mapped_column(
        ForeignKey("DoorDAO.id", use_alter=True), nullable=True
    )

    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )
    door: Mapped[DoorDAO] = relationship(
        "DoorDAO", uselist=False, foreign_keys=[door_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "FridgeDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class RootedSemanticAnnotationDAO(
    SemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.world_entity.RootedSemanticAnnotation
    ],
):
    __tablename__ = "RootedSemanticAnnotationDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticAnnotationDAO.id), primary_key=True
    )

    root_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    root: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[root_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "RootedSemanticAnnotationDAO",
        "inherit_condition": id == SemanticAnnotationDAO.id,
    }


class FixedConnectionDAO(
    ConnectionDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.FixedConnection
    ],
):
    __tablename__ = "FixedConnectionDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ConnectionDAO.id), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "FixedConnectionDAO",
        "inherit_condition": id == ConnectionDAO.id,
    }


class PassiveConnectionDAO(
    ConnectionDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.PassiveConnection
    ],
):
    __tablename__ = "PassiveConnectionDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ConnectionDAO.id), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "PassiveConnectionDAO",
        "inherit_condition": id == ConnectionDAO.id,
    }


class ActiveConnectionDAO(
    ConnectionDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.ActiveConnection
    ],
):
    __tablename__ = "ActiveConnectionDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ConnectionDAO.id), primary_key=True)

    frozen_for_collision_avoidance: Mapped[bool]

    __mapper_args__ = {
        "polymorphic_identity": "ActiveConnectionDAO",
        "inherit_condition": id == ConnectionDAO.id,
    }


class DrawerDAO(
    ComponentsDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Drawer
    ],
):
    __tablename__ = "DrawerDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ComponentsDAO.id), primary_key=True)

    hasdrawersdao_drawers_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("HasDrawersDAO.id", use_alter=True), nullable=True
    )
    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.id", use_alter=True), nullable=True
    )
    handle_id: Mapped[int] = mapped_column(
        ForeignKey("HandleDAO.id", use_alter=True), nullable=True
    )
    wardrobedao_drawers_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("WardrobeDAO.id", use_alter=True), nullable=True
    )
    cabinetdao_drawers_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("CabinetDAO.id", use_alter=True), nullable=True
    )
    dresserdao_drawers_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("DresserDAO.id", use_alter=True), nullable=True
    )

    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )
    handle: Mapped[HandleDAO] = relationship(
        "HandleDAO", uselist=False, foreign_keys=[handle_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DrawerDAO",
        "inherit_condition": id == ComponentsDAO.id,
    }


class EntryWayDAO(
    ComponentsDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.EntryWay
    ],
):
    __tablename__ = "EntryWayDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ComponentsDAO.id), primary_key=True)

    body_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[body_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "EntryWayDAO",
        "inherit_condition": id == ComponentsDAO.id,
    }


class WardrobeDAO(
    FurnitureDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Wardrobe
    ],
):
    __tablename__ = "WardrobeDAO"

    id: Mapped[int] = mapped_column(ForeignKey(FurnitureDAO.id), primary_key=True)

    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.id", use_alter=True), nullable=True
    )

    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )
    drawers: Mapped[List[DrawerDAO]] = relationship(
        "DrawerDAO", foreign_keys="[DrawerDAO.wardrobedao_drawers_id]", post_update=True
    )
    doors: Mapped[List[DoorDAO]] = relationship(
        "DoorDAO", foreign_keys="[DoorDAO.wardrobedao_doors_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "WardrobeDAO",
        "inherit_condition": id == FurnitureDAO.id,
    }


class CabinetDAO(
    FurnitureDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Cabinet
    ],
):
    __tablename__ = "CabinetDAO"

    id: Mapped[int] = mapped_column(ForeignKey(FurnitureDAO.id), primary_key=True)

    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.id", use_alter=True), nullable=True
    )

    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )
    drawers: Mapped[List[DrawerDAO]] = relationship(
        "DrawerDAO", foreign_keys="[DrawerDAO.cabinetdao_drawers_id]", post_update=True
    )
    doors: Mapped[List[DoorDAO]] = relationship(
        "DoorDAO", foreign_keys="[DoorDAO.cabinetdao_doors_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "CabinetDAO",
        "inherit_condition": id == FurnitureDAO.id,
    }


class DresserDAO(
    FurnitureDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Dresser
    ],
):
    __tablename__ = "DresserDAO"

    id: Mapped[int] = mapped_column(ForeignKey(FurnitureDAO.id), primary_key=True)

    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.id", use_alter=True), nullable=True
    )

    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )
    drawers: Mapped[List[DrawerDAO]] = relationship(
        "DrawerDAO", foreign_keys="[DrawerDAO.dresserdao_drawers_id]", post_update=True
    )
    doors: Mapped[List[DoorDAO]] = relationship(
        "DoorDAO", foreign_keys="[DoorDAO.dresserdao_doors_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DresserDAO",
        "inherit_condition": id == FurnitureDAO.id,
    }


class CupboardDAO(
    FurnitureDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Cupboard
    ],
):
    __tablename__ = "CupboardDAO"

    id: Mapped[int] = mapped_column(ForeignKey(FurnitureDAO.id), primary_key=True)

    container_id: Mapped[int] = mapped_column(
        ForeignKey("ContainerDAO.id", use_alter=True), nullable=True
    )

    container: Mapped[ContainerDAO] = relationship(
        "ContainerDAO", uselist=False, foreign_keys=[container_id], post_update=True
    )
    doors: Mapped[List[DoorDAO]] = relationship(
        "DoorDAO", foreign_keys="[DoorDAO.cupboarddao_doors_id]", post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "CupboardDAO",
        "inherit_condition": id == FurnitureDAO.id,
    }


class FloorDAO(
    SupportingSurfaceDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Floor
    ],
):
    __tablename__ = "FloorDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SupportingSurfaceDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "FloorDAO",
        "inherit_condition": id == SupportingSurfaceDAO.id,
    }


class AbstractRobotDAO(
    RootedSemanticAnnotationDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.AbstractRobot],
):
    __tablename__ = "AbstractRobotDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(RootedSemanticAnnotationDAO.id), primary_key=True
    )

    torso_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("TorsoDAO.id", use_alter=True), nullable=True
    )
    default_collision_config_id: Mapped[int] = mapped_column(
        ForeignKey("CollisionCheckingConfigDAO.id", use_alter=True), nullable=True
    )

    torso: Mapped[TorsoDAO] = relationship(
        "TorsoDAO", uselist=False, foreign_keys=[torso_id], post_update=True
    )
    manipulators: Mapped[List[ManipulatorDAO]] = relationship(
        "ManipulatorDAO",
        foreign_keys="[ManipulatorDAO.abstractrobotdao_manipulators_id]",
        post_update=True,
    )
    sensors: Mapped[List[SensorDAO]] = relationship(
        "SensorDAO",
        foreign_keys="[SensorDAO.abstractrobotdao_sensors_id]",
        post_update=True,
    )
    manipulator_chains: Mapped[List[KinematicChainDAO]] = relationship(
        "KinematicChainDAO",
        foreign_keys="[KinematicChainDAO.abstractrobotdao_manipulator_chains_id]",
        post_update=True,
    )
    sensor_chains: Mapped[List[KinematicChainDAO]] = relationship(
        "KinematicChainDAO",
        foreign_keys="[KinematicChainDAO.abstractrobotdao_sensor_chains_id]",
        post_update=True,
    )
    default_collision_config: Mapped[CollisionCheckingConfigDAO] = relationship(
        "CollisionCheckingConfigDAO",
        uselist=False,
        foreign_keys=[default_collision_config_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "AbstractRobotDAO",
        "inherit_condition": id == RootedSemanticAnnotationDAO.id,
    }


class semantic_environment_annotationDAO(
    RootedSemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.world_entity.semantic_environment_annotation
    ],
):
    __tablename__ = "semantic_environment_annotationDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(RootedSemanticAnnotationDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "semantic_environment_annotationDAO",
        "inherit_condition": id == RootedSemanticAnnotationDAO.id,
    }


class SemanticRobotAnnotationDAO(
    RootedSemanticAnnotationDAO,
    DataAccessObject[
        semantic_digital_twin.robots.abstract_robot.SemanticRobotAnnotation
    ],
):
    __tablename__ = "SemanticRobotAnnotationDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(RootedSemanticAnnotationDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "SemanticRobotAnnotationDAO",
        "inherit_condition": id == RootedSemanticAnnotationDAO.id,
    }


class Connection6DoFDAO(
    PassiveConnectionDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.Connection6DoF
    ],
):
    __tablename__ = "Connection6DoFDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(PassiveConnectionDAO.id), primary_key=True
    )

    x_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    y_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    z_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    qx_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    qy_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    qz_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    qw_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )

    x: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[x_id],
        post_update=True,
    )
    y: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[y_id],
        post_update=True,
    )
    z: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[z_id],
        post_update=True,
    )
    qx: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[qx_id],
        post_update=True,
    )
    qy: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[qy_id],
        post_update=True,
    )
    qz: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[qz_id],
        post_update=True,
    )
    qw: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[qw_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "Connection6DoFDAO",
        "inherit_condition": id == PassiveConnectionDAO.id,
    }


class ActiveConnection1DOFDAO(
    ActiveConnectionDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.ActiveConnection1DOF
    ],
):
    __tablename__ = "ActiveConnection1DOFDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(ActiveConnectionDAO.id), primary_key=True
    )

    multiplier: Mapped[float]
    offset: Mapped[float]

    axis_id: Mapped[int] = mapped_column(
        ForeignKey("Vector3MappingDAO.id", use_alter=True), nullable=True
    )
    dof_name_id: Mapped[int] = mapped_column(
        ForeignKey("PrefixedNameDAO.id", use_alter=True), nullable=True
    )

    axis: Mapped[Vector3MappingDAO] = relationship(
        "Vector3MappingDAO", uselist=False, foreign_keys=[axis_id], post_update=True
    )
    dof_name: Mapped[PrefixedNameDAO] = relationship(
        "PrefixedNameDAO", uselist=False, foreign_keys=[dof_name_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ActiveConnection1DOFDAO",
        "inherit_condition": id == ActiveConnectionDAO.id,
    }


class OmniDriveDAO(
    ActiveConnectionDAO,
    DataAccessObject[semantic_digital_twin.world_description.connections.OmniDrive],
):
    __tablename__ = "OmniDriveDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(ActiveConnectionDAO.id), primary_key=True
    )

    translation_velocity_limits: Mapped[float]
    rotation_velocity_limits: Mapped[float]

    x_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    y_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    z_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    roll_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    pitch_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    yaw_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    x_vel_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )
    y_vel_id: Mapped[int] = mapped_column(
        ForeignKey("DegreeOfFreedomMappingDAO.id", use_alter=True), nullable=True
    )

    x: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[x_id],
        post_update=True,
    )
    y: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[y_id],
        post_update=True,
    )
    z: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[z_id],
        post_update=True,
    )
    roll: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[roll_id],
        post_update=True,
    )
    pitch: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[pitch_id],
        post_update=True,
    )
    yaw: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[yaw_id],
        post_update=True,
    )
    x_vel: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[x_vel_id],
        post_update=True,
    )
    y_vel: Mapped[DegreeOfFreedomMappingDAO] = relationship(
        "DegreeOfFreedomMappingDAO",
        uselist=False,
        foreign_keys=[y_vel_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "OmniDriveDAO",
        "inherit_condition": id == ActiveConnectionDAO.id,
    }


class DoorDAO(
    EntryWayDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.Door
    ],
):
    __tablename__ = "DoorDAO"

    id: Mapped[int] = mapped_column(ForeignKey(EntryWayDAO.id), primary_key=True)

    hasdoorsdao_doors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("HasDoorsDAO.id", use_alter=True), nullable=True
    )
    walldao_doors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("WallDAO.id", use_alter=True), nullable=True
    )
    wardrobedao_doors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("WardrobeDAO.id", use_alter=True), nullable=True
    )
    cabinetdao_doors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("CabinetDAO.id", use_alter=True), nullable=True
    )
    dresserdao_doors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("DresserDAO.id", use_alter=True), nullable=True
    )
    cupboarddao_doors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("CupboardDAO.id", use_alter=True), nullable=True
    )
    handle_id: Mapped[int] = mapped_column(
        ForeignKey("HandleDAO.id", use_alter=True), nullable=True
    )

    handle: Mapped[HandleDAO] = relationship(
        "HandleDAO", uselist=False, foreign_keys=[handle_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DoorDAO",
        "inherit_condition": id == EntryWayDAO.id,
    }


class DoubleDoorDAO(
    EntryWayDAO,
    DataAccessObject[
        semantic_digital_twin.semantic_annotations.semantic_annotations.DoubleDoor
    ],
):
    __tablename__ = "DoubleDoorDAO"

    id: Mapped[int] = mapped_column(ForeignKey(EntryWayDAO.id), primary_key=True)

    left_door_id: Mapped[int] = mapped_column(
        ForeignKey("DoorDAO.id", use_alter=True), nullable=True
    )
    right_door_id: Mapped[int] = mapped_column(
        ForeignKey("DoorDAO.id", use_alter=True), nullable=True
    )

    left_door: Mapped[DoorDAO] = relationship(
        "DoorDAO", uselist=False, foreign_keys=[left_door_id], post_update=True
    )
    right_door: Mapped[DoorDAO] = relationship(
        "DoorDAO", uselist=False, foreign_keys=[right_door_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "DoubleDoorDAO",
        "inherit_condition": id == EntryWayDAO.id,
    }


class SensorDAO(
    SemanticRobotAnnotationDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.Sensor],
):
    __tablename__ = "SensorDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticRobotAnnotationDAO.id), primary_key=True
    )

    abstractrobotdao_sensors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("AbstractRobotDAO.id", use_alter=True), nullable=True
    )
    kinematicchaindao_sensors_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("KinematicChainDAO.id", use_alter=True), nullable=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "SensorDAO",
        "inherit_condition": id == SemanticRobotAnnotationDAO.id,
    }


class ManipulatorDAO(
    SemanticRobotAnnotationDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.Manipulator],
):
    __tablename__ = "ManipulatorDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticRobotAnnotationDAO.id), primary_key=True
    )

    abstractrobotdao_manipulators_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("AbstractRobotDAO.id", use_alter=True), nullable=True
    )
    tool_frame_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )
    front_facing_orientation_id: Mapped[int] = mapped_column(
        ForeignKey("QuaternionMappingDAO.id", use_alter=True), nullable=True
    )
    front_facing_axis_id: Mapped[int] = mapped_column(
        ForeignKey("Vector3MappingDAO.id", use_alter=True), nullable=True
    )

    tool_frame: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[tool_frame_id], post_update=True
    )
    front_facing_orientation: Mapped[QuaternionMappingDAO] = relationship(
        "QuaternionMappingDAO",
        uselist=False,
        foreign_keys=[front_facing_orientation_id],
        post_update=True,
    )
    front_facing_axis: Mapped[Vector3MappingDAO] = relationship(
        "Vector3MappingDAO",
        uselist=False,
        foreign_keys=[front_facing_axis_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "ManipulatorDAO",
        "inherit_condition": id == SemanticRobotAnnotationDAO.id,
    }


class KinematicChainDAO(
    SemanticRobotAnnotationDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.KinematicChain],
):
    __tablename__ = "KinematicChainDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(SemanticRobotAnnotationDAO.id), primary_key=True
    )

    abstractrobotdao_manipulator_chains_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("AbstractRobotDAO.id", use_alter=True), nullable=True
    )
    abstractrobotdao_sensor_chains_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("AbstractRobotDAO.id", use_alter=True), nullable=True
    )
    tip_id: Mapped[int] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )
    manipulator_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("ManipulatorDAO.id", use_alter=True), nullable=True
    )

    tip: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[tip_id], post_update=True
    )
    manipulator: Mapped[ManipulatorDAO] = relationship(
        "ManipulatorDAO", uselist=False, foreign_keys=[manipulator_id], post_update=True
    )
    sensors: Mapped[List[SensorDAO]] = relationship(
        "SensorDAO",
        foreign_keys="[SensorDAO.kinematicchaindao_sensors_id]",
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "KinematicChainDAO",
        "inherit_condition": id == SemanticRobotAnnotationDAO.id,
    }


class RevoluteConnectionDAO(
    ActiveConnection1DOFDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.RevoluteConnection
    ],
):
    __tablename__ = "RevoluteConnectionDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(ActiveConnection1DOFDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "RevoluteConnectionDAO",
        "inherit_condition": id == ActiveConnection1DOFDAO.id,
    }


class PrismaticConnectionDAO(
    ActiveConnection1DOFDAO,
    DataAccessObject[
        semantic_digital_twin.world_description.connections.PrismaticConnection
    ],
):
    __tablename__ = "PrismaticConnectionDAO"

    id: Mapped[int] = mapped_column(
        ForeignKey(ActiveConnection1DOFDAO.id), primary_key=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "PrismaticConnectionDAO",
        "inherit_condition": id == ActiveConnection1DOFDAO.id,
    }


class CameraDAO(
    SensorDAO, DataAccessObject[semantic_digital_twin.robots.abstract_robot.Camera]
):
    __tablename__ = "CameraDAO"

    id: Mapped[int] = mapped_column(ForeignKey(SensorDAO.id), primary_key=True)

    minimal_height: Mapped[float]
    maximal_height: Mapped[float]

    forward_facing_axis_id: Mapped[int] = mapped_column(
        ForeignKey("Vector3MappingDAO.id", use_alter=True), nullable=True
    )
    field_of_view_id: Mapped[int] = mapped_column(
        ForeignKey("FieldOfViewDAO.id", use_alter=True), nullable=True
    )

    forward_facing_axis: Mapped[Vector3MappingDAO] = relationship(
        "Vector3MappingDAO",
        uselist=False,
        foreign_keys=[forward_facing_axis_id],
        post_update=True,
    )
    field_of_view: Mapped[FieldOfViewDAO] = relationship(
        "FieldOfViewDAO",
        uselist=False,
        foreign_keys=[field_of_view_id],
        post_update=True,
    )

    __mapper_args__ = {
        "polymorphic_identity": "CameraDAO",
        "inherit_condition": id == SensorDAO.id,
    }


class ParallelGripperDAO(
    ManipulatorDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.ParallelGripper],
):
    __tablename__ = "ParallelGripperDAO"

    id: Mapped[int] = mapped_column(ForeignKey(ManipulatorDAO.id), primary_key=True)

    finger_id: Mapped[int] = mapped_column(
        ForeignKey("FingerDAO.id", use_alter=True), nullable=True
    )
    thumb_id: Mapped[int] = mapped_column(
        ForeignKey("FingerDAO.id", use_alter=True), nullable=True
    )

    finger: Mapped[FingerDAO] = relationship(
        "FingerDAO", uselist=False, foreign_keys=[finger_id], post_update=True
    )
    thumb: Mapped[FingerDAO] = relationship(
        "FingerDAO", uselist=False, foreign_keys=[thumb_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "ParallelGripperDAO",
        "inherit_condition": id == ManipulatorDAO.id,
    }


class NeckDAO(
    KinematicChainDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.Neck],
):
    __tablename__ = "NeckDAO"

    id: Mapped[int] = mapped_column(ForeignKey(KinematicChainDAO.id), primary_key=True)

    pitch_body_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )
    yaw_body_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("BodyDAO.id", use_alter=True), nullable=True
    )

    pitch_body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[pitch_body_id], post_update=True
    )
    yaw_body: Mapped[BodyDAO] = relationship(
        "BodyDAO", uselist=False, foreign_keys=[yaw_body_id], post_update=True
    )

    __mapper_args__ = {
        "polymorphic_identity": "NeckDAO",
        "inherit_condition": id == KinematicChainDAO.id,
    }


class ArmDAO(
    KinematicChainDAO, DataAccessObject[semantic_digital_twin.robots.abstract_robot.Arm]
):
    __tablename__ = "ArmDAO"

    id: Mapped[int] = mapped_column(ForeignKey(KinematicChainDAO.id), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "ArmDAO",
        "inherit_condition": id == KinematicChainDAO.id,
    }


class TorsoDAO(
    KinematicChainDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.Torso],
):
    __tablename__ = "TorsoDAO"

    id: Mapped[int] = mapped_column(ForeignKey(KinematicChainDAO.id), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "TorsoDAO",
        "inherit_condition": id == KinematicChainDAO.id,
    }


class FingerDAO(
    KinematicChainDAO,
    DataAccessObject[semantic_digital_twin.robots.abstract_robot.Finger],
):
    __tablename__ = "FingerDAO"

    id: Mapped[int] = mapped_column(ForeignKey(KinematicChainDAO.id), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "FingerDAO",
        "inherit_condition": id == KinematicChainDAO.id,
    }
