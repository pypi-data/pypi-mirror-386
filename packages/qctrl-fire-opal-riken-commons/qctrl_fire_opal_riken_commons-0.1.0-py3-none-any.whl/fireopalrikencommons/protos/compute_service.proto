syntax = "proto3";

package rikennative;

// The compute service definition for Fire Opal integration
service ComputeService {
  // Fire Opal circuit preprocessing
  rpc PreprocessCircuits(PreprocessingRequest) returns (PreprocessingResponse);

  // Fire Opal result postprocessing
  rpc PostprocessResults(PostprocessingRequest) returns (PostprocessingResponse);

  // Health check
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
}

// Fire Opal preprocessing request
message PreprocessingRequest {
  string task_id = 1;                // Optional - if not provided, will be generated server-side.
  string backend_configuration = 2;  // JSON-encoded BackendConfiguration
  string backend_properties = 3;     // JSON-encoded BackendProperties
  string pubs = 4;                   // JSON-encoded SamplerPubLike objects
  string run_options = 5;            // JSON-encoded run options (optional)
}

// Fire Opal preprocessing response
message PreprocessingResponse {
  string task_id = 1;
  bool success = 2;
  string pubs = 3;                   // JSON-encoded SamplerPub objects
  string error_message = 4;
}

// Fire Opal postprocessing request
message PostprocessingRequest {
  string task_id = 1;
  string pub_results = 2;            // JSON-encoded PubResult objects from execution
  string pubs_original = 3;          // JSON-encoded original SamplerPub objects
  string pubs_submitted = 4;         // JSON-encoded SamplerPub objects from preprocessing
}

// Fire Opal postprocessing response
message PostprocessingResponse {
  string task_id = 1;
  bool success = 2;
  string results = 3;                // JSON-encoded processed PubResult objects
  string error_message = 4;
}

// Health check messages
message HealthRequest {
  string service = 1;
}

message HealthResponse {
  string status = 1;
  int32 active_workers = 2;
  int32 queue_size = 3;
  float uptime_seconds = 4;
}
