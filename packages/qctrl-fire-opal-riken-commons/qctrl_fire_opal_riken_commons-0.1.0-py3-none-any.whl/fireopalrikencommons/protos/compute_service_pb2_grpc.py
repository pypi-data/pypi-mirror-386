# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from fireopalrikencommons.protos import compute_service_pb2 as fireopalrikencommons_dot_protos_dot_compute__service__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fireopalrikencommons/protos/compute_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ComputeServiceStub(object):
    """The compute service definition for Fire Opal integration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PreprocessCircuits = channel.unary_unary(
                '/rikennative.ComputeService/PreprocessCircuits',
                request_serializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PreprocessingRequest.SerializeToString,
                response_deserializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PreprocessingResponse.FromString,
                _registered_method=True)
        self.PostprocessResults = channel.unary_unary(
                '/rikennative.ComputeService/PostprocessResults',
                request_serializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PostprocessingRequest.SerializeToString,
                response_deserializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PostprocessingResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/rikennative.ComputeService/HealthCheck',
                request_serializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.HealthRequest.SerializeToString,
                response_deserializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.HealthResponse.FromString,
                _registered_method=True)


class ComputeServiceServicer(object):
    """The compute service definition for Fire Opal integration
    """

    def PreprocessCircuits(self, request, context):
        """Fire Opal circuit preprocessing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostprocessResults(self, request, context):
        """Fire Opal result postprocessing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComputeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PreprocessCircuits': grpc.unary_unary_rpc_method_handler(
                    servicer.PreprocessCircuits,
                    request_deserializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PreprocessingRequest.FromString,
                    response_serializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PreprocessingResponse.SerializeToString,
            ),
            'PostprocessResults': grpc.unary_unary_rpc_method_handler(
                    servicer.PostprocessResults,
                    request_deserializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PostprocessingRequest.FromString,
                    response_serializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.PostprocessingResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.HealthRequest.FromString,
                    response_serializer=fireopalrikencommons_dot_protos_dot_compute__service__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rikennative.ComputeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rikennative.ComputeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ComputeService(object):
    """The compute service definition for Fire Opal integration
    """

    @staticmethod
    def PreprocessCircuits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rikennative.ComputeService/PreprocessCircuits',
            fireopalrikencommons_dot_protos_dot_compute__service__pb2.PreprocessingRequest.SerializeToString,
            fireopalrikencommons_dot_protos_dot_compute__service__pb2.PreprocessingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostprocessResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rikennative.ComputeService/PostprocessResults',
            fireopalrikencommons_dot_protos_dot_compute__service__pb2.PostprocessingRequest.SerializeToString,
            fireopalrikencommons_dot_protos_dot_compute__service__pb2.PostprocessingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rikennative.ComputeService/HealthCheck',
            fireopalrikencommons_dot_protos_dot_compute__service__pb2.HealthRequest.SerializeToString,
            fireopalrikencommons_dot_protos_dot_compute__service__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
