# Next.js Error Handling

Complete guide to error handling in Next.js.

---

## Error Boundary

```typescript
// app/error.tsx
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <p>{error.message}</p>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

---

## Not Found

```typescript
// app/not-found.tsx
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>404 - Page Not Found</h2>
      <Link href="/">Return Home</Link>
    </div>
  )
}

// Trigger programmatically
import { notFound } from 'next/navigation'

export default async function Page({ params }: PageProps) {
  const post = await fetchPost(params.id)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

---

## Loading States

```typescript
// app/dashboard/loading.tsx
export default function Loading() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="spinner" />
    </div>
  )
}
```

---

## Best Practices

- ✅ Add error boundaries at appropriate levels
- ✅ Provide helpful error messages
- ✅ Implement loading states with Suspense
- ✅ Handle not found cases
- ❌ Don't expose sensitive error details
- ❌ Don't skip error handling

---

**Part of**: {{skill_name}}
**Generated by SkillForge**
