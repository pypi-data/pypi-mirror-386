# Next.js State Management

Complete guide to state management in Next.js App Router.

---

## URL State (Recommended)

Use URL search params for shareable state:

```typescript
'use client'

import { useSearchParams, useRouter } from 'next/navigation'

export function FilteredList() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const filter = searchParams.get('filter') || 'all'

  const setFilter = (newFilter: string) => {
    const params = new URLSearchParams(searchParams)
    params.set('filter', newFilter)
    router.push(`?${params.toString()}`)
  }

  return (
    <div>
      <button onClick={() => setFilter('active')}>Active</button>
      <button onClick={() => setFilter('completed')}>Completed</button>
    </div>
  )
}
```

---

## Server State

Read-only state from Server Components (preferred):

```typescript
// Pass data from Server Component to Client Component
export default async function Page() {
  const data = await fetchData()

  return <ClientComponent initialData={data} />
}
```

---

## Client State

### Local State

```typescript
'use client'

import { useState } from 'react'

export function Form() {
  const [formData, setFormData] = useState({ name: '', email: '' })

  return (
    <form>
      <input
        value={formData.name}
        onChange={e => setFormData({ ...formData, name: e.target.value })}
      />
    </form>
  )
}
```

{{#if state_library}}
### Global State with {{state_library}}

```typescript
{{{state_library_example}}}
```
{{/if}}

---

## Best Practices

- ✅ Prefer URL state for shareable UI state
- ✅ Use Server Components for initial data
- ✅ Use local state for UI-only state
- ❌ Don't overuse global state
- ❌ Don't put server data in client state

---

**Part of**: {{skill_name}}
**Generated by SkillForge**
