---
name: {{skill_name}}
description: {{description}}
---

# {{skill_name}} - React SPA Development

## Overview

{{overview}}

This skill provides guidance for building Single Page Applications (SPAs) with React {{framework_version}} and Vite, including routing, state management, and build optimization.

## When to Use

Use this skill when:
{{#each use_cases}}
- {{this}}
{{/each}}
- Building client-side rendered applications
- Using Vite as the build tool
- Implementing React Router for navigation
- Managing application state
- Optimizing bundle size and performance

## Prerequisites

{{#each prerequisites}}
- {{this}}
{{/each}}
- Node.js {{node_version}} or higher
- Understanding of React fundamentals (hooks, components)
- Familiarity with ES6+ JavaScript

---

## Project Structure

### Recommended Vite + React Structure

```
src/
├── assets/              # Static assets (images, fonts)
├── components/          # Reusable UI components
│   ├── ui/             # Base UI components
│   └── shared/         # Shared business components
├── features/           # Feature-based modules
│   └── auth/
│       ├── components/
│       ├── hooks/
│       ├── services/
│       └── types/
├── hooks/              # Custom React hooks
├── layouts/            # Layout components
├── lib/                # Utilities and helpers
├── pages/              # Page components (route components)
├── routes/             # Routing configuration
├── services/           # API services
├── store/              # State management
├── styles/             # Global styles
├── types/              # TypeScript types
├── App.tsx             # Root component
├── main.tsx            # Entry point
└── vite-env.d.ts       # Vite types
```

---

## Vite Setup

### Basic Configuration

```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@hooks': path.resolve(__dirname, './src/hooks'),
      '@lib': path.resolve(__dirname, './src/lib'),
      '@pages': path.resolve(__dirname, './src/pages'),
    },
  },
  server: {
    port: 3000,
    open: true,
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          'react-vendor': ['react', 'react-dom'],
          'router-vendor': ['react-router-dom'],
        },
      },
    },
  },
})
```

### Environment Variables

```typescript
// .env
VITE_API_URL=https://api.example.com
VITE_APP_NAME=My App

// src/config/env.ts
export const env = {
  apiUrl: import.meta.env.VITE_API_URL,
  appName: import.meta.env.VITE_APP_NAME,
  isDev: import.meta.env.DEV,
  isProd: import.meta.env.PROD,
}
```

---

## React Router

### Router Setup

```typescript
// src/routes/index.tsx
import { createBrowserRouter } from 'react-router-dom'
import RootLayout from '@/layouts/RootLayout'
import HomePage from '@/pages/HomePage'
import AboutPage from '@/pages/AboutPage'
import NotFoundPage from '@/pages/NotFoundPage'

export const router = createBrowserRouter([
  {
    path: '/',
    element: <RootLayout />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        element: <HomePage />,
      },
      {
        path: 'about',
        element: <AboutPage />,
      },
      {
        path: 'users/:id',
        element: <UserPage />,
        loader: userLoader, // Data loading
      },
    ],
  },
  {
    path: '*',
    element: <NotFoundPage />,
  },
])

// src/main.tsx
import { RouterProvider } from 'react-router-dom'
import { router } from './routes'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
)
```

### Navigation

```typescript
import { Link, NavLink, useNavigate } from 'react-router-dom'

export function Navigation() {
  const navigate = useNavigate()

  return (
    <nav>
      {/* Basic link */}
      <Link to="/about">About</Link>

      {/* NavLink with active styling */}
      <NavLink
        to="/dashboard"
        className={({ isActive }) => isActive ? 'active' : ''}
      >
        Dashboard
      </NavLink>

      {/* Programmatic navigation */}
      <button onClick={() => navigate('/profile')}>
        Go to Profile
      </button>
    </nav>
  )
}
```

### Route Parameters and Search Params

```typescript
import { useParams, useSearchParams } from 'react-router-dom'

export function UserPage() {
  // URL params (/users/:id)
  const { id } = useParams()

  // Search params (?tab=profile&sort=asc)
  const [searchParams, setSearchParams] = useSearchParams()
  const tab = searchParams.get('tab') || 'profile'

  const changeTab = (newTab: string) => {
    setSearchParams({ tab: newTab })
  }

  return (
    <div>
      <h1>User {id}</h1>
      <button onClick={() => changeTab('settings')}>
        Settings
      </button>
    </div>
  )
}
```

### Protected Routes

```typescript
// src/components/ProtectedRoute.tsx
import { Navigate, Outlet } from 'react-router-dom'
import { useAuth } from '@/hooks/useAuth'

export function ProtectedRoute() {
  const { isAuthenticated } = useAuth()

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />
  }

  return <Outlet />
}

// In router configuration
{
  element: <ProtectedRoute />,
  children: [
    {
      path: 'dashboard',
      element: <DashboardPage />,
    },
  ],
}
```

### Lazy Loading Routes

```typescript
import { lazy, Suspense } from 'react'
import { createBrowserRouter } from 'react-router-dom'

const DashboardPage = lazy(() => import('@/pages/DashboardPage'))
const SettingsPage = lazy(() => import('@/pages/SettingsPage'))

export const router = createBrowserRouter([
  {
    path: '/dashboard',
    element: (
      <Suspense fallback={<LoadingSpinner />}>
        <DashboardPage />
      </Suspense>
    ),
  },
])
```

---

## State Management

{{#if state_library}}
### {{state_library}} Setup

{{{state_library_setup}}}

**Example Usage**:
```typescript
{{{state_library_example}}}
```
{{else}}
### React Context + Hooks

**Create a Context**:
```typescript
// src/contexts/AuthContext.tsx
import { createContext, useContext, useState, ReactNode } from 'react'

interface AuthContextType {
  user: User | null
  login: (email: string, password: string) => Promise<void>
  logout: () => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null)

  const login = async (email: string, password: string) => {
    const user = await authService.login(email, password)
    setUser(user)
  }

  const logout = () => {
    setUser(null)
    authService.logout()
  }

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider')
  }
  return context
}
```

**Using the Context**:
```typescript
// src/main.tsx
import { AuthProvider } from '@/contexts/AuthContext'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <AuthProvider>
    <RouterProvider router={router} />
  </AuthProvider>
)

// In a component
import { useAuth } from '@/contexts/AuthContext'

export function ProfilePage() {
  const { user, logout } = useAuth()

  return (
    <div>
      <h1>Welcome {user?.name}</h1>
      <button onClick={logout}>Logout</button>
    </div>
  )
}
```
{{/if}}

### Local Component State

```typescript
import { useState } from 'react'

export function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

### Form State

```typescript
import { useState, FormEvent } from 'react'

export function LoginForm() {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  })
  const [errors, setErrors] = useState<Record<string, string>>({})

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault()

    // Validation
    const newErrors: Record<string, string> = {}
    if (!formData.email) newErrors.email = 'Email is required'
    if (!formData.password) newErrors.password = 'Password is required'

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors)
      return
    }

    // Submit
    try {
      await login(formData)
    } catch (error) {
      setErrors({ general: 'Login failed' })
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={formData.email}
        onChange={e => setFormData({ ...formData, email: e.target.value })}
      />
      {errors.email && <span className="error">{errors.email}</span>}

      <input
        type="password"
        value={formData.password}
        onChange={e => setFormData({ ...formData, password: e.target.value })}
      />
      {errors.password && <span className="error">{errors.password}</span>}

      <button type="submit">Login</button>
    </form>
  )
}
```

---

## API Integration

### HTTP Client Setup

```typescript
// src/lib/api.ts
import axios from 'axios'
import { env } from '@/config/env'

export const apiClient = axios.create({
  baseURL: env.apiUrl,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
})

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => Promise.reject(error)
)

// Response interceptor
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized
      window.location.href = '/login'
    }
    return Promise.reject(error)
  }
)
```

### API Services

```typescript
// src/services/userService.ts
import { apiClient } from '@/lib/api'

export const userService = {
  getUsers: async () => {
    const { data } = await apiClient.get('/users')
    return data
  },

  getUser: async (id: string) => {
    const { data } = await apiClient.get(`/users/${id}`)
    return data
  },

  createUser: async (userData: CreateUserDto) => {
    const { data } = await apiClient.post('/users', userData)
    return data
  },

  updateUser: async (id: string, userData: UpdateUserDto) => {
    const { data } = await apiClient.patch(`/users/${id}`, userData)
    return data
  },

  deleteUser: async (id: string) => {
    await apiClient.delete(`/users/${id}`)
  },
}
```

### Data Fetching with React Query

```typescript
// src/hooks/useUsers.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { userService } from '@/services/userService'

export function useUsers() {
  return useQuery({
    queryKey: ['users'],
    queryFn: userService.getUsers,
  })
}

export function useUser(id: string) {
  return useQuery({
    queryKey: ['users', id],
    queryFn: () => userService.getUser(id),
    enabled: !!id, // Only fetch if id exists
  })
}

export function useCreateUser() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: userService.createUser,
    onSuccess: () => {
      // Invalidate and refetch
      queryClient.invalidateQueries({ queryKey: ['users'] })
    },
  })
}

// In a component
export function UsersPage() {
  const { data: users, isLoading, error } = useUsers()
  const createUser = useCreateUser()

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <div>
      <button onClick={() => createUser.mutate({ name: 'John' })}>
        Add User
      </button>
      <ul>
        {users.map(user => <li key={user.id}>{user.name}</li>)}
      </ul>
    </div>
  )
}
```

---

## Custom Hooks

### Common Patterns

```typescript
// src/hooks/useLocalStorage.ts
import { useState, useEffect } from 'react'

export function useLocalStorage<T>(key: string, initialValue: T) {
  const [value, setValue] = useState<T>(() => {
    const item = localStorage.getItem(key)
    return item ? JSON.parse(item) : initialValue
  })

  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(value))
  }, [key, value])

  return [value, setValue] as const
}

// src/hooks/useDebounce.ts
import { useState, useEffect } from 'react'

export function useDebounce<T>(value: T, delay: number = 500): T {
  const [debouncedValue, setDebouncedValue] = useState(value)

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)

    return () => clearTimeout(handler)
  }, [value, delay])

  return debouncedValue
}

// src/hooks/useMediaQuery.ts
import { useState, useEffect } from 'react'

export function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState(false)

  useEffect(() => {
    const media = window.matchMedia(query)
    setMatches(media.matches)

    const listener = () => setMatches(media.matches)
    media.addEventListener('change', listener)

    return () => media.removeEventListener('change', listener)
  }, [query])

  return matches
}

// Usage
export function ResponsiveComponent() {
  const isMobile = useMediaQuery('(max-width: 768px)')

  return <div>{isMobile ? 'Mobile' : 'Desktop'}</div>
}
```

---

## Styling

{{#if ui_library}}
### {{ui_library}} Integration

{{{ui_library_setup}}}

**Example Component**:
```typescript
{{{ui_library_example}}}
```
{{/if}}

### CSS Modules

```typescript
// src/components/Button/Button.module.css
.button {
  padding: 0.5rem 1rem;
  border-radius: 0.25rem;
  font-weight: 500;
  transition: all 0.2s;
}

.button:hover {
  opacity: 0.8;
}

.primary {
  background: blue;
  color: white;
}

// src/components/Button/Button.tsx
import styles from './Button.module.css'

interface ButtonProps {
  variant?: 'primary' | 'secondary'
  children: React.ReactNode
}

export function Button({ variant = 'primary', children }: ButtonProps) {
  return (
    <button className={`${styles.button} ${styles[variant]}`}>
      {children}
    </button>
  )
}
```

---

## Build Optimization

### Code Splitting

```typescript
// Dynamic imports for route-based splitting
import { lazy, Suspense } from 'react'

const HeavyComponent = lazy(() => import('./HeavyComponent'))

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <HeavyComponent />
    </Suspense>
  )
}
```

### Bundle Analysis

```bash
# Install bundle visualizer
npm install -D rollup-plugin-visualizer

# vite.config.ts
import { visualizer } from 'rollup-plugin-visualizer'

export default defineConfig({
  plugins: [
    react(),
    visualizer({ open: true })
  ],
})
```

### Tree Shaking

```typescript
// ✅ DO: Named imports
import { Button } from 'my-library'

// ❌ DON'T: Default imports from barrel files
import * as MyLibrary from 'my-library'
```

---

## Best Practices

### Component Organization

- ✅ **DO**: Keep components small and focused
- ✅ **DO**: Use TypeScript for type safety
- ✅ **DO**: Implement proper error boundaries
- ✅ **DO**: Use React.memo for expensive components
- ❌ **DON'T**: Create deeply nested component trees
- ❌ **DON'T**: Put all state in global store

### Performance

- ✅ **DO**: Use React DevTools Profiler
- ✅ **DO**: Implement code splitting
- ✅ **DO**: Lazy load routes and heavy components
- ✅ **DO**: Debounce expensive operations
- ❌ **DON'T**: Create functions inside render
- ❌ **DON'T**: Use inline object/array literals as props

### State Management

- ✅ **DO**: Start with local state
- ✅ **DO**: Lift state only when needed
- ✅ **DO**: Use Context for truly global state
- ❌ **DON'T**: Over-engineer state management
- ❌ **DON'T**: Put everything in global state

---

## User Conventions

{{#if user_conventions.naming}}
### File Naming
- Components: {{user_conventions.naming.components}}
- Files: {{user_conventions.naming.files}}
{{/if}}

{{#if user_conventions.structure}}
### Directory Structure
{{user_conventions.structure}}
{{/if}}

{{#if user_conventions.coding}}
### Coding Style
{{#each user_conventions.coding}}
- {{this}}
{{/each}}
{{/if}}

---

## Related Skills

{{#if related_skills}}
{{#each related_skills}}
- `{{name}}` - {{description}}
{{/each}}
{{else}}
- `react-hooks` - Custom React hooks patterns
- `typescript-react` - TypeScript with React
- `vite-config` - Advanced Vite configuration
- `react-query` - Data fetching and caching
{{/if}}

---

## Resources

- [React Documentation](https://react.dev)
- [Vite Documentation](https://vitejs.dev)
- [React Router Documentation](https://reactrouter.com)
- [TanStack Query Documentation](https://tanstack.com/query)
{{#each resources}}
- [{{title}}]({{url}})
{{/each}}

---

**Generated by SkillForge** - Personalized skills for your tech stack
