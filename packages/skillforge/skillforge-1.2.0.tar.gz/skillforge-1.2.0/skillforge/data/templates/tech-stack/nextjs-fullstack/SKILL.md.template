---
name: {{skill_name}}
description: {{description}}
---

# {{skill_name}} - Next.js Fullstack Development

## Overview

{{overview}}

This skill provides comprehensive patterns for Next.js 15+ App Router development with Server Components, modern data fetching, and fullstack application patterns.

## When to Use

Use this skill when:
{{#each use_cases}}
- {{this}}
{{/each}}
- Building with Next.js App Router (app/ directory)
- Implementing Server Components and Client Components
- Creating API routes with Route Handlers
- Optimizing images, fonts, and metadata
- Setting up middleware and authentication

## Prerequisites

{{#each prerequisites}}
- {{this}}
{{/each}}
- Node.js 18.17 or higher
- Understanding of React fundamentals
- Familiarity with TypeScript (recommended)

---

## Core Topics

This skill covers the following areas. Detailed documentation is available in the references folder:

### 📁 Routing Patterns
**See**: `references/routing.md`

- App Router structure and file conventions
- Dynamic routes and catch-all routes
- Route groups for organization
- Parallel and intercepting routes
- Loading and error UI

### ⚛️ Component Patterns
**See**: `references/components.md`

- Server Components (default)
- Client Components ('use client')
- Composition patterns and best practices
- Children pattern for mixing server/client

### 📡 Data Fetching
**See**: `references/data-fetching.md`

- Async Server Components
- Caching strategies (static, revalidated, dynamic)
- Tag-based revalidation
- Streaming and Suspense
- Client-side data fetching

### 🔌 API Routes
**See**: `references/api-routes.md`

- Route Handlers (GET, POST, PATCH, DELETE)
- Dynamic API routes
- Error handling
- CORS configuration

### 🎨 Styling
**See**: `references/styling.md`

- CSS Modules
- Tailwind CSS integration
{{#if ui_library}}
- {{ui_library}} setup and patterns
{{/if}}
- Global styles

### 📊 State Management
**See**: `references/state.md`

- URL state (recommended)
- Server state patterns
- Client state (useState)
{{#if state_library}}
- {{state_library}} integration
{{/if}}

### 🎯 Metadata & SEO
**See**: `references/metadata.md`

- Static metadata
- Dynamic metadata with generateMetadata
- OpenGraph and Twitter cards

### ⚡ Optimization
**See**: `references/optimization.md`

- Image optimization with next/image
- Font optimization with next/font
- Code splitting and lazy loading

### 🛡️ Error Handling
**See**: `references/error-handling.md`

- Error boundaries (error.tsx)
- Not found pages (not-found.tsx)
- Loading states (loading.tsx)

### 🔐 Middleware
**See**: `references/middleware.md`

- Authentication checks
- Request/response manipulation
- Route protection

---

## Best Practices

### Architecture
- ✅ **DO**: Use Server Components by default
- ✅ **DO**: Only use 'use client' when necessary (interactivity, hooks, browser APIs)
- ✅ **DO**: Keep Client Components at the leaves of the tree
- ❌ **DON'T**: Use getServerSideProps or getStaticProps (Pages Router API)
- ❌ **DON'T**: Put 'use client' at the top of every file

### Data Fetching
- ✅ **DO**: Fetch data where it's needed (component-level)
- ✅ **DO**: Use proper caching strategies
- ✅ **DO**: Implement loading states with Suspense
- ❌ **DON'T**: Waterfall requests (use Promise.all)

### Performance
- ✅ **DO**: Use the Image component for all images
- ✅ **DO**: Optimize fonts with next/font
- ✅ **DO**: Use dynamic imports for large components
- ❌ **DON'T**: Use regular <img> tags

---

## User Conventions

{{#if user_conventions.naming}}
### File Naming
- Components: {{user_conventions.naming.components}}
- Files: {{user_conventions.naming.files}}
- Routes: {{user_conventions.naming.routes}}
{{/if}}

{{#if user_conventions.structure}}
### Directory Structure
{{user_conventions.structure}}
{{/if}}

{{#if user_conventions.coding}}
### Coding Style
{{#each user_conventions.coding}}
- {{this}}
{{/each}}
{{/if}}

---

## Related Skills

{{#if related_skills}}
{{#each related_skills}}
- `{{name}}` - {{description}}
{{/each}}
{{else}}
- `react-components` - React component patterns
- `typescript-nextjs` - TypeScript with Next.js
- `tailwind-styling` - Tailwind CSS styling
- `api-design` - RESTful API design
{{/if}}

---

## Resources

- [Next.js Documentation](https://nextjs.org/docs)
- [Next.js App Router](https://nextjs.org/docs/app)
- [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components)
- [Data Fetching](https://nextjs.org/docs/app/building-your-application/data-fetching)
- [Routing](https://nextjs.org/docs/app/building-your-application/routing)
{{#each resources}}
- [{{title}}]({{url}})
{{/each}}

---

**Generated by SkillForge** - Personalized skills for your tech stack
