# Next.js Optimization

Complete guide to optimization in Next.js.

---

## Image Optimization

```typescript
import Image from 'next/image'

export function Hero() {
  return (
    <div>
      {/* External image */}
      <Image
        src="https://example.com/photo.jpg"
        alt="Photo"
        width={800}
        height={600}
        priority
      />

      {/* Local image */}
      <Image
        src="/hero.png"
        alt="Hero"
        width={1200}
        height={600}
        placeholder="blur"
      />

      {/* Fill container */}
      <div style={{ position: 'relative', height: '400px' }}>
        <Image
          src="/background.jpg"
          alt="Background"
          fill
          style={{ objectFit: 'cover' }}
        />
      </div>
    </div>
  )
}
```

---

## Font Optimization

```typescript
// app/layout.tsx
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const robotoMono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={`${inter.variable} ${robotoMono.variable}`}>
      <body className={inter.className}>{children}</body>
    </html>
  )
}
```

---

## Code Splitting

```typescript
import dynamic from 'next/dynamic'

const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <p>Loading...</p>,
  ssr: false, // Disable server-side rendering if needed
})

export function Page() {
  return <HeavyComponent />
}
```

---

## Best Practices

- ✅ Use Image component for all images
- ✅ Optimize fonts with next/font
- ✅ Use dynamic imports for heavy components
- ✅ Implement proper caching strategies
- ❌ Don't use regular <img> tags
- ❌ Don't load heavy libraries on initial render

---

**Part of**: {{skill_name}}
**Generated by SkillForge**
