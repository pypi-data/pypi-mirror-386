# Next.js Component Patterns

Complete guide to Server and Client Components in Next.js App Router.

---

## Server Components (Default)

**All components are Server Components by default** in the App Router:

```typescript
// app/components/UserProfile.tsx
// No 'use client' directive = Server Component
async function UserProfile({ userId }: { userId: string }) {
  // Can fetch data directly
  const user = await fetch(`https://api.example.com/users/${userId}`)
    .then(res => res.json())

  // Can access backend resources
  // Can use environment variables safely

  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  )
}

export default UserProfile
```

### Benefits
- Zero JavaScript sent to client
- Direct database/API access
- Automatic code splitting
- Better SEO
- Improved performance

---

## Client Components

Use `'use client'` when you need:
- Interactive handlers (onClick, onChange, etc.)
- React hooks (useState, useEffect, etc.)
- Browser APIs (localStorage, window, etc.)
- Third-party libraries that use React hooks

```typescript
'use client'

import { useState } from 'react'

export function Counter() {
  const [count, setCount] = useState(0)

  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  )
}
```

---

## Composition Pattern

**Best Practice**: Keep Client Components at the leaves of your component tree:

```typescript
// ❌ DON'T: Making entire page a Client Component
'use client'

export default function Page() {
  const [state, setState] = useState()
  return (
    <div>
      <Header />
      <ServerContent />  {/* Now can't be Server Component */}
      <InteractiveButton state={state} setState={setState} />
    </div>
  )
}

// ✅ DO: Only interactive parts are Client Components
export default function Page() {
  return (
    <div>
      <Header />           {/* Server Component */}
      <ServerContent />    {/* Server Component */}
      <InteractiveButton /> {/* Client Component */}
    </div>
  )
}
```

---

## Children Pattern

Pass Server Components as children to Client Components:

```typescript
// ClientWrapper.tsx
'use client'

export function ClientWrapper({ children }: { children: React.ReactNode }) {
  const [isOpen, setIsOpen] = useState(true)

  return (
    <div>
      <button onClick={() => setIsOpen(!isOpen)}>Toggle</button>
      {isOpen && children}
    </div>
  )
}

// page.tsx (Server Component)
export default function Page() {
  return (
    <ClientWrapper>
      <ServerComponent />  {/* Remains Server Component! */}
    </ClientWrapper>
  )
}
```

---

## Best Practices

- ✅ Use Server Components by default
- ✅ Only add 'use client' when truly needed
- ✅ Keep Client Components small and at the leaves
- ✅ Pass Server Components as children to Client Components
- ❌ Don't use 'use client' for every component
- ❌ Don't make entire pages Client Components

---

**Part of**: {{skill_name}}
**Generated by SkillForge**
