# Next.js API Routes (Route Handlers)

Complete guide to building APIs with Next.js Route Handlers.

---

## Basic Route Handler

```typescript
// app/api/posts/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams
  const query = searchParams.get('query')

  const posts = await fetchPosts(query)

  return NextResponse.json({ posts })
}

export async function POST(request: NextRequest) {
  const body = await request.json()

  const post = await createPost(body)

  return NextResponse.json({ post }, { status: 201 })
}
```

---

## Dynamic Route Handlers

```typescript
// app/api/posts/[id]/route.ts
interface RouteContext {
  params: { id: string }
}

export async function GET(
  request: NextRequest,
  { params }: RouteContext
) {
  const post = await fetchPost(params.id)

  if (!post) {
    return NextResponse.json({ error: 'Not found' }, { status: 404 })
  }

  return NextResponse.json({ post })
}

export async function PATCH(
  request: NextRequest,
  { params }: RouteContext
) {
  const body = await request.json()
  const post = await updatePost(params.id, body)

  return NextResponse.json({ post })
}

export async function DELETE(
  request: NextRequest,
  { params }: RouteContext
) {
  await deletePost(params.id)

  return new NextResponse(null, { status: 204 })
}
```

---

## Error Handling

```typescript
// app/api/posts/route.ts
export async function GET(request: NextRequest) {
  try {
    const posts = await fetchPosts()
    return NextResponse.json({ posts })
  } catch (error) {
    console.error('Failed to fetch posts:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
```

---

## CORS Headers

```typescript
export async function GET(request: NextRequest) {
  const data = await fetchData()

  return NextResponse.json(data, {
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

---

## Best Practices

- ✅ Use TypeScript for type safety
- ✅ Implement proper error handling
- ✅ Validate request data
- ✅ Use appropriate HTTP status codes
- ✅ Add CORS headers when needed
- ❌ Don't expose sensitive data
- ❌ Don't skip validation

---

**Part of**: {{skill_name}}
**Generated by SkillForge**
