name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with pylint
      run: |
        pylint genai_otel --rcfile=.pylintrc || true

    - name: Check formatting with black
      run: |
        black --check genai_otel tests --exclude='__version__\.py'

    - name: Check import sorting with isort
      run: |
        isort --check-only --skip-glob='*/__version__.py' genai_otel tests

    - name: Type check with mypy
      run: |
        mypy genai_otel || true

    - name: Run tests
      run: |
        pytest tests/ -v --cov=genai_otel --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # New job: Test package build and installation
  build-and-install-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package with twine
      run: twine check dist/*

    - name: Test installation in isolated environment
      shell: bash
      run: |
        # Create a temporary directory for testing
        python -m venv test_env

        # Activate virtual environment
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          source test_env/Scripts/activate
        else
          source test_env/bin/activate
        fi

        # Install the built wheel
        pip install dist/*.whl

        # Test imports
        python -c 'import genai_otel; print(f"Successfully imported genai_otel version: {genai_otel.__version__}")'
        python -c 'from genai_otel.config import OTelConfig; from genai_otel.cost_calculator import CostCalculator; from genai_otel.auto_instrument import setup_auto_instrumentation; print("All core components imported successfully")'

        # Test CLI tool
        genai-instrument --help
        echo "CLI tool works"

        # Cleanup
        deactivate

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check || true

    - name: Run bandit security check
      run: |
        bandit -r genai_otel -ll || true