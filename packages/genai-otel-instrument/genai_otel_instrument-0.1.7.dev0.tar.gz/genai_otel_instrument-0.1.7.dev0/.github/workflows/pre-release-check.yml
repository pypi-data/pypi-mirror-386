name: Pre-Release Validation

# This workflow mimics the manual test_release.sh script
# Run it before creating a release to validate everything works

on:
  workflow_dispatch:  # Manual trigger only
  push:
    tags:
      - 'v*'  # Trigger on version tags

jobs:
  pre-release-validation:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display environment info
      run: |
        echo "=========================================="
        echo "Pre-Release Validation"
        echo "=========================================="
        python --version
        python -c "import sys; print(f'Python path: {sys.executable}')"

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Auto-format code
      run: |
        echo "â†’ Auto-formatting code with isort and black..."
        isort genai_otel tests
        black genai_otel tests
        echo "âœ“ Code formatting applied"

    - name: Run full test suite
      run: |
        echo "â†’ Running tests..."
        pytest tests/ -v --cov=genai_otel --cov-report=term --cov-report=html --cov-report=term-missing
        echo "âœ“ All tests passed"

    - name: Code quality checks
      run: |
        echo "â†’ Running code quality checks..."
        black --check genai_otel tests --exclude='__version__\.py'
        isort --check-only --skip-glob='*/__version__.py' genai_otel tests
        pylint genai_otel --rcfile=.pylintrc --exit-zero || true
        echo "âœ“ Code quality checks complete"

    - name: Build package
      run: |
        echo "â†’ Building package..."
        pip install build twine
        python -m build
        echo "âœ“ Package built successfully"

    - name: Check package with twine
      run: |
        echo "â†’ Checking package with twine..."
        twine check dist/*
        echo "âœ“ Package check passed"

    - name: Test installation in isolated environment
      shell: bash
      run: |
        echo "â†’ Testing installation in temporary environment..."

        # Create temporary virtual environment
        python -m venv test_release_env

        # Activate based on OS
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          source test_release_env/Scripts/activate
        else
          source test_release_env/bin/activate
        fi

        # Install the built wheel
        pip install dist/*.whl

        # Test imports
        python -c 'import genai_otel; print(f"Successfully imported genai_otel version: {genai_otel.__version__}")'
        python -c 'from genai_otel.config import OTelConfig; from genai_otel.cost_calculator import CostCalculator; from genai_otel.auto_instrument import setup_auto_instrumentation; print("All core components imported successfully")'

        # Test CLI tool
        genai-instrument --help > /dev/null 2>&1
        echo "âœ“ CLI tool works"

        # Cleanup
        deactivate

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        name: dist-packages
        path: dist/

    - name: Summary
      if: success()
      run: |
        echo ""
        echo "=========================================="
        echo "âœ“ All Pre-Release Checks Passed!"
        echo "=========================================="
        echo ""
        echo "Release Checklist:"
        echo "âœ… All tests passing"
        echo "âœ… Code formatting applied"
        echo "âœ… Import sorting applied"
        echo "âœ… Package builds successfully"
        echo "âœ… Installation tested"
        echo "âœ… CLI tool works"
        echo ""
        echo "Ready for release! ðŸš€"
