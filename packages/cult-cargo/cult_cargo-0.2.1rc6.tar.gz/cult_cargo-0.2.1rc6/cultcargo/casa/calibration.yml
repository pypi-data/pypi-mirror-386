_include:
    - (cultcargo):
        - genesis/cult-cargo-base.yml
        - genesis/casa/casa-inputs.yml

cabs:
    casa.applycal:
        info: "CASA 'applycal' task: applies calibration tables and generates corrected data" 
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.calibration.applycal.html
        command: casatasks.applycal
        _use: lib.misc.casa6.command-data
        inputs:
            _use: 
                - lib.params.casa.ms-selectdata-inputs
                - lib.params.casa.calibration-inputs
            calwt:
                info: Calibrate data weights per gaintable.
                dtype: List[bool]
            applymode:
                info: Calibration apply mode (default is 'calflag')
                dtype: str 
                choices: [calflag, calflagstrict, trial, flagonly, flagonlystrict, calonly]
            flagbackup:
                info: Automatically back up the state of flags before the run? Default is true
                dtype: bool 
            parang:
                info: Apply parallactic angle correction
                dtype: bool
            flagversions-table:
                info: flagversions table generated alongside the MS
                dtype: Directory
                implicit: "{current.ms}.flagversions"
                must_exist: false   # created on the fly if not existing
                writable: true
                policies:
                    skip: true
                # need writing to parent dir in case it needs to be created. Should this be done automatically by stimela?
                path_policies:
                    write_parent: true
                

    casa.fluxscale:
        info: "CASA 'fluxscale' task: bootstraps the flux density scale from standard calibrators"      
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.calibration.fluxscale.html
        command: casatasks.fluxscale
        _use: lib.misc.casa6.command-data
        outputs:
            fluxtable:
                info: Name of output flux-scaled calibation table
                dtype: Directory
                required: true
                mkdir: false
        inputs:
            _use: lib.params.casa.base-inputs
            caltable:
                info: Name of input calibation table
                dtype: Directory
                required: true
            reference:
                info: Reference field name(s) (transfer flux scale FROM
                dtype: str 
                required: true
            transfer:
                info: Transfer field name(s) (transfer flux scale TO)
                dtype: Union[str, List[str]]
                policies:
                 repeat: ','
            listfile:
                info: Name of listfile that contains the fit information
                dtype: str 
            append:
                info: Append fluxscaled solutions to the fluxtable?
                dtype: bool
            refspwmap:
                info: Scale across spectral window boundaries
                dtype: List[int]
            gainthreshold:
                info: Threshold in the input gain solutions to be used in fractional deviation from median values.
                dtype: float
            timerange:
                info: Select based on time range. E.g. '09:14:0~09:54:0', default ('') is all
                dtype: str 
            antenna:
                info: Select antenna/baselines. E.g. '3,VA04', default ('') is all
                dtype: str 
            scan:
                info: Select based on scan number range, e.g. '0~5'
                dtype: str 
            incremental:
                info: Create an incremental caltable containing only gain correction factor?
                dtype: bool
            fitorder:
                info: Polynomial order of the spectral fitting for valid flux
                dtype: int
            display:
                info: Display statistics and/or spectral fitting results?
                dtype: bool
                
            
    casa.gaincal:
        info: "CASA 'gaincal' task: gain calibration"      
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.calibration.gaincal.html
        command: casatasks.gaincal
        _use: lib.misc.casa6.command-data
        outputs:
            caltable:
                info: Name of output gain calibration table
                dtype: Directory 
                required: true
                mkdir: false
        inputs:
            _use: 
                - lib.params.casa.ms-selectdata-inputs
                - lib.params.casa.calibration-inputs
            solint:
                info: Solution interval
                dtype: str 
            combine:
                info: Data axes which to combine for solve. Options are 'obs', 'scan', 'spw', 'field', or any comma-separated combination
                dtype: str 
            preavg:
                info: Pre-averaging interval (sec), default is -1 to disable
                dtype: float
            refant:
                info: Reference antenna. You may use any antenna that is working for the whole duration of the observation.
                dtype: str 
                required: true
            refantmode:
                info: Reference antenna mode 
                dtype: str 
            minblperant:
                info: Minimum number of baselines required per antenna for each solve
                dtype: int 
            minsnr:
                info: Reject solutions below this SNR
                dtype: float
            solnorm:
                info: Normalize (squared) solution amplitudes (G, T only)
                dtype: bool 
            normtype:
                info: Solution normalization calculation type
                dtype: str
                choices: [mean, median]
            gaintype:
                info: Type of gain solution (G,T,GSPLINE,K,KCROSS)
                dtype: str
                choices: [G,T,GSPLINE,K,KCROSS]
            smodel:
                info: Point source Stokes parameters for source model (experimental).
                dtype: List[float]
            calmode:
                info: Type of solution ('ap', 'p', 'a')
                dtype: str
                choices: [ap, p, a]
            solmode:
                info: Robust solving mode ('', 'L1', 'R', 'LR')
                dtype: str
                choices: [ '', L1, R, L1R ]
            rmsthresh:
                info: RMS Threshold sequence. Subparameter of solmode='R' or 'L1R'                
                dtype: List[float]
            corrdepflags:
                info: See CASA docs
                dtype: bool 
            append:
                info: Append solutions to the (existing) table
                dtype: bool 
            splinetime:
                info: Spline timescale(sec); All spw's are first averaged. Subparameter of gaintype=’GSPLINE’
                dtype: float
            npointaver:
                info: Tune phase-wrapping algorithm.
                dtype: int
            phasewrap:
                info: Wrap the phase for jumps greater than this value (degrees)
                dtype: float
            parang:
                info: Apply parallactic angle correction
                dtype: bool 
         
