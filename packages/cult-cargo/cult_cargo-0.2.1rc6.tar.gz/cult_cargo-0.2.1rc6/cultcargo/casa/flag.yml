_include:
    - (cultcargo):
        - genesis/cult-cargo-base.yml
        - genesis/casa/casa-inputs.yml

cabs:
    casa.flagman:
        name: casa.flagman
        info: "CASA 'flagmanager' task: saves/restores flags" 
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.flagging.flagmanager.html
        _use: lib.misc.casa6.command-data
        flavour: 
            kind: python-code
            input_dict: args
        command: |
            from casatasks import flagmanager
            summary = flagmanager(**args)
            if args['mode'] == 'list':
                version_list = summary
                version_list.pop("MS", None)
                version_list = list(version_list.values())
                print(f"{len(version_list)} flag versions found:")
                for value in version_list:
                    print(f"  name: {value['name']:<32s} comment: {value['comment']}")
            else:
                version_list = []
        inputs:
            _use: lib.params.casa.base-inputs
            ## we could do this, but probably better do declare flagversions as an implicit input/output?
            # ms:
            #     # since a new "<MS>.flagversions" may need to be created, mark parent dir of ms as writeable
            #     path_policies:
            #         write_parent: true
            mode: 
                choices: [save, restore, rename, delete, list]
                required: true
            versionname:
                info: flag version name
            oldname:
                info: flag version to rename (for mode='rename')
            comment:
                info: short description of the versionname
            merge:
                info: |
                    Merge operation to use when saving the flags. Options available are: 'replace', 
                    and the experimental 'or', 'and'. Use the last two options at your own risk.
                choices: [replace, or, and]
            flagversions-table:
                info: flagversions table generated alongside the MS
                dtype: Directory
                implicit: "{current.ms}.flagversions"
                must_exist: false   # created on the fly if not existing
                writable: true
                policies:
                    skip: true
                # need writing to parent dir in case it needs to be created. Should this be done automatically by stimela?
                path_policies:
                    write_parent: true
        outputs:
            version-list:
                info: will contain a dict of flagversions, for mode='list'
                dtype: List
        management:
            wranglers:
                "\\d+ flag versions found:":
                    - HIGHLIGHT:bold green
                "name:.* comment:.*":
                    - HIGHLIGHT:green

    casa.flagman.save:
        name: casa.flagman.save
        info: "Specialised CASA 'flagmanager' task for saving flags"
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.flagging.flagmanager.html
        _use: lib.misc.casa6.command-data
        command: casatasks.flagmanager
        inputs:
            _use: lib.params.casa.base-inputs
            mode:
                implicit: 'save'
            versionname:
                info: flag version name
            comment:
                info: short description of the versionname
            merge:
                info: |
                    Merge operation to use when saving the flags. Options available are: 'replace',
                    and the experimental 'or', 'and'. Use the last two options at your own risk.
                choices: [replace, or, and]
        outputs:
            flagversions-table:
                info: A flagversions table generated alongside the MS.
                dtype: Directory
                implicit: "{current.ms}.flagversions/flags.{current.versionname}"
                must_exist: true # Must exist after the cab is run.
                writable: true
                policies:
                    skip: true  # Not an input to the command.
                # Allow writing to parent, and create missing parents.
                path_policies:
                    mkdir_parent: true
                    write_parent: true

    casa.flagman.restore:
        name: casa.flagman.restore
        info: "Specialised CASA 'flagmanager' task for restoring flags"
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.flagging.flagmanager.html
        _use: lib.misc.casa6.command-data
        command: casatasks.flagmanager
        inputs:
            _use: lib.params.casa.base-inputs
            mode:
                implicit: 'restore'
            versionname:
                info: flag version name
            merge:
                info: |
                    Merge operation to use when saving the flags. Options available are: 'replace',
                    and the experimental 'or', 'and'. Use the last two options at your own risk.
                choices: [replace, or, and]
            flagversions-table:
                info: A flagversions table generated alongside the MS.
                dtype: Directory
                implicit: "{current.ms}.flagversions/flags.{current.versionname}"
                must_exist: true   # The flagversion table must exist.
                writable: true
                policies:
                    skip: true  # Not an input to the command.
                path_policies:
                    write_parent: true

    casa.flagsummary:
        name: casa.flagsummary
        info: "invoke CASA 'flagdata' to generate a flagging summary" 
        _use: lib.misc.casa6.command-data
        flavour: 
            kind: python-code
            input_dict: args
        command: |
            from casatasks import flagdata
            from pprint import pp
            summary = flagdata(mode='summary', **args)
            pp(summary)
            percentage = summary['flagged'] / summary['total']
            print(f"Total flagged percentage: {percentage:.02%}")
        inputs:
            _use: lib.params.casa.ms-selectdata-extended-inputs
            _scrub: [selectdata, msselect]   # these ones not implemented by this task
        outputs:
            summary:
                info: summary dict
                dtype: Dict
            percentage:
                info: flagged percentage
                dtype: float
        management:
            wranglers:
                "Total flagged percentage: (.*)$":
                    - HIGHLIGHT:bold green

    casa5.flagsummary:
        name: casa5.flagsummary
        info: "invoke CASA5 'flagdata' task to generate a flagging summary" 
        command: flagdata
        _use: lib.misc.casa5.command-data
        inputs:
            _use: lib.params.casa.ms-selectdata-extended-inputs
            _scrub: [selectdata, msselect]   # these ones not implemented by this task
            mode:
                implicit: 'summary'
        outputs:
            percentage:
                info: flagged percentage
                dtype: float
        management:
            wranglers:
                'Total Flagged: .* Total Counts: .* \((?P<percentage>[\d.]+)%\)':
                    - PARSE_OUTPUT:percentage:float
                    - HIGHLIGHT:bold green

    casa.flagdata:
        name: casa.flagdata
        info: "CASA 'flagdata' task: performs flagging" 
        extra_info:
            See also: https://casadocs.readthedocs.io/en/stable/api/tt/casatasks.flagging.flagdata.html
        command: casatasks.flagdata
        _use: lib.misc.casa6.command-data
        inputs:
            _use: lib.params.casa.ms-selectdata-extended-inputs
            _scrub: [selectdata, msselect]   # these ones not implemented by this task
            mode:
                info: Flagging mode, defult is 'manual'
                choices:
                    - manual
                    - clip
                    - quack
                    - shadow
                    - elevation
                    - tfcrop
                    - rflag
                    - extend
                    - unflag
                dtype: str
            autocorr:
                info: Flag only the auto-correlations
                dtype: bool
            inpfile:
                info: Input ASCII file, list of files or Python list of strings with flag commands
                dtype: str
            datacolumn:
                info: Data column on which to operate (data, corrected, model, weight, etc.)
                dtype: str
            reason:
                info: Select by REASON types
                dtype: str
            tbuff:
                info: List of time buffers (sec) to pad timerange in flag commands
                dtype: str
            clipminmax:
                info: Range to use for clipping
                dtype: List[float]
            clipoutside:
                info: Clip outside the range, or within it
                dtype: bool
            channelavg:
                info: Average over channels (scalar average)
                dtype: bool
            clipzeros:
                info: Clip zero-value data
                dtype: bool
            quackinterval:
                info: Quack n seconds from scan beginning or end
                dtype: float
            quackmode:
                info: |-
                    Quack mode. Default is 'beg' ==> first N seconds of scan; 'endb' ==> last N
                    seconds of scan; 'end' ==> all but first N seconds of scan; 'tail' ==>
                    all but last N seconds of scan.
                choices:
                    - beg
                    - endb
                    - end
                    - tail
                dtype: str
            quackincrement:
                info: Flag incrementally in time?
                dtype: bool
            tolerance:
                info: Amount of shadow allowed (in meters)
                dtype: float
            addantenna:
                info: File name or dictionary with additional antenna names, positions and diameters
                dtype: str
            lowerlimit:
                info: Lower limiting elevation (in degrees)
                dtype: float
            upperlimit:
                info: Upper limiting elevation (in degrees)
                dtype: float
            ntime:
                info: Time-range to use for each chunk (in seconds or minutes) (eg 1.5min). Default 'scan' use full scan.
                dtype: str
            combinescans:
                info: Accumulate data across scans depending on the value of ntime.
                dtype: bool
            timecutoff:
                info: Flagging thresholds in units of deviation from the fit
                dtype: float
            freqcutoff:
                info: Flagging thresholds in units of deviation from the fit
                dtype: float
            timefit:
                info: Fitting function for the time direction (poly/line), default is line
                choices:
                    - poly
                    - line
                dtype: str
            freqfit:
                info: Fitting function for the frequency direction (poly/line), default is poly
                choices:
                    - poly
                    - line
                dtype: str
            maxnpieces:
                info: Number of pieces in the polynomial-fits (for 'freqfit' or 'timefit' ='poly')
                dtype: int
            flagdimension:
                info: Dimensions along which to calculate fit, default is 'freqtime'
                choices:
                    - freq
                    - time
                    - freqtime
                    - timefreq
                dtype: str
            usewindowstats:
                info: Calculate additional flags using sliding window statistics, default is 'none'
                choices:
                    - none
                    - sum
                    - std
                    - both
                dtype: str
            halfwin:
                info: Half-width of sliding window to use with 'usewindowstats' (1,2,3).
                dtype: int
            extendflags:
                info: Extend flags along time, frequency and correlation.
                dtype: bool
            extendpols:
                info: If any correlation is flagged, flag all correlations
                dtype: bool
            growtime:
                info: Flag all 'ntime' integrations if more than X% of the timerange is flagged (0-100)
                dtype: float
            growfreq:
                info: Flag all selected channels if more than X% of the frequency range is flagged(0-100)
                dtype: float
            growaround:
                info: Flag data based on surrounding flags
                dtype: bool
            flagneartime:
                info: Flag one timestep before and after a flagged one
                dtype: bool
            flagnearfreq:
                info: Flag one channel before and after a flagged one
                dtype: bool
            minrel:
                info: minimum number of flags (relative)
                dtype: float
            maxrel:
                info: maximum number of flags (relative)
                dtype: float
            minabs:
                info: minimum number of flags (absolute)
                dtype: int
            maxabs:
                info: maximum number of flags (absolute). Use a negative value to indicate infinity (this is the default)
                dtype: int
            spwchan:
                info: Print summary of channels per spw
                dtype: bool
            spwcorr:
                info: Print summary of correlation per spw
                dtype: bool
            basecnt:
                info: Print summary counts per baseline
                dtype: bool
            name:
                info: Name of this summary report (key in summary dictionary), default is 'Summary'
                dtype: str
            action:
                info:  Action to perform in MS/cal table or in the input list of parameters (default apply)
                choices:
                    - none
                    - apply
                    - calculate
                dtype: str
            display:
                info: Display data and/or end-of-MS reports at runtime, default is 'report'
                choices:
                    - data
                    - report
                    - both
                    - none
                dtype: str
            flagbackup:
                info: Back up the state of flags before the run
                dtype: bool
            savepars:
                info: Save the current parameters to the FLAG_CMD table or to a file
                dtype: bool
            cmdreason:
                info: Reason to save to output file or to FLAG_CMD table.
                dtype: str
            outfile:
                info: Name of output file to save current parameters. If empty, save to FLAG_CMD
                dtype: str
            winsize:
                info: Number of timesteps in the sliding time window
                dtype: int
            timedev:
                info: Time-series noise estimate
                dtype: str
            freqdev:
                info: Spectral noise estimate
                dtype: str
            timedevscale:
                info: Threshold scaling for timedev
                dtype: float
            freqdevscale:
                info: Threshold scaling for freqdev
                dtype: float
            spectralmax:
                info: Flag whole spectrum if freqdev is greater than spectralmax
                dtype: float
            spectralmin:
                info: Flag whole spectrum if freqdev is less than spectralmin
                dtype: float
            chanbin:
                info: Bin width for channel average in number of input channels
                dtype: int
            overwrite:
                info: Overwrite the existing parameter file given in outfile, default is true
                dtype: bool
            flagversions-table:
                info: flagversions table generated alongside the MS
                dtype: Directory
                implicit: "{current.ms}.flagversions"
                must_exist: false   # created on the fly if not existing
                writable: true
                policies:
                    skip: true
                # need writing to parent dir in case it needs to be created. Should this be done automatically by stimela?
                path_policies:
                    write_parent: true
