from typing import Any, Callable, Dict, List, Optional, Tuple, Union

from com.inductiveautomation.factorypmi.application import FPMIWindow
from com.inductiveautomation.factorypmi.application.script.builtin import (
    ClientPrintUtilities,
    VisionUtilities,
)
from com.inductiveautomation.ignition.common import Dataset
from com.inductiveautomation.ignition.common.i18n.keyboard import KeyboardLayout
from dev.coatl.helper.types import AnyNum, AnyStr
from java.awt import Color, Component
from java.awt.image import BufferedImage
from java.org.jdesktop.core.animation.timing import Animator
from java.util import EventObject, Locale
from javax.swing import JComponent, JFrame, JPopupMenu

ACCL_NONE: int
ACCL_CONSTANT: int
ACCL_FAST_TO_SLOW: int
ACCL_SLOW_TO_FAST: int
ACCL_EASE: int
COORD_DESIGNER: int
COORD_SCREEN: int
LANDSCAPE: int
PORTRAIT: int
CLIENT_FLAG: int
DESIGNER_FLAG: int
FULLSCREEN_FLAG: int
PREVIEW_FLAG: int
SSL_FLAG: int
CONNECTION_MODE_DISCONNECTED: int
CONNECTION_MODE_READ_ONLY: int
CONNECTION_MODE_READ_WRITE: int

def beep() -> None: ...
def centerWindow(arg: Union[AnyStr, FPMIWindow]) -> None: ...
def closeDesktop(handle: AnyStr) -> None: ...
def closeParentWindow(event: EventObject) -> None: ...
def closeWindow(arg: Union[AnyStr, FPMIWindow]) -> None: ...
def color(*args: Any) -> Color: ...
def createImage(component: Component) -> BufferedImage: ...
def createPopupMenu(
    itemNames: List[AnyStr], itemFunctions: List[Callable[..., Any]]
) -> JPopupMenu: ...
def createPrintJob(component: Component) -> ClientPrintUtilities.JythonPrintJob: ...
def desktop(handle: Optional[AnyStr] = ...) -> VisionUtilities: ...
def exit(force: bool = ...) -> None: ...
def exportCSV(filename: AnyStr, showHeaders: bool, dataset: Dataset) -> AnyStr: ...
def exportExcel(
    filename: AnyStr,
    showHeaders: bool,
    dataset: Union[Dataset, List[Dataset]],
    nullsEmpty: bool = ...,
) -> AnyStr: ...
def exportHTML(
    filename: AnyStr, showHeaders: bool, dataset: Dataset, title: AnyStr
) -> AnyStr: ...
def findWindow(path: AnyStr) -> List[FPMIWindow]: ...
def getAvailableLocales() -> List[AnyStr]: ...
def getAvailableTerms() -> List[AnyStr]: ...
def getClientId() -> unicode: ...
def getConnectTimeout() -> int: ...
def getConnectionMode() -> int: ...
def getCurrentDesktop() -> AnyStr: ...
def getCurrentWindow() -> AnyStr: ...
def getDesktopHandles() -> List[AnyStr]: ...
def getEdition() -> AnyStr: ...
def getExternalIpAddress() -> AnyStr: ...
def getGatewayAddress() -> unicode: ...
def getInactivitySeconds() -> long: ...
def getKeyboardLayouts() -> List[KeyboardLayout]: ...
def getLocale() -> AnyStr: ...
def getOpenedWindowNames() -> Tuple[AnyStr, ...]: ...
def getOpenedWindows() -> Tuple[FPMIWindow, ...]: ...
def getParentWindow(event: EventObject) -> FPMIWindow: ...
def getReadTimeout() -> int: ...
def getRoles() -> Tuple[AnyStr, ...]: ...
def getScreenIndex() -> int: ...
def getScreens() -> List[Tuple[AnyStr, int, int]]: ...
def getSibling(event: EventObject, name: AnyStr) -> FPMIWindow: ...
def getSystemFlags() -> int: ...
def getUsername() -> AnyStr: ...
def getWindow(name: AnyStr) -> FPMIWindow: ...
def getWindowNames() -> Tuple[AnyStr, ...]: ...
def goBack() -> FPMIWindow: ...
def goForward() -> FPMIWindow: ...
def goHome() -> FPMIWindow: ...
def invokeLater(function: Callable[..., Any], delay: int = ...) -> None: ...
def isOverlaysEnabled() -> bool: ...
def isScreenLocked() -> bool: ...
def isTouchscreenMode() -> bool: ...
def lockScreen(obscure: bool = ...) -> None: ...
def logout() -> None: ...
def openDesktop(
    screen: int = ...,
    handle: Optional[AnyStr] = ...,
    title: Optional[AnyStr] = ...,
    width: Optional[int] = ...,
    height: Optional[int] = ...,
    x: int = ...,
    y: int = ...,
    windows: Optional[List[AnyStr]] = ...,
) -> JFrame: ...
def openFile(
    extension: Optional[AnyStr] = ..., defaultLocation: Optional[AnyStr] = ...
) -> Optional[AnyStr]: ...
def openFiles(
    extension: Optional[AnyStr] = ..., defaultLocation: Optional[AnyStr] = ...
) -> Optional[List[AnyStr]]: ...
def openURL(url: AnyStr, useApplet: Optional[bool] = ...) -> None: ...
def openWindow(
    path: AnyStr, params: Optional[Dict[AnyStr, Any]] = ...
) -> FPMIWindow: ...
def openWindowInstance(
    path: AnyStr, params: Optional[Dict[AnyStr, Any]] = ...
) -> FPMIWindow: ...
def playSoundClip(wav: Any, volume: float = ..., wait: bool = ...) -> None: ...
def printToImage(component: Component, filename: Optional[AnyStr] = ...) -> None: ...
def refreshBinding(component: JComponent, propertyName: AnyStr) -> bool: ...
def retarget(
    project: AnyStr,
    addresses: Optional[Union[AnyStr, List[AnyStr]]] = ...,
    params: Optional[Dict[AnyStr, Any]] = ...,
    windows: Optional[List[AnyStr]] = ...,
) -> None: ...
def saveFile(
    filename: AnyStr,
    extension: Optional[AnyStr] = ...,
    typeDesc: Optional[AnyStr] = ...,
) -> Optional[AnyStr]: ...
def setConnectTimeout(connectTimeout: int) -> None: ...
def setConnectionMode(mode: int) -> None: ...
def setLocale(locale: Union[AnyStr, Locale]) -> None: ...
def setOverlaysEnabled(enabled: bool) -> None: ...
def setReadTimeout(readTimeout: int) -> None: ...
def setTouchscreenMode(enabled: bool) -> None: ...
def setScreenIndex(index: int) -> None: ...
def showColorInput(initialColor: Color, dialogTitle: AnyStr = ...) -> Color: ...
def showConfirm(
    message: AnyStr, title: AnyStr = ..., allowCancel: bool = ...
) -> Optional[bool]: ...
def showDiagnostics() -> None: ...
def showError(message: AnyStr, title: AnyStr = ...) -> None: ...
def showInput(message: AnyStr, defaultText: AnyStr = ...) -> Optional[AnyStr]: ...
def showMessage(message: AnyStr, title: AnyStr = ...) -> None: ...
def showNumericKeypad(
    initialValue: AnyNum, fontSize: Optional[int] = ..., usePasswordMode: bool = ...
) -> AnyNum: ...
def showPasswordInput(
    message: AnyStr, title: AnyStr = ..., echoChar: AnyStr = ...
) -> Optional[AnyStr]: ...
def showTouchscreenKeyboard(
    initialText: AnyStr,
    fontSize: Optional[int] = ...,
    passwordMode: Optional[bool] = ...,
) -> AnyStr: ...
def showWarning(message: AnyStr, title: AnyStr = ...) -> None: ...
def swapTo(path: AnyStr, params: Optional[Dict[AnyStr, Any]] = ...) -> FPMIWindow: ...
def swapWindow(
    arg: Union[AnyStr, EventObject],
    swapToPath: AnyStr,
    params: Optional[Dict[AnyStr, Any]] = ...,
) -> FPMIWindow: ...
def switchUser(
    username: AnyStr, password: AnyStr, event: EventObject, hideError: bool = ...
) -> bool: ...
def transform(
    component: JComponent,
    newX: Optional[int] = ...,
    newY: Optional[int] = ...,
    newWidth: Optional[int] = ...,
    newHeight: Optional[int] = ...,
    duration: int = ...,
    callback: Optional[Callable[..., Any]] = ...,
    framesPerSecond: int = ...,
    acceleration: Optional[int] = ...,
    coordSpace: Optional[int] = ...,
) -> Animator: ...
def unlockScreen() -> None: ...
def updateProject() -> None: ...
