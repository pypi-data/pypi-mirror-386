from typing import Optional, Union

from dev.coatl.helper.types import AnyStr
from java.lang import Object
from java.util import Locale
from org.joda.time import (
    DateTimeField,
    DateTimeFieldType,
    DurationField,
    Interval,
    ReadableInstant,
    ReadablePartial,
)

class AbstractReadableInstantFieldProperty(Object):
    def __init__(self) -> None: ...
    def compareTo(self, arg: Union[ReadableInstant, ReadablePartial]) -> int: ...
    def get(self) -> int: ...
    def getAsShortText(self, arg: Optional[Locale] = ...) -> AnyStr: ...
    def getAsString(self) -> AnyStr: ...
    def getAsText(self, locale: Optional[Locale] = ...) -> AnyStr: ...
    def getDifference(self, instant: ReadableInstant) -> int: ...
    def getDifferenceAsLong(self, instant: ReadableInstant) -> long: ...
    def getDurationField(self) -> DurationField: ...
    def getField(self) -> DateTimeField: ...
    def getFieldType(self) -> DateTimeFieldType: ...
    def getLeapAmount(self) -> int: ...
    def getLeapDurationField(self) -> DurationField: ...
    def getMximumShortTextLength(self, locale: Locale) -> int: ...
    def getMaximumTextLength(self, locale: Locale) -> int: ...
    def getMaximumValue(self) -> int: ...
    def getMaximumValueOverall(self) -> int: ...
    def getMinimumValue(self) -> int: ...
    def getMinimumValueOverall(self) -> int: ...
    def getName(self) -> AnyStr: ...
    def getRangeDurationField(self) -> DurationField: ...
    def isLeap(self) -> bool: ...
    def remainder(self) -> long: ...
    def toInterval(self) -> Interval: ...
