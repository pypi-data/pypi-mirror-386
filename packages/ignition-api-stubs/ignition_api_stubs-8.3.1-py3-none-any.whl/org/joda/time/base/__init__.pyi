from typing import Any, List, Optional, Union

from java.lang import Comparable, Object
from java.util import Calendar, Date, GregorianCalendar, Locale
from org.joda.time import (
    Chronology,
    DateTime,
    DateTimeField,
    DateTimeFieldType,
    DateTimeZone,
    Duration,
    DurationFieldType,
    Instant,
    Interval,
    MutableDateTime,
    MutableInterval,
    MutablePeriod,
    Period,
    PeriodType,
    ReadableDuration,
    ReadableInstant,
    ReadableInterval,
    ReadablePartial,
)

class AbstractDuration(Object, Comparable):
    def compareTo(self, o: Any) -> int: ...
    def getMillis(self) -> long: ...
    def isEqual(self, duration: ReadableDuration) -> bool: ...
    def isLongerThan(self, duration: ReadableDuration) -> bool: ...
    def isShorterThan(self, duration: ReadableDuration) -> bool: ...
    def toDuration(self) -> Duration: ...
    def toPeriod(self) -> Period: ...

class AbstractInstant(Object, Comparable):
    def compareTo(self, o: Any) -> int: ...
    def get(self, arg: Union[DateTimeField, DateTimeFieldType]) -> int: ...
    def getZone(self) -> DateTimeZone: ...
    def isAfter(self, instant: Union[long, ReadableInstant]) -> bool: ...
    def isAfterNow(self) -> bool: ...
    def isBefore(self, instant: Union[long, ReadableInstant]) -> bool: ...
    def isBeforeNow(self) -> bool: ...
    def isEqual(self, instant: Union[long, ReadableInstant]) -> bool: ...
    def isEqualNow(self) -> bool: ...
    def isSupported(self, arg: DateTimeFieldType) -> bool: ...
    def toDate(self) -> Date: ...
    def toDateTimeISO(self) -> DateTime: ...
    def toInstant(self) -> Instant: ...
    def toMutableDateTime(
        self, arg: Union[Chronology, DateTimeZone, None] = ...
    ) -> MutableDateTime: ...
    def toMutableDateTimeISO(self) -> MutableDateTime: ...

class AbstractInterval(Object):
    def contains(self, arg: Union[long, ReadableInstant, ReadableInterval]) -> bool: ...
    def containsNow(self) -> bool: ...
    def getEnd(self) -> DateTime: ...
    def getStart(self) -> DateTime: ...
    def isAfter(self, arg: Union[long, ReadableInstant, ReadableInterval]) -> bool: ...
    def isAfterNow(self) -> bool: ...
    def isBefore(self, arg: Union[long, ReadableInstant, ReadableInterval]) -> bool: ...
    def isBeforeNow(self) -> bool: ...
    def isEqual(self, other: ReadableInterval) -> bool: ...
    def overlaps(self, interval: ReadableInterval) -> bool: ...
    def toDuration(self) -> Duration: ...
    def toDurationMillis(self) -> long: ...
    def toInterval(self) -> Interval: ...
    def toMutableInterval(self) -> MutableInterval: ...
    def toPeriod(self, type_: Optional[PeriodType] = ...) -> Period: ...

class AbstractDateTime(AbstractInstant):
    def getCenturyOfEra(self) -> int: ...
    def getDayOfMonth(self) -> int: ...
    def getDayOfWeek(self) -> int: ...
    def getDayOfYear(self) -> int: ...
    def getEra(self) -> int: ...
    def getHourOfDay(self) -> int: ...
    def getMillisOfDay(self) -> int: ...
    def getMillisOfSecond(self) -> int: ...
    def getMinuteOfDay(self) -> int: ...
    def getMinuteOfHour(self) -> int: ...
    def getMonthOfYear(self) -> int: ...
    def getSecondOfDay(self) -> int: ...
    def getSecondOfMinute(self) -> int: ...
    def getWeekOfWeekyear(self) -> int: ...
    def getWeekyear(self) -> int: ...
    def getYear(self) -> int: ...
    def getYearOfCentury(self) -> int: ...
    def getYearOfEra(self) -> int: ...
    def toCalendar(self, locale: Locale) -> Calendar: ...
    def toGregorianCalendar(self) -> GregorianCalendar: ...

class AbstractPartial(Object, Comparable):
    def compareTo(self, o: Any) -> int: ...
    def get(self, arg: Union[DateTimeField, DateTimeFieldType]) -> int: ...
    def getChronology(self) -> Chronology: ...
    def getField(self, index: int) -> DateTimeField: ...
    def getFieldType(self, index: int) -> DateTimeFieldType: ...
    def getFieldTypes(self) -> List[DateTimeFieldType]: ...
    def getFields(self) -> List[DateTimeField]: ...
    def getValue(self, index: int) -> int: ...
    def getValues(self) -> List[int]: ...
    def indexOf(self, type_: DateTimeFieldType) -> int: ...
    def isAfter(self, partial: ReadablePartial) -> bool: ...
    def isBefore(self, partial: ReadablePartial) -> bool: ...
    def isEqual(self, partial: ReadablePartial) -> bool: ...
    def isSupported(self, arg: DateTimeFieldType) -> bool: ...
    def size(self) -> int: ...
    def toDateTime(self, baseInstant: ReadableInstant) -> DateTime: ...

class AbstractPeriod(Object):
    def get(self, arg: DurationFieldType) -> int: ...
    def getFieldType(self, index: int) -> DurationFieldType: ...
    def getFieldTypes(self) -> List[DurationFieldType]: ...
    def getValues(self) -> List[int]: ...
    def indexOf(self, type_: DurationFieldType) -> int: ...
    def isSupported(self, type_: DurationFieldType) -> bool: ...
    def size(self) -> int: ...
    def toMutablePeriod(self) -> MutablePeriod: ...
    def toPeriod(self) -> Period: ...

class BaseDateTime(AbstractDateTime):
    def __init__(self, *args: Any) -> None: ...
    def getChronology(self) -> Chronology: ...
    def getMillis(self) -> long: ...

class BaseDuration(AbstractDuration):
    def toIntervalFrom(self, startInstant: ReadableInstant) -> Interval: ...
    def toIntervalTo(self, endInstant: ReadableInstant) -> Interval: ...
    def toPeriodFrom(
        self, startInstant: ReadableInstant, type_: Optional[PeriodType] = ...
    ) -> Period: ...
    def toPeriodTo(
        self, endInstant: ReadableInstant, type_: Optional[PeriodType] = ...
    ) -> Period: ...

class BaseInterval(AbstractInterval):
    def getChronology(self) -> Chronology: ...
    def getEndMillis(self) -> long: ...
    def getStartMillis(self) -> long: ...

class BaseLocal(AbstractPartial): ...

class BasePeriod(AbstractPeriod):
    def getPeriodType(self) -> PeriodType: ...
    def getValue(self, index: int) -> int: ...
    def toDurationFrom(self, startInstant: ReadableInstant) -> Duration: ...
    def toDurationTo(self, endInstant: ReadableInstant) -> Duration: ...

class BaseSingleFieldPeriod(Object, Comparable):
    def compareTo(self, o: Any) -> int: ...
    def get(self, type_: DateTimeFieldType) -> int: ...
    def getFieldType(self) -> DateTimeFieldType: ...
    def getPeriodType(self) -> PeriodType: ...
    def getValue(self, index: int) -> int: ...
    def isSupported(self, type_: DateTimeFieldType) -> bool: ...
    def size(self) -> int: ...
    def toMutablePeriod(self) -> MutablePeriod: ...
    def toPeriod(self) -> Period: ...
