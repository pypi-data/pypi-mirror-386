from typing import Any, List, Optional

from com.google.common.util.concurrent import ListenableFuture
from com.twilio.http import TwilioRestClient
from dev.coatl.helper.types import AnyStr
from java.lang import Object

class Creator(Object):
    def __init__(self) -> None: ...
    def create(self, client: Optional[TwilioRestClient] = ...) -> Resource: ...
    def createAsync(
        self, client: Optional[TwilioRestClient] = ...
    ) -> ListenableFuture: ...

class Deleter(Object):
    def __init__(self) -> None: ...
    def delete(self, client: Optional[TwilioRestClient] = ...) -> bool: ...
    def deleteAsync(
        self, client: Optional[TwilioRestClient] = ...
    ) -> ListenableFuture: ...

class Fetcher(Object):
    def __init__(self) -> None: ...
    def fetch(self, client: Optional[TwilioRestClient] = ...) -> Resource: ...
    def fetchAsync(
        self, client: Optional[TwilioRestClient] = ...
    ) -> ListenableFuture: ...

class Page(Object):
    def __init__(self) -> None: ...
    @staticmethod
    def fromJson(*args: Any) -> Page: ...
    def getFirstPageUrl(self, domain: AnyStr, region: AnyStr) -> AnyStr: ...
    def getNextPageUrl(self, domain: AnyStr, region: AnyStr) -> AnyStr: ...
    def getPageSize(self) -> int: ...
    def getPreviousPageUrl(self, domain: AnyStr, region: AnyStr) -> AnyStr: ...
    def getRecords(self) -> List[Any]: ...
    def getUrl(self, domain: AnyStr, region: AnyStr) -> AnyStr: ...
    def hasNextPage(self) -> bool: ...

class Reader(Object):
    def __init__(self) -> None: ...
    def firstPage(self, client: Optional[TwilioRestClient] = ...) -> Page: ...
    def getLimit(self) -> long: ...
    def getPage(
        self, targetUrl: AnyStr, client: Optional[TwilioRestClient] = ...
    ) -> Page: ...
    def getPageSize(self) -> int: ...
    def limit(self, limit: long) -> Reader: ...
    def nextPage(
        self, page: Page, client: Optional[TwilioRestClient] = ...
    ) -> Page: ...
    def pageSize(self, pageSize: int) -> Reader: ...
    def previousPage(
        self, page: Page, client: Optional[TwilioRestClient] = ...
    ) -> Page: ...
    def read(self, client: Optional[TwilioRestClient] = ...) -> List[Resource]: ...
    def readAsync(
        self, client: Optional[TwilioRestClient] = ...
    ) -> ListenableFuture: ...

class Resource(Object):
    def __init__(self) -> None: ...

class Updater(Object):
    def __init__(self) -> None: ...
    def update(self, client: Optional[TwilioRestClient] = ...) -> Resource: ...
    def updateAsync(
        self, client: Optional[TwilioRestClient] = ...
    ) -> ListenableFuture: ...
