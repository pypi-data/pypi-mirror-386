from typing import Any, List, Optional, Union

from com.twilio.base import Creator, Deleter, Fetcher, Reader, Resource, Updater
from com.twilio.http import HttpMethod
from com.twilio.type import PhoneNumber
from dev.coatl.helper.types import AnyStr
from java.lang import Enum
from java.net import URI
from org.joda.time import DateTime

class CallCreator(Creator):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def setApplicationSid(self, applicationSid: AnyStr) -> CallCreator: ...
    def setFallbackMethod(self, fallbackMethod: HttpMethod) -> CallCreator: ...
    def setFallbackUrl(self, fallbackUrl: Union[AnyStr, URI]) -> CallCreator: ...
    def setIfMachine(self, ifMachine: AnyStr) -> CallCreator: ...
    def setMachineDetection(self, machineDetection: AnyStr) -> CallCreator: ...
    def setMachineDetectionTimeout(
        self, machineDetectionTimeout: int
    ) -> CallCreator: ...
    def setMethod(self, method: HttpMethod) -> CallCreator: ...
    def setRecord(self, record: bool) -> CallCreator: ...
    def setRecordingChannels(self, recordingChannels: AnyStr) -> CallCreator: ...
    def setRecordingStatusCallback(
        self, recordingStatusCallback: AnyStr
    ) -> CallCreator: ...
    def setRecordingStatusCallbackMethod(
        self, recordingStatusCallbackMethod: HttpMethod
    ) -> CallCreator: ...
    def setSendDigits(self, sendDigits: AnyStr) -> CallCreator: ...
    def setSipAuthPassword(self, sipAuthPassword: AnyStr) -> CallCreator: ...
    def setSipAuthUsername(self, sipAuthUsername: AnyStr) -> CallCreator: ...
    def setStatusCallback(self, statusCallback: Union[AnyStr, URI]) -> CallCreator: ...
    def setStatusCallbacEvent(
        self, statusCallbackEvent: Union[AnyStr, List[AnyStr]]
    ) -> CallCreator: ...
    def setStatusCallbackMethod(
        self, statusCallbackMethod: HttpMethod
    ) -> CallCreator: ...
    def setTimeout(self, timeout: int) -> CallCreator: ...
    def setUrl(self, url: Union[AnyStr, URI]) -> CallCreator: ...

class Call(Resource):
    class Status(Enum):
        BUSY: str
        CANCELED: str
        COMPLETED: str
        FAILED: str
        IN_PROGRESS: str
        NO_ANSWER: str
        QUEUED: str
        RINGING: str

    class UpdateStatus(Enum):
        CANCELED: str
        COMPLETED: str
        @staticmethod
        def forValue(value: AnyStr) -> Call.UpdateStatus: ...
        @staticmethod
        def values() -> List[Call.UpdateStatus]: ...

    @staticmethod
    def forValue(value: AnyStr) -> Call.Status: ...
    @staticmethod
    def values() -> List[Call.Status]: ...
    @staticmethod
    def creator(*args: Any, **kwargs: Any) -> CallCreator: ...
    @staticmethod
    def deleter(*args: AnyStr) -> CallDeleter: ...
    @staticmethod
    def fetcher(*args: AnyStr) -> CallFetcher: ...
    @staticmethod
    def fromJson(*args: Any) -> Call: ...
    def getAccountSid(self) -> AnyStr: ...
    def getAnnotation(self) -> AnyStr: ...
    def getAnsweredBy(self) -> AnyStr: ...
    def getApiVersion(self) -> AnyStr: ...
    def getCallerName(self) -> AnyStr: ...
    def getDateCreated(self) -> DateTime: ...
    def getDateUpdated(self) -> DateTime: ...
    def getDuration(self) -> AnyStr: ...
    def getEndTime(self) -> DateTime: ...
    def getForwardedFrom(self) -> AnyStr: ...
    def getFrom(self) -> AnyStr: ...
    def getFromFormatted(self) -> AnyStr: ...
    def getGroupSid(self) -> AnyStr: ...
    def getParentCallSid(self) -> AnyStr: ...
    def getPhoneNumberSid(self) -> AnyStr: ...
    def getSid(self) -> AnyStr: ...
    def getStartTime(self) -> DateTime: ...
    def getStatus(self) -> Call.Status: ...
    def getTo(self) -> AnyStr: ...
    def getUri(self) -> AnyStr: ...
    @staticmethod
    def reader(pathAccountSid: Optional[AnyStr] = ...) -> CallReader: ...
    @staticmethod
    def updater(*args: AnyStr) -> CallUpdater: ...

class CallDeleter(Deleter):
    def __init__(self, *args: AnyStr) -> None: ...

class CallFetcher(Fetcher):
    def __init__(self, *args: AnyStr) -> None: ...

class CallReader(Reader):
    def __init__(self, pathAccountSid: Optional[AnyStr] = ...) -> None: ...
    def setEndTime(self, absoluteEndTime: DateTime) -> CallReader: ...
    def setFrom(self, from_: PhoneNumber) -> CallReader: ...
    def setParentCallSid(self, parentCallSid: AnyStr) -> CallReader: ...
    def setStartTime(self, absoluteStartTime: DateTime) -> CallReader: ...
    def setStatus(self, status: Call.Status) -> CallReader: ...
    def setTo(self, to: PhoneNumber) -> CallReader: ...

class CallUpdater(Updater):
    def __init__(self, *args: AnyStr) -> None: ...
    def setFallbackMethod(self, fallbackMethod: HttpMethod) -> CallUpdater: ...
    def setFallbackUrl(self, fallbackUrl: Union[AnyStr, URI]) -> CallUpdater: ...
    def setMethod(self, method: HttpMethod) -> CallUpdater: ...
    def setStatus(self, status: Call.UpdateStatus) -> CallUpdater: ...
    def setStatusCallback(self, statusCallback: Union[AnyStr, URI]) -> CallUpdater: ...
    def setUrl(self, url: Union[AnyStr, URI]) -> CallUpdater: ...
