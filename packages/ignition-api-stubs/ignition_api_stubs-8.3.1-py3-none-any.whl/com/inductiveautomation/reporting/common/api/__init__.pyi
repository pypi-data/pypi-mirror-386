from typing import Any, Dict, List, Optional

from com.inductiveautomation.ignition.common import BasicDataset
from dev.coatl.helper.types import AnyStr
from java.lang import Object
from java.util import AbstractList

class QueryResults(AbstractList):
    class Row(Object):
        def getKeys(self) -> List[AnyStr]: ...
        def getKeyValue(self, aKey: AnyStr) -> Object: ...

    def __init__(
        self,
        dataset: BasicDataset,
        parent: Optional[Any] = ...,
        parentRow: Optional[int] = ...,
    ) -> None: ...
    def addNestedQueryResults(self, key: AnyStr, results: QueryResults) -> None: ...
    def get(self, index: int) -> QueryResults.Row: ...
    def getCoreResults(self) -> BasicDataset: ...
    def getNestedQueryResults(self) -> Dict[AnyStr, List[QueryResults]]: ...
    def lookup(self, rowIndex: int, keyName: AnyStr) -> Object: ...
    def size(self) -> int: ...
