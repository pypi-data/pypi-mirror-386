from typing import Any, Iterable, List, Optional

from java.lang import Enum, Object
from java.util import AbstractCollection, Comparator
from java.util.stream import Collector

class BoundType(Enum):
    CLOSED: str
    OPEN: str
    @staticmethod
    def values() -> List[BoundType]: ...

class DiscreteDomain(Object):
    @staticmethod
    def bigIntegers() -> DiscreteDomain: ...
    def distance(self, start: Any, end: Any) -> long: ...
    @staticmethod
    def integers() -> DiscreteDomain: ...
    @staticmethod
    def longs() -> DiscreteDomain: ...
    def maxValue(self) -> Any: ...
    def minValue(self) -> Any: ...
    def next(self, value: Any) -> Any: ...
    def previous(self, value: Any) -> Any: ...

class ImmutableCollection(AbstractCollection):
    class Builder(Object):
        def add(self, *elements: Any) -> ImmutableCollection.Builder: ...
        def addAll(self, elements: Any) -> ImmutableCollection.Builder: ...
        def build(self) -> ImmutableCollection: ...

    def asList(self) -> ImmutableList: ...
    def contains(self, o: Object) -> bool: ...

class ImmutableList(ImmutableCollection):
    class Builder(ImmutableCollection.Builder):
        def build(self) -> ImmutableList: ...

    @staticmethod
    def builder() -> ImmutableList.Builder: ...
    @staticmethod
    def builderWithExpectedSize() -> ImmutableList.Builder: ...
    def contains(self, o: Object) -> bool: ...
    @staticmethod
    def copyOf(*args: Any) -> ImmutableList: ...
    def indexOf(self, obj: Object) -> int: ...
    def lastIndexOf(self, obj: Object) -> int: ...
    def listIterator(self, index: Optional[int] = ...) -> UnmodifiableListIterator: ...
    @staticmethod
    def of(*args: Any) -> ImmutableList: ...
    @staticmethod
    def sortedCopyOf(
        comparator: Comparator, elements: Iterable[Any]
    ) -> ImmutableList: ...
    def subList(self, fromIndex: int, toIndex: int) -> ImmutableList: ...
    @staticmethod
    def toImmutableList() -> Collector: ...

class ImmutableSet(ImmutableCollection):
    class Builder(ImmutableCollection.Builder):
        def __init__(self) -> None: ...
        def build(self) -> ImmutableSet: ...

    @staticmethod
    def builder() -> ImmutableSet.Builder: ...
    @staticmethod
    def builderWithExpectedSize() -> ImmutableSet.Builder: ...
    def contains(self, o: Object) -> bool: ...
    @staticmethod
    def copyOf(*args: Any) -> ImmutableSet: ...
    @staticmethod
    def of(*args: Any) -> ImmutableSet: ...
    @staticmethod
    def toImmutableSet() -> Collector: ...

class Range(Object):
    @staticmethod
    def all() -> Range: ...
    def apply(self, input: Any) -> bool: ...
    @staticmethod
    def atLeast(endpoint: Any) -> Range: ...
    @staticmethod
    def atMost(endpoint: Any) -> Range: ...
    def canonical(self, domain: DiscreteDomain) -> Range: ...
    @staticmethod
    def closed(lower: Any, upper: Any) -> Range: ...
    @staticmethod
    def closedOpen(lower: Any, upper: Any) -> Range: ...
    def contains(self, value: Any) -> bool: ...
    def containsAll(self, values: Iterable[Any]) -> bool: ...
    @staticmethod
    def downTo(endpoint: Any) -> Range: ...
    @staticmethod
    def encloseAll(values: Iterable[Any]) -> Range: ...
    def encloses(self, other: Range) -> bool: ...
    def gap(self, otherRange: Range) -> Range: ...
    @staticmethod
    def greaterThan(endpoint: Any) -> Range: ...
    def hasLowerBound(self) -> bool: ...
    def hasUpperBound(self) -> bool: ...
    def intersection(self, connectedRange: Range) -> Range: ...
    def isConnected(self, other: Range) -> bool: ...
    def isEmpty(self) -> bool: ...
    @staticmethod
    def lessThan(endpoint: Any) -> Range: ...
    def lowerBoundType(self) -> BoundType: ...
    def lowerEndpoint(self) -> Any: ...
    @staticmethod
    def open(lower: Any, upper: Any) -> Range: ...
    @staticmethod
    def openClosed(lower: Any, upper: Any) -> Range: ...
    @staticmethod
    def range(
        lower: Any, lowerType: BoundType, upper: Any, upperType: BoundType
    ) -> Range: ...
    @staticmethod
    def singleton(value: Any) -> Range: ...
    def span(self, other: Range) -> Range: ...
    def upperBoundType(self) -> BoundType: ...
    def upperEndpoint(self) -> Any: ...
    @staticmethod
    def upTo(endpoint: Any, boundType: BoundType) -> Range: ...

class UnmodifiableIterator(Object):
    def remove(self) -> None: ...

class UnmodifiableListIterator(UnmodifiableIterator):
    def add(self, e: Any) -> None: ...
    def set(self, e: Any) -> None: ...
