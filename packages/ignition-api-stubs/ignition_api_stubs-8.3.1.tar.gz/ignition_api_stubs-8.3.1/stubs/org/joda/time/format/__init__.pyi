from typing import Any, Optional, Union

from dev.coatl.helper.types import AnyStr
from java.io import Writer
from java.lang import CharSequence, Object, String, StringBuffer
from java.util import Locale
from org.joda.time import (
    Chronology,
    DateTime,
    DateTimeZone,
    LocalDate,
    LocalDateTime,
    LocalTime,
    MutableDateTime,
    MutablePeriod,
    Period,
    PeriodType,
    ReadableInstant,
    ReadablePartial,
    ReadablePeriod,
    ReadWritableInstant,
    ReadWritablePeriod,
)

class DateTimeParser:
    def estimatedsParsedLength(self) -> int: ...
    def parseInto(
        self, bucket: DateTimeParserBucket, text: AnyStr, position: int
    ) -> int: ...

class DateTimePrinter:
    def estimatedsPrintedLength(self) -> int: ...
    def printTo(self, *args: Any) -> None: ...

class PeriodParser:
    def parseInto(
        self,
        period: ReadWritablePeriod,
        periodStr: AnyStr,
        position: int,
        locale: Locale,
    ) -> int: ...

class PeriodPrinter:
    def calculatePrintedLength(self, period: ReadablePeriod, locale: Locale) -> int: ...
    def countFieldsToPrint(
        self, period: ReadablePeriod, stopAt: int, locale: Locale
    ) -> int: ...
    def printTo(self, *args: Any) -> None: ...

class DateTimeFormatter(Object):
    def __init__(self, printer: DateTimePrinter, parser: DateTimeParser) -> None: ...
    def getChronology(self) -> Chronology: ...
    def getDefaultYear(self) -> int: ...
    def getLocale(self) -> Locale: ...
    def getParser(self) -> DateTimeParser: ...
    def getPivotYear(self) -> int: ...
    def getPrinter(self) -> DateTimePrinter: ...
    def getZone(self) -> DateTimeZone: ...
    def isOffsetParsed(self) -> bool: ...
    def isParser(self) -> bool: ...
    def isPrinter(self) -> bool: ...
    def parseDateTime(self, text: AnyStr) -> DateTime: ...
    def parseInto(
        self, instant: ReadWritableInstant, text: AnyStr, position: int
    ) -> int: ...
    def parseLocalDate(self, text: AnyStr) -> LocalDate: ...
    def parseLocalDateTime(self, text: AnyStr) -> LocalDateTime: ...
    def parseLocalTime(self, text: AnyStr) -> LocalTime: ...
    def parseMillis(self, text: AnyStr) -> long: ...
    def parseMutableDateTime(self, text: AnyStr) -> MutableDateTime: ...
    def print(self, arg: Union[long, ReadableInstant, ReadablePartial]) -> AnyStr: ...
    def printTo(self, *args: Any) -> None: ...
    def withChronology(self, chrono: Chronology) -> DateTimeFormatter: ...
    def withDefaultYear(self, defaultYear: int) -> DateTimeFormatter: ...
    def withLocale(self, locale: Locale) -> DateTimeFormatter: ...
    def withOffsetParsed(self) -> DateTimeFormatter: ...
    def withPivotYear(self, pivotYear: int) -> DateTimeFormatter: ...
    def withZone(self, zone: DateTimeZone) -> DateTimeFormatter: ...
    def withZoneUTC(self) -> DateTimeFormatter: ...

class DateTimeParserBucket(Object):
    def __init__(
        self,
        instantLocal: long,
        chrono: Chronology,
        locale: Locale,
        pivotYear: int,
        defaultYear: int,
    ) -> None: ...
    def computeMillis(
        self,
        resetFields: Optional[bool] = ...,
        text: Union[CharSequence, String, None] = ...,
    ) -> long: ...
    def getChronology(self) -> Chronology: ...
    def getLocale(self) -> Locale: ...
    def getOffsetInteger(self) -> Optional[int]: ...
    def getPivotYear(self) -> int: ...
    def getZone(self) -> DateTimeZone: ...
    def parseMillis(self, parser: DateTimeParser, text: CharSequence) -> long: ...
    def reset(self) -> None: ...
    def restoreState(self, savedState: Object) -> None: ...
    def saveField(self, *args: Any) -> None: ...
    def saveState(self) -> Object: ...
    def setOffset(self, offset: int) -> None: ...
    def setZone(self, zone: DateTimeZone) -> None: ...

class PeriodFormatter(Object):
    def __init__(self, printer: PeriodPrinter, parser: PeriodParser) -> None: ...
    def getLocale(self) -> Locale: ...
    def getParser(self) -> PeriodParser: ...
    def getParseType(self) -> PeriodType: ...
    def getPrinter(self) -> PeriodPrinter: ...
    def isParser(self) -> bool: ...
    def isPrinter(self) -> bool: ...
    def parseInto(
        self, period: ReadWritablePeriod, text: AnyStr, position: int
    ) -> int: ...
    def parseMutablePeriod(self, text: AnyStr) -> MutablePeriod: ...
    def parsePeriod(self, text: AnyStr) -> Period: ...
    def print(self, period: ReadablePeriod) -> None: ...
    def printTo(
        self, arg: Union[StringBuffer, Writer], period: ReadablePeriod
    ) -> PeriodFormatter: ...
    def withLocale(self, locale: Locale) -> PeriodFormatter: ...
    def withParseType(self, type_: Locale) -> PeriodType: ...
