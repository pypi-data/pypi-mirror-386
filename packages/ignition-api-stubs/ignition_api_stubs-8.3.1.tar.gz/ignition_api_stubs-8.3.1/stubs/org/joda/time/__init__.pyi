from typing import Any, List, Optional, Union

from dev.coatl.helper.types import AnyNum, AnyStr
from java.lang import Comparable, Object
from java.math import RoundingMode
from java.util import Calendar, Date, Locale, TimeZone
from org.joda.time.base import (
    AbstractInstant,
    BaseDateTime,
    BaseDuration,
    BaseInterval,
    BaseLocal,
    BasePeriod,
    BaseSingleFieldPeriod,
)
from org.joda.time.field import AbstractReadableInstantFieldProperty
from org.joda.time.format import DateTimeFormatter, PeriodFormatter
from org.joda.time.tz import NameProvider, Provider

class ReadableInstant(Comparable):
    def compareTo(self, o: Any) -> int: ...
    def equals(self, readableInstant: Object) -> bool: ...
    def get(self, type_: DateTimeFieldType) -> int: ...
    def getChronology(self) -> Chronology: ...
    def getMillis(self) -> long: ...
    def getZone(self) -> DateTimeZone: ...
    def hashCode(self) -> int: ...
    def isAfter(self, instant: Union[long, ReadableInstant]) -> bool: ...
    def isBefore(self, instant: ReadableInstant) -> bool: ...
    def isEqual(self, instant: ReadableInstant) -> bool: ...
    def isSupported(self, field: DateTimeFieldType) -> bool: ...
    def toInstant(self) -> Instant: ...

class ReadableDateTime(ReadableInstant):
    def getCenturyOfEra(self) -> int: ...
    def getDayOfMonth(self) -> int: ...
    def getDayOfWeek(self) -> int: ...
    def getDayOfYear(self) -> int: ...
    def getEra(self) -> int: ...
    def getHourOfDay(self) -> int: ...
    def getMillisOfDay(self) -> int: ...
    def getMillisOfSecond(self) -> int: ...
    def getMinuteOfDay(self) -> int: ...
    def getMinuteOfHour(self) -> int: ...
    def getMonthOfYear(self) -> int: ...
    def getSecondOfDay(self) -> int: ...
    def getSecondOfMinute(self) -> int: ...
    def getWeekOfWeekyear(self) -> int: ...
    def getWeekyear(self) -> int: ...
    def getYear(self) -> int: ...
    def getYearOfCentury(self) -> int: ...
    def getYearOfEra(self) -> int: ...
    def toDateTime(self) -> DateTime: ...
    def toMutableDateTime(self) -> MutableDateTime: ...

class ReadableDuration(Comparable):
    def compareTo(self, o: Any) -> int: ...
    def equals(self, readableDuration: ReadableDuration) -> bool: ...
    def getMillis(self) -> long: ...
    def hashCode(self) -> int: ...
    def isEqual(self, duration: ReadableDuration) -> bool: ...
    def isLongerThan(self, duration: ReadableDuration) -> bool: ...
    def isShorterThan(self, duration: ReadableDuration) -> bool: ...
    def toDuration(self) -> Duration: ...
    def toPeriod(self) -> Period: ...
    def toString(self) -> AnyStr: ...

class ReadableInterval:
    def contains(self, instant: Union[ReadableInterval, ReadableInstant]) -> bool: ...
    def equals(self, readableInterval: Object) -> bool: ...
    def getChronology(self) -> Chronology: ...
    def getEnd(self) -> DateTime: ...
    def getEndMillis(self) -> long: ...
    def getStart(self) -> DateTime: ...
    def getStartMillis(self) -> long: ...
    def hashCode(self) -> int: ...
    def isAfter(self, instant: Union[ReadableInterval, ReadableInstant]) -> bool: ...
    def isBefore(self, instant: Union[ReadableInterval, ReadableInstant]) -> bool: ...
    def overlaps(self, interval: ReadableInterval) -> bool: ...
    def toDuration(self) -> Duration: ...
    def toDurationMillis(self) -> long: ...
    def toInterval(self) -> Interval: ...
    def toMutableInterval(self) -> MutableInterval: ...
    def toPeriod(self, type_: Optional[PeriodType] = ...) -> Period: ...
    def toString(self) -> AnyStr: ...

class ReadablePartial(Comparable):
    def compareTo(self, o: Any) -> int: ...
    def equals(self, partial: Object) -> bool: ...
    def get(self, field: DateTimeFieldType) -> int: ...
    def getChronology(self) -> Chronology: ...
    def getField(self, index: int) -> DateTimeField: ...
    def getFieldType(self, index: int) -> DateTimeFieldType: ...
    def getValue(self) -> int: ...
    def hashCode(self) -> int: ...
    def isSupported(self, field: DateTimeFieldType) -> bool: ...
    def size(self) -> int: ...
    def toDateTime(self, baseInstant: ReadableInstant) -> DateTime: ...
    def toString(self) -> AnyStr: ...

class ReadablePeriod:
    def equals(self, readablePeriod: Object) -> bool: ...
    def get(self, arg: DurationFieldType) -> int: ...
    def getFieldType(self, index: int) -> DurationFieldType: ...
    def getPeriodType(self) -> PeriodType: ...
    def getValue(self, index: int) -> int: ...
    def hashCode(self) -> int: ...
    def isSupported(self, type_: DurationFieldType) -> bool: ...
    def size(self) -> int: ...
    def toMutablePeriod(self) -> MutablePeriod: ...
    def toPeriod(self) -> Period: ...
    def toString(self) -> AnyStr: ...

class ReadWritableInstant(ReadableInstant):
    def add(self, *args: Any) -> None: ...
    def set(self, type_: DateTimeFieldType, value: int) -> None: ...
    def setChronology(self, chronology: Chronology) -> None: ...
    def setMillis(self, instant: Union[ReadableInstant, long]) -> None: ...
    def setZone(self, zone: DateTimeZone) -> None: ...
    def setZoneRetainFields(self, zone: DateTimeZone) -> None: ...

class ReadWritableDateTime(ReadableDateTime, ReadWritableInstant):
    def addDays(self, days: int) -> None: ...
    def addHours(self, hours: int) -> None: ...
    def addMillis(self, millis: int) -> None: ...
    def addMinutes(self, minutes: int) -> None: ...
    def addMonths(self, months: int) -> None: ...
    def addSeconds(self, seconds: int) -> None: ...
    def addWeeks(self, weeks: int) -> None: ...
    def addWeekyears(self, weekyears: int) -> None: ...
    def addYears(self, years: int) -> None: ...
    def setDate(self, year: int, monthOfYear: int, dayOfMonth: int) -> None: ...
    def setDateTime(
        self,
        year: int,
        monthOfYear: int,
        dayOfMonth: int,
        hourOfDay: int,
        minuteOfHour: int,
        secondOfMinute: int,
        millisOfSecond: int,
    ) -> None: ...
    def setDayOfMonth(self, dayOfMonth: int) -> None: ...
    def setDayOfWeek(self, dayOfWeek: int) -> None: ...
    def setDayOfYear(self, dayOfYear: int) -> None: ...
    def setHourOfDay(self, hourOfDay: int) -> None: ...
    def setMillisOfDay(self, millisOfDay: int) -> None: ...
    def setMillisOfSecond(self, millisOfSecond: int) -> None: ...
    def setMinuteOfDay(self, minuteOfDay: int) -> None: ...
    def setMinuteOfHour(self, minuteOfHour: int) -> None: ...
    def setMonthOfYear(self, monthOfYear: int) -> None: ...
    def setSecondOfDay(self, secondOfDay: int) -> None: ...
    def setSecondOfMinute(self, secondOfMinute: int) -> None: ...
    def setTime(
        self, hour: int, minuteOfHour: int, secondOfMinute: int, millisOfSecond: int
    ) -> None: ...
    def setWeekOfWeekyear(self, weekOfWeekyear: int) -> None: ...
    def setWeekyear(self, weekyear: int) -> None: ...
    def setYear(self, year: int) -> None: ...

class ReadWritablePeriod(ReadablePeriod):
    def add(self, *args: Any) -> None: ...
    def addDays(self, days: int) -> None: ...
    def addHours(self, hours: int) -> None: ...
    def addMillis(self, millis: int) -> None: ...
    def addMinutes(self, minutes: int) -> None: ...
    def addMonths(self, months: int) -> None: ...
    def addSeconds(self, seconds: int) -> None: ...
    def addWeeks(self, weeks: int) -> None: ...
    def addYears(self, years: int) -> None: ...
    def clear(self) -> None: ...
    def set(self, field: DurationFieldType, value: int) -> None: ...
    def setDays(self, days: int) -> None: ...
    def setHours(self, hours: int) -> None: ...
    def setMillis(self, millis: int) -> None: ...
    def setMinutes(self, minutes: int) -> None: ...
    def setPeriod(self, *args: Any) -> None: ...
    def setSeconds(self, seconds: int) -> None: ...
    def setValue(self, index: int, value: int) -> None: ...
    def setWeek(self, weeks: int) -> None: ...
    def setYears(self, years: int) -> None: ...

class Chronology(Object):
    def __init__(self) -> None: ...
    def add(self, *args: Any) -> long: ...
    def centuries(self) -> DurationField: ...
    def centuryOfEra(self) -> DateTimeField: ...
    def clockhourOfDay(self) -> DateTimeField: ...
    def clockhourOfHalfday(self) -> DateTimeField: ...
    def dayOfMonth(self) -> DateTimeField: ...
    def dayOfWeek(self) -> DateTimeField: ...
    def dayOfYear(self) -> DateTimeField: ...
    def days(self) -> DateTimeField: ...
    def era(self) -> DateTimeField: ...
    def eras(self) -> DurationField: ...
    def get(self, *args: Any) -> Any: ...
    def getDateTimeMillis(self, *args: Any) -> long: ...
    def getZone(self) -> DateTimeZone: ...
    def halfdayOfDay(self) -> DateTimeField: ...
    def halfdays(self) -> DurationField: ...
    def hourOfDay(self) -> DateTimeField: ...
    def hours(self) -> DurationField: ...
    def millis(self) -> DurationField: ...
    def millisOfDay(self) -> DateTimeField: ...
    def millisOfSecond(self) -> DateTimeField: ...
    def minuteOfDay(self) -> DateTimeField: ...
    def minuteOfHour(self) -> DateTimeField: ...
    def minutes(self) -> DurationField: ...
    def monthOfYear(self) -> DateTimeField: ...
    def months(self) -> DurationField: ...
    def secondOfDay(self) -> DateTimeField: ...
    def secondOfMinute(self) -> DateTimeField: ...
    def seconds(self) -> DurationField: ...
    def set(self, partial: ReadablePartial, instant: long) -> long: ...
    def validate(self, partial: ReadablePartial, values: List[int]) -> None: ...
    def wekOfWeekyear(self) -> DateTimeField: ...
    def weeks(self) -> DurationField: ...
    def weekyear(self) -> DateTimeField: ...
    def weekyearOfCentury(self) -> DateTimeField: ...
    def weekyears(self) -> DurationField: ...
    def withUTC(self) -> Chronology: ...
    def withZone(self, zone: DateTimeZone) -> Chronology: ...
    def year(self) -> DateTimeField: ...
    def yearOfCentury(self) -> DateTimeField: ...
    def yearOfEra(self) -> DateTimeField: ...
    def years(self) -> DurationField: ...

class DateTime(BaseDateTime):
    class Property(AbstractReadableInstantFieldProperty):
        def addToCopy(self, value: AnyNum) -> DateTime: ...
        def addWrapFieldToCopy(self, value: int) -> DateTime: ...
        def getLocalDate(self) -> LocalDate: ...
        def roundCeilingCopy(self) -> DateTime: ...
        def roundFloorCopy(self) -> DateTime: ...
        def roundHalfCeilingCopy(self) -> DateTime: ...
        def roundHalfEvenCopy(self) -> DateTime: ...
        def roundHalfFloorCopy(self) -> DateTime: ...
        def setCopy(self, *args: Any) -> DateTime: ...
        def withMaximumValue(self) -> DateTime: ...
        def withMinimumValue(self) -> DateTime: ...

    def __init__(self, *args: Any) -> None: ...
    def centuryOfEra(self) -> DateTime.Property: ...
    def dayOfMonth(self) -> DateTime.Property: ...
    def dayOfWeek(self) -> DateTime.Property: ...
    def dayOfYear(self) -> DateTime.Property: ...
    def era(self) -> DateTime.Property: ...
    def hourOfDay(self) -> DateTime.Property: ...
    def millisOfDay(self) -> DateTime.Property: ...
    def millisOfSecond(self) -> DateTime.Property: ...
    def minus(self, arg: Union[long, ReadableDuration, ReadablePeriod]) -> DateTime: ...
    def minusDays(self, days: int) -> DateTime: ...
    def minusHours(self, hours: int) -> DateTime: ...
    def minusMillis(self, millis: int) -> DateTime: ...
    def minusMinutes(self, minutes: int) -> DateTime: ...
    def minusMonths(self, months: int) -> DateTime: ...
    def minusSeconds(self, seconds: int) -> DateTime: ...
    def minusWeeks(self, weeks: int) -> DateTime: ...
    def minusYears(self, years: int) -> DateTime: ...
    def minuteOfDay(self) -> DateTime.Property: ...
    def minuteOfHour(self) -> DateTime.Property: ...
    def monthOfYear(self) -> DateTime.Property: ...
    @staticmethod
    def now(arg: Union[Chronology, DateTimeZone, None] = ...) -> DateTime: ...
    @staticmethod
    def parse(
        str_: AnyStr, formatter: Optional[DateTimeFormatter] = ...
    ) -> DateTime: ...
    def plus(self, arg: Union[long, ReadableDuration, ReadablePeriod]) -> DateTime: ...
    def plusDays(self, days: int) -> DateTime: ...
    def plusHours(self, hours: int) -> DateTime: ...
    def plusMillis(self, millis: int) -> DateTime: ...
    def plusMinutes(self, minutes: int) -> DateTime: ...
    def plusMonths(self, months: int) -> DateTime: ...
    def plusSeconds(self, seconds: int) -> DateTime: ...
    def plusWeeks(self, weeks: int) -> DateTime: ...
    def plusYears(self, years: int) -> DateTime: ...
    def property(self, type_: DateTimeFieldType) -> DateTime.Property: ...
    def secondOfDay(self) -> DateTime.Property: ...
    def secondOfMinute(self) -> DateTime.Property: ...
    def toLocalDate(self) -> LocalDate: ...
    def toLocalDateTime(self) -> LocalDateTime: ...
    def toLocalTime(self) -> LocalTime: ...
    def weekOfWeekyear(self) -> DateTime.Property: ...
    def weekyear(self) -> DateTime.Property: ...
    def withCenturyOfEra(self, centuryOfEra: int) -> DateTime: ...
    def withChronology(self, newChronology: Chronology) -> DateTime: ...
    def withDate(self, *args: Any) -> DateTime: ...
    def withDayOfMonth(self, dayOfMonth: int) -> DateTime: ...
    def withDayOfWeek(self, dayOfWeek: int) -> DateTime: ...
    def withDayOfYear(self, dayOfYear: int) -> DateTime: ...
    def withDurationAdded(
        self, durationToAdd: Union[long, ReadableDuration], scalar: int
    ) -> DateTime: ...
    def withEarlierOffsetAtOverlap(self) -> DateTime: ...
    def withEra(self, era: int) -> DateTime: ...
    def withField(self, fieldType: DateTimeFieldType, value: int) -> DateTime: ...
    def withFieldAdded(self, fieldType: DateTimeFieldType, amount: int) -> DateTime: ...
    def withFields(self, partial: ReadablePartial) -> DateTime: ...
    def withHourOfDay(self, hour: int) -> DateTime: ...
    def withLaterOffsetAtOverlap(self) -> DateTime: ...
    def withMillis(self, newMillis: long) -> DateTime: ...
    def withMillisOfDay(self, millis: int) -> DateTime: ...
    def withMillisOfSecond(self, millis: int) -> DateTime: ...
    def withMinuteOfHour(self, minute: int) -> DateTime: ...
    def withMonthOfYear(self, month: int) -> DateTime: ...
    def withPeriodAdded(self, periodToAdd: ReadablePeriod, scalar: int) -> DateTime: ...
    def withSecondOfMinute(self, second: int) -> DateTime: ...
    def withTime(self, *args: Any) -> DateTime: ...
    def withTimeAtStartOfDay(self) -> DateTime: ...
    def withWeekOfWeekyear(self, weekOfWeekyear: int) -> DateTime: ...
    def withWeekyear(self, weekyear: int) -> DateTime: ...
    def withYear(self, year: int) -> DateTime: ...
    def withYearOfCentury(self, yearOfCentury: int) -> DateTime: ...
    def withYearOfEra(self, yearOfEra: int) -> DateTime: ...
    def withZone(self, newZone: DateTimeZone) -> DateTime: ...
    def withZoneRetainFields(self, newZone: DateTimeZone) -> DateTime: ...
    def year(self) -> DateTime.Property: ...
    def yearOfCentury(self) -> DateTime.Property: ...
    def yearOfEra(self) -> DateTime.Property: ...

class DateTimeField(Object):
    def __init__(self) -> None: ...
    def add(self, *args: Any) -> Union[long, List[int]]: ...
    def addWrapField(self, *args: Any) -> Union[long, List[int]]: ...
    def addWrapPartial(
        self,
        instant: ReadablePartial,
        fieldIndex: int,
        values: List[int],
        valueToAdd: int,
    ) -> List[int]: ...
    def get(self, instant: long) -> int: ...
    def getAsShortText(self, *args: Any) -> AnyStr: ...
    def getAsText(self, *args: Any) -> AnyStr: ...
    def getDifference(self, minuendInstant: long, subtrahendInstant: long) -> int: ...
    def getDurationField(self) -> DurationField: ...
    def getLeapAmount(self, instant: long) -> int: ...
    def getLeapDurationField(self) -> DurationField: ...
    def getMaximumShortTextLength(self, locale: Locale) -> int: ...
    def getMaximumTextLength(self, locale: Locale) -> int: ...
    def getMaximumValue(self, *args: Any) -> int: ...
    def getMinimumValue(self, *args: Any) -> int: ...
    def getName(self) -> AnyStr: ...
    def getRangeDurationField(self) -> DurationField: ...
    def getType(self) -> DateTimeFieldType: ...
    def isLeap(self, instant: long) -> bool: ...
    def isLenient(self) -> bool: ...
    def isSupported(self) -> bool: ...
    def remainder(self, instant: long) -> long: ...
    def roundCeiling(self, instant: long) -> long: ...
    def roundFloor(self, instant: long) -> long: ...
    def roundHalfCeiling(self, instant: long) -> long: ...
    def roundHalfEven(self, instant: long) -> long: ...
    def roundHalfFloor(self, instant: long) -> long: ...
    def set(self, *args: Any) -> Union[long, List[int]]: ...
    def setExtended(self, instant: long, value: int) -> long: ...

class DateTimeFieldType(Object):
    @staticmethod
    def centuryOfEra() -> DateTimeFieldType: ...
    @staticmethod
    def clockhourOfDay() -> DateTimeFieldType: ...
    @staticmethod
    def clockhourOfHalfday() -> DateTimeFieldType: ...
    @staticmethod
    def dayOfMonth() -> DateTimeFieldType: ...
    @staticmethod
    def dayOfWeek() -> DateTimeFieldType: ...
    @staticmethod
    def dayOfYear() -> DateTimeFieldType: ...
    @staticmethod
    def era() -> DateTimeFieldType: ...
    def getDurationType(self) -> DurationFieldType: ...
    @staticmethod
    def halfdayOfDay() -> DateTimeFieldType: ...
    @staticmethod
    def hourOfDay() -> DateTimeFieldType: ...
    @staticmethod
    def hourOfHalfday() -> DateTimeFieldType: ...
    def isSupported(self, chronology: Chronology) -> bool: ...
    @staticmethod
    def millisOfDay() -> DateTimeFieldType: ...
    @staticmethod
    def millisOfSecond() -> DateTimeFieldType: ...
    @staticmethod
    def minuteOfDay() -> DateTimeFieldType: ...
    @staticmethod
    def minuteOfHour() -> DateTimeFieldType: ...
    @staticmethod
    def monthOfYear() -> DateTimeFieldType: ...
    @staticmethod
    def secondOfDay() -> DateTimeFieldType: ...
    @staticmethod
    def secondOfMinute() -> DateTimeFieldType: ...
    @staticmethod
    def weekOfWeekyear() -> DateTimeFieldType: ...
    @staticmethod
    def weekyear() -> DateTimeFieldType: ...
    @staticmethod
    def weekyearOfCentury() -> DateTimeFieldType: ...
    @staticmethod
    def year() -> DateTimeFieldType: ...
    @staticmethod
    def yearOfCentury() -> DateTimeFieldType: ...
    @staticmethod
    def yearOfEra() -> DateTimeFieldType: ...

class DateTimeZone(Object):
    DEFAULT_TZ_DATA_PATH: AnyStr
    UTC: DateTimeZone
    def adjustOffset(self, instant: long, earlierOrLater: bool) -> long: ...
    def convertLocalToUTC(
        self,
        instantLocal: long,
        strict: bool = ...,
        originalInstantUTC: Optional[long] = ...,
    ) -> long: ...
    @staticmethod
    def forID(id_: AnyStr) -> DateTimeZone: ...
    @staticmethod
    def forOffsetHours(hoursOffset: int) -> DateTimeZone: ...
    @staticmethod
    def forOffsetHoursMinutes(hoursOffset: int, minutesOffset: int) -> DateTimeZone: ...
    @staticmethod
    def forOffsetMillis(millisOffset: int) -> DateTimeZone: ...
    @staticmethod
    def forTimeZOne(zone: TimeZone) -> DateTimeZone: ...
    @staticmethod
    def getAvailableIDs() -> List[AnyStr]: ...
    @staticmethod
    def getDefault() -> DateTimeZone: ...
    def getID(self) -> AnyStr: ...
    def getMillisKeepLocal(self, newZone: DateTimeZone, oldInstant: long) -> long: ...
    def getName(self, instant: long) -> AnyStr: ...
    def getNameKey(self, instant: long) -> AnyStr: ...
    @staticmethod
    def getNameProvider() -> NameProvider: ...
    def getOffset(self, instant: long) -> int: ...
    def getOffsetFromLocal(self, instantLocal: long) -> int: ...
    @staticmethod
    def getProvider() -> Provider: ...
    def getShortName(self, instant: long, locale: Optional[Locale] = ...) -> AnyStr: ...
    def getStandardOffset(self, instant: long) -> int: ...
    def isFixed(self) -> bool: ...
    def isLocalDateTimeGap(self, localDateTime: LocalDateTime) -> bool: ...
    def isStandardOffset(self, instant: long) -> bool: ...
    def nextTransition(self, instant: long) -> long: ...
    def previousTransition(self, instant: long) -> long: ...
    @staticmethod
    def setDefault(zone: DateTimeZone) -> None: ...
    @staticmethod
    def setNameProvider(nameProvider: NameProvider) -> None: ...
    @staticmethod
    def setProvider(provider: Provider) -> None: ...
    def toTimeZone(self) -> TimeZone: ...

class Days(BaseSingleFieldPeriod):
    FIVE: Days
    FOUR: Days
    MAX_VALUE: Days
    MIN_VALUE: Days
    ONE: Days
    SEVEN: Days
    SIX: Days
    THREE: Days
    TWO: Days
    ZERO: Days
    @staticmethod
    def days(days: int) -> Days: ...
    @staticmethod
    def daysBetwwen(
        start: Union[ReadableInstant, ReadablePartial],
        end: Union[ReadableInstant, ReadablePartial],
    ) -> Days: ...
    @staticmethod
    def daysIn(interval: ReadableInterval) -> Days: ...
    def dividedBy(self, divisor: int) -> Days: ...
    def getDays(self) -> int: ...
    def isGreaterThan(self, other: Days) -> bool: ...
    def isLessThan(self, other: Days) -> bool: ...
    def minus(self, days: Union[Days, int]) -> Days: ...
    def multipliedBy(self, scalar: int) -> Days: ...
    def negated(self) -> Days: ...
    @staticmethod
    def parseDays(periodStr: AnyStr) -> Days: ...
    def plus(self, days: Union[Days, int]) -> Days: ...
    @staticmethod
    def standardDaysIn(period: ReadablePeriod) -> Days: ...
    def toStandardDuration(self) -> Duration: ...
    def toStandardHours(self) -> Hours: ...
    def toStandardMinutes(self) -> Minutes: ...
    def toStandardSeconds(self) -> Seconds: ...
    def toStandardWeeks(self) -> Weeks: ...

class Duration(BaseDuration):
    ZERO: Duration
    def __init__(self, *args: Any) -> None: ...
    def abs(self) -> Duration: ...
    def dividedBy(
        self, divisor: long, roundingMode: Optional[RoundingMode] = ...
    ) -> Duration: ...
    def getStandardDays(self) -> int: ...
    def getStandardHours(self) -> int: ...
    def getStandardMinutes(self) -> int: ...
    def getStandardSeconds(self) -> int: ...
    @staticmethod
    def millis(millis: long) -> Duration: ...
    def minus(self, amount: Union[long, ReadableDuration]) -> Duration: ...
    def multipliedBy(self, multiplicand: long) -> Duration: ...
    def negated(self) -> Duration: ...
    @staticmethod
    def parse(str_: AnyStr) -> Duration: ...
    def plus(self, amount: Union[long, ReadableDuration]) -> Duration: ...
    @staticmethod
    def standardDays(days: long) -> Duration: ...
    @staticmethod
    def standardHours(hours: long) -> Duration: ...
    @staticmethod
    def standardMinutes(minutes: long) -> Duration: ...
    @staticmethod
    def standardSeconds(seconds: long) -> Duration: ...
    def toStandardDays(self) -> Days: ...
    def toStandardHours(self) -> Hours: ...
    def toStandardMinutes(self) -> Minutes: ...
    def toStandardSeconds(self) -> Seconds: ...
    def withDurationAdded(
        self, durationToAdd: Union[long, ReadableDuration], scalar: int
    ) -> Duration: ...
    def withMillis(self, duration: long) -> Duration: ...

class DurationField(Object):
    def __init__(self) -> None: ...
    def add(self, instant: AnyNum, value: AnyNum) -> long: ...
    def getDifference(self, minuendInstant: long, subtrahendInstant: long) -> int: ...
    def getDifferenceAsLong(
        self, minuendInstant: long, subtrahendInstant: long
    ) -> long: ...
    def getMillis(self, *args: AnyNum) -> long: ...
    def getName(self) -> AnyStr: ...
    def getType(self) -> DurationFieldType: ...
    def getUnitMillis(self) -> long: ...
    def isPrecise(self) -> bool: ...
    def isSupported(self) -> bool: ...
    def subtract(self, instant: AnyNum, value: AnyNum) -> long: ...

class DurationFieldType(Object):
    @staticmethod
    def centuries() -> DurationFieldType: ...
    @staticmethod
    def days() -> DurationFieldType: ...
    @staticmethod
    def eras() -> DurationFieldType: ...
    @staticmethod
    def getField(chronology: Chronology) -> DurationField: ...
    def getName(self) -> AnyStr: ...
    @staticmethod
    def halfdays() -> DurationFieldType: ...
    @staticmethod
    def hours() -> DurationFieldType: ...
    def isSupported(self, chronology: Chronology) -> bool: ...
    @staticmethod
    def millis() -> DurationFieldType: ...
    @staticmethod
    def minutes() -> DurationFieldType: ...
    @staticmethod
    def months() -> DurationFieldType: ...
    @staticmethod
    def seconds() -> DurationFieldType: ...
    @staticmethod
    def weeks() -> DurationFieldType: ...
    @staticmethod
    def weekyears() -> DurationFieldType: ...
    @staticmethod
    def years() -> DurationFieldType: ...

class Hours(BaseSingleFieldPeriod):
    EIGHT: Hours
    FIVE: Hours
    FOUR: Hours
    MAX_VALUE: Hours
    MIN_VALUE: Hours
    ONE: Hours
    SEVEN: Hours
    SIX: Hours
    THREE: Hours
    TWO: Hours
    ZERO: Hours
    def dividedBy(self, divisor: int) -> Hours: ...
    def getHours(self) -> int: ...
    @staticmethod
    def hours(hours: int) -> Hours: ...
    @staticmethod
    def hoursBetween(
        start: Union[ReadableInstant, ReadablePartial],
        end: Union[ReadableInstant, ReadablePartial],
    ) -> Hours: ...
    @staticmethod
    def hoursIn(interval: ReadableInterval) -> Hours: ...
    def isGreaterThan(self, other: Hours) -> bool: ...
    def isLessThan(self, other: Hours) -> bool: ...
    def minus(self, hours: Union[Hours, int]) -> Hours: ...
    def multipliedBy(self, scalar: int) -> Hours: ...
    def negated(self) -> Hours: ...
    @staticmethod
    def parseHours(periodStr: AnyStr) -> Hours: ...
    def plus(self, hours: Union[Hours, int]) -> Hours: ...
    @staticmethod
    def standardHoursIn(period: ReadablePeriod) -> Hours: ...
    def toStandardDays(self) -> Days: ...
    def toStandardDuration(self) -> Duration: ...
    def toStandardMinutes(self) -> Minutes: ...
    def toStandardSeconds(self) -> Seconds: ...
    def toStandardWeeks(self) -> Weeks: ...

class Instant(AbstractInstant):
    def __init__(self, instant: Union[long, Object, None] = ...) -> None: ...
    def getChronology(self) -> Chronology: ...
    def getMillis(self) -> long: ...
    def minus(self, duration: Union[long, ReadableDuration]) -> Instant: ...
    @staticmethod
    def now() -> Instant: ...
    @staticmethod
    def ofEpochMilli(epochMilli: long) -> Instant: ...
    @staticmethod
    def ofEpochSecond(epochSecond: long) -> Instant: ...
    @staticmethod
    def parse(
        str_: AnyStr, formatter: Optional[DateTimeFormatter] = ...
    ) -> Instant: ...
    def plus(self, duration: Union[long, ReadableDuration]) -> Instant: ...
    def withDurationAdded(
        self, durationToAdd: Union[long, ReadableDuration], scalar: int
    ) -> Instant: ...
    def withMillis(self, newMillis: long) -> Instant: ...

class Interval(BaseInterval):
    def __init__(self, *args: Any) -> None: ...
    def abuts(self, interval: ReadableInterval) -> bool: ...
    def gap(self, interval: ReadableInterval) -> Interval: ...
    def overlap(self, interval: ReadableInterval) -> bool: ...
    @staticmethod
    def parse(str_: AnyStr) -> Interval: ...
    @staticmethod
    def parseWithOffset(str_: AnyStr) -> Interval: ...
    def withChronology(self, chronology: Chronology) -> Interval: ...
    def withDurationAfterStart(self, duration: ReadableDuration) -> Interval: ...
    def withDurationBeforeEnd(self, duration: ReadableDuration) -> Interval: ...
    def withEnd(self, end: ReadableInstant) -> Interval: ...
    def withEndMillis(self, endInstant: ReadableInstant) -> Interval: ...
    def withPeriodAfterStart(self, period: ReadablePeriod) -> Interval: ...
    def withPeriodBeforeEnd(self, period: ReadablePeriod) -> Interval: ...
    def withStart(self, start: ReadableInstant) -> Interval: ...
    def withStartMillis(self, startInstant: ReadableInstant) -> Interval: ...

class LocalDate(BaseLocal):
    class Property(AbstractReadableInstantFieldProperty):
        def addToCopy(self, value: AnyNum) -> LocalDate: ...
        def addWrapFieldToCopy(self, value: int) -> LocalDate: ...
        def roundCeilingCopy(self) -> LocalDate: ...
        def roundFloorCopy(self) -> LocalDate: ...
        def roundHalfCeilingCopy(self) -> LocalDate: ...
        def roundHalfEvenCopy(self) -> LocalDate: ...
        def roundHalfFloorCopy(self) -> LocalDate: ...
        def setCopy(self, *args: Any) -> LocalDate: ...
        def withMaximumValue(self) -> LocalDate: ...
        def withMinimumValue(self) -> LocalDate: ...

    def __init__(self, *args: Any) -> None: ...
    def centuryOfEra(self) -> LocalDate.Property: ...
    def dayOfMonth(self) -> LocalDate.Property: ...
    def dayOfWeek(self) -> LocalDate.Property: ...
    def dayOfYear(self) -> LocalDate.Property: ...
    def era(self) -> LocalDate.Property: ...
    @staticmethod
    def fromCalendarFields(calendar: Calendar) -> LocalDate: ...
    @staticmethod
    def fromDateFields(date: Date) -> LocalDate: ...
    def getCenturyOfEra(self) -> int: ...
    def getDayOfMonth(self) -> int: ...
    def getDayOfWeek(self) -> int: ...
    def getDayOfYear(self) -> int: ...
    def getEra(self) -> int: ...
    def getMonthOfYear(self) -> int: ...
    def getWeekOfYear(self) -> int: ...
    def getWeekyear(self) -> int: ...
    def getYear(self) -> int: ...
    def getYearOfCentury(self) -> int: ...
    def getYearOfEra(self) -> int: ...
    def minus(self, period: ReadablePeriod) -> LocalDate: ...
    def minusDays(self, days: int) -> LocalDate: ...
    def minusMonths(self, months: int) -> LocalDate: ...
    def minusWeeks(self, weeks: int) -> LocalDate: ...
    def minusYears(self, years: int) -> LocalDate: ...
    def monthOfYear(self) -> LocalDate.Property: ...
    @staticmethod
    def now(arg: Union[Chronology, DateTimeZone, None] = ...) -> LocalDate: ...
    @staticmethod
    def parse(
        str_: AnyStr, formatter: Optional[DateTimeFormatter] = ...
    ) -> LocalDate: ...
    def plus(self, period: ReadablePeriod) -> LocalDate: ...
    def plusDays(self, days: int) -> LocalDate: ...
    def plusMonths(self, months: int) -> LocalDate: ...
    def plusWeeks(self, weeks: int) -> LocalDate: ...
    def plusYears(self, years: int) -> LocalDate: ...
    def property(self, fieldType: DateTimeFieldType) -> LocalDate.Property: ...
    def toDate(self) -> Date: ...
    def toDateTimeAtCurrentTime(
        self, zone: Optional[DateTimeZone] = ...
    ) -> DateTime: ...
    def toDateTimeAtStartOfDay(
        self, zone: Optional[DateTimeZone] = ...
    ) -> DateTime: ...
    def toInterval(self, zone: Optional[DateTimeZone] = ...) -> Interval: ...
    def toLocalDateTime(self, time: LocalTime) -> LocalDateTime: ...
    def weekOfWeekyear(self) -> LocalDate.Property: ...
    def weekyear(self) -> LocalDate.Property: ...
    def withCenturyOfEra(self, centuryOfEra: int) -> LocalDate: ...
    def withDayOfMonth(self, dayOfMonth: int) -> LocalDate: ...
    def withDayOfWeek(self, dayOfWeek: int) -> LocalDate: ...
    def withDayOfYear(self, dayOfYear: int) -> LocalDate: ...
    def withEra(self, era: int) -> LocalDate: ...
    def withField(self, fieldType: DateTimeFieldType, value: int) -> LocalDate: ...
    def withFieldAdded(
        self, fieldType: DateTimeFieldType, amount: int
    ) -> LocalDate: ...
    def withFields(self, partial: ReadablePartial) -> LocalDate: ...
    def withMonthOfYear(self, month: int) -> LocalDate: ...
    def withPeriodAdded(
        self, periodToAdd: ReadablePeriod, scalar: int
    ) -> LocalDate: ...
    def withWeekOfWeekyear(self, weekOfWeekyear: int) -> LocalDate: ...
    def withWeekyear(self, weekyear: int) -> LocalDate: ...
    def withYear(self, year: int) -> LocalDate: ...
    def withYearOfCentury(self, yearOfCentury: int) -> LocalDate: ...
    def withYearOfEra(self, yearOfEra: int) -> LocalDate: ...
    def year(self) -> LocalDate.Property: ...
    def yearOfCentury(self) -> LocalDate.Property: ...
    def yearOfEra(self) -> LocalDate.Property: ...

class LocalDateTime(BaseLocal):
    class Property(AbstractReadableInstantFieldProperty):
        def addToCopy(self, value: AnyNum) -> LocalDateTime: ...
        def addWrapFieldToCopy(self, value: int) -> LocalDateTime: ...
        def roundCeilingCopy(self) -> LocalDateTime: ...
        def roundFloorCopy(self) -> LocalDateTime: ...
        def roundHalfCeilingCopy(self) -> LocalDateTime: ...
        def roundHalfEvenCopy(self) -> LocalDateTime: ...
        def roundHalfFloorCopy(self) -> LocalDateTime: ...
        def setCopy(self, *args: Any) -> LocalDateTime: ...
        def withMaximumValue(self) -> LocalDateTime: ...
        def withMinimumValue(self) -> LocalDateTime: ...

    def __init__(self, *args: Any) -> None: ...
    def centuryOfEra(self) -> LocalDateTime.Property: ...
    def dayOfMonth(self) -> LocalDateTime.Property: ...
    def dayOfWeek(self) -> LocalDateTime.Property: ...
    def dayOfYear(self) -> LocalDateTime.Property: ...
    def era(self) -> LocalDateTime.Property: ...
    @staticmethod
    def fromCalendarFields(calendar: Calendar) -> LocalDateTime: ...
    @staticmethod
    def fromDateFields(date: Date) -> LocalDateTime: ...
    def getCenturyOfEra(self) -> int: ...
    def getDayOfMonth(self) -> int: ...
    def getDayOfWeek(self) -> int: ...
    def getDayOfYear(self) -> int: ...
    def getEra(self) -> int: ...
    def getMillisOfDay(self) -> int: ...
    def getMillisOfSecond(self) -> int: ...
    def getMinuteOfHour(self) -> int: ...
    def getMonthOfYear(self) -> int: ...
    def getSecondOfMinute(self) -> int: ...
    def getWeekOfWeekyear(self) -> int: ...
    def getWeekyear(self) -> int: ...
    def getYear(self) -> int: ...
    def getYearOfCentury(self) -> int: ...
    def getYearOfEra(self) -> int: ...
    def hshCode(self) -> int: ...
    def hourOfDay(self) -> LocalDateTime.Property: ...
    def millisOfDay(self) -> LocalDateTime.Property: ...
    def millisOfSecond(self) -> LocalDateTime.Property: ...
    def minus(
        self, period: Union[ReadableDuration, ReadablePeriod]
    ) -> LocalDateTime: ...
    def minusDays(self, days: int) -> LocalDateTime: ...
    def minusHours(self, hours: int) -> LocalDateTime: ...
    def minusMillis(self, millis: int) -> LocalDateTime: ...
    def minusMinutes(self, minutes: int) -> LocalDateTime: ...
    def minusMonths(self, months: int) -> LocalDateTime: ...
    def minusSeconds(self, seconds: int) -> LocalDateTime: ...
    def minusWeeks(self, weeks: int) -> LocalDateTime: ...
    def minusYears(self, years: int) -> LocalDateTime: ...
    def minuteOfHour(self) -> LocalDateTime.Property: ...
    def monthOfYear(self) -> LocalDateTime.Property: ...
    @staticmethod
    def now(arg: Union[Chronology, DateTimeZone, None] = ...) -> LocalDateTime: ...
    @staticmethod
    def parse(
        str_: AnyStr, formatter: Optional[DateTimeFormatter] = ...
    ) -> LocalDateTime: ...
    def plus(
        self, period: Union[ReadableDuration, ReadablePeriod]
    ) -> LocalDateTime: ...
    def plusDays(self, days: int) -> LocalDateTime: ...
    def plusHours(self, hours: int) -> LocalDateTime: ...
    def plusMillis(self, millis: int) -> LocalDateTime: ...
    def plusMinutes(self, minutes: int) -> LocalDateTime: ...
    def plusMonths(self, months: int) -> LocalDateTime: ...
    def plusSeconds(self, seconds: int) -> LocalDateTime: ...
    def plusWeeks(self, weeks: int) -> LocalDateTime: ...
    def plusYears(self, years: int) -> LocalDateTime: ...
    def property(self, fieldType: DateTimeFieldType) -> LocalDateTime.Property: ...
    def secondOfMinute(self) -> LocalDateTime.Property: ...
    def toDate(self) -> Date: ...
    def toLocalDate(self, time: LocalTime) -> LocalDate: ...
    def weekOfWeekyear(self) -> LocalDateTime.Property: ...
    def weekyear(self) -> LocalDateTime.Property: ...
    def withCenturyOfEra(self, centuryOfEra: int) -> LocalDateTime: ...
    def withDayOfMonth(self, dayOfMonth: int) -> LocalDateTime: ...
    def withDayOfWeek(self, dayOfWeek: int) -> LocalDateTime: ...
    def withDayOfYear(self, dayOfYear: int) -> LocalDateTime: ...
    def withDurationAdded(
        self, durationToAdd: ReadableDuration, scalar: int
    ) -> LocalDateTime: ...
    def withEra(self, era: int) -> LocalDateTime: ...
    def withField(self, fieldType: DateTimeFieldType, value: int) -> LocalDateTime: ...
    def withFieldAdded(
        self, fieldType: DateTimeFieldType, amount: int
    ) -> LocalDateTime: ...
    def withFields(self, partial: ReadablePartial) -> LocalDateTime: ...
    def withHourOfDay(self, hour: int) -> LocalDateTime: ...
    def withMillisOfDay(self, millis: int) -> LocalDateTime: ...
    def withMillisOfSecond(self, seconds: int) -> LocalDateTime: ...
    def withMinuteOfHour(self, minute: int) -> LocalDateTime: ...
    def withMonthOfYear(self, month: int) -> LocalDateTime: ...
    def withPeriodAdded(
        self, periodToAdd: ReadablePeriod, scalar: int
    ) -> LocalDateTime: ...
    def withSecondOfMinute(self, second: int) -> LocalDateTime: ...
    def withTime(
        self,
        hourOfDay: int,
        minuteOfHour: int,
        secondOfMinute: int,
        millisOfSecond: int,
    ) -> LocalDateTime: ...
    def withWeekOfWeekyear(self, weekOfWeekyear: int) -> LocalDateTime: ...
    def withWeekyear(self, weekyear: int) -> LocalDateTime: ...
    def withYear(self, year: int) -> LocalDateTime: ...
    def withYearOfCentury(self, yearOfCentury: int) -> LocalDateTime: ...
    def withYearOfEra(self, yearOfEra: int) -> LocalDateTime: ...
    def year(self) -> LocalDateTime.Property: ...
    def yearOfCentury(self) -> LocalDateTime.Property: ...
    def yearOfEra(self) -> LocalDateTime.Property: ...

class LocalTime(BaseLocal):
    class Property(AbstractReadableInstantFieldProperty):
        def addCopy(self, value: AnyNum) -> LocalTime: ...
        def addNoWrapToCopy(self, value: int) -> LocalTime: ...
        def addWrapFieldToCopy(self, value: int) -> LocalTime: ...
        def getLocalTime(self) -> LocalTime: ...
        def roundCeilingCopy(self) -> LocalTime: ...
        def roundFloorCopy(self) -> LocalTime: ...
        def roundHalfCeilingCopy(self) -> LocalTime: ...
        def roundHalfEvenCopy(self) -> LocalTime: ...
        def roundHalfFloorCopy(self) -> LocalTime: ...
        def setCopy(self, *args: Any) -> LocalTime: ...
        def withMaximumValue(self) -> LocalTime: ...
        def withMinimumValue(self) -> LocalTime: ...

    MIDNIGHT: LocalTime
    def __init__(self, *args: Any) -> None: ...
    @staticmethod
    def fromCalendarFields(calendar: Calendar) -> LocalTime: ...
    @staticmethod
    def fromDateFields(date: Date) -> LocalTime: ...
    @staticmethod
    def fromMillisOfDay(
        millisOfDay: long, chrono: Optional[Chronology] = ...
    ) -> LocalTime: ...
    def getHourOfDay(self) -> int: ...
    def getMillisOfDay(self) -> int: ...
    def getMillisOfSecond(self) -> int: ...
    def getMinuteOfHour(self) -> int: ...
    def getSecondOfMinute(self) -> int: ...
    def hourOfDay(self) -> LocalTime.Property: ...
    def millisOfDay(self) -> LocalTime.Property: ...
    def millisOfSecond(self) -> LocalTime.Property: ...
    def minus(self, period: ReadablePeriod) -> LocalTime: ...
    def minusHours(self, hours: int) -> LocalTime: ...
    def minusMillis(self, millis: int) -> LocalTime: ...
    def minusMinutes(self, minutes: int) -> LocalTime: ...
    def minusSeconds(self, seconds: int) -> LocalTime: ...
    def minuteOfHour(self) -> LocalTime.Property: ...
    @staticmethod
    def now(arg: Union[Chronology, DateTimeZone, None] = ...) -> LocalTime: ...
    @staticmethod
    def parse(
        str_: AnyStr, formatter: Optional[DateTimeFormatter] = ...
    ) -> LocalTime: ...
    def plus(self, period: ReadablePeriod) -> LocalTime: ...
    def plusHours(self, hours: int) -> LocalTime: ...
    def plusMillis(self, millis: int) -> LocalTime: ...
    def plusMinutes(self, minutes: int) -> LocalTime: ...
    def plusSeconds(self, seconds: int) -> LocalTime: ...
    def property(self, fieldType: DateTimeFieldType) -> LocalTime.Property: ...
    def secondOfMinute(self) -> LocalTime.Property: ...
    def toDateTimeToday(self, zone: Optional[DateTimeZone] = ...) -> DateTime: ...
    def withField(self, fieldType: DateTimeFieldType, value: int) -> LocalTime: ...
    def withFieldAdded(
        self, fieldType: DateTimeFieldType, amount: int
    ) -> LocalTime: ...
    def withFields(self, partial: ReadablePartial) -> LocalTime: ...
    def withHourOfDay(self, hour: int) -> LocalTime: ...
    def withMillisOfDay(self, millisOfDay: int) -> LocalTime: ...
    def withMillisOfSecond(self, millisOfSecond: int) -> LocalTime: ...
    def withMinuteOfHour(self, minute: int) -> LocalTime: ...
    def withPeriodAdded(
        self, periodToAdd: ReadablePeriod, scalar: int
    ) -> LocalTime: ...
    def withSecondOfMinute(self, second: int) -> LocalTime: ...

class Minutes(BaseSingleFieldPeriod):
    MAX_VALUE: Minutes
    MIN_VALUE: Minutes
    ONE: Minutes
    THREE: Minutes
    TWO: Minutes
    ZERO: Minutes
    def dividedBy(self, divisor: int) -> Minutes: ...
    def getMinutes(self) -> int: ...
    def isGreaterThan(self, other: Minutes) -> bool: ...
    def isLessThan(self, other: Minutes) -> bool: ...
    def minus(self, minutes: Union[Minutes, int]) -> Minutes: ...
    @staticmethod
    def minutesBetween(
        start: Union[ReadableInstant, ReadablePartial],
        end: Union[ReadableInstant, ReadablePartial],
    ) -> Minutes: ...
    @staticmethod
    def minutesIn(interval: ReadableInterval) -> Minutes: ...
    def multipliedBy(self, scalar: int) -> Minutes: ...
    def negated(self) -> Minutes: ...
    @staticmethod
    def parseMinutes(periodStr: AnyStr) -> Minutes: ...
    def plus(self, minutes: Union[Minutes, int]) -> Minutes: ...
    @staticmethod
    def standardMinutesIn(period: ReadablePeriod) -> Minutes: ...
    def toStandardDays(self) -> Days: ...
    def toStandardDuration(self) -> Duration: ...
    def toStandardHours(self) -> Hours: ...
    def toStandardSeconds(self) -> Seconds: ...
    def toStandardWeeks(self) -> Weeks: ...

class MutableDateTime(BaseDateTime, ReadWritableDateTime):
    class Property(AbstractReadableInstantFieldProperty):
        def add(self, value: AnyNum) -> MutableDateTime: ...
        def addWrapField(self, value: int) -> MutableDateTime: ...
        def getMutableDateTime(self) -> MutableDateTime: ...
        def roundCeiling(self) -> MutableDateTime: ...
        def roundFloor(self) -> MutableDateTime: ...
        def roundHalfCeiling(self) -> MutableDateTime: ...
        def roundHalfEven(self) -> MutableDateTime: ...
        def roundHalfFloor(self) -> MutableDateTime: ...
        def set(self, *args: Any) -> MutableDateTime: ...

    ROUND_CEILING: int
    ROUND_FLOOR: int
    ROUND_HALF_CEILING: int
    ROUND_HALF_EVEN: int
    ROUND_HALF_FLOOR: int
    ROUND_NONE: int
    def __init__(self, *args: Any) -> None: ...
    def centuryOfEra(self) -> MutableDateTime.Property: ...
    def copy(self) -> MutableDateTime: ...
    def dayOfMonth(self) -> MutableDateTime.Property: ...
    def dayOfWeek(self) -> MutableDateTime.Property: ...
    def dayOfYear(self) -> MutableDateTime.Property: ...
    def era(self) -> MutableDateTime.Property: ...
    def getRoundingField(self) -> DateTimeField: ...
    def getRoundingMode(self) -> int: ...
    def hourOfDay(self) -> MutableDateTime.Property: ...
    def millisOfDay(self) -> MutableDateTime.Property: ...
    def millisOfSecond(self) -> MutableDateTime.Property: ...
    def minuteOfDay(self) -> MutableDateTime.Property: ...
    def minuteOfHour(self) -> MutableDateTime.Property: ...
    def monthOfYear(self) -> MutableDateTime.Property: ...
    @staticmethod
    def now(arg: Union[Chronology, DateTimeZone, None]) -> MutableDateTime: ...
    @staticmethod
    def parse(
        str_: AnyStr, formatter: Optional[DateTimeFormatter] = ...
    ) -> MutableDateTime: ...
    def property(self, type_: DateTimeFieldType) -> MutableDateTime.Property: ...
    def secondOfDay(self) -> MutableDateTime.Property: ...
    def secondOfMinute(self) -> MutableDateTime.Property: ...
    def setRounding(self, field: DateTimeField, mode: Optional[int] = ...) -> None: ...
    def weekOfWeekyear(self) -> MutableDateTime.Property: ...
    def weekyear(self) -> MutableDateTime.Property: ...
    def year(self) -> MutableDateTime.Property: ...
    def yearOfCentury(self) -> MutableDateTime.Property: ...
    def yearOfEra(self) -> MutableDateTime.Property: ...

class MutableInterval(BaseInterval, ReadableInterval):
    def __init__(self, *args: Any) -> None: ...
    def clone(self) -> Object: ...
    def copy(self) -> MutableInterval: ...
    @staticmethod
    def parse(str_: AnyStr) -> MutableInterval: ...
    def setChronology(self, chronology: Chronology) -> None: ...
    def setDurationAfterStart(
        self, duration: Union[ReadableDuration, long]
    ) -> None: ...
    def setDurationBeforeEnd(self, duration: Union[ReadableDuration, long]) -> None: ...
    def setEnd(self, end: ReadableInstant) -> None: ...
    def setEndMillis(self, endInstant: long) -> None: ...
    def setInterval(self, *args: Any) -> None: ...
    def setPeriodAfterStart(self, period: ReadablePeriod) -> None: ...
    def setPeriodBeforeEnd(self, period: ReadablePeriod) -> None: ...
    def setStart(self, start: ReadableInstant) -> None: ...
    def setStartMillis(self, startInstant: long) -> None: ...

class MutablePeriod(BasePeriod, ReadWritablePeriod):
    def __init__(self, *args: Any) -> None: ...
    def addField(self, fieldType: DurationFieldType, value: int) -> None: ...
    def addStandardDays(self, days: int) -> None: ...
    def addStandardHours(self, hours: int) -> None: ...
    def addStandardMinutes(self, minutes: int) -> None: ...
    def addStandardSeconds(self, seconds: int) -> None: ...
    def setValues(self, values: List[int]) -> None: ...

class Period(BasePeriod):
    ZERO: Period
    def __init__(self, *args: Any) -> None: ...
    @staticmethod
    def days(days: int) -> Period: ...
    @staticmethod
    def fieldDifference(start: ReadablePartial, end: ReadablePartial) -> Period: ...
    def getDays(self) -> int: ...
    def getHours(self) -> int: ...
    def getMillis(self) -> int: ...
    def getMinutes(self) -> int: ...
    def getMonths(self) -> int: ...
    def getSeconds(self) -> int: ...
    def getWeeks(self) -> int: ...
    def getYears(self) -> int: ...
    @staticmethod
    def hours(hours: int) -> Period: ...
    @staticmethod
    def millis(millis: int) -> Period: ...
    def minus(self, period: ReadablePeriod) -> Period: ...
    def minusDays(self, days: int) -> Period: ...
    def minusHours(self, hours: int) -> Period: ...
    def minusMillis(self, millis: int) -> Period: ...
    def minusMinutes(self, minutes: int) -> Period: ...
    def minusMonths(self, months: int) -> Period: ...
    def minusSeconds(self, seconds: int) -> Period: ...
    def minusWeeks(self, weeks: int) -> Period: ...
    def minusYears(self, years: int) -> Period: ...
    @staticmethod
    def minutes(minutes: int) -> Period: ...
    @staticmethod
    def months(months: int) -> Period: ...
    def multipliedBy(self, scalar: int) -> Period: ...
    def negated(self) -> Period: ...
    def normalizedStandard(self, periodType: Optional[PeriodType] = ...) -> Period: ...
    @staticmethod
    def parse(str_: AnyStr, formatter: Optional[PeriodFormatter] = ...) -> Period: ...
    def plus(self, period: ReadablePeriod) -> Period: ...
    def plusDays(self, days: int) -> Period: ...
    def plusHours(self, hours: int) -> Period: ...
    def plusMillis(self, millis: int) -> Period: ...
    def plusMinutes(self, minutes: int) -> Period: ...
    def plusMonths(self, months: int) -> Period: ...
    def plusSeconds(self, seconds: int) -> Period: ...
    def plusWeeks(self, weeks: int) -> Period: ...
    def plusYears(self, years: int) -> Period: ...
    @staticmethod
    def seconds(seconds: int) -> Period: ...
    def toStandardDays(self) -> Days: ...
    def toStandardDuration(self) -> Duration: ...
    def toStandardHours(self) -> Hours: ...
    def toStandardMinutes(self) -> Minutes: ...
    def toStandardSeconds(self) -> Seconds: ...
    def toStandardWeeks(self) -> Weeks: ...
    @staticmethod
    def weeks(weeks: int) -> Period: ...
    def withField(self, field: DurationFieldType, value: int) -> Period: ...
    def withFieldAdded(self, field: DurationFieldType, value: int) -> Period: ...
    def withFields(self, period: ReadablePeriod) -> Period: ...
    def withDays(self, days: int) -> Period: ...
    def withHours(self, hours: int) -> Period: ...
    def withMillis(self, millis: int) -> Period: ...
    def withMinutes(self, minutes: int) -> Period: ...
    def withMonths(self, months: int) -> Period: ...
    def withSeconds(self, seconds: int) -> Period: ...
    def withWeeks(self, weeks: int) -> Period: ...
    def withYears(self, years: int) -> Period: ...
    @staticmethod
    def years(years: int) -> Period: ...

class PeriodType(Object):
    @staticmethod
    def days() -> PeriodType: ...
    @staticmethod
    def dayTime() -> PeriodType: ...
    @staticmethod
    def forFields(fields: List[DurationFieldType]) -> PeriodType: ...
    def getFieldType(self) -> DurationFieldType: ...
    def getName(self) -> AnyStr: ...
    @staticmethod
    def hours() -> PeriodType: ...
    def indexOf(self, type_: DurationFieldType) -> int: ...
    def isSupported(self, type_: DurationFieldType) -> bool: ...
    @staticmethod
    def millis() -> PeriodType: ...
    @staticmethod
    def minutes() -> PeriodType: ...
    @staticmethod
    def months() -> PeriodType: ...
    @staticmethod
    def seconds() -> PeriodType: ...
    def size(self) -> int: ...
    @staticmethod
    def standard() -> PeriodType: ...
    @staticmethod
    def time() -> PeriodType: ...
    @staticmethod
    def weeks() -> PeriodType: ...
    def withDaysRemoved(self) -> PeriodType: ...
    def withHoursRemoved(self) -> PeriodType: ...
    def withMillisRemoved(self) -> PeriodType: ...
    def withMinutesRemoved(self) -> PeriodType: ...
    def withMonthsRemoved(self) -> PeriodType: ...
    def withSecondsRemoved(self) -> PeriodType: ...
    def withWeeksRemoved(self) -> PeriodType: ...
    def withYearsRemoved(self) -> PeriodType: ...
    @staticmethod
    def yearDay() -> PeriodType: ...
    @staticmethod
    def yearDayTime() -> PeriodType: ...
    @staticmethod
    def yearMonthDay() -> PeriodType: ...
    @staticmethod
    def yearMonthDayTime() -> PeriodType: ...
    @staticmethod
    def years() -> PeriodType: ...
    @staticmethod
    def yearWeekDay() -> PeriodType: ...
    @staticmethod
    def yearWeekDayTime() -> PeriodType: ...

class Seconds(BaseSingleFieldPeriod):
    MAX_VALUE: Seconds
    MIN_VALUE: Seconds
    ONE: Seconds
    THREE: Seconds
    TWO: Seconds
    ZERO: Seconds
    def dividedBy(self, divisor: int) -> Seconds: ...
    def getSeconds(self) -> int: ...
    def isGreaterThan(self, other: Seconds) -> bool: ...
    def isLessThan(self, other: Seconds) -> bool: ...
    def minus(self, seconds: Union[Seconds, int]) -> Seconds: ...
    def multipliedBy(self, scalar: int) -> Seconds: ...
    def negated(self) -> Seconds: ...
    @staticmethod
    def parseSeconds(periodStr: AnyStr) -> Seconds: ...
    def plus(self, seconds: Union[Seconds, int]) -> Seconds: ...
    @staticmethod
    def seconds(seconds: int) -> Seconds: ...
    @staticmethod
    def secondsBetween(
        start: Union[ReadableInstant, ReadablePartial],
        end: Union[ReadableInstant, ReadablePartial],
    ) -> Seconds: ...
    @staticmethod
    def secondsIn(interval: ReadableInterval) -> Seconds: ...
    @staticmethod
    def standardSecondsIn(period: ReadablePeriod) -> Seconds: ...
    def toStandardDays(self) -> Days: ...
    def toStandardDuration(self) -> Duration: ...
    def toStandardHours(self) -> Hours: ...
    def toStandardMinutes(self) -> Minutes: ...
    def toStandardWeeks(self) -> Weeks: ...

class Weeks(BaseSingleFieldPeriod):
    MAX_VALUE: Weeks
    MIN_VALUE: Weeks
    ONE: Weeks
    THREE: Weeks
    TWO: Weeks
    ZERO: Weeks
    def dividedBy(self, divisor: int) -> Weeks: ...
    def getWeeks(self) -> int: ...
    def isGreaterThan(self, other: Weeks) -> bool: ...
    def isLessThan(self, other: Weeks) -> bool: ...
    def minus(self, weeks: Union[Weeks, int]) -> Weeks: ...
    def multipliedBy(self, scalar: int) -> Weeks: ...
    def negated(self) -> Weeks: ...
    @staticmethod
    def parseWeeks(periodStr: AnyStr) -> Weeks: ...
    def plus(self, weeks: Union[Weeks, int]) -> Weeks: ...
    @staticmethod
    def standardWeeksIn(period: ReadablePeriod) -> Weeks: ...
    def toStandardDays(self) -> Days: ...
    def toStandardDuration(self) -> Duration: ...
    def toStandardHours(self) -> Hours: ...
    def toStandardMinutes(self) -> Minutes: ...
    def toStandardSeconds(self) -> Seconds: ...
    @staticmethod
    def weeks(weeks: int) -> Weeks: ...
    @staticmethod
    def weeksBetween(
        start: Union[ReadableInstant, ReadablePartial],
        end: Union[ReadableInstant, ReadablePartial],
    ) -> Weeks: ...
    @staticmethod
    def weeksIn(interval: ReadableInterval) -> Weeks: ...
