# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryEOLReleaseData(BaseModel):
    """
    AdvisoryEOLReleaseData
    """ # noqa: E501
    already_eol: Optional[StrictBool] = None
    branch: Optional[StrictStr] = Field(default=None, description="Alpine Linux")
    branch_url: Optional[StrictStr] = Field(default=None, description="Alpine Linux")
    codename: Optional[StrictStr] = None
    cpe: Optional[StrictStr] = None
    eol_date: Optional[StrictStr] = None
    eol_date_extended_support: Optional[StrictStr] = Field(default=None, description="Oracle Linux, Solaris")
    eol_date_premier_support: Optional[StrictStr] = Field(default=None, description="Oracle Linux, Solaris")
    eol_elts_date: Optional[StrictStr] = None
    eol_lts_date: Optional[StrictStr] = None
    git_branch: Optional[StrictStr] = Field(default=None, description="Alpine Linux")
    git_branch_url: Optional[StrictStr] = Field(default=None, description="Alpine Linux")
    lts: Optional[StrictBool] = Field(default=None, description="Ubuntu")
    minor_releases: Optional[List[StrictStr]] = Field(default=None, description="Alpine Linux")
    product: Optional[StrictStr] = None
    release_date: Optional[StrictStr] = None
    release_name: Optional[StrictStr] = None
    source_url: Optional[StrictStr] = None
    technology_level: Optional[StrictStr] = Field(default=None, description="AIX")
    vendor: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    version_api: Optional[StrictStr] = Field(default=None, description="Android")
    version_darwin: Optional[StrictStr] = Field(default=None, description="macOS")
    version_sunos: Optional[StrictStr] = Field(default=None, description="Solaris")
    windows_current_build: Optional[StrictStr] = Field(default=None, description="Microsoft Windows")
    windows_display_version: Optional[StrictStr] = Field(default=None, description="Microsoft Windows")
    windows_edition_id: Optional[StrictStr] = Field(default=None, description="Microsoft Windows")
    windows_insider_preview: Optional[StrictBool] = Field(default=None, description="Microsoft Windows")
    __properties: ClassVar[List[str]] = ["already_eol", "branch", "branch_url", "codename", "cpe", "eol_date", "eol_date_extended_support", "eol_date_premier_support", "eol_elts_date", "eol_lts_date", "git_branch", "git_branch_url", "lts", "minor_releases", "product", "release_date", "release_name", "source_url", "technology_level", "vendor", "version", "version_api", "version_darwin", "version_sunos", "windows_current_build", "windows_display_version", "windows_edition_id", "windows_insider_preview"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryEOLReleaseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryEOLReleaseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "already_eol": obj.get("already_eol"),
            "branch": obj.get("branch"),
            "branch_url": obj.get("branch_url"),
            "codename": obj.get("codename"),
            "cpe": obj.get("cpe"),
            "eol_date": obj.get("eol_date"),
            "eol_date_extended_support": obj.get("eol_date_extended_support"),
            "eol_date_premier_support": obj.get("eol_date_premier_support"),
            "eol_elts_date": obj.get("eol_elts_date"),
            "eol_lts_date": obj.get("eol_lts_date"),
            "git_branch": obj.get("git_branch"),
            "git_branch_url": obj.get("git_branch_url"),
            "lts": obj.get("lts"),
            "minor_releases": obj.get("minor_releases"),
            "product": obj.get("product"),
            "release_date": obj.get("release_date"),
            "release_name": obj.get("release_name"),
            "source_url": obj.get("source_url"),
            "technology_level": obj.get("technology_level"),
            "vendor": obj.get("vendor"),
            "version": obj.get("version"),
            "version_api": obj.get("version_api"),
            "version_darwin": obj.get("version_darwin"),
            "version_sunos": obj.get("version_sunos"),
            "windows_current_build": obj.get("windows_current_build"),
            "windows_display_version": obj.get("windows_display_version"),
            "windows_edition_id": obj.get("windows_edition_id"),
            "windows_insider_preview": obj.get("windows_insider_preview")
        })
        return _obj


