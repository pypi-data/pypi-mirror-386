# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_bdu_advisory import AdvisoryBDUAdvisory

class TestAdvisoryBDUAdvisory(unittest.TestCase):
    """AdvisoryBDUAdvisory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryBDUAdvisory:
        """Test AdvisoryBDUAdvisory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryBDUAdvisory`
        """
        model = AdvisoryBDUAdvisory()
        if include_optional:
            return AdvisoryBDUAdvisory(
                bdu_id = '',
                cve = [
                    ''
                    ],
                cvss = vulncheck_sdk.models.advisory/bdu_cvss.advisory.BDUCvss(
                    vector = vulncheck_sdk.models.advisory/bdu_vector.advisory.BDUVector(
                        score = '', 
                        text = '', ), ),
                cvss3 = vulncheck_sdk.models.advisory/bdu_cvss3.advisory.BDUCvss3(
                    vector = vulncheck_sdk.models.advisory/bdu_vector.advisory.BDUVector(
                        score = '', 
                        text = '', ), ),
                cwe = '',
                date_added = '',
                description_ru = '',
                environment = vulncheck_sdk.models.advisory/bdu_environment.advisory.BDUEnvironment(
                    os = vulncheck_sdk.models.advisory/bduos.advisory.BDUOs(
                        name = '', 
                        platform = '', 
                        text = '', 
                        vendor = '', 
                        version = '', ), ),
                exploit_status_en = '',
                exploit_status_ru = '',
                fix_status_en = '',
                fix_status_ru = '',
                identify_date = '',
                name_ru = '',
                severity_ru = '',
                solution_ru = '',
                sources = [
                    ''
                    ],
                text_ru = '',
                url = '',
                vul_status_en = '',
                vul_status_ru = '',
                vulnerable_software = vulncheck_sdk.models.advisory/bdu_vulnerable_software.advisory.BDUVulnerableSoftware(
                    soft = vulncheck_sdk.models.advisory/bdu_soft.advisory.BDUSoft(
                        name = '', 
                        platform = '', 
                        text = '', 
                        types = vulncheck_sdk.models.advisory/bdu_types.advisory.BDUTypes(
                            text = '', 
                            type = '', ), 
                        vendor = '', 
                        version = '', ), )
            )
        else:
            return AdvisoryBDUAdvisory(
        )
        """

    def testAdvisoryBDUAdvisory(self):
        """Test AdvisoryBDUAdvisory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
