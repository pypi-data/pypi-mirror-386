# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryCNNVDEntryJSON(BaseModel):
    """
    AdvisoryCNNVDEntryJSON
    """ # noqa: E501
    bugtraq_id: Optional[StrictStr] = Field(default=None, alias="bugtraq-id")
    cve: Optional[List[StrictStr]] = None
    date_added: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    modified_date: Optional[StrictStr] = Field(default=None, alias="modified-date")
    name_cn: Optional[StrictStr] = None
    published_date: Optional[StrictStr] = Field(default=None, alias="published-date")
    severity_cn: Optional[StrictStr] = None
    severity_en: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    vuln_description_cn: Optional[StrictStr] = Field(default=None, alias="vuln-description_cn")
    vuln_solution: Optional[StrictStr] = Field(default=None, alias="vuln-solution")
    vuln_type_cn: Optional[StrictStr] = Field(default=None, alias="vuln-type_cn")
    vuln_type_en: Optional[StrictStr] = Field(default=None, alias="vuln-type_en")
    __properties: ClassVar[List[str]] = ["bugtraq-id", "cve", "date_added", "id", "modified-date", "name_cn", "published-date", "severity_cn", "severity_en", "source", "url", "vuln-description_cn", "vuln-solution", "vuln-type_cn", "vuln-type_en"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryCNNVDEntryJSON from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryCNNVDEntryJSON from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bugtraq-id": obj.get("bugtraq-id"),
            "cve": obj.get("cve"),
            "date_added": obj.get("date_added"),
            "id": obj.get("id"),
            "modified-date": obj.get("modified-date"),
            "name_cn": obj.get("name_cn"),
            "published-date": obj.get("published-date"),
            "severity_cn": obj.get("severity_cn"),
            "severity_en": obj.get("severity_en"),
            "source": obj.get("source"),
            "url": obj.get("url"),
            "vuln-description_cn": obj.get("vuln-description_cn"),
            "vuln-solution": obj.get("vuln-solution"),
            "vuln-type_cn": obj.get("vuln-type_cn"),
            "vuln-type_en": obj.get("vuln-type_en")
        })
        return _obj


