# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_manage_engine import AdvisoryManageEngine

class TestAdvisoryManageEngine(unittest.TestCase):
    """AdvisoryManageEngine unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryManageEngine:
        """Test AdvisoryManageEngine
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryManageEngine`
        """
        model = AdvisoryManageEngine()
        if include_optional:
            return AdvisoryManageEngine(
                advisory = '',
                added_time = '',
                cve_details_link = vulncheck_sdk.models.advisory/cve_details_link.advisory.CVEDetailsLink(
                    url = '', 
                    value = '', ),
                cve_id = '',
                cvss_severity_rating = '',
                fixed = '',
                for_product_search = '',
                id = '',
                product = vulncheck_sdk.models.advisory/me_product.advisory.MEProduct(
                    id = '', 
                    display_value = '', ),
                product_list = [
                    vulncheck_sdk.models.advisory/me_product.advisory.MEProduct(
                        id = '', 
                        display_value = '', )
                    ],
                product_specific_details = [
                    vulncheck_sdk.models.advisory/product_specific_detail.advisory.ProductSpecificDetail(
                        id = '', 
                        display_value = '', )
                    ],
                summary = '',
                version = '',
                index_field = ''
            )
        else:
            return AdvisoryManageEngine(
        )
        """

    def testAdvisoryManageEngine(self):
        """Test AdvisoryManageEngine"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
