# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_siemens_document import AdvisorySiemensDocument

class TestAdvisorySiemensDocument(unittest.TestCase):
    """AdvisorySiemensDocument unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisorySiemensDocument:
        """Test AdvisorySiemensDocument
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisorySiemensDocument`
        """
        model = AdvisorySiemensDocument()
        if include_optional:
            return AdvisorySiemensDocument(
                acknowledgments = [
                    vulncheck_sdk.models.advisory/siemens_acknowledgments.advisory.SiemensAcknowledgments(
                        names = [
                            ''
                            ], 
                        organization = '', 
                        summary = '', )
                    ],
                category = '',
                csaf_version = '',
                distribution = vulncheck_sdk.models.advisory/siemens_distribution.advisory.SiemensDistribution(
                    text = '', 
                    tlp = vulncheck_sdk.models.advisory/siemens_tlp.advisory.SiemensTLP(
                        label = '', ), ),
                notes = [
                    vulncheck_sdk.models.advisory/siemens_notes.advisory.SiemensNotes(
                        category = '', 
                        text = '', 
                        title = '', )
                    ],
                publisher = vulncheck_sdk.models.advisory/siemens_publisher.advisory.SiemensPublisher(
                    category = '', 
                    contact_details = '', 
                    name = '', 
                    namespace = '', ),
                references = [
                    vulncheck_sdk.models.advisory/siemens_references.advisory.SiemensReferences(
                        category = '', 
                        summary = '', 
                        url = '', )
                    ],
                title = '',
                tracking = vulncheck_sdk.models.advisory/siemens_tracking.advisory.SiemensTracking(
                    current_release_date = '', 
                    generator = vulncheck_sdk.models.advisory/siemens_generator.advisory.SiemensGenerator(
                        engine = vulncheck_sdk.models.advisory/siemens_engine.advisory.SiemensEngine(
                            name = '', 
                            version = '', ), ), 
                    id = '', 
                    initial_release_date = '', 
                    revision_history = [
                        vulncheck_sdk.models.advisory/siemens_revision_history.advisory.SiemensRevisionHistory(
                            date = '', 
                            legacy_version = '', 
                            number = '', 
                            summary = '', )
                        ], 
                    status = '', 
                    version = '', )
            )
        else:
            return AdvisorySiemensDocument(
        )
        """

    def testAdvisorySiemensDocument(self):
        """Test AdvisorySiemensDocument"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
