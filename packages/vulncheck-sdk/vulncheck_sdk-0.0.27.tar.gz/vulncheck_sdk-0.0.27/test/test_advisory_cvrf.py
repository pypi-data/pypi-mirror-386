# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_cvrf import AdvisoryCvrf

class TestAdvisoryCvrf(unittest.TestCase):
    """AdvisoryCvrf unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryCvrf:
        """Test AdvisoryCvrf
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryCvrf`
        """
        model = AdvisoryCvrf()
        if include_optional:
            return AdvisoryCvrf(
                cve = [
                    ''
                    ],
                notes = [
                    vulncheck_sdk.models.advisory/document_note.advisory.DocumentNote(
                        text = '', 
                        title = '', 
                        type = '', )
                    ],
                product_tree = vulncheck_sdk.models.advisory/product_tree.advisory.ProductTree(
                    relationships = [
                        vulncheck_sdk.models.advisory/relationship.advisory.Relationship(
                            product_reference = '', 
                            relates_to_product_reference = '', 
                            relation_type = '', )
                        ], ),
                references = [
                    vulncheck_sdk.models.advisory/cvrf_reference.advisory.CVRFReference(
                        description = '', 
                        url = '', )
                    ],
                title = '',
                tracking = vulncheck_sdk.models.advisory/document_tracking.advisory.DocumentTracking(
                    current_release_date = '', 
                    id = '', 
                    initial_release_date = '', 
                    revision_history = [
                        vulncheck_sdk.models.advisory/revision.advisory.Revision(
                            date = '', 
                            description = '', 
                            number = '', )
                        ], 
                    status = '', 
                    version = '', ),
                vulnerabilities = [
                    vulncheck_sdk.models.advisory/vulnerability.advisory.Vulnerability(
                        cve = '', 
                        cvssscore_sets = vulncheck_sdk.models.advisory/score_set.advisory.ScoreSet(
                            base_score = '', 
                            vector = '', ), 
                        description = '', 
                        packages = [
                            vulncheck_sdk.models.advisory/vuln_check_package.advisory.VulnCheckPackage(
                                arch = '', 
                                distro = '', 
                                filename = '', 
                                md5 = '', 
                                name = '', 
                                purl = '', 
                                version = '', )
                            ], 
                        product_statuses = [
                            vulncheck_sdk.models.advisory/status.advisory.Status(
                                product_id = [
                                    ''
                                    ], 
                                type = '', )
                            ], 
                        references = [
                            vulncheck_sdk.models.advisory/cvrf_reference.advisory.CVRFReference(
                                description = '', 
                                url = '', )
                            ], 
                        threats = [
                            vulncheck_sdk.models.advisory/threat.advisory.Threat(
                                severity = '', 
                                type = '', )
                            ], )
                    ]
            )
        else:
            return AdvisoryCvrf(
        )
        """

    def testAdvisoryCvrf(self):
        """Test AdvisoryCvrf"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
