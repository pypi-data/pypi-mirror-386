# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryGitLabExploit(BaseModel):
    """
    AdvisoryGitLabExploit
    """ # noqa: E501
    clone_https_url: Optional[StrictStr] = None
    clone_ssh_url: Optional[StrictStr] = None
    clone_ssh_url_cached: Optional[StrictStr] = None
    cve: Optional[StrictStr] = None
    date_added: Optional[StrictStr] = None
    date_last_revised: Optional[StrictStr] = None
    exploit_type: Optional[StrictStr] = None
    forks: Optional[StrictInt] = None
    html_url: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    reference_url: Optional[StrictStr] = None
    refsource: Optional[StrictStr] = None
    repo_full_path: Optional[StrictStr] = None
    repo_id: Optional[StrictStr] = None
    repo_name: Optional[StrictStr] = None
    repo_owner: Optional[StrictStr] = None
    stars: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["clone_https_url", "clone_ssh_url", "clone_ssh_url_cached", "cve", "date_added", "date_last_revised", "exploit_type", "forks", "html_url", "language", "reference_url", "refsource", "repo_full_path", "repo_id", "repo_name", "repo_owner", "stars"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryGitLabExploit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryGitLabExploit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clone_https_url": obj.get("clone_https_url"),
            "clone_ssh_url": obj.get("clone_ssh_url"),
            "clone_ssh_url_cached": obj.get("clone_ssh_url_cached"),
            "cve": obj.get("cve"),
            "date_added": obj.get("date_added"),
            "date_last_revised": obj.get("date_last_revised"),
            "exploit_type": obj.get("exploit_type"),
            "forks": obj.get("forks"),
            "html_url": obj.get("html_url"),
            "language": obj.get("language"),
            "reference_url": obj.get("reference_url"),
            "refsource": obj.get("refsource"),
            "repo_full_path": obj.get("repo_full_path"),
            "repo_id": obj.get("repo_id"),
            "repo_name": obj.get("repo_name"),
            "repo_owner": obj.get("repo_owner"),
            "stars": obj.get("stars")
        })
        return _obj


