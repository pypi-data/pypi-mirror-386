# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryTWCertAdvisory(BaseModel):
    """
    AdvisoryTWCertAdvisory
    """ # noqa: E501
    affected_cn: Optional[StrictStr] = None
    affected_en: Optional[StrictStr] = None
    credit_cn: Optional[StrictStr] = None
    credit_en: Optional[StrictStr] = None
    cve: Optional[List[StrictStr]] = None
    date_added: Optional[StrictStr] = None
    description_cn: Optional[StrictStr] = None
    description_en: Optional[StrictStr] = None
    link: Optional[StrictStr] = None
    solution_cn: Optional[StrictStr] = None
    solution_en: Optional[StrictStr] = None
    title_cn: Optional[StrictStr] = None
    title_en: Optional[StrictStr] = None
    tvnid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["affected_cn", "affected_en", "credit_cn", "credit_en", "cve", "date_added", "description_cn", "description_en", "link", "solution_cn", "solution_en", "title_cn", "title_en", "tvnid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryTWCertAdvisory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryTWCertAdvisory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affected_cn": obj.get("affected_cn"),
            "affected_en": obj.get("affected_en"),
            "credit_cn": obj.get("credit_cn"),
            "credit_en": obj.get("credit_en"),
            "cve": obj.get("cve"),
            "date_added": obj.get("date_added"),
            "description_cn": obj.get("description_cn"),
            "description_en": obj.get("description_en"),
            "link": obj.get("link"),
            "solution_cn": obj.get("solution_cn"),
            "solution_en": obj.get("solution_en"),
            "title_cn": obj.get("title_cn"),
            "title_en": obj.get("title_en"),
            "tvnid": obj.get("tvnid")
        })
        return _obj


