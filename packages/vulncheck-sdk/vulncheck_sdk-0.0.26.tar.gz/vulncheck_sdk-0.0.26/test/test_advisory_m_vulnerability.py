# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_m_vulnerability import AdvisoryMVulnerability

class TestAdvisoryMVulnerability(unittest.TestCase):
    """AdvisoryMVulnerability unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryMVulnerability:
        """Test AdvisoryMVulnerability
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryMVulnerability`
        """
        model = AdvisoryMVulnerability()
        if include_optional:
            return AdvisoryMVulnerability(
                product_statuses = [
                    vulncheck_sdk.models.advisory/m_product_status.advisory.MProductStatus(
                        product_id = [
                            ''
                            ], 
                        type = 56, )
                    ],
                remediations = [
                    vulncheck_sdk.models.advisory/m_remediation.advisory.MRemediation(
                        affected_files = [
                            vulncheck_sdk.models.advisory/affected_file.advisory.AffectedFile(
                                file_last_modified = '', 
                                file_name = '', )
                            ], 
                        date = '', 
                        date_specified = True, 
                        description = vulncheck_sdk.models.advisory/i_val.advisory.IVal(
                            value = '', ), 
                        fixed_build = '', 
                        product_id = [
                            ''
                            ], 
                        restart_required = vulncheck_sdk.models.advisory/i_val.advisory.IVal(
                            value = '', ), 
                        sub_type = '', 
                        type = 56, 
                        url = '', 
                        supercedence = '', )
                    ],
                threats = [
                    vulncheck_sdk.models.advisory/r_threat.advisory.RThreat(
                        date = '', 
                        date_specified = True, 
                        description = vulncheck_sdk.models.advisory/i_val.advisory.IVal(
                            value = '', ), 
                        product_id = [
                            ''
                            ], 
                        type = 56, )
                    ],
                acknowledgments = [
                    vulncheck_sdk.models.advisory/acknowledgement.advisory.Acknowledgement(
                        name = [
                            vulncheck_sdk.models.advisory/i_val.advisory.IVal(
                                value = '', )
                            ], 
                        url = [
                            ''
                            ], )
                    ],
                cve = '',
                cvssscoresets = [
                    vulncheck_sdk.models.advisory/r_score_set.advisory.RScoreSet(
                        base_score = '', 
                        product_id = '', 
                        temporal_score = '', 
                        vector = '', )
                    ],
                notes = [
                    vulncheck_sdk.models.advisory/note.advisory.Note(
                        ordinal = '', 
                        text = '', 
                        title = '', 
                        type = 56, )
                    ],
                ordinal = '',
                revisionhistory = [
                    vulncheck_sdk.models.advisory/r_revision.advisory.RRevision(
                        date = '', 
                        description = vulncheck_sdk.models.advisory/r_description.advisory.RDescription(
                            value = '', ), 
                        number = '', )
                    ],
                title = vulncheck_sdk.models.advisory/i_val.advisory.IVal(
                    value = '', )
            )
        else:
            return AdvisoryMVulnerability(
        )
        """

    def testAdvisoryMVulnerability(self):
        """Test AdvisoryMVulnerability"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
