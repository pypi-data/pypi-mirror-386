# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.api_nvd20_cve import ApiNVD20CVE

class TestApiNVD20CVE(unittest.TestCase):
    """ApiNVD20CVE unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiNVD20CVE:
        """Test ApiNVD20CVE
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiNVD20CVE`
        """
        model = ApiNVD20CVE()
        if include_optional:
            return ApiNVD20CVE(
                cisa_action_due = '',
                cisa_exploit_add = '',
                cisa_required_action = '',
                cisa_vulnerability_name = '',
                configurations = [
                    vulncheck_sdk.models.advisory/nvd20_configuration.advisory.NVD20Configuration(
                        negate = True, 
                        nodes = [
                            vulncheck_sdk.models.advisory/nvd20_node.advisory.NVD20Node(
                                cpe_match = [
                                    vulncheck_sdk.models.advisory/nvd20_cvecpe_match.advisory.NVD20CVECPEMatch(
                                        criteria = '', 
                                        match_criteria_id = '', 
                                        version_end_excluding = '', 
                                        version_end_including = '', 
                                        version_start_excluding = '', 
                                        version_start_including = '', 
                                        vulnerable = True, )
                                    ], 
                                negate = True, 
                                operator = '', )
                            ], 
                        operator = '', )
                    ],
                descriptions = [
                    vulncheck_sdk.models.api/nvd20_description.api.NVD20Description(
                        lang = '', 
                        value = '', )
                    ],
                evaluator_comment = '',
                evaluator_impact = '',
                evaluator_solution = '',
                id = '',
                last_modified = '',
                metrics = vulncheck_sdk.models.api/nvd20_metric.api.NVD20Metric(
                    cvss_metric_v2 = [
                        vulncheck_sdk.models.api/nvd20_cvss_metric_v2.api.NVD20CvssMetricV2(
                            ac_insuf_info = True, 
                            base_severity = '', 
                            cvss_data = vulncheck_sdk.models.api/nvd20_cvss_data_v2.api.NVD20CvssDataV2(
                                access_complexity = '', 
                                access_vector = '', 
                                authentication = '', 
                                availability_impact = '', 
                                availability_requirement = '', 
                                base_score = 1.337, 
                                collateral_damage_potential = '', 
                                confidentiality_impact = '', 
                                confidentiality_requirement = '', 
                                environmental_score = 1.337, 
                                exploitability = '', 
                                integrity_impact = '', 
                                integrity_requirement = '', 
                                remediation_level = '', 
                                report_confidence = '', 
                                target_distribution = '', 
                                temporal_score = 1.337, 
                                vector_string = '', 
                                version = '', ), 
                            exploitability_score = 1.337, 
                            impact_score = 1.337, 
                            obtain_all_privilege = True, 
                            obtain_other_privilege = True, 
                            obtain_user_privilege = True, 
                            source = '', 
                            type = '', 
                            user_interaction_required = True, )
                        ], 
                    cvss_metric_v30 = [
                        vulncheck_sdk.models.api/nvd20_cvss_metric_v3.api.NVD20CvssMetricV3(
                            exploitability_score = 1.337, 
                            impact_score = 1.337, 
                            source = '', 
                            type = '', )
                        ], 
                    cvss_metric_v31 = [
                        vulncheck_sdk.models.api/nvd20_cvss_metric_v3.api.NVD20CvssMetricV3(
                            exploitability_score = 1.337, 
                            impact_score = 1.337, 
                            source = '', 
                            type = '', )
                        ], 
                    cvss_metric_v40 = [
                        vulncheck_sdk.models.api/nvd20_cvss_metric_v40.api.NVD20CvssMetricV40(
                            source = '', 
                            type = '', )
                        ], ),
                published = '',
                references = [
                    vulncheck_sdk.models.api/nvd20_reference.api.NVD20Reference(
                        source = '', 
                        tags = [
                            ''
                            ], 
                        url = '', )
                    ],
                source_identifier = '',
                vc_configurations = [
                    vulncheck_sdk.models.advisory/nvd20_configuration.advisory.NVD20Configuration(
                        negate = True, 
                        nodes = [
                            vulncheck_sdk.models.advisory/nvd20_node.advisory.NVD20Node(
                                cpe_match = [
                                    vulncheck_sdk.models.advisory/nvd20_cvecpe_match.advisory.NVD20CVECPEMatch(
                                        criteria = '', 
                                        match_criteria_id = '', 
                                        version_end_excluding = '', 
                                        version_end_including = '', 
                                        version_start_excluding = '', 
                                        version_start_including = '', 
                                        vulnerable = True, )
                                    ], 
                                negate = True, 
                                operator = '', )
                            ], 
                        operator = '', )
                    ],
                vc_vulnerable_cpes = [
                    ''
                    ],
                vendor_comments = [
                    vulncheck_sdk.models.api/nvd20_vendor_comment.api.NVD20VendorComment(
                        comment = '', 
                        last_modified = '', 
                        organization = '', )
                    ],
                vuln_status = '',
                weaknesses = [
                    vulncheck_sdk.models.api/nvd20_weakness.api.NVD20Weakness(
                        description = [
                            vulncheck_sdk.models.api/nvd20_description.api.NVD20Description(
                                lang = '', 
                                value = '', )
                            ], 
                        source = '', 
                        type = '', )
                    ]
            )
        else:
            return ApiNVD20CVE(
        )
        """

    def testApiNVD20CVE(self):
        """Test ApiNVD20CVE"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
