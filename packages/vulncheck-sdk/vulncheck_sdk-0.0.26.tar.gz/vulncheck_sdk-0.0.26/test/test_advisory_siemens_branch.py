# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_siemens_branch import AdvisorySiemensBranch

class TestAdvisorySiemensBranch(unittest.TestCase):
    """AdvisorySiemensBranch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisorySiemensBranch:
        """Test AdvisorySiemensBranch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisorySiemensBranch`
        """
        model = AdvisorySiemensBranch()
        if include_optional:
            return AdvisorySiemensBranch(
                branches = [
                    vulncheck_sdk.models.advisory/siemens_sub_branch.advisory.SiemensSubBranch(
                        branches = [
                            vulncheck_sdk.models.advisory/siemens_sub_sub_branch.advisory.SiemensSubSubBranch(
                                category = '', 
                                name = '', 
                                product = vulncheck_sdk.models.advisory/siemens_product.advisory.SiemensProduct(
                                    name = '', 
                                    product_id = '', 
                                    product_identification_helper = vulncheck_sdk.models.advisory/siemens_product_identification_helper.advisory.SiemensProductIdentificationHelper(
                                        model_numbers = [
                                            ''
                                            ], ), ), )
                            ], 
                        category = '', 
                        name = '', )
                    ],
                category = '',
                name = ''
            )
        else:
            return AdvisorySiemensBranch(
        )
        """

    def testAdvisorySiemensBranch(self):
        """Test AdvisorySiemensBranch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
