# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_vulnerability import AdvisoryVulnerability

class TestAdvisoryVulnerability(unittest.TestCase):
    """AdvisoryVulnerability unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryVulnerability:
        """Test AdvisoryVulnerability
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryVulnerability`
        """
        model = AdvisoryVulnerability()
        if include_optional:
            return AdvisoryVulnerability(
                cve = '',
                cvssscore_sets = vulncheck_sdk.models.advisory/score_set.advisory.ScoreSet(
                    base_score = '', 
                    vector = '', ),
                description = '',
                packages = [
                    vulncheck_sdk.models.advisory/vuln_check_package.advisory.VulnCheckPackage(
                        arch = '', 
                        distro = '', 
                        filename = '', 
                        md5 = '', 
                        name = '', 
                        purl = '', 
                        version = '', )
                    ],
                product_statuses = [
                    vulncheck_sdk.models.advisory/status.advisory.Status(
                        product_id = [
                            ''
                            ], 
                        type = '', )
                    ],
                references = [
                    vulncheck_sdk.models.advisory/cvrf_reference.advisory.CVRFReference(
                        description = '', 
                        url = '', )
                    ],
                threats = [
                    vulncheck_sdk.models.advisory/threat.advisory.Threat(
                        severity = '', 
                        type = '', )
                    ]
            )
        else:
            return AdvisoryVulnerability(
        )
        """

    def testAdvisoryVulnerability(self):
        """Test AdvisoryVulnerability"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
