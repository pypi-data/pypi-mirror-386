# coding: utf-8

"""
    cr

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class ItemForListRobotAccountsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'description': 'str',
        'disabled': 'bool',
        'expires_at': 'int',
        'permissions': 'list[PermissionForListRobotAccountsOutput]',
        'update_time': 'str',
        'username': 'str'
    }

    attribute_map = {
        'create_time': 'CreateTime',
        'description': 'Description',
        'disabled': 'Disabled',
        'expires_at': 'ExpiresAt',
        'permissions': 'Permissions',
        'update_time': 'UpdateTime',
        'username': 'Username'
    }

    def __init__(self, create_time=None, description=None, disabled=None, expires_at=None, permissions=None, update_time=None, username=None, _configuration=None):  # noqa: E501
        """ItemForListRobotAccountsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._description = None
        self._disabled = None
        self._expires_at = None
        self._permissions = None
        self._update_time = None
        self._username = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        if expires_at is not None:
            self.expires_at = expires_at
        if permissions is not None:
            self.permissions = permissions
        if update_time is not None:
            self.update_time = update_time
        if username is not None:
            self.username = username

    @property
    def create_time(self):
        """Gets the create_time of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The create_time of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ItemForListRobotAccountsOutput.


        :param create_time: The create_time of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The description of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemForListRobotAccountsOutput.


        :param description: The description of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The disabled of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ItemForListRobotAccountsOutput.


        :param disabled: The disabled of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def expires_at(self):
        """Gets the expires_at of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The expires_at of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ItemForListRobotAccountsOutput.


        :param expires_at: The expires_at of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    @property
    def permissions(self):
        """Gets the permissions of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The permissions of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: list[PermissionForListRobotAccountsOutput]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ItemForListRobotAccountsOutput.


        :param permissions: The permissions of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: list[PermissionForListRobotAccountsOutput]
        """

        self._permissions = permissions

    @property
    def update_time(self):
        """Gets the update_time of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The update_time of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ItemForListRobotAccountsOutput.


        :param update_time: The update_time of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def username(self):
        """Gets the username of this ItemForListRobotAccountsOutput.  # noqa: E501


        :return: The username of this ItemForListRobotAccountsOutput.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ItemForListRobotAccountsOutput.


        :param username: The username of this ItemForListRobotAccountsOutput.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemForListRobotAccountsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemForListRobotAccountsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemForListRobotAccountsOutput):
            return True

        return self.to_dict() != other.to_dict()
