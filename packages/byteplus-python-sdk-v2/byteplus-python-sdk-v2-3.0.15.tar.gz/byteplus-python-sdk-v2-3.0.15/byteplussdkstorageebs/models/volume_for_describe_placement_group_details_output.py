# coding: utf-8

"""
    storage_ebs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class VolumeForDescribePlacementGroupDetailsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'placement_group_id': 'str',
        'subgroup_number': 'int',
        'updated_at': 'str',
        'volume_id': 'str',
        'volume_name': 'str',
        'volume_type': 'str',
        'zone_id': 'str'
    }

    attribute_map = {
        'created_at': 'CreatedAt',
        'placement_group_id': 'PlacementGroupId',
        'subgroup_number': 'SubgroupNumber',
        'updated_at': 'UpdatedAt',
        'volume_id': 'VolumeId',
        'volume_name': 'VolumeName',
        'volume_type': 'VolumeType',
        'zone_id': 'ZoneId'
    }

    def __init__(self, created_at=None, placement_group_id=None, subgroup_number=None, updated_at=None, volume_id=None, volume_name=None, volume_type=None, zone_id=None, _configuration=None):  # noqa: E501
        """VolumeForDescribePlacementGroupDetailsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._placement_group_id = None
        self._subgroup_number = None
        self._updated_at = None
        self._volume_id = None
        self._volume_name = None
        self._volume_type = None
        self._zone_id = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if placement_group_id is not None:
            self.placement_group_id = placement_group_id
        if subgroup_number is not None:
            self.subgroup_number = subgroup_number
        if updated_at is not None:
            self.updated_at = updated_at
        if volume_id is not None:
            self.volume_id = volume_id
        if volume_name is not None:
            self.volume_name = volume_name
        if volume_type is not None:
            self.volume_type = volume_type
        if zone_id is not None:
            self.zone_id = zone_id

    @property
    def created_at(self):
        """Gets the created_at of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The created_at of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VolumeForDescribePlacementGroupDetailsOutput.


        :param created_at: The created_at of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def placement_group_id(self):
        """Gets the placement_group_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The placement_group_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._placement_group_id

    @placement_group_id.setter
    def placement_group_id(self, placement_group_id):
        """Sets the placement_group_id of this VolumeForDescribePlacementGroupDetailsOutput.


        :param placement_group_id: The placement_group_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._placement_group_id = placement_group_id

    @property
    def subgroup_number(self):
        """Gets the subgroup_number of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The subgroup_number of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: int
        """
        return self._subgroup_number

    @subgroup_number.setter
    def subgroup_number(self, subgroup_number):
        """Sets the subgroup_number of this VolumeForDescribePlacementGroupDetailsOutput.


        :param subgroup_number: The subgroup_number of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: int
        """

        self._subgroup_number = subgroup_number

    @property
    def updated_at(self):
        """Gets the updated_at of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The updated_at of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VolumeForDescribePlacementGroupDetailsOutput.


        :param updated_at: The updated_at of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def volume_id(self):
        """Gets the volume_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The volume_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this VolumeForDescribePlacementGroupDetailsOutput.


        :param volume_id: The volume_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    @property
    def volume_name(self):
        """Gets the volume_name of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The volume_name of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this VolumeForDescribePlacementGroupDetailsOutput.


        :param volume_name: The volume_name of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The volume_type of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeForDescribePlacementGroupDetailsOutput.


        :param volume_type: The volume_type of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._volume_type = volume_type

    @property
    def zone_id(self):
        """Gets the zone_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501


        :return: The zone_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this VolumeForDescribePlacementGroupDetailsOutput.


        :param zone_id: The zone_id of this VolumeForDescribePlacementGroupDetailsOutput.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeForDescribePlacementGroupDetailsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeForDescribePlacementGroupDetailsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeForDescribePlacementGroupDetailsOutput):
            return True

        return self.to_dict() != other.to_dict()
