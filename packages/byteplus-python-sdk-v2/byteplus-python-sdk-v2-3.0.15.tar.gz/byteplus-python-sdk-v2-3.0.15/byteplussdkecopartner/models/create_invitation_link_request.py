# coding: utf-8

"""
    eco_partner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class CreateInvitationLinkRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invitation_type': 'str',
        'recipient_company': 'str',
        'recipient_email': 'str',
        'send_email': 'bool'
    }

    attribute_map = {
        'invitation_type': 'InvitationType',
        'recipient_company': 'RecipientCompany',
        'recipient_email': 'RecipientEmail',
        'send_email': 'SendEmail'
    }

    def __init__(self, invitation_type=None, recipient_company=None, recipient_email=None, send_email=None, _configuration=None):  # noqa: E501
        """CreateInvitationLinkRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._invitation_type = None
        self._recipient_company = None
        self._recipient_email = None
        self._send_email = None
        self.discriminator = None

        self.invitation_type = invitation_type
        self.recipient_company = recipient_company
        self.recipient_email = recipient_email
        self.send_email = send_email

    @property
    def invitation_type(self):
        """Gets the invitation_type of this CreateInvitationLinkRequest.  # noqa: E501


        :return: The invitation_type of this CreateInvitationLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._invitation_type

    @invitation_type.setter
    def invitation_type(self, invitation_type):
        """Sets the invitation_type of this CreateInvitationLinkRequest.


        :param invitation_type: The invitation_type of this CreateInvitationLinkRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and invitation_type is None:
            raise ValueError("Invalid value for `invitation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["EndCustomer", "Distributor-Reseller"]  # noqa: E501
        if (self._configuration.client_side_validation and
                invitation_type not in allowed_values):
            raise ValueError(
                "Invalid value for `invitation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invitation_type, allowed_values)
            )

        self._invitation_type = invitation_type

    @property
    def recipient_company(self):
        """Gets the recipient_company of this CreateInvitationLinkRequest.  # noqa: E501


        :return: The recipient_company of this CreateInvitationLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._recipient_company

    @recipient_company.setter
    def recipient_company(self, recipient_company):
        """Sets the recipient_company of this CreateInvitationLinkRequest.


        :param recipient_company: The recipient_company of this CreateInvitationLinkRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and recipient_company is None:
            raise ValueError("Invalid value for `recipient_company`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                recipient_company is not None and len(recipient_company) > 128):
            raise ValueError("Invalid value for `recipient_company`, length must be less than or equal to `128`")  # noqa: E501

        self._recipient_company = recipient_company

    @property
    def recipient_email(self):
        """Gets the recipient_email of this CreateInvitationLinkRequest.  # noqa: E501


        :return: The recipient_email of this CreateInvitationLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._recipient_email

    @recipient_email.setter
    def recipient_email(self, recipient_email):
        """Sets the recipient_email of this CreateInvitationLinkRequest.


        :param recipient_email: The recipient_email of this CreateInvitationLinkRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and recipient_email is None:
            raise ValueError("Invalid value for `recipient_email`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                recipient_email is not None and len(recipient_email) > 254):
            raise ValueError("Invalid value for `recipient_email`, length must be less than or equal to `254`")  # noqa: E501

        self._recipient_email = recipient_email

    @property
    def send_email(self):
        """Gets the send_email of this CreateInvitationLinkRequest.  # noqa: E501


        :return: The send_email of this CreateInvitationLinkRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this CreateInvitationLinkRequest.


        :param send_email: The send_email of this CreateInvitationLinkRequest.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and send_email is None:
            raise ValueError("Invalid value for `send_email`, must not be `None`")  # noqa: E501

        self._send_email = send_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInvitationLinkRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInvitationLinkRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateInvitationLinkRequest):
            return True

        return self.to_dict() != other.to_dict()
