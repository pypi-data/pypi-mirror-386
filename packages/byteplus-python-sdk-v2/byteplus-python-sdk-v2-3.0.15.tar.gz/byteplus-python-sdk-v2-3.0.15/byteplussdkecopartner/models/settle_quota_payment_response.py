# coding: utf-8

"""
    eco_partner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class SettleQuotaPaymentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated_time': 'str',
        'outstanding_amount_after': 'float',
        'outstanding_amount_before': 'float',
        'quota_allocated': 'float',
        'quota_balance': 'float',
        'quota_unit': 'str',
        'repayment_amount': 'float',
        'success': 'bool',
        'uid': 'int'
    }

    attribute_map = {
        'last_updated_time': 'LastUpdatedTime',
        'outstanding_amount_after': 'OutstandingAmountAfter',
        'outstanding_amount_before': 'OutstandingAmountBefore',
        'quota_allocated': 'QuotaAllocated',
        'quota_balance': 'QuotaBalance',
        'quota_unit': 'QuotaUnit',
        'repayment_amount': 'RepaymentAmount',
        'success': 'Success',
        'uid': 'Uid'
    }

    def __init__(self, last_updated_time=None, outstanding_amount_after=None, outstanding_amount_before=None, quota_allocated=None, quota_balance=None, quota_unit=None, repayment_amount=None, success=None, uid=None, _configuration=None):  # noqa: E501
        """SettleQuotaPaymentResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_updated_time = None
        self._outstanding_amount_after = None
        self._outstanding_amount_before = None
        self._quota_allocated = None
        self._quota_balance = None
        self._quota_unit = None
        self._repayment_amount = None
        self._success = None
        self._uid = None
        self.discriminator = None

        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if outstanding_amount_after is not None:
            self.outstanding_amount_after = outstanding_amount_after
        if outstanding_amount_before is not None:
            self.outstanding_amount_before = outstanding_amount_before
        if quota_allocated is not None:
            self.quota_allocated = quota_allocated
        if quota_balance is not None:
            self.quota_balance = quota_balance
        if quota_unit is not None:
            self.quota_unit = quota_unit
        if repayment_amount is not None:
            self.repayment_amount = repayment_amount
        if success is not None:
            self.success = success
        if uid is not None:
            self.uid = uid

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The last_updated_time of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this SettleQuotaPaymentResponse.


        :param last_updated_time: The last_updated_time of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: str
        """

        self._last_updated_time = last_updated_time

    @property
    def outstanding_amount_after(self):
        """Gets the outstanding_amount_after of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The outstanding_amount_after of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_amount_after

    @outstanding_amount_after.setter
    def outstanding_amount_after(self, outstanding_amount_after):
        """Sets the outstanding_amount_after of this SettleQuotaPaymentResponse.


        :param outstanding_amount_after: The outstanding_amount_after of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: float
        """

        self._outstanding_amount_after = outstanding_amount_after

    @property
    def outstanding_amount_before(self):
        """Gets the outstanding_amount_before of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The outstanding_amount_before of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_amount_before

    @outstanding_amount_before.setter
    def outstanding_amount_before(self, outstanding_amount_before):
        """Sets the outstanding_amount_before of this SettleQuotaPaymentResponse.


        :param outstanding_amount_before: The outstanding_amount_before of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: float
        """

        self._outstanding_amount_before = outstanding_amount_before

    @property
    def quota_allocated(self):
        """Gets the quota_allocated of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The quota_allocated of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._quota_allocated

    @quota_allocated.setter
    def quota_allocated(self, quota_allocated):
        """Sets the quota_allocated of this SettleQuotaPaymentResponse.


        :param quota_allocated: The quota_allocated of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: float
        """

        self._quota_allocated = quota_allocated

    @property
    def quota_balance(self):
        """Gets the quota_balance of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The quota_balance of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._quota_balance

    @quota_balance.setter
    def quota_balance(self, quota_balance):
        """Sets the quota_balance of this SettleQuotaPaymentResponse.


        :param quota_balance: The quota_balance of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: float
        """

        self._quota_balance = quota_balance

    @property
    def quota_unit(self):
        """Gets the quota_unit of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The quota_unit of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._quota_unit

    @quota_unit.setter
    def quota_unit(self, quota_unit):
        """Sets the quota_unit of this SettleQuotaPaymentResponse.


        :param quota_unit: The quota_unit of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: str
        """

        self._quota_unit = quota_unit

    @property
    def repayment_amount(self):
        """Gets the repayment_amount of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The repayment_amount of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._repayment_amount

    @repayment_amount.setter
    def repayment_amount(self, repayment_amount):
        """Sets the repayment_amount of this SettleQuotaPaymentResponse.


        :param repayment_amount: The repayment_amount of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: float
        """

        self._repayment_amount = repayment_amount

    @property
    def success(self):
        """Gets the success of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The success of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this SettleQuotaPaymentResponse.


        :param success: The success of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def uid(self):
        """Gets the uid of this SettleQuotaPaymentResponse.  # noqa: E501


        :return: The uid of this SettleQuotaPaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SettleQuotaPaymentResponse.


        :param uid: The uid of this SettleQuotaPaymentResponse.  # noqa: E501
        :type: int
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettleQuotaPaymentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettleQuotaPaymentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SettleQuotaPaymentResponse):
            return True

        return self.to_dict() != other.to_dict()
