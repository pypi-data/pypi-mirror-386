# coding: utf-8

"""
    eco_partner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class GetCustomerDetailsByUIDResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_type': 'str',
        'account_username': 'str',
        'association_success_time': 'str',
        'customer_account_verified': 'bool',
        'customer_bd': 'str',
        'email': 'str',
        'mobile': 'str',
        'outstanding_amount': 'float',
        'parent_organization_name': 'str',
        'parent_partner_uid': 'int',
        'parent_partner_username': 'str',
        'quota_allocated': 'float',
        'quota_balance': 'float',
        'quota_unit': 'str',
        'register_country_code': 'str',
        'remark': 'str',
        'suspension_policy': 'str',
        'uid': 'int'
    }

    attribute_map = {
        'account_type': 'AccountType',
        'account_username': 'AccountUsername',
        'association_success_time': 'AssociationSuccessTime',
        'customer_account_verified': 'CustomerAccountVerified',
        'customer_bd': 'CustomerBd',
        'email': 'Email',
        'mobile': 'Mobile',
        'outstanding_amount': 'OutstandingAmount',
        'parent_organization_name': 'ParentOrganizationName',
        'parent_partner_uid': 'ParentPartnerUid',
        'parent_partner_username': 'ParentPartnerUsername',
        'quota_allocated': 'QuotaAllocated',
        'quota_balance': 'QuotaBalance',
        'quota_unit': 'QuotaUnit',
        'register_country_code': 'RegisterCountryCode',
        'remark': 'Remark',
        'suspension_policy': 'SuspensionPolicy',
        'uid': 'Uid'
    }

    def __init__(self, account_type=None, account_username=None, association_success_time=None, customer_account_verified=None, customer_bd=None, email=None, mobile=None, outstanding_amount=None, parent_organization_name=None, parent_partner_uid=None, parent_partner_username=None, quota_allocated=None, quota_balance=None, quota_unit=None, register_country_code=None, remark=None, suspension_policy=None, uid=None, _configuration=None):  # noqa: E501
        """GetCustomerDetailsByUIDResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_type = None
        self._account_username = None
        self._association_success_time = None
        self._customer_account_verified = None
        self._customer_bd = None
        self._email = None
        self._mobile = None
        self._outstanding_amount = None
        self._parent_organization_name = None
        self._parent_partner_uid = None
        self._parent_partner_username = None
        self._quota_allocated = None
        self._quota_balance = None
        self._quota_unit = None
        self._register_country_code = None
        self._remark = None
        self._suspension_policy = None
        self._uid = None
        self.discriminator = None

        if account_type is not None:
            self.account_type = account_type
        if account_username is not None:
            self.account_username = account_username
        if association_success_time is not None:
            self.association_success_time = association_success_time
        if customer_account_verified is not None:
            self.customer_account_verified = customer_account_verified
        if customer_bd is not None:
            self.customer_bd = customer_bd
        if email is not None:
            self.email = email
        if mobile is not None:
            self.mobile = mobile
        if outstanding_amount is not None:
            self.outstanding_amount = outstanding_amount
        if parent_organization_name is not None:
            self.parent_organization_name = parent_organization_name
        if parent_partner_uid is not None:
            self.parent_partner_uid = parent_partner_uid
        if parent_partner_username is not None:
            self.parent_partner_username = parent_partner_username
        if quota_allocated is not None:
            self.quota_allocated = quota_allocated
        if quota_balance is not None:
            self.quota_balance = quota_balance
        if quota_unit is not None:
            self.quota_unit = quota_unit
        if register_country_code is not None:
            self.register_country_code = register_country_code
        if remark is not None:
            self.remark = remark
        if suspension_policy is not None:
            self.suspension_policy = suspension_policy
        if uid is not None:
            self.uid = uid

    @property
    def account_type(self):
        """Gets the account_type of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The account_type of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this GetCustomerDetailsByUIDResponse.


        :param account_type: The account_type of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def account_username(self):
        """Gets the account_username of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The account_username of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_username

    @account_username.setter
    def account_username(self, account_username):
        """Sets the account_username of this GetCustomerDetailsByUIDResponse.


        :param account_username: The account_username of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._account_username = account_username

    @property
    def association_success_time(self):
        """Gets the association_success_time of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The association_success_time of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._association_success_time

    @association_success_time.setter
    def association_success_time(self, association_success_time):
        """Sets the association_success_time of this GetCustomerDetailsByUIDResponse.


        :param association_success_time: The association_success_time of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._association_success_time = association_success_time

    @property
    def customer_account_verified(self):
        """Gets the customer_account_verified of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The customer_account_verified of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: bool
        """
        return self._customer_account_verified

    @customer_account_verified.setter
    def customer_account_verified(self, customer_account_verified):
        """Sets the customer_account_verified of this GetCustomerDetailsByUIDResponse.


        :param customer_account_verified: The customer_account_verified of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: bool
        """

        self._customer_account_verified = customer_account_verified

    @property
    def customer_bd(self):
        """Gets the customer_bd of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The customer_bd of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_bd

    @customer_bd.setter
    def customer_bd(self, customer_bd):
        """Sets the customer_bd of this GetCustomerDetailsByUIDResponse.


        :param customer_bd: The customer_bd of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._customer_bd = customer_bd

    @property
    def email(self):
        """Gets the email of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The email of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetCustomerDetailsByUIDResponse.


        :param email: The email of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mobile(self):
        """Gets the mobile of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The mobile of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this GetCustomerDetailsByUIDResponse.


        :param mobile: The mobile of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def outstanding_amount(self):
        """Gets the outstanding_amount of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The outstanding_amount of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_amount

    @outstanding_amount.setter
    def outstanding_amount(self, outstanding_amount):
        """Sets the outstanding_amount of this GetCustomerDetailsByUIDResponse.


        :param outstanding_amount: The outstanding_amount of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: float
        """

        self._outstanding_amount = outstanding_amount

    @property
    def parent_organization_name(self):
        """Gets the parent_organization_name of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The parent_organization_name of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_organization_name

    @parent_organization_name.setter
    def parent_organization_name(self, parent_organization_name):
        """Sets the parent_organization_name of this GetCustomerDetailsByUIDResponse.


        :param parent_organization_name: The parent_organization_name of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._parent_organization_name = parent_organization_name

    @property
    def parent_partner_uid(self):
        """Gets the parent_partner_uid of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The parent_partner_uid of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: int
        """
        return self._parent_partner_uid

    @parent_partner_uid.setter
    def parent_partner_uid(self, parent_partner_uid):
        """Sets the parent_partner_uid of this GetCustomerDetailsByUIDResponse.


        :param parent_partner_uid: The parent_partner_uid of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: int
        """

        self._parent_partner_uid = parent_partner_uid

    @property
    def parent_partner_username(self):
        """Gets the parent_partner_username of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The parent_partner_username of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_partner_username

    @parent_partner_username.setter
    def parent_partner_username(self, parent_partner_username):
        """Sets the parent_partner_username of this GetCustomerDetailsByUIDResponse.


        :param parent_partner_username: The parent_partner_username of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._parent_partner_username = parent_partner_username

    @property
    def quota_allocated(self):
        """Gets the quota_allocated of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The quota_allocated of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: float
        """
        return self._quota_allocated

    @quota_allocated.setter
    def quota_allocated(self, quota_allocated):
        """Sets the quota_allocated of this GetCustomerDetailsByUIDResponse.


        :param quota_allocated: The quota_allocated of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: float
        """

        self._quota_allocated = quota_allocated

    @property
    def quota_balance(self):
        """Gets the quota_balance of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The quota_balance of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: float
        """
        return self._quota_balance

    @quota_balance.setter
    def quota_balance(self, quota_balance):
        """Sets the quota_balance of this GetCustomerDetailsByUIDResponse.


        :param quota_balance: The quota_balance of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: float
        """

        self._quota_balance = quota_balance

    @property
    def quota_unit(self):
        """Gets the quota_unit of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The quota_unit of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._quota_unit

    @quota_unit.setter
    def quota_unit(self, quota_unit):
        """Sets the quota_unit of this GetCustomerDetailsByUIDResponse.


        :param quota_unit: The quota_unit of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._quota_unit = quota_unit

    @property
    def register_country_code(self):
        """Gets the register_country_code of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The register_country_code of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._register_country_code

    @register_country_code.setter
    def register_country_code(self, register_country_code):
        """Sets the register_country_code of this GetCustomerDetailsByUIDResponse.


        :param register_country_code: The register_country_code of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._register_country_code = register_country_code

    @property
    def remark(self):
        """Gets the remark of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The remark of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this GetCustomerDetailsByUIDResponse.


        :param remark: The remark of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def suspension_policy(self):
        """Gets the suspension_policy of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The suspension_policy of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: str
        """
        return self._suspension_policy

    @suspension_policy.setter
    def suspension_policy(self, suspension_policy):
        """Sets the suspension_policy of this GetCustomerDetailsByUIDResponse.


        :param suspension_policy: The suspension_policy of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: str
        """

        self._suspension_policy = suspension_policy

    @property
    def uid(self):
        """Gets the uid of this GetCustomerDetailsByUIDResponse.  # noqa: E501


        :return: The uid of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetCustomerDetailsByUIDResponse.


        :param uid: The uid of this GetCustomerDetailsByUIDResponse.  # noqa: E501
        :type: int
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCustomerDetailsByUIDResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCustomerDetailsByUIDResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCustomerDetailsByUIDResponse):
            return True

        return self.to_dict() != other.to_dict()
