# coding: utf-8

"""
    eco_partner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class CheckInvitationStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'claimed_time': 'str',
        'claimed_user_uid': 'int',
        'created_time': 'str',
        'customer_type': 'str',
        'failure_reason': 'str',
        'partner_uid': 'int',
        'status': 'str',
        'token': 'str'
    }

    attribute_map = {
        'claimed_time': 'ClaimedTime',
        'claimed_user_uid': 'ClaimedUserUid',
        'created_time': 'CreatedTime',
        'customer_type': 'CustomerType',
        'failure_reason': 'FailureReason',
        'partner_uid': 'PartnerUid',
        'status': 'Status',
        'token': 'Token'
    }

    def __init__(self, claimed_time=None, claimed_user_uid=None, created_time=None, customer_type=None, failure_reason=None, partner_uid=None, status=None, token=None, _configuration=None):  # noqa: E501
        """CheckInvitationStatusResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._claimed_time = None
        self._claimed_user_uid = None
        self._created_time = None
        self._customer_type = None
        self._failure_reason = None
        self._partner_uid = None
        self._status = None
        self._token = None
        self.discriminator = None

        if claimed_time is not None:
            self.claimed_time = claimed_time
        if claimed_user_uid is not None:
            self.claimed_user_uid = claimed_user_uid
        if created_time is not None:
            self.created_time = created_time
        if customer_type is not None:
            self.customer_type = customer_type
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if partner_uid is not None:
            self.partner_uid = partner_uid
        if status is not None:
            self.status = status
        if token is not None:
            self.token = token

    @property
    def claimed_time(self):
        """Gets the claimed_time of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The claimed_time of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._claimed_time

    @claimed_time.setter
    def claimed_time(self, claimed_time):
        """Sets the claimed_time of this CheckInvitationStatusResponse.


        :param claimed_time: The claimed_time of this CheckInvitationStatusResponse.  # noqa: E501
        :type: str
        """

        self._claimed_time = claimed_time

    @property
    def claimed_user_uid(self):
        """Gets the claimed_user_uid of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The claimed_user_uid of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._claimed_user_uid

    @claimed_user_uid.setter
    def claimed_user_uid(self, claimed_user_uid):
        """Sets the claimed_user_uid of this CheckInvitationStatusResponse.


        :param claimed_user_uid: The claimed_user_uid of this CheckInvitationStatusResponse.  # noqa: E501
        :type: int
        """

        self._claimed_user_uid = claimed_user_uid

    @property
    def created_time(self):
        """Gets the created_time of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The created_time of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CheckInvitationStatusResponse.


        :param created_time: The created_time of this CheckInvitationStatusResponse.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def customer_type(self):
        """Gets the customer_type of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The customer_type of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this CheckInvitationStatusResponse.


        :param customer_type: The customer_type of this CheckInvitationStatusResponse.  # noqa: E501
        :type: str
        """

        self._customer_type = customer_type

    @property
    def failure_reason(self):
        """Gets the failure_reason of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The failure_reason of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this CheckInvitationStatusResponse.


        :param failure_reason: The failure_reason of this CheckInvitationStatusResponse.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def partner_uid(self):
        """Gets the partner_uid of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The partner_uid of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._partner_uid

    @partner_uid.setter
    def partner_uid(self, partner_uid):
        """Sets the partner_uid of this CheckInvitationStatusResponse.


        :param partner_uid: The partner_uid of this CheckInvitationStatusResponse.  # noqa: E501
        :type: int
        """

        self._partner_uid = partner_uid

    @property
    def status(self):
        """Gets the status of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The status of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckInvitationStatusResponse.


        :param status: The status of this CheckInvitationStatusResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def token(self):
        """Gets the token of this CheckInvitationStatusResponse.  # noqa: E501


        :return: The token of this CheckInvitationStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CheckInvitationStatusResponse.


        :param token: The token of this CheckInvitationStatusResponse.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckInvitationStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckInvitationStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckInvitationStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
