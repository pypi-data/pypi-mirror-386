# coding: utf-8

"""
    filenas

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from byteplussdkcore.configuration import Configuration


class ClientForDescribeMountedClientsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'protocol_version': 'str',
        'vpc_name': 'str'
    }

    attribute_map = {
        'ip': 'Ip',
        'protocol_version': 'ProtocolVersion',
        'vpc_name': 'VpcName'
    }

    def __init__(self, ip=None, protocol_version=None, vpc_name=None, _configuration=None):  # noqa: E501
        """ClientForDescribeMountedClientsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ip = None
        self._protocol_version = None
        self._vpc_name = None
        self.discriminator = None

        if ip is not None:
            self.ip = ip
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if vpc_name is not None:
            self.vpc_name = vpc_name

    @property
    def ip(self):
        """Gets the ip of this ClientForDescribeMountedClientsOutput.  # noqa: E501


        :return: The ip of this ClientForDescribeMountedClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ClientForDescribeMountedClientsOutput.


        :param ip: The ip of this ClientForDescribeMountedClientsOutput.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def protocol_version(self):
        """Gets the protocol_version of this ClientForDescribeMountedClientsOutput.  # noqa: E501


        :return: The protocol_version of this ClientForDescribeMountedClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this ClientForDescribeMountedClientsOutput.


        :param protocol_version: The protocol_version of this ClientForDescribeMountedClientsOutput.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def vpc_name(self):
        """Gets the vpc_name of this ClientForDescribeMountedClientsOutput.  # noqa: E501


        :return: The vpc_name of this ClientForDescribeMountedClientsOutput.  # noqa: E501
        :rtype: str
        """
        return self._vpc_name

    @vpc_name.setter
    def vpc_name(self, vpc_name):
        """Sets the vpc_name of this ClientForDescribeMountedClientsOutput.


        :param vpc_name: The vpc_name of this ClientForDescribeMountedClientsOutput.  # noqa: E501
        :type: str
        """

        self._vpc_name = vpc_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientForDescribeMountedClientsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientForDescribeMountedClientsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientForDescribeMountedClientsOutput):
            return True

        return self.to_dict() != other.to_dict()
