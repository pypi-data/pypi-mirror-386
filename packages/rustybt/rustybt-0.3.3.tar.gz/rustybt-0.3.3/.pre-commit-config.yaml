# Pre-commit hooks for RustyBT
# Install: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.1.0
    hooks:
      - id: black
        language_version: python3.12
        args: [--line-length=100]

  # Fast Python linter (replaces flake8, isort, pyupgrade)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.12
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Type checking with mypy (scoped to strict modules only)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.10.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests>=2.31.0
          - types-pytz>=2024.1.0
          - types-PyYAML>=6.0.12
          - pandas-stubs>=2.0.0
          - sqlalchemy-stubs>=0.4
          - types-python-dateutil>=2.8.19
          - types-networkx>=3.0
        # Only check strict modules: exceptions, utils/{logging,error_handling,secure_pickle}, analytics/*
        files: ^(rustybt/(exceptions|utils/(logging|error_handling|secure_pickle)|analytics/.*)\.py)$

  # General pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: [--fix=lf]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
        additional_dependencies: ["bandit[toml]", "pbr"]
        exclude: ^tests/

  # Check for secrets (disabled - baseline file needs configuration)
  # - repo: https://github.com/Yelp/detect-secrets
  #   rev: v1.4.0
  #   hooks:
  #     - id: detect-secrets
  #       args: [--baseline, .secrets.baseline]
  #       exclude: package.lock.json

  # Zero-mock enforcement (local scripts)
  - repo: local
    hooks:
      - id: detect-mocks
        name: Detect Mock Patterns
        entry: python3 scripts/detect_mocks.py --quick
        language: system
        types: [python]
        pass_filenames: false
        description: "Scans production code for mock patterns (mock, fake, stub, dummy names)"

      - id: check-personal-info
        name: Check for Personal Information in Docs
        entry: bash scripts/check_personal_info.sh
        language: system
        pass_filenames: false
        description: "Scans documentation for personal paths, emails, API keys, and other sensitive info"
        files: ^docs/(examples|api|guides|getting-started|about|index\.md)

# Configuration for specific hooks
default_language_version:
  python: python3.12

# Files to exclude from all hooks
exclude: |
  (?x)^(
      \.eggs/|
      \.git/|
      \.hg/|
      \.mypy_cache/|
      \.pytest_cache/|
      \.tox/|
      \.venv/|
      _build/|
      buck-out/|
      build/|
      dist/|
      \.vscode/|
      \.idea/|
      deps/
  )
