name: Zero-Mock Enforcement

# IMPORTANT: This workflow has been ACTIVATED in Story X2.5 (CI/CD Pipeline)

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'rustybt/**/*.py'
      - 'scripts/detect_*.py'
      - 'scripts/verify_*.py'
      - 'scripts/test_*.py'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'rustybt/**/*.py'
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  detect-mocks:
    name: Detect Mock Patterns
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run mock detection (strict mode)
        run: |
          echo "Running mock pattern detection..."
          python scripts/detect_mocks.py --strict
        id: detect-mocks

  detect-hardcoded-values:
    name: Detect Hardcoded Values
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run hardcoded values detection
        run: |
          echo "Running hardcoded values detection..."
          python scripts/detect_hardcoded_values.py --fail-on-found
        id: detect-hardcoded

  verify-validations:
    name: Verify Validation Functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run validation verification
        run: |
          echo "Verifying validation functions reject invalid data..."
          python scripts/verify_validations.py --ensure-real-checks
        id: verify-validations

  test-unique-results:
    name: Test Function Output Uniqueness
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run unique results test
        run: |
          echo "Testing functions produce unique results..."
          python scripts/test_unique_results.py
        id: test-unique

  zero-mock-summary:
    name: Zero-Mock Enforcement Summary
    runs-on: ubuntu-latest
    needs: [detect-mocks, detect-hardcoded-values, verify-validations, test-unique-results]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "=== Zero-Mock Enforcement Results ==="
          echo ""
          echo "All checks completed. Review individual job results above."
          echo ""
          echo "✅ Mock pattern detection: ${{ needs.detect-mocks.result }}"
          echo "✅ Hardcoded values detection: ${{ needs.detect-hardcoded-values.result }}"
          echo "✅ Validation verification: ${{ needs.verify-validations.result }}"
          echo "✅ Unique results test: ${{ needs.test-unique-results.result }}"
          echo ""

          if [[ "${{ needs.detect-mocks.result }}" == "failure" ]] || \
             [[ "${{ needs.detect-hardcoded-values.result }}" == "failure" ]] || \
             [[ "${{ needs.verify-validations.result }}" == "failure" ]] || \
             [[ "${{ needs.test-unique-results.result }}" == "failure" ]]; then
            echo "❌ Zero-mock enforcement FAILED"
            exit 1
          else
            echo "✅ Zero-mock enforcement PASSED"
          fi
