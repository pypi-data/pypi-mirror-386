[project]
name = 'rustybt'
description = 'Modern Python backtesting engine built on Zipline-Reloaded, enhanced with Decimal precision, Polars data engine, and live trading capabilities'
readme = 'README.md'
dynamic = ["version"]

authors = [
    { name = 'Quantopian Inc' },
    { name = 'Stefan Jansen' },
    { email = 'pm@ml4trading.io' },
]
maintainers = [
    { name = 'RustyBT Contributors' },
]

classifiers = [
    'Development Status :: 4 - Beta',
    'Natural Language :: English',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Operating System :: OS Independent',
    'Intended Audience :: Science/Research',
    'Topic :: Office/Business :: Financial :: Investment',
    'Topic :: Scientific/Engineering :: Information Analysis',
    'Topic :: System :: Distributed Computing',
]

license = "Apache-2.0"
license-files = [
    "LICENSE",
]

requires-python = '>=3.12'
dependencies = [
    "numpy>=1.26.0,<2.0; python_version=='3.12'",
    "numpy>=2.1; python_version>='3.13'",
    "pandas >=1.3.0,<3.0",
    'alembic >=0.7.7',
    'bcolz-zipline >=1.2.6',
    'bottleneck >=1.0.0',
    'click >=4.0.0',
    'empyrical-reloaded >=0.5.7',
    'h5py >=2.7.1',
    'intervaltree >=2.1.0',
    'iso3166 >=2.1.1',
    'iso4217 >=1.6.20180829',
    'lru-dict >=1.1.4',
    'multipledispatch >=0.6.0',
    'networkx >=2.0',
    'numexpr >=2.8.0,<2.10; python_version=="3.12"',
    'numexpr >=2.10; python_version>="3.13"',
    'patsy >=0.4.0',
    'python-dateutil >=2.4.2',
    'pytz >=2018.5',
    'requests >=2.9.1',
    'scipy >=0.17.1',
    'six >=1.10.0',
    'sqlalchemy >=2',
    'statsmodels >=0.6.1',
    # ta-lib is not available for Numpy 2.0 => optional
    #    'ta-lib >=0.4.09',
    'tables >=3.4.3',
    'toolz >=0.8.2',
    "exchange-calendars>=4.2.4",
    # RustyBT additions
    'polars >=1.0',
    'pyarrow >=18.0',
    'structlog',
    'pydantic >=2.0',
    'pyyaml >=6.0',
    'ccxt >=4.0.0',
    'yfinance >=0.2.0',
    'apscheduler >=3.0',
    'ib-insync >=0.9.86',
    'aiohttp >=3.9.0',
    'websockets >=14.0',
    'pybit >=5.0.0',
    'hyperliquid-python-sdk >=0.1.0',
    'cryptography >=41.0.0',
    'eth-account >=0.10.0',
    "rich>=14.1.0",
    # Jupyter notebook integration (Story 8.1)
    'plotly >=5.0',
    'tqdm >=4.65',
    'ipywidgets >=8.0',
    'nest-asyncio >=1.5',
    # Report generation (Story 8.2)
    'seaborn >=0.13.0',
    'jinja2 >=3.0.0',
    # IB dependency
    'eventkit',
]

[project.urls]
homepage = 'https://github.com/jerryinyang/rustybt'
repository = 'https://github.com/jerryinyang/rustybt'
documentation = 'https://jerryinyang.github.io/rustybt/'

[build-system]
requires = [
    'setuptools>=64.0.0',  # Modern setuptools with better PEP 517/660 support
    "setuptools_scm[toml]>=8.0",  # Updated for better pyproject.toml integration
    'wheel>=0.36.0',
    'Cython>=0.29.21,<3.2.0',
    'numpy>=2.0.0 ; python_version>"3.9"',
    'numpy<2.0 ; python_version<="3.9"',
]
build-backend = 'setuptools.build_meta'

[project.optional-dependencies]
test = [
    'tox',
    'pytest>=7.2.0',
    'pytest-cov >=3.0.0',
    'pytest-xdist >=2.5.0',
    'pytest-timeout >=1.4.2',
    'pytest-asyncio >=0.21.0',
    'parameterized >=0.6.1',
    'testfixtures >=4.1.2',
    'flake8 >=3.9.1',
    'matplotlib >=1.5.3',
    'responses >=0.9.0',
    'freezegun >=1.2.0',
    'pandas-datareader >=0.2.1',
    #    'click <8.1.0',
    'click',
    'coverage',
    'pytest-rerunfailures',
    'Cython>=0.29.21,<3.2.0',
    'pytest-benchmark >=5.1.0',
    'hypothesis>=6.0',
]

dev = [
    'pre-commit >=2.12.1',
    'Cython>=0.29.21',
    'ruff>=0.11.12',
    'mypy>=1.10.0',
    'black>=24.1',
    'hypothesis>=6.0',
    'twine>=6.0.0',  # For uploading to PyPI
    # Jupyter notebook tools for development and strategy exploration
    'jupyter>=1.0.0',
    'jupyterlab>=4.0.0',
    'ipython>=8.0.0',
    # Type stubs for external libraries (Story 8.9)
    'types-requests>=2.31.0',
    'types-pytz>=2024.1.0',
    'types-PyYAML>=6.0.12',
    'pandas-stubs>=2.0.0',
    'sqlalchemy-stubs>=0.4',
    'types-python-dateutil>=2.8.19',
    'types-networkx>=3.0',
    'types-seaborn>=0.13.0',
    # Note: toolz, multipledispatch, statsmodels lack official type stubs
    # These will use --ignore-missing-imports in mypy config
]

benchmarks = [
    'pytest-benchmark>=3.4.1',
    'memory_profiler>=0.61.0',
    'snakeviz>=2.2.0',
    'matplotlib>=3.5.0',
]

optimization = [
    'scikit-learn>=1.3.0',  # Required for sensitivity analysis (bootstrap resampling)
    'scikit-optimize>=0.9.0',
    'deap>=1.4.0',
    'matplotlib>=3.5.0',
    'tqdm>=4.0.0',
    'psutil>=5.0.0',
    'hpbandster>=0.7.4',  # BOHB multi-fidelity optimization (Story X4.7)
    'ray[default]>=2.0.0; extra == "ray"',
]

docs = [
    'Cython',
    # MkDocs for modern documentation
    'mkdocs>=1.5.0',
    'mkdocs-material>=9.5.0',
    'mkdocstrings[python]>=0.24.0',
    'mkdocs-autorefs>=0.5.0',
    # Sphinx (legacy, kept for backward compatibility)
    'Sphinx >=1.3.2',
    'numpydoc >=0.5.0',
    'sphinx-autobuild >=0.6.0',
    'pydata-sphinx-theme',
    'sphinx_markdown_tables',
    'm2r2',
]

# Meta-extras for convenient installation (Story 001)
full = ['rustybt[optimization]', 'rustybt[benchmarks]']
all = ['rustybt[optimization]', 'rustybt[benchmarks]']

[project.scripts]
rustybt = 'rustybt.__main__:main'
# Maintain backward compatibility with zipline command
zipline = 'rustybt.__main__:main'

[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ['.']
include = ['rustybt*']  # Explicitly include all rustybt subpackages
exclude = ['tests*', 'deps*', 'docs*', '.bmad-core*']
namespaces = false

[tool.setuptools_scm]
write_to = "rustybt/_version.py"
version_scheme = 'guess-next-dev'
local_scheme = 'no-local-version'
fallback_version = "0.1.2.dev0"

[tool.setuptools.package-data]
"*" = [
    "*.py",      # Include Python files explicitly
    "*.pyi",
    "*.pyx",
    "*.pxi",
    "*.pxd",
    "*.so",      # Include compiled Cython extensions (Linux/Mac)
    "*.pyd",     # Include compiled Cython extensions (Windows)
]
"rustybt" = [
    "py.typed",
]
"rustybt.lib" = [
    "*.py",      # Ensure labelarray.py is included
    "*.pyx",
    "*.pxd",
    "*.pxi",
    "*.so",
    "*.pyd",
]

[tool.pytest.ini_options]
pythonpath = ['.']
testpaths = 'tests'
asyncio_mode = "auto"
filterwarnings = [
    'ignore::DeprecationWarning:pandas_datareader.compat',
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "memory: memory profiling benchmarks",
    "api_integration: marks tests requiring external API integration",
    "regression: marks tests as performance regression tests (CI/CD performance monitoring)",
    "hypothesis_regression: regression tests from Hypothesis shrunk examples",
    "asyncio: marks tests as async tests",
    "live: marks tests requiring live API access (network dependent)",
    "validation: marks tests as validation tests (backtest vs paper correlation)",
    "ib_integration: marks tests requiring IB paper account (skip by default)",
    "property: property-based tests using hypothesis",
    "exchange_integration: marks tests requiring exchange integration",
    "websocket_integration: marks tests requiring WebSocket connectivity",
]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-v", # Verbose output
    "--tb=short", # Shorter traceback format
    "--durations=20", # Show 20 slowest tests
    "--maxfail=50", # Stop after 50 failures to prevent endless reruns
    "--ff", # Run failed tests first
]

[tool.pytest-benchmark]
min_rounds = 10
min_time = 0.1
max_time = 10.0
calibration_precision = 10
warmup = true
warmup_iterations = 5

[tool.cibuildwheel]
test-extras = "test"
test-command = "pytest -n auto --reruns 5 --dist=loadgroup --strict-markers --disable-warnings -q {project}/tests"
build-verbosity = 3
environment = "GITHUB_ACTIONS=true"

[tool.cibuildwheel.macos]
archs = [
    "x86_64",
    "arm64",
    "universal2",
]

[tool.cibuildwheel.linux]
archs = ["auto64"]

[tool.cibuildwheel.windows]
test-command = 'pytest -n auto -k "not daily_returns_is_special_case_of_returns" --reruns 5 --dist=loadgroup --strict-markers --disable-warnings {package}/tests'

[tool.black]
line-length = 100
target-version = ['py312']
exclude = '''
(
    \.venv
  | \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.tox
  | _build
  | build
  | dist
  | venv
  | asv_bench/env
  | rustybt/_version\.py
)
'''

[tool.ruff]
line-length = 100
target-version = "py312"
exclude = ["docs/examples/**/*.py", "docs/examples/**/*.ipynb"]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "N",
    "D",
    "UP",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "C4",
    "ISC",
    "T20",
    "PYI",
    "PT",
    "Q",
    "SIM",
    "TID",
    "ARG",
    "RUF",
    "NPY201",
]
ignore = [
    "ANN204",
    "D203",
    "D212",
    "D213",
    "D415",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.extend-per-file-ignores]
# Auto-generated version file - exempt from all checks
"rustybt/_version.py" = ["ALL"]
# Test files - exempt from most quality checks
"tests/**/*.py" = [
    "S", "ARG", "FBT", "PLR", "D", "ANN", "RUF",
    "T201", "PT", "E", "N", "BLE", "B", "UP", "SIM", "C4", "A", "F", "PYI", "W"
]
# Benchmark files - exempt from quality checks
"benchmarks/**/*.py" = [
    "S", "D", "ANN", "T201", "ARG", "E", "N", "RUF", "W", "F", "UP", "BLE", "B", "SIM", "C4", "PT", "PYI"
]
# Example files - tutorial code, print statements allowed
"examples/**/*.py" = [
    "T201", "D", "ANN", "E", "ARG", "N", "S", "RUF", "UP", "A", "B", "BLE", "F", "PYI", "W", "SIM"
]
"examples/**/*.ipynb" = ["ALL"]
# Documentation code samples
"docs/**/*.py" = [
    "T201", "D", "ANN", "E501", "ARG", "INP001"
]
# Scripts - utility scripts, relaxed standards
"scripts/**/*.py" = [
    "T201", "D", "ANN", "E", "S", "UP", "ARG", "N", "BLE", "RUF", "W", "F", "B", "SIM", "C4", "A", "TID", "PT"
]
# Temp directory - experimental/scratch code
"temp/**/*.py" = [
    "T201", "D", "ANN", "E501", "S", "ARG", "N"
]
# Legacy Zipline core modules - gradual migration strategy
"rustybt/algorithm.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "T201", "E", "W", "SIM", "C4", "RUF", "A", "B", "F", "S", "PYI"]
"rustybt/api.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "W", "E", "F", "PYI"]
"rustybt/protocol.py" = ["D", "ANN", "W", "E", "F", "PYI"]
"rustybt/errors.py" = ["D", "ANN", "N818", "W", "E", "F"]
"rustybt/extensions.py" = ["D", "ANN", "W", "E", "F", "PYI"]
# Legacy assets modules
"rustybt/assets/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E", "B", "RUF", "W", "SIM", "C4", "A", "F", "S", "PYI"]
# Legacy data modules
"rustybt/data/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E", "B", "RUF", "T201", "TID", "W", "SIM", "C4", "A", "F", "S", "PYI"]
# Legacy finance modules
"rustybt/finance/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E", "B", "RUF", "W", "SIM", "C4", "A", "F", "S", "PYI"]
# Legacy pipeline modules
"rustybt/pipeline/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E", "B", "RUF", "TID", "W", "SIM", "C4", "A", "F", "S", "PYI"]
# Legacy gens modules
"rustybt/gens/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E501", "B", "RUF", "T201", "W", "SIM", "C4", "S101"]
# Legacy testing utilities
"rustybt/testing/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E501", "B", "RUF", "S", "W", "SIM", "C4"]
# Legacy lib modules
"rustybt/lib/**/*.py" = ["D", "ANN", "ARG", "BLE", "N", "UP", "E501", "B", "RUF", "W", "SIM", "C4"]
# Legacy sources modules
"rustybt/sources/**/*.py" = ["D", "ANN", "ARG", "E501", "N", "UP", "RUF", "BLE"]
# Core init and main
"rustybt/__main__.py" = ["ALL"]
# Specific legacy files with remaining issues (take precedence over wildcards)
"rustybt/test_algorithms.py" = ["ALL"]
"rustybt/testing/core.py" = ["ALL"]
"rustybt/sources/requests_csv.py" = ["ALL"]
"rustybt/live/brokers/paper_broker.py" = ["ALL"]
"rustybt/live/shadow/engine.py" = ["ALL"]
"rustybt/analytics/reports.py" = ["ALL"]
"rustybt/optimization/optimizer.py" = ["ALL"]
"rustybt/optimization/search/genetic_algorithm.py" = ["ALL"]
"rustybt/__init__.py" = ["ALL"]
# Utils modules (all legacy except logging, error_handling, secure_pickle which are strict)
"rustybt/utils/**/*.py" = ["D", "ANN", "ARG", "E", "N", "UP", "RUF", "B", "W", "SIM", "C4", "BLE", "T201", "A", "F", "S", "PYI"]
# Examples in source tree
"rustybt/examples/**/*.py" = ["D", "ANN", "ARG", "T201", "E501", "S"]
# Portfolio modules
"rustybt/portfolio/**/*.py" = ["D", "ANN", "ARG", "E501", "RUF", "UP", "N"]
# Optimization modules
"rustybt/optimization/**/*.py" = ["D", "ANN", "ARG", "E501", "RUF", "UP", "N", "BLE"]
# Epic 8 modules - relaxed for baseline, will enforce gradually
"rustybt/analytics/**/*.py" = ["D", "ANN", "ARG", "E", "RUF", "UP", "N", "W", "SIM", "B", "T201"]
"rustybt/live/**/*.py" = ["D", "ANN", "ARG", "E", "RUF", "UP", "BLE", "N", "W", "SIM", "B", "F401", "PYI056"]
"rustybt/exceptions.py" = ["D", "ANN", "ARG", "N818", "UP", "W"]
# Stub files
"**/*.pyi" = ["D", "ANN", "ARG", "N", "UP", "F811", "PYI021"]
# Special case: Mathematical notation allowed
"rustybt/portfolio/risk.py" = ["RUF002", "RUF003", "ANN401"]
# Legacy core modules
"rustybt/country.py" = ["D", "ANN"]
"rustybt/currency.py" = ["D", "ANN"]
"rustybt/zipline_warnings.py" = ["D", "ANN"]
"rustybt/dispatch.py" = ["D", "ANN"]
# Build files
"setup.py" = ["D", "ANN", "ARG", "E", "S"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Exclude generated files or third-party code
exclude = [
    "build",
    "dist",
    ".eggs",
    ".*.egg-info",
    "deps",
]

# Per-module options for libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "toolz.*",
    "multipledispatch.*",
    "statsmodels.*",
    "rustybt._protocol",
    "rustybt.gens.*",
    # Libraries without type stubs or py.typed markers
    "exchange_calendars.*",
    "ccxt.*",
    "ib_insync.*",
    "yfinance.*",
    "pybit.*",
    "hyperliquid_python_sdk.*",
    "binance.*",
    "tqdm.*",
    "nest_asyncio.*",
    "IPython.*",
    "plotly.*",
    "seaborn.*",
    "jinja2.*",
    "apscheduler.*",
    "aiohttp.*",
    "websockets.*",
    "eth_account.*",
    "bcolz_zipline.*",
    "empyrical_reloaded.*",
    "tables.*",
]
ignore_missing_imports = true

# Gradual typing strategy: Relaxed checks for pre-existing code
# Strict typing enforced for: exceptions, utils/logging, utils/error_handling
# Epic 8 analytics/live modules: temporarily relaxed (to be migrated in Story 8.10)
# Legacy Zipline modules: will be migrated incrementally in future sprints
[[tool.mypy.overrides]]
module = [
    # Core algorithm and backtesting engine (Zipline legacy)
    "rustybt.algorithm",
    "rustybt.gens.*",
    "rustybt.sources.*",
    "rustybt.test_algorithms",
    "rustybt.__main__",
    "rustybt.api",
    "rustybt.country",
    "rustybt.currency",
    "rustybt.errors",
    "rustybt.extensions",
    "rustybt.dispatch",
    "rustybt.protocol",
    "rustybt.zipline_warnings",
    # Assets and instruments
    "rustybt.assets.*",
    # Data infrastructure
    "rustybt.data.bar_reader",
    "rustybt.data.bundles.*",
    "rustybt.data.minute_bars",
    "rustybt.data.adjustments",
    "rustybt.data.dispatch_bar_reader",
    "rustybt.data.session_bars",
    "rustybt.data.data_portal",
    "rustybt.data.resample",
    "rustybt.data.history_loader",
    "rustybt.data.catalog",
    "rustybt.data.loader",
    "rustybt.data.ffc.*",
    "rustybt.data.fx.*",
    "rustybt.data.bcolz_minute_bars",
    "rustybt.data.bcolz_daily_bars",
    "rustybt.data.hdf5_daily_bars",
    "rustybt.data.polars.metadata_catalog",
    "rustybt.data.polars.cache_manager",
    "rustybt.data.polars.parquet_writer",
    # Finance and trading
    "rustybt.finance.*",
    # Pipeline
    "rustybt.pipeline.*",
    # Testing utilities
    "rustybt.testing.*",
    # Library utilities
    "rustybt.lib.*",
    # General utilities (except new Epic 8 modules)
    "rustybt.utils.cache",
    "rustybt.utils.calendar_utils",
    "rustybt.utils.classproperty",
    "rustybt.utils.compat",
    "rustybt.utils.context_tricks",
    "rustybt.utils.date_utils",
    "rustybt.utils.dummy",
    "rustybt.utils.exploding_object",
    "rustybt.utils.final",
    "rustybt.utils.formatting",
    "rustybt.utils.idbox",
    "rustybt.utils.input_validation",
    "rustybt.utils.math_utils",
    "rustybt.utils.memoize",
    "rustybt.utils.numpy_utils",
    "rustybt.utils.pandas_utils",
    "rustybt.utils.string_formatting",
    "rustybt.utils.events",
    "rustybt.utils.api_support",
    "rustybt.utils.data",
    "rustybt.utils.run_algo",
    "rustybt.utils.security_list",
    # Epic 8 modules (temporarily relaxed for initial release - Story 8.10)
    # Note: rustybt.analytics.* moved to strict in Story X2.3
    "rustybt.live.*",
]
# Disable strict checks for gradual migration modules
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.coverage.run]
source = ["rustybt"]
omit = ["*/tests/*", "*/testing/*"]

[tool.coverage.report]
fail_under = 90
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.hypothesis]
database_file = ".hypothesis/examples.db"

[tool.hypothesis.profiles]
default = { max_examples = 1000 }
ci = { max_examples = 1000, derandomize = true }
quick = { max_examples = 100 }

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", "docs/examples"]
skips = ["B101", "B601"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py310-pandas{15,20,21,22,23}-numpy1
    py311-pandas{15,20,21,22,23}-numpy1
    py312-pandas{15,20,21,22,23}-numpy1
    py310-pandas{222,23}-numpy2{0,1,2}
    py311-pandas{222,23}-numpy2{0,1,2}
    py312-pandas{222,23}-numpy2{0,1,2}
    py313-pandas{222,23}-numpy2{2}

isolated_build = True
skip_missing_interpreters = True
minversion = 3.23.0

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[pytest_commands]
with_cov =
    pytest -n auto --reruns 2 --dist=loadgroup --strict-markers --disable-warnings  --tb=short --maxfail=30 --cov={toxinidir}/src --cov-report term --cov-report=xml --cov-report=html:htmlcov {toxinidir}/tests
without_cov =
    pytest -n auto --reruns 2 --dist=loadgroup --strict-markers --disable-warnings --tb=short --maxfail=20 {toxinidir}/tests
py313_specific =
    pytest -n auto --reruns 2 --dist=no --strict-markers --disable-warnings -v --tb=short --maxfail=10 --timeout=300 --durations=10 {toxinidir}/tests

# --- Base Test Environment ---
# This is the default configuration for all environments.
[testenv]
usedevelop = True
setenv =
    MPLBACKEND = Agg
passenv = GITHUB_ACTIONS

changedir = tmp
extras = test
deps =
    pandas15: pandas>=1.5.0,<1.6
    pandas20: pandas>=2.0,<2.1
    pandas21: pandas>=2.1,<2.2
    pandas22: pandas>=2.2,<2.3
    pandas222: pandas>=2.2.2,<2.3
    pandas23: pandas>=2.3,<2.4
    numpy1: numpy>=1.23.5,<2.0
    numpy20: numpy>=2.0,<2.1
    numpy21: numpy>=2.1,<2.2
    numpy22: numpy>=2.2,<2.3
# By default, all tests run with coverage.
commands = {[pytest_commands]with_cov}


# Special configuration for ALL Python 3.13 environments.
[testenv:py313-pandas{222,23}-numpy2{2}]
setenv =
    {[testenv]setenv}  # Inherit base setenv
    PYTHONHASHSEED = 0
    PYTHONFAULTHANDLER = 1
    PYTHONUNBUFFERED = 1
    PYTEST_CURRENT_TEST = 1
commands = {[pytest_commands]py313_specific}

# Disable coverage for ALL Python 3.11 environments due to IndexError bugs.
[testenv:py311-pandas{15,20,21,22,222,23}-numpy{1,20,21,22}]
commands = {[pytest_commands]without_cov}

# Disable coverage for pandas 1.5 on any python version.
[testenv:py{310,311,312,313}-pandas15-numpy{1,20,21,22}]
commands = {[pytest_commands]without_cov}

# Disable coverage for pandas 2.0 on any python version.
[testenv:py{310,311,312,313}-pandas{15,20}-numpy{1,20,21,22}]
commands = {[pytest_commands]without_cov}
"""
