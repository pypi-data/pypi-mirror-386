# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from ourskyai_sda_api.models.observation_quality import ObservationQuality
from ourskyai_sda_api.models.observation_result import ObservationResult

class V1ObservationSequenceResultImageSetsInner(BaseModel):
    """
    V1ObservationSequenceResultImageSetsInner
    """
    id: StrictStr = Field(...)
    node_id: StrictStr = Field(..., alias="nodeId")
    covariance: conlist(conlist(Union[StrictFloat, StrictInt])) = Field(..., description="The covariance matrix of the image set RA and Dec platesolve offset average. This is a 2D array of doubles - rows of columns")
    observation_results: conlist(ObservationResult) = Field(..., alias="observationResults")
    observation_quality: Optional[ObservationQuality] = Field(None, alias="observationQuality")
    __properties = ["id", "nodeId", "covariance", "observationResults", "observationQuality"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ObservationSequenceResultImageSetsInner:
        """Create an instance of V1ObservationSequenceResultImageSetsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in observation_results (list)
        _items = []
        if self.observation_results:
            for _item in self.observation_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['observationResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of observation_quality
        if self.observation_quality:
            _dict['observationQuality'] = self.observation_quality.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ObservationSequenceResultImageSetsInner:
        """Create an instance of V1ObservationSequenceResultImageSetsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ObservationSequenceResultImageSetsInner.parse_obj(obj)

        _obj = V1ObservationSequenceResultImageSetsInner.parse_obj({
            "id": obj.get("id"),
            "node_id": obj.get("nodeId"),
            "covariance": obj.get("covariance"),
            "observation_results": [ObservationResult.from_dict(_item) for _item in obj.get("observationResults")] if obj.get("observationResults") is not None else None,
            "observation_quality": ObservationQuality.from_dict(obj.get("observationQuality")) if obj.get("observationQuality") is not None else None
        })
        return _obj


