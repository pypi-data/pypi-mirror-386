# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from ourskyai_sda_api.models.v1_point import V1Point

class V1BlackoutVolumeRequest(BaseModel):
    """
    A designated volume of space that is not to be observed.  # noqa: E501
    """
    reference_frame: StrictStr = Field(..., description="The reference frame in which the volume is defined.")
    points: conlist(V1Point) = Field(..., description="The set of 8 points that define the volume, coordinates should be in the selected reference frame.")
    __properties = ["reference_frame", "points"]

    @validator('reference_frame')
    def reference_frame_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ECI_J2000', 'ECEF'):
            raise ValueError("must be one of enum values ('ECI_J2000', 'ECEF')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1BlackoutVolumeRequest:
        """Create an instance of V1BlackoutVolumeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in points (list)
        _items = []
        if self.points:
            for _item in self.points:
                if _item:
                    _items.append(_item.to_dict())
            _dict['points'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1BlackoutVolumeRequest:
        """Create an instance of V1BlackoutVolumeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1BlackoutVolumeRequest.parse_obj(obj)

        _obj = V1BlackoutVolumeRequest.parse_obj({
            "reference_frame": obj.get("reference_frame"),
            "points": [V1Point.from_dict(_item) for _item in obj.get("points")] if obj.get("points") is not None else None
        })
        return _obj


