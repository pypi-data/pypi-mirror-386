# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class V1RicVolumeSearchRequest(BaseModel):
    """
    Parameters to create a RIC volume search to search for a target - 3-sigma values should be at most 10% of the target's perigee altitude  # noqa: E501
    """
    target_id: StrictStr = Field(..., alias="targetId")
    radial3_sigma_meters: Union[StrictFloat, StrictInt] = Field(..., alias="radial3SigmaMeters", description="The radial 3-sigma uncertainty in meters")
    intrack3_sigma_meters: Union[StrictFloat, StrictInt] = Field(..., alias="intrack3SigmaMeters", description="The intrack 3-sigma uncertainty in meters")
    crosstrack3_sigma_meters: Union[StrictFloat, StrictInt] = Field(..., alias="crosstrack3SigmaMeters", description="The crosstrack 3-sigma uncertainty in meters")
    ric_stdev_epoch: Optional[datetime] = Field(None, alias="ricStdevEpoch", description="The epoch of the RIC standard deviation- if none is provided the current time is used")
    __properties = ["targetId", "radial3SigmaMeters", "intrack3SigmaMeters", "crosstrack3SigmaMeters", "ricStdevEpoch"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RicVolumeSearchRequest:
        """Create an instance of V1RicVolumeSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RicVolumeSearchRequest:
        """Create an instance of V1RicVolumeSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1RicVolumeSearchRequest.parse_obj(obj)

        _obj = V1RicVolumeSearchRequest.parse_obj({
            "target_id": obj.get("targetId"),
            "radial3_sigma_meters": obj.get("radial3SigmaMeters"),
            "intrack3_sigma_meters": obj.get("intrack3SigmaMeters"),
            "crosstrack3_sigma_meters": obj.get("crosstrack3SigmaMeters"),
            "ric_stdev_epoch": obj.get("ricStdevEpoch")
        })
        return _obj


