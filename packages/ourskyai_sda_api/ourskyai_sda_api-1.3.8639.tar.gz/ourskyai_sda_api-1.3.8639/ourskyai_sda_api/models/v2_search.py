# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from ourskyai_sda_api.models.search_completed_reason import SearchCompletedReason

class V2Search(BaseModel):
    """
    V2 Search- created by either RIC volumetric search or plane scan.  # noqa: E501
    """
    search_id: StrictStr = Field(..., alias="searchId")
    target_id: StrictStr = Field(..., alias="targetId")
    completed_at: Optional[datetime] = Field(None, alias="completedAt")
    completed_reason: Optional[SearchCompletedReason] = Field(None, alias="completedReason")
    observation_sequence_result_ids: conlist(StrictStr) = Field(..., alias="observationSequenceResultIds")
    __properties = ["searchId", "targetId", "completedAt", "completedReason", "observationSequenceResultIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2Search:
        """Create an instance of V2Search from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if completed_at (nullable) is None
        # and __fields_set__ contains the field
        if self.completed_at is None and "completed_at" in self.__fields_set__:
            _dict['completedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2Search:
        """Create an instance of V2Search from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2Search.parse_obj(obj)

        _obj = V2Search.parse_obj({
            "search_id": obj.get("searchId"),
            "target_id": obj.get("targetId"),
            "completed_at": obj.get("completedAt"),
            "completed_reason": obj.get("completedReason"),
            "observation_sequence_result_ids": obj.get("observationSequenceResultIds")
        })
        return _obj


