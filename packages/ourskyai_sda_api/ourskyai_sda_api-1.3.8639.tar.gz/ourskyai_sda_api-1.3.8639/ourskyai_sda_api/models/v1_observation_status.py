# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from ourskyai_sda_api.models.observation_state import ObservationState
from ourskyai_sda_api.models.tracking_type import TrackingType

class V1ObservationStatus(BaseModel):
    """
    V1ObservationStatus
    """
    observation_id: Optional[StrictStr] = Field(None, alias="observationId", description="The ID of the observation, null if the observation has not happened yet")
    target_id: StrictStr = Field(..., alias="targetId")
    tracking_type: Optional[TrackingType] = Field(None, alias="trackingType")
    ra: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The expected RA at the time of the observation, null if the observation has not happened yet")
    dec: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The expected Dec at the time of the observation, null if the observation has not happened yet")
    observation_time: Optional[datetime] = Field(None, alias="observationTime", description="Time the observation was executed at, null if the observation has not happened yet")
    tle_line1: Optional[StrictStr] = Field(None, alias="tleLine1", description="TLE line 1 of when the observation was tasked, null if the observation has not happened yet")
    tle_line2: Optional[StrictStr] = Field(None, alias="tleLine2", description="TLE line 2 of when the observation was tasked, null if the observation has not happened yet")
    tle_epoch: Optional[datetime] = Field(None, alias="tleEpoch", description="TLE Epoch of when the observation was tasked, null if the observation has not happened yet")
    image_set_id: Optional[StrictStr] = Field(None, alias="imageSetId")
    observation_sequence_result_id: Optional[StrictStr] = Field(None, alias="observationSequenceResultId")
    search_instruction_id: Optional[StrictStr] = Field(None, alias="searchInstructionId")
    survey_instruction_id: Optional[StrictStr] = Field(None, alias="surveyInstructionId")
    direct_task_id: Optional[StrictStr] = Field(None, alias="directTaskId")
    completed_at: Optional[datetime] = Field(None, alias="completedAt", description="The time the observation was completed in our system, null if the observation has not happened yet")
    scheduled_at: Optional[datetime] = Field(None, alias="scheduledAt", description="The time the instruction was scheduled for, if applicable (direct tasked instructions only)")
    valid_until: Optional[datetime] = Field(None, alias="validUntil", description="The time the instruction was valid until, if applicable (direct tasked instructions only)")
    state: ObservationState = Field(...)
    __properties = ["observationId", "targetId", "trackingType", "ra", "dec", "observationTime", "tleLine1", "tleLine2", "tleEpoch", "imageSetId", "observationSequenceResultId", "searchInstructionId", "surveyInstructionId", "directTaskId", "completedAt", "scheduledAt", "validUntil", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ObservationStatus:
        """Create an instance of V1ObservationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ObservationStatus:
        """Create an instance of V1ObservationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ObservationStatus.parse_obj(obj)

        _obj = V1ObservationStatus.parse_obj({
            "observation_id": obj.get("observationId"),
            "target_id": obj.get("targetId"),
            "tracking_type": obj.get("trackingType"),
            "ra": obj.get("ra"),
            "dec": obj.get("dec"),
            "observation_time": obj.get("observationTime"),
            "tle_line1": obj.get("tleLine1"),
            "tle_line2": obj.get("tleLine2"),
            "tle_epoch": obj.get("tleEpoch"),
            "image_set_id": obj.get("imageSetId"),
            "observation_sequence_result_id": obj.get("observationSequenceResultId"),
            "search_instruction_id": obj.get("searchInstructionId"),
            "survey_instruction_id": obj.get("surveyInstructionId"),
            "direct_task_id": obj.get("directTaskId"),
            "completed_at": obj.get("completedAt"),
            "scheduled_at": obj.get("scheduledAt"),
            "valid_until": obj.get("validUntil"),
            "state": obj.get("state")
        })
        return _obj


