# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1WebhookLog(BaseModel):
    """
    V1WebhookLog
    """
    id: StrictStr = Field(...)
    webhook_id: StrictStr = Field(..., alias="webhookId")
    status: StrictStr = Field(...)
    status_code: Optional[StrictInt] = Field(None, alias="statusCode")
    created_at: datetime = Field(..., alias="createdAt")
    log: Optional[StrictStr] = Field(None, description="The full log message")
    __properties = ["id", "webhookId", "status", "statusCode", "createdAt", "log"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1WebhookLog:
        """Create an instance of V1WebhookLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1WebhookLog:
        """Create an instance of V1WebhookLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1WebhookLog.parse_obj(obj)

        _obj = V1WebhookLog.parse_obj({
            "id": obj.get("id"),
            "webhook_id": obj.get("webhookId"),
            "status": obj.get("status"),
            "status_code": obj.get("statusCode"),
            "created_at": obj.get("createdAt"),
            "log": obj.get("log")
        })
        return _obj


