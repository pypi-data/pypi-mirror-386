# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class V1MatchedStar(BaseModel):
    """
    Extracted stars that matched during plate solving  # noqa: E501
    """
    x_centroid: Union[StrictFloat, StrictInt] = Field(..., alias="xCentroid", description="The x-centroid")
    y_centroid: Union[StrictFloat, StrictInt] = Field(..., alias="yCentroid", description="The y-centroid")
    sequence_number: StrictInt = Field(..., alias="sequenceNumber", description="The UCAC4 or GaiaUD number if known")
    magnitude: Union[StrictFloat, StrictInt] = Field(..., description="Extracted magnitude")
    ra_rad: Union[StrictFloat, StrictInt] = Field(..., alias="raRad", description="The star RA")
    dec_rad: Union[StrictFloat, StrictInt] = Field(..., alias="decRad", description="The star Dec")
    catalog_offset_rad: Union[StrictFloat, StrictInt] = Field(..., alias="catalogOffsetRad", description="The calculated offset from the catalog star, if known. 0 otherwise")
    catalog_offset_magnitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="catalogOffsetMagnitude")
    flux: StrictInt = Field(...)
    hfr: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["xCentroid", "yCentroid", "sequenceNumber", "magnitude", "raRad", "decRad", "catalogOffsetRad", "catalogOffsetMagnitude", "flux", "hfr"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1MatchedStar:
        """Create an instance of V1MatchedStar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1MatchedStar:
        """Create an instance of V1MatchedStar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1MatchedStar.parse_obj(obj)

        _obj = V1MatchedStar.parse_obj({
            "x_centroid": obj.get("xCentroid"),
            "y_centroid": obj.get("yCentroid"),
            "sequence_number": obj.get("sequenceNumber"),
            "magnitude": obj.get("magnitude"),
            "ra_rad": obj.get("raRad"),
            "dec_rad": obj.get("decRad"),
            "catalog_offset_rad": obj.get("catalogOffsetRad"),
            "catalog_offset_magnitude": obj.get("catalogOffsetMagnitude"),
            "flux": obj.get("flux"),
            "hfr": obj.get("hfr")
        })
        return _obj


