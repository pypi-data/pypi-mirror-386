# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ourskyai_sda_api.models.v1_observation_sequence_result_image_sets_inner import V1ObservationSequenceResultImageSetsInner  # noqa: E501

class TestV1ObservationSequenceResultImageSetsInner(unittest.TestCase):
    """V1ObservationSequenceResultImageSetsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ObservationSequenceResultImageSetsInner:
        """Test V1ObservationSequenceResultImageSetsInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ObservationSequenceResultImageSetsInner`
        """
        model = V1ObservationSequenceResultImageSetsInner()  # noqa: E501
        if include_optional:
            return V1ObservationSequenceResultImageSetsInner(
                id = '',
                node_id = '',
                covariance = [
                    [
                        1.337
                        ]
                    ],
                observation_results = [
                    ourskyai_sda_api.models.observation_result.observationResult(
                        image_id = '', 
                        astrometric_offsets = ourskyai_sda_api.models.astrometric_offsets.astrometricOffsets(
                            ra_plate_solve_offset_average = 1.337, 
                            ra_plate_solve_offset_std_dev = 1.337, 
                            dec_plate_solve_offset_average = 1.337, 
                            dec_plate_solve_offset_std_dev = 1.337, 
                            fwhm_std_dev = 1.337, 
                            fwhm_average = 1.337, ), 
                        image_url = '', 
                        jpg_url = '', 
                        ra = 1.337, 
                        dec = 1.337, 
                        corrected_ra = 1.337, 
                        corrected_dec = 1.337, 
                        bounding_box = ourskyai_sda_api.models.observation_bounding_box.observationBoundingBox(
                            start_x = 56, 
                            start_y = 56, 
                            end_x = 56, 
                            end_y = 56, ), 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        timing_accuracy = 1.337, 
                        apparent_magnitude = 1.337, 
                        solar_phase_angle = 1.337, 
                        solar_eq_phase_angle = 1.337, 
                        geolat = 1.337, 
                        geolon = 1.337, 
                        distance_from_prediction = 1.337, 
                        features = [
                            ourskyai_sda_api.models.v1_observation_feature.V1ObservationFeature(
                                corrected_ra = 1.337, 
                                corrected_dec = 1.337, 
                                ra = 1.337, 
                                dec = 1.337, 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                apparent_magnitude = 1.337, 
                                distance_from_prediction = 1.337, 
                                target_correlations = [
                                    ourskyai_sda_api.models.v1_target_correlation.V1TargetCorrelation(
                                        target_id = '', 
                                        ra = 1.337, 
                                        dec = 1.337, 
                                        streak_length = 1.337, 
                                        distance_from_streak = 1.337, 
                                        angle_from_streak = 1.337, )
                                    ], )
                            ], )
                    ],
                observation_quality = ourskyai_sda_api.models.observation_quality.observationQuality(
                    line_fit_offset_std_dev = 1.337, 
                    distance_from_prediction_average = 1.337, 
                    distance_from_prediction_line_fit_slope = 1.337, 
                    distance_from_prediction_line_fit_std_dev = 1.337, )
            )
        else:
            return V1ObservationSequenceResultImageSetsInner(
                id = '',
                node_id = '',
                covariance = [
                    [
                        1.337
                        ]
                    ],
                observation_results = [
                    ourskyai_sda_api.models.observation_result.observationResult(
                        image_id = '', 
                        astrometric_offsets = ourskyai_sda_api.models.astrometric_offsets.astrometricOffsets(
                            ra_plate_solve_offset_average = 1.337, 
                            ra_plate_solve_offset_std_dev = 1.337, 
                            dec_plate_solve_offset_average = 1.337, 
                            dec_plate_solve_offset_std_dev = 1.337, 
                            fwhm_std_dev = 1.337, 
                            fwhm_average = 1.337, ), 
                        image_url = '', 
                        jpg_url = '', 
                        ra = 1.337, 
                        dec = 1.337, 
                        corrected_ra = 1.337, 
                        corrected_dec = 1.337, 
                        bounding_box = ourskyai_sda_api.models.observation_bounding_box.observationBoundingBox(
                            start_x = 56, 
                            start_y = 56, 
                            end_x = 56, 
                            end_y = 56, ), 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        timing_accuracy = 1.337, 
                        apparent_magnitude = 1.337, 
                        solar_phase_angle = 1.337, 
                        solar_eq_phase_angle = 1.337, 
                        geolat = 1.337, 
                        geolon = 1.337, 
                        distance_from_prediction = 1.337, 
                        features = [
                            ourskyai_sda_api.models.v1_observation_feature.V1ObservationFeature(
                                corrected_ra = 1.337, 
                                corrected_dec = 1.337, 
                                ra = 1.337, 
                                dec = 1.337, 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                apparent_magnitude = 1.337, 
                                distance_from_prediction = 1.337, 
                                target_correlations = [
                                    ourskyai_sda_api.models.v1_target_correlation.V1TargetCorrelation(
                                        target_id = '', 
                                        ra = 1.337, 
                                        dec = 1.337, 
                                        streak_length = 1.337, 
                                        distance_from_streak = 1.337, 
                                        angle_from_streak = 1.337, )
                                    ], )
                            ], )
                    ],
        )
        """

    def testV1ObservationSequenceResultImageSetsInner(self):
        """Test V1ObservationSequenceResultImageSetsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
