# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ourskyai_sda_api.models.v1_image_set_image import V1ImageSetImage  # noqa: E501

class TestV1ImageSetImage(unittest.TestCase):
    """V1ImageSetImage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ImageSetImage:
        """Test V1ImageSetImage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ImageSetImage`
        """
        model = V1ImageSetImage()  # noqa: E501
        if include_optional:
            return V1ImageSetImage(
                id = '',
                thumbnail_url = '',
                image_url = '',
                full_jpg_url = '',
                node_id = '',
                target_id = '',
                ra = 1.337,
                dec = 1.337,
                image_set_id = '',
                dark_calibrated = True,
                flat_calibrated = True,
                bias_calibrated = True,
                fwhm_average = 1.337,
                fwhm_std_dev = 1.337,
                fwhm_angle = 1.337,
                ra_offset = 1.337,
                dec_offset = 1.337,
                total_offset = 1.337,
                total_offset_std_dev = 1.337,
                total_offset_rms = 1.337,
                captured_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                binning = 56,
                exposure_length = 1.337,
                fits_headers = [
                    ourskyai_sda_api.models.fits_header.FitsHeader(
                        key = '', 
                        value = '', )
                    ],
                predicted_streak_location = ourskyai_sda_api.models.v1_predicted_streak_location.V1PredictedStreakLocation(
                    start_x = 1.337, 
                    start_y = 1.337, 
                    end_x = 1.337, 
                    end_y = 1.337, )
            )
        else:
            return V1ImageSetImage(
                id = '',
                image_url = '',
                node_id = '',
                image_set_id = '',
                dark_calibrated = True,
                flat_calibrated = True,
                bias_calibrated = True,
                captured_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                exposure_length = 1.337,
                fits_headers = [
                    ourskyai_sda_api.models.fits_header.FitsHeader(
                        key = '', 
                        value = '', )
                    ],
        )
        """

    def testV1ImageSetImage(self):
        """Test V1ImageSetImage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
