# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ourskyai_sda_api.models.v1_track import V1Track  # noqa: E501

class TestV1Track(unittest.TestCase):
    """V1Track unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Track:
        """Test V1Track
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Track`
        """
        model = V1Track()  # noqa: E501
        if include_optional:
            return V1Track(
                id = '',
                observations = [
                    ourskyai_sda_api.models.v1_time_tagged_ra_dec.V1TimeTaggedRaDec(
                        ra_radians = 1.337, 
                        dec_radians = 1.337, 
                        magnitude = 1.337, 
                        solar_phase_angle_radians = 1.337, 
                        epoch = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                observer_location = ourskyai_sda_api.models.v1_observer_location.V1ObserverLocation(
                    latitude_radians = 1.337, 
                    longitude_radians = 1.337, 
                    elevation_meters = 1.337, )
            )
        else:
            return V1Track(
                id = '',
                observations = [
                    ourskyai_sda_api.models.v1_time_tagged_ra_dec.V1TimeTaggedRaDec(
                        ra_radians = 1.337, 
                        dec_radians = 1.337, 
                        magnitude = 1.337, 
                        solar_phase_angle_radians = 1.337, 
                        epoch = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                observer_location = ourskyai_sda_api.models.v1_observer_location.V1ObserverLocation(
                    latitude_radians = 1.337, 
                    longitude_radians = 1.337, 
                    elevation_meters = 1.337, ),
        )
        """

    def testV1Track(self):
        """Test V1Track"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
