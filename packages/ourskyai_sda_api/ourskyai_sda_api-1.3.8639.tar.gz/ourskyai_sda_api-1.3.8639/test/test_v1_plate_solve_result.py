# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ourskyai_sda_api.models.v1_plate_solve_result import V1PlateSolveResult  # noqa: E501

class TestV1PlateSolveResult(unittest.TestCase):
    """V1PlateSolveResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1PlateSolveResult:
        """Test V1PlateSolveResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1PlateSolveResult`
        """
        model = V1PlateSolveResult()  # noqa: E501
        if include_optional:
            return V1PlateSolveResult(
                status = 'MATCH_FOUND',
                matched_stars = [
                    ourskyai_sda_api.models.v1_matched_star.V1MatchedStar(
                        x_centroid = 1.337, 
                        y_centroid = 1.337, 
                        sequence_number = 56, 
                        magnitude = 1.337, 
                        ra_rad = 1.337, 
                        dec_rad = 1.337, 
                        catalog_offset_rad = 1.337, 
                        catalog_offset_magnitude = 1.337, 
                        flux = 56, 
                        hfr = 1.337, )
                    ],
                pixel_width = 56,
                pixel_height = 56,
                number_matched_stars = 56,
                center_right_ascension_radians = 1.337,
                center_declination_radians = 1.337,
                x_size_radians = 1.337,
                y_size_radians = 1.337,
                is_matched = True,
                transformation = ourskyai_sda_api.models.v1_transformation.V1Transformation(
                    a = 1.337, 
                    b = 1.337, 
                    c = 1.337, 
                    d = 1.337, 
                    u0 = 1.337, 
                    v0 = 1.337, 
                    alpha = 1.337, 
                    beta = 1.337, 
                    theta = 1.337, 
                    gamma = 1.337, 
                    eps_x = 1.337, 
                    eps_y = 1.337, 
                    ra_cen = 1.337, 
                    dec_cen = 1.337, 
                    px = 1.337, 
                    py = 1.337, 
                    u_coef = [
                        1.337
                        ], 
                    v_coef = [
                        1.337
                        ], 
                    x_coef = [
                        1.337
                        ], 
                    y_coef = [
                        1.337
                        ], 
                    num_coef = 56, 
                    fit_error_radians = 1.337, 
                    fit_error_pix = 1.337, 
                    fit_error3_radians = 1.337, 
                    fit_error3_pix = 1.337, 
                    stretch = 1.337, 
                    skew = 1.337, 
                    scale = 1.337, 
                    rotation = 1.337, )
            )
        else:
            return V1PlateSolveResult(
                pixel_width = 56,
                pixel_height = 56,
                number_matched_stars = 56,
                center_right_ascension_radians = 1.337,
                center_declination_radians = 1.337,
                x_size_radians = 1.337,
                y_size_radians = 1.337,
                is_matched = True,
                transformation = ourskyai_sda_api.models.v1_transformation.V1Transformation(
                    a = 1.337, 
                    b = 1.337, 
                    c = 1.337, 
                    d = 1.337, 
                    u0 = 1.337, 
                    v0 = 1.337, 
                    alpha = 1.337, 
                    beta = 1.337, 
                    theta = 1.337, 
                    gamma = 1.337, 
                    eps_x = 1.337, 
                    eps_y = 1.337, 
                    ra_cen = 1.337, 
                    dec_cen = 1.337, 
                    px = 1.337, 
                    py = 1.337, 
                    u_coef = [
                        1.337
                        ], 
                    v_coef = [
                        1.337
                        ], 
                    x_coef = [
                        1.337
                        ], 
                    y_coef = [
                        1.337
                        ], 
                    num_coef = 56, 
                    fit_error_radians = 1.337, 
                    fit_error_pix = 1.337, 
                    fit_error3_radians = 1.337, 
                    fit_error3_pix = 1.337, 
                    stretch = 1.337, 
                    skew = 1.337, 
                    scale = 1.337, 
                    rotation = 1.337, ),
        )
        """

    def testV1PlateSolveResult(self):
        """Test V1PlateSolveResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
