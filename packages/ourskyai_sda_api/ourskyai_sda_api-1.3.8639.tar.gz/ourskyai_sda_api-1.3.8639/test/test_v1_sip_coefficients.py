# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/GET/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/GET/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/POST/v1/communications/webhook) endpoint to receive OSRs automatically (preferred) or use the [OSRs](#tag/observation-sequence-results/GET/v1/observation-sequence-results) endpoint to poll for OSRs.  Check out our [examples](https://github.com/ourskyai/oursky-examples) repository to see usage in each language.

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ourskyai_sda_api.models.v1_sip_coefficients import V1SIPCoefficients  # noqa: E501

class TestV1SIPCoefficients(unittest.TestCase):
    """V1SIPCoefficients unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1SIPCoefficients:
        """Test V1SIPCoefficients
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1SIPCoefficients`
        """
        model = V1SIPCoefficients()  # noqa: E501
        if include_optional:
            return V1SIPCoefficients(
                order = 56,
                a = [
                    [
                        1.337
                        ]
                    ],
                b = [
                    [
                        1.337
                        ]
                    ],
                cd1_1 = 1.337,
                cd1_2 = 1.337,
                cd2_1 = 1.337,
                cd2_2 = 1.337,
                coordinate_reference_pixel_x = 1.337,
                coordinate_reference_pixel_y = 1.337,
                coordinate_reference_ra_degrees = 1.337,
                coordinate_reference_dec_degrees = 1.337
            )
        else:
            return V1SIPCoefficients(
                order = 56,
                a = [
                    [
                        1.337
                        ]
                    ],
                b = [
                    [
                        1.337
                        ]
                    ],
                cd1_1 = 1.337,
                cd1_2 = 1.337,
                cd2_1 = 1.337,
                cd2_2 = 1.337,
                coordinate_reference_pixel_x = 1.337,
                coordinate_reference_pixel_y = 1.337,
                coordinate_reference_ra_degrees = 1.337,
                coordinate_reference_dec_degrees = 1.337,
        )
        """

    def testV1SIPCoefficients(self):
        """Test V1SIPCoefficients"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
