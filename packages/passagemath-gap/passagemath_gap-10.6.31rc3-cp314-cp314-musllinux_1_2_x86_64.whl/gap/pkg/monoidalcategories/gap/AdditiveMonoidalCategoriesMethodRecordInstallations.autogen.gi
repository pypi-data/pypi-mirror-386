# SPDX-License-Identifier: GPL-2.0-or-later
# MonoidalCategories: Monoidal and monoidal (co)closed categories
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## LeftDistributivityExpanding
InstallMethod( AddLeftDistributivityExpanding,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LeftDistributivityExpanding", category, func, -1 );
    
end );

InstallMethod( AddLeftDistributivityExpanding,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LeftDistributivityExpanding", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LeftDistributivityExpandingWithGivenObjects
InstallMethod( AddLeftDistributivityExpandingWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LeftDistributivityExpandingWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddLeftDistributivityExpandingWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LeftDistributivityExpandingWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( LeftDistributivityExpandingWithGivenObjects,
                    "LeftDistributivityExpandingWithGivenObjects by calling LeftDistributivityExpanding with the WithGiven argument(s) dropped",
                    [
                        [ LeftDistributivityExpanding, 1 ],
                    ],
  function( cat, s, a, L, r )
    
    return LeftDistributivityExpanding( cat, a, L );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( LeftDistributivityExpanding,
                    "LeftDistributivityExpanding by calling LeftDistributivityExpandingWithGivenObjects with the WithGiven object(s)",
                    [
                        [ LeftDistributivityExpandingWithGivenObjects, 1 ],
                        [ TensorProductOnObjects, 3 ],
                        [ DirectSum, 2 ],
                    ],
  function( cat, a, L )
    
    return LeftDistributivityExpandingWithGivenObjects( cat, TensorProductOnObjects( cat, a, DirectSum( cat, L ) ), a, L, DirectSum( cat, List( L, summand -> TensorProductOnObjects( cat, a, summand ) ) ) );
    
end : is_with_given_derivation := true );

## LeftDistributivityFactoring
InstallMethod( AddLeftDistributivityFactoring,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LeftDistributivityFactoring", category, func, -1 );
    
end );

InstallMethod( AddLeftDistributivityFactoring,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LeftDistributivityFactoring", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## LeftDistributivityFactoringWithGivenObjects
InstallMethod( AddLeftDistributivityFactoringWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "LeftDistributivityFactoringWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddLeftDistributivityFactoringWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "LeftDistributivityFactoringWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( LeftDistributivityFactoringWithGivenObjects,
                    "LeftDistributivityFactoringWithGivenObjects by calling LeftDistributivityFactoring with the WithGiven argument(s) dropped",
                    [
                        [ LeftDistributivityFactoring, 1 ],
                    ],
  function( cat, s, a, L, r )
    
    return LeftDistributivityFactoring( cat, a, L );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( LeftDistributivityFactoring,
                    "LeftDistributivityFactoring by calling LeftDistributivityFactoringWithGivenObjects with the WithGiven object(s)",
                    [
                        [ LeftDistributivityFactoringWithGivenObjects, 1 ],
                        [ DirectSum, 2 ],
                        [ TensorProductOnObjects, 3 ],
                    ],
  function( cat, a, L )
    
    return LeftDistributivityFactoringWithGivenObjects( cat, DirectSum( cat, List( L, summand -> TensorProductOnObjects( cat, a, summand ) ) ), a, L, TensorProductOnObjects( cat, a, DirectSum( cat, L ) ) );
    
end : is_with_given_derivation := true );

## RightDistributivityExpanding
InstallMethod( AddRightDistributivityExpanding,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RightDistributivityExpanding", category, func, -1 );
    
end );

InstallMethod( AddRightDistributivityExpanding,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RightDistributivityExpanding", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RightDistributivityExpandingWithGivenObjects
InstallMethod( AddRightDistributivityExpandingWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RightDistributivityExpandingWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRightDistributivityExpandingWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RightDistributivityExpandingWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RightDistributivityExpandingWithGivenObjects,
                    "RightDistributivityExpandingWithGivenObjects by calling RightDistributivityExpanding with the WithGiven argument(s) dropped",
                    [
                        [ RightDistributivityExpanding, 1 ],
                    ],
  function( cat, s, L, a, r )
    
    return RightDistributivityExpanding( cat, L, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RightDistributivityExpanding,
                    "RightDistributivityExpanding by calling RightDistributivityExpandingWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RightDistributivityExpandingWithGivenObjects, 1 ],
                        [ TensorProductOnObjects, 3 ],
                        [ DirectSum, 2 ],
                    ],
  function( cat, L, a )
    
    return RightDistributivityExpandingWithGivenObjects( cat, TensorProductOnObjects( cat, DirectSum( cat, L ), a ), L, a, DirectSum( cat, List( L, summand -> TensorProductOnObjects( cat, summand, a ) ) ) );
    
end : is_with_given_derivation := true );

## RightDistributivityFactoring
InstallMethod( AddRightDistributivityFactoring,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RightDistributivityFactoring", category, func, -1 );
    
end );

InstallMethod( AddRightDistributivityFactoring,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RightDistributivityFactoring", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## RightDistributivityFactoringWithGivenObjects
InstallMethod( AddRightDistributivityFactoringWithGivenObjects,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "RightDistributivityFactoringWithGivenObjects", category, func, -1 );
    
end );

InstallMethod( AddRightDistributivityFactoringWithGivenObjects,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "RightDistributivityFactoringWithGivenObjects", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( RightDistributivityFactoringWithGivenObjects,
                    "RightDistributivityFactoringWithGivenObjects by calling RightDistributivityFactoring with the WithGiven argument(s) dropped",
                    [
                        [ RightDistributivityFactoring, 1 ],
                    ],
  function( cat, s, L, a, r )
    
    return RightDistributivityFactoring( cat, L, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( RightDistributivityFactoring,
                    "RightDistributivityFactoring by calling RightDistributivityFactoringWithGivenObjects with the WithGiven object(s)",
                    [
                        [ RightDistributivityFactoringWithGivenObjects, 1 ],
                        [ DirectSum, 2 ],
                        [ TensorProductOnObjects, 3 ],
                    ],
  function( cat, L, a )
    
    return RightDistributivityFactoringWithGivenObjects( cat, DirectSum( cat, List( L, summand -> TensorProductOnObjects( cat, summand, a ) ) ), L, a, TensorProductOnObjects( cat, DirectSum( cat, L ), a ) );
    
end : is_with_given_derivation := true );
