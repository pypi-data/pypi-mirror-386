# GeneralizedMorphismsForCAP, single 7
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("generalizedmorphismsforcap07.tst");

# doc/_Chapter_Examples_and_Tests.xml:354-433
gap> Q := HomalgFieldOfRationals();
Q
gap> A := VectorSpaceObject( 3, Q );
<A vector space object over Q of dimension 3>
gap> Asub := VectorSpaceObject( 2, Q );
<A vector space object over Q of dimension 2>
gap> B := VectorSpaceObject( 3, Q );
<A vector space object over Q of dimension 3>
gap> Bfac := VectorSpaceObject( 1, Q );
<A vector space object over Q of dimension 1>
gap> Bsub := VectorSpaceObject( 2, Q );
<A vector space object over Q of dimension 2>
gap> C := VectorSpaceObject( 3, Q );
<A vector space object over Q of dimension 3>
gap> Cfac := VectorSpaceObject( 1, Q );
<A vector space object over Q of dimension 1>
gap> Asub_into_A := VectorSpaceMorphism( Asub, [ [ 1, 0, 0 ], [ 0, 1, 0 ] ], A );
<A morphism in Category of matrices over Q>
gap> Asub_to_Bfac := VectorSpaceMorphism( Asub, [ [ 1 ], [ 1 ] ], Bfac );
<A morphism in Category of matrices over Q>
gap> B_onto_Bfac := VectorSpaceMorphism( B, [ [ 1 ], [ 1 ], [ 1 ] ], Bfac );
<A morphism in Category of matrices over Q>
gap> Bsub_into_B := VectorSpaceMorphism( Bsub, [ [ 2, 2, 0 ], [ 0, 2, 2 ] ], B );
<A morphism in Category of matrices over Q>
gap> Bsub_to_Cfac := VectorSpaceMorphism( Bsub, [ [ 3 ], [ 0 ] ], Cfac );
<A morphism in Category of matrices over Q>
gap> C_onto_Cfac := VectorSpaceMorphism( C, [ [ 1 ], [ 2 ], [ 3 ] ], Cfac );
<A morphism in Category of matrices over Q>
gap> generalized_morphism1 := GeneralizedMorphism( Asub_into_A, Asub_to_Bfac, B_onto_Bfac );
<A morphism in Generalized morphism category of Category of matrices over Q>
gap> generalized_morphism2 := GeneralizedMorphism( Bsub_into_B, Bsub_to_Cfac, C_onto_Cfac );
<A morphism in Generalized morphism category of Category of matrices over Q>
gap> IsWellDefined( generalized_morphism1 );
true
gap> IsWellDefined( generalized_morphism2 );
true
gap> p := PreCompose( generalized_morphism1, generalized_morphism2 );
<A morphism in Generalized morphism category of Category of matrices over Q>
gap> SourceAid( p );
<A morphism in Category of matrices over Q>
gap> Arrow( p );
<A morphism in Category of matrices over Q>
gap> RangeAid( p );
<A morphism in Category of matrices over Q>
gap> A := VectorSpaceObject( 3, Q );
<A vector space object over Q of dimension 3>
gap> Asub := VectorSpaceObject( 2, Q );
<A vector space object over Q of dimension 2>
gap> B := VectorSpaceObject( 3, Q );
<A vector space object over Q of dimension 3>
gap> Bfac := VectorSpaceObject( 1, Q );
<A vector space object over Q of dimension 1>
gap> Bsub := VectorSpaceObject( 2, Q );
<A vector space object over Q of dimension 2>
gap> C := VectorSpaceObject( 3, Q );
<A vector space object over Q of dimension 3>
gap> Cfac := VectorSpaceObject( 2, Q );
<A vector space object over Q of dimension 2>
gap> Bsub_to_Cfac := VectorSpaceMorphism( Bsub, [ [ 3, 3 ], [ 0, 0 ] ], Cfac );
<A morphism in Category of matrices over Q>
gap> C_onto_Cfac := VectorSpaceMorphism( C, [ [ 1, 0 ], [ 0, 2 ], [ 3, 3 ] ], Cfac );
<A morphism in Category of matrices over Q>
gap> generalized_morphism1 := GeneralizedMorphism( Asub_into_A, Asub_to_Bfac, B_onto_Bfac );
<A morphism in Generalized morphism category of Category of matrices over Q>
gap> generalized_morphism2 := GeneralizedMorphism( Bsub_into_B, Bsub_to_Cfac, C_onto_Cfac );
<A morphism in Generalized morphism category of Category of matrices over Q>
gap> IsWellDefined( generalized_morphism1 );
true
gap> IsWellDefined( generalized_morphism2 );
true
gap> p := PreCompose( generalized_morphism1, generalized_morphism2 );
<A morphism in Generalized morphism category of Category of matrices over Q>
gap> SourceAid( p );
<A morphism in Category of matrices over Q>
gap> Arrow( p );
<A morphism in Category of matrices over Q>
gap> RangeAid( p );
<A morphism in Category of matrices over Q>

#
gap> STOP_TEST("generalizedmorphismsforcap07.tst", 1);
