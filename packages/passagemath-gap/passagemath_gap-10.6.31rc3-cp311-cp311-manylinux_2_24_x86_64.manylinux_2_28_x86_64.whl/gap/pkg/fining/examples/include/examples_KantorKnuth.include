gap&gt; q := 9;
9
gap&gt; f := GF(q);
GF(3^2)
gap&gt; squares := AsList(Group(Z(q)^2));
[ Z(3)^0, Z(3^2)^6, Z(3), Z(3^2)^2 ]
gap&gt; n := First(GF(q), x -&gt; not IsZero(x) and not x in squares);
Z(3^2)
gap&gt; sigma := FrobeniusAutomorphism( f );
FrobeniusAutomorphism( GF(3^2) )
gap&gt; zero := Zero(f);
0*Z(3)
gap&gt; qclan := List(GF(q), t -&gt; [[t, zero], [zero,-n * t^sigma]] );
[ [ [ 0*Z(3), 0*Z(3) ], [ 0*Z(3), 0*Z(3) ] ], 
  [ [ Z(3^2), 0*Z(3) ], [ 0*Z(3), Z(3)^0 ] ], 
  [ [ Z(3^2)^5, 0*Z(3) ], [ 0*Z(3), Z(3) ] ], 
  [ [ Z(3)^0, 0*Z(3) ], [ 0*Z(3), Z(3^2)^5 ] ], 
  [ [ Z(3^2)^2, 0*Z(3) ], [ 0*Z(3), Z(3^2)^3 ] ], 
  [ [ Z(3^2)^3, 0*Z(3) ], [ 0*Z(3), Z(3^2)^6 ] ], 
  [ [ Z(3), 0*Z(3) ], [ 0*Z(3), Z(3^2) ] ], 
  [ [ Z(3^2)^7, 0*Z(3) ], [ 0*Z(3), Z(3^2)^2 ] ], 
  [ [ Z(3^2)^6, 0*Z(3) ], [ 0*Z(3), Z(3^2)^7 ] ] ]
gap&gt; IsqClan( qclan, f );
true
gap&gt; qclan := qClan(qclan , f);
&lt;q-clan over GF(3^2)&gt;
gap&gt; egq1 := EGQByqClan( qclan);  
#I  Computed Kantor family. Now computing EGQ...
&lt;EGQ of order [ 81, 9 ] and basepoint 0&gt;
gap&gt; blt := BLTSetByqClan( qclan );
[ &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt;, 
  &lt;a point in Q(4, 9): -x_1*x_5-x_2*x_4+Z(3^2)^5*x_3^2=0&gt; ]
gap&gt; egq2 := EGQByBLTSet( blt );
#I  Now embedding dual BLT-set into W(5,q)...
#I  Computing elation group...
&lt;EGQ of order [ 81, 9 ] and basepoint in W(5, 9 ) &gt;
