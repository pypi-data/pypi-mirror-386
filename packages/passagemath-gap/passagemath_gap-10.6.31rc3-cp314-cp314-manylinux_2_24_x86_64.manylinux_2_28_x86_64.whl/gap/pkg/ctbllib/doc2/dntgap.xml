
<!-- %W  dntgap.xml      GAP 4 package CTblLib              Thomas Breuer -->

<Chapter Label="chap:dntgap">
<Heading>&GAP; computations needed in the proof of
<Cite Key="DNT" Where="Theorem 6.1 (ii)"/></Heading>

Date: September 19th, 2011

<P/>

(This is joint work with Klaus Lux.)

<P/>

This is a collection of example computations that are cited in the Appendix
of&nbsp;<Cite Key="DNT"/>.
In each case, the aim is to show that the extension of a given finite simple
group by an elementary abelian group of given rank has the property that
not all complex irreducible characters of the same degree are
Galois conjugate.

<P/>

The purpose of this writeup is twofold.
On the one hand, the details of the computations are documented this way.
On the other hand, the &GAP; code shown for the examples can be used as
test input for automatic checking of the data and the functions used.}

For the computations,
we need some Brauer character tables from&nbsp;<Cite Key="JLPW95"/>,
some generating matrices from&nbsp;<Cite Key="AGRv3"/>,
and some functions from the &GAP; system&nbsp;<Cite Key="GAP"/>
and its packages
<C>AtlasRep</C>&nbsp;<Cite Key="AtlasRep"/>,
<C>cohomolo</C>&nbsp;<Cite Key="cohomolo"/>,
<C>CTblLib</C>&nbsp;<Cite Key="CTblLib"/>, and
<C>TomLib</C>&nbsp;<Cite Key="TomLib"/>.

<P/>

First we load the necessary &GAP; packages.

<P/>

<Example><![CDATA[
gap> LoadPackage( "AtlasRep", "1.5", false );
true
gap> LoadPackage( "cohomolo", "1.6", false );
true
gap> LoadPackage( "CTblLib", "1.2", false );
true
gap> LoadPackage( "TomLib", "1.2.1", false );
true
]]></Example>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:Sz8,2^12">
<Heading><M>G/N \cong Sz(8)</M> and <M>|N| = 2^{12}</M></Heading>

The group <M>S = Sz(8)</M> has exactly one irreducible <M>12</M>-dimensional
module over the field with two elements, up to isomorphism.
This module can be obtained from any of the three absolutely irreducible
<M>4</M>-dimensional <M>S</M>-modules in characteristic two,
by regarding it as a module over the prime field <M>GF(2)</M>.

<P/>

<Example><![CDATA[
gap> p:= 2;;  d:= 12;;
gap> t:= CharacterTable( "Sz(8)" ) mod p;
BrauerTable( "Sz(8)", 2 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
Sz(8)mod2

       1a 5a 7a 7b 7c 13a 13b 13c

Y.1     1  1  1  1  1   1   1   1
Y.2     4 -1  A  C  B   D   F   E
Y.3     4 -1  B  A  C   E   D   F
Y.4     4 -1  C  B  A   F   E   D

A = E(7)^2+E(7)^3+E(7)^4+E(7)^5
B = E(7)+E(7)^2+E(7)^5+E(7)^6
C = E(7)+E(7)^3+E(7)^4+E(7)^6
D = E(13)+E(13)^5+E(13)^8+E(13)^12
E = E(13)^4+E(13)^6+E(13)^7+E(13)^9
F = E(13)^2+E(13)^3+E(13)^10+E(13)^11
gap> List( irr, x -> SizeOfFieldOfDefinition( x, p ) );
[ 2, 8, 8, 8 ]
]]></Example>

<P/>

First we construct the <M>12</M>-dimensional irreducible representation
of <M>S</M> over <M>GF(2)</M>,
using that the &ATLAS; of Group Representations provides matrix generators
for <M>S</M> in the <M>4</M>-dimensional representation over <M>GF(8)</M>.

<P/>

<Example><![CDATA[
gap> info:= OneAtlasGeneratingSetInfo( "Sz(8)", Dimension, 4,
>               Characteristic, p );
rec( charactername := "4a", constituents := [ 2 ], contents := "core",
  dim := 4, groupname := "Sz(8)", id := "a", 
  identifier := [ "Sz(8)", [ "Sz8G1-f8r4aB0.m1", "Sz8G1-f8r4aB0.m2" ],
      1, 8 ], repname := "Sz8G1-f8r4aB0", repnr := 17, 
  ring := GF(2^3), size := 29120, standardization := 1, 
  type := "matff" )
gap> gens_dim4:= AtlasGenerators( info ).generators;;
gap> b:= Basis( GF(8) );; 
gap> gens_dim12:= List( gens_dim4, x -> BlownUpMatrix( b, x ) );;
]]></Example>

<P/>

We claim that any extension of <M>S</M> with the given module splits.

<P/>

<Example><![CDATA[
gap> s:= AtlasGroup( "Sz(8)", IsPermGroup, true );;
gap> chr:= CHR( s, p, 0, gens_dim12 );;
gap> SizeScreen( [ 100 ] );;
gap> SecondCohomologyDimension( chr );
0
gap> SizeScreen( [ 72 ] );;
]]></Example>

<P/>

(The function <C>CHR</C> takes as its arguments a permutation group,
the characteristic of the module, a finitely presented group (or zero),
and a list of matrices that define the module in the sense that they
correspond to the generators of the given permutation group.
Note that this condition is satisfied because the generators provided by
the &ATLAS; of Group Representations are compatible.)

So it is enough to consider the semidirect product
<M>G = 2^{12}\!:\!Sz(8)</M>.

If we would like then we could represent this group as a group of
<M>13 \times 13</M> matrices over <M>GF(2)</M>, as follows.
For each element of <M>G</M>, the submatrix consisting of the first
<M>12</M> rows and columns describes the part from the complement
<M>Sz(8)</M>, in its action on the module in question,
and the last row describes the part from the elementary
abelian normal group <M>N</M>;
the last column is zero, except for an identity entry in the last row.
In order to write down generators of this group,
it suffices to take the two generators of the complement
plus one nonidentity element from <M>N</M>.
(Note that <M>N</M> is irreducible.)

<Example><![CDATA[
gap> mats:= List( [1 .. 3 ], x -> IdentityMat( d+1, GF(p) ) );;
gap> v:= mats[1][ d+1 ];;
gap> mats[1]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_dim12[1];;
gap> mats[2]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_dim12[2];;
gap> mats[3][ d+1 ][1]:= Z(p)^0;;
gap> grp:= Group( mats );;
gap> g:= Image( IsomorphismPermGroup( grp ) );;
gap> Size( g );
119275520
gap> NrConjugacyClasses( g );
41
]]></Example>

<P/>

The &GAP; Character Table Library contains the ordinary character table
of <M>G</M>.
We check this as follows.
By the above cohomology result,
the group <M>G</M> is uniquely determined, up to isomorphism,
by the group order and the property that <M>G</M> has a minimal
normal subgroup <M>N</M>
such that <M>G/N</M> is a simple group isomorphic with <M>S</M>.

<P/>

(Since <M>|G|/|S|</M> is a power of two, <M>N</M> is a <M>2</M>-group.
By the minimality condition,
<M>N</M> is elementary abelian and the action of <M>S</M>
on <M>N</M> affords the desired <M>S</M>-module.
Note that the isomorphism type of a finite simple group is determined
by its character table.)

<P/>

<Example><![CDATA[
gap> iso:= IsomorphismTypeInfoFiniteSimpleGroup( s );
rec( name := "2B(2,8) = 2C(2,8) = Sz(8)", parameter := 8, 
  series := "2B", shortname := "Sz(8)" )
gap> names:= AllCharacterTableNames( Size, 2^12 * Size( s ) );;
gap> cand:= List( names, CharacterTable );;
gap> cand:= Filtered( cand,
>      t -> ForAny( ClassPositionsOfMinimalNormalSubgroups( t ),
>             n -> IsomorphismTypeInfoFiniteSimpleGroup( t / n ) = iso ) );
[ CharacterTable( "2^12:Sz(8)" ) ]
]]></Example>

<P/>

So we can easily check that <M>G</M> has eight rational valued irreducibles
of the degree <M>455</M> (or of the degree <M>3\,640</M>).

<P/>

<Example><![CDATA[
gap> t:= cand[1];;
gap> rationals:= Filtered( Irr( t ), x -> IsSubset( Integers, x ) );;
gap> Collected( List( rationals, x -> x[1] ) );
[ [ 1, 1 ], [ 64, 1 ], [ 91, 1 ], [ 455, 8 ], [ 3640, 8 ] ]
]]></Example>

</Section>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:M22,2^10">
<Heading><M>G/N \cong M_{22}</M> and <M>|N| = 2^{10}</M></Heading>

The group <M>S = M_{22}</M> has exactly two irreducible <M>10</M>-dimensional
modules over the field with two elements, up to isomorphism.
These modules are in fact absolutely irreducible.

<P/>

<Example><![CDATA[
gap> p:= 2;;  d:= 10;;
gap> t:= CharacterTable( "M22" ) mod p;
BrauerTable( "M22", 2 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
M22mod2

       1a 3a 5a 7a 7b 11a 11b

Y.1     1  1  1  1  1   1   1
Y.2    10  1  .  A /A  -1  -1
Y.3    10  1  . /A  A  -1  -1

A = E(7)+E(7)^2+E(7)^4
  = (-1+Sqrt(-7))/2 = b7
gap> List( irr, x -> SizeOfFieldOfDefinition( x, p ) );
[ 2, 2, 2 ]
]]></Example>

<P/>

First we construct the two irreducible <M>10</M>-dimensional representations
of <M>S</M> over <M>GF(2)</M>,
again using that the &ATLAS; of Group Representations provides the matrix
generators in question.

<P/>

<Example><![CDATA[
gap> info:= AllAtlasGeneratingSetInfos( "M22", Dimension, d,
>               Characteristic, p );
[ rec( charactername := "10a", constituents := [ 2 ], 
      contents := "core", dim := 10, groupname := "M22", id := "a", 
      identifier := 
        [ "M22", [ "M22G1-f2r10aB0.m1", "M22G1-f2r10aB0.m2" ], 1, 2 ],
      repname := "M22G1-f2r10aB0", repnr := 13, ring := GF(2), 
      size := 443520, standardization := 1, type := "matff" ), 
  rec( charactername := "10b", constituents := [ 3 ], 
      contents := "core", dim := 10, groupname := "M22", id := "b", 
      identifier := 
        [ "M22", [ "M22G1-f2r10bB0.m1", "M22G1-f2r10bB0.m2" ], 1, 2 ],
      repname := "M22G1-f2r10bB0", repnr := 14, ring := GF(2), 
      size := 443520, standardization := 1, type := "matff" ) ]
gap> gens:= List( info, r -> AtlasGenerators( r ).generators );;
]]></Example>

<P/>

We claim that any extension of <M>S</M>
with any of the two given modules splits.

<P/>

<Example><![CDATA[
gap> s:= AtlasGroup( "M22", IsPermGroup, true );;
gap> chr:= CHR( s, p, 0, gens[1] );;
gap> SizeScreen( [ 100 ] );;
gap> SecondCohomologyDimension( chr );
0
gap> chr:= CHR( s, p, 0, gens[2] );;
gap> SecondCohomologyDimension( chr );
0
gap> SizeScreen( [ 72 ] );;
]]></Example>

<P/>

Again we see that it is enough to consider semidirect products
<M>G = 2^{10}\!:\!M_{22}</M>,
but this time for the two nonisomorphic modules.

<P/>

We could use the same method as in the first case
for constructing the two groups.

<P/>

<Example><![CDATA[
gap> gens_1:= gens[1];;
gap> mats:= List( [1 .. 3 ], x -> IdentityMat( d+1, GF(p) ) );;
gap> v:= mats[1][ d+1 ];;
gap> mats[1]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_1[1];;
gap> mats[2]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_1[2];;
gap> mats[3][ d+1 ][1]:= Z(p)^0;;
gap> grp_1:= Group( mats );;
gap> Size( grp_1 );
454164480
gap> gens_2:= gens[1];;
gap> mats:= List( [1 .. 3 ], x -> IdentityMat( d+1, GF(p) ) );;
gap> v:= mats[1][ d+1 ];;
gap> mats[1]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_2[1];;
gap> mats[2]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_2[2];;
gap> mats[3][ d+1 ][1]:= Z(p)^0;;
gap> grp_2:= Group( mats );;
gap> Size( grp_2 );
454164480
]]></Example>

<P/>

The &GAP; Character Table Library contains the ordinary character tables
of the two groups in question.
We check this with the same approach as in the previous examples.

<P/>

<Example><![CDATA[
gap> iso:= IsomorphismTypeInfoFiniteSimpleGroup( s );
rec( name := "M(22)", series := "Spor", shortname := "M22" )
gap> names:= AllCharacterTableNames( Size, 2^10 * Size( s ) );;
gap> cand:= List( names, CharacterTable );;
gap> cand:= Filtered( cand,
>      t -> ForAny( ClassPositionsOfMinimalNormalSubgroups( t ),
>             n -> IsomorphismTypeInfoFiniteSimpleGroup( t / n ) = iso ) );
[ CharacterTable( "2^10:M22'" ), CharacterTable( "2^10:m22" ) ]
gap> List( cand, NrConjugacyClasses );
[ 47, 43 ]
]]></Example>

<P/>

So we can easily check that in both cases,
<M>G</M> has two rational valued irreducibles of the degree <M>1\,155</M>.

<P/>

<Example><![CDATA[
gap> t:= cand[1];;
gap> rationals:= Filtered( Irr( t ), x -> IsSubset( Integers, x ) );;
gap> Collected( List( rationals, x -> x[1] ) );
[ [ 1, 1 ], [ 21, 1 ], [ 22, 1 ], [ 55, 1 ], [ 99, 1 ], [ 154, 1 ], 
  [ 210, 1 ], [ 231, 3 ], [ 385, 1 ], [ 440, 1 ], [ 770, 5 ], 
  [ 924, 2 ], [ 1155, 2 ], [ 1386, 1 ], [ 1408, 1 ], [ 3080, 2 ], 
  [ 3465, 4 ], [ 4620, 2 ], [ 6930, 3 ], [ 9240, 1 ] ]
gap> t:= cand[2];;
gap> rationals:= Filtered( Irr( t ), x -> IsSubset( Integers, x ) );;
gap> Collected( List( rationals, x -> x[1] ) );
[ [ 1, 1 ], [ 21, 1 ], [ 55, 1 ], [ 77, 1 ], [ 99, 1 ], [ 154, 1 ], 
  [ 210, 1 ], [ 231, 1 ], [ 330, 1 ], [ 385, 3 ], [ 616, 2 ], 
  [ 693, 1 ], [ 770, 1 ], [ 1155, 2 ], [ 1980, 1 ], [ 2310, 4 ], 
  [ 2640, 1 ], [ 3465, 2 ], [ 4620, 1 ], [ 5544, 2 ], [ 6160, 1 ], 
  [ 6930, 2 ], [ 9856, 1 ] ]
]]></Example>

</Section>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:J2,2^12">
<Heading><M>G/N \cong J_2</M> and <M>|N| = 2^{12}</M></Heading>

The group <M>S = J_2</M> has exactly one irreducible <M>12</M>-dimensional
module over the field with two elements, up to isomorphism.
This module can be obtained from any of the two absolutely irreducible
<M>6</M>-dimensional <M>S</M>-modules in characteristic two,
by regarding it as a module over the prime field <M>GF(2)</M>.

<P/>

<Example><![CDATA[
gap> p:= 2;;  d:= 12;;
gap> t:= CharacterTable( "J2" ) mod p;
BrauerTable( "J2", 2 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
J2mod2

       1a 3a 3b 5a 5b 5c 5d 7a 15a 15b

Y.1     1  1  1  1  1  1  1  1   1   1
Y.2     6 -3  .  A *A  B *B -1   C  *C
Y.3     6 -3  . *A  A *B  B -1  *C   C

A = -2*E(5)-2*E(5)^4
  = 1-Sqrt(5) = 1-r5
B = E(5)+2*E(5)^2+2*E(5)^3+E(5)^4
  = (-3-Sqrt(5))/2 = -2-b5
C = E(5)+E(5)^4
  = (-1+Sqrt(5))/2 = b5
gap> List( irr, x -> SizeOfFieldOfDefinition( x, p ) );
[ 2, 4, 4 ]
]]></Example>

<P/>

First we construct the irreducible <M>12</M>-dimensional representation
of <M>S</M> over <M>GF(2)</M>,
using that the &ATLAS; of Group Representations provides matrix generators
for <M>S</M> in the <M>6</M>-dimensional representation over <M>GF(4)</M>.

<P/>

<Example><![CDATA[
gap> info:= OneAtlasGeneratingSetInfo( "J2", Dimension, 6,
>               Characteristic, p );
rec( charactername := "6a", constituents := [ 2 ], contents := "core",
  dim := 6, groupname := "J2", id := "a", 
  identifier := [ "J2", [ "J2G1-f4r6aB0.m1", "J2G1-f4r6aB0.m2" ], 1, 
      4 ], repname := "J2G1-f4r6aB0", repnr := 16, ring := GF(2^2), 
  size := 604800, standardization := 1, type := "matff" )
gap> gens_dim6:= AtlasGenerators( info ).generators;;
gap> b:= Basis( GF(4) );;
gap> gens_dim12:= List( gens_dim6, x -> BlownUpMatrix( b, x ) );;
]]></Example>

<P/>

We claim that any extension of <M>S</M> with the given module splits.

<P/>

<Example><![CDATA[
gap> s:= AtlasGroup( "J2", IsPermGroup, true );;
gap> chr:= CHR( s, p, 0, gens_dim12 );;
gap> SizeScreen( [ 100 ] );;
gap> SecondCohomologyDimension( chr );
0
gap> SizeScreen( [ 72 ] );;
]]></Example>

<P/>

Again we see that it is enough to consider a semidirect product
<M>G = 2^{12}\!:\!J_2</M>.

<P/>

Here is a description how we could construct the group.

<P/>

<Example><![CDATA[
gap> mats:= List( [ 1 .. 3 ], x -> IdentityMat( d+1, GF(p) ) );;
gap> v:= mats[1][ d+1 ];;
gap> mats[1]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_dim12[1];;
gap> mats[2]{ [ 1 .. d ] }{ [ 1 .. d ] }:= gens_dim12[2];;
gap> mats[3][ d+1 ][1]:= Z(p)^0;;
gap> grp:= Group( mats );;
gap> g:= Image( IsomorphismPermGroup( grp ) );;
gap> Size( g );
2477260800
]]></Example>

<P/>

The &GAP; Character Table Library contains the ordinary character table
of <M>G</M>.
We check this with the same approach as in the previous examples.

<P/>

<Example><![CDATA[
gap> iso:= IsomorphismTypeInfoFiniteSimpleGroup( s );
rec( name := "HJ = J(2) = F(5-)", series := "Spor", shortname := "J2" 
 )
gap> names:= AllCharacterTableNames( Size, 2^12 * Size( s ) );;
gap> cand:= List( names, CharacterTable );;
gap> cand:= Filtered( cand,
>      t -> ForAny( ClassPositionsOfMinimalNormalSubgroups( t ),
>             n -> IsomorphismTypeInfoFiniteSimpleGroup( t / n ) = iso ) );
[ CharacterTable( "2^12:J2" ) ]
]]></Example>

<P/>

So we can easily check that <M>G</M> has two rational valued irreducibles
of the degree <M>1\,575</M>.

<P/>

<Example><![CDATA[
gap> t:= cand[1];;
gap> rationals:= Filtered( Irr( t ), x -> IsSubset( Integers, x ) );;
gap> Collected( List( rationals, x -> x[1] ) );
[ [ 1, 1 ], [ 36, 1 ], [ 63, 1 ], [ 90, 1 ], [ 126, 1 ], [ 160, 1 ], 
  [ 175, 1 ], [ 225, 1 ], [ 288, 1 ], [ 300, 1 ], [ 336, 1 ], 
  [ 1575, 2 ], [ 2520, 4 ], [ 3150, 1 ], [ 4725, 6 ], [ 9450, 1 ], 
  [ 10080, 4 ], [ 12600, 4 ], [ 18900, 2 ] ]
]]></Example>

</Section>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:J2,5^14">
<Heading><M>G/N \cong J_2</M> and <M>|N| = 5^{14}</M></Heading>

The group <M>S = J_2</M> has exactly one irreducible <M>14</M>-dimensional
module over the field with <M>5</M> elements, up to isomorphism.
This module is in fact absolutely irreducible.

<P/>

<Example><![CDATA[
gap> p:= 5;;  d:= 14;;
gap> t:= CharacterTable( "J2" ) mod p;
BrauerTable( "J2", 5 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
J2mod5

       1a 2a 2b 3a 3b 4a 6a 6b 7a 8a 12a

Y.1     1  1  1  1  1  1  1  1  1  1   1
Y.2    14 -2  2  5 -1  2  1 -1  .  .  -1
]]></Example>

<P/>

In this case, we do not attempt to compute the complete character table of
<M>G</M>.
Instead, we show that <M>G/N</M> has at least five regular orbits on the
dual space of <M>N</M>, and apply&nbsp;\cite[Lemma&nbsp;5.1&nbsp;(i)]{DNT}.
(Note that <M>N</M> is in fact self-dual.)

<P/>

For that, we use &GAP;'s table of marks of <M>S</M>.
The information stored for this table of marks allows us to compute,
for each class of subgroups <M>U</M> of <M>S</M>,
the numbers of orbits in the dual space of <M>N</M>
for which contain the point stabilizers in <M>S</M> are exactly
the conjugates of <M>U</M>.
The following &GAP; function takes the table of marks <C>tom</C> of <M>S</M>,
a list <C>matgens</C> of matrices that describe the action of the generators
of <M>S</M> on the vector space in question,
and the size <C>q</C> of its field of scalars.
The return value is a record with the components
<C>fixed</C> (the vector of numbers of fixed points of the subgroups of
<M>S</M> on the dual of <M>N</M>),
<C>decomp</C> (the numbers of orbits with the corresponding point stabilizers),
<C>nonzeropos</C> (the positions of subgroups that occur as point stabilizers),
and <C>staborders</C> (the list of orders of the subgroups that occur as
point stabilizers).

<P/>

<Example><![CDATA[
gap> orbits_from_tom:= function( tom, matgens, q )
>     local slp, fixed, idmat, i, rest, decomp, nonzeropos;
> 
>     slp:= StraightLineProgramsTom( tom );
>     fixed:= [];
>     idmat:= matgens[1]^0;
>     for i in [ 1 .. Length( slp ) ] do
>       if IsList( slp[i] ) then
>         # Each subgroup generator has a program of its own.
>         rest:= List( slp[i],
>                      prg -> ResultOfStraightLineProgram( prg, gens ) );
>       else
>         # The subgroup generators are computed with one common program.
>         rest:= ResultOfStraightLineProgram( slp[i], gens );
>       fi;
>       if IsEmpty( rest ) then
>         # The subgroup is trivial.
>         fixed[i]:= q^Length( idmat );
>       else
>         # Compute the intersection of fixed spaces of the transposed
>         # matrices, since we act on Irr(N) not on N.
>         fixed[i]:= q^Length( NullspaceMat( TransposedMat( Concatenation(
>                        List( rest, x -> x - idmat ) ) ) ) );
>       fi;
>     od;
> 
>     decomp:= DecomposedFixedPointVector( tom, fixed );
>     nonzeropos:= Filtered( [ 1 .. Length( decomp ) ],
>                            i -> decomp[i] <> 0 );
> 
>     return rec( fixed:= fixed,
>                 decomp:= decomp,
>                 nonzeropos:= nonzeropos,
>                 staborders:= OrdersTom( tom ){ nonzeropos },
>               );
> end;;
]]></Example>

<P/>

Note that this function assumes that the generators of <M>S</M> obtained
from the &ATLAS; of Group Representations are compatible with the generators
from &GAP;'s table of marks of <M>S</M>.
This fact can be read off from the <K>true</K> value of the
<C>ATLAS</C> component in the
<Ref Func="StandardGeneratorsInfo" BookName="tomlib"/>
value of the table of marks.

<P/>

<Example><![CDATA[
gap> tom:= TableOfMarks( "J2" );
TableOfMarks( "J2" )
gap> StandardGeneratorsInfo( tom );
[ rec( ATLAS := true, 
      description := "|z|=10, z^5=a, |b|=3, |C(b)|=36, |ab|=7", 
      generators := "a, b", 
      script := 
        [ [ 1, 10, 5 ], [ 2, 3 ], [ [ 2, 1 ], [ "|C(",, ")|" ], 36 ], 
          [ 1, 1, 2, 1, 7 ] ], standardization := 1 ) ]
]]></Example>

<P/>

Alternatively, we can compute whether the generators are compatible,
as follows.

<P/>

<Example><![CDATA[
gap> info:= OneAtlasGeneratingSetInfo( "J2", Dimension, d, Ring, GF(p) );
rec( charactername := "14a", constituents := [ 2 ], 
  contents := "core", dim := 14, givenRing := GF(5), 
  groupname := "J2", id := "", 
  identifier := [ "J2", [ "J2G1-f5r14B0.m1", "J2G1-f5r14B0.m2" ], 1, 
      5 ], repname := "J2G1-f5r14B0", repnr := 19, ring := GF(5), 
  size := 604800, standardization := 1, type := "matff" )
gap> gens:= AtlasGenerators( info ).generators;;
gap> map:= GroupGeneralMappingByImages( UnderlyingGroup( tom ),
>      Group( gens ), GeneratorsOfGroup( UnderlyingGroup( tom ) ), gens );;
gap> IsGroupHomomorphism( map );
true
]]></Example>

<P/>

Now we are sure that we may apply the function <C>orbits_from_tom</C>.

<P/>

<Example><![CDATA[
gap> orbits_from_tom( tom, gens, p );
rec( 
  decomp := [ 8600, 0, 2512, 359, 10, 0, 0, 212, 5, 0, 0, 4, 0, 240, 
      16, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 2, 0, 0, 36, 0, 0, 0, 26, 
      0, 0, 0, 0, 0, 0, 0, 20, 0, 10, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 10, 0, 0, 5, 0, 0, 0, 26, 0, 10, 0, 0, 0, 0, 10, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 2, 0, 
      0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 4, 0, 0, 0, 4, 0, 0, 1 ], 
  fixed := [ 6103515625, 15625, 390625, 390625, 625, 25, 3125, 3125, 
      625, 625, 625, 625, 5, 3125, 125, 625, 25, 25, 125, 5, 125, 25, 
      125, 25, 25, 25, 5, 125, 125, 125, 25, 25, 3125, 1, 1, 5, 5, 
      25, 5, 25, 125, 5, 25, 25, 25, 25, 25, 25, 5, 25, 25, 5, 25, 5, 
      5, 5, 5, 25, 25, 1, 125, 1, 5, 5, 125, 1, 25, 5, 25, 1, 5, 25, 
      5, 5, 25, 25, 5, 5, 5, 1, 5, 5, 1, 1, 1, 5, 1, 25, 25, 25, 1, 
      5, 25, 5, 5, 1, 1, 125, 5, 5, 5, 25, 5, 5, 5, 1, 1, 5, 5, 1, 5, 
      1, 5, 1, 1, 25, 5, 5, 1, 1, 1, 1, 5, 1, 1, 25, 1, 1, 5, 1, 1, 
      5, 1, 5, 1, 1, 5, 1, 5, 1, 1, 1, 5, 1, 1, 1 ], 
  nonzeropos := [ 1, 3, 4, 5, 8, 9, 12, 14, 15, 16, 21, 26, 29, 33, 
      41, 43, 44, 58, 61, 65, 67, 72, 89, 93, 98, 99, 105, 116, 126, 
      139, 143, 146 ], 
  staborders := [ 1, 2, 3, 3, 4, 4, 5, 6, 6, 6, 8, 9, 10, 12, 12, 12, 
      14, 20, 24, 24, 24, 30, 48, 50, 60, 60, 72, 120, 192, 600, 
      1920, 604800 ] )
]]></Example>

<P/>

We see that <M>S</M> has <M>8\,600</M> regular orbits on
(the dual space of) <M>N</M>.

</Section>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:J2,2^28">
<Heading><M>G/N \cong J_2</M> and <M>|N| = 2^{28}</M></Heading>

The group <M>S = J_2</M> has exactly one irreducible <M>28</M>-dimensional
module over the field with two elements, up to isomorphism.
This module can be obtained from any of the two absolutely irreducible
<M>14</M>-dimensional <M>S</M>-modules in characteristic two,
by regarding it as a module over the prime field <M>GF(2)</M>.

<P/>

<Example><![CDATA[
gap> p:= 2;;  d:= 28;;
gap> t:= CharacterTable( "J2" ) mod p;
BrauerTable( "J2", 2 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
J2mod2

       1a 3a 3b 5a 5b  5c  5d 7a 15a 15b

Y.1     1  1  1  1  1   1   1  1   1   1
Y.2     6 -3  .  A *A   C  *C -1   D  *D
Y.3     6 -3  . *A  A  *C   C -1  *D   D
Y.4    14  5 -1  B *B  -C -*C  .   .   .
Y.5    14  5 -1 *B  B -*C  -C  .   .   .

A = -2*E(5)-2*E(5)^4
  = 1-Sqrt(5) = 1-r5
B = -3*E(5)-3*E(5)^4
  = (3-3*Sqrt(5))/2 = -3b5
C = E(5)+2*E(5)^2+2*E(5)^3+E(5)^4
  = (-3-Sqrt(5))/2 = -2-b5
D = E(5)+E(5)^4
  = (-1+Sqrt(5))/2 = b5
gap> List( irr, x -> SizeOfFieldOfDefinition( x, p ) );
[ 2, 4, 4, 4, 4 ]
]]></Example>

<P/>

We use the same approach as in the previous example.

<P/>

<Example><![CDATA[
gap> tom:= TableOfMarks( "J2" );;
gap> info:= OneAtlasGeneratingSetInfo( "J2", Dimension, 14, Ring, GF(4) );;
gap> gens:= List( AtlasGenerators( info ).generators,
>                 x -> BlownUpMat( Basis(GF(4)), x ) );;
gap> orbits_from_tom( tom, gens, p );
rec( 
  decomp := [ 235, 33, 282, 38, 0, 0, 6, 31, 36, 0, 0, 0, 3, 66, 9, 
      0, 0, 0, 0, 0, 0, 2, 18, 0, 0, 1, 0, 0, 15, 0, 0, 0, 6, 0, 0, 
      0, 0, 0, 0, 0, 12, 0, 0, 5, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 3, 1, 3, 0, 9, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
      3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 
      0, 0, 3, 0, 0, 1 ], 
  fixed := [ 268435456, 65536, 65536, 65536, 256, 1024, 4096, 1024, 
      1024, 256, 256, 256, 64, 1024, 64, 256, 16, 16, 64, 64, 64, 
      256, 256, 64, 16, 16, 64, 64, 64, 64, 16, 16, 1024, 4, 4, 4, 4, 
      16, 16, 16, 64, 16, 16, 16, 16, 64, 16, 16, 16, 64, 16, 16, 16, 
      16, 4, 16, 16, 16, 16, 1, 64, 4, 16, 4, 64, 4, 16, 4, 16, 1, 4, 
      16, 4, 4, 16, 16, 4, 4, 16, 1, 4, 16, 1, 1, 1, 16, 4, 16, 16, 
      16, 1, 4, 16, 4, 4, 1, 4, 64, 4, 4, 4, 16, 4, 4, 4, 1, 1, 4, 
      16, 1, 4, 1, 4, 1, 4, 16, 4, 4, 1, 1, 1, 1, 4, 1, 1, 16, 1, 1, 
      4, 1, 4, 4, 1, 4, 1, 1, 4, 1, 4, 1, 1, 1, 4, 1, 1, 1 ], 
  nonzeropos := [ 1, 2, 3, 4, 7, 8, 9, 13, 14, 15, 22, 23, 26, 29, 
      33, 41, 44, 46, 50, 61, 62, 63, 65, 72, 82, 93, 99, 105, 109, 
      116, 126, 131, 139, 143, 146 ], 
  staborders := [ 1, 2, 2, 3, 4, 4, 4, 6, 6, 6, 8, 8, 9, 10, 12, 12, 
      14, 16, 16, 24, 24, 24, 24, 30, 40, 50, 60, 72, 96, 120, 192, 
      240, 600, 1920, 604800 ] )
]]></Example>

<P/>

We see that <M>S</M> has <M>235</M> regular orbits on
(the dual space of) <M>N</M>.

</Section>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:cong">
<Heading><M>G/N \cong {}^3D_4(2)</M> and <M>|N| = 2^{26}</M></Heading>

The group <M>S = {}^3D_4(2)</M> has exactly one irreducible
<M>26</M>-dimensional module over the field with two elements,
up to isomorphism.
This module is in fact absolutely irreducible.

<P/>

<Example><![CDATA[
gap> p:= 2;;  d:= 26;;
gap> t:= CharacterTable( "3D4(2)" ) mod p;
BrauerTable( "3D4(2)", 2 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
3D4(2)mod2

       1a 3a 3b 7a 7b 7c 7d 9a 9b 9c 13a 13b 13c 21a 21b 21c

Y.1     1  1  1  1  1  1  1  1  1  1   1   1   1   1   1   1
Y.2     8  2 -1  A  C  B  1  D  F  E   G   I   H   J   L   K
Y.3     8  2 -1  B  A  C  1  E  D  F   H   G   I   K   J   L
Y.4     8  2 -1  C  B  A  1  F  E  D   I   H   G   L   K   J
Y.5    26 -1 -1  5  5  5 -2  2  2  2   .   .   .  -1  -1  -1

A = 3*E(7)^2+E(7)^3+E(7)^4+3*E(7)^5
B = 3*E(7)+E(7)^2+E(7)^5+3*E(7)^6
C = E(7)+3*E(7)^3+3*E(7)^4+E(7)^6
D = -E(9)^2+E(9)^3-2*E(9)^4-2*E(9)^5+E(9)^6-E(9)^7
E = -E(9)^2+E(9)^3+E(9)^4+E(9)^5+E(9)^6-E(9)^7
F = 2*E(9)^2+E(9)^3+E(9)^4+E(9)^5+E(9)^6+2*E(9)^7
G = E(13)+E(13)^2+E(13)^3+E(13)^5+E(13)^8+E(13)^10+E(13)^11+E(13)^12
H = E(13)+E(13)^4+E(13)^5+E(13)^6+E(13)^7+E(13)^8+E(13)^9+E(13)^12
I = E(13)^2+E(13)^3+E(13)^4+E(13)^6+E(13)^7+E(13)^9+E(13)^10+E(13)^11
J = E(7)^3+E(7)^4
K = E(7)^2+E(7)^5
L = E(7)+E(7)^6
]]></Example>

<P/>

We try the same approach as in the examples about the group <M>J_2</M>.

<P/>

<Example><![CDATA[
gap> tom:= TableOfMarks( "3D4(2)" );
TableOfMarks( "3D4(2)" )
gap> StandardGeneratorsInfo( tom );
[ rec( ATLAS := true, 
      description := "|z|=8, z^4=a, |b|=9, |ab|=13, |abb|=8", 
      generators := "a, b", 
      script := [ [ 1, 8, 4 ], [ 2, 9 ], [ 1, 1, 2, 1, 13 ], 
          [ 1, 1, 2, 1, 2, 1, 8 ] ], standardization := 1 ) ]
gap> info:= OneAtlasGeneratingSetInfo( "3D4(2)", Dimension, 26, Ring, GF(2) );;
gap> gens:= AtlasGenerators( info ).generators;;
gap> map:= GroupGeneralMappingByImages( UnderlyingGroup( tom ),
>      Group( gens ), GeneratorsOfGroup( UnderlyingGroup( tom ) ), gens );;
gap> IsGroupHomomorphism( map );
true
]]></Example>

<P/>

Now we apply the function <C>orbits_from_tom</C>.

<P/>

<Example><![CDATA[
gap> orbsinfo:= orbits_from_tom( tom, gens, p );;
gap> orbsinfo.fixed[1];
67108864
gap> orbsinfo.decomp[1];
0
]]></Example>

<P/>

Unfortunately, <M>S</M> has no regular orbit on (the dual of) <M>N</M>.
However,
there is one orbit whose point stabilizer in <M>S</M> is a dihedral group
<M>D_{18}</M> of order <M>18</M>.

<P/>

<Example><![CDATA[
gap> orbsinfo.staborders;
[ 16, 16, 18, 42, 48, 52, 64, 72, 392, 1008, 1536, 3024, 3072, 3584, 
  258048, 211341312 ]
gap> orbsinfo.nonzeropos[3];
446
gap> orbsinfo.decomp[446];
1
gap> u:= RepresentativeTom( tom, 446 );
<permutation group of size 18 with 2 generators>
gap> IsDihedralGroup( u );
true
]]></Example>

<P/>

Thus there ia a linear character <M>\lambda</M> of <M>N</M>
whose inertia subgroup <M>T = I_G(\lambda)</M> has the structure
<M>N.D_{18}</M>.
Now <M>&Irr;( T | \lambda )</M> can be identified with those irreducibles of
<M>T/\ker(\lambda)</M> that restrict nontrivially to <M>N/\ker(\lambda)</M>,
and there are only two groups, up to isomorphism, that can occur as
<M>T/\ker(\lambda)</M>.

<P/>

<Example><![CDATA[
gap> cand:= Filtered( AllSmallGroups( 36 ),
>             x -> Size( Centre( x ) ) = 2 and
>                  IsDihedralGroup( x / Centre( x ) ) );
[ <pc group of size 36 with 4 generators>, 
  <pc group of size 36 with 4 generators> ]
gap> List( cand, StructureDescription );
[ "C9 : C4", "D36" ]
]]></Example>

<P/>

These two groups are a split and a nonsplit extension of the cyclic group
of order <M>18</M> with a group of order two that acts by inverting.
In other words, these two groups are the direct product of <M>D_{18}</M> with
a cyclic group of order two and the subdirect product of <M>D_{18}</M> with
a cyclic group of order four.

<P/>

Both groups possess irreducible characters of degree two, one rational
valued and the other not, which restrict nontrivially to the centre.

<P/>

<Example><![CDATA[
gap> Display( CharacterTable( "Dihedral", 18 ) );
Dihedral(18)

     2  1  .  .  .  .  1
     3  2  2  2  2  2  .

       1a 9a 9b 3a 9c 2a
    2P 1a 9b 9c 3a 9a 1a
    3P 1a 3a 3a 1a 3a 2a

X.1     1  1  1  1  1  1
X.2     1  1  1  1  1 -1
X.3     2  A  B -1  C  .
X.4     2  B  C -1  A  .
X.5     2 -1 -1  2 -1  .
X.6     2  C  A -1  B  .

A = -E(9)^2-E(9)^4-E(9)^5-E(9)^7
B = E(9)^2+E(9)^7
C = E(9)^4+E(9)^5
]]></Example>

<P/>

By \cite[Lemma&nbsp;5.1&nbsp;(ii)]{DNT}, we are done.

</Section>


<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
<Section Label="sect:">
<Heading><M>G/N \cong {}^3D_4(2)</M> and <M>|N| = 3^{25}</M></Heading>

The group <M>S = {}^3D_4(2)</M> has exactly one irreducible
<M>25</M>-dimensional module over the field with three elements,
up to isomorphism.
This module is in fact absolutely irreducible.

<P/>

<Example><![CDATA[
gap> p:= 3;;  d:= 25;;
gap> t:= CharacterTable( "3D4(2)" ) mod p;
BrauerTable( "3D4(2)", 3 )
gap> irr:= Filtered( Irr( t ), x -> x[1] <= d );;
gap> Display( t, rec( chars:= irr, powermap:= false,
>                     centralizers:= false ) );
3D4(2)mod3

       1a 2a 2b 4a 4b 4c 7a 7b 7c 7d 8a 8b 13a 13b 13c 14a 14b 14c 28a

Y.1     1  1  1  1  1  1  1  1  1  1  1  1   1   1   1   1   1   1   1
Y.2    25 -7  1  5 -3  1  4  4  4 -3 -1 -1  -1  -1  -1   .   .   .  -2

       28b 28c

Y.1      1   1
Y.2     -2  -2
]]></Example>

<P/>

We use the same approach as in the examples about the group <M>J_2</M>.

<P/>

<Example><![CDATA[
gap> tom:= TableOfMarks( "3D4(2)" );;
gap> info:= OneAtlasGeneratingSetInfo( "3D4(2)", Dimension, d, Ring, GF(p) );;
gap> gens:= AtlasGenerators( info ).generators;;
gap> orbsinfo:= orbits_from_tom( tom, gens, p );;
gap> orbsinfo.fixed[1];
847288609443
gap> orbsinfo.decomp[1];
3551
]]></Example>

<P/>

We see that <M>S</M> has <M>3\,551</M> regular orbits on
(the dual space of) <M>N</M>.

</Section>
</Chapter>

<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

