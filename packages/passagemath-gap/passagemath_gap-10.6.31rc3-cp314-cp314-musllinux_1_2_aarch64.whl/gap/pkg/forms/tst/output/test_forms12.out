gap> #test_forms12.g code coverage test for constructor methods.
gap> f := GF(5);
GF(5)
gap> mat := IdentityMat(3,f);
[ [ Z(5)^0, 0*Z(5), 0*Z(5) ], [ 0*Z(5), Z(5)^0, 0*Z(5) ], 
  [ 0*Z(5), 0*Z(5), Z(5)^0 ] ]
gap> form := BilinearFormByMatrix(mat,f);
< bilinear form >
gap> Display(form);
Bilinear form
Gram Matrix:
 1 . .
 . 1 .
 . . 1
gap> mat[1][2] := One(f);
Z(5)^0
gap> Display(form);
Bilinear form
Gram Matrix:
 1 . .
 . 1 .
 . . 1
gap> f := GF(5);
GF(5)
gap> mat := IdentityMat(3,f);
[ [ Z(5)^0, 0*Z(5), 0*Z(5) ], [ 0*Z(5), Z(5)^0, 0*Z(5) ], 
  [ 0*Z(5), 0*Z(5), Z(5)^0 ] ]
gap> form := QuadraticFormByMatrix(mat,f);
< quadratic form >
gap> Display(form);
Quadratic form
Gram Matrix:
 1 . .
 . 1 .
 . . 1
gap> mat[1][2] := One(f);
Z(5)^0
gap> Display(form);
Quadratic form
Gram Matrix:
 1 . .
 . 1 .
 . . 1
gap> f := GF(81);
GF(3^4)
gap> mat := IdentityMat(4,f);
[ [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
  [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ]
gap> form := HermitianFormByMatrix(mat,f);
< hermitian form >
gap> Display(form);
Hermitian form
Gram Matrix:
 1 . . .
 . 1 . .
 . . 1 .
 . . . 1
gap> mat[1][2] := One(f);
Z(3)^0
gap> Display(form);
Hermitian form
Gram Matrix:
 1 . . .
 . 1 . .
 . . 1 .
 . . . 1
gap> quit;
