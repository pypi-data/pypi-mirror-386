gap&gt; f := GF(3);
GF(3)
gap&gt; id := IdentityMat(2, f);;
gap&gt; clan := List( f, t -&gt; t*id );;
gap&gt; IsqClan( clan, f );
true
gap&gt; clan := qClan(clan, f);
&lt;q-clan over GF(3)&gt;
gap&gt; egq := EGQByqClan( clan );
#I  Computed Kantor family. Now computing EGQ...
&lt;EGQ of order [ 9, 3 ] and basepoint 0&gt;
gap&gt; elations := ElationGroup( egq );
&lt;matrix group of size 243 with 8 generators&gt;
gap&gt; points := Points( egq );
&lt;points of &lt;EGQ of order [ 9, 3 ] and basepoint 0&gt;&gt;
gap&gt; p := Random(points);
&lt;a point of class 2 of &lt;EGQ of order [ 9, 3 ] and basepoint 0&gt;&gt;
gap&gt; x := Random(elations);
[ [ Z(3)^0, 0*Z(3), 0*Z(3), Z(3)^0 ], [ 0*Z(3), Z(3)^0, 0*Z(3), Z(3)^0 ], 
  [ 0*Z(3), 0*Z(3), Z(3)^0, Z(3)^0 ], [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ] ]
gap&gt; OnKantorFamily(p,x);
&lt;a point of class 2 of &lt;EGQ of order [ 9, 3 ] and basepoint 0&gt;&gt;
gap&gt; orbs := Orbits( elations, points, OnKantorFamily);;
gap&gt; Collected(List( orbs, Size ));
[ [ 1, 1 ], [ 9, 4 ], [ 243, 1 ] ]
gap&gt; blt := BLTSetByqClan( clan );
[ &lt;a point in Q(4, 3): -x_1*x_5-x_2*x_4+x_3^2=0&gt;, 
  &lt;a point in Q(4, 3): -x_1*x_5-x_2*x_4+x_3^2=0&gt;, 
  &lt;a point in Q(4, 3): -x_1*x_5-x_2*x_4+x_3^2=0&gt;, 
  &lt;a point in Q(4, 3): -x_1*x_5-x_2*x_4+x_3^2=0&gt; ]
gap&gt; q4q := AmbientGeometry( blt[1] );
Q(4, 3): -x_1*x_5-x_2*x_4+x_3^2=0
gap&gt; span := Span( blt );
&lt;a plane in ProjectiveSpace(4, 3)&gt;
gap&gt; ProjectiveDimension( span ); 
2
