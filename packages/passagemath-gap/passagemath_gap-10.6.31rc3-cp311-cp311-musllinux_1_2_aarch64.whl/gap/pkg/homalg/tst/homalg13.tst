# homalg, single 13
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("homalg13.tst");

# doc/../gap/HomalgChainMorphism.gi:1140-1184
gap> zz := HomalgRingOfIntegers( );
Z
gap> M := 1 * zz;
<The free left module of rank 1 on a free generator>
gap> Display( M );
Z^(1 x 1)
gap> N := HomalgMatrix( "[3]", 1, 1, zz );;
gap> N := LeftPresentation( N );
<A cyclic torsion left module presented by 1 relation for
 a cyclic generator>
gap> Display( N );
Z/< 3 >
gap> a := HomalgMap( HomalgMatrix( "[2]", 1, 1, zz ), M, M );
<An endomorphism of a left module>
gap> c := HomalgMap( HomalgMatrix( "[2]", 1, 1, zz ), M, N );
<A homomorphism of left modules>
gap> b := HomalgMap( HomalgMatrix( "[1]", 1, 1, zz ), M, M );
<An endomorphism of a left module>
gap> d := HomalgMap( HomalgMatrix( "[1]", 1, 1, zz ), M, N );
<A homomorphism of left modules>
gap> C1 := HomalgComplex( a );
<A non-zero acyclic complex containing a single morphism of left modules at de\
grees [ 0 .. 1 ]>
gap> C2 := HomalgComplex( c );
<A non-zero acyclic complex containing a single morphism of left modules at de\
grees [ 0 .. 1 ]>
gap> cm := HomalgChainMorphism( d, C1, C2 );
<A "chain morphism" containing a single left morphism at degree 0>
gap> Add( cm, b );
gap> IsMorphism( cm );
true
gap> cm;
<A chain morphism containing 2 morphisms of left modules at degrees
[ 0 .. 1 ]>
gap> hcm := DefectOfExactness( cm );
<A chain morphism of graded objects containing
2 morphisms of left modules at degrees [ 0 .. 1 ]>
gap> IsZero( hcm );
true
gap> IsZero( Source( hcm ) );
false
gap> IsZero( Range( hcm ) );
false

#
gap> STOP_TEST("homalg13.tst", 1);
