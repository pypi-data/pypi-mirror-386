---
description: 
globs: 
alwaysApply: true
---
Refer to these rules for instructions on how to create testable project source code before proceeding with code generation.

For creating testable project source code:
* Always accept dependencies through constructors for better testability
* Make all dependencies explicit by passing them through constructors
* Use interfaces or abstract classes for dependencies to improve testability
* Avoid direct instantiation of dependencies inside methods - pass them through constructors instead

This rule enforces dependency injection patterns:

For constructor design:
* Accept dependencies as constructor parameters
* Use constructor parameters to set instance variables
* Validate dependencies in constructors with null checks
* Consider making dependencies optional if they're not always needed

For avoiding tight coupling:
* FORBIDDEN: Direct instantiation of dependencies inside methods (except in constructors)
* FORBIDDEN: Static method calls for dependencies that could be mocked
* FORBIDDEN: Circular dependencies between classes
* ACCEPTABLE: Static calls only for genuine utility functions

For testability and documentation:
* Document how to test classes and mock their dependencies
* Include "test", "mock", or "dependency" information in class docstrings
* Design interfaces so dependencies can be easily replaced with test doubles
* Use composition over inheritance for dependency relationships

For lifecycle management:
* If implementing IDisposable, dispose of dependencies in the Dispose method
* Consider dependency lifecycle when designing object relationships
* Avoid holding references to dependencies longer than necessary

Common dependency injection patterns:
* Constructor injection: Pass all required dependencies through the constructor
* Interface segregation: Use specific interfaces rather than concrete classes
* Optional dependencies: Use default parameters or factory patterns for optional dependencies
* Event-based communication: Use events to avoid circular dependencies between components