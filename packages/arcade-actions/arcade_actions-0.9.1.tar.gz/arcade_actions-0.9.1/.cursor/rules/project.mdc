---
description: 
globs: 
alwaysApply: true
---
Refer to these rules before proceeding with code generation.

When working with the ArcadeActions project:
* Always consult docs/prd.md for architectural constraints and quality standards
* Review docs/api_usage_guide.md for implementation patterns and component usage
* Check docs/testing_index.md to find appropriate testing documentation
* Follow the workflow: PRD → API Guide → Testing Documentation → Implementation

This rule defines the project structure and relationships:

In the actions/ directory:
* Contains the main ArcadeActions system implementation
* Interfaces with Arcade 3.x functionality referenced in references/arcade/
* Works directly with arcade.Sprite and arcade.SpriteList - no custom sprite classes needed

In the tests/ directory:
* Unit and integration tests for the Actions system
* Follow testing patterns documented in docs/testing_index.md

Arcade 3.x API Guidelines:
* Always prefer the modern Arcade 3.x API
* Text rendering: Use arcade.Text objects that are created once (e.g. in __init__) and drawn with .draw()
* Avoid arcade.draw_text in the render loop - it incurs a high per-frame CPU cost and triggers performance warnings

Core design principles that must be followed:

CRITICAL API Rule - Velocity Semantics:
* ALL velocity values use Arcade's native "pixels per frame at 60 FPS" semantics, NOT "pixels per second"
* MoveUntil((5, 0), condition) means 5 pixels per frame, not 5 pixels per second
* RotateUntil(3, condition) means 3 degrees per frame, not 3 degrees per second  
* This maintains perfect consistency with Arcade's sprite.change_x/change_y/change_angle system
* NEVER convert velocities by dividing/multiplying by frame rates - use raw values directly
* When in doubt about velocity values, refer to Arcade's native sprite velocity documentation

General rules:
* Never use Dataclasses
* AVOID state flags (booleans like self.respawning, self.is_active); use action states and completion callbacks instead.

CRITICAL: infinite() function rule:
* NEVER suggest changing the infinite() function implementation in actions/conditional.py
* The current implementation (return False) is intentional and correct for the project's usage patterns
* Do not recommend changing it to return lambda: False or any other callable
* This function works correctly with the existing codebase and should not be modified

CRITICAL: Velocity system consistency:
* MoveUntil ALWAYS uses sprite.change_x and sprite.change_y (Arcade's built-in velocity system)
* NEVER use sprite.velocity - that's not how MoveUntil works
* Be consistent - don't switch back and forth between approaches

CRITICAL: Condition function usage:
* ALWAYS use `infinite` instead of `lambda: False` for infinite/never-ending conditions
* This is the standard pattern in the codebase

For interface design:
* ZERO TOLERANCE for runtime type/attribute checking (hasattr, getattr, isinstance, EAFP-with-pass)
* Design interfaces so checking isn't needed - unclear interfaces are the real problem
* Use consistent base interfaces with default values
* Define clear protocols guaranteeing expected methods/attributes
* Apply composition patterns eliminating optional attributes
* Create unified interfaces for similar objects

For error handling:
* Use EAFP only for genuine decision points with real fallback logic
* NEVER use EAFP for error silencing
* FORBIDDEN: `except AttributeError: pass` - this is a code smell
* ACCEPTABLE: `except AttributeError: return default_value` with genuine fallback

API usage patterns to follow:

For sprite management:
* Use arcade.Sprite for all sprites - actions work directly with standard Arcade sprites
* Use arcade.SpriteList for groups of sprites that need coordinated actions
* No custom sprite classes needed - actions apply to targets via action.apply(sprite/sprite_list)

For group management:
* Use arcade.SpriteList for basic sprite collections
* Use AttackGroup for high-level game management with lifecycle, formations, and complex behaviors
* Actions are applied directly to sprites or sprite lists using action.apply(target, tag="name")

For boundary interactions:
* Apply BoundedMove to individual sprites for simple bouncing behavior
* Apply BoundedMove to sprite lists for coordinated group bouncing (Space Invaders pattern)
* Use WrappedMove for individual sprites or groups for screen wrapping behavior

CRITICAL: Boundary System Design Principles (DO NOT OVER-ENGINEER):
* Keep boundary detection SIMPLE - track position changes between frames, not complex state management
* Actions move sprites by changing positions directly (NOT change_x/change_y velocities)
* Only check boundaries in the current movement direction (left-moving group only checks left boundary)
* Edge sprite detection: only sprites on the leading edge (leftmost when moving left, rightmost when moving right, etc.)
* Simple callback management: one callback per axis per frame maximum
* NO complex frame tracking, multiple collision handling, or elaborate state machines
* Direction detection: compare current position to previous position with small threshold (0.1 pixels)
* If boundary system becomes complex, you're over-engineering - return to these simple principles

Common implementation patterns:
* Individual control: action.apply(sprite, tag="movement") for single sprite behaviors
* Group coordination: action.apply(sprite_list, tag="formation") for synchronized group movements
* High-level management: AttackGroup for formations, lifecycle, and complex game behaviors
* Boundary detection: BoundedMove applied to sprites or sprite lists for collision handling

Testing patterns to follow:
* Individual actions: Use arcade.Sprite fixtures, test with action.apply() and Action.update_all()
* Group actions: Use arcade.SpriteList fixtures, verify actions applied to all sprites in list
* AttackGroup tests: Test formations, lifecycle management, and breakaway behaviors
* Boundary actions: Test edge detection, callback coordination, and movement reversal
* See docs/testing_index.md for complete testing patterns, fixtures, and mock usage guidelines

CRITICAL: Python execution rule:
* ALWAYS use `uv run python` instead of `python` for running Python scripts and tests
* This project uses uv for dependency management and virtual environment handling
* NEVER use `python` directly - it will fail because the virtual environment isn't activated
* Use `uv run python` for all Python execution commands in this project

CRITICAL: Debug logging system:
* Use the configurable debug system with levels (0-3+) and per-Action filtering
* Level 0: off (default), Level 1: summary counts, Level 2: lifecycle events, Level 3+: verbose details
* Programmatic API: `set_debug_options(level=2, include=["MoveUntil"])` or `observe_actions(MoveUntil)`
* Environment variables: `ARCADEACTIONS_DEBUG=2`, `ARCADEACTIONS_DEBUG_ALL=1`, `ARCADEACTIONS_DEBUG_INCLUDE=MoveUntil,CallbackUntil`
* Level 1 summary shows ALL action counts (not filtered) - filters only apply to Level 2+ detailed logging
* Legacy functions `set_debug_actions(bool)` and `get_debug_actions()` still work but map to levels internally