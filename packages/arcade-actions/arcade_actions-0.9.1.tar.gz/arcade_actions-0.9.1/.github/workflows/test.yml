name: Tests

on:
  push:
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'uv.lock'
  pull_request:
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'uv.lock'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies (bare package, no extras)
        run: uv sync --dev

      - name: Run tests (excluding integration tests that need extras)
        run: uv run pytest tests/ -v --tb=short --ignore=tests/integration
      
      - name: Install Xvfb and GL libs (Linux Python 3.11 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        env:
          DISPLAY: ':99.0'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y xvfb x11-utils libxkbcommon-x11-0 libgl1 libglu1-mesa mesa-utils
          /sbin/start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX

      - name: Install statemachine extra for examples (Linux Python 3.11 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: uv sync --extra statemachine --dev

      - name: Smoke test examples (Linux Python 3.11 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        env:
          DISPLAY: ':99.0'
          LIBGL_ALWAYS_SOFTWARE: '1'
        run: |
          for f in examples/*.py; do
            echo "Running $f for 5s"
            set +e
            timeout 5s uv run python "$f"
            rc=$?
            set -e
            if [ $rc -eq 124 ]; then
              echo "OK: $f ran and timed out after 5s as expected"
            elif [ $rc -eq 0 ]; then
              echo "OK: $f exited cleanly within 5s"
            else
              echo "FAIL: $f exited with $rc"
              exit $rc
            fi
          done

      - name: Run tests with coverage (Linux Python 3.11 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: uv run pytest tests/ --cov=actions --cov-report=xml --cov-report=term-missing --ignore=tests/integration

      - name: Upload coverage to Codecov (Linux Python 3.11 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  test-integration:
    name: Integration tests with optional dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies with statemachine extra
        run: uv sync --extra statemachine --dev

      - name: Run integration tests
        run: uv run pytest tests/integration/ -v --tb=short

      - name: Run full test suite to ensure no regressions
        run: uv run pytest tests/ -v --tb=short
