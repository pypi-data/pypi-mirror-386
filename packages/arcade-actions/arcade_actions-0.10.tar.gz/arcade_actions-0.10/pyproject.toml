[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "arcade-actions"
version = "0.10"
description = "Extension library for Arcade 3.x, providing a high-level way to animate sprites with conditional actions."
authors = [
    {name = "Brandon Corfman", email = "teacup_canny.5l@icloud.com"}
]
license = {file="LICENSE"}
readme = "README.md"
requires-python = ">= 3.10"
keywords = ["arcade", "gamedev", "animation", "actions", "sprites"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Games/Entertainment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "arcade>=3.0.0.dev35",
    "pyglet>=2.1.dev5",
    # For fallback monitor detection
    "screeninfo>=0.8.1",
    # Optional; provides Python bindings and wheels for SDL2 on many platforms
    "PySDL2>=0.9.16",
]

[project.urls]
Homepage = "https://github.com/bcorfman/arcade_actions"
Repository = "https://github.com/bcorfman/arcade_actions"
Documentation = "https://deepwiki.com/bcorfman/arcade_actions"
Issues = "https://github.com/bcorfman/arcade_actions/issues"

[project.optional-dependencies]
statemachine = [
    "python-statemachine>=2.5.0",
]
statemachine_diagrams = [
    "python-statemachine[diagrams]>=2.5.0",
]

[dependency-groups]
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "build>=1.2.2.post1",
    "ruff>=0.12.0",
    "uv>=0.7.16",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["ignore::DeprecationWarning"]
markers=["unit: Unit tests.",
         "system: System tests."]
         

[tool.ruff]
line-length = 120
fix = true
target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.hatch.build.targets.wheel]
packages = ["actions"]

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
extend-fixable = ["E", "F", "UP", "B", "SIM", "I"]

# Enable flake8-tidy-imports rules (TID*) so that banned-api violations are enforced
extend-select = ["TID"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"builtins.isinstance".msg = "Avoid isinstance; design clear interfaces instead."
"builtins.hasattr".msg = "Avoid hasattr runtime checks; use explicit interfaces."
"builtins.getattr".msg = "Avoid getattr runtime checks; use explicit interfaces."
