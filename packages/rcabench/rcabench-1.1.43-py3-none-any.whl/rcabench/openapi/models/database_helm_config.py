# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://rcabench.openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DatabaseHelmConfig(BaseModel):
    """
    DatabaseHelmConfig
    """ # noqa: E501
    chart_name: Optional[StrictStr] = Field(default=None, description="Helm chart information")
    chart_version: Optional[StrictStr] = Field(default=None, description="Chart version")
    full_chart: Optional[StrictStr] = Field(default=None, description="Full chart reference (not stored in DB, used for display)")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier")
    ns_prefix: Optional[StrictStr] = Field(default=None, description="Deployment configuration")
    port_template: Optional[StrictStr] = Field(default=None, description="Port template for dynamic port assignment, e.g., \"31%03d\"")
    repo_name: Optional[StrictStr] = Field(default=None, description="Repository name")
    repo_url: Optional[StrictStr] = Field(default=None, description="Repository URL")
    values: Optional[StrictStr] = Field(default=None, description="Helm values in JSON format")
    __properties: ClassVar[List[str]] = ["chart_name", "chart_version", "full_chart", "id", "ns_prefix", "port_template", "repo_name", "repo_url", "values"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DatabaseHelmConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DatabaseHelmConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chart_name": obj.get("chart_name"),
            "chart_version": obj.get("chart_version"),
            "full_chart": obj.get("full_chart"),
            "id": obj.get("id"),
            "ns_prefix": obj.get("ns_prefix"),
            "port_template": obj.get("port_template"),
            "repo_name": obj.get("repo_name"),
            "repo_url": obj.get("repo_url"),
            "values": obj.get("values")
        })
        return _obj


