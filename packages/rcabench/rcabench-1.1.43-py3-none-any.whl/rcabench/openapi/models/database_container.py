# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://rcabench.openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from rcabench.openapi.models.database_helm_config import DatabaseHelmConfig
from rcabench.openapi.models.database_user import DatabaseUser
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DatabaseContainer(BaseModel):
    """
    DatabaseContainer
    """ # noqa: E501
    command: Optional[StrictStr] = Field(default=None, description="Startup command")
    created_at: Optional[StrictStr] = Field(default=None, description="Creation time")
    env_vars: Optional[StrictStr] = Field(default=None, description="List of environment variable names")
    helm_config: Optional[DatabaseHelmConfig] = None
    helm_config_id: Optional[StrictInt] = Field(default=None, description="Associated Helm configuration, nullable")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier")
    image: Optional[StrictStr] = Field(default=None, description="Full image name (not stored in DB, used for display)")
    is_public: Optional[StrictBool] = Field(default=None, description="Whether publicly visible")
    name: Optional[StrictStr] = Field(default=None, description="Name with size limit")
    registry: Optional[StrictStr] = Field(default=None, description="Image registry with size limit")
    repository: Optional[StrictStr] = Field(default=None, description="Image repository with size limit")
    status: Optional[StrictInt] = Field(default=None, description="Status: -1:deleted 0:disabled 1:active")
    tag: Optional[StrictStr] = Field(default=None, description="Image tag with size limit")
    type: Optional[StrictStr] = Field(default=None, description="Image type")
    updated_at: Optional[StrictStr] = Field(default=None, description="Update time")
    user: Optional[DatabaseUser] = None
    user_id: Optional[StrictInt] = Field(default=None, description="Container must belong to a user")
    __properties: ClassVar[List[str]] = ["command", "created_at", "env_vars", "helm_config", "helm_config_id", "id", "image", "is_public", "name", "registry", "repository", "status", "tag", "type", "updated_at", "user", "user_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DatabaseContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of helm_config
        if self.helm_config:
            _dict['helm_config'] = self.helm_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DatabaseContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "command": obj.get("command"),
            "created_at": obj.get("created_at"),
            "env_vars": obj.get("env_vars"),
            "helm_config": DatabaseHelmConfig.from_dict(obj.get("helm_config")) if obj.get("helm_config") is not None else None,
            "helm_config_id": obj.get("helm_config_id"),
            "id": obj.get("id"),
            "image": obj.get("image"),
            "is_public": obj.get("is_public"),
            "name": obj.get("name"),
            "registry": obj.get("registry"),
            "repository": obj.get("repository"),
            "status": obj.get("status"),
            "tag": obj.get("tag"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "user": DatabaseUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj


