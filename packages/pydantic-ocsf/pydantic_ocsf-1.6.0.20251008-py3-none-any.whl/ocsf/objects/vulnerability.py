import re
from enum import IntEnum, property as enum_property
from typing import Any, ClassVar, Self

from pydantic import AnyUrl, computed_field, model_validator

from ocsf.datatypes.timestamp import Timestamp
from ocsf.objects.advisory import Advisory
from ocsf.objects.affected_code import AffectedCode
from ocsf.objects.affected_package import AffectedPackage
from ocsf.objects.cve import Cve
from ocsf.objects.cwe import Cwe
from ocsf.objects.kb_article import KbArticle
from ocsf.objects.object import Object
from ocsf.objects.package import Package
from ocsf.objects.remediation import Remediation


class FixCoverageId(IntEnum):
    UNKNOWN = 0
    COMPLETE = 1
    PARTIAL = 2
    NONE = 3
    OTHER = 99

    @classmethod
    def validate_python(cls, obj: Any):
        try:
            obj = int(obj)
        except ValueError:
            obj = str(obj).upper()
            return FixCoverageId[obj]
        else:
            return FixCoverageId(obj)

    @enum_property
    def name(self):
        name_map = {
            "UNKNOWN": "Unknown",
            "COMPLETE": "Complete",
            "PARTIAL": "Partial",
            "NONE": "None",
            "OTHER": "Other",
        }
        return name_map[super().name]


class Vulnerability(Object):
    allowed_profiles: ClassVar[list[str]] = []
    schema_name: ClassVar[str] = "vulnerability"

    # Recommended
    cve: Cve | None = None
    cwe: Cwe | None = None
    references: list[str] | None = None

    # Optional
    advisory: Advisory | None = None
    affected_code: list[AffectedCode] | None = None
    affected_packages: list[AffectedPackage] | None = None
    category: str | None = None
    dependency_chain: str | None = None
    desc: str | None = None
    exploit_last_seen_time: Timestamp | None = None
    exploit_ref_url: AnyUrl | None = None
    exploit_requirement: str | None = None
    exploit_type: str | None = None
    first_seen_time: Timestamp | None = None
    fix_available: bool | None = None
    fix_coverage_id: FixCoverageId | None = None
    is_exploit_available: bool | None = None
    is_fix_available: bool | None = None
    kb_article_list: list[KbArticle] | None = None
    kb_articles: list[str] | None = None
    last_seen_time: Timestamp | None = None
    packages: list[Package] | None = None
    related_vulnerabilities: list[str] | None = None
    remediation: Remediation | None = None
    severity: str | None = None
    title: str | None = None
    vendor_name: str | None = None

    @computed_field  # type: ignore[misc,prop-decorator]
    @property
    def fix_coverage(self) -> str | None:
        if self.fix_coverage_id is None:
            return None
        return self.fix_coverage_id.name

    @fix_coverage.setter
    def fix_coverage(self, value: str | None) -> None:
        if value is None:
            self.fix_coverage_id = None
        else:
            self.fix_coverage_id = FixCoverageId[value]

    @model_validator(mode="before")
    @classmethod
    def validate_fix_coverage_before(cls, data: dict[str, Any]) -> dict[str, Any]:
        if "fix_coverage" in data and "fix_coverage_id" not in data:
            fix_coverage = re.sub(r"\W", "_", data.pop("fix_coverage").upper())
            data["fix_coverage_id"] = FixCoverageId[fix_coverage]
        return data

    @model_validator(mode="after")
    def validate_fix_coverage_after(self) -> Self:
        if self.__pydantic_extra__ and "fix_coverage" in self.__pydantic_extra__:
            self.__pydantic_extra__.pop("fix_coverage")
        return self

    @model_validator(mode="after")
    def validate_just_one(self):
        count = len([f for f in ["advisory", "cve", "cwe"] if getattr(self, f) is not None])
        if count != 1:
            raise ValueError("Just one of `advisory`, `cve`, `cwe` must be provided, got {count}")
        return self
