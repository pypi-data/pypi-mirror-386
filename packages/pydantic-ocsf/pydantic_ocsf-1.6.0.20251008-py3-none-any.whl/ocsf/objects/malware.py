import re
from enum import IntEnum, property as enum_property
from typing import Any, ClassVar, Self

from pydantic import computed_field, model_validator

from ocsf.objects._entity import Entity
from ocsf.objects.cve import Cve
from ocsf.objects.file import File


class ClassificationIds(IntEnum):
    UNKNOWN = 0
    ADWARE = 1
    BACKDOOR = 2
    BOT = 3
    BOOTKIT = 4
    DDOS = 5
    DOWNLOADER = 6
    DROPPER = 7
    EXPLOIT_KIT = 8
    KEYLOGGER = 9
    RANSOMWARE = 10
    REMOTE_ACCESS_TROJAN = 11
    RESOURCE_EXPLOITATION = 13
    ROGUE_SECURITY_SOFTWARE = 14
    ROOTKIT = 15
    SCREEN_CAPTURE = 16
    SPYWARE = 17
    TROJAN = 18
    VIRUS = 19
    WEBSHELL = 20
    WIPER = 21
    WORM = 22
    OTHER = 99

    @classmethod
    def validate_python(cls, obj: Any):
        try:
            obj = int(obj)
        except ValueError:
            obj = str(obj).upper()
            return ClassificationIds[obj]
        else:
            return ClassificationIds(obj)

    @enum_property
    def name(self):
        name_map = {
            "UNKNOWN": "Unknown",
            "ADWARE": "Adware",
            "BACKDOOR": "Backdoor",
            "BOT": "Bot",
            "BOOTKIT": "Bootkit",
            "DDOS": "DDOS",
            "DOWNLOADER": "Downloader",
            "DROPPER": "Dropper",
            "EXPLOIT_KIT": "Exploit-Kit",
            "KEYLOGGER": "Keylogger",
            "RANSOMWARE": "Ransomware",
            "REMOTE_ACCESS_TROJAN": "Remote-Access-Trojan",
            "RESOURCE_EXPLOITATION": "Resource-Exploitation",
            "ROGUE_SECURITY_SOFTWARE": "Rogue-Security-Software",
            "ROOTKIT": "Rootkit",
            "SCREEN_CAPTURE": "Screen-Capture",
            "SPYWARE": "Spyware",
            "TROJAN": "Trojan",
            "VIRUS": "Virus",
            "WEBSHELL": "Webshell",
            "WIPER": "Wiper",
            "WORM": "Worm",
            "OTHER": "Other",
        }
        return name_map[super().name]


class SeverityId(IntEnum):
    UNKNOWN = 0
    INFORMATIONAL = 1
    LOW = 2
    MEDIUM = 3
    HIGH = 4
    CRITICAL = 5
    FATAL = 6
    OTHER = 99

    @classmethod
    def validate_python(cls, obj: Any):
        try:
            obj = int(obj)
        except ValueError:
            obj = str(obj).upper()
            return SeverityId[obj]
        else:
            return SeverityId(obj)

    @enum_property
    def name(self):
        name_map = {
            "UNKNOWN": "Unknown",
            "INFORMATIONAL": "Informational",
            "LOW": "Low",
            "MEDIUM": "Medium",
            "HIGH": "High",
            "CRITICAL": "Critical",
            "FATAL": "Fatal",
            "OTHER": "Other",
        }
        return name_map[super().name]


class Malware(Entity):
    allowed_profiles: ClassVar[list[str]] = []
    schema_name: ClassVar[str] = "malware"

    # Required
    classification_ids: list[ClassificationIds]

    # Recommended
    name: str | None = None
    path: str | None = None
    provider: str | None = None
    severity_id: SeverityId | None = None
    uid: str | None = None

    # Optional
    cves: list[Cve] | None = None
    files: list[File] | None = None
    num_infected: int | None = None

    @computed_field  # type: ignore[misc,prop-decorator]
    @property
    def classifications(self) -> list[str]:
        return [value.name for value in self.classification_ids]

    @classifications.setter
    def classifications(self, value: list[str]) -> None:
        self.classification_ids = [ClassificationIds[x] for x in value]

    @model_validator(mode="before")
    @classmethod
    def validate_classifications_before(cls, data: dict[str, Any]) -> dict[str, Any]:
        if "classifications" in data and "classification_ids" not in data:
            classifications = re.sub(r"\W", "_", data.pop("classifications").upper())
            data["classification_ids"] = ClassificationIds[classifications]
        return data

    @model_validator(mode="after")
    def validate_classifications_after(self) -> Self:
        if self.__pydantic_extra__ and "classifications" in self.__pydantic_extra__:
            self.__pydantic_extra__.pop("classifications")
        return self

    @computed_field  # type: ignore[misc,prop-decorator]
    @property
    def severity(self) -> str | None:
        if self.severity_id is None:
            return None
        return self.severity_id.name

    @severity.setter
    def severity(self, value: str | None) -> None:
        if value is None:
            self.severity_id = None
        else:
            self.severity_id = SeverityId[value]

    @model_validator(mode="before")
    @classmethod
    def validate_severity_before(cls, data: dict[str, Any]) -> dict[str, Any]:
        if "severity" in data and "severity_id" not in data:
            severity = re.sub(r"\W", "_", data.pop("severity").upper())
            data["severity_id"] = SeverityId[severity]
        return data

    @model_validator(mode="after")
    def validate_severity_after(self) -> Self:
        if self.__pydantic_extra__ and "severity" in self.__pydantic_extra__:
            self.__pydantic_extra__.pop("severity")
        return self
