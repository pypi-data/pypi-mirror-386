"""Card components for rendering system monitoring dashboards with CPU, memory, disk, network, GPU, process, and temperature information."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/cards.ipynb.

# %% auto 0
__all__ = ['scroll_preserve_script', 'get_cpu_text_color', 'render_cpu_cores_grid', 'render_os_info_card', 'render_cpu_card',
           'render_memory_card', 'render_disk_entries', 'render_disk_card', 'render_network_interfaces',
           'render_network_connections', 'render_network_card', 'render_process_card', 'render_gpu_metrics',
           'render_gpu_processes_section', 'render_gpu_card', 'render_temperature_sensors', 'render_temperature_card']

# %% ../../nbs/components/cards.ipynb 3
from fasthtml.common import *
from fasthtml.common import FT

# DaisyUI imports
from cjm_fasthtml_daisyui.components.data_display.card import card, card_body, card_title, card_actions
from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors, badge_sizes
from cjm_fasthtml_daisyui.components.data_display.stat import stat, stat_title, stat_value, stat_desc, stats, stats_direction
from cjm_fasthtml_daisyui.components.data_display.table import table, table_modifiers, table_sizes
from cjm_fasthtml_daisyui.components.navigation.tabs import tabs, tab, tab_modifiers, tabs_styles
from cjm_fasthtml_daisyui.components.feedback.progress import progress, progress_colors
from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors
from cjm_fasthtml_daisyui.components.layout.divider import divider
from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui, border_dui
from cjm_fasthtml_daisyui.builders.colors import ColoredUtilityDaisyUI

# Tailwind imports
from cjm_fasthtml_tailwind.utilities.layout import overflow
from cjm_fasthtml_tailwind.utilities.spacing import p, m, space
from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_display, gap, items, justify, grid_display, grid_cols, flex_direction
from cjm_fasthtml_tailwind.utilities.sizing import w, h, min_w
from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, text_align, font_family, break_all, leading
from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight
from cjm_fasthtml_tailwind.utilities.borders import rounded
from cjm_fasthtml_tailwind.core.base import combine_classes

from cjm_fasthtml_sysmon.core.utils import (
    format_bytes,
    format_bandwidth,
    format_uptime,
    get_temperature_color,
    get_temperature_badge_color,
)
from cjm_fasthtml_sysmon.monitors.system import (
    get_static_system_info, 
)
from cjm_fasthtml_sysmon.components.base import (
    render_process_count,
    render_process_status,
)
from cjm_fasthtml_sysmon.components.common import (
    render_stat_card,
    render_progress_bar,
)
from cjm_fasthtml_sysmon.components.tables import (
    render_cpu_processes_table,
    render_memory_processes_table,
    render_gpu_processes_table
)

# HTML IDs
from ..core.html_ids import HtmlIds

# %% ../../nbs/components/cards.ipynb 5
def get_cpu_text_color(
    percent:float  # CPU usage percentage
)-> ColoredUtilityDaisyUI:  # CSS class string for semantic color based on CPU usage
    """Get semantic color based on CPU usage percentage."""
    if percent < 20:
        return text_dui.base_content.opacity(60)  # Idle - subtle
    elif percent < 50:
        return text_dui.success  # Low usage - green
    elif percent < 80:
        return text_dui.warning  # Medium usage - yellow/orange
    else:
        return text_dui.error    # High usage - red

# %% ../../nbs/components/cards.ipynb 7
def render_cpu_cores_grid(
    cpu_percents:list  # List of CPU usage percentages for each core
)-> FT:  # A Div element containing a responsive grid of CPU core usage
    """Render CPU cores as a responsive grid with color-coded percentages."""
    return Div(
        *[Div(
            # Core number (small, more readable)
            Span(f"C{i}", cls=combine_classes(
                font_size.xs,
                text_dui.base_content.opacity(60),  # More readable (was 40%)
                font_weight.normal
            )),
            # Percentage value (prominent, colored)
            Div(f"{percent:.0f}%", cls=combine_classes(
                font_size.xs,           # Extra small on mobile
                font_size.sm.sm,        # Small on small screens+
                font_weight.semibold,
                get_cpu_text_color(percent)
            )),
            cls=combine_classes(
                flex_display,
                flex_direction.col,
                items.center,
                justify.center,
                p(2),                   # Increased padding (was 1)
                p(3).sm,                # Increased padding on small+ (was 2)
                bg_dui.base_200,
                rounded.md,
                min_w(12),              # Increased minimum width (was 10)
                min_w(14).sm,           # Increased on small+ (was 12)
                h(12),                  # Increased height (was 10)
                h(14).sm                # Increased on small+ (was 12)
            )
        ) for i, percent in enumerate(cpu_percents)],
        cls=combine_classes(
            grid_display,
            # Responsive grid columns - adjusted for container context
            grid_cols(4),       # Mobile (1 col main): 4 cores wide
            grid_cols(6).sm,    # Small (1 col main): 6 cores wide
            grid_cols(4).md,    # Medium (2 col main): 4 cores per row
            grid_cols(5).lg,    # Large (2 col main): 5 cores per row
            grid_cols(5).xl,    # XL (3 col main): 5 cores per row
            grid_cols(6)._2xl,  # 2XL (3 col main): 6 cores per row
            gap(2),             # Increased gap (was 1)
            gap(3).sm,          # Larger gap on small+
            w.full
        )
    )

# %% ../../nbs/components/cards.ipynb 10
def render_os_info_card()-> FT:  # A Div element containing the OS information card
    """Render the OS information card."""
    info = get_static_system_info()

    return Div(
        Div(
            H3("Operating System", cls=combine_classes(
                card_title,
                font_size.lg,
                font_weight.bold,
                text_dui.base_content
            )),
            cls=str(m.b(6))
        ),
        Div(
            render_stat_card("System", f"{info['os']} {info['os_release']}", info['architecture']),
            render_stat_card("Hostname", info['hostname'], f"Python {info['python_version']}"),
            render_stat_card("Boot Time", info['boot_time'], f"Uptime: {format_uptime(info['boot_time'])}"),
            render_stat_card("CPU Cores", f"{info['cpu_count']} Physical", f"{info['cpu_count_logical']} Logical"),
            cls=combine_classes(stats, stats_direction.vertical, bg_dui.base_200, rounded.lg, p(6), overflow.x.auto, w.full)  # Increased padding
        ),
        cls=combine_classes(card_body, p(6))
    )

# %% ../../nbs/components/cards.ipynb 12
def render_cpu_card(
    cpu_info:dict  # Dictionary containing CPU usage information
)-> FT:  # A Div element containing the CPU usage card
    """Render the CPU usage card."""
    return Div(
        Div(
            H3("CPU Usage", cls=combine_classes(
                card_title, 
                font_size.lg,  # Larger title
                font_weight.bold,  # Bolder
                text_dui.base_content
            )),
            Span(
                f"{cpu_info['percent']:.1f}%",
                cls=combine_classes(
                    badge,
                    badge_colors.primary if cpu_info['percent'] < 80 else badge_colors.error,
                    badge_sizes.xl  # Larger badge (was lg)
                )
            ),
            cls=combine_classes(flex_display, justify.between, items.center, m.b(6))  # Increased margin
        ),

        # Overall CPU usage
        Div(
            render_progress_bar(cpu_info['percent'], label="Overall Usage"),
            cls=str(m.b(6))  # Increased margin (was m.b(4))
        ),

        # CPU Frequency
        Div(
            P("CPU Frequency", cls=combine_classes(
                font_size.sm, 
                font_weight.semibold,  # More prominent (was medium)
                m.b(3)  # Increased margin (was m.b(2))
            )),
            Div(
                Span(f"Current: {cpu_info['frequency_current']:.0f} MHz",
                     cls=combine_classes(text_dui.primary, font_size.sm, font_weight.medium)),
                Span(f"Min: {cpu_info['frequency_min']:.0f} MHz",
                     cls=combine_classes(text_dui.base_content.opacity(70), font_size.xs)),
                Span(f"Max: {cpu_info['frequency_max']:.0f} MHz",
                     cls=combine_classes(text_dui.base_content.opacity(70), font_size.xs)),
                cls=combine_classes(flex_display, justify.between, gap(2))
            ),
            cls=str(m.b(6))  # Increased margin (was m.b(4))
        ),

        # Per-core usage
        Div(
            P("Per Core Usage", cls=combine_classes(
                font_size.sm, 
                font_weight.semibold,  # More prominent (was medium)
                m.b(3)  # Increased margin (was m.b(2))
            )),
            render_cpu_cores_grid(cpu_info['percent_per_core']),
            cls=str(m.t(6))  # Increased margin (was m.t(4))
        ) if cpu_info['percent_per_core'] else None,

        cls=combine_classes(card_body, p(6)),  # Increased padding
        id=HtmlIds.CPU_CARD_BODY
    )

# %% ../../nbs/components/cards.ipynb 14
def render_memory_card(
    mem_info:dict  # Dictionary containing memory usage information
)-> FT:  # A Div element containing the memory usage card
    """Render the memory usage card."""
    return Div(
        Div(
            H3("Memory Usage", cls=combine_classes(
                card_title,
                font_size.lg,
                font_weight.bold,
                text_dui.base_content
            )),
            Span(
                f"{mem_info['percent']:.1f}%",
                cls=combine_classes(
                    badge,
                    badge_colors.primary if mem_info['percent'] < 80 else badge_colors.error,
                    badge_sizes.xl
                )
            ),
            cls=combine_classes(flex_display, justify.between, items.center, m.b(6))
        ),

        # RAM Usage
        Div(
            P("RAM", cls=combine_classes(font_size.sm, font_weight.semibold, m.b(3))),
            render_progress_bar(mem_info['percent'],
                              label=f"{format_bytes(mem_info['used'])} / {format_bytes(mem_info['total'])}"),
            P(f"Available: {format_bytes(mem_info['available'])}",
              cls=combine_classes(font_size.xs, text_dui.base_content.opacity(70), m.t(2))),
            cls=str(m.b(6))
        ),

        # Swap Usage
        Div(
            P("Swap", cls=combine_classes(font_size.sm, font_weight.semibold, m.b(3))),
            render_progress_bar(mem_info['swap_percent'],
                              label=f"{format_bytes(mem_info['swap_used'])} / {format_bytes(mem_info['swap_total'])}"),
            cls=str(m.t(6))
        ) if mem_info['swap_total'] > 0 else None,

        cls=combine_classes(card_body, p(6)),
        id=HtmlIds.MEMORY_CARD_BODY
    )

# %% ../../nbs/components/cards.ipynb 16
def render_disk_entries(
    disk_info:list  # List of dictionaries containing disk information
)-> FT:  # A Div element containing disk entries
    """Render just the disk entries section."""
    return Div(
        *[Div(
            Div(
                P(disk['device'], cls=combine_classes(font_size.sm, font_weight.semibold)),
                P(f"{disk['mountpoint']} ({disk['fstype']})",
                  cls=combine_classes(font_size.xs, text_dui.base_content.opacity(70))),
                cls=str(m.b(3))  # Increased margin (was 2)
            ),
            render_progress_bar(disk['percent'],
                              label=f"{format_bytes(disk['used'])} / {format_bytes(disk['total'])}"),
            P(f"Free: {format_bytes(disk['free'])}",
              cls=combine_classes(font_size.xs, text_dui.base_content.opacity(70), m.t(2))),
            cls=combine_classes(p(4), bg_dui.base_200, rounded.lg, m.b(4))  # Increased padding and margin
        ) for disk in disk_info[:5]],
        cls="",
        id=HtmlIds.DISK_ENTRIES
    )

# %% ../../nbs/components/cards.ipynb 17
def render_disk_card(
    disk_info:list  # List of dictionaries containing disk usage information
)-> FT:  # A Div element containing the disk usage card
    """Render the disk usage card using helper functions."""
    return Div(
        Div(
            H3("Disk Usage", cls=combine_classes(
                card_title,
                font_size.lg,
                font_weight.bold,
                text_dui.base_content
            )),
            cls=str(m.b(6))
        ),

        # Disk entries - render using helper
        render_disk_entries(disk_info),

        cls=combine_classes(card_body, p(6)),
        id=HtmlIds.DISK_CARD_BODY
    )

# %% ../../nbs/components/cards.ipynb 19
def render_network_interfaces(
    net_info:dict  # Dictionary containing network information
)-> FT:  # A Div element containing network interfaces
    """Render just the network interfaces section."""
    interfaces = net_info['interfaces']

    return Div(
        *[Div(
            # Interface header
            Div(
                P(interface['name'], cls=combine_classes(font_size.sm, font_weight.semibold)),
                P(', '.join(interface['ip_addresses']) if interface['ip_addresses'] else 'No IP',
                  cls=combine_classes(font_size.xs, text_dui.base_content.opacity(70))),
                cls=str(m.b(3))  # Increased margin (was 2)
            ),

            # Bandwidth meters
            Div(
                # Upload speed
                Label(
                    Label(
                        Span("↑ Upload", cls=combine_classes(font_size.xs, text_dui.base_content)),
                        Span(format_bandwidth(interface['bytes_sent_per_sec']),
                             cls=combine_classes(font_size.xs, text_dui.info, font_weight.medium)),
                        cls=combine_classes(flex_display, justify.between)
                    ),
                    Progress(
                        value=str(min(100, interface['bytes_sent_per_sec'] / 1024 / 1024 * 10)),
                        max="100",
                        cls=combine_classes(progress, progress_colors.info, w.full, h(2))  # Taller progress (was h(1))
                    ),
                    cls=str(m.b(3))  # Increased margin (was 2)
                ),

                # Download speed
                Label(
                    Label(
                        Span("↓ Download", cls=combine_classes(font_size.xs, text_dui.base_content)),
                        Span(format_bandwidth(interface['bytes_recv_per_sec']),
                             cls=combine_classes(font_size.xs, text_dui.success, font_weight.medium)),
                        cls=combine_classes(flex_display, justify.between)
                    ),
                    Progress(
                        value=str(min(100, interface['bytes_recv_per_sec'] / 1024 / 1024 * 10)),
                        max="100",
                        cls=combine_classes(progress, progress_colors.success, w.full, h(2))  # Taller progress (was h(1))
                    ),
                    cls=str(m.b(3))  # Increased margin (was 2)
                ),

                # Statistics
                Label(
                    Span(f"Total: ↑{format_bytes(interface['bytes_sent'])} ↓{format_bytes(interface['bytes_recv'])}",
                         cls=combine_classes(font_size.xs, text_dui.base_content.opacity(70))),
                    cls=str(m.t(2))
                ),
            ),

            cls=combine_classes(p(4), bg_dui.base_200, rounded.lg, m.b(4))  # Increased padding and margin
        ) for interface in interfaces[:3]],
        cls="",
        id=HtmlIds.NETWORK_INTERFACES
    )

# %% ../../nbs/components/cards.ipynb 20
def render_network_connections(
    net_info:dict  # Dictionary containing network information
)-> FT:  # A Div element containing connection statistics
    """Render just the network connections section."""
    connections = net_info['connections']

    return Div(
        P("Connections", cls=combine_classes(font_size.sm, font_weight.medium, m.b(2))),
        Div(
            render_stat_card("Total", str(connections['total'])),
            render_stat_card("Established", str(connections['established'])),
            render_stat_card("Listening", str(connections['listen'])),
            render_stat_card("Time Wait", str(connections['time_wait'])),
            cls=combine_classes(stats, bg_dui.base_200, rounded.lg, p(2), font_size.xs, overflow.x.auto, w.full)
        ),
        cls=str(m.t(3)),
        id=HtmlIds.NETWORK_CONNECTIONS
    )

# %% ../../nbs/components/cards.ipynb 21
def render_network_card(
    net_info:dict  # Dictionary containing network interface and connection information
)-> FT:  # A Div element containing the network monitoring card
    """Render the network monitoring card using helper functions."""
    interfaces = net_info['interfaces']

    if not interfaces:
        return Div(
            Div(
                H3("Network", cls=combine_classes(
                    card_title,
                    font_size.lg,
                    font_weight.bold,
                    text_dui.base_content
                )),
                cls=str(m.b(6))
            ),
            Div(
                "No active network interfaces detected",
                cls=combine_classes(alert, alert_colors.info)
            ),
            cls=combine_classes(card_body, p(6))
        )

    return Div(
        Div(
            H3("Network", cls=combine_classes(
                card_title,
                font_size.lg,
                font_weight.bold,
                text_dui.base_content
            )),
            Span(
                f"{len(interfaces)} Active",
                cls=combine_classes(badge, badge_colors.info, badge_sizes.xl)
            ),
            cls=combine_classes(flex_display, justify.between, items.center, m.b(6))
        ),

        # Network interfaces - render using helper
        render_network_interfaces(net_info),

        # Connection statistics - render using helper
        render_network_connections(net_info),

        cls=combine_classes(card_body, p(6)),
        id=HtmlIds.NETWORK_CARD_BODY
    )

# %% ../../nbs/components/cards.ipynb 23
def render_process_card(
    proc_info:dict  # Dictionary containing process information and statistics
)-> FT:  # A Div element containing the process monitoring card
    """Render the process monitoring card."""
    return Div(
        # Header with process count
        Div(
            H3("Process Monitor", cls=combine_classes(card_title, text_dui.base_content)),
            render_process_count(proc_info['total']),
            cls=combine_classes(flex_display, justify.between, items.center, m.b(4))
        ),

        # Process status summary
        render_process_status(proc_info['status_counts']),

        # Tabs for CPU vs Memory view
        Div(
            # Tab buttons
            Div(
                Button("Top CPU",
                       cls=combine_classes(tab, tab_modifiers.active),
                       id=HtmlIds.CPU_TAB,
                       onclick=f"document.getElementById('{HtmlIds.CPU_PROCESSES}').style.display='block'; document.getElementById('{HtmlIds.MEMORY_PROCESSES}').style.display='none'; this.classList.add('tab-active'); document.getElementById('{HtmlIds.MEM_TAB}').classList.remove('tab-active')"),
                Button("Top Memory",
                       cls=str(tab),
                       id=HtmlIds.MEM_TAB,
                       onclick=f"document.getElementById('{HtmlIds.MEMORY_PROCESSES}').style.display='block'; document.getElementById('{HtmlIds.CPU_PROCESSES}').style.display='none'; this.classList.add('tab-active'); document.getElementById('{HtmlIds.CPU_TAB}').classList.remove('tab-active')"),
                role="tablist",
                cls=combine_classes(tabs, tabs_styles.box)
            ),
            cls=str(m.b(4))
        ),

        # Top CPU processes table
        Div(
            render_cpu_processes_table(proc_info['top_cpu']),
            id=HtmlIds.CPU_PROCESSES,
            style="display: block;",
            cls=combine_classes(overflow.x.auto)
        ),

        # Top Memory processes table
        Div(
            render_memory_processes_table(proc_info['top_memory']),
            id=HtmlIds.MEMORY_PROCESSES,
            style="display: none;",
            cls=combine_classes(overflow.x.auto)
        ),

        cls=str(card_body),
        id=HtmlIds.PROCESS_CARD_BODY
    )

# %% ../../nbs/components/cards.ipynb 25
def render_gpu_metrics(
    gpu_info:dict  # Dictionary containing GPU information
)-> FT:  # A Div element containing GPU metrics section
    """Render just the GPU metrics section (utilization, memory, temp, power)."""
    if not gpu_info['available']:
        return None

    return Div(
        *[Div(
            P(details['name'], cls=combine_classes(font_size.sm, font_weight.medium, m.b(2))),

            # Main metrics in grid
            Div(
                # GPU Utilization
                Label(
                    P("GPU Utilization", cls=combine_classes(font_size.xs, text_dui.base_content)),
                    render_progress_bar(details['utilization']),
                    cls=str(m.b(3))
                ),

                # GPU Memory
                Label(
                    P("Memory", cls=combine_classes(font_size.xs, text_dui.base_content)),
                    render_progress_bar(
                        (details['memory_used'] / details['memory_total']) * 100 if details['memory_total'] > 0 else 0,
                        label=f"{details['memory_used']} MB / {details['memory_total']} MB"
                    ),
                    cls=str(m.b(3))
                ),

                # Temperature (if available)
                Label(
                    P("Temperature", cls=combine_classes(font_size.xs, text_dui.base_content)),
                    Label(
                        Span(
                            f"{details.get('temperature', 'N/A')}°C" if details.get('temperature') else "N/A",
                            cls=combine_classes(
                                font_weight.medium,
                                get_temperature_color(details.get('temperature', 0), 80, 90) if details.get('temperature') else text_dui.base_content
                            )
                        ),
                        cls=str(m.t(1))
                    ),
                    cls=str(m.b(3))
                ) if details.get('temperature') is not None else None,

                # Power Usage (if available)
                Label(
                    P("Power", cls=combine_classes(font_size.xs, text_dui.base_content)),
                    Label(
                        Span(
                            f"{details.get('power_usage', 0):.1f}W / {details.get('power_limit', 0):.1f}W"
                            if details.get('power_usage') is not None else "N/A",
                            cls=combine_classes(font_size.sm, text_dui.base_content)
                        ),
                        render_progress_bar(
                            (details.get('power_usage', 0) / details.get('power_limit', 1)) * 100
                            if details.get('power_limit') and details.get('power_limit') > 0 else 0,
                            label=None
                        ) if details.get('power_usage') is not None and details.get('power_limit') else None,
                        cls=""
                    ),
                    cls=str(m.b(3))
                ) if details.get('power_usage') is not None else None,

                # Additional metrics in a row
                Label(
                    # Fan Speed
                    Span(
                        f"Fan: {details.get('fan_speed', 'N/A')}%" if details.get('fan_speed') is not None else "",
                        cls=combine_classes(font_size.xs, text_dui.base_content)
                    ) if details.get('fan_speed') is not None else None,

                    # Encoder/Decoder utilization
                    Span(
                        f"Enc: {details.get('encoder_utilization', 0)}%",
                        cls=combine_classes(font_size.xs, text_dui.base_content, m.l(3))
                    ) if details.get('encoder_utilization') is not None else None,

                    Span(
                        f"Dec: {details.get('decoder_utilization', 0)}%",
                        cls=combine_classes(font_size.xs, text_dui.base_content, m.l(3))
                    ) if details.get('decoder_utilization') is not None else None,

                    # Process count
                    Span(
                        f"Processes: {details.get('compute_processes', 0)}",
                        cls=combine_classes(font_size.xs, text_dui.base_content, m.l(3))
                    ) if details.get('compute_processes') is not None else None,

                    cls=combine_classes(flex_display, items.center)
                ) if any([details.get('fan_speed'), details.get('encoder_utilization'),
                         details.get('decoder_utilization'), details.get('compute_processes')]) else None,

                cls=""
            ),

            cls=combine_classes(p(3), bg_dui.base_200, rounded.lg, m.b(3))
        ) for gpu_id, details in gpu_info['details'].items()],
        cls="",
        id=HtmlIds.GPU_METRICS
    )

# %% ../../nbs/components/cards.ipynb 26
# The scroll preservation script
scroll_preserve_script = Script(f"""
document.body.addEventListener('htmx:beforeSwap', function(evt) {{
    const container = document.getElementById('{HtmlIds.GPU_PROCESSES_TABLE}');
    if (container && evt.detail.target.id === '{HtmlIds.GPU_PROCESSES_TABLE}') {{
        container.dataset.scrollLeft = container.scrollLeft;
        container.dataset.scrollTop = container.scrollTop;
    }}
}});

document.body.addEventListener('htmx:afterSwap', function(evt) {{
    const container = document.getElementById('{HtmlIds.GPU_PROCESSES_TABLE}');
    if (container && container.dataset.scrollLeft) {{
        container.scrollLeft = parseInt(container.dataset.scrollLeft);
        container.scrollTop = parseInt(container.dataset.scrollTop);
    }}
}});
""")

# %% ../../nbs/components/cards.ipynb 27
def render_gpu_processes_section(
    gpu_info:dict  # Dictionary containing GPU information
)-> FT:  # A Div element containing GPU processes section
    """Render just the GPU processes section."""
    if not gpu_info['available'] or gpu_info.get('processes') is None:
        return None
    
    return Div(
        Div(cls=combine_classes(divider, m.y(3))),
        P("GPU Processes", cls=combine_classes(font_size.sm, font_weight.semibold, m.b(3), text_dui.base_content)),

        # Process table - now uses the extracted table function
        render_gpu_processes_table(gpu_info.get('processes', [])),
        # scroll_preserve_script,
        cls="",
        id=HtmlIds.GPU_PROCESSES_SECTION
    )

# %% ../../nbs/components/cards.ipynb 28
def render_gpu_card(
    gpu_info:dict  # Dictionary containing GPU information and statistics
)-> FT:  # A Div element containing the GPU information card
    """Render the GPU information card using helper functions."""
    if not gpu_info['available']:
        return Div(
            Div(
                H3("GPU Information", cls=combine_classes(card_title, text_dui.base_content)),
                cls=str(m.b(4))
            ),
            Div(
                "No GPU detected or GPU monitoring not available",
                cls=combine_classes(alert, alert_colors.info)
            ),
            cls=str(card_body)
        )

    return Div(
        Div(
            H3("GPU Information", cls=combine_classes(card_title, text_dui.base_content)),
            Span(
                gpu_info['type'],
                cls=combine_classes(badge, badge_colors.success, badge_sizes.lg)
            ),
            cls=combine_classes(flex_display, justify.between, items.center, m.b(4))
        ),

        # GPU Metrics Section - render using helper
        render_gpu_metrics(gpu_info),

        # GPU Processes Section - render using helper
        render_gpu_processes_section(gpu_info),

        cls=str(card_body),
        id=HtmlIds.GPU_CARD_BODY
    )

# %% ../../nbs/components/cards.ipynb 30
def render_temperature_sensors(
    temp_info:list  # List of dictionaries containing temperature information
)-> FT:  # A Div element containing temperature sensors
    """Render just the temperature sensors section."""
    # Group temperatures by type
    grouped_temps = {}
    for temp in temp_info:
        temp_type = temp['type']
        if temp_type not in grouped_temps:
            grouped_temps[temp_type] = []
        grouped_temps[temp_type].append(temp)

    return Div(
        *[Div(
            # Sensor type header
            P(temp_type.replace('_', ' ').title(),
              cls=combine_classes(font_size.sm, font_weight.semibold, m.b(2), text_dui.base_content)),

            # Individual sensors
            Div(
                *[Div(
                    Label(
                        Span(sensor['label'], cls=combine_classes(font_size.xs, text_dui.base_content)),
                        Label(
                            Span(
                                f"{sensor['current']:.1f}°C",
                                cls=combine_classes(
                                    font_weight.medium,
                                    get_temperature_color(
                                        sensor['current'],
                                        sensor['high'] or 85,
                                        sensor['critical'] or 95
                                    )
                                )
                            ),
                            cls=combine_classes(flex_display, items.center)
                        ),
                        cls=combine_classes(flex_display, justify.between, items.center)
                    ),
                    cls=combine_classes(p(2), bg_dui.base_200, rounded.md, m.b(2))
                ) for sensor in sensors],
                cls=""
            ),
            cls=str(m.b(3))
        ) for temp_type, sensors in grouped_temps.items()],
        cls="",
        id=HtmlIds.TEMPERATURE_SENSORS
    )

# %% ../../nbs/components/cards.ipynb 31
def render_temperature_card(
    temp_info:list  # List of dictionaries containing temperature sensor information
)-> FT:  # A Div element containing the temperature sensors card
    """Render the temperature sensors card using helper functions."""
    if not temp_info:
        return Div(
            Div(
                H3("Temperature Sensors", cls=combine_classes(card_title, text_dui.base_content)),
                cls=str(m.b(4))
            ),
            Div(
                "No temperature sensors detected",
                cls=combine_classes(alert, alert_colors.info)
            ),
            cls=str(card_body)
        )

    # Find the highest temperature for the header badge
    max_temp = max((t['current'] for t in temp_info), default=0)

    return Div(
        Div(
            H3("Temperature Sensors", cls=combine_classes(card_title, text_dui.base_content)),
            Span(
                f"{max_temp:.1f}°C",
                cls=combine_classes(
                    badge,
                    get_temperature_badge_color(max_temp),
                    badge_sizes.lg
                )
            ),
            cls=combine_classes(flex_display, justify.between, items.center, m.b(4))
        ),

        # Temperature sensors - render using helper
        render_temperature_sensors(temp_info),

        cls=str(card_body),
        id=HtmlIds.TEMPERATURE_CARD_BODY
    )
