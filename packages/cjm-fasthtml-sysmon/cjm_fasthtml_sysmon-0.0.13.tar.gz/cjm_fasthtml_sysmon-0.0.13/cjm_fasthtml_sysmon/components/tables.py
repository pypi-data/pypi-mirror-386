"""Table components for displaying top CPU, memory, and GPU process information."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/tables.ipynb.

# %% auto 0
__all__ = ['render_cpu_processes_table', 'render_memory_processes_table', 'render_gpu_processes_table_body',
           'render_gpu_processes_table']

# %% ../../nbs/components/tables.ipynb 3
from fasthtml.common import *
from fasthtml.common import FT

# DaisyUI imports
from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors, badge_sizes
from cjm_fasthtml_daisyui.components.data_display.table import table, table_modifiers, table_sizes
from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui

# Tailwind imports
from cjm_fasthtml_tailwind.utilities.layout import overflow
from cjm_fasthtml_tailwind.utilities.spacing import p
from cjm_fasthtml_tailwind.utilities.sizing import w
from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, text_align
from cjm_fasthtml_tailwind.utilities.borders import rounded
from cjm_fasthtml_tailwind.core.base import combine_classes

# HTML IDs
from ..core.html_ids import HtmlIds

# %% ../../nbs/components/tables.ipynb 5
def render_cpu_processes_table(
    top_cpu:list  # List of dictionaries containing top CPU-consuming process information
)-> FT:  # A Div element containing the CPU processes table
    """Render the CPU processes table."""
    return Div(
        Table(
            Thead(
                Tr(
                    Th("PID", cls=combine_classes(font_size.xs, w(16))),
                    Th("Name", cls=str(font_size.xs)),
                    Th("CPU %", cls=combine_classes(font_size.xs, w(20))),
                    Th("Memory", cls=combine_classes(font_size.xs, w(24))),
                    Th("User", cls=str(font_size.xs))
                )
            ),
            Tbody(
                *[Tr(
                    Td(str(proc['pid']), cls=str(font_size.xs)),
                    Td(
                        proc['name'],
                        cls=combine_classes(font_size.xs, font_weight.medium)
                    ),
                    Td(
                        Label(
                            f"{proc['cpu_percent']:.1f}%",
                            cls=combine_classes(
                                badge,
                                badge_colors.error if proc['cpu_percent'] > 50 else
                                badge_colors.warning if proc['cpu_percent'] > 25 else
                                badge_colors.info,
                                badge_sizes.sm
                            )
                        )
                    ),
                    Td(f"{proc['memory_mb']:.0f} MB", cls=str(font_size.xs)),
                    Td(proc['username'], cls=str(font_size.xs))
                ) for proc in top_cpu]
            ),
            cls=combine_classes(table, table_modifiers.zebra, table_sizes.xs, w.full)
        ),
        id=HtmlIds.CPU_PROCESSES_TABLE
    )

# %% ../../nbs/components/tables.ipynb 7
def render_memory_processes_table(
    top_memory:list  # List of dictionaries containing top memory-consuming process information
)-> FT:  # A Div element containing the memory processes table
    """Render the memory processes table."""
    return Div(
        Table(
            Thead(
                Tr(
                    Th("PID", cls=combine_classes(font_size.xs, w(16))),
                    Th("Name", cls=str(font_size.xs)),
                    Th("Memory %", cls=combine_classes(font_size.xs, w(20))),
                    Th("Memory", cls=combine_classes(font_size.xs, w(24))),
                    Th("User", cls=str(font_size.xs))
                )
            ),
            Tbody(
                *[Tr(
                    Td(str(proc['pid']), cls=str(font_size.xs)),
                    Td(
                        proc['name'],
                        cls=combine_classes(font_size.xs, font_weight.medium)
                    ),
                    Td(
                        Label(
                            f"{proc['memory_percent']:.1f}%",
                            cls=combine_classes(
                                badge,
                                badge_colors.error if proc['memory_percent'] > 50 else
                                badge_colors.warning if proc['memory_percent'] > 25 else
                                badge_colors.info,
                                badge_sizes.sm
                            )
                        )
                    ),
                    Td(f"{proc['memory_mb']:.0f} MB", cls=str(font_size.xs)),
                    Td(proc['username'], cls=str(font_size.xs))
                ) for proc in top_memory]
            ),
            cls=combine_classes(table, table_modifiers.zebra, table_sizes.xs, w.full)
        ),
        id=HtmlIds.MEMORY_PROCESSES_TABLE
    )

# %% ../../nbs/components/tables.ipynb 10
def render_gpu_processes_table_body(
    gpu_processes:list  # List of dictionaries containing GPU process information
)-> FT:  # A Div element containing the GPU processes table body
    """Render just the GPU processes table body."""
    if not gpu_processes:
        return Div(
            P("No active GPU processes", cls=combine_classes(font_size.sm, text_dui.base_content, text_align.center, p(4))),
            cls=combine_classes(bg_dui.base_200, rounded.lg),
            id=HtmlIds.GPU_PROCESSES_TABLE_BODY
        )
    
    return Tbody(
        *[Tr(
            Td(str(proc['pid']), cls=combine_classes(font_size.xs, text_dui.base_content)),
            Td(
                proc['name'],
                cls=combine_classes(font_size.xs, font_weight.medium)
            ),
            Td(
                Span(
                    f"{proc['gpu_memory_mb']} MB",
                    cls=combine_classes(
                        badge,
                        badge_colors.primary if proc['gpu_memory_mb'] < 4096 else badge_colors.warning if proc['gpu_memory_mb'] < 8192 else badge_colors.error,
                        badge_sizes.xs
                    )
                ),
                cls=""
            ),
            Td(
                f"{proc.get('gpu_utilization', 0)}%",
                cls=combine_classes(
                    font_size.xs,
                    text_dui.success if proc.get('gpu_utilization', 0) < 50 else text_dui.warning if proc.get('gpu_utilization', 0) < 80 else text_dui.error
                )
            ),
            Td(
                f"GPU {proc['device_id']}",
                cls=combine_classes(font_size.xs, text_dui.base_content)
            ),
        ) for proc in sorted(gpu_processes, key=lambda x: x['gpu_memory_mb'], reverse=True)[:10]],
        cls="",
        id=HtmlIds.GPU_PROCESSES_TABLE_BODY
    )

# %% ../../nbs/components/tables.ipynb 11
def render_gpu_processes_table(
    gpu_processes:list  # List of dictionaries containing GPU process information
)-> FT:  # A Div element containing the GPU processes table
    """Render the GPU processes table."""
    if not gpu_processes:
        return render_gpu_processes_table_body([])
    
    return Div(
        Table(
            Thead(
                Tr(
                    Th("PID", cls=combine_classes(font_size.xs, font_weight.medium, text_dui.base_content)),
                    Th("Process", cls=combine_classes(font_size.xs, font_weight.medium, text_dui.base_content)),
                    Th("GPU Memory", cls=combine_classes(font_size.xs, font_weight.medium, text_dui.base_content)),
                    Th("GPU Usage", cls=combine_classes(font_size.xs, font_weight.medium, text_dui.base_content)),
                    Th("Device", cls=combine_classes(font_size.xs, font_weight.medium, text_dui.base_content)),
                )
            ),
            # Table body - render using helper
            render_gpu_processes_table_body(gpu_processes),
            cls=combine_classes(table, table_sizes.xs, w.full)
        ),
        cls=combine_classes(overflow.x.auto, bg_dui.base_200, rounded.lg, p(2)),
        id=HtmlIds.GPU_PROCESSES_TABLE
    )
