"""Modal components for configuring system monitoring refresh intervals."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/modals.ipynb.

# %% auto 0
__all__ = ['render_settings_modal']

# %% ../../nbs/components/modals.ipynb 3
from fasthtml.common import *
from fasthtml.common import FT

# DaisyUI imports
from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors, btn_sizes, btn_styles, btn_modifiers
from cjm_fasthtml_daisyui.components.actions.modal import modal, modal_box, modal_action
from cjm_fasthtml_daisyui.components.data_input.range_slider import range_dui, range_colors
from cjm_fasthtml_daisyui.components.data_input.label import label
from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui

# Tailwind imports
from cjm_fasthtml_tailwind.utilities.spacing import m
from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_display, gap, justify
from cjm_fasthtml_tailwind.utilities.sizing import w, max_w
from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight
from cjm_fasthtml_tailwind.utilities.layout import position, right, top
from cjm_fasthtml_tailwind.core.base import combine_classes

# HTML IDs
from ..core.html_ids import HtmlIds

# %% ../../nbs/components/modals.ipynb 5
def render_settings_modal(
    refresh_intervals:dict,  # Dictionary containing refresh interval values for each component
    post_rt:str="/update_intervals" # Target route path
)-> FT:  # A Dialog element containing the settings modal
    """Render the settings modal for configuring refresh intervals."""
    return Dialog(
        Div(
            # Close button at corner
            Form(
                Button(
                    "âœ•",
                    cls=combine_classes(
                        btn,
                        btn_sizes.sm,
                        btn_modifiers.circle,
                        btn_styles.ghost,
                        position.absolute,
                        right._2,
                        top._2
                    )
                ),
                method="dialog"
            ),
            H3("Refresh Interval Settings", cls=combine_classes(font_size.lg, font_weight.bold, m.b(4))),
            P("Adjust the refresh intervals for each component (in seconds)",
              cls=combine_classes(text_dui.base_content, font_size.sm, m.b(6))),

            # Settings form
            Div(
                # CPU interval
                Div(
                    Label(
                        Span("CPU", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['cpu']}s", id=HtmlIds.CPU_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="1",
                        max="30",
                        value=str(refresh_intervals['cpu']),
                        id=HtmlIds.CPU_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.CPU_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),

                # Memory interval
                Div(
                    Label(
                        Span("Memory", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['memory']}s", id=HtmlIds.MEMORY_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="1",
                        max="30",
                        value=str(refresh_intervals['memory']),
                        id=HtmlIds.MEMORY_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.MEMORY_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),

                # Disk interval
                Div(
                    Label(
                        Span("Disk", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['disk']}s", id=HtmlIds.DISK_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="5",
                        max="60",
                        value=str(refresh_intervals['disk']),
                        id=HtmlIds.DISK_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.DISK_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),

                # Network interval
                Div(
                    Label(
                        Span("Network", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['network']}s", id=HtmlIds.NETWORK_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="1",
                        max="30",
                        value=str(refresh_intervals['network']),
                        id=HtmlIds.NETWORK_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.NETWORK_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),

                # Process interval
                Div(
                    Label(
                        Span("Processes", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['process']}s", id=HtmlIds.PROCESS_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="2",
                        max="60",
                        value=str(refresh_intervals['process']),
                        id=HtmlIds.PROCESS_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.PROCESS_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),

                # GPU interval
                Div(
                    Label(
                        Span("GPU", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['gpu']}s", id=HtmlIds.GPU_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="1",
                        max="30",
                        value=str(refresh_intervals['gpu']),
                        id=HtmlIds.GPU_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.GPU_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),

                # Temperature interval
                Div(
                    Label(
                        Span("Temperature", cls=combine_classes(font_weight.medium)),
                        Span(f"{refresh_intervals['temperature']}s", id=HtmlIds.TEMPERATURE_INTERVAL_VALUE,
                             cls=combine_classes(text_dui.primary, font_weight.medium)),
                        cls=combine_classes(label, flex_display, justify.between, m.b(2))
                    ),
                    Input(
                        type="range",
                        min="2",
                        max="60",
                        value=str(refresh_intervals['temperature']),
                        id=HtmlIds.TEMPERATURE_INTERVAL,
                        cls=combine_classes(range_dui, range_colors.primary, w.full),
                        oninput=f"document.getElementById('{HtmlIds.TEMPERATURE_INTERVAL_VALUE}').textContent = this.value + 's'"
                    ),
                    cls=str(m.b(4))
                ),
                cls=str(m.b(6))
            ),

            # Action buttons
            Div(
                Button(
                    "Apply",
                    cls=combine_classes(btn, btn_colors.primary),
                    hx_post=post_rt,
                    hx_vals=f"js:{{cpu: document.getElementById('{HtmlIds.CPU_INTERVAL}').value, memory: document.getElementById('{HtmlIds.MEMORY_INTERVAL}').value, disk: document.getElementById('{HtmlIds.DISK_INTERVAL}').value, network: document.getElementById('{HtmlIds.NETWORK_INTERVAL}').value, process: document.getElementById('{HtmlIds.PROCESS_INTERVAL}').value, gpu: document.getElementById('{HtmlIds.GPU_INTERVAL}').value, temperature: document.getElementById('{HtmlIds.TEMPERATURE_INTERVAL}').value}}",
                    hx_swap="none"
                ),
                Form(
                    Button("Cancel", cls=combine_classes(btn, btn_styles.ghost)),
                    method="dialog",
                    cls="inline"
                ),
                cls=combine_classes(modal_action, gap(2))
            ),
            cls=combine_classes(modal_box, w("11/12"), max_w._2xl)
        ),
        id=HtmlIds.SETTINGS_MODAL,
        cls=str(modal)
    )
