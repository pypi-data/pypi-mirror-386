name: Docker Image CI

on:
  pull_request:
    paths:
      - "Dockerfile*"
      - ".dockerignore"
      - "modelaudit/**"
      - "pyproject.toml"
      - "requirements*.lock"
      - ".github/workflows/docker-image-test.yml"
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  # Detect what changed to optimize Docker builds
  changes:
    name: Detect Docker Changes
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
      full-image: ${{ steps.filter.outputs.full-image }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docker:
              - 'Dockerfile*'
              - '.dockerignore'
              - 'modelaudit/**'
              - 'pyproject.toml'
              - 'requirements*.lock'
            full-image:
              - 'Dockerfile.full'

  build-test-lightweight:
    name: Build and Test Lightweight Docker Image
    needs: changes
    # Only run if Docker-related files changed
    if: needs.changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Increased for reliability
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build lightweight image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: modelaudit:lightweight
          load: true
          cache-from: type=gha,scope=lightweight
          cache-to: type=gha,mode=max,scope=lightweight
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test lightweight container help command
        run: |
          docker run --rm modelaudit:lightweight --help

      - name: Test lightweight container scan help
        run: |
          docker run --rm modelaudit:lightweight scan --help

      - name: Test lightweight container version
        run: |
          # Test that the package is properly installed
          docker run --rm modelaudit:lightweight --version

      - name: Test lightweight container with invalid command
        run: |
          # This should fail gracefully
          docker run --rm modelaudit:lightweight invalid-command && exit 1 || echo "Command properly rejected invalid input"

      - name: Test lightweight container with actual scan
        run: |
          # Create a test model file using Docker to ensure Python is available
          docker run --rm -v $(pwd):/data python:3.11-slim sh -c "python -c \"import pickle; pickle.dump({'test': 'data'}, open('/data/test.pkl', 'wb'))\""
          # Now scan the created file
          docker run --rm -v $(pwd):/data modelaudit:lightweight /data/test.pkl

  build-test-full:
    name: Build and Test Full Docker Image
    needs: [changes, build-test-lightweight]
    runs-on: ubuntu-latest
    timeout-minutes: 90 # Increased for large ML dependency builds
    # Only run if Dockerfile.full specifically changed
    if: needs.changes.outputs.full-image == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build full image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.full
          tags: modelaudit:full
          load: true
          cache-from: type=gha,scope=full
          cache-to: type=gha,mode=max,scope=full
          build-args: |
            BUILDKIT_INLINE_CACHE=1
        timeout-minutes: 60 # Increased timeout for ML dependency build

      - name: Test full container help command
        run: |
          docker run --rm modelaudit:full --help

      - name: Test full container scan help
        run: |
          docker run --rm modelaudit:full scan --help

      - name: Test full container version
        run: |
          # Test that the package is properly installed
          docker run --rm modelaudit:full --version

      - name: Verify ML dependencies in full image
        run: |
          # Test that ML dependencies are available
          docker run --rm modelaudit:full python -c "import tensorflow, torch, onnx; print('All ML dependencies available')" || echo "Warning: Some ML dependencies missing"

      - name: Test full container with ML model scan
        run: |
          # Create test models for different frameworks
          docker run --rm -v $(pwd):/data modelaudit:full python -c "import pickle; import numpy as np; pickle.dump({'weights': np.random.rand(10, 10)}, open('/data/test_numpy.pkl', 'wb')); print('Created test model')"
          # Scan the model
          docker run --rm -v $(pwd):/data modelaudit:full /data/test_numpy.pkl

  docker-ci-success:
    name: Docker CI Success
    needs: [build-test-lightweight]
    # Don't require full image test to pass since it's conditional
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check if required jobs succeeded
        run: |
          LIGHTWEIGHT_RESULT="${{ needs.build-test-lightweight.result }}"
          echo "Lightweight Docker build result: $LIGHTWEIGHT_RESULT"

          # Success or skipped are both acceptable
          # (skipped means the path filters determined the job wasn't needed)
          if [[ "$LIGHTWEIGHT_RESULT" == "success" || "$LIGHTWEIGHT_RESULT" == "skipped" ]]; then
            echo "Docker CI checks passed (or were skipped due to path filters)!"
            exit 0
          else
            echo "Docker CI checks failed!"
            exit 1
          fi
