# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

# CUSTOMIZED: Added pydantic_encoder import (not in default OpenAPI Generator template)
# pydantic_encoder is needed to address serialization issues with datetime and other non-primitive fields,
# which are not handled by the default JSON encoder.
from pydantic.json import pydantic_encoder

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from circle.web3.developer_controlled_wallets.models.risk_action import RiskAction
from circle.web3.developer_controlled_wallets.models.risk_signal import RiskSignal

class TransactionScreeningDecision(BaseModel):
    """
    Transaction decision detail about matched rule, actions to take, and all related risk signals.
    """
    rule_name: Optional[StrictStr] = Field(None, alias="ruleName", description="Name of the matched rule found in screening.")
    actions: Optional[conlist(RiskAction)] = Field(None, description="Actions to take for the decision.")
    screening_date: datetime = Field(..., alias="screeningDate", description="Date and time the resource was created, in ISO-8601 UTC format.")
    reasons: Optional[conlist(RiskSignal)] = Field(None, description="Risk signals found include source, value, and type of the signal. It also contains risk score and risk category.")
    __properties = ["ruleName", "actions", "screeningDate", "reasons"]

    def __init__(self, **kwargs):
        if "idempotencyKey" in self.__properties and not kwargs.get("idempotency_key"):
            kwargs["idempotency_key"] = "#REFILL_PLACEHOLDER"

        if "entitySecretCiphertext" in self.__properties and not kwargs.get("entity_secret_ciphertext"):
            kwargs["entity_secret_ciphertext"] = "#REFILL_PLACEHOLDER"
        super().__init__(**kwargs)


    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Return JSON string of the model (handles datetime/UUID/Decimal/Enum, etc.)"""
        # CUSTOMIZED: Added default=pydantic_encoder to handle complex types (datetime, UUID, Enum, etc.)
        # This differs from the default OpenAPI Generator template which doesn't handle these types properly
        return json.dumps(self.to_dict(), default=pydantic_encoder)

    @classmethod
    def from_json(cls, json_str: str) -> TransactionScreeningDecision:
        """Create an instance of TransactionScreeningDecision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item in self.reasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionScreeningDecision:
        """Create an instance of TransactionScreeningDecision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransactionScreeningDecision.parse_obj(obj)

        # fill idempotency_key and ciphertext with placeholder for auto_fill
        if "idempotencyKey" in cls.__properties and not obj.get("idempotencyKey"):
            obj["idempotencyKey"] = "#REFILL_PLACEHOLDER"

        if "entitySecretCiphertext" in cls.__properties and not obj.get("entitySecretCiphertext"):
            obj["entitySecretCiphertext"] = "#REFILL_PLACEHOLDER"

        _obj = TransactionScreeningDecision.parse_obj({
            "rule_name": obj.get("ruleName"),
                        "actions": obj.get("actions"),
                        "screening_date": obj.get("screeningDate"),
                        "reasons": [RiskSignal.from_dict(_item) for _item in obj.get("reasons")] if obj.get("reasons") is not None else None
            
        })
        return _obj


