import re
from typing import List, Tuple


def adjust_heading_levels(content: str, shift: int) -> str:
    """
    Shift markdown heading levels by 'shift' amount.
    Preserves code blocks, inline code, and other content.

    Args:
        content: Markdown text
        shift: Number of levels to shift (positive integer)

    Returns:
        Markdown text with adjusted headings
    """
    if shift <= 0:
        return content

    lines = content.split("\n")
    result_lines = []
    in_code_block = False
    code_block_marker = None

    for line in lines:
        # Track code block state
        if line.strip().startswith("```"):
            if not in_code_block:
                in_code_block = True
                code_block_marker = line.strip()[:3]  # Capture ``` or ```python etc
            else:
                in_code_block = False
                code_block_marker = None
            result_lines.append(line)
            continue

        # If we're in a code block, don't modify anything
        if in_code_block:
            result_lines.append(line)
            continue

        # Check if line is a heading (starts with # at beginning of line)
        heading_match = re.match(r"^(#+)\s+(.+)$", line)
        if heading_match:
            current_level = len(heading_match.group(1))
            new_level = min(current_level + shift, 6)  # Cap at H6
            new_heading = "#" * new_level + " " + heading_match.group(2)
            result_lines.append(new_heading)
        else:
            result_lines.append(line)

    return "\n".join(result_lines)


def strip_attribution_footer(content: str) -> str:
    """
    Remove the attribution footer from index content.
    Looks for the pattern: \n---\n\nGenerated by...

    Args:
        content: Markdown text that may contain attribution footer

    Returns:
        Markdown text without attribution footer
    """
    # Split on the attribution separator
    parts = content.split("\n---\n")
    if len(parts) > 1:
        # Check if the last part contains "Generated by"
        last_part = parts[-1].strip()
        if "Generated by" in last_part:
            # Return everything before the attribution
            return "\n---\n".join(parts[:-1])

    return content
