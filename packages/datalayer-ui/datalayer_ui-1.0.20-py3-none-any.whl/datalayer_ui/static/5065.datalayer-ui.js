"use strict";(self.webpackChunk_datalayer_ui=self.webpackChunk_datalayer_ui||[]).push([[5065],{65065:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var i=n(68122),s=n(59179),c=n(62863),a=n(78828),r=n(85181),o=n(79246),d=n(72490);class l{constructor(e=r.wK){this.translator=e,this._changed=new d.Signal(this),this._providerMap=new Map}add(e,t){return this._providerMap.set(e,t),this._changed.emit(),new o.DisposableDelegate(()=>{this._providerMap.delete(e),this._changed.emit()})}getProvider(e){for(const t of this._providerMap.values())if(t.isApplicable(e))return t.createNew(e,this.translator)}hasProvider(e){for(const t of this._providerMap.values())if(t.isApplicable(e))return!0;return!1}get changed(){return this._changed}}var h=n(91149),u=n(87695),g=n(69584),m=n(14809);const p="jp-mod-searchable",v="jp-mod-search-active";var f;!function(e){e.search="documentsearch:start",e.searchAndReplace="documentsearch:startWithReplace",e.findNext="documentsearch:highlightNext",e.findPrevious="documentsearch:highlightPrevious",e.end="documentsearch:end",e.toggleSearchInSelection="documentsearch:toggleSearchInSelection"}(f||(f={}));const _={id:"@jupyterlab/documentsearch-extension:labShellWidgetListener",description:"Active search on valid document",requires:[i.V,a.e],autoStart:!0,activate:(e,t,n)=>{const i=e=>{e&&(n.hasProvider(e)?e.addClass(p):e.removeClass(p))};n.changed.connect(()=>i(t.activeWidget)),t.activeChanged.connect((e,t)=>{const n=t.oldValue;n&&n.removeClass(p),i(t.newValue)})}};class S{constructor(e){this._commandRegistry=e,this._cache=this._buildCache(),this._commandRegistry.keyBindingChanged.connect(this._rebuildCache,this)}get next(){return this._cache.next}get previous(){return this._cache.previous}get toggleSearchInSelection(){return this._cache.toggleSearchInSelection}_rebuildCache(){this._cache=this._buildCache()}_buildCache(){return{next:this._commandRegistry.keyBindings.find(e=>e.command===f.findNext),previous:this._commandRegistry.keyBindings.find(e=>e.command===f.findPrevious),toggleSearchInSelection:this._commandRegistry.keyBindings.find(e=>e.command===f.toggleSearchInSelection)}}dispose(){this._commandRegistry.keyBindingChanged.disconnect(this._rebuildCache,this)}}const y={id:"@jupyterlab/documentsearch-extension:plugin",description:"Provides the document search registry.",provides:a.e,requires:[r.sQ],optional:[s.kn,g.X],autoStart:!0,activate:(e,t,n,i)=>{var s;const a=t.load("jupyterlab");let r=500,o="never";const d=new l(t),g=new Map;if(i){const t=i.load(y.id),n=e=>{r=e.get("searchDebounceTime").composite,o=e.get("autoSearchInSelection").composite};Promise.all([t,e.restored]).then(([e])=>{n(e),e.changed.connect(e=>{n(e)})}).catch(e=>{console.error(e.message)})}const p=()=>{const t=e.shell.currentWidget;return!!t&&d.hasProvider(t)},_=n=>{if(!n)return;const i=n.id;let s=g.get(i);if(!s){const c=d.getProvider(n);if(!c)return;const a=new h.F(c,r),o=new S(e.commands),l=new u.P(a,t,o);g.set(i,l),[f.findNext,f.findPrevious,f.end,f.toggleSearchInSelection].forEach(t=>{e.commands.notifyCommandChanged(t)}),l.closed.connect(()=>{n.isDisposed||(n.activate(),n.removeClass(v))}),l.disposed.connect(()=>{n.isDisposed||(n.activate(),n.removeClass(v)),g.delete(i),[f.findNext,f.findPrevious,f.end,f.toggleSearchInSelection].forEach(t=>{e.commands.notifyCommandChanged(t)})}),n.disposed.connect(()=>{l.dispose(),a.dispose(),c.dispose(),o.dispose()}),s=l}return s.isAttached||(m.x0.attach(s,n.node),n.addClass(v),n instanceof c.p&&(s.node.style.top=`${n.toolbar.node.getBoundingClientRect().height+n.contentHeader.node.getBoundingClientRect().height}px`),s.model.searchExpression&&s.model.refresh()),s};return e.commands.addCommand(f.search,{label:a.__("Find…"),isEnabled:p,execute:async t=>{const n=_(e.shell.currentWidget);if(n){const e=t.searchText;e?n.setSearchText(e):n.setSearchText(n.model.suggestedInitialQuery);const i=n.model.selectionState;let s=!1;switch(o){case"multiple-selected":s="multiple"===i;break;case"any-selected":s="multiple"===i||"single"===i}s&&await n.model.setFilter("selection",!0),n.focusSearchInput()}}}),e.commands.addCommand(f.searchAndReplace,{label:a.__("Find and Replace…"),isEnabled:p,execute:t=>{const n=_(e.shell.currentWidget);if(n){const e=t.searchText;e?n.setSearchText(e):n.setSearchText(n.model.suggestedInitialQuery);const i=t.replaceText;i&&n.setReplaceText(i),n.showReplace(),n.focusSearchInput()}}}),e.commands.addCommand(f.findNext,{label:a.__("Find Next"),isEnabled:()=>!!e.shell.currentWidget&&g.has(e.shell.currentWidget.id),execute:async()=>{var t;const n=e.shell.currentWidget;n&&await(null===(t=g.get(n.id))||void 0===t?void 0:t.model.highlightNext())}}),e.commands.addCommand(f.findPrevious,{label:a.__("Find Previous"),isEnabled:()=>!!e.shell.currentWidget&&g.has(e.shell.currentWidget.id),execute:async()=>{var t;const n=e.shell.currentWidget;n&&await(null===(t=g.get(n.id))||void 0===t?void 0:t.model.highlightPrevious())}}),e.commands.addCommand(f.end,{label:a.__("End Search"),isEnabled:()=>!!e.shell.currentWidget&&g.has(e.shell.currentWidget.id),execute:async()=>{var t;const n=e.shell.currentWidget;n&&(null===(t=g.get(n.id))||void 0===t||t.close())}}),e.commands.addCommand(f.toggleSearchInSelection,{label:a.__("Search in Selection"),isEnabled:()=>!!e.shell.currentWidget&&g.has(e.shell.currentWidget.id)&&"selection"in g.get(e.shell.currentWidget.id).model.filtersDefinition,execute:async()=>{var t;const n=e.shell.currentWidget;if(!n)return;const i=null===(t=g.get(n.id))||void 0===t?void 0:t.model;if(!i)return;const s=i.filters.selection;return i.setFilter("selection",!s)}}),null===(s=e.shell.currentChanged)||void 0===s||s.connect(()=>{Object.values(f).forEach(t=>{e.commands.notifyCommandChanged(t)})}),n&&[f.search,f.findNext,f.findPrevious,f.end,f.toggleSearchInSelection].forEach(e=>{n.addItem({command:e,category:a.__("Main Area")})}),d}},b=[y,_]},78828:(e,t,n)=>{n.d(t,{e:()=>i});const i=new(n(98238).Token)("@jupyterlab/documentsearch:ISearchProviderRegistry","A service for a registry of search\n  providers for the application. Plugins can register their UI elements with this registry\n  to provide find/replace support.")}}]);