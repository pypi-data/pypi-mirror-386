[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mayini-framework"
version = "0.2.3"
description = "A comprehensive deep learning framework built from scratch in Python with PyTorch-like API"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Abhishek Adari", email = "abhishekadari85@gmail.com"}
]
maintainers = [
    {name = "Giridhar palivela", email = "nanipalivela830@gmail.com"}
]
keywords = [
    "deep-learning",
    "neural-networks",
    "machine-learning",
    "framework",
    "pytorch-like",
    "autograd",
    "automatic-differentiation",
    "educational",
    "ai",
    "artificial-intelligence"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
    "Typing :: Typed"
]

dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "tqdm>=4.64.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ipython>=8.0.0",
    "ipdb>=0.13.0"
]
examples = [
    "matplotlib>=3.5.0,<4.0.0",
    "seaborn>=0.11.0,<1.0.0",
    "scikit-learn>=1.1.0,<2.0.0",
    "pandas>=1.4.0,<3.0.0",
    "jupyter>=1.0.0",
    "notebook>=6.4.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0"
]
all = [
    "mayini-framework[dev,examples,docs]"
]

[project.urls]
Homepage = "https://github.com/907-bot-collab/mayini"
Repository = "https://github.com/907-bot-collab/mayini"
Issues = "https://github.com/907-bot-collab/mayini/issues"
Documentation = "https://github.com/907-bot-collab/mayini#readme"
Changelog = "https://github.com/907-bot-collab/mayini/releases"

# Setuptools configuration
[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["mayini*"]
exclude = ["tests*", "example*"]

[tool.setuptools.package-data]
mayini = ["py.typed", "*.pyi"]

# Testing configuration with pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=mayini",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "numerical: marks tests with numerical computations"
]

filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/example/*",
    "setup.py",
    "*/site-packages/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
    "if __name__ == '__main__':",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
    "@(abc\\.)?abstractproperty",
    "except ImportError:",
    "pass"
]
show_missing = true
precision = 2
skip_empty = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Code formatting with Black
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | htmlcov
)/
'''

# Linting with Ruff
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["PLR2004", "S101", "ARG"]

[tool.ruff.isort]
known-first-party = ["mayini"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.mccabe]
max-complexity = 10

# Type checking with mypy
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["numpy.*", "scipy.*", "matplotlib.*", "sklearn.*"]
ignore_missing_imports = true

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
known_first_party = ["mayini"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Documentation with Sphinx (optional)
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
