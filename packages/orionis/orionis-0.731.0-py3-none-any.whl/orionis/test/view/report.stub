<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Orionis Test Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" href="https://orionis-framework.com/svg/logo.svg" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        #test-table,
        #test-table .gridjs-td,
        #test-table .gridjs-th {
            font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', 'Liberation Mono', monospace !important;
        }

        #test-table .gridjs-td,
        #test-table .gridjs-th {
            max-width: 220px;
            white-space: normal;
            overflow-wrap: anywhere;
            text-overflow: initial;
            vertical-align: middle;
            font-size: 0.85rem;
            line-height: 1.28;
        }

        #test-table .gridjs-th {
            font-size: 0.82rem !important;
            font-weight: 600;
            letter-spacing: 0.01em;
        }

        #test-table .gridjs-td.status-cell {
            max-width: 90px;
            text-align: center;
            font-weight: 600;
            letter-spacing: 0.02em;
            white-space: nowrap;
            font-size: 0.75em;
            padding-top: 0.2em;
            padding-bottom: 0.2em;
        }

        #test-table .gridjs-td.doc-cell {
            max-width: 60px;
            text-align: center;
            white-space: nowrap;
        }

        #test-table {
            overflow-x: auto;
        }

        .badge-status {
            display: inline-flex;
            align-items: center;
            gap: 0.3em;
            padding: 0.13em 0.6em;
            border-radius: 9999px;
            font-size: 0.78em;
            font-weight: 600;
            letter-spacing: 0.01em;
        }

        .badge-passed {
            background: #d1fae5;
            color: #059669;
        }

        .badge-failed {
            background: #fee2e2;
            color: #dc2626;
        }

        .badge-errors {
            background: #fef9c3;
            color: #ca8a04;
        }

        .badge-skipped {
            background: #e0e7ff;
            color: #3730a3;
        }

        .doc-btn {
            background: #eef2ff;
            color: #3730a3;
            border: none;
            border-radius: 0.5em;
            padding: 0.2em 0.8em;
            font-size: 0.92em;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.15s;
            font-family: inherit;
        }

        .doc-btn:hover {
            background: #c7d2fe;
        }

        /* Modal styles */
        .orionis-modal {
            position: fixed;
            left: 0;
            top: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(30, 41, 59, 0.45);
            display: flex !important;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        }

        .orionis-modal-content {
            background: white;
            max-width: 70vw;
            width: 70vw;
            padding: 2em 1.5em 1.2em 1.5em;
            border-radius: 1.2em;
            box-shadow: 0 8px 32px 0 rgba(31, 41, 55, 0.18);
            position: relative;
        }

        .orionis-modal-close {
            position: absolute;
            top: 0.7em;
            right: 1em;
            font-size: 1.3em;
            color: #64748b;
            background: none;
            border: none;
            cursor: pointer;
        }

        .orionis-modal-title {
            font-size: 0.98em; /* reducido de 1.08em */
            font-weight: 600;
            margin-bottom: 0.7em;
            color: #3730a3;
            display: flex;
            align-items: center;
            gap: 0.5em;
            font-family: inherit;
        }

        .orionis-modal-pre {
            white-space: pre-wrap;
            font-size: 0.92em;
            color: #334155;
            background: #f1f5f9;
            padding: 1em;
            border-radius: 0.7em;
            max-height: 320px;
            overflow: auto;
            font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', 'Liberation Mono', monospace;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 font-sans">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 py-8">

        <!-- Header -->
        <header class="bg-gradient-to-r from-blue-900 to-cyan-400 text-white rounded-2xl shadow-xl p-6 mb-10">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                <div class="flex items-center gap-4">
                    <img src="https://orionis-framework.com/svg/logo.svg" alt="Orionis Logo"
                        class="h-10 brightness-0 invert" />
                    <h1 class="text-2xl font-light tracking-wider">Orionis Testing Results Dashboard</h1>
                </div>
                <div id="timestamp" class="text-sm text-white/90"></div>
            </header>

            <!-- Execution Summary Card -->
            <div class="w-full mb-10">
                <div class="bg-white rounded-2xl shadow-lg p-6 border-t-4 border-indigo-500 flex flex-col sm:flex-row items-center justify-between gap-4">
                    <div>
                        <div class="flex items-center gap-2 text-xs font-semibold text-gray-500 uppercase">
                            <i class="bi bi-graph-up-arrow text-indigo-500 text-base"></i>
                            <span>Execution Summary</span>
                            <span class="inline-flex items-center gap-1 bg-indigo-100 text-indigo-700 px-2 py-0.5 rounded-full text-[0.7em] font-bold ml-2">
                                <i class="bi bi-lightning-charge-fill text-yellow-500"></i> {{orionis-testing-persistent}}
                            </span>
                        </div>
                        <div class="text-lg font-bold text-gray-800 mt-2" id="execution-summary-title">Select an execution</div>
                        <div class="text-sm text-gray-600 mt-1" id="execution-summary-desc">Select an execution to view the summary.</div>
                    </div>
                    <div class="flex items-center gap-4">
                        <div class="flex items-center gap-1 text-gray-700">
                            <span id="execution-time">Duration: --:--:--</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Summary Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-10">

            <div class="bg-white rounded-2xl shadow-lg p-6 border-t-4 border-green-500">
                <div class="text-xs font-semibold text-gray-500 uppercase">Passed</div>
                <div class="text-4xl font-bold text-gray-800 mt-2" id="passed">0</div>
                <div class="mt-4 bg-gray-200 rounded-full h-2">
                    <div class="bg-green-500 h-2 rounded-full" id="passed-progress" style="width: 0%"></div>
                </div>
            </div>

            <div class="bg-white rounded-2xl shadow-lg p-6 border-t-4 border-red-500">
                <div class="text-xs font-semibold text-gray-500 uppercase">Failed</div>
                <div class="text-4xl font-bold text-gray-800 mt-2" id="failed">0</div>
            </div>

            <div class="bg-white rounded-2xl shadow-lg p-6 border-t-4 border-yellow-500">
                <div class="text-xs font-semibold text-gray-500 uppercase">Errors</div>
                <div class="text-4xl font-bold text-gray-800 mt-2" id="errors">0</div>
            </div>

            <div class="bg-white rounded-2xl shadow-lg p-6 border-t-4 border-blue-500">
                <div class="text-xs font-semibold text-gray-500 uppercase">Skipped</div>
                <div class="text-4xl font-bold text-gray-800 mt-2" id="skipped">0</div>
            </div>

        </div>

        <!-- Download Buttons & Select -->
        <div class="flex flex-wrap justify-between items-center mb-10 gap-4">
            <!-- Buttons to the left -->
            <div class="flex flex-wrap gap-4">
                <button disabled id="download-json" class="flex items-center gap-2 bg-blue-300 text-white px-4 py-2 rounded shadow cursor-not-allowed opacity-60">
                    <i class="bi bi-file-earmark-code-fill text-lg"></i>
                    <span>Download JSON</span>
                </button>
            </div>
            <!-- Elegant Select to the right -->
            <div>
                <select class="appearance-none bg-white border border-gray-300 text-gray-700 py-2 px-4 pr-10 rounded-lg shadow focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition text-base font-medium" id="test-select">
                </select>
            </div>
        </div>

        <!-- Table Summary View with Grid.js -->
        <div class="bg-white rounded-xl shadow-md p-5 border border-indigo-100">
            <div class="flex items-center gap-2 mb-3">
                <i class="bi bi-table text-lg text-indigo-500"></i>
                <h2 class="text-lg font-semibold text-indigo-900">Execution Details</h2>
            </div>
            <div class="text-gray-500 mb-4 text-sm">
                See all test cases for the selected execution.<br>Click 
                <span class="inline-flex items-center gap-1 px-1.5 py-0.5 bg-blue-50 text-blue-700 rounded text-xs font-mono">
                    <i class="bi bi-journal-text"></i> View
                </span>
                to show the docstring.
            </div>
            <div id="test-table"></div>
        </div>

        <!-- Footer -->
        <footer class="mt-12 text-center text-gray-500 text-sm py-6">
            Developed with the power of
            <a href="https://orionis-framework.com/" target="_blank" rel="noopener"
                class="font-semibold text-blue-700 hover:underline">
                Orionis Framework
            </a>
            <i class="bi bi-stars text-yellow-400 align-middle ml-1"></i>
        </footer>

        <!-- Scripts -->
        <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
        <script>

            // Result Orionis Testing
            const data = {{orionis-testing-result}};

            // Live Clock (Header Timestamp)
            function updateClock() {
                const now = new Date();
                const formatted = now.toLocaleString('en-US', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false
                });
                document.getElementById("timestamp").textContent = `Current time: ${formatted}`;
            }
            updateClock();
            setInterval(updateClock, 1000);

            // Populate Dropdown in English
            let html = '<option selected disabled>Select an execution</option>';
            data.forEach((item, i) => {
                const date = new Date(item.timestamp);
                const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1)
                    .toString()
                    .padStart(2, '0')}-${date.getDate()
                    .toString()
                    .padStart(2, '0')} ${date.getHours()
                    .toString()
                    .padStart(2, '0')}:${date.getMinutes()
                    .toString()
                    .padStart(2, '0')}:${date.getSeconds()
                    .toString()
                    .padStart(2, '0')}`;
                html += `<option value="${i}">Execution ${i + 1} - ${formattedDate}</option>`;
            });
            document.getElementById("test-select").innerHTML = html;

            // Event Listener for the dropdown
            document.getElementById("test-select").addEventListener("change", function () {
                const selectedIndex = this.value;
                const selectedData = data[selectedIndex];

                // Animate Counters
                function animateValue(id, start, end, duration) {
                    const obj = document.getElementById(id);
                    let startTimestamp = null;
                    const step = (timestamp) => {
                        if (!startTimestamp) startTimestamp = timestamp;
                        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                        obj.textContent = Math.floor(progress * (end - start) + start);
                        if (progress < 1) {
                            window.requestAnimationFrame(step);
                        } else {
                            obj.textContent = end;
                        }
                    };
                    window.requestAnimationFrame(step);
                }
                animateValue("passed", Number(document.getElementById("passed").textContent), selectedData.passed, 500);
                animateValue("failed", Number(document.getElementById("failed").textContent), selectedData.failed, 500);
                animateValue("errors", Number(document.getElementById("errors").textContent), selectedData.errors, 500);
                animateValue("skipped", Number(document.getElementById("skipped").textContent), selectedData.skipped, 500);

                // Animate Progress Bar
                const passedBar = document.getElementById("passed-progress");
                passedBar.style.transition = "width 0.6s cubic-bezier(0.4,0,0.2,1)";
                const passedPercentage = (selectedData.passed / selectedData.total_tests) * 100;
                passedBar.style.width = `${passedPercentage}%`;

                // Update Execution Summary
                const date = new Date(selectedData.timestamp);
                const formattedDate = `${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;
                document.getElementById("execution-summary-title").innerHTML = `<span class="inline-flex items-center gap-2"><i class="bi bi-activity text-indigo-500"></i> Execution - <span class="font-mono">${formattedDate}</span></span>`;
                document.getElementById("execution-summary-desc").innerHTML =
                    `<span class="inline-flex gap-2 flex-wrap">
                        <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-semibold"><i class="bi bi-check-circle-fill"></i> Passed: ${selectedData.passed}</span>
                        <span class="bg-red-100 text-red-800 px-2 py-1 rounded text-xs font-semibold"><i class="bi bi-x-circle-fill"></i> Failed: ${selectedData.failed}</span>
                        <span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs font-semibold"><i class="bi bi-exclamation-triangle-fill"></i> Errors: ${selectedData.errors}</span>
                        <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-semibold"><i class="bi bi-skip-forward-fill"></i> Skipped: ${selectedData.skipped}</span>
                        <span class="bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs font-semibold"><i class="bi bi-list-ol"></i> Total: ${selectedData.total_tests}</span>
                        <span class="bg-indigo-100 text-indigo-800 px-2 py-1 rounded text-xs font-semibold"><i class="bi bi-bar-chart-fill"></i> Success: ${selectedData.success_rate.toFixed(2)}%</span>
                    </span>`;

                // Update Duration
                function formatTime(seconds) {
                    const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
                    const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
                    const s = Math.floor(seconds % 60).toString().padStart(2, '0');
                    return `${h}:${m}:${s}`;
                }
                document.getElementById("execution-time").innerHTML = `<i class="bi bi-clock-history text-indigo-500"></i> Duration: <span class="font-mono">${formatTime(selectedData.total_time)}</span>`;

                // Enable Download Button
                document.getElementById("download-json").disabled = false;
                document.getElementById("download-json").classList.remove("bg-blue-300", "cursor-not-allowed", "opacity-60");
                document.getElementById("download-json").classList.add("bg-blue-600", "hover:bg-blue-700", "cursor-pointer", "opacity-100");
            });

            // Download JSON report with execution date and time in filename
            document.getElementById("download-json").addEventListener("click", function () {
                const btn = this;
                const select = document.getElementById("test-select");
                const selectedIndex = select.value;
                if (selectedIndex === "" || selectedIndex === null || isNaN(selectedIndex)) return;

                // Disable button and show loading state
                btn.disabled = true;
                btn.classList.add("opacity-60", "cursor-not-allowed");
                btn.classList.remove("bg-blue-600", "hover:bg-blue-700", "cursor-pointer");
                const originalText = btn.innerHTML;
                btn.innerHTML = `<span class="animate-spin mr-2"><i class="bi bi-arrow-repeat"></i></span> Generating...`;

                setTimeout(() => {
                    const selectedData = data[selectedIndex];
                    const jsonString = JSON.stringify(selectedData, null, 2);
                    const date = new Date(selectedData.timestamp);
                    // Format: YYYYMMDD_HHMMSS
                    const formattedDate = `${date.getFullYear()}${(date.getMonth()+1).toString().padStart(2,'0')}${date.getDate().toString().padStart(2,'0')}_${date.getHours().toString().padStart(2,'0')}${date.getMinutes().toString().padStart(2,'0')}${date.getSeconds().toString().padStart(2,'0')}`;
                    const filename = `test_report_${formattedDate}.json`;
                    const blob = new Blob([jsonString], { type: "application/json" });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement("a");
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    // Restore button state
                    btn.disabled = false;
                    btn.classList.remove("opacity-60", "cursor-not-allowed");
                    btn.classList.add("bg-blue-600", "hover:bg-blue-700", "cursor-pointer");
                    btn.innerHTML = originalText;
                }, 600);
            });

            // Show doc string in a modal dialog (event delegation)
            function showDocString(doc) {
                // Remove any existing modal
                const oldModal = document.querySelector('.orionis-modal');
                if (oldModal) oldModal.remove();

                // Create modal element
                const modal = document.createElement('div');
                modal.className = 'orionis-modal';
                modal.style.display = 'flex'; // Ensure modal is visible

                modal.innerHTML = `
                    <div class="orionis-modal-content">
                        <button class="orionis-modal-close" aria-label="Cerrar" type="button">&times;</button>
                        <div class="orionis-modal-title">
                            <i class="bi bi-journal-text"></i> Docstring
                        </div>
                        <pre class="orionis-modal-pre">${doc ? String(doc).replace(/</g, "&lt;").replace(/>/g, "&gt;") : 'No docstring.'}</pre>
                    </div>
                `;
                // Close modal when clicking outside content
                modal.addEventListener('mousedown', function (e) {
                    if (e.target === modal) modal.remove();
                });
                // Close modal when clicking close button
                modal.querySelector('.orionis-modal-close').onclick = () => modal.remove();
                document.body.appendChild(modal);
            }

            function renderTestTable(testDetails) {
                if (window.testGrid) {
                    try { window.testGrid.destroy(); } catch (e) { }
                }
                const tableDiv = document.getElementById("test-table");
                tableDiv.innerHTML = "";

                try {
                    window.testGrid = new gridjs.Grid({
                        columns: [
                            { name: "ID", width: "22%" },
                            { name: "Class", width: "12%" },
                            { name: "Method", width: "14%" },
                            { name: "Status", width: "11%" },
                            { name: "Time (s)", width: "9%" },
                            { name: "File", width: "22%" },
                            { name: "Doc", width: "10%" }
                        ],
                        data: testDetails.map((t, idx) => [
                            gridjs.html(`<div title="${t.id}">${t.id}</div>`),
                            gridjs.html(`<div title="${t.class}">${t.class}</div>`),
                            gridjs.html(`<div title="${t.method}">${t.method}</div>`),
                            gridjs.html(`
                                <span class="badge-status ${
                                    t.status === 'PASSED' ? 'badge-passed' :
                                    t.status === 'FAILED' ? 'badge-failed' :
                                    t.status === 'ERRORS' ? 'badge-errors' : 'badge-skipped'
                                } status-cell">
                                    ${
                                        t.status === 'PASSED' ? '<i class="bi bi-check-circle-fill"></i>' :
                                        t.status === 'FAILED' ? '<i class="bi bi-x-circle-fill"></i>' :
                                        t.status === 'ERRORS' ? '<i class="bi bi-exclamation-triangle-fill"></i>' :
                                        '<i class="bi bi-skip-forward-fill"></i>'
                                    }
                                    ${t.status}
                                </span>
                            `),
                            t.execution_time,
                            gridjs.html(`<div title="${t.file_path}">${t.file_path}</div>`),
                            gridjs.html(`<button class="doc-btn doc-cell" data-doc-idx="${idx}" type="button"><i class="bi bi-journal-text"></i> Detail</button>`)
                        ]),
                        search: {
                            enabled: true,
                            placeholder: 'Buscar solo por clase...'
                        },
                        pagination: { limit: 8, summary: false },
                        sort: false,
                        resizable: true,
                        style: {
                            th: { 'text-align': 'left', 'background': '#f1f5f9', 'font-size': '1em' }
                        }
                    }).render(tableDiv);

                    // Delegated event for doc buttons (always works, even after pagination)
                    tableDiv.addEventListener('click', function (e) {
                        const btn = e.target.closest('.doc-btn');
                        if (!btn) return;
                        const idx = Number(btn.getAttribute('data-doc-idx'));
                        const t = testDetails[idx];
                        if (!t) return;

                        let html = '';
                        html += `<div class="orionis-modal-title"><i class="bi bi-journal-text"></i> Docstring</div>`;
                        html += `<pre class="orionis-modal-pre">${t.doc_string ? String(t.doc_string).replace(/</g, "&lt;").replace(/>/g, "&gt;") : 'No docstring.'}</pre>`;
                        if (t.status === 'FAILED' || t.status === 'ERRORS') {
                            html += `<div class="orionis-modal-title mt-4"><i class="bi bi-bug-fill"></i> Traceback</div>`;
                            html += `<pre class="orionis-modal-pre" style="background:#fee2e2;color:#991b1b">${t.traceback ? String(t.traceback).replace(/</g, "&lt;").replace(/>/g, "&gt;") : 'No traceback.'}</pre>`;
                        }

                        // Remove any existing modal
                        const oldModal = document.querySelector('.orionis-modal');
                        if (oldModal) oldModal.remove();

                        // Create modal element
                        const modal = document.createElement('div');
                        modal.className = 'orionis-modal';
                        modal.style.display = 'flex';

                        modal.innerHTML = `
                            <div class="orionis-modal-content">
                                <button class="orionis-modal-close" aria-label="Cerrar" type="button">&times;</button>
                                ${html}
                            </div>
                        `;

                        // Close modal when clicking outside content
                        modal.addEventListener('mousedown', function (e) {
                            if (e.target === modal) modal.remove();
                        });

                        // Close modal when clicking close button
                        modal.querySelector('.orionis-modal-close').onclick = () => modal.remove();
                        document.body.appendChild(modal);
                    });
                } catch (err) {
                    tableDiv.innerHTML = `<div class="text-red-600 font-mono text-sm py-4">Ocurrió un error al mostrar la tabla.<br>${err.message}</div>`;
                }
            }

            document.getElementById("test-select").addEventListener("change", function () {
                const selectedIndex = this.value;
                if (!data[selectedIndex]) return;
                renderTestTable(data[selectedIndex].test_details);
            });

            document.addEventListener("DOMContentLoaded", function () {
                renderTestTable([]);
            });

            // Show an elegant console message every second using setInterval
            setInterval(function () {
                console.clear();
                console.log(
                    "%c✨ Developed with the power of %cOrionis Framework%c 🚀",
                    "color:#6366f1;font-weight:bold;font-size:1.1em;",
                    "color:#0ea5e9;font-weight:bold;font-size:1.15em;text-shadow:0 1px 0 #fff;",
                    "color:#f59e42;font-size:1.1em;"
                );
            }, 1000);

        </script>
</body>

</html>