# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetIpToSgtMappingGroupResult',
    'AwaitableGetIpToSgtMappingGroupResult',
    'get_ip_to_sgt_mapping_group',
    'get_ip_to_sgt_mapping_group_output',
]

@pulumi.output_type
class GetIpToSgtMappingGroupResult:
    """
    A collection of values returned by getIpToSgtMappingGroup.
    """
    def __init__(__self__, deploy_to=None, deploy_type=None, description=None, id=None, name=None, sgt=None):
        if deploy_to and not isinstance(deploy_to, str):
            raise TypeError("Expected argument 'deploy_to' to be a str")
        pulumi.set(__self__, "deploy_to", deploy_to)
        if deploy_type and not isinstance(deploy_type, str):
            raise TypeError("Expected argument 'deploy_type' to be a str")
        pulumi.set(__self__, "deploy_type", deploy_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sgt and not isinstance(sgt, str):
            raise TypeError("Expected argument 'sgt' to be a str")
        pulumi.set(__self__, "sgt", sgt)

    @_builtins.property
    @pulumi.getter(name="deployTo")
    def deploy_to(self) -> _builtins.str:
        """
        Mandatory unless `deploy_type` is `ALL`
        """
        return pulumi.get(self, "deploy_to")

    @_builtins.property
    @pulumi.getter(name="deployType")
    def deploy_type(self) -> _builtins.str:
        """
        Deploy Type
        """
        return pulumi.get(self, "deploy_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the IP to SGT mapping Group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sgt(self) -> _builtins.str:
        """
        Trustsec Security Group ID
        """
        return pulumi.get(self, "sgt")


class AwaitableGetIpToSgtMappingGroupResult(GetIpToSgtMappingGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpToSgtMappingGroupResult(
            deploy_to=self.deploy_to,
            deploy_type=self.deploy_type,
            description=self.description,
            id=self.id,
            name=self.name,
            sgt=self.sgt)


def get_ip_to_sgt_mapping_group(id: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpToSgtMappingGroupResult:
    """
    This data source can read the TrustSec IP to SGT Mapping Group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.trustsec.get_ip_to_sgt_mapping_group(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the IP to SGT mapping Group
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ise:trustsec/getIpToSgtMappingGroup:getIpToSgtMappingGroup', __args__, opts=opts, typ=GetIpToSgtMappingGroupResult).value

    return AwaitableGetIpToSgtMappingGroupResult(
        deploy_to=pulumi.get(__ret__, 'deploy_to'),
        deploy_type=pulumi.get(__ret__, 'deploy_type'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        sgt=pulumi.get(__ret__, 'sgt'))
def get_ip_to_sgt_mapping_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpToSgtMappingGroupResult]:
    """
    This data source can read the TrustSec IP to SGT Mapping Group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.trustsec.get_ip_to_sgt_mapping_group(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the IP to SGT mapping Group
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ise:trustsec/getIpToSgtMappingGroup:getIpToSgtMappingGroup', __args__, opts=opts, typ=GetIpToSgtMappingGroupResult)
    return __ret__.apply(lambda __response__: GetIpToSgtMappingGroupResult(
        deploy_to=pulumi.get(__response__, 'deploy_to'),
        deploy_type=pulumi.get(__response__, 'deploy_type'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        sgt=pulumi.get(__response__, 'sgt')))
