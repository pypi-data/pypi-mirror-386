# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['TimeAndDateConditionArgs', 'TimeAndDateCondition']

@pulumi.input_type
class TimeAndDateConditionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 week_days_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a TimeAndDateCondition resource.
        :param pulumi.Input[_builtins.str] description: Condition description
        :param pulumi.Input[_builtins.str] end_date: End date
        :param pulumi.Input[_builtins.str] end_time: End time
        :param pulumi.Input[_builtins.str] exception_end_date: Exception end date
        :param pulumi.Input[_builtins.str] exception_end_time: Exception end time
        :param pulumi.Input[_builtins.str] exception_start_date: Exception start date
        :param pulumi.Input[_builtins.str] exception_start_time: Exception start time
        :param pulumi.Input[_builtins.bool] is_negate: Indicates whereas this condition is in negate mode
        :param pulumi.Input[_builtins.str] name: Condition name
        :param pulumi.Input[_builtins.str] start_date: Start date
        :param pulumi.Input[_builtins.str] start_time: Start time
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days: Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days_exceptions: Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if exception_end_date is not None:
            pulumi.set(__self__, "exception_end_date", exception_end_date)
        if exception_end_time is not None:
            pulumi.set(__self__, "exception_end_time", exception_end_time)
        if exception_start_date is not None:
            pulumi.set(__self__, "exception_start_date", exception_start_date)
        if exception_start_time is not None:
            pulumi.set(__self__, "exception_start_time", exception_start_time)
        if is_negate is not None:
            pulumi.set(__self__, "is_negate", is_negate)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)
        if week_days_exceptions is not None:
            pulumi.set(__self__, "week_days_exceptions", week_days_exceptions)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Condition description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        End date
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_date", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        End time
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="exceptionEndDate")
    def exception_end_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception end date
        """
        return pulumi.get(self, "exception_end_date")

    @exception_end_date.setter
    def exception_end_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_end_date", value)

    @_builtins.property
    @pulumi.getter(name="exceptionEndTime")
    def exception_end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception end time
        """
        return pulumi.get(self, "exception_end_time")

    @exception_end_time.setter
    def exception_end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_end_time", value)

    @_builtins.property
    @pulumi.getter(name="exceptionStartDate")
    def exception_start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception start date
        """
        return pulumi.get(self, "exception_start_date")

    @exception_start_date.setter
    def exception_start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_start_date", value)

    @_builtins.property
    @pulumi.getter(name="exceptionStartTime")
    def exception_start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception start time
        """
        return pulumi.get(self, "exception_start_time")

    @exception_start_time.setter
    def exception_start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_start_time", value)

    @_builtins.property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @is_negate.setter
    def is_negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_negate", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Condition name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Start date
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_date", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Start time
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        """
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_days", value)

    @_builtins.property
    @pulumi.getter(name="weekDaysExceptions")
    def week_days_exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        return pulumi.get(self, "week_days_exceptions")

    @week_days_exceptions.setter
    def week_days_exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_days_exceptions", value)


@pulumi.input_type
class _TimeAndDateConditionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 week_days_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering TimeAndDateCondition resources.
        :param pulumi.Input[_builtins.str] description: Condition description
        :param pulumi.Input[_builtins.str] end_date: End date
        :param pulumi.Input[_builtins.str] end_time: End time
        :param pulumi.Input[_builtins.str] exception_end_date: Exception end date
        :param pulumi.Input[_builtins.str] exception_end_time: Exception end time
        :param pulumi.Input[_builtins.str] exception_start_date: Exception start date
        :param pulumi.Input[_builtins.str] exception_start_time: Exception start time
        :param pulumi.Input[_builtins.bool] is_negate: Indicates whereas this condition is in negate mode
        :param pulumi.Input[_builtins.str] name: Condition name
        :param pulumi.Input[_builtins.str] start_date: Start date
        :param pulumi.Input[_builtins.str] start_time: Start time
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days: Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days_exceptions: Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if exception_end_date is not None:
            pulumi.set(__self__, "exception_end_date", exception_end_date)
        if exception_end_time is not None:
            pulumi.set(__self__, "exception_end_time", exception_end_time)
        if exception_start_date is not None:
            pulumi.set(__self__, "exception_start_date", exception_start_date)
        if exception_start_time is not None:
            pulumi.set(__self__, "exception_start_time", exception_start_time)
        if is_negate is not None:
            pulumi.set(__self__, "is_negate", is_negate)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)
        if week_days_exceptions is not None:
            pulumi.set(__self__, "week_days_exceptions", week_days_exceptions)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Condition description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        End date
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_date", value)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        End time
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_time", value)

    @_builtins.property
    @pulumi.getter(name="exceptionEndDate")
    def exception_end_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception end date
        """
        return pulumi.get(self, "exception_end_date")

    @exception_end_date.setter
    def exception_end_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_end_date", value)

    @_builtins.property
    @pulumi.getter(name="exceptionEndTime")
    def exception_end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception end time
        """
        return pulumi.get(self, "exception_end_time")

    @exception_end_time.setter
    def exception_end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_end_time", value)

    @_builtins.property
    @pulumi.getter(name="exceptionStartDate")
    def exception_start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception start date
        """
        return pulumi.get(self, "exception_start_date")

    @exception_start_date.setter
    def exception_start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_start_date", value)

    @_builtins.property
    @pulumi.getter(name="exceptionStartTime")
    def exception_start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exception start time
        """
        return pulumi.get(self, "exception_start_time")

    @exception_start_time.setter
    def exception_start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exception_start_time", value)

    @_builtins.property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @is_negate.setter
    def is_negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_negate", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Condition name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Start date
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_date", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Start time
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        """
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_days", value)

    @_builtins.property
    @pulumi.getter(name="weekDaysExceptions")
    def week_days_exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        return pulumi.get(self, "week_days_exceptions")

    @week_days_exceptions.setter
    def week_days_exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "week_days_exceptions", value)


@pulumi.type_token("ise:deviceadmin/timeAndDateCondition:TimeAndDateCondition")
class TimeAndDateCondition(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 week_days_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        This resource can manage a Device Admin Time And Date Condition.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.deviceadmin.TimeAndDateCondition("example",
            name="Cond1",
            description="My description",
            is_negate=False,
            week_days=["Monday"],
            week_days_exceptions=["Tuesday"],
            start_date="2022-05-06",
            end_date="2022-05-10",
            exception_start_date="2022-06-06",
            exception_end_date="2022-06-10",
            start_time="08:00",
            end_time="15:00",
            exception_start_time="20:00",
            exception_end_time="22:00")
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import ise:deviceadmin/timeAndDateCondition:TimeAndDateCondition example "76d24097-41c4-4558-a4d0-a8c07ac08470"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Condition description
        :param pulumi.Input[_builtins.str] end_date: End date
        :param pulumi.Input[_builtins.str] end_time: End time
        :param pulumi.Input[_builtins.str] exception_end_date: Exception end date
        :param pulumi.Input[_builtins.str] exception_end_time: Exception end time
        :param pulumi.Input[_builtins.str] exception_start_date: Exception start date
        :param pulumi.Input[_builtins.str] exception_start_time: Exception start time
        :param pulumi.Input[_builtins.bool] is_negate: Indicates whereas this condition is in negate mode
        :param pulumi.Input[_builtins.str] name: Condition name
        :param pulumi.Input[_builtins.str] start_date: Start date
        :param pulumi.Input[_builtins.str] start_time: Start time
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days: Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days_exceptions: Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TimeAndDateConditionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a Device Admin Time And Date Condition.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.deviceadmin.TimeAndDateCondition("example",
            name="Cond1",
            description="My description",
            is_negate=False,
            week_days=["Monday"],
            week_days_exceptions=["Tuesday"],
            start_date="2022-05-06",
            end_date="2022-05-10",
            exception_start_date="2022-06-06",
            exception_end_date="2022-06-10",
            start_time="08:00",
            end_time="15:00",
            exception_start_time="20:00",
            exception_end_time="22:00")
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import ise:deviceadmin/timeAndDateCondition:TimeAndDateCondition example "76d24097-41c4-4558-a4d0-a8c07ac08470"
        ```

        :param str resource_name: The name of the resource.
        :param TimeAndDateConditionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TimeAndDateConditionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 is_negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 week_days_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TimeAndDateConditionArgs.__new__(TimeAndDateConditionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["end_date"] = end_date
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["exception_end_date"] = exception_end_date
            __props__.__dict__["exception_end_time"] = exception_end_time
            __props__.__dict__["exception_start_date"] = exception_start_date
            __props__.__dict__["exception_start_time"] = exception_start_time
            __props__.__dict__["is_negate"] = is_negate
            __props__.__dict__["name"] = name
            __props__.__dict__["start_date"] = start_date
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["week_days"] = week_days
            __props__.__dict__["week_days_exceptions"] = week_days_exceptions
        super(TimeAndDateCondition, __self__).__init__(
            'ise:deviceadmin/timeAndDateCondition:TimeAndDateCondition',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            end_date: Optional[pulumi.Input[_builtins.str]] = None,
            end_time: Optional[pulumi.Input[_builtins.str]] = None,
            exception_end_date: Optional[pulumi.Input[_builtins.str]] = None,
            exception_end_time: Optional[pulumi.Input[_builtins.str]] = None,
            exception_start_date: Optional[pulumi.Input[_builtins.str]] = None,
            exception_start_time: Optional[pulumi.Input[_builtins.str]] = None,
            is_negate: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            start_date: Optional[pulumi.Input[_builtins.str]] = None,
            start_time: Optional[pulumi.Input[_builtins.str]] = None,
            week_days: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            week_days_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'TimeAndDateCondition':
        """
        Get an existing TimeAndDateCondition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Condition description
        :param pulumi.Input[_builtins.str] end_date: End date
        :param pulumi.Input[_builtins.str] end_time: End time
        :param pulumi.Input[_builtins.str] exception_end_date: Exception end date
        :param pulumi.Input[_builtins.str] exception_end_time: Exception end time
        :param pulumi.Input[_builtins.str] exception_start_date: Exception start date
        :param pulumi.Input[_builtins.str] exception_start_time: Exception start time
        :param pulumi.Input[_builtins.bool] is_negate: Indicates whereas this condition is in negate mode
        :param pulumi.Input[_builtins.str] name: Condition name
        :param pulumi.Input[_builtins.str] start_date: Start date
        :param pulumi.Input[_builtins.str] start_time: Start time
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days: Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] week_days_exceptions: Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TimeAndDateConditionState.__new__(_TimeAndDateConditionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["end_date"] = end_date
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["exception_end_date"] = exception_end_date
        __props__.__dict__["exception_end_time"] = exception_end_time
        __props__.__dict__["exception_start_date"] = exception_start_date
        __props__.__dict__["exception_start_time"] = exception_start_time
        __props__.__dict__["is_negate"] = is_negate
        __props__.__dict__["name"] = name
        __props__.__dict__["start_date"] = start_date
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["week_days"] = week_days
        __props__.__dict__["week_days_exceptions"] = week_days_exceptions
        return TimeAndDateCondition(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Condition description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        End date
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        End time
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="exceptionEndDate")
    def exception_end_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Exception end date
        """
        return pulumi.get(self, "exception_end_date")

    @_builtins.property
    @pulumi.getter(name="exceptionEndTime")
    def exception_end_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Exception end time
        """
        return pulumi.get(self, "exception_end_time")

    @_builtins.property
    @pulumi.getter(name="exceptionStartDate")
    def exception_start_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Exception start date
        """
        return pulumi.get(self, "exception_start_date")

    @_builtins.property
    @pulumi.getter(name="exceptionStartTime")
    def exception_start_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Exception start time
        """
        return pulumi.get(self, "exception_start_time")

    @_builtins.property
    @pulumi.getter(name="isNegate")
    def is_negate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whereas this condition is in negate mode
        """
        return pulumi.get(self, "is_negate")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Condition name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Start date
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Start time
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days.
        """
        return pulumi.get(self, "week_days")

    @_builtins.property
    @pulumi.getter(name="weekDaysExceptions")
    def week_days_exceptions(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`.
        """
        return pulumi.get(self, "week_days_exceptions")

