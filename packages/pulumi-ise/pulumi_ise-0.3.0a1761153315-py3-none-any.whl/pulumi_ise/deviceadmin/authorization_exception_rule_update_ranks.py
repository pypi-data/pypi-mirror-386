# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthorizationExceptionRuleUpdateRanksArgs', 'AuthorizationExceptionRuleUpdateRanks']

@pulumi.input_type
class AuthorizationExceptionRuleUpdateRanksArgs:
    def __init__(__self__, *,
                 policy_set_id: pulumi.Input[_builtins.str],
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationExceptionRuleUpdateRanksRuleArgs']]]] = None):
        """
        The set of arguments for constructing a AuthorizationExceptionRuleUpdateRanks resource.
        :param pulumi.Input[_builtins.str] policy_set_id: Policy set ID
        """
        pulumi.set(__self__, "policy_set_id", policy_set_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> pulumi.Input[_builtins.str]:
        """
        Policy set ID
        """
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_set_id", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationExceptionRuleUpdateRanksRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationExceptionRuleUpdateRanksRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _AuthorizationExceptionRuleUpdateRanksState:
    def __init__(__self__, *,
                 policy_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationExceptionRuleUpdateRanksRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering AuthorizationExceptionRuleUpdateRanks resources.
        :param pulumi.Input[_builtins.str] policy_set_id: Policy set ID
        """
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy set ID
        """
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_set_id", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationExceptionRuleUpdateRanksRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationExceptionRuleUpdateRanksRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.type_token("ise:deviceadmin/authorizationExceptionRuleUpdateRanks:AuthorizationExceptionRuleUpdateRanks")
class AuthorizationExceptionRuleUpdateRanks(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AuthorizationExceptionRuleUpdateRanksRuleArgs', 'AuthorizationExceptionRuleUpdateRanksRuleArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource is used to bulk update rank field in device admin Authorization exception rule. It serves as a workaround for the ISE API/Backend limitation which restricts rank assignments to a strictly incremental sequence. By utilizing this resource and device_admin_authorization_exception_rule resource, you can bypass the APIs limitation. Creation of this resource is performing PUT operation (Update) and it only tracks rank field. When this resource is destroyed, no action is performed on ISE and resource is just removed from state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.deviceadmin.AuthorizationExceptionRuleUpdateRanks("example",
            policy_set_id="d82952cb-b901-4b09-b363-5ebf39bdbaf9",
            rules=[{
                "id": "3741aca3-db08-4899-af73-2e3f65ec31e1",
                "rank": 0,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] policy_set_id: Policy set ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthorizationExceptionRuleUpdateRanksArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource is used to bulk update rank field in device admin Authorization exception rule. It serves as a workaround for the ISE API/Backend limitation which restricts rank assignments to a strictly incremental sequence. By utilizing this resource and device_admin_authorization_exception_rule resource, you can bypass the APIs limitation. Creation of this resource is performing PUT operation (Update) and it only tracks rank field. When this resource is destroyed, no action is performed on ISE and resource is just removed from state.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.deviceadmin.AuthorizationExceptionRuleUpdateRanks("example",
            policy_set_id="d82952cb-b901-4b09-b363-5ebf39bdbaf9",
            rules=[{
                "id": "3741aca3-db08-4899-af73-2e3f65ec31e1",
                "rank": 0,
            }])
        ```

        :param str resource_name: The name of the resource.
        :param AuthorizationExceptionRuleUpdateRanksArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthorizationExceptionRuleUpdateRanksArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_set_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AuthorizationExceptionRuleUpdateRanksRuleArgs', 'AuthorizationExceptionRuleUpdateRanksRuleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthorizationExceptionRuleUpdateRanksArgs.__new__(AuthorizationExceptionRuleUpdateRanksArgs)

            if policy_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_set_id'")
            __props__.__dict__["policy_set_id"] = policy_set_id
            __props__.__dict__["rules"] = rules
        super(AuthorizationExceptionRuleUpdateRanks, __self__).__init__(
            'ise:deviceadmin/authorizationExceptionRuleUpdateRanks:AuthorizationExceptionRuleUpdateRanks',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy_set_id: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AuthorizationExceptionRuleUpdateRanksRuleArgs', 'AuthorizationExceptionRuleUpdateRanksRuleArgsDict']]]]] = None) -> 'AuthorizationExceptionRuleUpdateRanks':
        """
        Get an existing AuthorizationExceptionRuleUpdateRanks resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] policy_set_id: Policy set ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthorizationExceptionRuleUpdateRanksState.__new__(_AuthorizationExceptionRuleUpdateRanksState)

        __props__.__dict__["policy_set_id"] = policy_set_id
        __props__.__dict__["rules"] = rules
        return AuthorizationExceptionRuleUpdateRanks(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> pulumi.Output[_builtins.str]:
        """
        Policy set ID
        """
        return pulumi.get(self, "policy_set_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.AuthorizationExceptionRuleUpdateRanksRule']]]:
        return pulumi.get(self, "rules")

