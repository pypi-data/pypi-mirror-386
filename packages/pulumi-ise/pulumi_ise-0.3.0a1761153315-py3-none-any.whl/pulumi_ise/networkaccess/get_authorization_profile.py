# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAuthorizationProfileResult',
    'AwaitableGetAuthorizationProfileResult',
    'get_authorization_profile',
    'get_authorization_profile_output',
]

@pulumi.output_type
class GetAuthorizationProfileResult:
    """
    A collection of values returned by getAuthorizationProfile.
    """
    def __init__(__self__, access_type=None, acl=None, advanced_attributes=None, agentless_posture=None, airespace_acl=None, airespace_ipv6_acl=None, asa_vpn=None, auto_smart_port=None, avc_profile=None, dacl_name=None, description=None, easywired_session_candidate=None, id=None, interface_template=None, ipv6_acl_filter=None, ipv6_dacl_name=None, mac_sec_policy=None, name=None, neat=None, profile_name=None, reauthentication_connectivity=None, reauthentication_timer=None, service_template=None, track_movement=None, unique_identifier=None, vlan_name_id=None, vlan_tag_id=None, voice_domain_permission=None, web_auth=None, web_redirection_acl=None, web_redirection_display_certificates_renewal_messages=None, web_redirection_portal_name=None, web_redirection_static_ip_host_name_fqdn=None, web_redirection_type=None):
        if access_type and not isinstance(access_type, str):
            raise TypeError("Expected argument 'access_type' to be a str")
        pulumi.set(__self__, "access_type", access_type)
        if acl and not isinstance(acl, str):
            raise TypeError("Expected argument 'acl' to be a str")
        pulumi.set(__self__, "acl", acl)
        if advanced_attributes and not isinstance(advanced_attributes, list):
            raise TypeError("Expected argument 'advanced_attributes' to be a list")
        pulumi.set(__self__, "advanced_attributes", advanced_attributes)
        if agentless_posture and not isinstance(agentless_posture, bool):
            raise TypeError("Expected argument 'agentless_posture' to be a bool")
        pulumi.set(__self__, "agentless_posture", agentless_posture)
        if airespace_acl and not isinstance(airespace_acl, str):
            raise TypeError("Expected argument 'airespace_acl' to be a str")
        pulumi.set(__self__, "airespace_acl", airespace_acl)
        if airespace_ipv6_acl and not isinstance(airespace_ipv6_acl, str):
            raise TypeError("Expected argument 'airespace_ipv6_acl' to be a str")
        pulumi.set(__self__, "airespace_ipv6_acl", airespace_ipv6_acl)
        if asa_vpn and not isinstance(asa_vpn, str):
            raise TypeError("Expected argument 'asa_vpn' to be a str")
        pulumi.set(__self__, "asa_vpn", asa_vpn)
        if auto_smart_port and not isinstance(auto_smart_port, str):
            raise TypeError("Expected argument 'auto_smart_port' to be a str")
        pulumi.set(__self__, "auto_smart_port", auto_smart_port)
        if avc_profile and not isinstance(avc_profile, str):
            raise TypeError("Expected argument 'avc_profile' to be a str")
        pulumi.set(__self__, "avc_profile", avc_profile)
        if dacl_name and not isinstance(dacl_name, str):
            raise TypeError("Expected argument 'dacl_name' to be a str")
        pulumi.set(__self__, "dacl_name", dacl_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if easywired_session_candidate and not isinstance(easywired_session_candidate, bool):
            raise TypeError("Expected argument 'easywired_session_candidate' to be a bool")
        pulumi.set(__self__, "easywired_session_candidate", easywired_session_candidate)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_template and not isinstance(interface_template, str):
            raise TypeError("Expected argument 'interface_template' to be a str")
        pulumi.set(__self__, "interface_template", interface_template)
        if ipv6_acl_filter and not isinstance(ipv6_acl_filter, str):
            raise TypeError("Expected argument 'ipv6_acl_filter' to be a str")
        pulumi.set(__self__, "ipv6_acl_filter", ipv6_acl_filter)
        if ipv6_dacl_name and not isinstance(ipv6_dacl_name, str):
            raise TypeError("Expected argument 'ipv6_dacl_name' to be a str")
        pulumi.set(__self__, "ipv6_dacl_name", ipv6_dacl_name)
        if mac_sec_policy and not isinstance(mac_sec_policy, str):
            raise TypeError("Expected argument 'mac_sec_policy' to be a str")
        pulumi.set(__self__, "mac_sec_policy", mac_sec_policy)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if neat and not isinstance(neat, bool):
            raise TypeError("Expected argument 'neat' to be a bool")
        pulumi.set(__self__, "neat", neat)
        if profile_name and not isinstance(profile_name, str):
            raise TypeError("Expected argument 'profile_name' to be a str")
        pulumi.set(__self__, "profile_name", profile_name)
        if reauthentication_connectivity and not isinstance(reauthentication_connectivity, str):
            raise TypeError("Expected argument 'reauthentication_connectivity' to be a str")
        pulumi.set(__self__, "reauthentication_connectivity", reauthentication_connectivity)
        if reauthentication_timer and not isinstance(reauthentication_timer, int):
            raise TypeError("Expected argument 'reauthentication_timer' to be a int")
        pulumi.set(__self__, "reauthentication_timer", reauthentication_timer)
        if service_template and not isinstance(service_template, bool):
            raise TypeError("Expected argument 'service_template' to be a bool")
        pulumi.set(__self__, "service_template", service_template)
        if track_movement and not isinstance(track_movement, bool):
            raise TypeError("Expected argument 'track_movement' to be a bool")
        pulumi.set(__self__, "track_movement", track_movement)
        if unique_identifier and not isinstance(unique_identifier, str):
            raise TypeError("Expected argument 'unique_identifier' to be a str")
        pulumi.set(__self__, "unique_identifier", unique_identifier)
        if vlan_name_id and not isinstance(vlan_name_id, str):
            raise TypeError("Expected argument 'vlan_name_id' to be a str")
        pulumi.set(__self__, "vlan_name_id", vlan_name_id)
        if vlan_tag_id and not isinstance(vlan_tag_id, int):
            raise TypeError("Expected argument 'vlan_tag_id' to be a int")
        pulumi.set(__self__, "vlan_tag_id", vlan_tag_id)
        if voice_domain_permission and not isinstance(voice_domain_permission, bool):
            raise TypeError("Expected argument 'voice_domain_permission' to be a bool")
        pulumi.set(__self__, "voice_domain_permission", voice_domain_permission)
        if web_auth and not isinstance(web_auth, bool):
            raise TypeError("Expected argument 'web_auth' to be a bool")
        pulumi.set(__self__, "web_auth", web_auth)
        if web_redirection_acl and not isinstance(web_redirection_acl, str):
            raise TypeError("Expected argument 'web_redirection_acl' to be a str")
        pulumi.set(__self__, "web_redirection_acl", web_redirection_acl)
        if web_redirection_display_certificates_renewal_messages and not isinstance(web_redirection_display_certificates_renewal_messages, bool):
            raise TypeError("Expected argument 'web_redirection_display_certificates_renewal_messages' to be a bool")
        pulumi.set(__self__, "web_redirection_display_certificates_renewal_messages", web_redirection_display_certificates_renewal_messages)
        if web_redirection_portal_name and not isinstance(web_redirection_portal_name, str):
            raise TypeError("Expected argument 'web_redirection_portal_name' to be a str")
        pulumi.set(__self__, "web_redirection_portal_name", web_redirection_portal_name)
        if web_redirection_static_ip_host_name_fqdn and not isinstance(web_redirection_static_ip_host_name_fqdn, str):
            raise TypeError("Expected argument 'web_redirection_static_ip_host_name_fqdn' to be a str")
        pulumi.set(__self__, "web_redirection_static_ip_host_name_fqdn", web_redirection_static_ip_host_name_fqdn)
        if web_redirection_type and not isinstance(web_redirection_type, str):
            raise TypeError("Expected argument 'web_redirection_type' to be a str")
        pulumi.set(__self__, "web_redirection_type", web_redirection_type)

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> _builtins.str:
        """
        Access type
        """
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter
    def acl(self) -> _builtins.str:
        """
        ACL
        """
        return pulumi.get(self, "acl")

    @_builtins.property
    @pulumi.getter(name="advancedAttributes")
    def advanced_attributes(self) -> Sequence['outputs.GetAuthorizationProfileAdvancedAttributeResult']:
        """
        List of advanced attributes
        """
        return pulumi.get(self, "advanced_attributes")

    @_builtins.property
    @pulumi.getter(name="agentlessPosture")
    def agentless_posture(self) -> _builtins.bool:
        """
        Agentless Posture.
        """
        return pulumi.get(self, "agentless_posture")

    @_builtins.property
    @pulumi.getter(name="airespaceAcl")
    def airespace_acl(self) -> _builtins.str:
        """
        Airespace ACL
        """
        return pulumi.get(self, "airespace_acl")

    @_builtins.property
    @pulumi.getter(name="airespaceIpv6Acl")
    def airespace_ipv6_acl(self) -> _builtins.str:
        """
        Airespace IPv6 ACL
        """
        return pulumi.get(self, "airespace_ipv6_acl")

    @_builtins.property
    @pulumi.getter(name="asaVpn")
    def asa_vpn(self) -> _builtins.str:
        """
        ASA VPN
        """
        return pulumi.get(self, "asa_vpn")

    @_builtins.property
    @pulumi.getter(name="autoSmartPort")
    def auto_smart_port(self) -> _builtins.str:
        """
        Auto smart port
        """
        return pulumi.get(self, "auto_smart_port")

    @_builtins.property
    @pulumi.getter(name="avcProfile")
    def avc_profile(self) -> _builtins.str:
        """
        AVC profile
        """
        return pulumi.get(self, "avc_profile")

    @_builtins.property
    @pulumi.getter(name="daclName")
    def dacl_name(self) -> _builtins.str:
        """
        DACL name
        """
        return pulumi.get(self, "dacl_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="easywiredSessionCandidate")
    def easywired_session_candidate(self) -> _builtins.bool:
        """
        Easy wired session candidate
        """
        return pulumi.get(self, "easywired_session_candidate")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceTemplate")
    def interface_template(self) -> _builtins.str:
        """
        Interface template
        """
        return pulumi.get(self, "interface_template")

    @_builtins.property
    @pulumi.getter(name="ipv6AclFilter")
    def ipv6_acl_filter(self) -> _builtins.str:
        """
        IPv6 ACL
        """
        return pulumi.get(self, "ipv6_acl_filter")

    @_builtins.property
    @pulumi.getter(name="ipv6DaclName")
    def ipv6_dacl_name(self) -> _builtins.str:
        """
        IPv6 DACL name
        """
        return pulumi.get(self, "ipv6_dacl_name")

    @_builtins.property
    @pulumi.getter(name="macSecPolicy")
    def mac_sec_policy(self) -> _builtins.str:
        """
        MacSec policy
        """
        return pulumi.get(self, "mac_sec_policy")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the authorization profile
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def neat(self) -> _builtins.bool:
        """
        NEAT
        """
        return pulumi.get(self, "neat")

    @_builtins.property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> _builtins.str:
        """
        Value needs to be an existing Network Device Profile
        """
        return pulumi.get(self, "profile_name")

    @_builtins.property
    @pulumi.getter(name="reauthenticationConnectivity")
    def reauthentication_connectivity(self) -> _builtins.str:
        """
        Maintain Connectivity During Reauthentication
        """
        return pulumi.get(self, "reauthentication_connectivity")

    @_builtins.property
    @pulumi.getter(name="reauthenticationTimer")
    def reauthentication_timer(self) -> _builtins.int:
        """
        Reauthentication timer
        """
        return pulumi.get(self, "reauthentication_timer")

    @_builtins.property
    @pulumi.getter(name="serviceTemplate")
    def service_template(self) -> _builtins.bool:
        """
        Service template
        """
        return pulumi.get(self, "service_template")

    @_builtins.property
    @pulumi.getter(name="trackMovement")
    def track_movement(self) -> _builtins.bool:
        """
        Track movement
        """
        return pulumi.get(self, "track_movement")

    @_builtins.property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> _builtins.str:
        """
        Unique identifier
        """
        return pulumi.get(self, "unique_identifier")

    @_builtins.property
    @pulumi.getter(name="vlanNameId")
    def vlan_name_id(self) -> _builtins.str:
        """
        Vlan name or ID
        """
        return pulumi.get(self, "vlan_name_id")

    @_builtins.property
    @pulumi.getter(name="vlanTagId")
    def vlan_tag_id(self) -> _builtins.int:
        """
        Vlan tag ID
        """
        return pulumi.get(self, "vlan_tag_id")

    @_builtins.property
    @pulumi.getter(name="voiceDomainPermission")
    def voice_domain_permission(self) -> _builtins.bool:
        """
        Voice domain permission
        """
        return pulumi.get(self, "voice_domain_permission")

    @_builtins.property
    @pulumi.getter(name="webAuth")
    def web_auth(self) -> _builtins.bool:
        """
        Web authentication (local)
        """
        return pulumi.get(self, "web_auth")

    @_builtins.property
    @pulumi.getter(name="webRedirectionAcl")
    def web_redirection_acl(self) -> _builtins.str:
        """
        Web redirection ACL
        """
        return pulumi.get(self, "web_redirection_acl")

    @_builtins.property
    @pulumi.getter(name="webRedirectionDisplayCertificatesRenewalMessages")
    def web_redirection_display_certificates_renewal_messages(self) -> _builtins.bool:
        """
        This attribute is mandatory when `web_redirection_type` value is `CentralizedWebAuth`. For all other `web_redirection_type` values the field must be ignored.
        """
        return pulumi.get(self, "web_redirection_display_certificates_renewal_messages")

    @_builtins.property
    @pulumi.getter(name="webRedirectionPortalName")
    def web_redirection_portal_name(self) -> _builtins.str:
        """
        A portal that exist in the DB and fits the `web_redirection_type`
        """
        return pulumi.get(self, "web_redirection_portal_name")

    @_builtins.property
    @pulumi.getter(name="webRedirectionStaticIpHostNameFqdn")
    def web_redirection_static_ip_host_name_fqdn(self) -> _builtins.str:
        """
        IP, hostname or FQDN
        """
        return pulumi.get(self, "web_redirection_static_ip_host_name_fqdn")

    @_builtins.property
    @pulumi.getter(name="webRedirectionType")
    def web_redirection_type(self) -> _builtins.str:
        """
        This type must fit the `web_redirection_portal_name`
        """
        return pulumi.get(self, "web_redirection_type")


class AwaitableGetAuthorizationProfileResult(GetAuthorizationProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationProfileResult(
            access_type=self.access_type,
            acl=self.acl,
            advanced_attributes=self.advanced_attributes,
            agentless_posture=self.agentless_posture,
            airespace_acl=self.airespace_acl,
            airespace_ipv6_acl=self.airespace_ipv6_acl,
            asa_vpn=self.asa_vpn,
            auto_smart_port=self.auto_smart_port,
            avc_profile=self.avc_profile,
            dacl_name=self.dacl_name,
            description=self.description,
            easywired_session_candidate=self.easywired_session_candidate,
            id=self.id,
            interface_template=self.interface_template,
            ipv6_acl_filter=self.ipv6_acl_filter,
            ipv6_dacl_name=self.ipv6_dacl_name,
            mac_sec_policy=self.mac_sec_policy,
            name=self.name,
            neat=self.neat,
            profile_name=self.profile_name,
            reauthentication_connectivity=self.reauthentication_connectivity,
            reauthentication_timer=self.reauthentication_timer,
            service_template=self.service_template,
            track_movement=self.track_movement,
            unique_identifier=self.unique_identifier,
            vlan_name_id=self.vlan_name_id,
            vlan_tag_id=self.vlan_tag_id,
            voice_domain_permission=self.voice_domain_permission,
            web_auth=self.web_auth,
            web_redirection_acl=self.web_redirection_acl,
            web_redirection_display_certificates_renewal_messages=self.web_redirection_display_certificates_renewal_messages,
            web_redirection_portal_name=self.web_redirection_portal_name,
            web_redirection_static_ip_host_name_fqdn=self.web_redirection_static_ip_host_name_fqdn,
            web_redirection_type=self.web_redirection_type)


def get_authorization_profile(id: Optional[_builtins.str] = None,
                              name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationProfileResult:
    """
    This data source can read an authorization profiles policy element.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.networkaccess.get_authorization_profile(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the authorization profile
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ise:networkaccess/getAuthorizationProfile:getAuthorizationProfile', __args__, opts=opts, typ=GetAuthorizationProfileResult).value

    return AwaitableGetAuthorizationProfileResult(
        access_type=pulumi.get(__ret__, 'access_type'),
        acl=pulumi.get(__ret__, 'acl'),
        advanced_attributes=pulumi.get(__ret__, 'advanced_attributes'),
        agentless_posture=pulumi.get(__ret__, 'agentless_posture'),
        airespace_acl=pulumi.get(__ret__, 'airespace_acl'),
        airespace_ipv6_acl=pulumi.get(__ret__, 'airespace_ipv6_acl'),
        asa_vpn=pulumi.get(__ret__, 'asa_vpn'),
        auto_smart_port=pulumi.get(__ret__, 'auto_smart_port'),
        avc_profile=pulumi.get(__ret__, 'avc_profile'),
        dacl_name=pulumi.get(__ret__, 'dacl_name'),
        description=pulumi.get(__ret__, 'description'),
        easywired_session_candidate=pulumi.get(__ret__, 'easywired_session_candidate'),
        id=pulumi.get(__ret__, 'id'),
        interface_template=pulumi.get(__ret__, 'interface_template'),
        ipv6_acl_filter=pulumi.get(__ret__, 'ipv6_acl_filter'),
        ipv6_dacl_name=pulumi.get(__ret__, 'ipv6_dacl_name'),
        mac_sec_policy=pulumi.get(__ret__, 'mac_sec_policy'),
        name=pulumi.get(__ret__, 'name'),
        neat=pulumi.get(__ret__, 'neat'),
        profile_name=pulumi.get(__ret__, 'profile_name'),
        reauthentication_connectivity=pulumi.get(__ret__, 'reauthentication_connectivity'),
        reauthentication_timer=pulumi.get(__ret__, 'reauthentication_timer'),
        service_template=pulumi.get(__ret__, 'service_template'),
        track_movement=pulumi.get(__ret__, 'track_movement'),
        unique_identifier=pulumi.get(__ret__, 'unique_identifier'),
        vlan_name_id=pulumi.get(__ret__, 'vlan_name_id'),
        vlan_tag_id=pulumi.get(__ret__, 'vlan_tag_id'),
        voice_domain_permission=pulumi.get(__ret__, 'voice_domain_permission'),
        web_auth=pulumi.get(__ret__, 'web_auth'),
        web_redirection_acl=pulumi.get(__ret__, 'web_redirection_acl'),
        web_redirection_display_certificates_renewal_messages=pulumi.get(__ret__, 'web_redirection_display_certificates_renewal_messages'),
        web_redirection_portal_name=pulumi.get(__ret__, 'web_redirection_portal_name'),
        web_redirection_static_ip_host_name_fqdn=pulumi.get(__ret__, 'web_redirection_static_ip_host_name_fqdn'),
        web_redirection_type=pulumi.get(__ret__, 'web_redirection_type'))
def get_authorization_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuthorizationProfileResult]:
    """
    This data source can read an authorization profiles policy element.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.networkaccess.get_authorization_profile(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the authorization profile
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ise:networkaccess/getAuthorizationProfile:getAuthorizationProfile', __args__, opts=opts, typ=GetAuthorizationProfileResult)
    return __ret__.apply(lambda __response__: GetAuthorizationProfileResult(
        access_type=pulumi.get(__response__, 'access_type'),
        acl=pulumi.get(__response__, 'acl'),
        advanced_attributes=pulumi.get(__response__, 'advanced_attributes'),
        agentless_posture=pulumi.get(__response__, 'agentless_posture'),
        airespace_acl=pulumi.get(__response__, 'airespace_acl'),
        airespace_ipv6_acl=pulumi.get(__response__, 'airespace_ipv6_acl'),
        asa_vpn=pulumi.get(__response__, 'asa_vpn'),
        auto_smart_port=pulumi.get(__response__, 'auto_smart_port'),
        avc_profile=pulumi.get(__response__, 'avc_profile'),
        dacl_name=pulumi.get(__response__, 'dacl_name'),
        description=pulumi.get(__response__, 'description'),
        easywired_session_candidate=pulumi.get(__response__, 'easywired_session_candidate'),
        id=pulumi.get(__response__, 'id'),
        interface_template=pulumi.get(__response__, 'interface_template'),
        ipv6_acl_filter=pulumi.get(__response__, 'ipv6_acl_filter'),
        ipv6_dacl_name=pulumi.get(__response__, 'ipv6_dacl_name'),
        mac_sec_policy=pulumi.get(__response__, 'mac_sec_policy'),
        name=pulumi.get(__response__, 'name'),
        neat=pulumi.get(__response__, 'neat'),
        profile_name=pulumi.get(__response__, 'profile_name'),
        reauthentication_connectivity=pulumi.get(__response__, 'reauthentication_connectivity'),
        reauthentication_timer=pulumi.get(__response__, 'reauthentication_timer'),
        service_template=pulumi.get(__response__, 'service_template'),
        track_movement=pulumi.get(__response__, 'track_movement'),
        unique_identifier=pulumi.get(__response__, 'unique_identifier'),
        vlan_name_id=pulumi.get(__response__, 'vlan_name_id'),
        vlan_tag_id=pulumi.get(__response__, 'vlan_tag_id'),
        voice_domain_permission=pulumi.get(__response__, 'voice_domain_permission'),
        web_auth=pulumi.get(__response__, 'web_auth'),
        web_redirection_acl=pulumi.get(__response__, 'web_redirection_acl'),
        web_redirection_display_certificates_renewal_messages=pulumi.get(__response__, 'web_redirection_display_certificates_renewal_messages'),
        web_redirection_portal_name=pulumi.get(__response__, 'web_redirection_portal_name'),
        web_redirection_static_ip_host_name_fqdn=pulumi.get(__response__, 'web_redirection_static_ip_host_name_fqdn'),
        web_redirection_type=pulumi.get(__response__, 'web_redirection_type')))
