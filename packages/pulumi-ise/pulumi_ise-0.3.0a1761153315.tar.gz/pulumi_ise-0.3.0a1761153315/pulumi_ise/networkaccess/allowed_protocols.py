# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AllowedProtocolsArgs', 'AllowedProtocols']

@pulumi.input_type
class AllowedProtocolsArgs:
    def __init__(__self__, *,
                 allow_chap: pulumi.Input[_builtins.bool],
                 allow_eap_fast: pulumi.Input[_builtins.bool],
                 allow_eap_md5: pulumi.Input[_builtins.bool],
                 allow_eap_tls: pulumi.Input[_builtins.bool],
                 allow_eap_ttls: pulumi.Input[_builtins.bool],
                 allow_leap: pulumi.Input[_builtins.bool],
                 allow_ms_chap_v1: pulumi.Input[_builtins.bool],
                 allow_ms_chap_v2: pulumi.Input[_builtins.bool],
                 allow_pap_ascii: pulumi.Input[_builtins.bool],
                 allow_peap: pulumi.Input[_builtins.bool],
                 allow_preferred_eap_protocol: pulumi.Input[_builtins.bool],
                 allow_teap: pulumi.Input[_builtins.bool],
                 allow_weak_ciphers_for_eap: pulumi.Input[_builtins.bool],
                 eap_tls_l_bit: pulumi.Input[_builtins.bool],
                 process_host_lookup: pulumi.Input[_builtins.bool],
                 require_message_auth: pulumi.Input[_builtins.bool],
                 allow5g: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_accept_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_enable_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_anonymous_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_authenticated_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_authorization_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_authorization_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_machine_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_machine_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_server_returns: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_tunnel_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_tunnel_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_use_proactive_pac_update_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_use_pacs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_allow_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_enable_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_session_ticket_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_ttls_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_ttls_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peap_allow_peap_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_peap_v0: Optional[pulumi.Input[_builtins.bool]] = None,
                 preferred_eap_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 require_cryptobinding: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_downgrade_msk: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_accept_client_cert_during_tunnel_est: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 teap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_request_basic_pwd_auth: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a AllowedProtocols resource.
        :param pulumi.Input[_builtins.bool] allow_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] allow_eap_fast: Allow EAP Fast
        :param pulumi.Input[_builtins.bool] allow_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] allow_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] allow_eap_ttls: Allow EAP TTLS
        :param pulumi.Input[_builtins.bool] allow_leap: Allow LEAP
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] allow_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.bool] allow_peap: Allow PEAP
        :param pulumi.Input[_builtins.bool] allow_preferred_eap_protocol: Allow preferred EAP protocol
        :param pulumi.Input[_builtins.bool] allow_teap: Allow TEAP
        :param pulumi.Input[_builtins.bool] allow_weak_ciphers_for_eap: Allow weak ciphers for EAP
        :param pulumi.Input[_builtins.bool] eap_tls_l_bit: EAP TLS L-Bit
        :param pulumi.Input[_builtins.bool] process_host_lookup: Process host lookup
        :param pulumi.Input[_builtins.bool] require_message_auth: Require message authentication
        :param pulumi.Input[_builtins.bool] allow5g: Allow 5G. This field is only supported from ISE 3.2.
        :param pulumi.Input[_builtins.str] description: Description
        :param pulumi.Input[_builtins.bool] eap_fast_accept_client_cert: Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc: Allow EAP GTC
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc_pwd_change: Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_gtc_pwd_change_retries: EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_enable_eap_chaining: Enable EAP chaining
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_anonymous_provisioning: Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_authenticated_provisioning: Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_client_cert: Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_authorization_pac_ttl: Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_authorization_pac_ttl_unit: Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_machine_pac_ttl: Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_machine_pac_ttl_unit: Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_server_returns: Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_stateless_session_resume: Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_tunnel_pac_ttl: PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_tunnel_pac_ttl_unit: PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_use_proactive_pac_update_percentage: Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.bool] eap_fast_use_pacs: Use PACs
        :param pulumi.Input[_builtins.bool] eap_tls_allow_auth_of_expired_certs: Allow authentication of expired certificates
        :param pulumi.Input[_builtins.bool] eap_tls_enable_stateless_session_resume: Enable stateless session resume
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_percentage: Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_ttl: Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_tls_session_ticket_ttl_unit: Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_ttls_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_ttls_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.str] name: The name of the allowed protocols
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc: Allow PEAP EAP GTC
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc_pwd_change: Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_gtc_pwd_change_retries: PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2: Allow PEAP EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2_pwd_change: Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls: Allow PEAP EAP TLS
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls_auth_of_expired_certs: Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] peap_peap_v0: Allow PEAP v0
        :param pulumi.Input[_builtins.str] preferred_eap_protocol: Preferred EAP protocol
                 - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        :param pulumi.Input[_builtins.bool] require_cryptobinding: Require cryptobinding
        :param pulumi.Input[_builtins.bool] teap_downgrade_msk: Allow downgrade to MSK
        :param pulumi.Input[_builtins.bool] teap_eap_accept_client_cert_during_tunnel_est: Accept client certificate during tunnel establishment
        :param pulumi.Input[_builtins.bool] teap_eap_chaining: Allow EAP chaining
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] teap_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] teap_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] teap_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] teap_request_basic_pwd_auth: Request basic password authentication
        """
        pulumi.set(__self__, "allow_chap", allow_chap)
        pulumi.set(__self__, "allow_eap_fast", allow_eap_fast)
        pulumi.set(__self__, "allow_eap_md5", allow_eap_md5)
        pulumi.set(__self__, "allow_eap_tls", allow_eap_tls)
        pulumi.set(__self__, "allow_eap_ttls", allow_eap_ttls)
        pulumi.set(__self__, "allow_leap", allow_leap)
        pulumi.set(__self__, "allow_ms_chap_v1", allow_ms_chap_v1)
        pulumi.set(__self__, "allow_ms_chap_v2", allow_ms_chap_v2)
        pulumi.set(__self__, "allow_pap_ascii", allow_pap_ascii)
        pulumi.set(__self__, "allow_peap", allow_peap)
        pulumi.set(__self__, "allow_preferred_eap_protocol", allow_preferred_eap_protocol)
        pulumi.set(__self__, "allow_teap", allow_teap)
        pulumi.set(__self__, "allow_weak_ciphers_for_eap", allow_weak_ciphers_for_eap)
        pulumi.set(__self__, "eap_tls_l_bit", eap_tls_l_bit)
        pulumi.set(__self__, "process_host_lookup", process_host_lookup)
        pulumi.set(__self__, "require_message_auth", require_message_auth)
        if allow5g is not None:
            pulumi.set(__self__, "allow5g", allow5g)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eap_fast_accept_client_cert is not None:
            pulumi.set(__self__, "eap_fast_accept_client_cert", eap_fast_accept_client_cert)
        if eap_fast_allow_machine_authentication is not None:
            pulumi.set(__self__, "eap_fast_allow_machine_authentication", eap_fast_allow_machine_authentication)
        if eap_fast_eap_gtc is not None:
            pulumi.set(__self__, "eap_fast_eap_gtc", eap_fast_eap_gtc)
        if eap_fast_eap_gtc_pwd_change is not None:
            pulumi.set(__self__, "eap_fast_eap_gtc_pwd_change", eap_fast_eap_gtc_pwd_change)
        if eap_fast_eap_gtc_pwd_change_retries is not None:
            pulumi.set(__self__, "eap_fast_eap_gtc_pwd_change_retries", eap_fast_eap_gtc_pwd_change_retries)
        if eap_fast_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "eap_fast_eap_ms_chap_v2", eap_fast_eap_ms_chap_v2)
        if eap_fast_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "eap_fast_eap_ms_chap_v2_pwd_change", eap_fast_eap_ms_chap_v2_pwd_change)
        if eap_fast_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "eap_fast_eap_ms_chap_v2_pwd_change_retries", eap_fast_eap_ms_chap_v2_pwd_change_retries)
        if eap_fast_eap_tls is not None:
            pulumi.set(__self__, "eap_fast_eap_tls", eap_fast_eap_tls)
        if eap_fast_eap_tls_auth_of_expired_certs is not None:
            pulumi.set(__self__, "eap_fast_eap_tls_auth_of_expired_certs", eap_fast_eap_tls_auth_of_expired_certs)
        if eap_fast_enable_eap_chaining is not None:
            pulumi.set(__self__, "eap_fast_enable_eap_chaining", eap_fast_enable_eap_chaining)
        if eap_fast_pacs_allow_anonymous_provisioning is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_anonymous_provisioning", eap_fast_pacs_allow_anonymous_provisioning)
        if eap_fast_pacs_allow_authenticated_provisioning is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_authenticated_provisioning", eap_fast_pacs_allow_authenticated_provisioning)
        if eap_fast_pacs_allow_client_cert is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_client_cert", eap_fast_pacs_allow_client_cert)
        if eap_fast_pacs_allow_machine_authentication is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_machine_authentication", eap_fast_pacs_allow_machine_authentication)
        if eap_fast_pacs_authorization_pac_ttl is not None:
            pulumi.set(__self__, "eap_fast_pacs_authorization_pac_ttl", eap_fast_pacs_authorization_pac_ttl)
        if eap_fast_pacs_authorization_pac_ttl_unit is not None:
            pulumi.set(__self__, "eap_fast_pacs_authorization_pac_ttl_unit", eap_fast_pacs_authorization_pac_ttl_unit)
        if eap_fast_pacs_machine_pac_ttl is not None:
            pulumi.set(__self__, "eap_fast_pacs_machine_pac_ttl", eap_fast_pacs_machine_pac_ttl)
        if eap_fast_pacs_machine_pac_ttl_unit is not None:
            pulumi.set(__self__, "eap_fast_pacs_machine_pac_ttl_unit", eap_fast_pacs_machine_pac_ttl_unit)
        if eap_fast_pacs_server_returns is not None:
            pulumi.set(__self__, "eap_fast_pacs_server_returns", eap_fast_pacs_server_returns)
        if eap_fast_pacs_stateless_session_resume is not None:
            pulumi.set(__self__, "eap_fast_pacs_stateless_session_resume", eap_fast_pacs_stateless_session_resume)
        if eap_fast_pacs_tunnel_pac_ttl is not None:
            pulumi.set(__self__, "eap_fast_pacs_tunnel_pac_ttl", eap_fast_pacs_tunnel_pac_ttl)
        if eap_fast_pacs_tunnel_pac_ttl_unit is not None:
            pulumi.set(__self__, "eap_fast_pacs_tunnel_pac_ttl_unit", eap_fast_pacs_tunnel_pac_ttl_unit)
        if eap_fast_pacs_use_proactive_pac_update_percentage is not None:
            pulumi.set(__self__, "eap_fast_pacs_use_proactive_pac_update_percentage", eap_fast_pacs_use_proactive_pac_update_percentage)
        if eap_fast_use_pacs is not None:
            pulumi.set(__self__, "eap_fast_use_pacs", eap_fast_use_pacs)
        if eap_tls_allow_auth_of_expired_certs is not None:
            pulumi.set(__self__, "eap_tls_allow_auth_of_expired_certs", eap_tls_allow_auth_of_expired_certs)
        if eap_tls_enable_stateless_session_resume is not None:
            pulumi.set(__self__, "eap_tls_enable_stateless_session_resume", eap_tls_enable_stateless_session_resume)
        if eap_tls_session_ticket_percentage is not None:
            pulumi.set(__self__, "eap_tls_session_ticket_percentage", eap_tls_session_ticket_percentage)
        if eap_tls_session_ticket_ttl is not None:
            pulumi.set(__self__, "eap_tls_session_ticket_ttl", eap_tls_session_ticket_ttl)
        if eap_tls_session_ticket_ttl_unit is not None:
            pulumi.set(__self__, "eap_tls_session_ticket_ttl_unit", eap_tls_session_ticket_ttl_unit)
        if eap_ttls_chap is not None:
            pulumi.set(__self__, "eap_ttls_chap", eap_ttls_chap)
        if eap_ttls_eap_md5 is not None:
            pulumi.set(__self__, "eap_ttls_eap_md5", eap_ttls_eap_md5)
        if eap_ttls_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2", eap_ttls_eap_ms_chap_v2)
        if eap_ttls_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2_pwd_change", eap_ttls_eap_ms_chap_v2_pwd_change)
        if eap_ttls_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2_pwd_change_retries", eap_ttls_eap_ms_chap_v2_pwd_change_retries)
        if eap_ttls_ms_chap_v1 is not None:
            pulumi.set(__self__, "eap_ttls_ms_chap_v1", eap_ttls_ms_chap_v1)
        if eap_ttls_ms_chap_v2 is not None:
            pulumi.set(__self__, "eap_ttls_ms_chap_v2", eap_ttls_ms_chap_v2)
        if eap_ttls_pap_ascii is not None:
            pulumi.set(__self__, "eap_ttls_pap_ascii", eap_ttls_pap_ascii)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peap_allow_peap_eap_gtc is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_gtc", peap_allow_peap_eap_gtc)
        if peap_allow_peap_eap_gtc_pwd_change is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_gtc_pwd_change", peap_allow_peap_eap_gtc_pwd_change)
        if peap_allow_peap_eap_gtc_pwd_change_retries is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_gtc_pwd_change_retries", peap_allow_peap_eap_gtc_pwd_change_retries)
        if peap_allow_peap_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2", peap_allow_peap_eap_ms_chap_v2)
        if peap_allow_peap_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2_pwd_change", peap_allow_peap_eap_ms_chap_v2_pwd_change)
        if peap_allow_peap_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries", peap_allow_peap_eap_ms_chap_v2_pwd_change_retries)
        if peap_allow_peap_eap_tls is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_tls", peap_allow_peap_eap_tls)
        if peap_allow_peap_eap_tls_auth_of_expired_certs is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_tls_auth_of_expired_certs", peap_allow_peap_eap_tls_auth_of_expired_certs)
        if peap_peap_v0 is not None:
            pulumi.set(__self__, "peap_peap_v0", peap_peap_v0)
        if preferred_eap_protocol is not None:
            pulumi.set(__self__, "preferred_eap_protocol", preferred_eap_protocol)
        if require_cryptobinding is not None:
            pulumi.set(__self__, "require_cryptobinding", require_cryptobinding)
        if teap_downgrade_msk is not None:
            pulumi.set(__self__, "teap_downgrade_msk", teap_downgrade_msk)
        if teap_eap_accept_client_cert_during_tunnel_est is not None:
            pulumi.set(__self__, "teap_eap_accept_client_cert_during_tunnel_est", teap_eap_accept_client_cert_during_tunnel_est)
        if teap_eap_chaining is not None:
            pulumi.set(__self__, "teap_eap_chaining", teap_eap_chaining)
        if teap_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "teap_eap_ms_chap_v2", teap_eap_ms_chap_v2)
        if teap_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "teap_eap_ms_chap_v2_pwd_change", teap_eap_ms_chap_v2_pwd_change)
        if teap_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "teap_eap_ms_chap_v2_pwd_change_retries", teap_eap_ms_chap_v2_pwd_change_retries)
        if teap_eap_tls is not None:
            pulumi.set(__self__, "teap_eap_tls", teap_eap_tls)
        if teap_eap_tls_auth_of_expired_certs is not None:
            pulumi.set(__self__, "teap_eap_tls_auth_of_expired_certs", teap_eap_tls_auth_of_expired_certs)
        if teap_request_basic_pwd_auth is not None:
            pulumi.set(__self__, "teap_request_basic_pwd_auth", teap_request_basic_pwd_auth)

    @_builtins.property
    @pulumi.getter(name="allowChap")
    def allow_chap(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow CHAP
        """
        return pulumi.get(self, "allow_chap")

    @allow_chap.setter
    def allow_chap(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_chap", value)

    @_builtins.property
    @pulumi.getter(name="allowEapFast")
    def allow_eap_fast(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow EAP Fast
        """
        return pulumi.get(self, "allow_eap_fast")

    @allow_eap_fast.setter
    def allow_eap_fast(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_eap_fast", value)

    @_builtins.property
    @pulumi.getter(name="allowEapMd5")
    def allow_eap_md5(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "allow_eap_md5")

    @allow_eap_md5.setter
    def allow_eap_md5(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_eap_md5", value)

    @_builtins.property
    @pulumi.getter(name="allowEapTls")
    def allow_eap_tls(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "allow_eap_tls")

    @allow_eap_tls.setter
    def allow_eap_tls(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="allowEapTtls")
    def allow_eap_ttls(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow EAP TTLS
        """
        return pulumi.get(self, "allow_eap_ttls")

    @allow_eap_ttls.setter
    def allow_eap_ttls(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_eap_ttls", value)

    @_builtins.property
    @pulumi.getter(name="allowLeap")
    def allow_leap(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow LEAP
        """
        return pulumi.get(self, "allow_leap")

    @allow_leap.setter
    def allow_leap(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_leap", value)

    @_builtins.property
    @pulumi.getter(name="allowMsChapV1")
    def allow_ms_chap_v1(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "allow_ms_chap_v1")

    @allow_ms_chap_v1.setter
    def allow_ms_chap_v1(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_ms_chap_v1", value)

    @_builtins.property
    @pulumi.getter(name="allowMsChapV2")
    def allow_ms_chap_v2(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "allow_ms_chap_v2")

    @allow_ms_chap_v2.setter
    def allow_ms_chap_v2(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="allowPapAscii")
    def allow_pap_ascii(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "allow_pap_ascii")

    @allow_pap_ascii.setter
    def allow_pap_ascii(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_pap_ascii", value)

    @_builtins.property
    @pulumi.getter(name="allowPeap")
    def allow_peap(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow PEAP
        """
        return pulumi.get(self, "allow_peap")

    @allow_peap.setter
    def allow_peap(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_peap", value)

    @_builtins.property
    @pulumi.getter(name="allowPreferredEapProtocol")
    def allow_preferred_eap_protocol(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow preferred EAP protocol
        """
        return pulumi.get(self, "allow_preferred_eap_protocol")

    @allow_preferred_eap_protocol.setter
    def allow_preferred_eap_protocol(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_preferred_eap_protocol", value)

    @_builtins.property
    @pulumi.getter(name="allowTeap")
    def allow_teap(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow TEAP
        """
        return pulumi.get(self, "allow_teap")

    @allow_teap.setter
    def allow_teap(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_teap", value)

    @_builtins.property
    @pulumi.getter(name="allowWeakCiphersForEap")
    def allow_weak_ciphers_for_eap(self) -> pulumi.Input[_builtins.bool]:
        """
        Allow weak ciphers for EAP
        """
        return pulumi.get(self, "allow_weak_ciphers_for_eap")

    @allow_weak_ciphers_for_eap.setter
    def allow_weak_ciphers_for_eap(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "allow_weak_ciphers_for_eap", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsLBit")
    def eap_tls_l_bit(self) -> pulumi.Input[_builtins.bool]:
        """
        EAP TLS L-Bit
        """
        return pulumi.get(self, "eap_tls_l_bit")

    @eap_tls_l_bit.setter
    def eap_tls_l_bit(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "eap_tls_l_bit", value)

    @_builtins.property
    @pulumi.getter(name="processHostLookup")
    def process_host_lookup(self) -> pulumi.Input[_builtins.bool]:
        """
        Process host lookup
        """
        return pulumi.get(self, "process_host_lookup")

    @process_host_lookup.setter
    def process_host_lookup(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "process_host_lookup", value)

    @_builtins.property
    @pulumi.getter(name="requireMessageAuth")
    def require_message_auth(self) -> pulumi.Input[_builtins.bool]:
        """
        Require message authentication
        """
        return pulumi.get(self, "require_message_auth")

    @require_message_auth.setter
    def require_message_auth(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "require_message_auth", value)

    @_builtins.property
    @pulumi.getter
    def allow5g(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow 5G. This field is only supported from ISE 3.2.
        """
        return pulumi.get(self, "allow5g")

    @allow5g.setter
    def allow5g(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow5g", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eapFastAcceptClientCert")
    def eap_fast_accept_client_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_accept_client_cert")

    @eap_fast_accept_client_cert.setter
    def eap_fast_accept_client_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_accept_client_cert", value)

    @_builtins.property
    @pulumi.getter(name="eapFastAllowMachineAuthentication")
    def eap_fast_allow_machine_authentication(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_allow_machine_authentication")

    @eap_fast_allow_machine_authentication.setter
    def eap_fast_allow_machine_authentication(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_allow_machine_authentication", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtc")
    def eap_fast_eap_gtc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP GTC
        """
        return pulumi.get(self, "eap_fast_eap_gtc")

    @eap_fast_eap_gtc.setter
    def eap_fast_eap_gtc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_gtc", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChange")
    def eap_fast_eap_gtc_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change")

    @eap_fast_eap_gtc_pwd_change.setter
    def eap_fast_eap_gtc_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_gtc_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChangeRetries")
    def eap_fast_eap_gtc_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change_retries")

    @eap_fast_eap_gtc_pwd_change_retries.setter
    def eap_fast_eap_gtc_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_eap_gtc_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2")
    def eap_fast_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2")

    @eap_fast_eap_ms_chap_v2.setter
    def eap_fast_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChange")
    def eap_fast_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change")

    @eap_fast_eap_ms_chap_v2_pwd_change.setter
    def eap_fast_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChangeRetries")
    def eap_fast_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change_retries")

    @eap_fast_eap_ms_chap_v2_pwd_change_retries.setter
    def eap_fast_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapTls")
    def eap_fast_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "eap_fast_eap_tls")

    @eap_fast_eap_tls.setter
    def eap_fast_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapTlsAuthOfExpiredCerts")
    def eap_fast_eap_tls_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_tls_auth_of_expired_certs")

    @eap_fast_eap_tls_auth_of_expired_certs.setter
    def eap_fast_eap_tls_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_tls_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEnableEapChaining")
    def eap_fast_enable_eap_chaining(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable EAP chaining
        """
        return pulumi.get(self, "eap_fast_enable_eap_chaining")

    @eap_fast_enable_eap_chaining.setter
    def eap_fast_enable_eap_chaining(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_enable_eap_chaining", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAnonymousProvisioning")
    def eap_fast_pacs_allow_anonymous_provisioning(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_anonymous_provisioning")

    @eap_fast_pacs_allow_anonymous_provisioning.setter
    def eap_fast_pacs_allow_anonymous_provisioning(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_anonymous_provisioning", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAuthenticatedProvisioning")
    def eap_fast_pacs_allow_authenticated_provisioning(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_authenticated_provisioning")

    @eap_fast_pacs_allow_authenticated_provisioning.setter
    def eap_fast_pacs_allow_authenticated_provisioning(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_authenticated_provisioning", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowClientCert")
    def eap_fast_pacs_allow_client_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_client_cert")

    @eap_fast_pacs_allow_client_cert.setter
    def eap_fast_pacs_allow_client_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_client_cert", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowMachineAuthentication")
    def eap_fast_pacs_allow_machine_authentication(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_machine_authentication")

    @eap_fast_pacs_allow_machine_authentication.setter
    def eap_fast_pacs_allow_machine_authentication(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_machine_authentication", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtl")
    def eap_fast_pacs_authorization_pac_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl")

    @eap_fast_pacs_authorization_pac_ttl.setter
    def eap_fast_pacs_authorization_pac_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_authorization_pac_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtlUnit")
    def eap_fast_pacs_authorization_pac_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl_unit")

    @eap_fast_pacs_authorization_pac_ttl_unit.setter
    def eap_fast_pacs_authorization_pac_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_fast_pacs_authorization_pac_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtl")
    def eap_fast_pacs_machine_pac_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl")

    @eap_fast_pacs_machine_pac_ttl.setter
    def eap_fast_pacs_machine_pac_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_machine_pac_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtlUnit")
    def eap_fast_pacs_machine_pac_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl_unit")

    @eap_fast_pacs_machine_pac_ttl_unit.setter
    def eap_fast_pacs_machine_pac_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_fast_pacs_machine_pac_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsServerReturns")
    def eap_fast_pacs_server_returns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_server_returns")

    @eap_fast_pacs_server_returns.setter
    def eap_fast_pacs_server_returns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_server_returns", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsStatelessSessionResume")
    def eap_fast_pacs_stateless_session_resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_stateless_session_resume")

    @eap_fast_pacs_stateless_session_resume.setter
    def eap_fast_pacs_stateless_session_resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_stateless_session_resume", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtl")
    def eap_fast_pacs_tunnel_pac_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl")

    @eap_fast_pacs_tunnel_pac_ttl.setter
    def eap_fast_pacs_tunnel_pac_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_tunnel_pac_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtlUnit")
    def eap_fast_pacs_tunnel_pac_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl_unit")

    @eap_fast_pacs_tunnel_pac_ttl_unit.setter
    def eap_fast_pacs_tunnel_pac_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_fast_pacs_tunnel_pac_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsUseProactivePacUpdatePercentage")
    def eap_fast_pacs_use_proactive_pac_update_percentage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
          - Range: `1`-`100`
        """
        return pulumi.get(self, "eap_fast_pacs_use_proactive_pac_update_percentage")

    @eap_fast_pacs_use_proactive_pac_update_percentage.setter
    def eap_fast_pacs_use_proactive_pac_update_percentage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_use_proactive_pac_update_percentage", value)

    @_builtins.property
    @pulumi.getter(name="eapFastUsePacs")
    def eap_fast_use_pacs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Use PACs
        """
        return pulumi.get(self, "eap_fast_use_pacs")

    @eap_fast_use_pacs.setter
    def eap_fast_use_pacs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_use_pacs", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsAllowAuthOfExpiredCerts")
    def eap_tls_allow_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authentication of expired certificates
        """
        return pulumi.get(self, "eap_tls_allow_auth_of_expired_certs")

    @eap_tls_allow_auth_of_expired_certs.setter
    def eap_tls_allow_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_tls_allow_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsEnableStatelessSessionResume")
    def eap_tls_enable_stateless_session_resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable stateless session resume
        """
        return pulumi.get(self, "eap_tls_enable_stateless_session_resume")

    @eap_tls_enable_stateless_session_resume.setter
    def eap_tls_enable_stateless_session_resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_tls_enable_stateless_session_resume", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketPercentage")
    def eap_tls_session_ticket_percentage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
          - Range: `1`-`100`
        """
        return pulumi.get(self, "eap_tls_session_ticket_percentage")

    @eap_tls_session_ticket_percentage.setter
    def eap_tls_session_ticket_percentage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_tls_session_ticket_percentage", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtl")
    def eap_tls_session_ticket_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl")

    @eap_tls_session_ticket_ttl.setter
    def eap_tls_session_ticket_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_tls_session_ticket_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtlUnit")
    def eap_tls_session_ticket_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl_unit")

    @eap_tls_session_ticket_ttl_unit.setter
    def eap_tls_session_ticket_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_tls_session_ticket_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsChap")
    def eap_ttls_chap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow CHAP
        """
        return pulumi.get(self, "eap_ttls_chap")

    @eap_ttls_chap.setter
    def eap_ttls_chap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_chap", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMd5")
    def eap_ttls_eap_md5(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "eap_ttls_eap_md5")

    @eap_ttls_eap_md5.setter
    def eap_ttls_eap_md5(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_eap_md5", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2")
    def eap_ttls_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2")

    @eap_ttls_eap_ms_chap_v2.setter
    def eap_ttls_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChange")
    def eap_ttls_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change")

    @eap_ttls_eap_ms_chap_v2_pwd_change.setter
    def eap_ttls_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChangeRetries")
    def eap_ttls_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change_retries")

    @eap_ttls_eap_ms_chap_v2_pwd_change_retries.setter
    def eap_ttls_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_ttls_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV1")
    def eap_ttls_ms_chap_v1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v1")

    @eap_ttls_ms_chap_v1.setter
    def eap_ttls_ms_chap_v1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_ms_chap_v1", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV2")
    def eap_ttls_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v2")

    @eap_ttls_ms_chap_v2.setter
    def eap_ttls_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsPapAscii")
    def eap_ttls_pap_ascii(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "eap_ttls_pap_ascii")

    @eap_ttls_pap_ascii.setter
    def eap_ttls_pap_ascii(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_pap_ascii", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the allowed protocols
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtc")
    def peap_allow_peap_eap_gtc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP GTC
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc")

    @peap_allow_peap_eap_gtc.setter
    def peap_allow_peap_eap_gtc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_gtc", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChange")
    def peap_allow_peap_eap_gtc_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change")

    @peap_allow_peap_eap_gtc_pwd_change.setter
    def peap_allow_peap_eap_gtc_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_gtc_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChangeRetries")
    def peap_allow_peap_eap_gtc_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change_retries")

    @peap_allow_peap_eap_gtc_pwd_change_retries.setter
    def peap_allow_peap_eap_gtc_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "peap_allow_peap_eap_gtc_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2")
    def peap_allow_peap_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP MS CHAP v2
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2")

    @peap_allow_peap_eap_ms_chap_v2.setter
    def peap_allow_peap_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChange")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change")

    @peap_allow_peap_eap_ms_chap_v2_pwd_change.setter
    def peap_allow_peap_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChangeRetries")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries")

    @peap_allow_peap_eap_ms_chap_v2_pwd_change_retries.setter
    def peap_allow_peap_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTls")
    def peap_allow_peap_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP TLS
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls")

    @peap_allow_peap_eap_tls.setter
    def peap_allow_peap_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTlsAuthOfExpiredCerts")
    def peap_allow_peap_eap_tls_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls_auth_of_expired_certs")

    @peap_allow_peap_eap_tls_auth_of_expired_certs.setter
    def peap_allow_peap_eap_tls_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_tls_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="peapPeapV0")
    def peap_peap_v0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP v0
        """
        return pulumi.get(self, "peap_peap_v0")

    @peap_peap_v0.setter
    def peap_peap_v0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_peap_v0", value)

    @_builtins.property
    @pulumi.getter(name="preferredEapProtocol")
    def preferred_eap_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preferred EAP protocol
          - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        """
        return pulumi.get(self, "preferred_eap_protocol")

    @preferred_eap_protocol.setter
    def preferred_eap_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_eap_protocol", value)

    @_builtins.property
    @pulumi.getter(name="requireCryptobinding")
    def require_cryptobinding(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Require cryptobinding
        """
        return pulumi.get(self, "require_cryptobinding")

    @require_cryptobinding.setter
    def require_cryptobinding(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "require_cryptobinding", value)

    @_builtins.property
    @pulumi.getter(name="teapDowngradeMsk")
    def teap_downgrade_msk(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow downgrade to MSK
        """
        return pulumi.get(self, "teap_downgrade_msk")

    @teap_downgrade_msk.setter
    def teap_downgrade_msk(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_downgrade_msk", value)

    @_builtins.property
    @pulumi.getter(name="teapEapAcceptClientCertDuringTunnelEst")
    def teap_eap_accept_client_cert_during_tunnel_est(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept client certificate during tunnel establishment
        """
        return pulumi.get(self, "teap_eap_accept_client_cert_during_tunnel_est")

    @teap_eap_accept_client_cert_during_tunnel_est.setter
    def teap_eap_accept_client_cert_during_tunnel_est(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_accept_client_cert_during_tunnel_est", value)

    @_builtins.property
    @pulumi.getter(name="teapEapChaining")
    def teap_eap_chaining(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP chaining
        """
        return pulumi.get(self, "teap_eap_chaining")

    @teap_eap_chaining.setter
    def teap_eap_chaining(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_chaining", value)

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2")
    def teap_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2")

    @teap_eap_ms_chap_v2.setter
    def teap_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChange")
    def teap_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change")

    @teap_eap_ms_chap_v2_pwd_change.setter
    def teap_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChangeRetries")
    def teap_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change_retries")

    @teap_eap_ms_chap_v2_pwd_change_retries.setter
    def teap_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "teap_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="teapEapTls")
    def teap_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "teap_eap_tls")

    @teap_eap_tls.setter
    def teap_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="teapEapTlsAuthOfExpiredCerts")
    def teap_eap_tls_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        """
        return pulumi.get(self, "teap_eap_tls_auth_of_expired_certs")

    @teap_eap_tls_auth_of_expired_certs.setter
    def teap_eap_tls_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_tls_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="teapRequestBasicPwdAuth")
    def teap_request_basic_pwd_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Request basic password authentication
        """
        return pulumi.get(self, "teap_request_basic_pwd_auth")

    @teap_request_basic_pwd_auth.setter
    def teap_request_basic_pwd_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_request_basic_pwd_auth", value)


@pulumi.input_type
class _AllowedProtocolsState:
    def __init__(__self__, *,
                 allow5g: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_fast: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_ttls: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_leap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_peap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_preferred_eap_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_teap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_weak_ciphers_for_eap: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_accept_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_enable_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_anonymous_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_authenticated_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_authorization_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_authorization_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_machine_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_machine_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_server_returns: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_tunnel_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_tunnel_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_use_proactive_pac_update_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_use_pacs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_allow_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_enable_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_l_bit: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_session_ticket_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_ttls_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_ttls_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peap_allow_peap_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_peap_v0: Optional[pulumi.Input[_builtins.bool]] = None,
                 preferred_eap_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 process_host_lookup: Optional[pulumi.Input[_builtins.bool]] = None,
                 require_cryptobinding: Optional[pulumi.Input[_builtins.bool]] = None,
                 require_message_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_downgrade_msk: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_accept_client_cert_during_tunnel_est: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 teap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_request_basic_pwd_auth: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering AllowedProtocols resources.
        :param pulumi.Input[_builtins.bool] allow5g: Allow 5G. This field is only supported from ISE 3.2.
        :param pulumi.Input[_builtins.bool] allow_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] allow_eap_fast: Allow EAP Fast
        :param pulumi.Input[_builtins.bool] allow_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] allow_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] allow_eap_ttls: Allow EAP TTLS
        :param pulumi.Input[_builtins.bool] allow_leap: Allow LEAP
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] allow_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.bool] allow_peap: Allow PEAP
        :param pulumi.Input[_builtins.bool] allow_preferred_eap_protocol: Allow preferred EAP protocol
        :param pulumi.Input[_builtins.bool] allow_teap: Allow TEAP
        :param pulumi.Input[_builtins.bool] allow_weak_ciphers_for_eap: Allow weak ciphers for EAP
        :param pulumi.Input[_builtins.str] description: Description
        :param pulumi.Input[_builtins.bool] eap_fast_accept_client_cert: Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc: Allow EAP GTC
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc_pwd_change: Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_gtc_pwd_change_retries: EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_enable_eap_chaining: Enable EAP chaining
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_anonymous_provisioning: Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_authenticated_provisioning: Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_client_cert: Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_authorization_pac_ttl: Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_authorization_pac_ttl_unit: Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_machine_pac_ttl: Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_machine_pac_ttl_unit: Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_server_returns: Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_stateless_session_resume: Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_tunnel_pac_ttl: PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_tunnel_pac_ttl_unit: PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_use_proactive_pac_update_percentage: Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.bool] eap_fast_use_pacs: Use PACs
        :param pulumi.Input[_builtins.bool] eap_tls_allow_auth_of_expired_certs: Allow authentication of expired certificates
        :param pulumi.Input[_builtins.bool] eap_tls_enable_stateless_session_resume: Enable stateless session resume
        :param pulumi.Input[_builtins.bool] eap_tls_l_bit: EAP TLS L-Bit
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_percentage: Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_ttl: Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_tls_session_ticket_ttl_unit: Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_ttls_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_ttls_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.str] name: The name of the allowed protocols
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc: Allow PEAP EAP GTC
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc_pwd_change: Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_gtc_pwd_change_retries: PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2: Allow PEAP EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2_pwd_change: Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls: Allow PEAP EAP TLS
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls_auth_of_expired_certs: Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] peap_peap_v0: Allow PEAP v0
        :param pulumi.Input[_builtins.str] preferred_eap_protocol: Preferred EAP protocol
                 - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        :param pulumi.Input[_builtins.bool] process_host_lookup: Process host lookup
        :param pulumi.Input[_builtins.bool] require_cryptobinding: Require cryptobinding
        :param pulumi.Input[_builtins.bool] require_message_auth: Require message authentication
        :param pulumi.Input[_builtins.bool] teap_downgrade_msk: Allow downgrade to MSK
        :param pulumi.Input[_builtins.bool] teap_eap_accept_client_cert_during_tunnel_est: Accept client certificate during tunnel establishment
        :param pulumi.Input[_builtins.bool] teap_eap_chaining: Allow EAP chaining
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] teap_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] teap_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] teap_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] teap_request_basic_pwd_auth: Request basic password authentication
        """
        if allow5g is not None:
            pulumi.set(__self__, "allow5g", allow5g)
        if allow_chap is not None:
            pulumi.set(__self__, "allow_chap", allow_chap)
        if allow_eap_fast is not None:
            pulumi.set(__self__, "allow_eap_fast", allow_eap_fast)
        if allow_eap_md5 is not None:
            pulumi.set(__self__, "allow_eap_md5", allow_eap_md5)
        if allow_eap_tls is not None:
            pulumi.set(__self__, "allow_eap_tls", allow_eap_tls)
        if allow_eap_ttls is not None:
            pulumi.set(__self__, "allow_eap_ttls", allow_eap_ttls)
        if allow_leap is not None:
            pulumi.set(__self__, "allow_leap", allow_leap)
        if allow_ms_chap_v1 is not None:
            pulumi.set(__self__, "allow_ms_chap_v1", allow_ms_chap_v1)
        if allow_ms_chap_v2 is not None:
            pulumi.set(__self__, "allow_ms_chap_v2", allow_ms_chap_v2)
        if allow_pap_ascii is not None:
            pulumi.set(__self__, "allow_pap_ascii", allow_pap_ascii)
        if allow_peap is not None:
            pulumi.set(__self__, "allow_peap", allow_peap)
        if allow_preferred_eap_protocol is not None:
            pulumi.set(__self__, "allow_preferred_eap_protocol", allow_preferred_eap_protocol)
        if allow_teap is not None:
            pulumi.set(__self__, "allow_teap", allow_teap)
        if allow_weak_ciphers_for_eap is not None:
            pulumi.set(__self__, "allow_weak_ciphers_for_eap", allow_weak_ciphers_for_eap)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eap_fast_accept_client_cert is not None:
            pulumi.set(__self__, "eap_fast_accept_client_cert", eap_fast_accept_client_cert)
        if eap_fast_allow_machine_authentication is not None:
            pulumi.set(__self__, "eap_fast_allow_machine_authentication", eap_fast_allow_machine_authentication)
        if eap_fast_eap_gtc is not None:
            pulumi.set(__self__, "eap_fast_eap_gtc", eap_fast_eap_gtc)
        if eap_fast_eap_gtc_pwd_change is not None:
            pulumi.set(__self__, "eap_fast_eap_gtc_pwd_change", eap_fast_eap_gtc_pwd_change)
        if eap_fast_eap_gtc_pwd_change_retries is not None:
            pulumi.set(__self__, "eap_fast_eap_gtc_pwd_change_retries", eap_fast_eap_gtc_pwd_change_retries)
        if eap_fast_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "eap_fast_eap_ms_chap_v2", eap_fast_eap_ms_chap_v2)
        if eap_fast_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "eap_fast_eap_ms_chap_v2_pwd_change", eap_fast_eap_ms_chap_v2_pwd_change)
        if eap_fast_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "eap_fast_eap_ms_chap_v2_pwd_change_retries", eap_fast_eap_ms_chap_v2_pwd_change_retries)
        if eap_fast_eap_tls is not None:
            pulumi.set(__self__, "eap_fast_eap_tls", eap_fast_eap_tls)
        if eap_fast_eap_tls_auth_of_expired_certs is not None:
            pulumi.set(__self__, "eap_fast_eap_tls_auth_of_expired_certs", eap_fast_eap_tls_auth_of_expired_certs)
        if eap_fast_enable_eap_chaining is not None:
            pulumi.set(__self__, "eap_fast_enable_eap_chaining", eap_fast_enable_eap_chaining)
        if eap_fast_pacs_allow_anonymous_provisioning is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_anonymous_provisioning", eap_fast_pacs_allow_anonymous_provisioning)
        if eap_fast_pacs_allow_authenticated_provisioning is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_authenticated_provisioning", eap_fast_pacs_allow_authenticated_provisioning)
        if eap_fast_pacs_allow_client_cert is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_client_cert", eap_fast_pacs_allow_client_cert)
        if eap_fast_pacs_allow_machine_authentication is not None:
            pulumi.set(__self__, "eap_fast_pacs_allow_machine_authentication", eap_fast_pacs_allow_machine_authentication)
        if eap_fast_pacs_authorization_pac_ttl is not None:
            pulumi.set(__self__, "eap_fast_pacs_authorization_pac_ttl", eap_fast_pacs_authorization_pac_ttl)
        if eap_fast_pacs_authorization_pac_ttl_unit is not None:
            pulumi.set(__self__, "eap_fast_pacs_authorization_pac_ttl_unit", eap_fast_pacs_authorization_pac_ttl_unit)
        if eap_fast_pacs_machine_pac_ttl is not None:
            pulumi.set(__self__, "eap_fast_pacs_machine_pac_ttl", eap_fast_pacs_machine_pac_ttl)
        if eap_fast_pacs_machine_pac_ttl_unit is not None:
            pulumi.set(__self__, "eap_fast_pacs_machine_pac_ttl_unit", eap_fast_pacs_machine_pac_ttl_unit)
        if eap_fast_pacs_server_returns is not None:
            pulumi.set(__self__, "eap_fast_pacs_server_returns", eap_fast_pacs_server_returns)
        if eap_fast_pacs_stateless_session_resume is not None:
            pulumi.set(__self__, "eap_fast_pacs_stateless_session_resume", eap_fast_pacs_stateless_session_resume)
        if eap_fast_pacs_tunnel_pac_ttl is not None:
            pulumi.set(__self__, "eap_fast_pacs_tunnel_pac_ttl", eap_fast_pacs_tunnel_pac_ttl)
        if eap_fast_pacs_tunnel_pac_ttl_unit is not None:
            pulumi.set(__self__, "eap_fast_pacs_tunnel_pac_ttl_unit", eap_fast_pacs_tunnel_pac_ttl_unit)
        if eap_fast_pacs_use_proactive_pac_update_percentage is not None:
            pulumi.set(__self__, "eap_fast_pacs_use_proactive_pac_update_percentage", eap_fast_pacs_use_proactive_pac_update_percentage)
        if eap_fast_use_pacs is not None:
            pulumi.set(__self__, "eap_fast_use_pacs", eap_fast_use_pacs)
        if eap_tls_allow_auth_of_expired_certs is not None:
            pulumi.set(__self__, "eap_tls_allow_auth_of_expired_certs", eap_tls_allow_auth_of_expired_certs)
        if eap_tls_enable_stateless_session_resume is not None:
            pulumi.set(__self__, "eap_tls_enable_stateless_session_resume", eap_tls_enable_stateless_session_resume)
        if eap_tls_l_bit is not None:
            pulumi.set(__self__, "eap_tls_l_bit", eap_tls_l_bit)
        if eap_tls_session_ticket_percentage is not None:
            pulumi.set(__self__, "eap_tls_session_ticket_percentage", eap_tls_session_ticket_percentage)
        if eap_tls_session_ticket_ttl is not None:
            pulumi.set(__self__, "eap_tls_session_ticket_ttl", eap_tls_session_ticket_ttl)
        if eap_tls_session_ticket_ttl_unit is not None:
            pulumi.set(__self__, "eap_tls_session_ticket_ttl_unit", eap_tls_session_ticket_ttl_unit)
        if eap_ttls_chap is not None:
            pulumi.set(__self__, "eap_ttls_chap", eap_ttls_chap)
        if eap_ttls_eap_md5 is not None:
            pulumi.set(__self__, "eap_ttls_eap_md5", eap_ttls_eap_md5)
        if eap_ttls_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2", eap_ttls_eap_ms_chap_v2)
        if eap_ttls_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2_pwd_change", eap_ttls_eap_ms_chap_v2_pwd_change)
        if eap_ttls_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2_pwd_change_retries", eap_ttls_eap_ms_chap_v2_pwd_change_retries)
        if eap_ttls_ms_chap_v1 is not None:
            pulumi.set(__self__, "eap_ttls_ms_chap_v1", eap_ttls_ms_chap_v1)
        if eap_ttls_ms_chap_v2 is not None:
            pulumi.set(__self__, "eap_ttls_ms_chap_v2", eap_ttls_ms_chap_v2)
        if eap_ttls_pap_ascii is not None:
            pulumi.set(__self__, "eap_ttls_pap_ascii", eap_ttls_pap_ascii)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peap_allow_peap_eap_gtc is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_gtc", peap_allow_peap_eap_gtc)
        if peap_allow_peap_eap_gtc_pwd_change is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_gtc_pwd_change", peap_allow_peap_eap_gtc_pwd_change)
        if peap_allow_peap_eap_gtc_pwd_change_retries is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_gtc_pwd_change_retries", peap_allow_peap_eap_gtc_pwd_change_retries)
        if peap_allow_peap_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2", peap_allow_peap_eap_ms_chap_v2)
        if peap_allow_peap_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2_pwd_change", peap_allow_peap_eap_ms_chap_v2_pwd_change)
        if peap_allow_peap_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries", peap_allow_peap_eap_ms_chap_v2_pwd_change_retries)
        if peap_allow_peap_eap_tls is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_tls", peap_allow_peap_eap_tls)
        if peap_allow_peap_eap_tls_auth_of_expired_certs is not None:
            pulumi.set(__self__, "peap_allow_peap_eap_tls_auth_of_expired_certs", peap_allow_peap_eap_tls_auth_of_expired_certs)
        if peap_peap_v0 is not None:
            pulumi.set(__self__, "peap_peap_v0", peap_peap_v0)
        if preferred_eap_protocol is not None:
            pulumi.set(__self__, "preferred_eap_protocol", preferred_eap_protocol)
        if process_host_lookup is not None:
            pulumi.set(__self__, "process_host_lookup", process_host_lookup)
        if require_cryptobinding is not None:
            pulumi.set(__self__, "require_cryptobinding", require_cryptobinding)
        if require_message_auth is not None:
            pulumi.set(__self__, "require_message_auth", require_message_auth)
        if teap_downgrade_msk is not None:
            pulumi.set(__self__, "teap_downgrade_msk", teap_downgrade_msk)
        if teap_eap_accept_client_cert_during_tunnel_est is not None:
            pulumi.set(__self__, "teap_eap_accept_client_cert_during_tunnel_est", teap_eap_accept_client_cert_during_tunnel_est)
        if teap_eap_chaining is not None:
            pulumi.set(__self__, "teap_eap_chaining", teap_eap_chaining)
        if teap_eap_ms_chap_v2 is not None:
            pulumi.set(__self__, "teap_eap_ms_chap_v2", teap_eap_ms_chap_v2)
        if teap_eap_ms_chap_v2_pwd_change is not None:
            pulumi.set(__self__, "teap_eap_ms_chap_v2_pwd_change", teap_eap_ms_chap_v2_pwd_change)
        if teap_eap_ms_chap_v2_pwd_change_retries is not None:
            pulumi.set(__self__, "teap_eap_ms_chap_v2_pwd_change_retries", teap_eap_ms_chap_v2_pwd_change_retries)
        if teap_eap_tls is not None:
            pulumi.set(__self__, "teap_eap_tls", teap_eap_tls)
        if teap_eap_tls_auth_of_expired_certs is not None:
            pulumi.set(__self__, "teap_eap_tls_auth_of_expired_certs", teap_eap_tls_auth_of_expired_certs)
        if teap_request_basic_pwd_auth is not None:
            pulumi.set(__self__, "teap_request_basic_pwd_auth", teap_request_basic_pwd_auth)

    @_builtins.property
    @pulumi.getter
    def allow5g(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow 5G. This field is only supported from ISE 3.2.
        """
        return pulumi.get(self, "allow5g")

    @allow5g.setter
    def allow5g(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow5g", value)

    @_builtins.property
    @pulumi.getter(name="allowChap")
    def allow_chap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow CHAP
        """
        return pulumi.get(self, "allow_chap")

    @allow_chap.setter
    def allow_chap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_chap", value)

    @_builtins.property
    @pulumi.getter(name="allowEapFast")
    def allow_eap_fast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP Fast
        """
        return pulumi.get(self, "allow_eap_fast")

    @allow_eap_fast.setter
    def allow_eap_fast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_eap_fast", value)

    @_builtins.property
    @pulumi.getter(name="allowEapMd5")
    def allow_eap_md5(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "allow_eap_md5")

    @allow_eap_md5.setter
    def allow_eap_md5(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_eap_md5", value)

    @_builtins.property
    @pulumi.getter(name="allowEapTls")
    def allow_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "allow_eap_tls")

    @allow_eap_tls.setter
    def allow_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="allowEapTtls")
    def allow_eap_ttls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TTLS
        """
        return pulumi.get(self, "allow_eap_ttls")

    @allow_eap_ttls.setter
    def allow_eap_ttls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_eap_ttls", value)

    @_builtins.property
    @pulumi.getter(name="allowLeap")
    def allow_leap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow LEAP
        """
        return pulumi.get(self, "allow_leap")

    @allow_leap.setter
    def allow_leap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_leap", value)

    @_builtins.property
    @pulumi.getter(name="allowMsChapV1")
    def allow_ms_chap_v1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "allow_ms_chap_v1")

    @allow_ms_chap_v1.setter
    def allow_ms_chap_v1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ms_chap_v1", value)

    @_builtins.property
    @pulumi.getter(name="allowMsChapV2")
    def allow_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "allow_ms_chap_v2")

    @allow_ms_chap_v2.setter
    def allow_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="allowPapAscii")
    def allow_pap_ascii(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "allow_pap_ascii")

    @allow_pap_ascii.setter
    def allow_pap_ascii(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_pap_ascii", value)

    @_builtins.property
    @pulumi.getter(name="allowPeap")
    def allow_peap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP
        """
        return pulumi.get(self, "allow_peap")

    @allow_peap.setter
    def allow_peap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_peap", value)

    @_builtins.property
    @pulumi.getter(name="allowPreferredEapProtocol")
    def allow_preferred_eap_protocol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow preferred EAP protocol
        """
        return pulumi.get(self, "allow_preferred_eap_protocol")

    @allow_preferred_eap_protocol.setter
    def allow_preferred_eap_protocol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_preferred_eap_protocol", value)

    @_builtins.property
    @pulumi.getter(name="allowTeap")
    def allow_teap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow TEAP
        """
        return pulumi.get(self, "allow_teap")

    @allow_teap.setter
    def allow_teap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_teap", value)

    @_builtins.property
    @pulumi.getter(name="allowWeakCiphersForEap")
    def allow_weak_ciphers_for_eap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow weak ciphers for EAP
        """
        return pulumi.get(self, "allow_weak_ciphers_for_eap")

    @allow_weak_ciphers_for_eap.setter
    def allow_weak_ciphers_for_eap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_weak_ciphers_for_eap", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eapFastAcceptClientCert")
    def eap_fast_accept_client_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_accept_client_cert")

    @eap_fast_accept_client_cert.setter
    def eap_fast_accept_client_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_accept_client_cert", value)

    @_builtins.property
    @pulumi.getter(name="eapFastAllowMachineAuthentication")
    def eap_fast_allow_machine_authentication(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_allow_machine_authentication")

    @eap_fast_allow_machine_authentication.setter
    def eap_fast_allow_machine_authentication(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_allow_machine_authentication", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtc")
    def eap_fast_eap_gtc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP GTC
        """
        return pulumi.get(self, "eap_fast_eap_gtc")

    @eap_fast_eap_gtc.setter
    def eap_fast_eap_gtc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_gtc", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChange")
    def eap_fast_eap_gtc_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change")

    @eap_fast_eap_gtc_pwd_change.setter
    def eap_fast_eap_gtc_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_gtc_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChangeRetries")
    def eap_fast_eap_gtc_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change_retries")

    @eap_fast_eap_gtc_pwd_change_retries.setter
    def eap_fast_eap_gtc_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_eap_gtc_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2")
    def eap_fast_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2")

    @eap_fast_eap_ms_chap_v2.setter
    def eap_fast_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChange")
    def eap_fast_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change")

    @eap_fast_eap_ms_chap_v2_pwd_change.setter
    def eap_fast_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChangeRetries")
    def eap_fast_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change_retries")

    @eap_fast_eap_ms_chap_v2_pwd_change_retries.setter
    def eap_fast_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapTls")
    def eap_fast_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "eap_fast_eap_tls")

    @eap_fast_eap_tls.setter
    def eap_fast_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEapTlsAuthOfExpiredCerts")
    def eap_fast_eap_tls_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_tls_auth_of_expired_certs")

    @eap_fast_eap_tls_auth_of_expired_certs.setter
    def eap_fast_eap_tls_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_eap_tls_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="eapFastEnableEapChaining")
    def eap_fast_enable_eap_chaining(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable EAP chaining
        """
        return pulumi.get(self, "eap_fast_enable_eap_chaining")

    @eap_fast_enable_eap_chaining.setter
    def eap_fast_enable_eap_chaining(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_enable_eap_chaining", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAnonymousProvisioning")
    def eap_fast_pacs_allow_anonymous_provisioning(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_anonymous_provisioning")

    @eap_fast_pacs_allow_anonymous_provisioning.setter
    def eap_fast_pacs_allow_anonymous_provisioning(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_anonymous_provisioning", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAuthenticatedProvisioning")
    def eap_fast_pacs_allow_authenticated_provisioning(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_authenticated_provisioning")

    @eap_fast_pacs_allow_authenticated_provisioning.setter
    def eap_fast_pacs_allow_authenticated_provisioning(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_authenticated_provisioning", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowClientCert")
    def eap_fast_pacs_allow_client_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_client_cert")

    @eap_fast_pacs_allow_client_cert.setter
    def eap_fast_pacs_allow_client_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_client_cert", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowMachineAuthentication")
    def eap_fast_pacs_allow_machine_authentication(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_machine_authentication")

    @eap_fast_pacs_allow_machine_authentication.setter
    def eap_fast_pacs_allow_machine_authentication(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_allow_machine_authentication", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtl")
    def eap_fast_pacs_authorization_pac_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl")

    @eap_fast_pacs_authorization_pac_ttl.setter
    def eap_fast_pacs_authorization_pac_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_authorization_pac_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtlUnit")
    def eap_fast_pacs_authorization_pac_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl_unit")

    @eap_fast_pacs_authorization_pac_ttl_unit.setter
    def eap_fast_pacs_authorization_pac_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_fast_pacs_authorization_pac_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtl")
    def eap_fast_pacs_machine_pac_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl")

    @eap_fast_pacs_machine_pac_ttl.setter
    def eap_fast_pacs_machine_pac_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_machine_pac_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtlUnit")
    def eap_fast_pacs_machine_pac_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl_unit")

    @eap_fast_pacs_machine_pac_ttl_unit.setter
    def eap_fast_pacs_machine_pac_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_fast_pacs_machine_pac_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsServerReturns")
    def eap_fast_pacs_server_returns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_server_returns")

    @eap_fast_pacs_server_returns.setter
    def eap_fast_pacs_server_returns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_server_returns", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsStatelessSessionResume")
    def eap_fast_pacs_stateless_session_resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_stateless_session_resume")

    @eap_fast_pacs_stateless_session_resume.setter
    def eap_fast_pacs_stateless_session_resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_pacs_stateless_session_resume", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtl")
    def eap_fast_pacs_tunnel_pac_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl")

    @eap_fast_pacs_tunnel_pac_ttl.setter
    def eap_fast_pacs_tunnel_pac_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_tunnel_pac_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtlUnit")
    def eap_fast_pacs_tunnel_pac_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl_unit")

    @eap_fast_pacs_tunnel_pac_ttl_unit.setter
    def eap_fast_pacs_tunnel_pac_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_fast_pacs_tunnel_pac_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapFastPacsUseProactivePacUpdatePercentage")
    def eap_fast_pacs_use_proactive_pac_update_percentage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
          - Range: `1`-`100`
        """
        return pulumi.get(self, "eap_fast_pacs_use_proactive_pac_update_percentage")

    @eap_fast_pacs_use_proactive_pac_update_percentage.setter
    def eap_fast_pacs_use_proactive_pac_update_percentage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_fast_pacs_use_proactive_pac_update_percentage", value)

    @_builtins.property
    @pulumi.getter(name="eapFastUsePacs")
    def eap_fast_use_pacs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Use PACs
        """
        return pulumi.get(self, "eap_fast_use_pacs")

    @eap_fast_use_pacs.setter
    def eap_fast_use_pacs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_fast_use_pacs", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsAllowAuthOfExpiredCerts")
    def eap_tls_allow_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authentication of expired certificates
        """
        return pulumi.get(self, "eap_tls_allow_auth_of_expired_certs")

    @eap_tls_allow_auth_of_expired_certs.setter
    def eap_tls_allow_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_tls_allow_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsEnableStatelessSessionResume")
    def eap_tls_enable_stateless_session_resume(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable stateless session resume
        """
        return pulumi.get(self, "eap_tls_enable_stateless_session_resume")

    @eap_tls_enable_stateless_session_resume.setter
    def eap_tls_enable_stateless_session_resume(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_tls_enable_stateless_session_resume", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsLBit")
    def eap_tls_l_bit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        EAP TLS L-Bit
        """
        return pulumi.get(self, "eap_tls_l_bit")

    @eap_tls_l_bit.setter
    def eap_tls_l_bit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_tls_l_bit", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketPercentage")
    def eap_tls_session_ticket_percentage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
          - Range: `1`-`100`
        """
        return pulumi.get(self, "eap_tls_session_ticket_percentage")

    @eap_tls_session_ticket_percentage.setter
    def eap_tls_session_ticket_percentage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_tls_session_ticket_percentage", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtl")
    def eap_tls_session_ticket_ttl(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl")

    @eap_tls_session_ticket_ttl.setter
    def eap_tls_session_ticket_ttl(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_tls_session_ticket_ttl", value)

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtlUnit")
    def eap_tls_session_ticket_ttl_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl_unit")

    @eap_tls_session_ticket_ttl_unit.setter
    def eap_tls_session_ticket_ttl_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eap_tls_session_ticket_ttl_unit", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsChap")
    def eap_ttls_chap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow CHAP
        """
        return pulumi.get(self, "eap_ttls_chap")

    @eap_ttls_chap.setter
    def eap_ttls_chap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_chap", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMd5")
    def eap_ttls_eap_md5(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "eap_ttls_eap_md5")

    @eap_ttls_eap_md5.setter
    def eap_ttls_eap_md5(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_eap_md5", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2")
    def eap_ttls_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2")

    @eap_ttls_eap_ms_chap_v2.setter
    def eap_ttls_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChange")
    def eap_ttls_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change")

    @eap_ttls_eap_ms_chap_v2_pwd_change.setter
    def eap_ttls_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChangeRetries")
    def eap_ttls_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change_retries")

    @eap_ttls_eap_ms_chap_v2_pwd_change_retries.setter
    def eap_ttls_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "eap_ttls_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV1")
    def eap_ttls_ms_chap_v1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v1")

    @eap_ttls_ms_chap_v1.setter
    def eap_ttls_ms_chap_v1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_ms_chap_v1", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV2")
    def eap_ttls_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v2")

    @eap_ttls_ms_chap_v2.setter
    def eap_ttls_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsPapAscii")
    def eap_ttls_pap_ascii(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "eap_ttls_pap_ascii")

    @eap_ttls_pap_ascii.setter
    def eap_ttls_pap_ascii(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "eap_ttls_pap_ascii", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the allowed protocols
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtc")
    def peap_allow_peap_eap_gtc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP GTC
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc")

    @peap_allow_peap_eap_gtc.setter
    def peap_allow_peap_eap_gtc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_gtc", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChange")
    def peap_allow_peap_eap_gtc_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change")

    @peap_allow_peap_eap_gtc_pwd_change.setter
    def peap_allow_peap_eap_gtc_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_gtc_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChangeRetries")
    def peap_allow_peap_eap_gtc_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change_retries")

    @peap_allow_peap_eap_gtc_pwd_change_retries.setter
    def peap_allow_peap_eap_gtc_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "peap_allow_peap_eap_gtc_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2")
    def peap_allow_peap_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP MS CHAP v2
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2")

    @peap_allow_peap_eap_ms_chap_v2.setter
    def peap_allow_peap_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChange")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change")

    @peap_allow_peap_eap_ms_chap_v2_pwd_change.setter
    def peap_allow_peap_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChangeRetries")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries")

    @peap_allow_peap_eap_ms_chap_v2_pwd_change_retries.setter
    def peap_allow_peap_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTls")
    def peap_allow_peap_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP TLS
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls")

    @peap_allow_peap_eap_tls.setter
    def peap_allow_peap_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTlsAuthOfExpiredCerts")
    def peap_allow_peap_eap_tls_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls_auth_of_expired_certs")

    @peap_allow_peap_eap_tls_auth_of_expired_certs.setter
    def peap_allow_peap_eap_tls_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_allow_peap_eap_tls_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="peapPeapV0")
    def peap_peap_v0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow PEAP v0
        """
        return pulumi.get(self, "peap_peap_v0")

    @peap_peap_v0.setter
    def peap_peap_v0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "peap_peap_v0", value)

    @_builtins.property
    @pulumi.getter(name="preferredEapProtocol")
    def preferred_eap_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preferred EAP protocol
          - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        """
        return pulumi.get(self, "preferred_eap_protocol")

    @preferred_eap_protocol.setter
    def preferred_eap_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_eap_protocol", value)

    @_builtins.property
    @pulumi.getter(name="processHostLookup")
    def process_host_lookup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Process host lookup
        """
        return pulumi.get(self, "process_host_lookup")

    @process_host_lookup.setter
    def process_host_lookup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "process_host_lookup", value)

    @_builtins.property
    @pulumi.getter(name="requireCryptobinding")
    def require_cryptobinding(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Require cryptobinding
        """
        return pulumi.get(self, "require_cryptobinding")

    @require_cryptobinding.setter
    def require_cryptobinding(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "require_cryptobinding", value)

    @_builtins.property
    @pulumi.getter(name="requireMessageAuth")
    def require_message_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Require message authentication
        """
        return pulumi.get(self, "require_message_auth")

    @require_message_auth.setter
    def require_message_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "require_message_auth", value)

    @_builtins.property
    @pulumi.getter(name="teapDowngradeMsk")
    def teap_downgrade_msk(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow downgrade to MSK
        """
        return pulumi.get(self, "teap_downgrade_msk")

    @teap_downgrade_msk.setter
    def teap_downgrade_msk(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_downgrade_msk", value)

    @_builtins.property
    @pulumi.getter(name="teapEapAcceptClientCertDuringTunnelEst")
    def teap_eap_accept_client_cert_during_tunnel_est(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept client certificate during tunnel establishment
        """
        return pulumi.get(self, "teap_eap_accept_client_cert_during_tunnel_est")

    @teap_eap_accept_client_cert_during_tunnel_est.setter
    def teap_eap_accept_client_cert_during_tunnel_est(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_accept_client_cert_during_tunnel_est", value)

    @_builtins.property
    @pulumi.getter(name="teapEapChaining")
    def teap_eap_chaining(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP chaining
        """
        return pulumi.get(self, "teap_eap_chaining")

    @teap_eap_chaining.setter
    def teap_eap_chaining(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_chaining", value)

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2")
    def teap_eap_ms_chap_v2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2")

    @teap_eap_ms_chap_v2.setter
    def teap_eap_ms_chap_v2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_ms_chap_v2", value)

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChange")
    def teap_eap_ms_chap_v2_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change")

    @teap_eap_ms_chap_v2_pwd_change.setter
    def teap_eap_ms_chap_v2_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_ms_chap_v2_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChangeRetries")
    def teap_eap_ms_chap_v2_pwd_change_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change_retries")

    @teap_eap_ms_chap_v2_pwd_change_retries.setter
    def teap_eap_ms_chap_v2_pwd_change_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "teap_eap_ms_chap_v2_pwd_change_retries", value)

    @_builtins.property
    @pulumi.getter(name="teapEapTls")
    def teap_eap_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "teap_eap_tls")

    @teap_eap_tls.setter
    def teap_eap_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_tls", value)

    @_builtins.property
    @pulumi.getter(name="teapEapTlsAuthOfExpiredCerts")
    def teap_eap_tls_auth_of_expired_certs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        """
        return pulumi.get(self, "teap_eap_tls_auth_of_expired_certs")

    @teap_eap_tls_auth_of_expired_certs.setter
    def teap_eap_tls_auth_of_expired_certs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_eap_tls_auth_of_expired_certs", value)

    @_builtins.property
    @pulumi.getter(name="teapRequestBasicPwdAuth")
    def teap_request_basic_pwd_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Request basic password authentication
        """
        return pulumi.get(self, "teap_request_basic_pwd_auth")

    @teap_request_basic_pwd_auth.setter
    def teap_request_basic_pwd_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "teap_request_basic_pwd_auth", value)


@pulumi.type_token("ise:networkaccess/allowedProtocols:AllowedProtocols")
class AllowedProtocols(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow5g: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_fast: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_ttls: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_leap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_peap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_preferred_eap_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_teap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_weak_ciphers_for_eap: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_accept_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_enable_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_anonymous_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_authenticated_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_authorization_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_authorization_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_machine_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_machine_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_server_returns: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_tunnel_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_tunnel_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_use_proactive_pac_update_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_use_pacs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_allow_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_enable_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_l_bit: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_session_ticket_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_ttls_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_ttls_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peap_allow_peap_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_peap_v0: Optional[pulumi.Input[_builtins.bool]] = None,
                 preferred_eap_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 process_host_lookup: Optional[pulumi.Input[_builtins.bool]] = None,
                 require_cryptobinding: Optional[pulumi.Input[_builtins.bool]] = None,
                 require_message_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_downgrade_msk: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_accept_client_cert_during_tunnel_est: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 teap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_request_basic_pwd_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        This resource can manage an allowed protocols policy element.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.networkaccess.AllowedProtocols("example",
            name="Protocols1",
            description="My allowed protocols",
            process_host_lookup=True,
            allow_pap_ascii=True,
            allow_chap=True,
            allow_ms_chap_v1=True,
            allow_ms_chap_v2=True,
            allow_eap_md5=True,
            allow_leap=True,
            allow_eap_tls=True,
            allow_eap_ttls=True,
            allow_eap_fast=True,
            allow_peap=True,
            allow_teap=True,
            allow_preferred_eap_protocol=True,
            preferred_eap_protocol="LEAP",
            eap_tls_l_bit=True,
            allow_weak_ciphers_for_eap=True,
            require_message_auth=True,
            eap_tls_allow_auth_of_expired_certs=True,
            eap_tls_enable_stateless_session_resume=True,
            eap_tls_session_ticket_ttl=5,
            eap_tls_session_ticket_ttl_unit="DAYS",
            eap_tls_session_ticket_percentage=5,
            peap_allow_peap_eap_ms_chap_v2=True,
            peap_allow_peap_eap_ms_chap_v2_pwd_change=True,
            peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=3,
            peap_allow_peap_eap_gtc=True,
            peap_allow_peap_eap_gtc_pwd_change=True,
            peap_allow_peap_eap_gtc_pwd_change_retries=3,
            peap_allow_peap_eap_tls=True,
            peap_allow_peap_eap_tls_auth_of_expired_certs=True,
            require_cryptobinding=True,
            peap_peap_v0=True,
            eap_ttls_pap_ascii=True,
            eap_ttls_chap=True,
            eap_ttls_ms_chap_v1=True,
            eap_ttls_ms_chap_v2=True,
            eap_ttls_eap_md5=True,
            eap_ttls_eap_ms_chap_v2=True,
            eap_ttls_eap_ms_chap_v2_pwd_change=True,
            eap_ttls_eap_ms_chap_v2_pwd_change_retries=3,
            eap_fast_eap_ms_chap_v2=True,
            eap_fast_eap_ms_chap_v2_pwd_change=True,
            eap_fast_eap_ms_chap_v2_pwd_change_retries=3,
            eap_fast_eap_gtc=True,
            eap_fast_eap_gtc_pwd_change=True,
            eap_fast_eap_gtc_pwd_change_retries=3,
            eap_fast_eap_tls=True,
            eap_fast_eap_tls_auth_of_expired_certs=True,
            eap_fast_enable_eap_chaining=True,
            eap_fast_use_pacs=True,
            eap_fast_pacs_tunnel_pac_ttl=5,
            eap_fast_pacs_tunnel_pac_ttl_unit="DAYS",
            eap_fast_pacs_use_proactive_pac_update_percentage=5,
            eap_fast_pacs_allow_anonymous_provisioning=True,
            eap_fast_pacs_allow_authenticated_provisioning=True,
            eap_fast_pacs_server_returns=True,
            eap_fast_pacs_allow_client_cert=True,
            eap_fast_pacs_allow_machine_authentication=True,
            eap_fast_pacs_machine_pac_ttl=5,
            eap_fast_pacs_machine_pac_ttl_unit="DAYS",
            eap_fast_pacs_stateless_session_resume=True,
            eap_fast_pacs_authorization_pac_ttl=5,
            eap_fast_pacs_authorization_pac_ttl_unit="HOURS",
            teap_eap_ms_chap_v2=True,
            teap_eap_ms_chap_v2_pwd_change=True,
            teap_eap_ms_chap_v2_pwd_change_retries=3,
            teap_eap_tls=True,
            teap_eap_tls_auth_of_expired_certs=True,
            teap_eap_accept_client_cert_during_tunnel_est=True,
            teap_eap_chaining=True,
            teap_downgrade_msk=True,
            teap_request_basic_pwd_auth=True,
            allow5g=True)
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import ise:networkaccess/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow5g: Allow 5G. This field is only supported from ISE 3.2.
        :param pulumi.Input[_builtins.bool] allow_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] allow_eap_fast: Allow EAP Fast
        :param pulumi.Input[_builtins.bool] allow_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] allow_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] allow_eap_ttls: Allow EAP TTLS
        :param pulumi.Input[_builtins.bool] allow_leap: Allow LEAP
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] allow_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.bool] allow_peap: Allow PEAP
        :param pulumi.Input[_builtins.bool] allow_preferred_eap_protocol: Allow preferred EAP protocol
        :param pulumi.Input[_builtins.bool] allow_teap: Allow TEAP
        :param pulumi.Input[_builtins.bool] allow_weak_ciphers_for_eap: Allow weak ciphers for EAP
        :param pulumi.Input[_builtins.str] description: Description
        :param pulumi.Input[_builtins.bool] eap_fast_accept_client_cert: Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc: Allow EAP GTC
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc_pwd_change: Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_gtc_pwd_change_retries: EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_enable_eap_chaining: Enable EAP chaining
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_anonymous_provisioning: Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_authenticated_provisioning: Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_client_cert: Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_authorization_pac_ttl: Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_authorization_pac_ttl_unit: Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_machine_pac_ttl: Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_machine_pac_ttl_unit: Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_server_returns: Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_stateless_session_resume: Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_tunnel_pac_ttl: PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_tunnel_pac_ttl_unit: PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_use_proactive_pac_update_percentage: Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.bool] eap_fast_use_pacs: Use PACs
        :param pulumi.Input[_builtins.bool] eap_tls_allow_auth_of_expired_certs: Allow authentication of expired certificates
        :param pulumi.Input[_builtins.bool] eap_tls_enable_stateless_session_resume: Enable stateless session resume
        :param pulumi.Input[_builtins.bool] eap_tls_l_bit: EAP TLS L-Bit
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_percentage: Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_ttl: Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_tls_session_ticket_ttl_unit: Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_ttls_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_ttls_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.str] name: The name of the allowed protocols
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc: Allow PEAP EAP GTC
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc_pwd_change: Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_gtc_pwd_change_retries: PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2: Allow PEAP EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2_pwd_change: Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls: Allow PEAP EAP TLS
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls_auth_of_expired_certs: Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] peap_peap_v0: Allow PEAP v0
        :param pulumi.Input[_builtins.str] preferred_eap_protocol: Preferred EAP protocol
                 - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        :param pulumi.Input[_builtins.bool] process_host_lookup: Process host lookup
        :param pulumi.Input[_builtins.bool] require_cryptobinding: Require cryptobinding
        :param pulumi.Input[_builtins.bool] require_message_auth: Require message authentication
        :param pulumi.Input[_builtins.bool] teap_downgrade_msk: Allow downgrade to MSK
        :param pulumi.Input[_builtins.bool] teap_eap_accept_client_cert_during_tunnel_est: Accept client certificate during tunnel establishment
        :param pulumi.Input[_builtins.bool] teap_eap_chaining: Allow EAP chaining
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] teap_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] teap_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] teap_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] teap_request_basic_pwd_auth: Request basic password authentication
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AllowedProtocolsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage an allowed protocols policy element.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ise as ise

        example = ise.networkaccess.AllowedProtocols("example",
            name="Protocols1",
            description="My allowed protocols",
            process_host_lookup=True,
            allow_pap_ascii=True,
            allow_chap=True,
            allow_ms_chap_v1=True,
            allow_ms_chap_v2=True,
            allow_eap_md5=True,
            allow_leap=True,
            allow_eap_tls=True,
            allow_eap_ttls=True,
            allow_eap_fast=True,
            allow_peap=True,
            allow_teap=True,
            allow_preferred_eap_protocol=True,
            preferred_eap_protocol="LEAP",
            eap_tls_l_bit=True,
            allow_weak_ciphers_for_eap=True,
            require_message_auth=True,
            eap_tls_allow_auth_of_expired_certs=True,
            eap_tls_enable_stateless_session_resume=True,
            eap_tls_session_ticket_ttl=5,
            eap_tls_session_ticket_ttl_unit="DAYS",
            eap_tls_session_ticket_percentage=5,
            peap_allow_peap_eap_ms_chap_v2=True,
            peap_allow_peap_eap_ms_chap_v2_pwd_change=True,
            peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=3,
            peap_allow_peap_eap_gtc=True,
            peap_allow_peap_eap_gtc_pwd_change=True,
            peap_allow_peap_eap_gtc_pwd_change_retries=3,
            peap_allow_peap_eap_tls=True,
            peap_allow_peap_eap_tls_auth_of_expired_certs=True,
            require_cryptobinding=True,
            peap_peap_v0=True,
            eap_ttls_pap_ascii=True,
            eap_ttls_chap=True,
            eap_ttls_ms_chap_v1=True,
            eap_ttls_ms_chap_v2=True,
            eap_ttls_eap_md5=True,
            eap_ttls_eap_ms_chap_v2=True,
            eap_ttls_eap_ms_chap_v2_pwd_change=True,
            eap_ttls_eap_ms_chap_v2_pwd_change_retries=3,
            eap_fast_eap_ms_chap_v2=True,
            eap_fast_eap_ms_chap_v2_pwd_change=True,
            eap_fast_eap_ms_chap_v2_pwd_change_retries=3,
            eap_fast_eap_gtc=True,
            eap_fast_eap_gtc_pwd_change=True,
            eap_fast_eap_gtc_pwd_change_retries=3,
            eap_fast_eap_tls=True,
            eap_fast_eap_tls_auth_of_expired_certs=True,
            eap_fast_enable_eap_chaining=True,
            eap_fast_use_pacs=True,
            eap_fast_pacs_tunnel_pac_ttl=5,
            eap_fast_pacs_tunnel_pac_ttl_unit="DAYS",
            eap_fast_pacs_use_proactive_pac_update_percentage=5,
            eap_fast_pacs_allow_anonymous_provisioning=True,
            eap_fast_pacs_allow_authenticated_provisioning=True,
            eap_fast_pacs_server_returns=True,
            eap_fast_pacs_allow_client_cert=True,
            eap_fast_pacs_allow_machine_authentication=True,
            eap_fast_pacs_machine_pac_ttl=5,
            eap_fast_pacs_machine_pac_ttl_unit="DAYS",
            eap_fast_pacs_stateless_session_resume=True,
            eap_fast_pacs_authorization_pac_ttl=5,
            eap_fast_pacs_authorization_pac_ttl_unit="HOURS",
            teap_eap_ms_chap_v2=True,
            teap_eap_ms_chap_v2_pwd_change=True,
            teap_eap_ms_chap_v2_pwd_change_retries=3,
            teap_eap_tls=True,
            teap_eap_tls_auth_of_expired_certs=True,
            teap_eap_accept_client_cert_during_tunnel_est=True,
            teap_eap_chaining=True,
            teap_downgrade_msk=True,
            teap_request_basic_pwd_auth=True,
            allow5g=True)
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import ise:networkaccess/allowedProtocols:AllowedProtocols example "76d24097-41c4-4558-a4d0-a8c07ac08470"
        ```

        :param str resource_name: The name of the resource.
        :param AllowedProtocolsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AllowedProtocolsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow5g: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_fast: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_eap_ttls: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_leap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_peap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_preferred_eap_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_teap: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow_weak_ciphers_for_eap: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_accept_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_enable_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_anonymous_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_authenticated_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_authorization_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_authorization_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_machine_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_machine_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_server_returns: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_fast_pacs_tunnel_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_pacs_tunnel_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_fast_pacs_use_proactive_pac_update_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_fast_use_pacs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_allow_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_enable_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_l_bit: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_tls_session_ticket_percentage: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_tls_session_ticket_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 eap_ttls_chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 eap_ttls_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 peap_allow_peap_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 peap_allow_peap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_allow_peap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_peap_v0: Optional[pulumi.Input[_builtins.bool]] = None,
                 preferred_eap_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 process_host_lookup: Optional[pulumi.Input[_builtins.bool]] = None,
                 require_cryptobinding: Optional[pulumi.Input[_builtins.bool]] = None,
                 require_message_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_downgrade_msk: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_accept_client_cert_during_tunnel_est: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 teap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
                 teap_request_basic_pwd_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AllowedProtocolsArgs.__new__(AllowedProtocolsArgs)

            __props__.__dict__["allow5g"] = allow5g
            if allow_chap is None and not opts.urn:
                raise TypeError("Missing required property 'allow_chap'")
            __props__.__dict__["allow_chap"] = allow_chap
            if allow_eap_fast is None and not opts.urn:
                raise TypeError("Missing required property 'allow_eap_fast'")
            __props__.__dict__["allow_eap_fast"] = allow_eap_fast
            if allow_eap_md5 is None and not opts.urn:
                raise TypeError("Missing required property 'allow_eap_md5'")
            __props__.__dict__["allow_eap_md5"] = allow_eap_md5
            if allow_eap_tls is None and not opts.urn:
                raise TypeError("Missing required property 'allow_eap_tls'")
            __props__.__dict__["allow_eap_tls"] = allow_eap_tls
            if allow_eap_ttls is None and not opts.urn:
                raise TypeError("Missing required property 'allow_eap_ttls'")
            __props__.__dict__["allow_eap_ttls"] = allow_eap_ttls
            if allow_leap is None and not opts.urn:
                raise TypeError("Missing required property 'allow_leap'")
            __props__.__dict__["allow_leap"] = allow_leap
            if allow_ms_chap_v1 is None and not opts.urn:
                raise TypeError("Missing required property 'allow_ms_chap_v1'")
            __props__.__dict__["allow_ms_chap_v1"] = allow_ms_chap_v1
            if allow_ms_chap_v2 is None and not opts.urn:
                raise TypeError("Missing required property 'allow_ms_chap_v2'")
            __props__.__dict__["allow_ms_chap_v2"] = allow_ms_chap_v2
            if allow_pap_ascii is None and not opts.urn:
                raise TypeError("Missing required property 'allow_pap_ascii'")
            __props__.__dict__["allow_pap_ascii"] = allow_pap_ascii
            if allow_peap is None and not opts.urn:
                raise TypeError("Missing required property 'allow_peap'")
            __props__.__dict__["allow_peap"] = allow_peap
            if allow_preferred_eap_protocol is None and not opts.urn:
                raise TypeError("Missing required property 'allow_preferred_eap_protocol'")
            __props__.__dict__["allow_preferred_eap_protocol"] = allow_preferred_eap_protocol
            if allow_teap is None and not opts.urn:
                raise TypeError("Missing required property 'allow_teap'")
            __props__.__dict__["allow_teap"] = allow_teap
            if allow_weak_ciphers_for_eap is None and not opts.urn:
                raise TypeError("Missing required property 'allow_weak_ciphers_for_eap'")
            __props__.__dict__["allow_weak_ciphers_for_eap"] = allow_weak_ciphers_for_eap
            __props__.__dict__["description"] = description
            __props__.__dict__["eap_fast_accept_client_cert"] = eap_fast_accept_client_cert
            __props__.__dict__["eap_fast_allow_machine_authentication"] = eap_fast_allow_machine_authentication
            __props__.__dict__["eap_fast_eap_gtc"] = eap_fast_eap_gtc
            __props__.__dict__["eap_fast_eap_gtc_pwd_change"] = eap_fast_eap_gtc_pwd_change
            __props__.__dict__["eap_fast_eap_gtc_pwd_change_retries"] = eap_fast_eap_gtc_pwd_change_retries
            __props__.__dict__["eap_fast_eap_ms_chap_v2"] = eap_fast_eap_ms_chap_v2
            __props__.__dict__["eap_fast_eap_ms_chap_v2_pwd_change"] = eap_fast_eap_ms_chap_v2_pwd_change
            __props__.__dict__["eap_fast_eap_ms_chap_v2_pwd_change_retries"] = eap_fast_eap_ms_chap_v2_pwd_change_retries
            __props__.__dict__["eap_fast_eap_tls"] = eap_fast_eap_tls
            __props__.__dict__["eap_fast_eap_tls_auth_of_expired_certs"] = eap_fast_eap_tls_auth_of_expired_certs
            __props__.__dict__["eap_fast_enable_eap_chaining"] = eap_fast_enable_eap_chaining
            __props__.__dict__["eap_fast_pacs_allow_anonymous_provisioning"] = eap_fast_pacs_allow_anonymous_provisioning
            __props__.__dict__["eap_fast_pacs_allow_authenticated_provisioning"] = eap_fast_pacs_allow_authenticated_provisioning
            __props__.__dict__["eap_fast_pacs_allow_client_cert"] = eap_fast_pacs_allow_client_cert
            __props__.__dict__["eap_fast_pacs_allow_machine_authentication"] = eap_fast_pacs_allow_machine_authentication
            __props__.__dict__["eap_fast_pacs_authorization_pac_ttl"] = eap_fast_pacs_authorization_pac_ttl
            __props__.__dict__["eap_fast_pacs_authorization_pac_ttl_unit"] = eap_fast_pacs_authorization_pac_ttl_unit
            __props__.__dict__["eap_fast_pacs_machine_pac_ttl"] = eap_fast_pacs_machine_pac_ttl
            __props__.__dict__["eap_fast_pacs_machine_pac_ttl_unit"] = eap_fast_pacs_machine_pac_ttl_unit
            __props__.__dict__["eap_fast_pacs_server_returns"] = eap_fast_pacs_server_returns
            __props__.__dict__["eap_fast_pacs_stateless_session_resume"] = eap_fast_pacs_stateless_session_resume
            __props__.__dict__["eap_fast_pacs_tunnel_pac_ttl"] = eap_fast_pacs_tunnel_pac_ttl
            __props__.__dict__["eap_fast_pacs_tunnel_pac_ttl_unit"] = eap_fast_pacs_tunnel_pac_ttl_unit
            __props__.__dict__["eap_fast_pacs_use_proactive_pac_update_percentage"] = eap_fast_pacs_use_proactive_pac_update_percentage
            __props__.__dict__["eap_fast_use_pacs"] = eap_fast_use_pacs
            __props__.__dict__["eap_tls_allow_auth_of_expired_certs"] = eap_tls_allow_auth_of_expired_certs
            __props__.__dict__["eap_tls_enable_stateless_session_resume"] = eap_tls_enable_stateless_session_resume
            if eap_tls_l_bit is None and not opts.urn:
                raise TypeError("Missing required property 'eap_tls_l_bit'")
            __props__.__dict__["eap_tls_l_bit"] = eap_tls_l_bit
            __props__.__dict__["eap_tls_session_ticket_percentage"] = eap_tls_session_ticket_percentage
            __props__.__dict__["eap_tls_session_ticket_ttl"] = eap_tls_session_ticket_ttl
            __props__.__dict__["eap_tls_session_ticket_ttl_unit"] = eap_tls_session_ticket_ttl_unit
            __props__.__dict__["eap_ttls_chap"] = eap_ttls_chap
            __props__.__dict__["eap_ttls_eap_md5"] = eap_ttls_eap_md5
            __props__.__dict__["eap_ttls_eap_ms_chap_v2"] = eap_ttls_eap_ms_chap_v2
            __props__.__dict__["eap_ttls_eap_ms_chap_v2_pwd_change"] = eap_ttls_eap_ms_chap_v2_pwd_change
            __props__.__dict__["eap_ttls_eap_ms_chap_v2_pwd_change_retries"] = eap_ttls_eap_ms_chap_v2_pwd_change_retries
            __props__.__dict__["eap_ttls_ms_chap_v1"] = eap_ttls_ms_chap_v1
            __props__.__dict__["eap_ttls_ms_chap_v2"] = eap_ttls_ms_chap_v2
            __props__.__dict__["eap_ttls_pap_ascii"] = eap_ttls_pap_ascii
            __props__.__dict__["name"] = name
            __props__.__dict__["peap_allow_peap_eap_gtc"] = peap_allow_peap_eap_gtc
            __props__.__dict__["peap_allow_peap_eap_gtc_pwd_change"] = peap_allow_peap_eap_gtc_pwd_change
            __props__.__dict__["peap_allow_peap_eap_gtc_pwd_change_retries"] = peap_allow_peap_eap_gtc_pwd_change_retries
            __props__.__dict__["peap_allow_peap_eap_ms_chap_v2"] = peap_allow_peap_eap_ms_chap_v2
            __props__.__dict__["peap_allow_peap_eap_ms_chap_v2_pwd_change"] = peap_allow_peap_eap_ms_chap_v2_pwd_change
            __props__.__dict__["peap_allow_peap_eap_ms_chap_v2_pwd_change_retries"] = peap_allow_peap_eap_ms_chap_v2_pwd_change_retries
            __props__.__dict__["peap_allow_peap_eap_tls"] = peap_allow_peap_eap_tls
            __props__.__dict__["peap_allow_peap_eap_tls_auth_of_expired_certs"] = peap_allow_peap_eap_tls_auth_of_expired_certs
            __props__.__dict__["peap_peap_v0"] = peap_peap_v0
            __props__.__dict__["preferred_eap_protocol"] = preferred_eap_protocol
            if process_host_lookup is None and not opts.urn:
                raise TypeError("Missing required property 'process_host_lookup'")
            __props__.__dict__["process_host_lookup"] = process_host_lookup
            __props__.__dict__["require_cryptobinding"] = require_cryptobinding
            if require_message_auth is None and not opts.urn:
                raise TypeError("Missing required property 'require_message_auth'")
            __props__.__dict__["require_message_auth"] = require_message_auth
            __props__.__dict__["teap_downgrade_msk"] = teap_downgrade_msk
            __props__.__dict__["teap_eap_accept_client_cert_during_tunnel_est"] = teap_eap_accept_client_cert_during_tunnel_est
            __props__.__dict__["teap_eap_chaining"] = teap_eap_chaining
            __props__.__dict__["teap_eap_ms_chap_v2"] = teap_eap_ms_chap_v2
            __props__.__dict__["teap_eap_ms_chap_v2_pwd_change"] = teap_eap_ms_chap_v2_pwd_change
            __props__.__dict__["teap_eap_ms_chap_v2_pwd_change_retries"] = teap_eap_ms_chap_v2_pwd_change_retries
            __props__.__dict__["teap_eap_tls"] = teap_eap_tls
            __props__.__dict__["teap_eap_tls_auth_of_expired_certs"] = teap_eap_tls_auth_of_expired_certs
            __props__.__dict__["teap_request_basic_pwd_auth"] = teap_request_basic_pwd_auth
        super(AllowedProtocols, __self__).__init__(
            'ise:networkaccess/allowedProtocols:AllowedProtocols',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow5g: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_chap: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_eap_fast: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_eap_ttls: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_leap: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_peap: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_preferred_eap_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_teap: Optional[pulumi.Input[_builtins.bool]] = None,
            allow_weak_ciphers_for_eap: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            eap_fast_accept_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
            eap_fast_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
            eap_fast_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_enable_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_allow_anonymous_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_allow_authenticated_provisioning: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_allow_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_allow_machine_authentication: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_authorization_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
            eap_fast_pacs_authorization_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
            eap_fast_pacs_machine_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
            eap_fast_pacs_machine_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
            eap_fast_pacs_server_returns: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_fast_pacs_tunnel_pac_ttl: Optional[pulumi.Input[_builtins.int]] = None,
            eap_fast_pacs_tunnel_pac_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
            eap_fast_pacs_use_proactive_pac_update_percentage: Optional[pulumi.Input[_builtins.int]] = None,
            eap_fast_use_pacs: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_tls_allow_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_tls_enable_stateless_session_resume: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_tls_l_bit: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_tls_session_ticket_percentage: Optional[pulumi.Input[_builtins.int]] = None,
            eap_tls_session_ticket_ttl: Optional[pulumi.Input[_builtins.int]] = None,
            eap_tls_session_ticket_ttl_unit: Optional[pulumi.Input[_builtins.str]] = None,
            eap_ttls_chap: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_ttls_eap_md5: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_ttls_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_ttls_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_ttls_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
            eap_ttls_ms_chap_v1: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_ttls_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
            eap_ttls_pap_ascii: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            peap_allow_peap_eap_gtc: Optional[pulumi.Input[_builtins.bool]] = None,
            peap_allow_peap_eap_gtc_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
            peap_allow_peap_eap_gtc_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
            peap_allow_peap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
            peap_allow_peap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
            peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
            peap_allow_peap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
            peap_allow_peap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
            peap_peap_v0: Optional[pulumi.Input[_builtins.bool]] = None,
            preferred_eap_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            process_host_lookup: Optional[pulumi.Input[_builtins.bool]] = None,
            require_cryptobinding: Optional[pulumi.Input[_builtins.bool]] = None,
            require_message_auth: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_downgrade_msk: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_eap_accept_client_cert_during_tunnel_est: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_eap_chaining: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_eap_ms_chap_v2: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_eap_ms_chap_v2_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_eap_ms_chap_v2_pwd_change_retries: Optional[pulumi.Input[_builtins.int]] = None,
            teap_eap_tls: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_eap_tls_auth_of_expired_certs: Optional[pulumi.Input[_builtins.bool]] = None,
            teap_request_basic_pwd_auth: Optional[pulumi.Input[_builtins.bool]] = None) -> 'AllowedProtocols':
        """
        Get an existing AllowedProtocols resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow5g: Allow 5G. This field is only supported from ISE 3.2.
        :param pulumi.Input[_builtins.bool] allow_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] allow_eap_fast: Allow EAP Fast
        :param pulumi.Input[_builtins.bool] allow_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] allow_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] allow_eap_ttls: Allow EAP TTLS
        :param pulumi.Input[_builtins.bool] allow_leap: Allow LEAP
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] allow_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] allow_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.bool] allow_peap: Allow PEAP
        :param pulumi.Input[_builtins.bool] allow_preferred_eap_protocol: Allow preferred EAP protocol
        :param pulumi.Input[_builtins.bool] allow_teap: Allow TEAP
        :param pulumi.Input[_builtins.bool] allow_weak_ciphers_for_eap: Allow weak ciphers for EAP
        :param pulumi.Input[_builtins.str] description: Description
        :param pulumi.Input[_builtins.bool] eap_fast_accept_client_cert: Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc: Allow EAP GTC
        :param pulumi.Input[_builtins.bool] eap_fast_eap_gtc_pwd_change: Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_gtc_pwd_change_retries: EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_fast_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] eap_fast_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_enable_eap_chaining: Enable EAP chaining
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_anonymous_provisioning: Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_authenticated_provisioning: Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_client_cert: Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_allow_machine_authentication: Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_authorization_pac_ttl: Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_authorization_pac_ttl_unit: Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_machine_pac_ttl: Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_machine_pac_ttl_unit: Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_server_returns: Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        :param pulumi.Input[_builtins.bool] eap_fast_pacs_stateless_session_resume: Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.int] eap_fast_pacs_tunnel_pac_ttl: PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        :param pulumi.Input[_builtins.str] eap_fast_pacs_tunnel_pac_ttl_unit: PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.int] eap_fast_pacs_use_proactive_pac_update_percentage: Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.bool] eap_fast_use_pacs: Use PACs
        :param pulumi.Input[_builtins.bool] eap_tls_allow_auth_of_expired_certs: Allow authentication of expired certificates
        :param pulumi.Input[_builtins.bool] eap_tls_enable_stateless_session_resume: Enable stateless session resume
        :param pulumi.Input[_builtins.bool] eap_tls_l_bit: EAP TLS L-Bit
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_percentage: Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] eap_tls_session_ticket_ttl: Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        :param pulumi.Input[_builtins.str] eap_tls_session_ticket_ttl_unit: Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
                 - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        :param pulumi.Input[_builtins.bool] eap_ttls_chap: Allow CHAP
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_md5: Allow EAP MD5
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] eap_ttls_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v1: Allow MS CHAP v1
        :param pulumi.Input[_builtins.bool] eap_ttls_ms_chap_v2: Allow MS CHAP v2
        :param pulumi.Input[_builtins.bool] eap_ttls_pap_ascii: Allow PAP ASCII
        :param pulumi.Input[_builtins.str] name: The name of the allowed protocols
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc: Allow PEAP EAP GTC
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_gtc_pwd_change: Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_gtc_pwd_change_retries: PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2: Allow PEAP EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_ms_chap_v2_pwd_change: Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] peap_allow_peap_eap_ms_chap_v2_pwd_change_retries: Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls: Allow PEAP EAP TLS
        :param pulumi.Input[_builtins.bool] peap_allow_peap_eap_tls_auth_of_expired_certs: Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] peap_peap_v0: Allow PEAP v0
        :param pulumi.Input[_builtins.str] preferred_eap_protocol: Preferred EAP protocol
                 - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        :param pulumi.Input[_builtins.bool] process_host_lookup: Process host lookup
        :param pulumi.Input[_builtins.bool] require_cryptobinding: Require cryptobinding
        :param pulumi.Input[_builtins.bool] require_message_auth: Require message authentication
        :param pulumi.Input[_builtins.bool] teap_downgrade_msk: Allow downgrade to MSK
        :param pulumi.Input[_builtins.bool] teap_eap_accept_client_cert_during_tunnel_est: Accept client certificate during tunnel establishment
        :param pulumi.Input[_builtins.bool] teap_eap_chaining: Allow EAP chaining
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2: Allow EAP MS CHAP v2
        :param pulumi.Input[_builtins.bool] teap_eap_ms_chap_v2_pwd_change: Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        :param pulumi.Input[_builtins.int] teap_eap_ms_chap_v2_pwd_change_retries: EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
                 - Range: `0`-`3`
        :param pulumi.Input[_builtins.bool] teap_eap_tls: Allow EAP TLS
        :param pulumi.Input[_builtins.bool] teap_eap_tls_auth_of_expired_certs: Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        :param pulumi.Input[_builtins.bool] teap_request_basic_pwd_auth: Request basic password authentication
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AllowedProtocolsState.__new__(_AllowedProtocolsState)

        __props__.__dict__["allow5g"] = allow5g
        __props__.__dict__["allow_chap"] = allow_chap
        __props__.__dict__["allow_eap_fast"] = allow_eap_fast
        __props__.__dict__["allow_eap_md5"] = allow_eap_md5
        __props__.__dict__["allow_eap_tls"] = allow_eap_tls
        __props__.__dict__["allow_eap_ttls"] = allow_eap_ttls
        __props__.__dict__["allow_leap"] = allow_leap
        __props__.__dict__["allow_ms_chap_v1"] = allow_ms_chap_v1
        __props__.__dict__["allow_ms_chap_v2"] = allow_ms_chap_v2
        __props__.__dict__["allow_pap_ascii"] = allow_pap_ascii
        __props__.__dict__["allow_peap"] = allow_peap
        __props__.__dict__["allow_preferred_eap_protocol"] = allow_preferred_eap_protocol
        __props__.__dict__["allow_teap"] = allow_teap
        __props__.__dict__["allow_weak_ciphers_for_eap"] = allow_weak_ciphers_for_eap
        __props__.__dict__["description"] = description
        __props__.__dict__["eap_fast_accept_client_cert"] = eap_fast_accept_client_cert
        __props__.__dict__["eap_fast_allow_machine_authentication"] = eap_fast_allow_machine_authentication
        __props__.__dict__["eap_fast_eap_gtc"] = eap_fast_eap_gtc
        __props__.__dict__["eap_fast_eap_gtc_pwd_change"] = eap_fast_eap_gtc_pwd_change
        __props__.__dict__["eap_fast_eap_gtc_pwd_change_retries"] = eap_fast_eap_gtc_pwd_change_retries
        __props__.__dict__["eap_fast_eap_ms_chap_v2"] = eap_fast_eap_ms_chap_v2
        __props__.__dict__["eap_fast_eap_ms_chap_v2_pwd_change"] = eap_fast_eap_ms_chap_v2_pwd_change
        __props__.__dict__["eap_fast_eap_ms_chap_v2_pwd_change_retries"] = eap_fast_eap_ms_chap_v2_pwd_change_retries
        __props__.__dict__["eap_fast_eap_tls"] = eap_fast_eap_tls
        __props__.__dict__["eap_fast_eap_tls_auth_of_expired_certs"] = eap_fast_eap_tls_auth_of_expired_certs
        __props__.__dict__["eap_fast_enable_eap_chaining"] = eap_fast_enable_eap_chaining
        __props__.__dict__["eap_fast_pacs_allow_anonymous_provisioning"] = eap_fast_pacs_allow_anonymous_provisioning
        __props__.__dict__["eap_fast_pacs_allow_authenticated_provisioning"] = eap_fast_pacs_allow_authenticated_provisioning
        __props__.__dict__["eap_fast_pacs_allow_client_cert"] = eap_fast_pacs_allow_client_cert
        __props__.__dict__["eap_fast_pacs_allow_machine_authentication"] = eap_fast_pacs_allow_machine_authentication
        __props__.__dict__["eap_fast_pacs_authorization_pac_ttl"] = eap_fast_pacs_authorization_pac_ttl
        __props__.__dict__["eap_fast_pacs_authorization_pac_ttl_unit"] = eap_fast_pacs_authorization_pac_ttl_unit
        __props__.__dict__["eap_fast_pacs_machine_pac_ttl"] = eap_fast_pacs_machine_pac_ttl
        __props__.__dict__["eap_fast_pacs_machine_pac_ttl_unit"] = eap_fast_pacs_machine_pac_ttl_unit
        __props__.__dict__["eap_fast_pacs_server_returns"] = eap_fast_pacs_server_returns
        __props__.__dict__["eap_fast_pacs_stateless_session_resume"] = eap_fast_pacs_stateless_session_resume
        __props__.__dict__["eap_fast_pacs_tunnel_pac_ttl"] = eap_fast_pacs_tunnel_pac_ttl
        __props__.__dict__["eap_fast_pacs_tunnel_pac_ttl_unit"] = eap_fast_pacs_tunnel_pac_ttl_unit
        __props__.__dict__["eap_fast_pacs_use_proactive_pac_update_percentage"] = eap_fast_pacs_use_proactive_pac_update_percentage
        __props__.__dict__["eap_fast_use_pacs"] = eap_fast_use_pacs
        __props__.__dict__["eap_tls_allow_auth_of_expired_certs"] = eap_tls_allow_auth_of_expired_certs
        __props__.__dict__["eap_tls_enable_stateless_session_resume"] = eap_tls_enable_stateless_session_resume
        __props__.__dict__["eap_tls_l_bit"] = eap_tls_l_bit
        __props__.__dict__["eap_tls_session_ticket_percentage"] = eap_tls_session_ticket_percentage
        __props__.__dict__["eap_tls_session_ticket_ttl"] = eap_tls_session_ticket_ttl
        __props__.__dict__["eap_tls_session_ticket_ttl_unit"] = eap_tls_session_ticket_ttl_unit
        __props__.__dict__["eap_ttls_chap"] = eap_ttls_chap
        __props__.__dict__["eap_ttls_eap_md5"] = eap_ttls_eap_md5
        __props__.__dict__["eap_ttls_eap_ms_chap_v2"] = eap_ttls_eap_ms_chap_v2
        __props__.__dict__["eap_ttls_eap_ms_chap_v2_pwd_change"] = eap_ttls_eap_ms_chap_v2_pwd_change
        __props__.__dict__["eap_ttls_eap_ms_chap_v2_pwd_change_retries"] = eap_ttls_eap_ms_chap_v2_pwd_change_retries
        __props__.__dict__["eap_ttls_ms_chap_v1"] = eap_ttls_ms_chap_v1
        __props__.__dict__["eap_ttls_ms_chap_v2"] = eap_ttls_ms_chap_v2
        __props__.__dict__["eap_ttls_pap_ascii"] = eap_ttls_pap_ascii
        __props__.__dict__["name"] = name
        __props__.__dict__["peap_allow_peap_eap_gtc"] = peap_allow_peap_eap_gtc
        __props__.__dict__["peap_allow_peap_eap_gtc_pwd_change"] = peap_allow_peap_eap_gtc_pwd_change
        __props__.__dict__["peap_allow_peap_eap_gtc_pwd_change_retries"] = peap_allow_peap_eap_gtc_pwd_change_retries
        __props__.__dict__["peap_allow_peap_eap_ms_chap_v2"] = peap_allow_peap_eap_ms_chap_v2
        __props__.__dict__["peap_allow_peap_eap_ms_chap_v2_pwd_change"] = peap_allow_peap_eap_ms_chap_v2_pwd_change
        __props__.__dict__["peap_allow_peap_eap_ms_chap_v2_pwd_change_retries"] = peap_allow_peap_eap_ms_chap_v2_pwd_change_retries
        __props__.__dict__["peap_allow_peap_eap_tls"] = peap_allow_peap_eap_tls
        __props__.__dict__["peap_allow_peap_eap_tls_auth_of_expired_certs"] = peap_allow_peap_eap_tls_auth_of_expired_certs
        __props__.__dict__["peap_peap_v0"] = peap_peap_v0
        __props__.__dict__["preferred_eap_protocol"] = preferred_eap_protocol
        __props__.__dict__["process_host_lookup"] = process_host_lookup
        __props__.__dict__["require_cryptobinding"] = require_cryptobinding
        __props__.__dict__["require_message_auth"] = require_message_auth
        __props__.__dict__["teap_downgrade_msk"] = teap_downgrade_msk
        __props__.__dict__["teap_eap_accept_client_cert_during_tunnel_est"] = teap_eap_accept_client_cert_during_tunnel_est
        __props__.__dict__["teap_eap_chaining"] = teap_eap_chaining
        __props__.__dict__["teap_eap_ms_chap_v2"] = teap_eap_ms_chap_v2
        __props__.__dict__["teap_eap_ms_chap_v2_pwd_change"] = teap_eap_ms_chap_v2_pwd_change
        __props__.__dict__["teap_eap_ms_chap_v2_pwd_change_retries"] = teap_eap_ms_chap_v2_pwd_change_retries
        __props__.__dict__["teap_eap_tls"] = teap_eap_tls
        __props__.__dict__["teap_eap_tls_auth_of_expired_certs"] = teap_eap_tls_auth_of_expired_certs
        __props__.__dict__["teap_request_basic_pwd_auth"] = teap_request_basic_pwd_auth
        return AllowedProtocols(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def allow5g(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow 5G. This field is only supported from ISE 3.2.
        """
        return pulumi.get(self, "allow5g")

    @_builtins.property
    @pulumi.getter(name="allowChap")
    def allow_chap(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow CHAP
        """
        return pulumi.get(self, "allow_chap")

    @_builtins.property
    @pulumi.getter(name="allowEapFast")
    def allow_eap_fast(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow EAP Fast
        """
        return pulumi.get(self, "allow_eap_fast")

    @_builtins.property
    @pulumi.getter(name="allowEapMd5")
    def allow_eap_md5(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "allow_eap_md5")

    @_builtins.property
    @pulumi.getter(name="allowEapTls")
    def allow_eap_tls(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "allow_eap_tls")

    @_builtins.property
    @pulumi.getter(name="allowEapTtls")
    def allow_eap_ttls(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow EAP TTLS
        """
        return pulumi.get(self, "allow_eap_ttls")

    @_builtins.property
    @pulumi.getter(name="allowLeap")
    def allow_leap(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow LEAP
        """
        return pulumi.get(self, "allow_leap")

    @_builtins.property
    @pulumi.getter(name="allowMsChapV1")
    def allow_ms_chap_v1(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "allow_ms_chap_v1")

    @_builtins.property
    @pulumi.getter(name="allowMsChapV2")
    def allow_ms_chap_v2(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "allow_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="allowPapAscii")
    def allow_pap_ascii(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "allow_pap_ascii")

    @_builtins.property
    @pulumi.getter(name="allowPeap")
    def allow_peap(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow PEAP
        """
        return pulumi.get(self, "allow_peap")

    @_builtins.property
    @pulumi.getter(name="allowPreferredEapProtocol")
    def allow_preferred_eap_protocol(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow preferred EAP protocol
        """
        return pulumi.get(self, "allow_preferred_eap_protocol")

    @_builtins.property
    @pulumi.getter(name="allowTeap")
    def allow_teap(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow TEAP
        """
        return pulumi.get(self, "allow_teap")

    @_builtins.property
    @pulumi.getter(name="allowWeakCiphersForEap")
    def allow_weak_ciphers_for_eap(self) -> pulumi.Output[_builtins.bool]:
        """
        Allow weak ciphers for EAP
        """
        return pulumi.get(self, "allow_weak_ciphers_for_eap")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eapFastAcceptClientCert")
    def eap_fast_accept_client_cert(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_accept_client_cert")

    @_builtins.property
    @pulumi.getter(name="eapFastAllowMachineAuthentication")
    def eap_fast_allow_machine_authentication(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_allow_machine_authentication")

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtc")
    def eap_fast_eap_gtc(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP GTC
        """
        return pulumi.get(self, "eap_fast_eap_gtc")

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChange")
    def eap_fast_eap_gtc_pwd_change(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change")

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChangeRetries")
    def eap_fast_eap_gtc_pwd_change_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2")
    def eap_fast_eap_ms_chap_v2(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChange")
    def eap_fast_eap_ms_chap_v2_pwd_change(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChangeRetries")
    def eap_fast_eap_ms_chap_v2_pwd_change_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="eapFastEapTls")
    def eap_fast_eap_tls(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "eap_fast_eap_tls")

    @_builtins.property
    @pulumi.getter(name="eapFastEapTlsAuthOfExpiredCerts")
    def eap_fast_eap_tls_auth_of_expired_certs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_tls_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="eapFastEnableEapChaining")
    def eap_fast_enable_eap_chaining(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable EAP chaining
        """
        return pulumi.get(self, "eap_fast_enable_eap_chaining")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAnonymousProvisioning")
    def eap_fast_pacs_allow_anonymous_provisioning(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_anonymous_provisioning")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAuthenticatedProvisioning")
    def eap_fast_pacs_allow_authenticated_provisioning(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_authenticated_provisioning")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowClientCert")
    def eap_fast_pacs_allow_client_cert(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_client_cert")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowMachineAuthentication")
    def eap_fast_pacs_allow_machine_authentication(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_machine_authentication")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtl")
    def eap_fast_pacs_authorization_pac_ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtlUnit")
    def eap_fast_pacs_authorization_pac_ttl_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtl")
    def eap_fast_pacs_machine_pac_ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtlUnit")
    def eap_fast_pacs_machine_pac_ttl_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsServerReturns")
    def eap_fast_pacs_server_returns(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_server_returns")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsStatelessSessionResume")
    def eap_fast_pacs_stateless_session_resume(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_stateless_session_resume")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtl")
    def eap_fast_pacs_tunnel_pac_ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtlUnit")
    def eap_fast_pacs_tunnel_pac_ttl_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsUseProactivePacUpdatePercentage")
    def eap_fast_pacs_use_proactive_pac_update_percentage(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
          - Range: `1`-`100`
        """
        return pulumi.get(self, "eap_fast_pacs_use_proactive_pac_update_percentage")

    @_builtins.property
    @pulumi.getter(name="eapFastUsePacs")
    def eap_fast_use_pacs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Use PACs
        """
        return pulumi.get(self, "eap_fast_use_pacs")

    @_builtins.property
    @pulumi.getter(name="eapTlsAllowAuthOfExpiredCerts")
    def eap_tls_allow_auth_of_expired_certs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow authentication of expired certificates
        """
        return pulumi.get(self, "eap_tls_allow_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="eapTlsEnableStatelessSessionResume")
    def eap_tls_enable_stateless_session_resume(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable stateless session resume
        """
        return pulumi.get(self, "eap_tls_enable_stateless_session_resume")

    @_builtins.property
    @pulumi.getter(name="eapTlsLBit")
    def eap_tls_l_bit(self) -> pulumi.Output[_builtins.bool]:
        """
        EAP TLS L-Bit
        """
        return pulumi.get(self, "eap_tls_l_bit")

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketPercentage")
    def eap_tls_session_ticket_percentage(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
          - Range: `1`-`100`
        """
        return pulumi.get(self, "eap_tls_session_ticket_percentage")

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtl")
    def eap_tls_session_ticket_ttl(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl")

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtlUnit")
    def eap_tls_session_ticket_ttl_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
          - Choices: `SECONDS`, `MINUTES`, `HOURS`, `DAYS`, `WEEKS`
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapTtlsChap")
    def eap_ttls_chap(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow CHAP
        """
        return pulumi.get(self, "eap_ttls_chap")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMd5")
    def eap_ttls_eap_md5(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "eap_ttls_eap_md5")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2")
    def eap_ttls_eap_ms_chap_v2(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChange")
    def eap_ttls_eap_ms_chap_v2_pwd_change(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChangeRetries")
    def eap_ttls_eap_ms_chap_v2_pwd_change_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV1")
    def eap_ttls_ms_chap_v1(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v1")

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV2")
    def eap_ttls_ms_chap_v2(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="eapTtlsPapAscii")
    def eap_ttls_pap_ascii(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "eap_ttls_pap_ascii")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the allowed protocols
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtc")
    def peap_allow_peap_eap_gtc(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP EAP GTC
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChange")
    def peap_allow_peap_eap_gtc_pwd_change(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChangeRetries")
    def peap_allow_peap_eap_gtc_pwd_change_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2")
    def peap_allow_peap_eap_ms_chap_v2(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP EAP MS CHAP v2
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChange")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChangeRetries")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTls")
    def peap_allow_peap_eap_tls(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP EAP TLS
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTlsAuthOfExpiredCerts")
    def peap_allow_peap_eap_tls_auth_of_expired_certs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="peapPeapV0")
    def peap_peap_v0(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow PEAP v0
        """
        return pulumi.get(self, "peap_peap_v0")

    @_builtins.property
    @pulumi.getter(name="preferredEapProtocol")
    def preferred_eap_protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Preferred EAP protocol
          - Choices: `EAP_FAST`, `PEAP`, `LEAP`, `EAP_MD5`, `EAP_TLS`, `EAP_TTLS`, `TEAP`
        """
        return pulumi.get(self, "preferred_eap_protocol")

    @_builtins.property
    @pulumi.getter(name="processHostLookup")
    def process_host_lookup(self) -> pulumi.Output[_builtins.bool]:
        """
        Process host lookup
        """
        return pulumi.get(self, "process_host_lookup")

    @_builtins.property
    @pulumi.getter(name="requireCryptobinding")
    def require_cryptobinding(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Require cryptobinding
        """
        return pulumi.get(self, "require_cryptobinding")

    @_builtins.property
    @pulumi.getter(name="requireMessageAuth")
    def require_message_auth(self) -> pulumi.Output[_builtins.bool]:
        """
        Require message authentication
        """
        return pulumi.get(self, "require_message_auth")

    @_builtins.property
    @pulumi.getter(name="teapDowngradeMsk")
    def teap_downgrade_msk(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow downgrade to MSK
        """
        return pulumi.get(self, "teap_downgrade_msk")

    @_builtins.property
    @pulumi.getter(name="teapEapAcceptClientCertDuringTunnelEst")
    def teap_eap_accept_client_cert_during_tunnel_est(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Accept client certificate during tunnel establishment
        """
        return pulumi.get(self, "teap_eap_accept_client_cert_during_tunnel_est")

    @_builtins.property
    @pulumi.getter(name="teapEapChaining")
    def teap_eap_chaining(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP chaining
        """
        return pulumi.get(self, "teap_eap_chaining")

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2")
    def teap_eap_ms_chap_v2(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChange")
    def teap_eap_ms_chap_v2_pwd_change(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChangeRetries")
    def teap_eap_ms_chap_v2_pwd_change_retries(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
          - Range: `0`-`3`
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="teapEapTls")
    def teap_eap_tls(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "teap_eap_tls")

    @_builtins.property
    @pulumi.getter(name="teapEapTlsAuthOfExpiredCerts")
    def teap_eap_tls_auth_of_expired_certs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        """
        return pulumi.get(self, "teap_eap_tls_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="teapRequestBasicPwdAuth")
    def teap_request_basic_pwd_auth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Request basic password authentication
        """
        return pulumi.get(self, "teap_request_basic_pwd_auth")

