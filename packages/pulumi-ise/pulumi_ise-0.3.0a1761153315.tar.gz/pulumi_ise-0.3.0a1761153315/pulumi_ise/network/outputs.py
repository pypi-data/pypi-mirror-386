# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DeviceIp',
    'GetDeviceIpResult',
]

@pulumi.output_type
class DeviceIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipaddressExclude":
            suggest = "ipaddress_exclude"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipaddress: _builtins.str,
                 ipaddress_exclude: Optional[_builtins.str] = None,
                 mask: Optional[_builtins.str] = None):
        """
        :param _builtins.str ipaddress: It can be either single ip address or ip range address
        :param _builtins.str ipaddress_exclude: It can be either single ip address or ip range address
        :param _builtins.str mask: Subnet mask length
        """
        pulumi.set(__self__, "ipaddress", ipaddress)
        if ipaddress_exclude is not None:
            pulumi.set(__self__, "ipaddress_exclude", ipaddress_exclude)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @_builtins.property
    @pulumi.getter
    def ipaddress(self) -> _builtins.str:
        """
        It can be either single ip address or ip range address
        """
        return pulumi.get(self, "ipaddress")

    @_builtins.property
    @pulumi.getter(name="ipaddressExclude")
    def ipaddress_exclude(self) -> Optional[_builtins.str]:
        """
        It can be either single ip address or ip range address
        """
        return pulumi.get(self, "ipaddress_exclude")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[_builtins.str]:
        """
        Subnet mask length
        """
        return pulumi.get(self, "mask")


@pulumi.output_type
class GetDeviceIpResult(dict):
    def __init__(__self__, *,
                 ipaddress: _builtins.str,
                 ipaddress_exclude: _builtins.str,
                 mask: _builtins.str):
        """
        :param _builtins.str ipaddress: It can be either single ip address or ip range address
        :param _builtins.str ipaddress_exclude: It can be either single ip address or ip range address
        :param _builtins.str mask: Subnet mask length
        """
        pulumi.set(__self__, "ipaddress", ipaddress)
        pulumi.set(__self__, "ipaddress_exclude", ipaddress_exclude)
        pulumi.set(__self__, "mask", mask)

    @_builtins.property
    @pulumi.getter
    def ipaddress(self) -> _builtins.str:
        """
        It can be either single ip address or ip range address
        """
        return pulumi.get(self, "ipaddress")

    @_builtins.property
    @pulumi.getter(name="ipaddressExclude")
    def ipaddress_exclude(self) -> _builtins.str:
        """
        It can be either single ip address or ip range address
        """
        return pulumi.get(self, "ipaddress_exclude")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> _builtins.str:
        """
        Subnet mask length
        """
        return pulumi.get(self, "mask")


