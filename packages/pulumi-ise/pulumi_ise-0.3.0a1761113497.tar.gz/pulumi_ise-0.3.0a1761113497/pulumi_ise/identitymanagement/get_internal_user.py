# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetInternalUserResult',
    'AwaitableGetInternalUserResult',
    'get_internal_user',
    'get_internal_user_output',
]

@pulumi.output_type
class GetInternalUserResult:
    """
    A collection of values returned by getInternalUser.
    """
    def __init__(__self__, account_name_alias=None, change_password=None, custom_attributes=None, description=None, email=None, enable_password=None, enabled=None, first_name=None, id=None, identity_groups=None, last_name=None, name=None, password=None, password_id_store=None, password_never_expires=None):
        if account_name_alias and not isinstance(account_name_alias, str):
            raise TypeError("Expected argument 'account_name_alias' to be a str")
        pulumi.set(__self__, "account_name_alias", account_name_alias)
        if change_password and not isinstance(change_password, bool):
            raise TypeError("Expected argument 'change_password' to be a bool")
        pulumi.set(__self__, "change_password", change_password)
        if custom_attributes and not isinstance(custom_attributes, str):
            raise TypeError("Expected argument 'custom_attributes' to be a str")
        pulumi.set(__self__, "custom_attributes", custom_attributes)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if enable_password and not isinstance(enable_password, str):
            raise TypeError("Expected argument 'enable_password' to be a str")
        pulumi.set(__self__, "enable_password", enable_password)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_groups and not isinstance(identity_groups, str):
            raise TypeError("Expected argument 'identity_groups' to be a str")
        pulumi.set(__self__, "identity_groups", identity_groups)
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        pulumi.set(__self__, "last_name", last_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if password_id_store and not isinstance(password_id_store, str):
            raise TypeError("Expected argument 'password_id_store' to be a str")
        pulumi.set(__self__, "password_id_store", password_id_store)
        if password_never_expires and not isinstance(password_never_expires, bool):
            raise TypeError("Expected argument 'password_never_expires' to be a bool")
        pulumi.set(__self__, "password_never_expires", password_never_expires)

    @_builtins.property
    @pulumi.getter(name="accountNameAlias")
    def account_name_alias(self) -> _builtins.str:
        """
        The Account Name Alias will be used to send email notifications about password expiration. This field is only supported from ISE 3.2.
        """
        return pulumi.get(self, "account_name_alias")

    @_builtins.property
    @pulumi.getter(name="changePassword")
    def change_password(self) -> _builtins.bool:
        """
        Requires the user to change the password
        """
        return pulumi.get(self, "change_password")

    @_builtins.property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> _builtins.str:
        """
        Key value map
        """
        return pulumi.get(self, "custom_attributes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        Email address
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="enablePassword")
    def enable_password(self) -> _builtins.str:
        """
        This field is added in ISE 2.0 to support TACACS+
        """
        return pulumi.get(self, "enable_password")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the user is enabled/disabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        """
        First name of the internal user
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="identityGroups")
    def identity_groups(self) -> _builtins.str:
        """
        Comma separated list of identity group IDs.
        """
        return pulumi.get(self, "identity_groups")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        """
        Last name of the internal user
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the internal user
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        The password of the internal user
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordIdStore")
    def password_id_store(self) -> _builtins.str:
        """
        The ID store where the internal user's password is kept
        """
        return pulumi.get(self, "password_id_store")

    @_builtins.property
    @pulumi.getter(name="passwordNeverExpires")
    def password_never_expires(self) -> _builtins.bool:
        """
        Set to `true` to indicate the user password never expires. This will not apply to Users who are also ISE Admins. This field is only supported from ISE 3.2.
        """
        return pulumi.get(self, "password_never_expires")


class AwaitableGetInternalUserResult(GetInternalUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInternalUserResult(
            account_name_alias=self.account_name_alias,
            change_password=self.change_password,
            custom_attributes=self.custom_attributes,
            description=self.description,
            email=self.email,
            enable_password=self.enable_password,
            enabled=self.enabled,
            first_name=self.first_name,
            id=self.id,
            identity_groups=self.identity_groups,
            last_name=self.last_name,
            name=self.name,
            password=self.password,
            password_id_store=self.password_id_store,
            password_never_expires=self.password_never_expires)


def get_internal_user(id: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInternalUserResult:
    """
    This data source can read the Internal User.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.identitymanagement.get_internal_user(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the internal user
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ise:identitymanagement/getInternalUser:getInternalUser', __args__, opts=opts, typ=GetInternalUserResult).value

    return AwaitableGetInternalUserResult(
        account_name_alias=pulumi.get(__ret__, 'account_name_alias'),
        change_password=pulumi.get(__ret__, 'change_password'),
        custom_attributes=pulumi.get(__ret__, 'custom_attributes'),
        description=pulumi.get(__ret__, 'description'),
        email=pulumi.get(__ret__, 'email'),
        enable_password=pulumi.get(__ret__, 'enable_password'),
        enabled=pulumi.get(__ret__, 'enabled'),
        first_name=pulumi.get(__ret__, 'first_name'),
        id=pulumi.get(__ret__, 'id'),
        identity_groups=pulumi.get(__ret__, 'identity_groups'),
        last_name=pulumi.get(__ret__, 'last_name'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        password_id_store=pulumi.get(__ret__, 'password_id_store'),
        password_never_expires=pulumi.get(__ret__, 'password_never_expires'))
def get_internal_user_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInternalUserResult]:
    """
    This data source can read the Internal User.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.identitymanagement.get_internal_user(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the internal user
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ise:identitymanagement/getInternalUser:getInternalUser', __args__, opts=opts, typ=GetInternalUserResult)
    return __ret__.apply(lambda __response__: GetInternalUserResult(
        account_name_alias=pulumi.get(__response__, 'account_name_alias'),
        change_password=pulumi.get(__response__, 'change_password'),
        custom_attributes=pulumi.get(__response__, 'custom_attributes'),
        description=pulumi.get(__response__, 'description'),
        email=pulumi.get(__response__, 'email'),
        enable_password=pulumi.get(__response__, 'enable_password'),
        enabled=pulumi.get(__response__, 'enabled'),
        first_name=pulumi.get(__response__, 'first_name'),
        id=pulumi.get(__response__, 'id'),
        identity_groups=pulumi.get(__response__, 'identity_groups'),
        last_name=pulumi.get(__response__, 'last_name'),
        name=pulumi.get(__response__, 'name'),
        password=pulumi.get(__response__, 'password'),
        password_id_store=pulumi.get(__response__, 'password_id_store'),
        password_never_expires=pulumi.get(__response__, 'password_never_expires')))
