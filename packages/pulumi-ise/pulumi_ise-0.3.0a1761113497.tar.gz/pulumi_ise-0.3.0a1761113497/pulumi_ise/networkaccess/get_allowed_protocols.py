# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAllowedProtocolsResult',
    'AwaitableGetAllowedProtocolsResult',
    'get_allowed_protocols',
    'get_allowed_protocols_output',
]

@pulumi.output_type
class GetAllowedProtocolsResult:
    """
    A collection of values returned by getAllowedProtocols.
    """
    def __init__(__self__, allow5g=None, allow_chap=None, allow_eap_fast=None, allow_eap_md5=None, allow_eap_tls=None, allow_eap_ttls=None, allow_leap=None, allow_ms_chap_v1=None, allow_ms_chap_v2=None, allow_pap_ascii=None, allow_peap=None, allow_preferred_eap_protocol=None, allow_teap=None, allow_weak_ciphers_for_eap=None, description=None, eap_fast_accept_client_cert=None, eap_fast_allow_machine_authentication=None, eap_fast_eap_gtc=None, eap_fast_eap_gtc_pwd_change=None, eap_fast_eap_gtc_pwd_change_retries=None, eap_fast_eap_ms_chap_v2=None, eap_fast_eap_ms_chap_v2_pwd_change=None, eap_fast_eap_ms_chap_v2_pwd_change_retries=None, eap_fast_eap_tls=None, eap_fast_eap_tls_auth_of_expired_certs=None, eap_fast_enable_eap_chaining=None, eap_fast_pacs_allow_anonymous_provisioning=None, eap_fast_pacs_allow_authenticated_provisioning=None, eap_fast_pacs_allow_client_cert=None, eap_fast_pacs_allow_machine_authentication=None, eap_fast_pacs_authorization_pac_ttl=None, eap_fast_pacs_authorization_pac_ttl_unit=None, eap_fast_pacs_machine_pac_ttl=None, eap_fast_pacs_machine_pac_ttl_unit=None, eap_fast_pacs_server_returns=None, eap_fast_pacs_stateless_session_resume=None, eap_fast_pacs_tunnel_pac_ttl=None, eap_fast_pacs_tunnel_pac_ttl_unit=None, eap_fast_pacs_use_proactive_pac_update_percentage=None, eap_fast_use_pacs=None, eap_tls_allow_auth_of_expired_certs=None, eap_tls_enable_stateless_session_resume=None, eap_tls_l_bit=None, eap_tls_session_ticket_percentage=None, eap_tls_session_ticket_ttl=None, eap_tls_session_ticket_ttl_unit=None, eap_ttls_chap=None, eap_ttls_eap_md5=None, eap_ttls_eap_ms_chap_v2=None, eap_ttls_eap_ms_chap_v2_pwd_change=None, eap_ttls_eap_ms_chap_v2_pwd_change_retries=None, eap_ttls_ms_chap_v1=None, eap_ttls_ms_chap_v2=None, eap_ttls_pap_ascii=None, id=None, name=None, peap_allow_peap_eap_gtc=None, peap_allow_peap_eap_gtc_pwd_change=None, peap_allow_peap_eap_gtc_pwd_change_retries=None, peap_allow_peap_eap_ms_chap_v2=None, peap_allow_peap_eap_ms_chap_v2_pwd_change=None, peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=None, peap_allow_peap_eap_tls=None, peap_allow_peap_eap_tls_auth_of_expired_certs=None, peap_peap_v0=None, preferred_eap_protocol=None, process_host_lookup=None, require_cryptobinding=None, require_message_auth=None, teap_downgrade_msk=None, teap_eap_accept_client_cert_during_tunnel_est=None, teap_eap_chaining=None, teap_eap_ms_chap_v2=None, teap_eap_ms_chap_v2_pwd_change=None, teap_eap_ms_chap_v2_pwd_change_retries=None, teap_eap_tls=None, teap_eap_tls_auth_of_expired_certs=None, teap_request_basic_pwd_auth=None):
        if allow5g and not isinstance(allow5g, bool):
            raise TypeError("Expected argument 'allow5g' to be a bool")
        pulumi.set(__self__, "allow5g", allow5g)
        if allow_chap and not isinstance(allow_chap, bool):
            raise TypeError("Expected argument 'allow_chap' to be a bool")
        pulumi.set(__self__, "allow_chap", allow_chap)
        if allow_eap_fast and not isinstance(allow_eap_fast, bool):
            raise TypeError("Expected argument 'allow_eap_fast' to be a bool")
        pulumi.set(__self__, "allow_eap_fast", allow_eap_fast)
        if allow_eap_md5 and not isinstance(allow_eap_md5, bool):
            raise TypeError("Expected argument 'allow_eap_md5' to be a bool")
        pulumi.set(__self__, "allow_eap_md5", allow_eap_md5)
        if allow_eap_tls and not isinstance(allow_eap_tls, bool):
            raise TypeError("Expected argument 'allow_eap_tls' to be a bool")
        pulumi.set(__self__, "allow_eap_tls", allow_eap_tls)
        if allow_eap_ttls and not isinstance(allow_eap_ttls, bool):
            raise TypeError("Expected argument 'allow_eap_ttls' to be a bool")
        pulumi.set(__self__, "allow_eap_ttls", allow_eap_ttls)
        if allow_leap and not isinstance(allow_leap, bool):
            raise TypeError("Expected argument 'allow_leap' to be a bool")
        pulumi.set(__self__, "allow_leap", allow_leap)
        if allow_ms_chap_v1 and not isinstance(allow_ms_chap_v1, bool):
            raise TypeError("Expected argument 'allow_ms_chap_v1' to be a bool")
        pulumi.set(__self__, "allow_ms_chap_v1", allow_ms_chap_v1)
        if allow_ms_chap_v2 and not isinstance(allow_ms_chap_v2, bool):
            raise TypeError("Expected argument 'allow_ms_chap_v2' to be a bool")
        pulumi.set(__self__, "allow_ms_chap_v2", allow_ms_chap_v2)
        if allow_pap_ascii and not isinstance(allow_pap_ascii, bool):
            raise TypeError("Expected argument 'allow_pap_ascii' to be a bool")
        pulumi.set(__self__, "allow_pap_ascii", allow_pap_ascii)
        if allow_peap and not isinstance(allow_peap, bool):
            raise TypeError("Expected argument 'allow_peap' to be a bool")
        pulumi.set(__self__, "allow_peap", allow_peap)
        if allow_preferred_eap_protocol and not isinstance(allow_preferred_eap_protocol, bool):
            raise TypeError("Expected argument 'allow_preferred_eap_protocol' to be a bool")
        pulumi.set(__self__, "allow_preferred_eap_protocol", allow_preferred_eap_protocol)
        if allow_teap and not isinstance(allow_teap, bool):
            raise TypeError("Expected argument 'allow_teap' to be a bool")
        pulumi.set(__self__, "allow_teap", allow_teap)
        if allow_weak_ciphers_for_eap and not isinstance(allow_weak_ciphers_for_eap, bool):
            raise TypeError("Expected argument 'allow_weak_ciphers_for_eap' to be a bool")
        pulumi.set(__self__, "allow_weak_ciphers_for_eap", allow_weak_ciphers_for_eap)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if eap_fast_accept_client_cert and not isinstance(eap_fast_accept_client_cert, bool):
            raise TypeError("Expected argument 'eap_fast_accept_client_cert' to be a bool")
        pulumi.set(__self__, "eap_fast_accept_client_cert", eap_fast_accept_client_cert)
        if eap_fast_allow_machine_authentication and not isinstance(eap_fast_allow_machine_authentication, bool):
            raise TypeError("Expected argument 'eap_fast_allow_machine_authentication' to be a bool")
        pulumi.set(__self__, "eap_fast_allow_machine_authentication", eap_fast_allow_machine_authentication)
        if eap_fast_eap_gtc and not isinstance(eap_fast_eap_gtc, bool):
            raise TypeError("Expected argument 'eap_fast_eap_gtc' to be a bool")
        pulumi.set(__self__, "eap_fast_eap_gtc", eap_fast_eap_gtc)
        if eap_fast_eap_gtc_pwd_change and not isinstance(eap_fast_eap_gtc_pwd_change, bool):
            raise TypeError("Expected argument 'eap_fast_eap_gtc_pwd_change' to be a bool")
        pulumi.set(__self__, "eap_fast_eap_gtc_pwd_change", eap_fast_eap_gtc_pwd_change)
        if eap_fast_eap_gtc_pwd_change_retries and not isinstance(eap_fast_eap_gtc_pwd_change_retries, int):
            raise TypeError("Expected argument 'eap_fast_eap_gtc_pwd_change_retries' to be a int")
        pulumi.set(__self__, "eap_fast_eap_gtc_pwd_change_retries", eap_fast_eap_gtc_pwd_change_retries)
        if eap_fast_eap_ms_chap_v2 and not isinstance(eap_fast_eap_ms_chap_v2, bool):
            raise TypeError("Expected argument 'eap_fast_eap_ms_chap_v2' to be a bool")
        pulumi.set(__self__, "eap_fast_eap_ms_chap_v2", eap_fast_eap_ms_chap_v2)
        if eap_fast_eap_ms_chap_v2_pwd_change and not isinstance(eap_fast_eap_ms_chap_v2_pwd_change, bool):
            raise TypeError("Expected argument 'eap_fast_eap_ms_chap_v2_pwd_change' to be a bool")
        pulumi.set(__self__, "eap_fast_eap_ms_chap_v2_pwd_change", eap_fast_eap_ms_chap_v2_pwd_change)
        if eap_fast_eap_ms_chap_v2_pwd_change_retries and not isinstance(eap_fast_eap_ms_chap_v2_pwd_change_retries, int):
            raise TypeError("Expected argument 'eap_fast_eap_ms_chap_v2_pwd_change_retries' to be a int")
        pulumi.set(__self__, "eap_fast_eap_ms_chap_v2_pwd_change_retries", eap_fast_eap_ms_chap_v2_pwd_change_retries)
        if eap_fast_eap_tls and not isinstance(eap_fast_eap_tls, bool):
            raise TypeError("Expected argument 'eap_fast_eap_tls' to be a bool")
        pulumi.set(__self__, "eap_fast_eap_tls", eap_fast_eap_tls)
        if eap_fast_eap_tls_auth_of_expired_certs and not isinstance(eap_fast_eap_tls_auth_of_expired_certs, bool):
            raise TypeError("Expected argument 'eap_fast_eap_tls_auth_of_expired_certs' to be a bool")
        pulumi.set(__self__, "eap_fast_eap_tls_auth_of_expired_certs", eap_fast_eap_tls_auth_of_expired_certs)
        if eap_fast_enable_eap_chaining and not isinstance(eap_fast_enable_eap_chaining, bool):
            raise TypeError("Expected argument 'eap_fast_enable_eap_chaining' to be a bool")
        pulumi.set(__self__, "eap_fast_enable_eap_chaining", eap_fast_enable_eap_chaining)
        if eap_fast_pacs_allow_anonymous_provisioning and not isinstance(eap_fast_pacs_allow_anonymous_provisioning, bool):
            raise TypeError("Expected argument 'eap_fast_pacs_allow_anonymous_provisioning' to be a bool")
        pulumi.set(__self__, "eap_fast_pacs_allow_anonymous_provisioning", eap_fast_pacs_allow_anonymous_provisioning)
        if eap_fast_pacs_allow_authenticated_provisioning and not isinstance(eap_fast_pacs_allow_authenticated_provisioning, bool):
            raise TypeError("Expected argument 'eap_fast_pacs_allow_authenticated_provisioning' to be a bool")
        pulumi.set(__self__, "eap_fast_pacs_allow_authenticated_provisioning", eap_fast_pacs_allow_authenticated_provisioning)
        if eap_fast_pacs_allow_client_cert and not isinstance(eap_fast_pacs_allow_client_cert, bool):
            raise TypeError("Expected argument 'eap_fast_pacs_allow_client_cert' to be a bool")
        pulumi.set(__self__, "eap_fast_pacs_allow_client_cert", eap_fast_pacs_allow_client_cert)
        if eap_fast_pacs_allow_machine_authentication and not isinstance(eap_fast_pacs_allow_machine_authentication, bool):
            raise TypeError("Expected argument 'eap_fast_pacs_allow_machine_authentication' to be a bool")
        pulumi.set(__self__, "eap_fast_pacs_allow_machine_authentication", eap_fast_pacs_allow_machine_authentication)
        if eap_fast_pacs_authorization_pac_ttl and not isinstance(eap_fast_pacs_authorization_pac_ttl, int):
            raise TypeError("Expected argument 'eap_fast_pacs_authorization_pac_ttl' to be a int")
        pulumi.set(__self__, "eap_fast_pacs_authorization_pac_ttl", eap_fast_pacs_authorization_pac_ttl)
        if eap_fast_pacs_authorization_pac_ttl_unit and not isinstance(eap_fast_pacs_authorization_pac_ttl_unit, str):
            raise TypeError("Expected argument 'eap_fast_pacs_authorization_pac_ttl_unit' to be a str")
        pulumi.set(__self__, "eap_fast_pacs_authorization_pac_ttl_unit", eap_fast_pacs_authorization_pac_ttl_unit)
        if eap_fast_pacs_machine_pac_ttl and not isinstance(eap_fast_pacs_machine_pac_ttl, int):
            raise TypeError("Expected argument 'eap_fast_pacs_machine_pac_ttl' to be a int")
        pulumi.set(__self__, "eap_fast_pacs_machine_pac_ttl", eap_fast_pacs_machine_pac_ttl)
        if eap_fast_pacs_machine_pac_ttl_unit and not isinstance(eap_fast_pacs_machine_pac_ttl_unit, str):
            raise TypeError("Expected argument 'eap_fast_pacs_machine_pac_ttl_unit' to be a str")
        pulumi.set(__self__, "eap_fast_pacs_machine_pac_ttl_unit", eap_fast_pacs_machine_pac_ttl_unit)
        if eap_fast_pacs_server_returns and not isinstance(eap_fast_pacs_server_returns, bool):
            raise TypeError("Expected argument 'eap_fast_pacs_server_returns' to be a bool")
        pulumi.set(__self__, "eap_fast_pacs_server_returns", eap_fast_pacs_server_returns)
        if eap_fast_pacs_stateless_session_resume and not isinstance(eap_fast_pacs_stateless_session_resume, bool):
            raise TypeError("Expected argument 'eap_fast_pacs_stateless_session_resume' to be a bool")
        pulumi.set(__self__, "eap_fast_pacs_stateless_session_resume", eap_fast_pacs_stateless_session_resume)
        if eap_fast_pacs_tunnel_pac_ttl and not isinstance(eap_fast_pacs_tunnel_pac_ttl, int):
            raise TypeError("Expected argument 'eap_fast_pacs_tunnel_pac_ttl' to be a int")
        pulumi.set(__self__, "eap_fast_pacs_tunnel_pac_ttl", eap_fast_pacs_tunnel_pac_ttl)
        if eap_fast_pacs_tunnel_pac_ttl_unit and not isinstance(eap_fast_pacs_tunnel_pac_ttl_unit, str):
            raise TypeError("Expected argument 'eap_fast_pacs_tunnel_pac_ttl_unit' to be a str")
        pulumi.set(__self__, "eap_fast_pacs_tunnel_pac_ttl_unit", eap_fast_pacs_tunnel_pac_ttl_unit)
        if eap_fast_pacs_use_proactive_pac_update_percentage and not isinstance(eap_fast_pacs_use_proactive_pac_update_percentage, int):
            raise TypeError("Expected argument 'eap_fast_pacs_use_proactive_pac_update_percentage' to be a int")
        pulumi.set(__self__, "eap_fast_pacs_use_proactive_pac_update_percentage", eap_fast_pacs_use_proactive_pac_update_percentage)
        if eap_fast_use_pacs and not isinstance(eap_fast_use_pacs, bool):
            raise TypeError("Expected argument 'eap_fast_use_pacs' to be a bool")
        pulumi.set(__self__, "eap_fast_use_pacs", eap_fast_use_pacs)
        if eap_tls_allow_auth_of_expired_certs and not isinstance(eap_tls_allow_auth_of_expired_certs, bool):
            raise TypeError("Expected argument 'eap_tls_allow_auth_of_expired_certs' to be a bool")
        pulumi.set(__self__, "eap_tls_allow_auth_of_expired_certs", eap_tls_allow_auth_of_expired_certs)
        if eap_tls_enable_stateless_session_resume and not isinstance(eap_tls_enable_stateless_session_resume, bool):
            raise TypeError("Expected argument 'eap_tls_enable_stateless_session_resume' to be a bool")
        pulumi.set(__self__, "eap_tls_enable_stateless_session_resume", eap_tls_enable_stateless_session_resume)
        if eap_tls_l_bit and not isinstance(eap_tls_l_bit, bool):
            raise TypeError("Expected argument 'eap_tls_l_bit' to be a bool")
        pulumi.set(__self__, "eap_tls_l_bit", eap_tls_l_bit)
        if eap_tls_session_ticket_percentage and not isinstance(eap_tls_session_ticket_percentage, int):
            raise TypeError("Expected argument 'eap_tls_session_ticket_percentage' to be a int")
        pulumi.set(__self__, "eap_tls_session_ticket_percentage", eap_tls_session_ticket_percentage)
        if eap_tls_session_ticket_ttl and not isinstance(eap_tls_session_ticket_ttl, int):
            raise TypeError("Expected argument 'eap_tls_session_ticket_ttl' to be a int")
        pulumi.set(__self__, "eap_tls_session_ticket_ttl", eap_tls_session_ticket_ttl)
        if eap_tls_session_ticket_ttl_unit and not isinstance(eap_tls_session_ticket_ttl_unit, str):
            raise TypeError("Expected argument 'eap_tls_session_ticket_ttl_unit' to be a str")
        pulumi.set(__self__, "eap_tls_session_ticket_ttl_unit", eap_tls_session_ticket_ttl_unit)
        if eap_ttls_chap and not isinstance(eap_ttls_chap, bool):
            raise TypeError("Expected argument 'eap_ttls_chap' to be a bool")
        pulumi.set(__self__, "eap_ttls_chap", eap_ttls_chap)
        if eap_ttls_eap_md5 and not isinstance(eap_ttls_eap_md5, bool):
            raise TypeError("Expected argument 'eap_ttls_eap_md5' to be a bool")
        pulumi.set(__self__, "eap_ttls_eap_md5", eap_ttls_eap_md5)
        if eap_ttls_eap_ms_chap_v2 and not isinstance(eap_ttls_eap_ms_chap_v2, bool):
            raise TypeError("Expected argument 'eap_ttls_eap_ms_chap_v2' to be a bool")
        pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2", eap_ttls_eap_ms_chap_v2)
        if eap_ttls_eap_ms_chap_v2_pwd_change and not isinstance(eap_ttls_eap_ms_chap_v2_pwd_change, bool):
            raise TypeError("Expected argument 'eap_ttls_eap_ms_chap_v2_pwd_change' to be a bool")
        pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2_pwd_change", eap_ttls_eap_ms_chap_v2_pwd_change)
        if eap_ttls_eap_ms_chap_v2_pwd_change_retries and not isinstance(eap_ttls_eap_ms_chap_v2_pwd_change_retries, int):
            raise TypeError("Expected argument 'eap_ttls_eap_ms_chap_v2_pwd_change_retries' to be a int")
        pulumi.set(__self__, "eap_ttls_eap_ms_chap_v2_pwd_change_retries", eap_ttls_eap_ms_chap_v2_pwd_change_retries)
        if eap_ttls_ms_chap_v1 and not isinstance(eap_ttls_ms_chap_v1, bool):
            raise TypeError("Expected argument 'eap_ttls_ms_chap_v1' to be a bool")
        pulumi.set(__self__, "eap_ttls_ms_chap_v1", eap_ttls_ms_chap_v1)
        if eap_ttls_ms_chap_v2 and not isinstance(eap_ttls_ms_chap_v2, bool):
            raise TypeError("Expected argument 'eap_ttls_ms_chap_v2' to be a bool")
        pulumi.set(__self__, "eap_ttls_ms_chap_v2", eap_ttls_ms_chap_v2)
        if eap_ttls_pap_ascii and not isinstance(eap_ttls_pap_ascii, bool):
            raise TypeError("Expected argument 'eap_ttls_pap_ascii' to be a bool")
        pulumi.set(__self__, "eap_ttls_pap_ascii", eap_ttls_pap_ascii)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peap_allow_peap_eap_gtc and not isinstance(peap_allow_peap_eap_gtc, bool):
            raise TypeError("Expected argument 'peap_allow_peap_eap_gtc' to be a bool")
        pulumi.set(__self__, "peap_allow_peap_eap_gtc", peap_allow_peap_eap_gtc)
        if peap_allow_peap_eap_gtc_pwd_change and not isinstance(peap_allow_peap_eap_gtc_pwd_change, bool):
            raise TypeError("Expected argument 'peap_allow_peap_eap_gtc_pwd_change' to be a bool")
        pulumi.set(__self__, "peap_allow_peap_eap_gtc_pwd_change", peap_allow_peap_eap_gtc_pwd_change)
        if peap_allow_peap_eap_gtc_pwd_change_retries and not isinstance(peap_allow_peap_eap_gtc_pwd_change_retries, int):
            raise TypeError("Expected argument 'peap_allow_peap_eap_gtc_pwd_change_retries' to be a int")
        pulumi.set(__self__, "peap_allow_peap_eap_gtc_pwd_change_retries", peap_allow_peap_eap_gtc_pwd_change_retries)
        if peap_allow_peap_eap_ms_chap_v2 and not isinstance(peap_allow_peap_eap_ms_chap_v2, bool):
            raise TypeError("Expected argument 'peap_allow_peap_eap_ms_chap_v2' to be a bool")
        pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2", peap_allow_peap_eap_ms_chap_v2)
        if peap_allow_peap_eap_ms_chap_v2_pwd_change and not isinstance(peap_allow_peap_eap_ms_chap_v2_pwd_change, bool):
            raise TypeError("Expected argument 'peap_allow_peap_eap_ms_chap_v2_pwd_change' to be a bool")
        pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2_pwd_change", peap_allow_peap_eap_ms_chap_v2_pwd_change)
        if peap_allow_peap_eap_ms_chap_v2_pwd_change_retries and not isinstance(peap_allow_peap_eap_ms_chap_v2_pwd_change_retries, int):
            raise TypeError("Expected argument 'peap_allow_peap_eap_ms_chap_v2_pwd_change_retries' to be a int")
        pulumi.set(__self__, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries", peap_allow_peap_eap_ms_chap_v2_pwd_change_retries)
        if peap_allow_peap_eap_tls and not isinstance(peap_allow_peap_eap_tls, bool):
            raise TypeError("Expected argument 'peap_allow_peap_eap_tls' to be a bool")
        pulumi.set(__self__, "peap_allow_peap_eap_tls", peap_allow_peap_eap_tls)
        if peap_allow_peap_eap_tls_auth_of_expired_certs and not isinstance(peap_allow_peap_eap_tls_auth_of_expired_certs, bool):
            raise TypeError("Expected argument 'peap_allow_peap_eap_tls_auth_of_expired_certs' to be a bool")
        pulumi.set(__self__, "peap_allow_peap_eap_tls_auth_of_expired_certs", peap_allow_peap_eap_tls_auth_of_expired_certs)
        if peap_peap_v0 and not isinstance(peap_peap_v0, bool):
            raise TypeError("Expected argument 'peap_peap_v0' to be a bool")
        pulumi.set(__self__, "peap_peap_v0", peap_peap_v0)
        if preferred_eap_protocol and not isinstance(preferred_eap_protocol, str):
            raise TypeError("Expected argument 'preferred_eap_protocol' to be a str")
        pulumi.set(__self__, "preferred_eap_protocol", preferred_eap_protocol)
        if process_host_lookup and not isinstance(process_host_lookup, bool):
            raise TypeError("Expected argument 'process_host_lookup' to be a bool")
        pulumi.set(__self__, "process_host_lookup", process_host_lookup)
        if require_cryptobinding and not isinstance(require_cryptobinding, bool):
            raise TypeError("Expected argument 'require_cryptobinding' to be a bool")
        pulumi.set(__self__, "require_cryptobinding", require_cryptobinding)
        if require_message_auth and not isinstance(require_message_auth, bool):
            raise TypeError("Expected argument 'require_message_auth' to be a bool")
        pulumi.set(__self__, "require_message_auth", require_message_auth)
        if teap_downgrade_msk and not isinstance(teap_downgrade_msk, bool):
            raise TypeError("Expected argument 'teap_downgrade_msk' to be a bool")
        pulumi.set(__self__, "teap_downgrade_msk", teap_downgrade_msk)
        if teap_eap_accept_client_cert_during_tunnel_est and not isinstance(teap_eap_accept_client_cert_during_tunnel_est, bool):
            raise TypeError("Expected argument 'teap_eap_accept_client_cert_during_tunnel_est' to be a bool")
        pulumi.set(__self__, "teap_eap_accept_client_cert_during_tunnel_est", teap_eap_accept_client_cert_during_tunnel_est)
        if teap_eap_chaining and not isinstance(teap_eap_chaining, bool):
            raise TypeError("Expected argument 'teap_eap_chaining' to be a bool")
        pulumi.set(__self__, "teap_eap_chaining", teap_eap_chaining)
        if teap_eap_ms_chap_v2 and not isinstance(teap_eap_ms_chap_v2, bool):
            raise TypeError("Expected argument 'teap_eap_ms_chap_v2' to be a bool")
        pulumi.set(__self__, "teap_eap_ms_chap_v2", teap_eap_ms_chap_v2)
        if teap_eap_ms_chap_v2_pwd_change and not isinstance(teap_eap_ms_chap_v2_pwd_change, bool):
            raise TypeError("Expected argument 'teap_eap_ms_chap_v2_pwd_change' to be a bool")
        pulumi.set(__self__, "teap_eap_ms_chap_v2_pwd_change", teap_eap_ms_chap_v2_pwd_change)
        if teap_eap_ms_chap_v2_pwd_change_retries and not isinstance(teap_eap_ms_chap_v2_pwd_change_retries, int):
            raise TypeError("Expected argument 'teap_eap_ms_chap_v2_pwd_change_retries' to be a int")
        pulumi.set(__self__, "teap_eap_ms_chap_v2_pwd_change_retries", teap_eap_ms_chap_v2_pwd_change_retries)
        if teap_eap_tls and not isinstance(teap_eap_tls, bool):
            raise TypeError("Expected argument 'teap_eap_tls' to be a bool")
        pulumi.set(__self__, "teap_eap_tls", teap_eap_tls)
        if teap_eap_tls_auth_of_expired_certs and not isinstance(teap_eap_tls_auth_of_expired_certs, bool):
            raise TypeError("Expected argument 'teap_eap_tls_auth_of_expired_certs' to be a bool")
        pulumi.set(__self__, "teap_eap_tls_auth_of_expired_certs", teap_eap_tls_auth_of_expired_certs)
        if teap_request_basic_pwd_auth and not isinstance(teap_request_basic_pwd_auth, bool):
            raise TypeError("Expected argument 'teap_request_basic_pwd_auth' to be a bool")
        pulumi.set(__self__, "teap_request_basic_pwd_auth", teap_request_basic_pwd_auth)

    @_builtins.property
    @pulumi.getter
    def allow5g(self) -> _builtins.bool:
        """
        Allow 5G. This field is only supported from ISE 3.2.
        """
        return pulumi.get(self, "allow5g")

    @_builtins.property
    @pulumi.getter(name="allowChap")
    def allow_chap(self) -> _builtins.bool:
        """
        Allow CHAP
        """
        return pulumi.get(self, "allow_chap")

    @_builtins.property
    @pulumi.getter(name="allowEapFast")
    def allow_eap_fast(self) -> _builtins.bool:
        """
        Allow EAP Fast
        """
        return pulumi.get(self, "allow_eap_fast")

    @_builtins.property
    @pulumi.getter(name="allowEapMd5")
    def allow_eap_md5(self) -> _builtins.bool:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "allow_eap_md5")

    @_builtins.property
    @pulumi.getter(name="allowEapTls")
    def allow_eap_tls(self) -> _builtins.bool:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "allow_eap_tls")

    @_builtins.property
    @pulumi.getter(name="allowEapTtls")
    def allow_eap_ttls(self) -> _builtins.bool:
        """
        Allow EAP TTLS
        """
        return pulumi.get(self, "allow_eap_ttls")

    @_builtins.property
    @pulumi.getter(name="allowLeap")
    def allow_leap(self) -> _builtins.bool:
        """
        Allow LEAP
        """
        return pulumi.get(self, "allow_leap")

    @_builtins.property
    @pulumi.getter(name="allowMsChapV1")
    def allow_ms_chap_v1(self) -> _builtins.bool:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "allow_ms_chap_v1")

    @_builtins.property
    @pulumi.getter(name="allowMsChapV2")
    def allow_ms_chap_v2(self) -> _builtins.bool:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "allow_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="allowPapAscii")
    def allow_pap_ascii(self) -> _builtins.bool:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "allow_pap_ascii")

    @_builtins.property
    @pulumi.getter(name="allowPeap")
    def allow_peap(self) -> _builtins.bool:
        """
        Allow PEAP
        """
        return pulumi.get(self, "allow_peap")

    @_builtins.property
    @pulumi.getter(name="allowPreferredEapProtocol")
    def allow_preferred_eap_protocol(self) -> _builtins.bool:
        """
        Allow preferred EAP protocol
        """
        return pulumi.get(self, "allow_preferred_eap_protocol")

    @_builtins.property
    @pulumi.getter(name="allowTeap")
    def allow_teap(self) -> _builtins.bool:
        """
        Allow TEAP
        """
        return pulumi.get(self, "allow_teap")

    @_builtins.property
    @pulumi.getter(name="allowWeakCiphersForEap")
    def allow_weak_ciphers_for_eap(self) -> _builtins.bool:
        """
        Allow weak ciphers for EAP
        """
        return pulumi.get(self, "allow_weak_ciphers_for_eap")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eapFastAcceptClientCert")
    def eap_fast_accept_client_cert(self) -> _builtins.bool:
        """
        Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_accept_client_cert")

    @_builtins.property
    @pulumi.getter(name="eapFastAllowMachineAuthentication")
    def eap_fast_allow_machine_authentication(self) -> _builtins.bool:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`.
        """
        return pulumi.get(self, "eap_fast_allow_machine_authentication")

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtc")
    def eap_fast_eap_gtc(self) -> _builtins.bool:
        """
        Allow EAP GTC
        """
        return pulumi.get(self, "eap_fast_eap_gtc")

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChange")
    def eap_fast_eap_gtc_pwd_change(self) -> _builtins.bool:
        """
        Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change")

    @_builtins.property
    @pulumi.getter(name="eapFastEapGtcPwdChangeRetries")
    def eap_fast_eap_gtc_pwd_change_retries(self) -> _builtins.int:
        """
        EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_gtc_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2")
    def eap_fast_eap_ms_chap_v2(self) -> _builtins.bool:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChange")
    def eap_fast_eap_ms_chap_v2_pwd_change(self) -> _builtins.bool:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="eapFastEapMsChapV2PwdChangeRetries")
    def eap_fast_eap_ms_chap_v2_pwd_change_retries(self) -> _builtins.int:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="eapFastEapTls")
    def eap_fast_eap_tls(self) -> _builtins.bool:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "eap_fast_eap_tls")

    @_builtins.property
    @pulumi.getter(name="eapFastEapTlsAuthOfExpiredCerts")
    def eap_fast_eap_tls_auth_of_expired_certs(self) -> _builtins.bool:
        """
        Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`.
        """
        return pulumi.get(self, "eap_fast_eap_tls_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="eapFastEnableEapChaining")
    def eap_fast_enable_eap_chaining(self) -> _builtins.bool:
        """
        Enable EAP chaining
        """
        return pulumi.get(self, "eap_fast_enable_eap_chaining")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAnonymousProvisioning")
    def eap_fast_pacs_allow_anonymous_provisioning(self) -> _builtins.bool:
        """
        Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_anonymous_provisioning")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowAuthenticatedProvisioning")
    def eap_fast_pacs_allow_authenticated_provisioning(self) -> _builtins.bool:
        """
        Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_authenticated_provisioning")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowClientCert")
    def eap_fast_pacs_allow_client_cert(self) -> _builtins.bool:
        """
        Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_client_cert")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAllowMachineAuthentication")
    def eap_fast_pacs_allow_machine_authentication(self) -> _builtins.bool:
        """
        Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_allow_machine_authentication")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtl")
    def eap_fast_pacs_authorization_pac_ttl(self) -> _builtins.int:
        """
        Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsAuthorizationPacTtlUnit")
    def eap_fast_pacs_authorization_pac_ttl_unit(self) -> _builtins.str:
        """
        Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_authorization_pac_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtl")
    def eap_fast_pacs_machine_pac_ttl(self) -> _builtins.int:
        """
        Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsMachinePacTtlUnit")
    def eap_fast_pacs_machine_pac_ttl_unit(self) -> _builtins.str:
        """
        Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_machine_pac_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsServerReturns")
    def eap_fast_pacs_server_returns(self) -> _builtins.bool:
        """
        Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_server_returns")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsStatelessSessionResume")
    def eap_fast_pacs_stateless_session_resume(self) -> _builtins.bool:
        """
        Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_stateless_session_resume")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtl")
    def eap_fast_pacs_tunnel_pac_ttl(self) -> _builtins.int:
        """
        PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsTunnelPacTtlUnit")
    def eap_fast_pacs_tunnel_pac_ttl_unit(self) -> _builtins.str:
        """
        PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_tunnel_pac_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapFastPacsUseProactivePacUpdatePercentage")
    def eap_fast_pacs_use_proactive_pac_update_percentage(self) -> _builtins.int:
        """
        Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`.
        """
        return pulumi.get(self, "eap_fast_pacs_use_proactive_pac_update_percentage")

    @_builtins.property
    @pulumi.getter(name="eapFastUsePacs")
    def eap_fast_use_pacs(self) -> _builtins.bool:
        """
        Use PACs
        """
        return pulumi.get(self, "eap_fast_use_pacs")

    @_builtins.property
    @pulumi.getter(name="eapTlsAllowAuthOfExpiredCerts")
    def eap_tls_allow_auth_of_expired_certs(self) -> _builtins.bool:
        """
        Allow authentication of expired certificates
        """
        return pulumi.get(self, "eap_tls_allow_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="eapTlsEnableStatelessSessionResume")
    def eap_tls_enable_stateless_session_resume(self) -> _builtins.bool:
        """
        Enable stateless session resume
        """
        return pulumi.get(self, "eap_tls_enable_stateless_session_resume")

    @_builtins.property
    @pulumi.getter(name="eapTlsLBit")
    def eap_tls_l_bit(self) -> _builtins.bool:
        """
        EAP TLS L-Bit
        """
        return pulumi.get(self, "eap_tls_l_bit")

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketPercentage")
    def eap_tls_session_ticket_percentage(self) -> _builtins.int:
        """
        Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_tls_session_ticket_percentage")

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtl")
    def eap_tls_session_ticket_ttl(self) -> _builtins.int:
        """
        Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl")

    @_builtins.property
    @pulumi.getter(name="eapTlsSessionTicketTtlUnit")
    def eap_tls_session_ticket_ttl_unit(self) -> _builtins.str:
        """
        Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`.
        """
        return pulumi.get(self, "eap_tls_session_ticket_ttl_unit")

    @_builtins.property
    @pulumi.getter(name="eapTtlsChap")
    def eap_ttls_chap(self) -> _builtins.bool:
        """
        Allow CHAP
        """
        return pulumi.get(self, "eap_ttls_chap")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMd5")
    def eap_ttls_eap_md5(self) -> _builtins.bool:
        """
        Allow EAP MD5
        """
        return pulumi.get(self, "eap_ttls_eap_md5")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2")
    def eap_ttls_eap_ms_chap_v2(self) -> _builtins.bool:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChange")
    def eap_ttls_eap_ms_chap_v2_pwd_change(self) -> _builtins.bool:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="eapTtlsEapMsChapV2PwdChangeRetries")
    def eap_ttls_eap_ms_chap_v2_pwd_change_retries(self) -> _builtins.int:
        """
        EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "eap_ttls_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV1")
    def eap_ttls_ms_chap_v1(self) -> _builtins.bool:
        """
        Allow MS CHAP v1
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v1")

    @_builtins.property
    @pulumi.getter(name="eapTtlsMsChapV2")
    def eap_ttls_ms_chap_v2(self) -> _builtins.bool:
        """
        Allow MS CHAP v2
        """
        return pulumi.get(self, "eap_ttls_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="eapTtlsPapAscii")
    def eap_ttls_pap_ascii(self) -> _builtins.bool:
        """
        Allow PAP ASCII
        """
        return pulumi.get(self, "eap_ttls_pap_ascii")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the allowed protocols
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtc")
    def peap_allow_peap_eap_gtc(self) -> _builtins.bool:
        """
        Allow PEAP EAP GTC
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChange")
    def peap_allow_peap_eap_gtc_pwd_change(self) -> _builtins.bool:
        """
        Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapGtcPwdChangeRetries")
    def peap_allow_peap_eap_gtc_pwd_change_retries(self) -> _builtins.int:
        """
        PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_gtc_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2")
    def peap_allow_peap_eap_ms_chap_v2(self) -> _builtins.bool:
        """
        Allow PEAP EAP MS CHAP v2
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChange")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change(self) -> _builtins.bool:
        """
        Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapMsChapV2PwdChangeRetries")
    def peap_allow_peap_eap_ms_chap_v2_pwd_change_retries(self) -> _builtins.int:
        """
        Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTls")
    def peap_allow_peap_eap_tls(self) -> _builtins.bool:
        """
        Allow PEAP EAP TLS
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls")

    @_builtins.property
    @pulumi.getter(name="peapAllowPeapEapTlsAuthOfExpiredCerts")
    def peap_allow_peap_eap_tls_auth_of_expired_certs(self) -> _builtins.bool:
        """
        Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`.
        """
        return pulumi.get(self, "peap_allow_peap_eap_tls_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="peapPeapV0")
    def peap_peap_v0(self) -> _builtins.bool:
        """
        Allow PEAP v0
        """
        return pulumi.get(self, "peap_peap_v0")

    @_builtins.property
    @pulumi.getter(name="preferredEapProtocol")
    def preferred_eap_protocol(self) -> _builtins.str:
        """
        Preferred EAP protocol
        """
        return pulumi.get(self, "preferred_eap_protocol")

    @_builtins.property
    @pulumi.getter(name="processHostLookup")
    def process_host_lookup(self) -> _builtins.bool:
        """
        Process host lookup
        """
        return pulumi.get(self, "process_host_lookup")

    @_builtins.property
    @pulumi.getter(name="requireCryptobinding")
    def require_cryptobinding(self) -> _builtins.bool:
        """
        Require cryptobinding
        """
        return pulumi.get(self, "require_cryptobinding")

    @_builtins.property
    @pulumi.getter(name="requireMessageAuth")
    def require_message_auth(self) -> _builtins.bool:
        """
        Require message authentication
        """
        return pulumi.get(self, "require_message_auth")

    @_builtins.property
    @pulumi.getter(name="teapDowngradeMsk")
    def teap_downgrade_msk(self) -> _builtins.bool:
        """
        Allow downgrade to MSK
        """
        return pulumi.get(self, "teap_downgrade_msk")

    @_builtins.property
    @pulumi.getter(name="teapEapAcceptClientCertDuringTunnelEst")
    def teap_eap_accept_client_cert_during_tunnel_est(self) -> _builtins.bool:
        """
        Accept client certificate during tunnel establishment
        """
        return pulumi.get(self, "teap_eap_accept_client_cert_during_tunnel_est")

    @_builtins.property
    @pulumi.getter(name="teapEapChaining")
    def teap_eap_chaining(self) -> _builtins.bool:
        """
        Allow EAP chaining
        """
        return pulumi.get(self, "teap_eap_chaining")

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2")
    def teap_eap_ms_chap_v2(self) -> _builtins.bool:
        """
        Allow EAP MS CHAP v2
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2")

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChange")
    def teap_eap_ms_chap_v2_pwd_change(self) -> _builtins.bool:
        """
        Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change")

    @_builtins.property
    @pulumi.getter(name="teapEapMsChapV2PwdChangeRetries")
    def teap_eap_ms_chap_v2_pwd_change_retries(self) -> _builtins.int:
        """
        EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`.
        """
        return pulumi.get(self, "teap_eap_ms_chap_v2_pwd_change_retries")

    @_builtins.property
    @pulumi.getter(name="teapEapTls")
    def teap_eap_tls(self) -> _builtins.bool:
        """
        Allow EAP TLS
        """
        return pulumi.get(self, "teap_eap_tls")

    @_builtins.property
    @pulumi.getter(name="teapEapTlsAuthOfExpiredCerts")
    def teap_eap_tls_auth_of_expired_certs(self) -> _builtins.bool:
        """
        Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`.
        """
        return pulumi.get(self, "teap_eap_tls_auth_of_expired_certs")

    @_builtins.property
    @pulumi.getter(name="teapRequestBasicPwdAuth")
    def teap_request_basic_pwd_auth(self) -> _builtins.bool:
        """
        Request basic password authentication
        """
        return pulumi.get(self, "teap_request_basic_pwd_auth")


class AwaitableGetAllowedProtocolsResult(GetAllowedProtocolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAllowedProtocolsResult(
            allow5g=self.allow5g,
            allow_chap=self.allow_chap,
            allow_eap_fast=self.allow_eap_fast,
            allow_eap_md5=self.allow_eap_md5,
            allow_eap_tls=self.allow_eap_tls,
            allow_eap_ttls=self.allow_eap_ttls,
            allow_leap=self.allow_leap,
            allow_ms_chap_v1=self.allow_ms_chap_v1,
            allow_ms_chap_v2=self.allow_ms_chap_v2,
            allow_pap_ascii=self.allow_pap_ascii,
            allow_peap=self.allow_peap,
            allow_preferred_eap_protocol=self.allow_preferred_eap_protocol,
            allow_teap=self.allow_teap,
            allow_weak_ciphers_for_eap=self.allow_weak_ciphers_for_eap,
            description=self.description,
            eap_fast_accept_client_cert=self.eap_fast_accept_client_cert,
            eap_fast_allow_machine_authentication=self.eap_fast_allow_machine_authentication,
            eap_fast_eap_gtc=self.eap_fast_eap_gtc,
            eap_fast_eap_gtc_pwd_change=self.eap_fast_eap_gtc_pwd_change,
            eap_fast_eap_gtc_pwd_change_retries=self.eap_fast_eap_gtc_pwd_change_retries,
            eap_fast_eap_ms_chap_v2=self.eap_fast_eap_ms_chap_v2,
            eap_fast_eap_ms_chap_v2_pwd_change=self.eap_fast_eap_ms_chap_v2_pwd_change,
            eap_fast_eap_ms_chap_v2_pwd_change_retries=self.eap_fast_eap_ms_chap_v2_pwd_change_retries,
            eap_fast_eap_tls=self.eap_fast_eap_tls,
            eap_fast_eap_tls_auth_of_expired_certs=self.eap_fast_eap_tls_auth_of_expired_certs,
            eap_fast_enable_eap_chaining=self.eap_fast_enable_eap_chaining,
            eap_fast_pacs_allow_anonymous_provisioning=self.eap_fast_pacs_allow_anonymous_provisioning,
            eap_fast_pacs_allow_authenticated_provisioning=self.eap_fast_pacs_allow_authenticated_provisioning,
            eap_fast_pacs_allow_client_cert=self.eap_fast_pacs_allow_client_cert,
            eap_fast_pacs_allow_machine_authentication=self.eap_fast_pacs_allow_machine_authentication,
            eap_fast_pacs_authorization_pac_ttl=self.eap_fast_pacs_authorization_pac_ttl,
            eap_fast_pacs_authorization_pac_ttl_unit=self.eap_fast_pacs_authorization_pac_ttl_unit,
            eap_fast_pacs_machine_pac_ttl=self.eap_fast_pacs_machine_pac_ttl,
            eap_fast_pacs_machine_pac_ttl_unit=self.eap_fast_pacs_machine_pac_ttl_unit,
            eap_fast_pacs_server_returns=self.eap_fast_pacs_server_returns,
            eap_fast_pacs_stateless_session_resume=self.eap_fast_pacs_stateless_session_resume,
            eap_fast_pacs_tunnel_pac_ttl=self.eap_fast_pacs_tunnel_pac_ttl,
            eap_fast_pacs_tunnel_pac_ttl_unit=self.eap_fast_pacs_tunnel_pac_ttl_unit,
            eap_fast_pacs_use_proactive_pac_update_percentage=self.eap_fast_pacs_use_proactive_pac_update_percentage,
            eap_fast_use_pacs=self.eap_fast_use_pacs,
            eap_tls_allow_auth_of_expired_certs=self.eap_tls_allow_auth_of_expired_certs,
            eap_tls_enable_stateless_session_resume=self.eap_tls_enable_stateless_session_resume,
            eap_tls_l_bit=self.eap_tls_l_bit,
            eap_tls_session_ticket_percentage=self.eap_tls_session_ticket_percentage,
            eap_tls_session_ticket_ttl=self.eap_tls_session_ticket_ttl,
            eap_tls_session_ticket_ttl_unit=self.eap_tls_session_ticket_ttl_unit,
            eap_ttls_chap=self.eap_ttls_chap,
            eap_ttls_eap_md5=self.eap_ttls_eap_md5,
            eap_ttls_eap_ms_chap_v2=self.eap_ttls_eap_ms_chap_v2,
            eap_ttls_eap_ms_chap_v2_pwd_change=self.eap_ttls_eap_ms_chap_v2_pwd_change,
            eap_ttls_eap_ms_chap_v2_pwd_change_retries=self.eap_ttls_eap_ms_chap_v2_pwd_change_retries,
            eap_ttls_ms_chap_v1=self.eap_ttls_ms_chap_v1,
            eap_ttls_ms_chap_v2=self.eap_ttls_ms_chap_v2,
            eap_ttls_pap_ascii=self.eap_ttls_pap_ascii,
            id=self.id,
            name=self.name,
            peap_allow_peap_eap_gtc=self.peap_allow_peap_eap_gtc,
            peap_allow_peap_eap_gtc_pwd_change=self.peap_allow_peap_eap_gtc_pwd_change,
            peap_allow_peap_eap_gtc_pwd_change_retries=self.peap_allow_peap_eap_gtc_pwd_change_retries,
            peap_allow_peap_eap_ms_chap_v2=self.peap_allow_peap_eap_ms_chap_v2,
            peap_allow_peap_eap_ms_chap_v2_pwd_change=self.peap_allow_peap_eap_ms_chap_v2_pwd_change,
            peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=self.peap_allow_peap_eap_ms_chap_v2_pwd_change_retries,
            peap_allow_peap_eap_tls=self.peap_allow_peap_eap_tls,
            peap_allow_peap_eap_tls_auth_of_expired_certs=self.peap_allow_peap_eap_tls_auth_of_expired_certs,
            peap_peap_v0=self.peap_peap_v0,
            preferred_eap_protocol=self.preferred_eap_protocol,
            process_host_lookup=self.process_host_lookup,
            require_cryptobinding=self.require_cryptobinding,
            require_message_auth=self.require_message_auth,
            teap_downgrade_msk=self.teap_downgrade_msk,
            teap_eap_accept_client_cert_during_tunnel_est=self.teap_eap_accept_client_cert_during_tunnel_est,
            teap_eap_chaining=self.teap_eap_chaining,
            teap_eap_ms_chap_v2=self.teap_eap_ms_chap_v2,
            teap_eap_ms_chap_v2_pwd_change=self.teap_eap_ms_chap_v2_pwd_change,
            teap_eap_ms_chap_v2_pwd_change_retries=self.teap_eap_ms_chap_v2_pwd_change_retries,
            teap_eap_tls=self.teap_eap_tls,
            teap_eap_tls_auth_of_expired_certs=self.teap_eap_tls_auth_of_expired_certs,
            teap_request_basic_pwd_auth=self.teap_request_basic_pwd_auth)


def get_allowed_protocols(id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAllowedProtocolsResult:
    """
    This data source can read an allowed protocols policy element.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.networkaccess.get_allowed_protocols(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the allowed protocols
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ise:networkaccess/getAllowedProtocols:getAllowedProtocols', __args__, opts=opts, typ=GetAllowedProtocolsResult).value

    return AwaitableGetAllowedProtocolsResult(
        allow5g=pulumi.get(__ret__, 'allow5g'),
        allow_chap=pulumi.get(__ret__, 'allow_chap'),
        allow_eap_fast=pulumi.get(__ret__, 'allow_eap_fast'),
        allow_eap_md5=pulumi.get(__ret__, 'allow_eap_md5'),
        allow_eap_tls=pulumi.get(__ret__, 'allow_eap_tls'),
        allow_eap_ttls=pulumi.get(__ret__, 'allow_eap_ttls'),
        allow_leap=pulumi.get(__ret__, 'allow_leap'),
        allow_ms_chap_v1=pulumi.get(__ret__, 'allow_ms_chap_v1'),
        allow_ms_chap_v2=pulumi.get(__ret__, 'allow_ms_chap_v2'),
        allow_pap_ascii=pulumi.get(__ret__, 'allow_pap_ascii'),
        allow_peap=pulumi.get(__ret__, 'allow_peap'),
        allow_preferred_eap_protocol=pulumi.get(__ret__, 'allow_preferred_eap_protocol'),
        allow_teap=pulumi.get(__ret__, 'allow_teap'),
        allow_weak_ciphers_for_eap=pulumi.get(__ret__, 'allow_weak_ciphers_for_eap'),
        description=pulumi.get(__ret__, 'description'),
        eap_fast_accept_client_cert=pulumi.get(__ret__, 'eap_fast_accept_client_cert'),
        eap_fast_allow_machine_authentication=pulumi.get(__ret__, 'eap_fast_allow_machine_authentication'),
        eap_fast_eap_gtc=pulumi.get(__ret__, 'eap_fast_eap_gtc'),
        eap_fast_eap_gtc_pwd_change=pulumi.get(__ret__, 'eap_fast_eap_gtc_pwd_change'),
        eap_fast_eap_gtc_pwd_change_retries=pulumi.get(__ret__, 'eap_fast_eap_gtc_pwd_change_retries'),
        eap_fast_eap_ms_chap_v2=pulumi.get(__ret__, 'eap_fast_eap_ms_chap_v2'),
        eap_fast_eap_ms_chap_v2_pwd_change=pulumi.get(__ret__, 'eap_fast_eap_ms_chap_v2_pwd_change'),
        eap_fast_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__ret__, 'eap_fast_eap_ms_chap_v2_pwd_change_retries'),
        eap_fast_eap_tls=pulumi.get(__ret__, 'eap_fast_eap_tls'),
        eap_fast_eap_tls_auth_of_expired_certs=pulumi.get(__ret__, 'eap_fast_eap_tls_auth_of_expired_certs'),
        eap_fast_enable_eap_chaining=pulumi.get(__ret__, 'eap_fast_enable_eap_chaining'),
        eap_fast_pacs_allow_anonymous_provisioning=pulumi.get(__ret__, 'eap_fast_pacs_allow_anonymous_provisioning'),
        eap_fast_pacs_allow_authenticated_provisioning=pulumi.get(__ret__, 'eap_fast_pacs_allow_authenticated_provisioning'),
        eap_fast_pacs_allow_client_cert=pulumi.get(__ret__, 'eap_fast_pacs_allow_client_cert'),
        eap_fast_pacs_allow_machine_authentication=pulumi.get(__ret__, 'eap_fast_pacs_allow_machine_authentication'),
        eap_fast_pacs_authorization_pac_ttl=pulumi.get(__ret__, 'eap_fast_pacs_authorization_pac_ttl'),
        eap_fast_pacs_authorization_pac_ttl_unit=pulumi.get(__ret__, 'eap_fast_pacs_authorization_pac_ttl_unit'),
        eap_fast_pacs_machine_pac_ttl=pulumi.get(__ret__, 'eap_fast_pacs_machine_pac_ttl'),
        eap_fast_pacs_machine_pac_ttl_unit=pulumi.get(__ret__, 'eap_fast_pacs_machine_pac_ttl_unit'),
        eap_fast_pacs_server_returns=pulumi.get(__ret__, 'eap_fast_pacs_server_returns'),
        eap_fast_pacs_stateless_session_resume=pulumi.get(__ret__, 'eap_fast_pacs_stateless_session_resume'),
        eap_fast_pacs_tunnel_pac_ttl=pulumi.get(__ret__, 'eap_fast_pacs_tunnel_pac_ttl'),
        eap_fast_pacs_tunnel_pac_ttl_unit=pulumi.get(__ret__, 'eap_fast_pacs_tunnel_pac_ttl_unit'),
        eap_fast_pacs_use_proactive_pac_update_percentage=pulumi.get(__ret__, 'eap_fast_pacs_use_proactive_pac_update_percentage'),
        eap_fast_use_pacs=pulumi.get(__ret__, 'eap_fast_use_pacs'),
        eap_tls_allow_auth_of_expired_certs=pulumi.get(__ret__, 'eap_tls_allow_auth_of_expired_certs'),
        eap_tls_enable_stateless_session_resume=pulumi.get(__ret__, 'eap_tls_enable_stateless_session_resume'),
        eap_tls_l_bit=pulumi.get(__ret__, 'eap_tls_l_bit'),
        eap_tls_session_ticket_percentage=pulumi.get(__ret__, 'eap_tls_session_ticket_percentage'),
        eap_tls_session_ticket_ttl=pulumi.get(__ret__, 'eap_tls_session_ticket_ttl'),
        eap_tls_session_ticket_ttl_unit=pulumi.get(__ret__, 'eap_tls_session_ticket_ttl_unit'),
        eap_ttls_chap=pulumi.get(__ret__, 'eap_ttls_chap'),
        eap_ttls_eap_md5=pulumi.get(__ret__, 'eap_ttls_eap_md5'),
        eap_ttls_eap_ms_chap_v2=pulumi.get(__ret__, 'eap_ttls_eap_ms_chap_v2'),
        eap_ttls_eap_ms_chap_v2_pwd_change=pulumi.get(__ret__, 'eap_ttls_eap_ms_chap_v2_pwd_change'),
        eap_ttls_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__ret__, 'eap_ttls_eap_ms_chap_v2_pwd_change_retries'),
        eap_ttls_ms_chap_v1=pulumi.get(__ret__, 'eap_ttls_ms_chap_v1'),
        eap_ttls_ms_chap_v2=pulumi.get(__ret__, 'eap_ttls_ms_chap_v2'),
        eap_ttls_pap_ascii=pulumi.get(__ret__, 'eap_ttls_pap_ascii'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        peap_allow_peap_eap_gtc=pulumi.get(__ret__, 'peap_allow_peap_eap_gtc'),
        peap_allow_peap_eap_gtc_pwd_change=pulumi.get(__ret__, 'peap_allow_peap_eap_gtc_pwd_change'),
        peap_allow_peap_eap_gtc_pwd_change_retries=pulumi.get(__ret__, 'peap_allow_peap_eap_gtc_pwd_change_retries'),
        peap_allow_peap_eap_ms_chap_v2=pulumi.get(__ret__, 'peap_allow_peap_eap_ms_chap_v2'),
        peap_allow_peap_eap_ms_chap_v2_pwd_change=pulumi.get(__ret__, 'peap_allow_peap_eap_ms_chap_v2_pwd_change'),
        peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__ret__, 'peap_allow_peap_eap_ms_chap_v2_pwd_change_retries'),
        peap_allow_peap_eap_tls=pulumi.get(__ret__, 'peap_allow_peap_eap_tls'),
        peap_allow_peap_eap_tls_auth_of_expired_certs=pulumi.get(__ret__, 'peap_allow_peap_eap_tls_auth_of_expired_certs'),
        peap_peap_v0=pulumi.get(__ret__, 'peap_peap_v0'),
        preferred_eap_protocol=pulumi.get(__ret__, 'preferred_eap_protocol'),
        process_host_lookup=pulumi.get(__ret__, 'process_host_lookup'),
        require_cryptobinding=pulumi.get(__ret__, 'require_cryptobinding'),
        require_message_auth=pulumi.get(__ret__, 'require_message_auth'),
        teap_downgrade_msk=pulumi.get(__ret__, 'teap_downgrade_msk'),
        teap_eap_accept_client_cert_during_tunnel_est=pulumi.get(__ret__, 'teap_eap_accept_client_cert_during_tunnel_est'),
        teap_eap_chaining=pulumi.get(__ret__, 'teap_eap_chaining'),
        teap_eap_ms_chap_v2=pulumi.get(__ret__, 'teap_eap_ms_chap_v2'),
        teap_eap_ms_chap_v2_pwd_change=pulumi.get(__ret__, 'teap_eap_ms_chap_v2_pwd_change'),
        teap_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__ret__, 'teap_eap_ms_chap_v2_pwd_change_retries'),
        teap_eap_tls=pulumi.get(__ret__, 'teap_eap_tls'),
        teap_eap_tls_auth_of_expired_certs=pulumi.get(__ret__, 'teap_eap_tls_auth_of_expired_certs'),
        teap_request_basic_pwd_auth=pulumi.get(__ret__, 'teap_request_basic_pwd_auth'))
def get_allowed_protocols_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAllowedProtocolsResult]:
    """
    This data source can read an allowed protocols policy element.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ise as ise

    example = ise.networkaccess.get_allowed_protocols(id="76d24097-41c4-4558-a4d0-a8c07ac08470")
    ```


    :param _builtins.str id: The id of the object
    :param _builtins.str name: The name of the allowed protocols
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ise:networkaccess/getAllowedProtocols:getAllowedProtocols', __args__, opts=opts, typ=GetAllowedProtocolsResult)
    return __ret__.apply(lambda __response__: GetAllowedProtocolsResult(
        allow5g=pulumi.get(__response__, 'allow5g'),
        allow_chap=pulumi.get(__response__, 'allow_chap'),
        allow_eap_fast=pulumi.get(__response__, 'allow_eap_fast'),
        allow_eap_md5=pulumi.get(__response__, 'allow_eap_md5'),
        allow_eap_tls=pulumi.get(__response__, 'allow_eap_tls'),
        allow_eap_ttls=pulumi.get(__response__, 'allow_eap_ttls'),
        allow_leap=pulumi.get(__response__, 'allow_leap'),
        allow_ms_chap_v1=pulumi.get(__response__, 'allow_ms_chap_v1'),
        allow_ms_chap_v2=pulumi.get(__response__, 'allow_ms_chap_v2'),
        allow_pap_ascii=pulumi.get(__response__, 'allow_pap_ascii'),
        allow_peap=pulumi.get(__response__, 'allow_peap'),
        allow_preferred_eap_protocol=pulumi.get(__response__, 'allow_preferred_eap_protocol'),
        allow_teap=pulumi.get(__response__, 'allow_teap'),
        allow_weak_ciphers_for_eap=pulumi.get(__response__, 'allow_weak_ciphers_for_eap'),
        description=pulumi.get(__response__, 'description'),
        eap_fast_accept_client_cert=pulumi.get(__response__, 'eap_fast_accept_client_cert'),
        eap_fast_allow_machine_authentication=pulumi.get(__response__, 'eap_fast_allow_machine_authentication'),
        eap_fast_eap_gtc=pulumi.get(__response__, 'eap_fast_eap_gtc'),
        eap_fast_eap_gtc_pwd_change=pulumi.get(__response__, 'eap_fast_eap_gtc_pwd_change'),
        eap_fast_eap_gtc_pwd_change_retries=pulumi.get(__response__, 'eap_fast_eap_gtc_pwd_change_retries'),
        eap_fast_eap_ms_chap_v2=pulumi.get(__response__, 'eap_fast_eap_ms_chap_v2'),
        eap_fast_eap_ms_chap_v2_pwd_change=pulumi.get(__response__, 'eap_fast_eap_ms_chap_v2_pwd_change'),
        eap_fast_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__response__, 'eap_fast_eap_ms_chap_v2_pwd_change_retries'),
        eap_fast_eap_tls=pulumi.get(__response__, 'eap_fast_eap_tls'),
        eap_fast_eap_tls_auth_of_expired_certs=pulumi.get(__response__, 'eap_fast_eap_tls_auth_of_expired_certs'),
        eap_fast_enable_eap_chaining=pulumi.get(__response__, 'eap_fast_enable_eap_chaining'),
        eap_fast_pacs_allow_anonymous_provisioning=pulumi.get(__response__, 'eap_fast_pacs_allow_anonymous_provisioning'),
        eap_fast_pacs_allow_authenticated_provisioning=pulumi.get(__response__, 'eap_fast_pacs_allow_authenticated_provisioning'),
        eap_fast_pacs_allow_client_cert=pulumi.get(__response__, 'eap_fast_pacs_allow_client_cert'),
        eap_fast_pacs_allow_machine_authentication=pulumi.get(__response__, 'eap_fast_pacs_allow_machine_authentication'),
        eap_fast_pacs_authorization_pac_ttl=pulumi.get(__response__, 'eap_fast_pacs_authorization_pac_ttl'),
        eap_fast_pacs_authorization_pac_ttl_unit=pulumi.get(__response__, 'eap_fast_pacs_authorization_pac_ttl_unit'),
        eap_fast_pacs_machine_pac_ttl=pulumi.get(__response__, 'eap_fast_pacs_machine_pac_ttl'),
        eap_fast_pacs_machine_pac_ttl_unit=pulumi.get(__response__, 'eap_fast_pacs_machine_pac_ttl_unit'),
        eap_fast_pacs_server_returns=pulumi.get(__response__, 'eap_fast_pacs_server_returns'),
        eap_fast_pacs_stateless_session_resume=pulumi.get(__response__, 'eap_fast_pacs_stateless_session_resume'),
        eap_fast_pacs_tunnel_pac_ttl=pulumi.get(__response__, 'eap_fast_pacs_tunnel_pac_ttl'),
        eap_fast_pacs_tunnel_pac_ttl_unit=pulumi.get(__response__, 'eap_fast_pacs_tunnel_pac_ttl_unit'),
        eap_fast_pacs_use_proactive_pac_update_percentage=pulumi.get(__response__, 'eap_fast_pacs_use_proactive_pac_update_percentage'),
        eap_fast_use_pacs=pulumi.get(__response__, 'eap_fast_use_pacs'),
        eap_tls_allow_auth_of_expired_certs=pulumi.get(__response__, 'eap_tls_allow_auth_of_expired_certs'),
        eap_tls_enable_stateless_session_resume=pulumi.get(__response__, 'eap_tls_enable_stateless_session_resume'),
        eap_tls_l_bit=pulumi.get(__response__, 'eap_tls_l_bit'),
        eap_tls_session_ticket_percentage=pulumi.get(__response__, 'eap_tls_session_ticket_percentage'),
        eap_tls_session_ticket_ttl=pulumi.get(__response__, 'eap_tls_session_ticket_ttl'),
        eap_tls_session_ticket_ttl_unit=pulumi.get(__response__, 'eap_tls_session_ticket_ttl_unit'),
        eap_ttls_chap=pulumi.get(__response__, 'eap_ttls_chap'),
        eap_ttls_eap_md5=pulumi.get(__response__, 'eap_ttls_eap_md5'),
        eap_ttls_eap_ms_chap_v2=pulumi.get(__response__, 'eap_ttls_eap_ms_chap_v2'),
        eap_ttls_eap_ms_chap_v2_pwd_change=pulumi.get(__response__, 'eap_ttls_eap_ms_chap_v2_pwd_change'),
        eap_ttls_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__response__, 'eap_ttls_eap_ms_chap_v2_pwd_change_retries'),
        eap_ttls_ms_chap_v1=pulumi.get(__response__, 'eap_ttls_ms_chap_v1'),
        eap_ttls_ms_chap_v2=pulumi.get(__response__, 'eap_ttls_ms_chap_v2'),
        eap_ttls_pap_ascii=pulumi.get(__response__, 'eap_ttls_pap_ascii'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        peap_allow_peap_eap_gtc=pulumi.get(__response__, 'peap_allow_peap_eap_gtc'),
        peap_allow_peap_eap_gtc_pwd_change=pulumi.get(__response__, 'peap_allow_peap_eap_gtc_pwd_change'),
        peap_allow_peap_eap_gtc_pwd_change_retries=pulumi.get(__response__, 'peap_allow_peap_eap_gtc_pwd_change_retries'),
        peap_allow_peap_eap_ms_chap_v2=pulumi.get(__response__, 'peap_allow_peap_eap_ms_chap_v2'),
        peap_allow_peap_eap_ms_chap_v2_pwd_change=pulumi.get(__response__, 'peap_allow_peap_eap_ms_chap_v2_pwd_change'),
        peap_allow_peap_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__response__, 'peap_allow_peap_eap_ms_chap_v2_pwd_change_retries'),
        peap_allow_peap_eap_tls=pulumi.get(__response__, 'peap_allow_peap_eap_tls'),
        peap_allow_peap_eap_tls_auth_of_expired_certs=pulumi.get(__response__, 'peap_allow_peap_eap_tls_auth_of_expired_certs'),
        peap_peap_v0=pulumi.get(__response__, 'peap_peap_v0'),
        preferred_eap_protocol=pulumi.get(__response__, 'preferred_eap_protocol'),
        process_host_lookup=pulumi.get(__response__, 'process_host_lookup'),
        require_cryptobinding=pulumi.get(__response__, 'require_cryptobinding'),
        require_message_auth=pulumi.get(__response__, 'require_message_auth'),
        teap_downgrade_msk=pulumi.get(__response__, 'teap_downgrade_msk'),
        teap_eap_accept_client_cert_during_tunnel_est=pulumi.get(__response__, 'teap_eap_accept_client_cert_during_tunnel_est'),
        teap_eap_chaining=pulumi.get(__response__, 'teap_eap_chaining'),
        teap_eap_ms_chap_v2=pulumi.get(__response__, 'teap_eap_ms_chap_v2'),
        teap_eap_ms_chap_v2_pwd_change=pulumi.get(__response__, 'teap_eap_ms_chap_v2_pwd_change'),
        teap_eap_ms_chap_v2_pwd_change_retries=pulumi.get(__response__, 'teap_eap_ms_chap_v2_pwd_change_retries'),
        teap_eap_tls=pulumi.get(__response__, 'teap_eap_tls'),
        teap_eap_tls_auth_of_expired_certs=pulumi.get(__response__, 'teap_eap_tls_auth_of_expired_certs'),
        teap_request_basic_pwd_auth=pulumi.get(__response__, 'teap_request_basic_pwd_auth')))
