stages:
  - build
  - test
  - release
  - deploy

variables:
  PYTHON_VERSION: 3.9
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  JSONDOC_PATH: "unitelabs-cdk_${CI_COMMIT_TAG}.json"
  VERSION_REGEX: '/^v\d+\.\d+\.\d+$/'
  UV_INDEX_UNITELABS_USERNAME: gitlab-ci-token
  UV_INDEX_UNITELABS_PASSWORD: "${CI_JOB_TOKEN}"

cache:
  paths:
    - .cache/pip
    - .venv/

.standard-rules:
  image: "python:${PYTHON_VERSION}-slim"
  before_script:
    - pip install hatch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

compile:
  stage: build
  extends:
    - .standard-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: false
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - hatch build
  artifacts:
    paths:
      - "dist/"

format:
  stage: test
  extends:
    - .standard-rules
  needs: ["compile"]
  script:
    - hatch fmt --check src

lint:
  stage: test
  extends:
    - .standard-rules
  needs: ["compile"]
  script:
    - hatch run lint-ci
  artifacts:
    reports:
      codequality: $CI_PROJECT_DIR/code-quality-report.json

test:
  stage: test
  extends:
    - .standard-rules
  needs: ["compile"]
  script:
    - hatch test --all --cov=src --cov-report=term --cov-report=xml tests
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

package:
  stage: release
  variables:
    HATCH_INDEX_REPO: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    HATCH_INDEX_USER: gitlab-ci-token
    HATCH_INDEX_AUTH: "$CI_JOB_TOKEN"
  extends:
    - .standard-rules
  script:
    - hatch build
    - hatch publish
  rules:
    - if: $CI_COMMIT_TAG

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "release job"
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG"
  rules:
    - if: $CI_PROJECT_ROOT_NAMESPACE == 'unitelabs' && $CI_COMMIT_TAG

publish:
  stage: release
  extends:
    - .standard-rules
  needs: ["release"]
  variables:
    HATCH_INDEX_REPO: https://upload.pypi.org/legacy/
    HATCH_INDEX_USER: __token__
    HATCH_INDEX_AUTH: "${PYPI_TOKEN}"
  script:
    - hatch build
    - hatch publish
  rules:
    - if: $CI_PROJECT_ROOT_NAMESPACE == 'unitelabs' && $CI_COMMIT_TAG && '$CI_COMMIT_TAG =~ $VERSION_REGEX'
