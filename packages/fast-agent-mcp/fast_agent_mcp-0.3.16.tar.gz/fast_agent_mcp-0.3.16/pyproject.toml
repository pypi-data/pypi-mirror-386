[project]
name = "fast-agent-mcp"
version = "0.3.16"
description = "Define, Prompt and Test MCP enabled Agents and Workflows"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Shaun Smith", email = "fastagent@llmindset.co.uk"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent"
]
requires-python = ">=3.13.5,<3.14"
dependencies = [
    "fastapi>=0.115.6",
    "mcp==1.19.0",
    "opentelemetry-distro>=0.55b0",
    "opentelemetry-exporter-otlp-proto-http>=1.7.0",
    "pydantic-settings>=2.7.0",
    "pydantic>=2.10.4",
    "pyyaml>=6.0.2",
    "rich>=14.1.0",
    "typer>=0.15.1",
    "anthropic>=0.71.0",
    "openai[aiohttp]>=2.6.1",
    "azure-identity>=1.14.0",
    "boto3>=1.35.0",
    "prompt-toolkit>=3.0.52",
    "aiohttp>=3.13.1",
    "opentelemetry-instrumentation-openai>=0.43.1; python_version >= '3.10' and python_version < '4.0'",
    "opentelemetry-instrumentation-anthropic>=0.43.1; python_version >= '3.10' and python_version < '4.0'",
    "opentelemetry-instrumentation-mcp>=0.43.1; python_version >= '3.10' and python_version < '4.0'",
    "google-genai>=1.46.0",
    "opentelemetry-instrumentation-google-genai>=0.3b0",
    "tensorzero>=2025.7.5",
    "deprecated>=1.2.18",
    "a2a-sdk>=0.3.10",
    "email-validator>=2.2.0",
    "pyperclip>=1.9.0",
    "keyring>=24.3.1",
    "textual>=6.2.1",
    "python-frontmatter>=1.1.0",
]

# For Azure OpenAI with DefaultAzureCredential support, install with: pip install fast-agent-mcp[azure]
azure = [
    "azure-identity>=1.14.0"
]
dev = [
    "anthropic>=0.42.0",
    "pre-commit>=4.0.1",
    "pydantic>=2.10.4",
    "pyyaml>=6.0.2",
    "ruff>=0.8.4",
    "tomli>=2.2.1",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.custom]

[tool.hatch.build]
include = [
    "src/fast_agent/**/*.py",
    "src/fast_agent/resources/**/*",
    "src/fast_agent/py.typed",
    "examples/**/*",
]

[tool.hatch.build.targets.wheel]
packages = ["src/fast_agent"]
artifacts = [
    "src/fast_agent/resources/examples/**/*",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "e2e: tests that connect to external resources (llms)",
    "integration: marks tests as integration tests",
    "simulated_endpoints: marks tests that use simulated external endpoints"
]

# Filter out utcnow depreciation warnings from the boto3 library
filterwarnings = [
    "ignore:datetime\\.datetime\\.utcnow\\(\\) is deprecated.*:DeprecationWarning:botocore\\.auth",
    "ignore:datetime\\.datetime\\.utcnow\\(\\) is deprecated.*:DeprecationWarning:botocore\\.endpoint$",
]

# Other pytest options can go here too
testpaths = ["tests"]

[dependency-groups]
dev = [
    "anthropic>=0.49.0",
    "pre-commit>=4.0.1",
    "pydantic>=2.10.4",
    "pyyaml>=6.0.2",
    "ruff>=0.8.4",
    "tomli>=2.2.1",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=6.1.1",
    "ipdb>=0.13.13",
]

[project.scripts]
fast-agent = "fast_agent.cli.__main__:main"
fast-agent-mcp = "fast_agent.cli.__main__:main"
fastagent = "fast_agent.cli.__main__:app"
prompt-server = "fast_agent.mcp.prompts.__main__:main"


[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "TCH"  # type checking
]
ignore=["E501"]

# More lenient settings for existing code
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN"]  # Don't require type annotations in tests

[tool.uv.workspace]
members = ["examples/tensorzero/mcp_server"]
