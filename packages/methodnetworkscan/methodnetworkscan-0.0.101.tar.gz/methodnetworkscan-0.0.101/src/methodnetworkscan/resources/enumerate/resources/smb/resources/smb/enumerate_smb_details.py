# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from .......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......common.resources.protocol.resources.smb.auth_method import AuthMethod
from ......common.resources.protocol.resources.smb.smb_auth_attempt import SmbAuthAttempt
from ......common.resources.protocol.resources.smb.smb_server_info import SmbServerInfo
from ......common.resources.protocol.resources.smb.smb_share import SmbShare
from ......common.resources.protocol.resources.smb.smb_version import SmbVersion


class EnumerateSmbDetails(UniversalBaseModel):
    target: str
    version: typing.Optional[SmbVersion] = None
    supported_versions: typing.Optional[typing.List[SmbVersion]] = pydantic.Field(
        alias="supportedVersions", default=None
    )
    shares: typing.Optional[typing.List[SmbShare]] = None
    auth_methods: typing.Optional[typing.List[AuthMethod]] = pydantic.Field(alias="authMethods", default=None)
    server_info: typing.Optional[SmbServerInfo] = pydantic.Field(alias="serverInfo", default=None)
    anonymous_login_allowed: typing.Optional[bool] = pydantic.Field(alias="anonymousLoginAllowed", default=None)
    guest_login_allowed: typing.Optional[bool] = pydantic.Field(alias="guestLoginAllowed", default=None)
    null_session_allowed: typing.Optional[bool] = pydantic.Field(alias="nullSessionAllowed", default=None)
    auth_attempts: typing.Optional[typing.List[SmbAuthAttempt]] = pydantic.Field(alias="authAttempts", default=None)
    raw_response: typing.Optional[str] = pydantic.Field(alias="rawResponse", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
