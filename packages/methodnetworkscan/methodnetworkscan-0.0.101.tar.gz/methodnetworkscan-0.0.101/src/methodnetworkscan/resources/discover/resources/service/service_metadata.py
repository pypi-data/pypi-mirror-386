# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....common.resources.protocol.resources.grpc.grpc_service import GrpcService
from ....common.resources.protocol.resources.ntlm.ntlm_os_info import NtlmOsInfo
from ....common.resources.protocol.resources.ntlm.ntlm_target_info import NtlmTargetInfo
from ....common.resources.protocol.resources.smb.smb_version import SmbVersion
from ....common.resources.protocol.resources.ssh.cipher_algorithm import CipherAlgorithm
from ....common.resources.protocol.resources.ssh.host_key_algorithm import HostKeyAlgorithm
from ....common.resources.protocol.resources.ssh.key_exchange_algorithm import KeyExchangeAlgorithm
from ....common.resources.protocol.resources.ssh.mac_algorithm import MacAlgorithm
from ....common.resources.protocol.resources.ssh.ssh_auth_method import SshAuthMethod


class ServiceMetadata_Generic(UniversalBaseModel):
    type: typing.Literal["generic"] = "generic"
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Smb(UniversalBaseModel):
    type: typing.Literal["smb"] = "smb"
    smb_version: typing.Optional[SmbVersion] = pydantic.Field(alias="smbVersion", default=None)
    supported_smb_versions: typing.Optional[typing.List[SmbVersion]] = pydantic.Field(
        alias="supportedSmbVersions", default=None
    )
    signing_required: typing.Optional[bool] = pydantic.Field(alias="signingRequired", default=None)
    encryption_supported: typing.Optional[bool] = pydantic.Field(alias="encryptionSupported", default=None)
    encryption_required: typing.Optional[bool] = pydantic.Field(alias="encryptionRequired", default=None)
    lan_manager_version: typing.Optional[str] = pydantic.Field(alias="lanManagerVersion", default=None)
    mapped_os_version: typing.Optional[str] = pydantic.Field(alias="mappedOsVersion", default=None)
    target_info: typing.Optional[NtlmTargetInfo] = pydantic.Field(alias="targetInfo", default=None)
    os_info: typing.Optional[NtlmOsInfo] = pydantic.Field(alias="osInfo", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Ssh(UniversalBaseModel):
    type: typing.Literal["ssh"] = "ssh"
    server_version: typing.Optional[str] = pydantic.Field(alias="serverVersion", default=None)
    target: typing.Optional[str] = None
    supported_auth_methods: typing.Optional[typing.List[SshAuthMethod]] = pydantic.Field(
        alias="supportedAuthMethods", default=None
    )
    supported_ciphers: typing.Optional[typing.List[CipherAlgorithm]] = pydantic.Field(
        alias="supportedCiphers", default=None
    )
    supported_macs: typing.Optional[typing.List[MacAlgorithm]] = pydantic.Field(alias="supportedMacs", default=None)
    supported_kex: typing.Optional[typing.List[KeyExchangeAlgorithm]] = pydantic.Field(
        alias="supportedKex", default=None
    )
    host_key_algos: typing.Optional[typing.List[HostKeyAlgorithm]] = pydantic.Field(alias="hostKeyAlgos", default=None)
    raw_ascii: typing.Optional[str] = pydantic.Field(alias="rawASCII", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Ldap(UniversalBaseModel):
    type: typing.Literal["ldap"] = "ldap"
    base_dn: typing.Optional[str] = pydantic.Field(alias="baseDN", default=None)
    default_naming_context: typing.Optional[str] = pydantic.Field(alias="defaultNamingContext", default=None)
    schema_naming_context: typing.Optional[str] = pydantic.Field(alias="schemaNamingContext", default=None)
    configuration_naming_context: typing.Optional[str] = pydantic.Field(
        alias="configurationNamingContext", default=None
    )
    supports_tls: typing.Optional[bool] = pydantic.Field(alias="supportsTLS", default=None)
    supports_start_tls: typing.Optional[bool] = pydantic.Field(alias="supportsStartTLS", default=None)
    supports_sasl: typing.Optional[bool] = pydantic.Field(alias="supportsSASL", default=None)
    supported_ldap_version: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedLdapVersion", default=None
    )
    supported_sasl_mechanisms: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedSaslMechanisms", default=None
    )
    supported_capabilities: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedCapabilities", default=None
    )
    anonymous_bind_allowed: typing.Optional[bool] = pydantic.Field(alias="anonymousBindAllowed", default=None)
    null_bind_allowed: typing.Optional[bool] = pydantic.Field(alias="nullBindAllowed", default=None)
    mapped_os_version: typing.Optional[str] = pydantic.Field(alias="mappedOsVersion", default=None)
    target_info: typing.Optional[NtlmTargetInfo] = pydantic.Field(alias="targetInfo", default=None)
    os_info: typing.Optional[NtlmOsInfo] = pydantic.Field(alias="osInfo", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Dns(UniversalBaseModel):
    type: typing.Literal["dns"] = "dns"
    response_code: typing.Optional[str] = pydantic.Field(alias="responseCode", default=None)
    authoritative: typing.Optional[bool] = None
    recursion_available: typing.Optional[bool] = pydantic.Field(alias="recursionAvailable", default=None)
    dns_version: typing.Optional[str] = pydantic.Field(alias="dnsVersion", default=None)
    edns_0_support: typing.Optional[bool] = pydantic.Field(alias="edns0Support", default=None)
    udp_buffer_size: typing.Optional[str] = pydantic.Field(alias="udpBufferSize", default=None)
    server_name: typing.Optional[str] = pydantic.Field(alias="serverName", default=None)
    supported_record_types: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedRecordTypes", default=None
    )
    dnssec_enabled: typing.Optional[bool] = pydantic.Field(alias="dnssecEnabled", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Ntp(UniversalBaseModel):
    type: typing.Literal["ntp"] = "ntp"
    version: typing.Optional[str] = None
    stratum: typing.Optional[str] = None
    leap_indicator: typing.Optional[str] = pydantic.Field(alias="leapIndicator", default=None)
    mode: typing.Optional[str] = None
    reference_id: typing.Optional[str] = pydantic.Field(alias="referenceId", default=None)
    reference_ip: typing.Optional[str] = pydantic.Field(alias="referenceIp", default=None)
    root_delay: typing.Optional[str] = pydantic.Field(alias="rootDelay", default=None)
    root_dispersion: typing.Optional[str] = pydantic.Field(alias="rootDispersion", default=None)
    precision: typing.Optional[int] = None
    poll: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Snmp(UniversalBaseModel):
    type: typing.Literal["snmp"] = "snmp"
    versions: typing.Optional[typing.List[str]] = None
    community_strings: typing.Optional[typing.List[str]] = pydantic.Field(alias="communityStrings", default=None)
    system_description: typing.Optional[str] = pydantic.Field(alias="systemDescription", default=None)
    v_3_engine_id: typing.Optional[str] = pydantic.Field(alias="v3EngineId", default=None)
    v_3_engine_id_format: typing.Optional[str] = pydantic.Field(alias="v3EngineIdFormat", default=None)
    v_3_engine_id_data: typing.Optional[str] = pydantic.Field(alias="v3EngineIdData", default=None)
    v_3_engine_boots: typing.Optional[int] = pydantic.Field(alias="v3EngineBoots", default=None)
    v_3_engine_time: typing.Optional[int] = pydantic.Field(alias="v3EngineTime", default=None)
    v_3_engine_uptime: typing.Optional[str] = pydantic.Field(alias="v3EngineUptime", default=None)
    v_3_enterprise: typing.Optional[int] = pydantic.Field(alias="v3Enterprise", default=None)
    v_3_enterprise_name: typing.Optional[str] = pydantic.Field(alias="v3EnterpriseName", default=None)
    sys_object_id: typing.Optional[str] = pydantic.Field(alias="sysObjectId", default=None)
    sys_uptime: typing.Optional[str] = pydantic.Field(alias="sysUptime", default=None)
    sys_contact: typing.Optional[str] = pydantic.Field(alias="sysContact", default=None)
    sys_name: typing.Optional[str] = pydantic.Field(alias="sysName", default=None)
    sys_location: typing.Optional[str] = pydantic.Field(alias="sysLocation", default=None)
    sys_services: typing.Optional[int] = pydantic.Field(alias="sysServices", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Mongodb(UniversalBaseModel):
    type: typing.Literal["mongodb"] = "mongodb"
    version: typing.Optional[str] = None
    build_info: typing.Optional[str] = pydantic.Field(alias="buildInfo", default=None)
    unauthenticated_access: typing.Optional[bool] = pydantic.Field(alias="unauthenticatedAccess", default=None)
    storage_engine: typing.Optional[str] = pydantic.Field(alias="storageEngine", default=None)
    replication_enabled: typing.Optional[bool] = pydantic.Field(alias="replicationEnabled", default=None)
    auth_mechanisms: typing.Optional[typing.List[str]] = pydantic.Field(alias="authMechanisms", default=None)
    max_bson_object_size: typing.Optional[int] = pydantic.Field(alias="maxBsonObjectSize", default=None)
    max_message_size_bytes: typing.Optional[int] = pydantic.Field(alias="maxMessageSizeBytes", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Grpc(UniversalBaseModel):
    type: typing.Literal["grpc"] = "grpc"
    reflection_supported: bool = pydantic.Field(alias="reflectionSupported")
    services: typing.Optional[typing.List[GrpcService]] = None
    raw_descriptor_set: typing.Optional[str] = pydantic.Field(alias="rawDescriptorSet", default=None)
    supported_compression: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedCompression", default=None
    )
    max_message_size: typing.Optional[int] = pydantic.Field(alias="maxMessageSize", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Bgp(UniversalBaseModel):
    type: typing.Literal["bgp"] = "bgp"
    version: typing.Optional[str] = None
    message_type: typing.Optional[str] = pydantic.Field(alias="messageType", default=None)
    asn: typing.Optional[int] = None
    router_id: typing.Optional[str] = pydantic.Field(alias="routerId", default=None)
    hold_time: typing.Optional[int] = pydantic.Field(alias="holdTime", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Dcerpc(UniversalBaseModel):
    type: typing.Literal["dcerpc"] = "dcerpc"
    version: typing.Optional[str] = None
    packet_type: typing.Optional[str] = pydantic.Field(alias="packetType", default=None)
    fragment_length: typing.Optional[str] = pydantic.Field(alias="fragmentLength", default=None)
    interfaces: typing.Optional[typing.List[str]] = None
    auth_level: typing.Optional[str] = pydantic.Field(alias="authLevel", default=None)
    max_transmit_frag: typing.Optional[int] = pydantic.Field(alias="maxTransmitFrag", default=None)
    max_receive_frag: typing.Optional[int] = pydantic.Field(alias="maxReceiveFrag", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Ipp(UniversalBaseModel):
    type: typing.Literal["ipp"] = "ipp"
    server: typing.Optional[str] = None
    status_code: typing.Optional[str] = pydantic.Field(alias="statusCode", default=None)
    http_status: typing.Optional[str] = pydantic.Field(alias="httpStatus", default=None)
    scheme: typing.Optional[str] = None
    printer_name: typing.Optional[str] = pydantic.Field(alias="printerName", default=None)
    printer_state: typing.Optional[str] = pydantic.Field(alias="printerState", default=None)
    printer_uri: typing.Optional[typing.List[str]] = pydantic.Field(alias="printerUri", default=None)
    supported_operations: typing.Optional[typing.List[str]] = pydantic.Field(alias="supportedOperations", default=None)
    document_formats: typing.Optional[typing.List[str]] = pydantic.Field(alias="documentFormats", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Winrm(UniversalBaseModel):
    type: typing.Literal["winrm"] = "winrm"
    server: typing.Optional[str] = None
    status_code: typing.Optional[str] = pydantic.Field(alias="statusCode", default=None)
    scheme: typing.Optional[str] = None
    product_version: typing.Optional[str] = pydantic.Field(alias="productVersion", default=None)
    protocol_version: typing.Optional[str] = pydantic.Field(alias="protocolVersion", default=None)
    max_envelope_size: typing.Optional[int] = pydantic.Field(alias="maxEnvelopeSize", default=None)
    max_timeout_ms: typing.Optional[int] = pydantic.Field(alias="maxTimeoutMs", default=None)
    auth_schemes: typing.Optional[typing.List[str]] = pydantic.Field(alias="authSchemes", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Kerberos(UniversalBaseModel):
    type: typing.Literal["kerberos"] = "kerberos"
    krb_message: typing.Optional[str] = pydantic.Field(alias="krbMessage", default=None)
    error_code: typing.Optional[str] = pydantic.Field(alias="errorCode", default=None)
    realm: typing.Optional[str] = None
    supported_enctypes: typing.Optional[typing.List[str]] = pydantic.Field(alias="supportedEnctypes", default=None)
    kdc_address: typing.Optional[str] = pydantic.Field(alias="kdcAddress", default=None)
    pre_auth_required: typing.Optional[bool] = pydantic.Field(alias="preAuthRequired", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Sip(UniversalBaseModel):
    type: typing.Literal["sip"] = "sip"
    status: typing.Optional[str] = None
    server: typing.Optional[str] = None
    user_agent: typing.Optional[str] = pydantic.Field(alias="userAgent", default=None)
    allow: typing.Optional[str] = None
    supported_methods: typing.Optional[typing.List[str]] = pydantic.Field(alias="supportedMethods", default=None)
    supported_codecs: typing.Optional[typing.List[str]] = pydantic.Field(alias="supportedCodecs", default=None)
    registrar_uri: typing.Optional[str] = pydantic.Field(alias="registrarUri", default=None)
    realm: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Ssdp(UniversalBaseModel):
    type: typing.Literal["ssdp"] = "ssdp"
    status: typing.Optional[str] = None
    server: typing.Optional[str] = None
    location: typing.Optional[str] = None
    cache_control: typing.Optional[str] = pydantic.Field(alias="cacheControl", default=None)
    usn: typing.Optional[str] = None
    service_type: typing.Optional[str] = pydantic.Field(alias="serviceType", default=None)
    search_target: typing.Optional[str] = pydantic.Field(alias="searchTarget", default=None)
    ext: typing.Optional[str] = None
    boot_id: typing.Optional[str] = pydantic.Field(alias="bootId", default=None)
    config_id: typing.Optional[str] = pydantic.Field(alias="configId", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Tftp(UniversalBaseModel):
    type: typing.Literal["tftp"] = "tftp"
    opcode: typing.Optional[str] = None
    error_code: typing.Optional[str] = pydantic.Field(alias="errorCode", default=None)
    error_message: typing.Optional[str] = pydantic.Field(alias="errorMessage", default=None)
    block_number: typing.Optional[str] = pydantic.Field(alias="blockNumber", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Netbios(UniversalBaseModel):
    type: typing.Literal["netbios"] = "netbios"
    service: typing.Optional[str] = None
    netbios_names: typing.Optional[typing.List[str]] = pydantic.Field(alias="netbiosNames", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class ServiceMetadata_Ipmi(UniversalBaseModel):
    type: typing.Literal["ipmi"] = "ipmi"
    version: typing.Optional[str] = None
    auth_type: typing.Optional[str] = pydantic.Field(alias="authType", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


ServiceMetadata = typing.Union[
    ServiceMetadata_Generic,
    ServiceMetadata_Smb,
    ServiceMetadata_Ssh,
    ServiceMetadata_Ldap,
    ServiceMetadata_Dns,
    ServiceMetadata_Ntp,
    ServiceMetadata_Snmp,
    ServiceMetadata_Mongodb,
    ServiceMetadata_Grpc,
    ServiceMetadata_Bgp,
    ServiceMetadata_Dcerpc,
    ServiceMetadata_Ipp,
    ServiceMetadata_Winrm,
    ServiceMetadata_Kerberos,
    ServiceMetadata_Sip,
    ServiceMetadata_Ssdp,
    ServiceMetadata_Tftp,
    ServiceMetadata_Netbios,
    ServiceMetadata_Ipmi,
]
