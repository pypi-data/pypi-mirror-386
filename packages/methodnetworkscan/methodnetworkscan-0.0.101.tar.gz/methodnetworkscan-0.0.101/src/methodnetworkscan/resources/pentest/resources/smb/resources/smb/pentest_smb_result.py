# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......common.resources.protocol.resources.smb.smb_command_execution import SmbCommandExecution
from ......common.resources.protocol.resources.smb.smb_server_info import SmbServerInfo
from ......common.resources.protocol.resources.smb.smb_share import SmbShare
from ....auth.auth_attempt import AuthAttempt
from ..lsadump.dcc_secret import DccSecret
from ..lsadump.lsa_secret import LsaSecret
from ..samdump.sam_secret import SamSecret


class PentestSmbResult_ProbeResult(UniversalBaseModel):
    type: typing.Literal["ProbeResult"] = "ProbeResult"
    target: str
    server_info: typing.Optional[SmbServerInfo] = pydantic.Field(alias="serverInfo", default=None)
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSmbResult_AuthResult(UniversalBaseModel):
    type: typing.Literal["AuthResult"] = "AuthResult"
    target: str
    auth_attempts: typing.Optional[typing.List[AuthAttempt]] = pydantic.Field(alias="authAttempts", default=None)
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSmbResult_SamdumpResult(UniversalBaseModel):
    type: typing.Literal["SamdumpResult"] = "SamdumpResult"
    sam_secrets: typing.Optional[typing.List[SamSecret]] = pydantic.Field(alias="samSecrets", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSmbResult_LsadumpResult(UniversalBaseModel):
    type: typing.Literal["LsadumpResult"] = "LsadumpResult"
    lsa_secrets: typing.Optional[typing.List[LsaSecret]] = pydantic.Field(alias="lsaSecrets", default=None)
    dcc_secrets: typing.Optional[typing.List[DccSecret]] = pydantic.Field(alias="dccSecrets", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSmbResult_SharesMapResult(UniversalBaseModel):
    type: typing.Literal["SharesMapResult"] = "SharesMapResult"
    target: str
    shares: typing.Optional[typing.List[SmbShare]] = None
    server_info: typing.Optional[SmbServerInfo] = pydantic.Field(alias="serverInfo", default=None)
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSmbResult_ShareDownloadResult(UniversalBaseModel):
    type: typing.Literal["ShareDownloadResult"] = "ShareDownloadResult"
    target: str
    remote_file_path: str = pydantic.Field(alias="remoteFilePath")
    content: typing.Optional[str] = None
    size: typing.Optional[int] = None
    downloaded: bool
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSmbResult_ExecResult(UniversalBaseModel):
    type: typing.Literal["ExecResult"] = "ExecResult"
    target: str
    command_executions: typing.Optional[typing.List[SmbCommandExecution]] = pydantic.Field(
        alias="commandExecutions", default=None
    )
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


PentestSmbResult = typing.Union[
    PentestSmbResult_ProbeResult,
    PentestSmbResult_AuthResult,
    PentestSmbResult_SamdumpResult,
    PentestSmbResult_LsadumpResult,
    PentestSmbResult_SharesMapResult,
    PentestSmbResult_ShareDownloadResult,
    PentestSmbResult_ExecResult,
]
