# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .spray_stealth_config import SprayStealthConfig
from .spray_target_service import SprayTargetService
from .username_scheme import UsernameScheme
from .wordlist_type import WordlistType


class PentestSprayConfig_Password(UniversalBaseModel):
    spray_mode: typing.Literal["password"] = pydantic.Field(alias="SprayMode", default="password")
    targets: typing.List[str]
    service: SprayTargetService
    usernames: typing.Optional[typing.List[str]] = None
    passwords: typing.Optional[typing.List[str]] = None
    ntlm_hashes: typing.Optional[typing.List[str]] = pydantic.Field(alias="ntlmHashes", default=None)
    username_file: typing.Optional[str] = pydantic.Field(alias="usernameFile", default=None)
    password_file: typing.Optional[str] = pydantic.Field(alias="passwordFile", default=None)
    username_lists: typing.Optional[typing.List[WordlistType]] = pydantic.Field(alias="usernameLists", default=None)
    password_lists: typing.Optional[typing.List[WordlistType]] = pydantic.Field(alias="passwordLists", default=None)
    domain: typing.Optional[str] = None
    timeout: int
    stop_on_first_success: bool = pydantic.Field(alias="stopOnFirstSuccess")
    stop_on_lockout_detected: typing.Optional[bool] = pydantic.Field(alias="stopOnLockoutDetected", default=None)
    successful_only: bool = pydantic.Field(alias="successfulOnly")
    continue_on_error: bool = pydantic.Field(alias="continueOnError")
    requests_per_minute: typing.Optional[int] = pydantic.Field(alias="requestsPerMinute", default=None)
    stealth: typing.Optional[SprayStealthConfig] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestSprayConfig_Username(UniversalBaseModel):
    spray_mode: typing.Literal["username"] = pydantic.Field(alias="SprayMode", default="username")
    targets: typing.List[str]
    service: SprayTargetService
    username_lists: typing.Optional[typing.List[WordlistType]] = pydantic.Field(alias="usernameLists", default=None)
    usernames: typing.Optional[typing.List[str]] = None
    username_scheme: typing.Optional[UsernameScheme] = pydantic.Field(alias="usernameScheme", default=None)
    domain: str
    timeout: int
    continue_on_error: bool = pydantic.Field(alias="continueOnError")
    successful_only: bool = pydantic.Field(alias="successfulOnly")
    stealth: typing.Optional[SprayStealthConfig] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


PentestSprayConfig = typing.Union[PentestSprayConfig_Password, PentestSprayConfig_Username]
