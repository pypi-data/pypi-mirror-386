# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from .......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .domain_user_properties import DomainUserProperties


class DomainUser(UniversalBaseModel):
    allowed_to_delegate: typing.Optional[typing.List[str]] = pydantic.Field(alias="AllowedToDelegate", default=None)
    object_identifier: typing.Optional[str] = pydantic.Field(alias="ObjectIdentifier", default=None)
    primary_group_sid: typing.Optional[str] = pydantic.Field(alias="PrimaryGroupSID", default=None)
    properties: typing.Optional[DomainUserProperties] = pydantic.Field(alias="Properties", default=None)
    aces: typing.Optional[typing.List[str]] = pydantic.Field(alias="Aces", default=None)
    spn_targets: typing.Optional[typing.List[str]] = pydantic.Field(alias="SPNTargets", default=None)
    has_sid_history: typing.Optional[typing.List[str]] = pydantic.Field(alias="HasSIDHistory", default=None)
    is_deleted: typing.Optional[bool] = pydantic.Field(alias="IsDeleted", default=None)
    is_acl_protected: typing.Optional[bool] = pydantic.Field(alias="IsACLProtected", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
