# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......common.resources.protocol.resources.ldap.ldap_server_info import LdapServerInfo
from ....auth.auth_attempt import AuthAttempt
from ..domaindump.domain_computer import DomainComputer
from ..domaindump.domain_container import DomainContainer
from ..domaindump.domain_controller import DomainController
from ..domaindump.domain_groups_result import DomainGroupsResult
from ..domaindump.domain_object import DomainObject
from ..domaindump.domain_trust import DomainTrust
from ..domaindump.domain_users_result import DomainUsersResult
from ..domaindump.group_policy_object import GroupPolicyObject
from ..domaindump.organizational_unit import OrganizationalUnit


class PentestLdapResult_ProbeResult(UniversalBaseModel):
    type: typing.Literal["ProbeResult"] = "ProbeResult"
    target: str
    server_info: typing.Optional[LdapServerInfo] = pydantic.Field(alias="serverInfo", default=None)
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestLdapResult_AuthResult(UniversalBaseModel):
    type: typing.Literal["AuthResult"] = "AuthResult"
    target: str
    auth_attempts: typing.Optional[typing.List[AuthAttempt]] = pydantic.Field(alias="authAttempts", default=None)
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestLdapResult_DomainDumpResult(UniversalBaseModel):
    type: typing.Literal["DomainDumpResult"] = "DomainDumpResult"
    domain: typing.Optional[DomainObject] = None
    users: typing.Optional[DomainUsersResult] = None
    groups: typing.Optional[DomainGroupsResult] = None
    computers: typing.Optional[typing.List[DomainComputer]] = None
    domain_controllers: typing.Optional[typing.List[DomainController]] = pydantic.Field(
        alias="domainControllers", default=None
    )
    organizational_units: typing.Optional[typing.List[OrganizationalUnit]] = pydantic.Field(
        alias="organizationalUnits", default=None
    )
    group_policy_objects: typing.Optional[typing.List[GroupPolicyObject]] = pydantic.Field(
        alias="groupPolicyObjects", default=None
    )
    containers: typing.Optional[typing.List[DomainContainer]] = None
    domain_trusts: typing.Optional[typing.List[DomainTrust]] = pydantic.Field(alias="domainTrusts", default=None)
    total_objects: typing.Optional[int] = pydantic.Field(alias="totalObjects", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


PentestLdapResult = typing.Union[
    PentestLdapResult_ProbeResult, PentestLdapResult_AuthResult, PentestLdapResult_DomainDumpResult
]
