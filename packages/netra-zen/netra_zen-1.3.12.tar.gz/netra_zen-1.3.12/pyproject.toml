[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "netra-zen"
version = "1.3.12"
description = "Multi-instance Claude orchestrator for parallel task execution"
readme = "README.md"
authors = [
    {name = "Netra Systems", email = "pypi@netrasystems.ai"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Distributed Computing",
]
keywords = ["claude", "ai", "orchestration", "parallel", "automation", "llm", "anthropic"]
requires-python = ">=3.8"
dependencies = [
    "PyYAML>=6.0",
    "python-dateutil>=2.8.2",
    "aiohttp>=3.8.0",
    "websockets>=11.0",
    "rich>=13.0.0",
    "PyJWT>=2.8.0",
    "psutil>=5.9.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-gcp-trace>=1.6.0",
    "google-cloud-trace>=1.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
netra = [
    "netraoptimizer>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/netra-systems/zen"
Documentation = "https://github.com/netra-systems/zen#readme"
Repository = "https://github.com/netra-systems/zen.git"
"Bug Tracker" = "https://github.com/netra-systems/zen/issues"
Changelog = "https://github.com/netra-systems/zen/blob/main/CHANGELOG.md"

[project.scripts]
zen = "zen_orchestrator:run"

[tool.setuptools]
py-modules = ["zen_orchestrator"]
packages = ["agent_interface", "token_budget", "token_transparency", "zen", "zen.telemetry", "scripts", "shared", "shared.types"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
select = ["E", "F", "W", "C90", "I", "N", "UP", "B", "A", "C4", "ISC", "ICN", "PIE", "PT", "RET", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PGH", "PL", "TRY", "RUF"]
ignore = ["E501", "B008", "C901", "PLR0913"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "ARG", "PLR2004"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=zen_orchestrator",
    "--cov=agent_interface",
    "--cov=token_budget",
    "--cov=token_transparency",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["zen_orchestrator", "agent_interface", "token_budget", "token_transparency"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]