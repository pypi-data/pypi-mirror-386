[build-system]
requires = ["uv_build>=0.9.0,<0.10.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
  "coverage[toml]>=7.10.7",
  "nox[uv]>=2025.5.1",
  "pytest>=8.4.2",
  "pytest-cov>=7.0.0",
  "pytest-randomly>=4.0.1",
  "pytest-xdist>=3.8.0",
  "syrupy>=5.0.0",
]
types = [
  "mypy>=1.18.2",
]

[project]
authors = [
  { name = "Josh Thomas", email = "josh@joshthomas.dev" }
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  # [[[cog
  # import cog
  #
  # from noxfile import PY_GIL_VERSIONS
  # from noxfile import PY_NOGIL_VERSIONS
  #
  # for version in PY_GIL_VERSIONS:
  #     cog.outl(f'  "Programming Language :: Python :: {version}",')
  # if PY_NOGIL_VERSIONS:
  #     cog.outl('  "Programming Language :: Python :: Free Threading",')
  # ]]] -->
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Free Threading",
  # [[[end]]]
  "Programming Language :: Python :: Implementation :: CPython"
]
dependencies = [
  "beautifulsoup4[lxml]>=4.14.2",
  "markdownify>=1.2.0",
  "pydantic>=2.12.1",
  "rich>=14.2.0",
  "typer>=0.19.2",
]
description = "Convert HTML documentation to Markdown"
license = { file = "LICENSE" }
name = "docs2markdown"
readme = "README.md"
# [[[cog
# import cog
#
# from noxfile import PY_DEFAULT
#
# cog.outl(f'requires-python = ">={PY_DEFAULT}"')
# ]]] -->
requires-python = ">=3.10"
# [[[end]]]
version = "0.4.0"

[project.scripts]
docs2markdown = "docs2markdown.cli:app"

[project.urls]
Documentation = "https://github.com/joshuadavidthomas/docs2markdown#README"
Issues = "https://github.com/joshuadavidthomas/docs2markdown/issues"
Source = "https://github.com/joshuadavidthomas/docs2markdown"

[tool.bumpver]
commit = true
commit_message = ":bookmark: bump version {old_version} -> {new_version}"
current_version = "0.4.0"
push = true
tag = false
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"

[tool.bumpver.file_patterns]
"tests/test_version.py" = [
  'assert __version__ == "{version}"',
]
"pyproject.toml" = [
  '^version = "{version}"',
  '^current_version = "{version}"',
]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if DEBUG:",
  "if not DEBUG:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  'def __str__\(self\)\s?\-?\>?\s?\w*\:'
]
fail_under = 100

[tool.coverage.run]
omit = [
  "tests/*",
  "src/docs2markdown/__main__.py"
]
source = ["src/docs2markdown"]

[tool.mypy]
check_untyped_defs = true
exclude = [
  ".venv",
  "docs",
  "tests",
  "venv"
]
mypy_path = "src/"
no_implicit_optional = true
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_errors = true
ignore_missing_imports = true
module = [
  "docs.*",
  "tests.*"
]

[tool.pytest.ini_options]
addopts = "-n auto --dist loadfile --doctest-modules"
markers = ["fixture_tags"]
norecursedirs = ".* bin build dist *.egg htmlcov logs node_modules templates venv"
python_files = "tests.py test_*.py *_tests.py"
pythonpath = ["src", "."]
testpaths = ["tests"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".github",
  ".hg",
  ".mypy_cache",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "build",
  "dist",
  "migrations",
  "node_modules",
  "venv"
]
extend-include = ["*.pyi?"]
indent-width = 4
# Same as Black.
line-length = 88

[tool.ruff.format]
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Like Black, use double quotes for strings.
quote-style = "double"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
ignore = ["E501", "E741"]  # temporary
select = [
  "B",  # flake8-bugbear
  "E",  # Pycodestyle
  "F",  # Pyflakes
  "I",  # isort
  "UP"  # pyupgrade
]
unfixable = []

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["docs2markdown"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.uv]
required-version = ">=0.7"
