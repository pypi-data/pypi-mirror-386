# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  workflow_dispatch

permissions:
  contents: read

jobs:
  test-and-validate:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Update dependencies and sync
        run: |
          uv lock --upgrade
          uv sync --all-extras

      - name: Run linting
        run: |
          uv run ruff check .

      - name: Run type checking
        run: |
          cd src/iparq
          uv run mypy . --config-file=../../pyproject.toml

      - name: Run tests
        run: |
          uv run pytest -v

      - name: Test package build
        run: |
          uv build

      - name: Test package installation in clean environment
        run: |
          # Test that the built package can be installed and imported
          python -m venv test_install_env
          source test_install_env/bin/activate
          # Install the latest wheel file
          pip install $(ls -t dist/*.whl | head -1)
          python -c "import iparq; print(f'Successfully imported iparq version {iparq.__version__}')"
          iparq --help
          deactivate

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            .coverage
            htmlcov/

  release-build:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    needs: test-and-validate

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Update dependencies and sync
        run: |
          uv lock --upgrade
          uv sync --all-extras

      - name: Build release distributions
        run: |
          uv build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - test-and-validate
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
