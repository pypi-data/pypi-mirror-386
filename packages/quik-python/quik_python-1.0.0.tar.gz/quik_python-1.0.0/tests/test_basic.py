"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è quik_python (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UV)
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç pytest
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from quik_python.quik import Quik
from quik_python.data_structures.info_params import InfoParams


class QuikServiceTests:
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π QUIK"""
    
    def __init__(self):
        self.quik = None
        self.test_results = {}
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QUIK"""
        print("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QUIK...")
        try:
            self.quik = Quik()
            await self.quik.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            is_connected = await self.quik.debug.is_quik()
            if not is_connected:
                print("‚ö†Ô∏è  QUIK –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã")
                return False
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QUIK —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QUIK: {e}")
            return False
    
    async def teardown(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.quik:
            try:
                self.quik.stop_service()
                print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QUIK –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def record_test_result(self, test_name: str, success: bool, message: str = ""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results[test_name] = {
            'success': success,
            'message': message
        }
    
    async def test_is_connected(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ QUIK"""
        test_name = "is_connected"
        try:
            result = await self.quik.service.is_connected()
            print(f"üì° IsConnected: {result}")
            self.record_test_result(test_name, True, f"Result: {result}")
            return True
        except Exception as e:
            print(f"‚ùå IsConnected failed: {e}")
            self.record_test_result(test_name, False, str(e))
            return False

    async def test_get_working_folder(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏ QUIK"""
        test_name = "get_working_folder"
        try:
            result = await self.quik.service.get_working_folder()
            print(f"üìÅ WorkingFolder: {result}")
            assert isinstance(result, str) and len(result) > 0
            self.record_test_result(test_name, True, f"Path: {result}")
            return True
        except Exception as e:
            print(f"‚ùå GetWorkingFolder failed: {e}")
            self.record_test_result(test_name, False, str(e))
            return False

    async def test_get_script_path(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç—É"""
        test_name = "get_script_path"
        try:
            result = await self.quik.service.get_script_path()
            print(f"üìÇ ScriptPath: {result}")
            self.record_test_result(test_name, True, f"Path: {result}")
            return True
        except Exception as e:
            print(f"‚ùå GetScriptPath failed: {e}")
            self.record_test_result(test_name, False, str(e))
            return False

    async def test_info_params(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        test_name = "info_params"
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            key_params = [InfoParams.VERSION, InfoParams.TRADEDATE]
            results = {}
            
            for param in key_params:
                try:
                    value = await self.quik.service.get_info_param(param)
                    results[param.name] = value
                    print(f"‚ÑπÔ∏è  {param.name}: {value}")
                except Exception as param_error:
                    results[param.name] = f"Error: {param_error}"
                    print(f"‚ö†Ô∏è  {param.name}: {param_error}")
            
            self.record_test_result(test_name, True, f"Params: {results}")
            return True
            
        except Exception as e:
            print(f"‚ùå InfoParams test failed: {e}")
            self.record_test_result(test_name, False, str(e))
            return False

    async def test_messages(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        test_name = "messages"
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            await self.quik.service.message("UV Test: Info message", 1)
            await self.quik.service.message("UV Test: Warning message", 2)
            await self.quik.service.message("UV Test: Error message", 3)
            
            print("üì® –í—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            self.record_test_result(test_name, True, "All message types sent")
            return True
            
        except Exception as e:
            print(f"‚ùå Messages test failed: {e}")
            self.record_test_result(test_name, False, str(e))
            return False

    def test_enum_values(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π enum InfoParams"""
        test_name = "enum_values"
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
            assert InfoParams.VERSION.value == "VERSION"
            assert InfoParams.TRADEDATE.value == "TRADEDATE"
            
            all_params = list(InfoParams)
            print(f"üî¢ InfoParams —Å–æ–¥–µ—Ä–∂–∏—Ç {len(all_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            for param in all_params[:5]:
                print(f"   - {param.name}: {param.value}")
            
            self.record_test_result(test_name, True, f"Enum has {len(all_params)} params")
            return True
            
        except Exception as e:
            print(f"‚ùå Enum test failed: {e}")
            self.record_test_result(test_name, False, str(e))
            return False

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í QUIK-PYTHON (UV Integration)")
        print("=" * 60)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–Ω–µ —Ç—Ä–µ–±—É—é—Ç QUIK)
        print("\nüìã –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        self.test_enum_values()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç QUIK)
        connected = await self.setup()
        
        if connected:
            print("\nüîó –¢–µ—Å—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ QUIK:")
            await self.test_is_connected()
            await self.test_get_working_folder()
            await self.test_get_script_path()
            await self.test_info_params()
            await self.test_messages()
        else:
            print("\n‚ö†Ô∏è  –¢–µ—Å—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—â–µ–Ω—ã - QUIK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        await self.teardown()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results.values() if result['success'])
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ PASS" if result['success'] else "‚ùå FAIL"
            print(f"{status} {test_name}: {result['message']}")
        
        print(f"\nüéØ –ò—Ç–æ–≥–æ: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if successful_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = QuikServiceTests()
    success = await tester.run_all_tests()
    return 0 if success else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
