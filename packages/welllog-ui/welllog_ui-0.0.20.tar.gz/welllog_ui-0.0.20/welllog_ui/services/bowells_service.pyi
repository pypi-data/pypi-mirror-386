# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from __future__ import annotations
from database_project_dialog import pybo, show_CPyBOProjectDialog
from pathlib import Path
from typing import Any, Callable, Iterable
from typing_extensions import Self
import chardet
import numpy

def detect_encoding(file_path: Path) -> str:
    ...

def loadtxt(fname: Path | str, skiprows: int, usecols: list[int] | tuple[int], comments: str, delimiter: str, skipInvVal: str, convert: Any, progress: Any) -> Any:
    ...

class BOWellsService:
    def __init__(self: Self, db_name: str, project_name: str, is_my: bool) -> None: ...
    def _init_objs_my(self: Self) -> bool: ...
    def _init_objs(self: Self, is_my: bool) -> bool: ...
    def list_wells(self: Self) -> list[str]: ...
    def list_curves(self: Self) -> list[str]: ...
    def get_well_curves(self: Self, well_name: str) -> list[str]: ...
    def set_well_data_to_DS(self: Self, well_name: str, data_dict: dict[str, np.ndarray]) -> Any: ...
    def reset_boWell_curves_obj(self: Self, well_name: str, data_dict: dict[str, np.ndarray]) -> Any: ...
    def get_curves_data(self: Self, well_name: str, use_keys: list[str], null_value: float) -> np.ndarray: ...
    def dataset_filter(self: Self, use_keys: list[str]) -> Any: ...
    def get_dataset(self: Self, use_keys: list[str], filter_wells: bool) -> Any: ...
    def process(self: Self, func: Callable[[np.ndarray], np.ndarray], target_wells: Iterable[str] | None) -> dict[str, np.ndarray]: ...

__all__ = ['BOWellsService']

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import __future__
import numpy
import typing
import pathlib
import chardet