# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from PySide6 import QtCore, QtGui, QtWidgets
from __future__ import annotations
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Set, Tuple
from typing_extensions import Self
from dataclasses import dataclass
import numpy
import pyqtgraph
import pyqtgraph.exporters

HAS_PG = True
pg = None
HAS_PG = False
@dataclass
class CurveDataPG:
    def __post_init__(self: Self) -> Any: ...
    def _process_data(self: Self) -> Tuple[np.ndarray, np.ndarray]: ...
    def processed_depth(self: Self) -> np.ndarray: ...
    def processed_value(self: Self) -> np.ndarray: ...

class HeaderWidgetPG:
    def __init__(self: Self, parent: Any, fixed_text: str) -> None: ...
    def render_curve_names(self: Self, curves: List[CurveDataPG]) -> Any: ...
    def mouseDoubleClickEvent(self: Self, event: Any) -> Any: ...
    def toggle_display_mode(self: Self) -> Any: ...
    def set_display_mode(self: Self, mode: str) -> Any: ...
    def paintEvent(self: Self, event: Any) -> Any: ...
    def _draw_mode_indicator(self: Self, painter: Any) -> Any: ...
    def _draw_curves(self: Self, painter: Any, curves: Any, rect: Any) -> Any: ...
    def _get_curve_color(self: Self, color: Any) -> Any: ...

class TrackSlotPG:
    def __init__(self: Self, index: int, fixed_text: str, show_x_axis: bool, show_y_axis: bool, parent: Any, fixed_width: int, fixed_height: int) -> None: ...
    def _setup_layout(self: Self, fixed_text: str, fixed_width: int, fixed_height: int) -> Any: ...
    def _setup_crosshair(self: Self) -> Any: ...
    def _on_mouse_moved(self: Self, pos: Any) -> Any: ...
    def add_curve(self: Self, curve_data: CurveDataPG) -> bool: ...
    def remove_curve(self: Self, curve_name: str) -> bool: ...
    def clear_all_curves(self: Self) -> Any: ...
    def _update_view_range(self: Self) -> Any: ...
    def _update_header(self: Self) -> Any: ...
    def has_curves(self: Self) -> bool: ...
    def curve_names(self: Self) -> Set[str]: ...
    def crosshair_h(self: Self) -> Any: ...
    def crosshair_v(self: Self) -> Any: ...
    def _on_mode_changed(self: Self, mode: str) -> Any: ...
    def _refresh_display(self: Self) -> Any: ...
    def _show_curves(self: Self) -> Any: ...
    def _show_labels(self: Self) -> Any: ...
    def _hide_all_items(self: Self, items_dict: Any) -> Any: ...
    def _show_all_items(self: Self, items_dict: Any) -> Any: ...
    def _create_label_items(self: Self, curve_data: CurveDataPG) -> Any: ...
    def _generate_colors_for_values(self: Self, unique_values: Any, base_color: Any) -> Any: ...

class WellCurvePlotterPyQtGraph:
    def __init__(self: Self, parent: Optional[QtWidgets.QWidget]) -> None: ...
    def _setup_ui(self: Self) -> Any: ...
    def _update_other_slots_horizontal_crosshair(self: Self, y_pos: Any, current_slot_index: Any) -> Any: ...
    def _show_tooltip_at_mouse_pos(self: Self, mouse_pos: Any, x_pos: Any, y_pos: Any, slot_index: Any) -> Any: ...
    def _hide_tooltip(self: Self) -> Any: ...
    def _hide_all_slots_crosshairs(self: Self) -> Any: ...
    def setup_canvas(self: Self, well_name: str, depth_range: Tuple[float, float]) -> None: ...
    def _create_track_slots(self: Self) -> Any: ...
    def _setup_depth_range(self: Self, depth_range: Tuple[float, float]) -> Any: ...
    def add_curve_to_slot(self: Self, slot_index: int, curve_name: str, depth_data: List[float] | np.ndarray, value_data: List[float] | np.ndarray, color: Optional[Tuple[int, int, int]], null_value: Any, line_width: float) -> bool: ...
    def remove_curve_from_slot(self: Self, slot_index: int, curve_name: str) -> bool: ...
    def clear_slot(self: Self, slot_index: int) -> None: ...
    def clear_all_slots(self: Self) -> None: ...
    def update_display(self: Self) -> None: ...
    def get_slot_curves(self: Self, slot_index: int) -> List[str]: ...
    def get_slot_CurveDataPG(self: Self, slot_index: int, curve_name: str) -> Optional[CurveDataPG]: ...
    def get_slot_count(self: Self) -> int: ...
    def has_curves_in_slot(self: Self, slot_index: int) -> bool: ...
    def _get_next_color(self: Self) -> Tuple[int, int, int]: ...
    def well_name(self: Self) -> str: ...
    def depth_range(self: Self) -> Optional[Tuple[float, float]]: ...
    def num_slots(self: Self) -> int: ...
    def get_slot_info(self: Self, slot_index: int) -> Optional[Dict[str, Any]]: ...
    def get_all_slots_info(self: Self) -> Dict[int, Dict[str, Any]]: ...

__all__ = ['WellCurvePlotterPyQtGraph', 'CurveDataPG', 'TrackSlotPG', 'HeaderWidgetPG']

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import __future__
import dataclasses
import typing
import PySide6
import PySide6.QtWidgets
import PySide6.QtCore
import PySide6.QtGui
import pyqtgraph
import pyqtgraph.exporters
import numpy