# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from PySide6 import QtCore, QtWidgets
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional
from typing_extensions import Self
from welllog_ui.database_project_dialog import CATCH_PATH
from welllog_ui.services import ensure_pybo_project, get_data_service
from welllog_ui.tools.dl.cfg import DLModelManager, WellLogTrainConfig
from welllog_ui.tools.dl.model import WellLogModel_Lightning
from welllog_ui.tools.dl.trainer_worker import DataReady, LightningTrainWorker
import numpy
import os
import torch

PARAM_CONFIG = {'model': {'type': 'combo', 'default': 'SimpleRegressor', 'widget': 'QCB_model', 'label': '模型类型'}, 'target_curves': {'type': 'list', 'default': ['GR'], 'widget': 'QLW_target_curves', 'label': '目标曲线'}, 'lr': {'type': 'double', 'default': 0.001, 'widget': 'QDSB_lr', 'label': '学习率'}, 'epochs': {'type': 'int', 'default': 50, 'widget': 'QSB_epochs', 'label': '训练轮次'}, 'batch_size': {'type': 'int', 'default': 64, 'widget': 'QSB_batch', 'label': '批量大小'}, 'early_stop_patience': {'type': 'int', 'default': 0, 'widget': 'QSB_early', 'label': '收敛早停'}, 'accelerator': {'type': 'combo', 'default': 'auto', 'widget': 'QCB_accelerator', 'label': '训练设备', 'options': ['auto', 'cpu', 'gpu']}}
COL_NAME = 0
COL_MODEL = 1
COL_TARGETS = 2
class DeepLearningDialog:
    def __init__(self: Self, parent: Optional[QtWidgets.QWidget], parent_layout: Optional[QtWidgets.QBoxLayout], statusBar: Optional[QtWidgets.QStatusBar], default_params: Optional[Dict[str, Any]]) -> None: ...
    def _init_storage_dirs(self: Self) -> None: ...
    def _build_model_map(self: Self) -> None: ...
    def _init_data_from_pybo(self: Self) -> None: ...
    def _setup_ui(self: Self, parent_layout: Optional[QtWidgets.QBoxLayout]) -> None: ...
    def _create_model_select_group(self: Self) -> QtWidgets.QGroupBox: ...
    def _create_model_group(self: Self) -> QtWidgets.QGroupBox: ...
    def _create_param_widgets(self: Self) -> Any: ...
    def _create_target_curves_section(self: Self, parent_layout: Any) -> Any: ...
    def _create_train_group(self: Self) -> QtWidgets.QGroupBox: ...
    def _connect_signals(self: Self) -> None: ...
    def _read_model_cfg(self: Self, name: str) -> WellLogTrainConfig: ...
    def _refresh_model_list(self: Self) -> None: ...
    def _apply_hparams_to_controls(self: Self, cfg_obj: Optional[WellLogTrainConfig]) -> None: ...
    def _on_target_curve_changed(self: Self, item: QtWidgets.QListWidgetItem) -> None: ...
    def _update_target_curves_display(self: Self) -> None: ...
    def _delete_selected_model(self: Self) -> None: ...
    def _on_models_cell_changed(self: Self, row: int, col: int) -> None: ...
    def _run_DL_worker(self: Self, stage: str, cfg: WellLogTrainConfig) -> None: ...
    def _on_click_start_train(self: Self) -> None: ...
    def _on_click_stop_train(self: Self) -> None: ...
    def _on_click_apply_current(self: Self) -> Any: ...
    def _on_click_apply_all(self: Self) -> Any: ...
    def _select_all_target_curves(self: Self) -> None: ...
    def _unselect_all_target_curves(self: Self) -> None: ...
    def set_train_val_names(self: Self, train_val_names: list[str]) -> None: ...
    def set_current_well_name(self: Self, current_well_name: str) -> None: ...
    def refresh_model_table(self: Self, select_name: Optional[str]) -> None: ...
    def append_log(self: Self, text: str) -> None: ...
    def set_progress(self: Self, value: int) -> None: ...
    def set_status(self: Self, text: str) -> None: ...
    def set_curve_options(self: Self, curve_names: list[str]) -> None: ...
    def _find_latest_ckpt_in(self: Self, name: str) -> Optional[Path]: ...
    def _get_selected_model_name(self: Self) -> Optional[str]: ...
    def _update_new_model_name_default(self: Self, selected_name: Optional[str]) -> None: ...
    def _collect_train_cfg(self: Self) -> WellLogTrainConfig: ...
    def _get_selected_target_curves(self: Self) -> list: ...
    def _set_status_bar(self: Self, message: str) -> None: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import typing
import os
import numpy
import PySide6
import PySide6.QtWidgets
import PySide6.QtCore
import torch
import pathlib
import datetime
import welllog_ui
import welllog_ui.services
import welllog_ui.services.get_data_service
import welllog_ui.services.ensure_pybo_project
import welllog_ui.database_project_dialog
import welllog_ui.tools
import welllog_ui.tools.dl
import welllog_ui.tools.dl.cfg
import welllog_ui.tools.dl.trainer_worker
import welllog_ui.tools.dl.model
import ntpath
import importlib
import importlib.util
import shutil
import sys
import matplotlib
import matplotlib.pyplot