# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from __future__ import annotations
from cfg import DLModelManager, WellLogTrainConfig
from torch import nn
from torch.utils.data import DataLoader, TensorDataset
from typing import Any, Callable, Optional
from typing_extensions import Self
import pytorch_lightning
import torch

class SimpleRegressor(DLModelManager):
    def __init__(self: Self, cfg_dict: Dict[str, Any]) -> None: ...
    def forward(self: Self, x: torch.Tensor) -> torch.Tensor: ...
    def training_step(self: Self, batch: Any, batch_idx: Any) -> Any: ...
    def configure_optimizers(self: Self) -> Any: ...

class RandomDataModule:
    def __init__(self: Self, cfg: WellLogTrainConfig) -> None: ...
    def setup(self: Self, stage: Optional[str]) -> Any: ...
    def train_dataloader(self: Self) -> Any: ...

class UiProgressCallback:
    def __init__(self: Self, total_epochs: int, show_metrics: bool, on_log: Optional[Callable[[str], None]], on_progress: Optional[Callable[[int], None]], should_stop_fn: Optional[Callable[[], bool]]) -> None: ...
    def on_train_epoch_end(self: Self, trainer: Any, pl_module: Any) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import __future__
import typing
import torch
import torch.nn
import torch.utils
import torch.utils.data
import torch.utils.data.DataLoader
import torch.utils.data.TensorDataset
import pytorch_lightning