# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from __future__ import annotations
from functools import partial
from pathlib import Path
from sklearn.preprocessing import StandardScaler
from torch.utils.data import DataLoader, Dataset
from typing import Any
from typing_extensions import Self
import chardet
import numpy
import pytorch_lightning
import torch

def detect_encoding(file_path: Path) -> str:
    ...

def loadtxt(fname: Path | str, skiprows: int, usecols: list[int] | tuple[int], comments: str, delimiter: str, skipInvVal: str, convert: Any, progress: Any) -> Any:
    ...

class SlidingWindowDataset(Dataset):
    def __init__(self: Self, data_dict: dict[str, np.ndarray], kernel_size: int, stride: int) -> None: ...
    def __len__(self: Self) -> Any: ...
    def __getitem__(self: Self, idx: Any) -> Any: ...

class WelllogPredictDataset(Dataset):
    def __init__(self: Self, data_dict: dict[str, np.ndarray], chunk_size: int) -> None: ...
    def __len__(self: Self) -> Any: ...
    def __getitem__(self: Self, idx: Any) -> Any: ...

class WellDataModule:
    def __init__(self: Self, well_objs: dict[str, np.ndarray], curve_keys: list[str], sequence_length: int, stride: int, train_val_names: tuple[list[str], list[str]], batch_size: int, num_workers: int, class_keys: list[str]) -> None: ...
    @staticmethod
    def _set_well_objs(well_objs: dict[str, np.ndarray]) -> Any: ...
    def SetScaler(self: Self, prop_mean: list[float], prop_std: list[float], use_idx: list[str | int]) -> Any: ...
    def setup(self: Self, stage: Any) -> Any: ...
    def train_dataloader(self: Self) -> Any: ...
    def val_dataloader(self: Self) -> Any: ...
    def predict_dataloader(self: Self) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import __future__
import torch
import torch.utils
import torch.utils.data
import torch.utils.data.DataLoader
import torch.utils.data.Dataset
import pytorch_lightning
import pathlib
import functools
import numpy
import sklearn
import sklearn.preprocessing
import sklearn.preprocessing.StandardScaler
import chardet