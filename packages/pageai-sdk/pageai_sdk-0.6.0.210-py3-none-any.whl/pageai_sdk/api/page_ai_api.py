# coding: utf-8

"""
    PageAI API

    # Introduction The PageAI (short for Synthetic EPUB) API is capapble of transforming multi page image only PDF files into accessible EPUBs.   # noqa: E501

    The version of the OpenAPI document: 0.6.0.210
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pageai_sdk.api_client import ApiClient
from pageai_sdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PageAIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def submit_url(self, url, smoke_test_flag, force_reprocess, **kwargs):  # noqa: E501
        """Submit a URL (pointing to a PDF) to the PageAI Service for processing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_url(url, smoke_test_flag, force_reprocess, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: The URL of the PDF file to submit for processing (required)
        :param bool smoke_test_flag: Flag to indicate if smoke test should be set off or not (required)
        :param bool force_reprocess: Flag to indicate if existing segments should be reprocessed or not (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.submit_url_with_http_info(url, smoke_test_flag, force_reprocess, **kwargs)  # noqa: E501

    def submit_url_with_http_info(self, url, smoke_test_flag, force_reprocess, **kwargs):  # noqa: E501
        """Submit a URL (pointing to a PDF) to the PageAI Service for processing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_url_with_http_info(url, smoke_test_flag, force_reprocess, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: The URL of the PDF file to submit for processing (required)
        :param bool smoke_test_flag: Flag to indicate if smoke test should be set off or not (required)
        :param bool force_reprocess: Flag to indicate if existing segments should be reprocessed or not (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UploadResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'smoke_test_flag',
            'force_reprocess'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `submit_url`")  # noqa: E501
        # verify the required parameter 'smoke_test_flag' is set
        if self.api_client.client_side_validation and ('smoke_test_flag' not in local_var_params or  # noqa: E501
                                                        local_var_params['smoke_test_flag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `smoke_test_flag` when calling `submit_url`")  # noqa: E501
        # verify the required parameter 'force_reprocess' is set
        if self.api_client.client_side_validation and ('force_reprocess' not in local_var_params or  # noqa: E501
                                                        local_var_params['force_reprocess'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `force_reprocess` when calling `submit_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'smoke_test_flag' in local_var_params and local_var_params['smoke_test_flag'] is not None:  # noqa: E501
            query_params.append(('smoke_test_flag', local_var_params['smoke_test_flag']))  # noqa: E501
        if 'force_reprocess' in local_var_params and local_var_params['force_reprocess'] is not None:  # noqa: E501
            query_params.append(('force_reprocess', local_var_params['force_reprocess']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/uploads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file(self, smoke_test_flag, force_reprocess, **kwargs):  # noqa: E501
        """Upload a file to the PageAI Service for processing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file(smoke_test_flag, force_reprocess, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool smoke_test_flag: Flag to indicate if smoke test should be set off or not (required)
        :param bool force_reprocess: Flag to indicate if existing segments should be reprocessed or not (required)
        :param file body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_file_with_http_info(smoke_test_flag, force_reprocess, **kwargs)  # noqa: E501

    def upload_file_with_http_info(self, smoke_test_flag, force_reprocess, **kwargs):  # noqa: E501
        """Upload a file to the PageAI Service for processing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_with_http_info(smoke_test_flag, force_reprocess, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool smoke_test_flag: Flag to indicate if smoke test should be set off or not (required)
        :param bool force_reprocess: Flag to indicate if existing segments should be reprocessed or not (required)
        :param file body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UploadResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'smoke_test_flag',
            'force_reprocess',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'smoke_test_flag' is set
        if self.api_client.client_side_validation and ('smoke_test_flag' not in local_var_params or  # noqa: E501
                                                        local_var_params['smoke_test_flag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `smoke_test_flag` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'force_reprocess' is set
        if self.api_client.client_side_validation and ('force_reprocess' not in local_var_params or  # noqa: E501
                                                        local_var_params['force_reprocess'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `force_reprocess` when calling `upload_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'smoke_test_flag' in local_var_params and local_var_params['smoke_test_flag'] is not None:  # noqa: E501
            query_params.append(('smoke_test_flag', local_var_params['smoke_test_flag']))  # noqa: E501
        if 'force_reprocess' in local_var_params and local_var_params['force_reprocess'] is not None:  # noqa: E501
            query_params.append(('force_reprocess', local_var_params['force_reprocess']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/uploads', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
