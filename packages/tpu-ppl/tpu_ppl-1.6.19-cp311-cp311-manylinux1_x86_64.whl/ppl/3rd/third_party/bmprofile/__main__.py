import sys
import argparse as arg

from interface import *

def BMProfileArgParser():
    def shapes_type(s):
        shapes = eval(s)
        if type(shapes[0]) == type(0):
            shapes = [shapes]
        return shapes
    def bool_type(s):
        s = s.lower()
        return s == "true" or s == "t"
    def names_type(s):
        s = s.replace("(", "")
        s = s.replace(")", "")
        s = s.replace('"', "")
        s = s.replace("'", "")
        s = s.replace(" ", "")
        return tuple(n for n in s.split(",") if n != "")
    def desc_type(s):
        return s

    description = "bmprofile"
    parser = arg.ArgumentParser(description     = description,
                                formatter_class = arg.ArgumentDefaultsHelpFormatter,
                                prog            = "python -m bmprofile")
    parser.add_argument("--mode",
                        type=str,
                        choices=["time", "command", "check", "sim"],
                        help="time: parse bmprofile data to visualize. "
                        "sim: parse net_stat.sim in bmprofile to visualize. "
                        "command: parse static commands in bmprofile to analyse the command params. ",
                        default="time")
    parser.add_argument("--arch",
                        type=str,
                        choices=["BM1684", "BM1684X"],
                        help="chip arch",
                        default="BM1684")
    parser.add_argument("--format",
                        type=str,
                        choices=["html", "csv", "console", "layer"],
                        help="output format",
                        default="html")
    parser.add_argument("--test",
                        type=str,
                        help="only for mode=command, check some condition for command",
                        default="")
    parser.add_argument("--option",
                        type=str,
                        help="bmprofile extra options, format is 'key1=value1,key2=value2,...'",
                        default=""
                        )
    parser.add_argument("input_dir",
                        type=str,
                        help="bmprofile_data dir generated by bmruntime",
                        nargs="?",
                        )
    parser.add_argument("output_dir",
                        type=str,
                        nargs="?",
                        help="output dir that contains parsing result",
                        default="bmprofile_out")
    return parser

if __name__ == "__main__":
    parser = BMProfileArgParser()
    args = parser.parse_args()
    if args.mode == "time":
        bmprofile_analyze(args.input_dir, args.output_dir, args.format, args.option)
    elif args.mode == "sim":
        bmprofile_simulate(args.input_dir, args.output_dir, args.format, args.option)
    elif args.mode == "command":
        bmprofile_parse_command(args.input_dir, args.output_dir, args.test, arch=args.arch)
    elif args.mode == "check":
        bmprofile_check_command(args.input_dir, args.output_dir, args.test, arch=args.arch)
    else:
        assert 0, "Not support mode={}".format(args.mode)
