from puzzle_solver import map_solver as solver


# https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/map.html#30x25n75dh%23361746541306980
regions = {
  0: {1, 11, 12, 27},
  1: {11, 12, 13, 6, 2},
  2: {3, 4, 6, 7, 9, 10},
  3: {4},
  4: {5, 7, 8},
  5: {8, 14, 15},
  6: {9, 13, 16},
  7: {8},
  8: {10, 14, 18, 19, 20, 23},
  9: {10, 17},
  10: {17, 18, 21, 22},
  11: {12},
  12: {13, 17, 27},
  13: {16, 17},
  14: {15},
  15: {20, 24, 25},
  16: {17},
  17: {21, 27, 28, 33},
  18: {22, 23, 29},
  19: {20, 23, 26},
  20: {24, 26, 31},
  21: {22, 28, 29, 36, 37, 38},
  22: {29},
  23: {26, 29, 30, 34, 39},
  24: {25, 31, 35},
  25: {35, 42, 48, 50, 52},
  26: {30},
  27: {32, 33, 44},
  28: {33, 38, 45},
  29: {37, 39, 46},
  30: {31, 34, 35, 40, 41, 47, 48, 56},
  31: {35},
  32: {43, 44},
  33: {44},
  34: {39, 40},
  35: {41, 42},
  36: {37},
  37: {38, 46, 49, 51, 54, 59, 60, 61},
  38: {44, 45, 49, 51, 53, 58, 59},
  39: {40, 46},
  40: {55, 56},
  41: {42, 47},
  42: {48},
  43: {44, 53, 57, 58, 62},
  44: {45, 53},
  45: {},
  46: {55, 56, 60, 64},
  47: {48},
  48: {52, 56},
  49: {51},
  50: {52, 63},
  51: {54, 59},
  52: {56, 63, 68},
  53: {57, 58},
  54: {59},
  55: {56},
  56: {65, 66, 68},
  57: {58},
  58: {59, 62},
  59: {61, 62, 51, 67, 69},
  60: {61, 64, 70},
  61: {69, 70},
  62: {67},
  63: {68, 71, 73, 74},
  64: {65, 70},
  65: {66, 68, 73},
  66: {68},
  67: {69, 72},
  68: {71, 73},
  69: {70, 72},
  70: {72},
  71: {73},
  72: {},
  73: {},
  74: {},
}
fixed_colors = {
  0: 'Y', 3: 'R', 7: 'Y', 14: 'Y', 15: 'R', 16: 'Y', 20: 'G', 32: 'B', 33: 'Y', 34: 'R', 35: 'G',
  36: 'B', 39: 'G', 43: 'G', 47: 'R', 55: 'B', 60: 'R', 64: 'G', 66: 'Y', 67: 'G', 73: 'G', 74: 'G',
}

def test_ground():
  binst = solver.Board(regions=regions, fixed_colors=fixed_colors)
  solutions = binst.solve_and_print()
  ground = {
    0: 'Y', 1: 'R', 2: 'G', 3: 'R', 4: 'B', 5: 'G', 6: 'B', 7: 'Y', 8: 'R', 9: 'Y', 10: 'B', 11: 'G', 12: 'B', 13: 'G', 14: 'Y', 15: 'R', 16: 'Y', 17: 'R', 18: 'G', 19: 'B',
    20: 'G', 21: 'Y', 22: 'R', 23: 'Y', 24: 'Y', 25: 'B', 26: 'R', 27: 'G', 28: 'G', 29: 'B', 30: 'B', 31: 'R', 32: 'B', 33: 'Y', 34: 'R', 35: 'G', 36: 'B', 37: 'G', 38: 'B', 39: 'G',
    40: 'Y', 41: 'Y', 42: 'R', 43: 'G', 44: 'R', 45: 'Y', 46: 'Y', 47: 'R', 48: 'Y', 49: 'Y', 50: 'G', 51: 'R', 52: 'R', 53: 'Y', 54: 'B', 55: 'B', 56: 'G', 57: 'B', 58: 'R', 59: 'Y',
    60: 'R', 61: 'B', 62: 'B', 63: 'Y', 64: 'G', 65: 'R', 66: 'Y', 67: 'G', 68: 'B', 69: 'R', 70: 'Y', 71: 'R', 72: 'B', 73: 'G', 74: 'G'
  }
  assert len(solutions) == 1, f'unique solutions != 1, == {len(solutions)}'
  assert set(solutions[0].assignment.keys()) == set(ground.keys()), f'solution keys != ground assignment keys, {set(solutions[0].assignment.keys()) ^ set(ground.keys())} \n\n\n{solutions[0].assignment} \n\n\n{ground}'
  for key in solutions[0].assignment.keys():
    assert binst.int_to_color[solutions[0].assignment[key]] == ground[key], f'solutions[0].assignment[{key}] != ground[{key}], {solutions[0].assignment[key]} != {ground[key]}'

if __name__ == '__main__':
  test_ground()
