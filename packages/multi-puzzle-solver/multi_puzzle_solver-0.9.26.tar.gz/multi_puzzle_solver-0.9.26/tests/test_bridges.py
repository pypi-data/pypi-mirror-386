import numpy as np

from puzzle_solver import bridges_solver as solver
from puzzle_solver.core.utils import get_pos

# https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/bridges.html#15x15i30e10m2d2%23250028023273916
board = np.array([
  [' ', ' ', ' ', ' ', ' ', '1', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '3'],
  ['2', ' ', ' ', ' ', ' ', ' ', ' ', '4', ' ', ' ', '4', ' ', ' ', '2', ' '],
  [' ', ' ', ' ', '2', ' ', '4', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
  [' ', '1', ' ', ' ', ' ', ' ', ' ', ' ', '1', ' ', '2', ' ', ' ', ' ', '4'],
  [' ', '2', ' ', '3', ' ', '6', ' ', '4', ' ', ' ', '3', ' ', '1', ' ', ' '],
  ['2', ' ', ' ', ' ', '2', ' ', ' ', ' ', '1', ' ', ' ', '2', ' ', ' ', ' '],
  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
  ['2', ' ', ' ', ' ', ' ', ' ', '5', ' ', ' ', '3', ' ', '4', ' ', ' ', ' '],
  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
  [' ', '3', ' ', ' ', ' ', '3', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
  [' ', ' ', '2', ' ', '2', ' ', ' ', ' ', ' ', ' ', ' ', '5', ' ', ' ', '4'],
  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
  [' ', ' ', '1', ' ', ' ', '2', ' ', ' ', ' ', '1', ' ', '2', ' ', ' ', ' '],
  [' ', '4', ' ', ' ', '4', ' ', '3', ' ', ' ', ' ', '4', ' ', ' ', ' ', '4'],
])

def test_ground():
  binst = solver.Board(board=board)
  solutions = binst.solve_and_print()
  ground = np.array([
    ['    ', '    ', '    ', '    ', '    ', '1000', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '0120'],
    ['1010', '    ', '    ', '    ', '    ', '    ', '    ', '2110', '    ', '    ', '2200', '    ', '    ', '0200', '    '],
    ['    ', '    ', '    ', '2000', '    ', '0220', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    '],
    ['    ', '0010', '    ', '    ', '    ', '    ', '    ', '    ', '1000', '    ', '1100', '    ', '    ', '    ', '0112'],
    ['    ', '1001', '    ', '2100', '    ', '2202', '    ', '1201', '    ', '    ', '1110', '    ', '0100', '    ', '    '],
    ['1001', '    ', '    ', '    ', '1100', '    ', '    ', '    ', '0100', '    ', '    ', '0020', '    ', '    ', '    '],
    ['    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    '],
    ['2000', '    ', '    ', '    ', '    ', '    ', '2210', '    ', '    ', '0210', '    ', '0022', '    ', '    ', '    '],
    ['    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    '],
    ['    ', '1020', '    ', '    ', '    ', '0120', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    '],
    ['    ', '    ', '1010', '    ', '0110', '    ', '    ', '    ', '    ', '    ', '    ', '1022', '    ', '    ', '0121'],
    ['    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    '],
    ['    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    ', '    '],
    ['    ', '    ', '0001', '    ', '    ', '0002', '    ', '    ', '    ', '0001', '    ', '0002', '    ', '    ', '    '],
    ['    ', '2002', '    ', '    ', '1201', '    ', '1101', '    ', '    ', '    ', '2101', '    ', '    ', '    ', '0202'],
  ])
  assert len(solutions) == 1, f'unique solutions != 1, == {len(solutions)}'
  solution = solutions[0].assignment
  ground_assignment = {get_pos(x=x, y=y): tuple(int(i) for i in ground[y][x].strip()) for x in range(ground.shape[1]) for y in range(ground.shape[0]) if ground[y][x].strip()}
  assert set(solution.keys()) == set(ground_assignment.keys()), f'solution keys != ground assignment keys, {set(solution.keys()) ^ set(ground_assignment.keys())} \n\n\n{solution} \n\n\n{ground_assignment}'
  for pos in solution.keys():
    assert solution[pos] == ground_assignment[pos], f'solution[{pos}] != ground_assignment[{pos}], {solution[pos]} != {ground_assignment[pos]}'

if __name__ == '__main__':
  test_ground()
