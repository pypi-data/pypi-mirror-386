import numpy as np

from puzzle_solver import sudoku_solver as solver
from puzzle_solver.core.utils import get_pos

# The link takes a few seconds to load
# https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/solo.html#4x4du%23149435502448981
board = np.array([
  [' ', '7', '5', '4',  '9', '1', 'c', 'e',  'd', 'f', ' ', ' ',  '2', ' ', '3', ' '],
  [' ', ' ', ' ', ' ',  'f', 'a', ' ', ' ',  ' ', '6', ' ', 'c',  ' ', ' ', '8', 'b'],
  [' ', ' ', '1', ' ',  ' ', '6', ' ', ' ',  ' ', '9', ' ', ' ',  ' ', 'g', ' ', 'd'],
  [' ', '6', ' ', ' ',  ' ', ' ', ' ', ' ',  ' ', ' ', '5', 'g',  'c', '7', ' ', ' '],

  ['4', 'a', ' ', ' ',  ' ', ' ', ' ', ' ',  ' ', ' ', ' ', '9',  ' ', ' ', ' ', ' '],
  [' ', 'g', 'f', ' ',  'e', ' ', ' ', '5',  '4', ' ', ' ', '1',  ' ', '9', ' ', '8'],
  [' ', ' ', ' ', ' ',  'a', '3', 'b', '7',  'c', 'g', ' ', '6',  ' ', ' ', ' ', '4'],
  [' ', 'b', ' ', '7',  ' ', ' ', ' ', ' ',  'f', ' ', '3', ' ',  ' ', 'a', ' ', '6'],

  ['2', ' ', 'a', ' ',  ' ', 'c', ' ', '1',  ' ', ' ', ' ', ' ',  '7', ' ', '6', ' '],
  ['8', ' ', ' ', ' ',  '3', ' ', 'e', 'f',  '7', '5', 'c', 'd',  ' ', ' ', ' ', ' '],
  ['9', ' ', '3', ' ',  '7', ' ', ' ', 'a',  '6', ' ', ' ', '2',  ' ', 'b', '1', ' '],
  [' ', ' ', ' ', ' ',  '4', ' ', ' ', ' ',  ' ', ' ', ' ', ' ',  ' ', ' ', 'e', 'f'],

  [' ', ' ', 'g', 'd',  '2', '9', ' ', ' ',  ' ', ' ', ' ', ' ',  ' ', ' ', '4', ' '],
  ['a', ' ', 'b', ' ',  ' ', ' ', '5', ' ',  ' ', ' ', 'd', ' ',  ' ', '8', ' ', ' '],
  ['e', '8', ' ', ' ',  '1', ' ', '4', ' ',  ' ', ' ', '6', '7',  ' ', ' ', ' ', ' '],
  [' ', '3', ' ', '9',  ' ', ' ', 'f', '8',  'a', 'e', 'g', '5',  'b', 'c', 'd', ' '],
])

def test_ground():
  binst = solver.Board(board=board)
  solutions = binst.solve_and_print()
  ground = np.array([
    ['g', '7', '5', '4', '9', '1', 'c', 'e', 'd', 'f', 'b', '8', '2', '6', '3', 'a'],
    ['3', '9', 'd', 'e', 'f', 'a', '7', 'g', '2', '6', '4', 'c', '5', '1', '8', 'b'],
    ['b', 'c', '1', '8', '5', '6', '3', '2', 'e', '9', '7', 'a', '4', 'g', 'f', 'd'],
    ['f', '6', '2', 'a', 'b', '8', 'd', '4', '1', '3', '5', 'g', 'c', '7', '9', 'e'],
    ['4', 'a', 'e', '3', '8', 'f', '1', '6', '5', 'b', '2', '9', 'g', 'd', 'c', '7'],
    ['6', 'g', 'f', 'c', 'e', 'd', '2', '5', '4', '7', 'a', '1', '3', '9', 'b', '8'],
    ['d', '1', '9', '2', 'a', '3', 'b', '7', 'c', 'g', '8', '6', 'e', 'f', '5', '4'],
    ['5', 'b', '8', '7', 'g', '4', '9', 'c', 'f', 'd', '3', 'e', '1', 'a', '2', '6'],
    ['2', 'e', 'a', 'b', 'd', 'c', 'g', '1', '3', '8', '9', 'f', '7', '4', '6', '5'],
    ['8', '4', '6', '1', '3', 'b', 'e', 'f', '7', '5', 'c', 'd', 'a', '2', 'g', '9'],
    ['9', 'f', '3', 'g', '7', '5', '8', 'a', '6', '4', 'e', '2', 'd', 'b', '1', 'c'],
    ['c', 'd', '7', '5', '4', '2', '6', '9', 'g', 'a', '1', 'b', '8', '3', 'e', 'f'],
    ['7', '5', 'g', 'd', '2', '9', 'a', 'b', '8', 'c', 'f', '3', '6', 'e', '4', '1'],
    ['a', '2', 'b', '6', 'c', 'e', '5', '3', '9', '1', 'd', '4', 'f', '8', '7', 'g'],
    ['e', '8', 'c', 'f', '1', 'g', '4', 'd', 'b', '2', '6', '7', '9', '5', 'a', '3'],
    ['1', '3', '4', '9', '6', '7', 'f', '8', 'a', 'e', 'g', '5', 'b', 'c', 'd', '2'],
  ])
  assert len(solutions) == 1, f'unique solutions != 1, == {len(solutions)}'
  solution = solutions[0].assignment
  ground_assignment = {get_pos(x=x, y=y): ord(ground[y][x]) - ord('a') + 10 if ground[y][x].isalpha() else int(ground[y][x]) for x in range(ground.shape[1]) for y in range(ground.shape[0])}
  assert set(solution.keys()) == set(ground_assignment.keys()), f'solution keys != ground assignment keys, {set(solution.keys())} != {set(ground_assignment.keys())}'
  for pos in solution.keys():
    assert solution[pos] == ground_assignment[pos], f'solution[{pos}] != ground_assignment[{pos}], {solution[pos]} != {ground_assignment[pos]}'

if __name__ == '__main__':
  test_ground()
