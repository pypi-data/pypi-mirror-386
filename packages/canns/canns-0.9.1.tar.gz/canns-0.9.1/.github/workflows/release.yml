name: Release and Deploy

on:
  workflow_dispatch:
  # Disabled automatic triggers
  # release:
  #   types: [published]
  # push:
  #   tags:
  #     - 'v*'

jobs:
  # Build and publish to PyPI
  build-and-publish:
    name: Build and publish Python package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version detection
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify version matches tag
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        # Build package to get version
        python -m build
        # Extract version from built package wheel
        PACKAGE_VERSION=$(python -c "
        import os
        from pathlib import Path
        
        # Find the wheel file
        wheel_files = list(Path('dist').glob('*.whl'))
        if wheel_files:
            wheel_file = wheel_files[0]
            # Extract version from wheel filename
            # Format: package_name-version-py3-none-any.whl
            version = wheel_file.name.split('-')[1]
            print(version)
        else:
            print('${TAG_VERSION}')
        ")
        echo "Package version: $PACKAGE_VERSION"
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version mismatch: tag=$TAG_VERSION, package=$PACKAGE_VERSION"
          exit 1
        fi
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: python -m twine upload dist/*

  # Update documentation
  update-docs:
    name: Update documentation
    runs-on: ubuntu-latest
    needs: build-and-publish
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r docs/requirements.txt
    
    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html
    
    - name: Trigger ReadTheDocs build
      if: success()
      run: |
        curl -X POST -H "Authorization: Token ${{ secrets.READTHEDOCS_TOKEN }}" \
             https://readthedocs.org/api/v3/projects/canns/versions/latest/builds/

  # Create GitHub release notes
  create-release-notes:
    name: Create release notes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 $TAG_NAME^ 2>/dev/null || echo "")
        
        echo "Current tag: $TAG_NAME"
        echo "Previous tag: $PREV_TAG"
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..$TAG_NAME)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $TAG_NAME)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        ## Installation
        
        \`\`\`bash
        pip install canns==$TAG_NAME
        \`\`\`
        
        ## Documentation
        
        - [ðŸ“– Documentation](https://canns.readthedocs.io/)
        - [ðŸš€ Interactive Notebooks](https://mybinder.org/v2/gh/routhleck/canns/HEAD?filepath=docs%2Fen%2Fnotebooks)
        
        **Full Changelog**: https://github.com/routhleck/canns/compare/$PREV_TAG...$TAG_NAME
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        gh release create "$TAG_NAME" \
          --title "Release $TAG_NAME" \
          --notes-file release_notes.md \
          --verify-tag