[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cursus"
dynamic = ["version"]
description = "Automatic SageMaker Pipeline Generation from DAG Specifications"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Tianpei Xie", email = "unidoctor@gmail.com"}
]
maintainers = [
    {name = "Tianpei Xie", email = "unidoctor@gmail.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Framework :: AWS CDK",
]
keywords = [
    "sagemaker", 
    "pipeline", 
    "dag", 
    "machine-learning", 
    "aws", 
    "automation",
    "mlops",
    "data-science",
    "workflow",
    "orchestration"
]
requires-python = ">=3.8"

# Core dependencies (minimal for basic functionality)
dependencies = [
    "boto3>=1.39.0",
    "botocore>=1.39.0",
    "sagemaker>=2.248.0",
    "pydantic>=2.11.0",
    "PyYAML>=6.0.0",
    "networkx>=2.8.0",
    "click>=8.2.0",
    "requests>=2.32.0",
    "packaging>=24.2.0",
    "typing_extensions>=4.14.0",
    "pandas>=2.1.0",
    "numpy>=1.26.0",
    "scikit-learn>=1.3.0",
    "joblib>=1.5.0",
    "xgboost>=2.0.0",
    "matplotlib>=3.8.0",
    "pyarrow>=14.0.0",
]

[project.optional-dependencies]
# ML Framework dependencies
pytorch = [
    "torch>=2.0.0",
    "pytorch-lightning>=2.0.0",
    "torchmetrics>=1.0.0",
    "lightning>=2.0.0",
]
xgboost = [
    "xgboost>=2.0.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
]
nlp = [
    "transformers>=4.30.0",
    "spacy>=3.7.0",
    "tokenizers>=0.15.0",
    "huggingface-hub>=0.20.0",
]
processing = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pyarrow>=14.0.0",
]
# Jupyter notebook integration dependencies
jupyter = [
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "plotly>=5.0.0",
    "nbformat>=5.0.0",
    "jinja2>=3.0.0",
    "seaborn>=0.12.0",
    "jupyterlab>=4.0.0",
    "ipython>=8.0.0",
]
# Visualization dependencies (optional)
viz = [
    "seaborn>=0.12.0",
    "plotly>=5.0.0",
]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
# Documentation dependencies
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
]
# Full installation
all = [
    "cursus[pytorch,xgboost,nlp,processing,jupyter]"
]

[project.scripts]
cursus = "cursus.cli:main"

[project.urls]
Homepage = "https://github.com/TianpeiLuke/cursus"
Documentation = "https://github.com/TianpeiLuke/cursus/blob/main/README.md"
Repository = "https://github.com/TianpeiLuke/cursus"
Issues = "https://github.com/TianpeiLuke/cursus/issues"
Changelog = "https://github.com/TianpeiLuke/cursus/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
version = {file = "VERSION"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["cursus*"]

[tool.setuptools.package-data]
cursus = ["py.typed", "*.yaml", "*.yml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cursus"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Allow forward references and reduce false positives
allow_untyped_globals = true
disable_error_code = ["name-defined", "unreachable", "attr-defined"]

[[tool.mypy.overrides]]
module = [
    "sagemaker.*",
    "boto3.*",
    "botocore.*",
    "networkx.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "mods_workflow_core.*",
    "mods_workflow_helper.*",
    "secure_ai_sandbox_workflow_python_sdk.*",
]
ignore_missing_imports = true
ignore_errors = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --import-mode=importlib"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/cursus"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
