# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from meshtrade.compliance.client.v1 import client_pb2 as meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2
from meshtrade.compliance.client.v1 import service_pb2 as meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2


class ClientServiceStub(object):
    """Service manages client profiles for compliance and Know Your Customer (KYC)
    purposes.

    The main entity managed by this service is the `Client` resource. A client can
    be a natural person, company, or trust. This service allows you to retrieve
    the compliance profiles for these clients.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateClient = channel.unary_unary(
                '/meshtrade.compliance.client.v1.ClientService/CreateClient',
                request_serializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.CreateClientRequest.SerializeToString,
                response_deserializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2.Client.FromString,
                _registered_method=True)
        self.GetClient = channel.unary_unary(
                '/meshtrade.compliance.client.v1.ClientService/GetClient',
                request_serializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.GetClientRequest.SerializeToString,
                response_deserializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2.Client.FromString,
                _registered_method=True)
        self.ListClients = channel.unary_unary(
                '/meshtrade.compliance.client.v1.ClientService/ListClients',
                request_serializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.ListClientsRequest.SerializeToString,
                response_deserializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.ListClientsResponse.FromString,
                _registered_method=True)


class ClientServiceServicer(object):
    """Service manages client profiles for compliance and Know Your Customer (KYC)
    purposes.

    The main entity managed by this service is the `Client` resource. A client can
    be a natural person, company, or trust. This service allows you to retrieve
    the compliance profiles for these clients.
    """

    def CreateClient(self, request, context):
        """CreateClient creates a single client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClient(self, request, context):
        """GetClient retrieves a single client's compliance profile by its unique resource name.

        This allows for fetching the complete compliance details of a specific client,
        including all associated information like identification documents, tax residencies,
        and company structures.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClients(self, request, context):
        """ListClients retrieves a collection of client compliance profiles.

        This method is useful for fetching multiple client records at once.
        Note: This endpoint does not currently support pagination or filtering.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateClient': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClient,
                    request_deserializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.CreateClientRequest.FromString,
                    response_serializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2.Client.SerializeToString,
            ),
            'GetClient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClient,
                    request_deserializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.GetClientRequest.FromString,
                    response_serializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2.Client.SerializeToString,
            ),
            'ListClients': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClients,
                    request_deserializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.ListClientsRequest.FromString,
                    response_serializer=meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.ListClientsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meshtrade.compliance.client.v1.ClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('meshtrade.compliance.client.v1.ClientService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientService(object):
    """Service manages client profiles for compliance and Know Your Customer (KYC)
    purposes.

    The main entity managed by this service is the `Client` resource. A client can
    be a natural person, company, or trust. This service allows you to retrieve
    the compliance profiles for these clients.
    """

    @staticmethod
    def CreateClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshtrade.compliance.client.v1.ClientService/CreateClient',
            meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.CreateClientRequest.SerializeToString,
            meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2.Client.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshtrade.compliance.client.v1.ClientService/GetClient',
            meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.GetClientRequest.SerializeToString,
            meshtrade_dot_compliance_dot_client_dot_v1_dot_client__pb2.Client.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshtrade.compliance.client.v1.ClientService/ListClients',
            meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.ListClientsRequest.SerializeToString,
            meshtrade_dot_compliance_dot_client_dot_v1_dot_service__pb2.ListClientsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
