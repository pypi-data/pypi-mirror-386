# Copyright (c) 2022 Christophe Dufaza <chris@openmarl.org>
#
# SPDX-License-Identifier: Apache-2.0

# Devicetree shell default configuration.
#
# Configuration files are written in standard Python configparser
# format (aka Microsoft Windows INI files).

[dtsh]
# Devicetree shell configuration.
#
# String values:
# - double-quote when ending with trailing spaces
# - supports 'u' escape sequences followed by four hex digits
#   giving an Unicode code point (e.g. "\u2768")
#
# Boolean values:
# - True: '1', 'yes', 'true', and 'on'
# - False: '0', 'no', 'false', and 'off'
#
# Integer values:
# - base-2, -8, -10 and -16 are supported
# - if not base 10, the actual base is determined by the prefix
#   "0b/0B" (base-2), "0o/0O" (base-8), or "0x/0X" (base-16)
#
# Float values:
# - decimal notation: e.g. 0.1
# - scientific notation: e.g. 1e-1
#
# Option values support (extended) interpolation:
#   hello = hello
#   hello_world = ${hello} world
#
# Use a $$ to escape the dollar sign:
#   dollar = $$


################################################################################
# UNICODE Symbols.

# Ellipsis.
# Default: u2026 ("…")
wchar.ellipsis = \u2026

# North-East Arrow.
# Default:  u2197 ("↗")
wchar.arrow_ne = \u2197

# Notrh-West Arrow.
# Default: u2196 ("↖")
wchar.arrow_nw = \u2196

# Rightwards arrow.
# Default: u2192 ("→")
wchar.arrow_right = \u2192

# Rightwards arrow with hook.
# Default: u21B3 ("↳")
wchar.arrow_right_hook = \u21B3

# Tiret.
# Default: u2014 ("—").
wchar.dash = \u2014

# Link.
# Default: u1f517 ("🔗")
wchar.link = \u1F517


################################################################################
# Stateful ANSI prompt.
#
# Shell prompt:
# - ANSI: may contain ANSI escape sequences (Select Graphic Rendition, SGR)
# - support an alternative value, e.g. for changing the prompt color
#   when the last command has failed
#
# To use ANSI escape codes in `input()` without breaking
# the GNU readline cursor position, please protect SGR parameters
# with RL_PROMPT_{START,STOP}_IGNORE markers:
#
#     <SGR> := <CSI><n1, n2, ...>m
#     <PROMPT> := <START_IGNORE><SGR><END_IGNORE>
#
#     <START_IGNORE> := '\001'
#     <END_IGNORE> := '\002'
#
#     <CSI> := ESC[
#           := \x1b[
#           := \033[
#
# Additionally, both prompts should occupy the same physical space
# on the terminal screen: i.e. they should involve the same number
# of characters outside of these RL markers.
#
# For example, a bold (1) 8-bit color (38;5;N;1) stateful prompt:
#
#     default: "\001\x1b[38;5;99;1m\002>\001\x1b[0m\002 "
#
#     alt: "\001\x1b[38;5;88;1m\002>\001\x1b[0m\002 "
#
# See:
# - ANSI/VT100 Terminal Control Escape Sequences
#   https://www2.ccs.neu.edu/research/gpc/VonaUtils/vona/terminal/vtansi.htm
# - How to fix column calculation in Python readline if using color prompt
#   https://stackoverflow.com/questions/9468435
# - ANSI escape code
#   https://en.wikipedia.org/wiki/ANSI_escape_code

# Prompt character (or string, actually) from which
# are derived the default ANSI prompts.
#
# Common UTF-8 prompt characters:
#
# - Single Right-Pointing Angle Quotation Mark: u203a (›)
# - Medium Right-Pointing Angle Bracket Ornament: u276d (❭)
# - Heavy Right-Pointing Angle Bracket Ornament: u2771 (❱)
# - Heavy Right-Pointing Angle Quotation Mark Ornament: u276f (❯)
# - Right-Pointing Curved Angle Bracket: u29fd (⧽)
# - BLACK RIGHT-POINTING TRIANGLE: u25b6 (▶)
# - Right shaded arrow \u27a9 (➩)
#
# Or simply:
# - ">"
# - "$"
# - "dtsh:"
#
# Type: String
#
# Default: "\u276D"
prompt.wchar = \u276D

# Default ANSI prompt.
#
# Note: the trailing space is intentional but optional.
#
# Type: String
prompt.default = "\001\x1b[38;5;99m\002${prompt.wchar}\001\x1b[0m\002 "

# Alternative prompt, e.g. after a command has failed.
#
# Note: the trailing space is intentional but optional.
#
# Type: String
prompt.alt = "\001\x1b[38;5;88m\002${prompt.wchar}\001\x1b[0m\002 "

# Whether to append an empty line after commands output.
# Type: Bool
# Default: True
prompt.sparse = yes


# Whether to assume the "use a long listing format" flag (-l) flag is always set.
# Type: Bool
# Default: True
pref.always_longfmt = no

# Whether to print sizes with SI units (bytes, kB, MB).
# Otherwise, sizes are printed in hexadecimal format.
# Type: Bool
# Default: True
pref.sizes_si = yes

# Whether to print hexadecimal digits upper case,
# e.g. "0xFF" rather than "0xff".
#
# Type: Bool
# Default: False
pref.hex_upper = no


# Whether to hide files and directories whose
# name starts with "." (e.g. when completing file paths).
#
# Type: Bool
# Default: True
pref.fs.hide_dotted = yes

# Whether to forbid spaces in redirection file paths.
#
# Type: Bool
# Default: True
pref.fs.no_spaces = yes

# Whether to forbid command output redirection
# to overwrite existing files.
#
# Type: Bool
# Default: True
pref.fs.no_overwrite = yes

# Whether to forbid command output redirection
# to overwrite existing files,
# even when appending.
#
# Type: Bool
# Default: False
pref.fs.no_overwrite_strict = no


# List views: whether to show the headers.
#
# Type: Bool
# Default: True
pref.list.headers = yes

# List views: whether to prevent from wrapping cell contents.
#
# Type: Bool
# Default: True
pref.list.no_wrap = yes

# List views: placeholder for missing values.
#
# Type: String
# Default: Unset (no place holder)
pref.list.place_holder =

# List views: default format string for node fields.
#
# Type: String
# Default: NLC
pref.list.fmt = NLC

# List views: rendering for actionable texts (aka links).
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.list.actionable_type = link

# List views: whether to allow multiple-line cells.
#
# Type: Bool
# Default: True
pref.list.multi = no

# Tree views: whether to show the headers.
#
# Type: Bool
# Default: True
pref.tree.headers = yes

# Tree views: placeholder for missing values.
#
# Type: String
# Default: Ellipsis
pref.tree.place_holder = ${wchar.ellipsis}

# Tree views: default format string for node fields.
#
# The first field specifies anchors,
# the remaining fields the list view columns
# of 2-sided views.
#
# Type: String
# Default: Nd
pref.tree.fmt = Nd

# Tree views: rendering for actionable texts (aka links)
# in anchors.
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.tree.actionable_type = none

# Tree views: rendering for actionable texts (aka links)
# in the left list view of a 2-sided (long format).
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.2sided.actionable_type = alt


# Symbol to anchor child-bindings to their parent
# in tree-views.
# Set it to an empty value to disable.
#
# Example anchor: ${wchar.arrow_right_hook}
#
# Type: String
# Default: disabled
pref.tree.cb_anchor =

# Default rendering for actionable texts (aka links).
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.actionable_type = link

# Alternative actionable text.
#
# This is the appended text element that will
# actually be actionable.
# Depending on availability, one may try:
# - "^": ASCII fallback
# - North-East Arrow (U+2197): the most widespread symbol
# - Link symbol (U+1F517)
# - External link symbol (not yet standardized,
#   e.g. U+F08E AwesomeFont)
#
# Type: String
# Default: "[North-East Arrow]"
pref.actionable_wchar = [${wchar.arrow_ne}]


# Maximum width in number characters for commands output redirection.
# Type: Integer
# Default: 255
pref.redir2_maxwidth = 255


# Command output redirection to HTML: theme.
#
# Configure text and background colors for HTML documents.
#
# Possible values:
# - "svg": default theme for SVG and HTML documents
#   (looks like reading in a console with a dark color profile)
# - "html": theme recommended for printable HTML documents (no background)
# - "dark": darker
# - "light": lighter
# - "night": darkest, highest contrasts

# Type: String
# Default: svg
pref.html.theme = svg

# Command output redirection to HTML: font family.
# This the family name, e.g. "Source Code Pro".
#
# Multiple coma separated values allowed,
# e.g. "Source Code Pro, Courier New".
#
# Note:
# - the generic "monospace" family is automatically appended last
# - the "Courier New" font family is installed nearly everywhere,
#   but will unlikely provide all box drawing characters required
#   to properly render (sharp) trees and tables
# - "DejaVu Sans Mono" is almost as widespread, and trees and tables
#   should render fine, at least for the default HTML font size ("medium")
# - fonts families like "Source Code Pro" are quite popular
#   among software engineers, and may offer better rendering for
#   non default font sizes
#
# The HTML client should pick up the first font it finds: to use the
# default monospace font configured in e.g. your browser's settings,
# just leave this preference empty.
#
# Type: String
# Default: "DejaVu Sans Mono"
pref.html.font_family = DejaVu Sans Mono

# Command output redirection to HTML: font size.
#
# Any valid value for CSS "font-size:" is allowed, e.g.:
# - predefined absolute sizes: xx-small, ..., medium, ... xxx-large
# - relative sizes: smaller, larger
# - arbitrary absolute values: 18px, 0.8em
#
# See:
# - https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
#
# Default: "medium"
pref.html.font_size = medium

# Command output redirection to HTML: compact output.
#
# When this preference is set, DTSh won't separate successive captured commands
# by an additional blank line.
# Recommended for HTML.
#
# Type: bool
# Default: Yes
pref.html.compact = yes


# Command output redirection to SVG: theme.
#
# Configure text and background colors for SVG documents.
#
# Possible values:
# - "svg": default theme for SVG and HTML documents
#   (looks like reading in a console with a dark color profile)
# - "html": theme recommended for printable HTML documents (no background)
# - "dark": darker
# - "light": lighter
# - "night": darkest, highest contrasts
#
# Type: String
# Default: svg
pref.svg.theme = svg

# Command output redirection to SVG: font family.
# This the family name, e.g. "Source Code Pro".
#
# See also: pref.html.font_family
#
# Fira Code:
# - for this family, all we need (complete CSS specification,
#   reliable source URL from which to download the actual font)
#   is already defined by the SVG format string of the rich library
# - it's the default font expected by the rich API when exporting
#   to SVG, it's thus well tested
# - but the CSS style will be lost if the SVG file is used
#   in an HTML <img> tag
#
# Type: String
# Default: Fira Code
pref.svg.font_family = Fira Code, DejaVu Sans Mono

# Command output redirection to SVG: font aspect ratio.
# This is the width to height ratio, typically 3:5.
#
# Type: Float
# Default: 0.61 (Fira Code exact ratio)
pref.svg.font_ratio = 0.61

# Command output redirection to SVG: contents title.
#
# Add a title to SVG output.
#
# Type: string
# Default: No title
pref.svg.title =

# Command output redirection to SVG: contents decoration.
#
# Whether to decorate the SVG output with macOS-like buttons.
#
# Type: bool
# Default: no
pref.svg.decorations = no

# Command output redirection to SVG: compact output.
#
# When this preference is set, DTSh won't separate successive captured commands
# by an additional blank line.
#
# Type: bool
# Default: no
pref.svg.compact = no


# Pygments theme for YAML syntax highlighting.
#
# E.g.:
#
# - dark: "monokai", "dracula", "material"
# - light: "bw", "sas", "arduino"
#
# See also:
# - https://pygments.org/styles/
# - https://rich.readthedocs.io/en/latest/syntax.html
#
# Type: String
# Default: monokai
pref.yaml.theme = nord

# YAML views: rendering for actionable texts (aka links).
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.yaml.actionable_type = link


# Pygments theme for DTS syntax highlighting.
#
# E.g.:
#
# - dark: "monokai", "dracula", "material"
# - light: "bw", "sas", "arduino"
#
# See also:
# - https://pygments.org/styles/
#
# Type: String
# Default: monokai
pref.dts.theme = monokai

# DTS views: rendering for actionable texts (aka links).
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.dts.actionable_type = alt


# Whether to show missing fields in form views.
#
# If unset, fields with no value are hidden.
#
# Type: bool
# Default: yes
pref.form.show_all = yes

# Rendering for actionable texts (aka links) in forms.
#
# Type: String
#   - "none": do not create hyperlinks
#   - "link" (default): link text like browsers do
#   - "alt": append alternative actionable view
pref.form.actionable_type = alt
