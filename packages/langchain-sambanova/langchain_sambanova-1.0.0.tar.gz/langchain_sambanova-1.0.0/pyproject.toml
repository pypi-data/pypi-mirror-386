[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "langchain-sambanova"
version = "1.0.0"
description = "An integration package connecting SambaNova and LangChain"
authors = ["SambaNova Systems"]
readme = "README.md"
repository = "https://github.com/sambanova/langchain-sambanova"
license = "MIT"

[tool.poetry.urls]
"Source Code" = "https://github.com/sambanova/langchain-sambanova"
"Release Notes" = "https://github.com/sambanova/langchain-sambanova/releases"

[tool.poetry.dependencies]
python = ">=3.10.0,<4.0"
langchain-core = ">0.3.0,<2.0.0"
types-requests = "*"
sambanova = "^1.1.3"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"
pytest-socket = "^0.7.0"
pytest-watcher = "^0.3.4"
pytest-retry = "^1.7.0"
pytest-mock = "^3.10.0"
langchain-tests = "^0.3.11"

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
mypy = "^1.10"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.12"

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.6"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]

[tool.mypy]
disallow_untyped_defs = "True"

[tool.ruff]
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 100

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins
    "B",      # flake8-bugbear
    "ASYNC",  # flake8-async
    "C4",     # flake8-comprehensions
    "COM",    # flake8-commas
    "D",      # pydocstyle
    "E",      # pycodestyle error
    "EM",     # flake8-errmsg
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT",    # flake8-boolean-trap
    "FLY",    # flake8-flynt
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "ISC",    # isort-comprehensions
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PERF",   # flake8-perf
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-rst-docstrings
    "RUF",    # ruff
    "S",      # flake8-bandit
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",    # flake8-2020
]
ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D203",
    "D213",
    "COM812",  # Messes with the formatter
    "ISC001",  # Messes with the formatter
    "PERF203", # Rarely useful
    "S112",    # Rarely useful
    "RUF012",  # Doesn't play well with Pydantic
    "SLF001",  # Private member access
    "UP007",   # pyupgrade: non-pep604-annotation-union
    "UP045",   # pyupgrade: non-pep604-annotation-optional
]
unfixable = ["B028"] # People should intentionally tune the stacklevel

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Tests need assertions
    "S311",  # Standard PRNG not suitable for crypto
]
"docs/*.ipynb" = [
    "T201",  # Docs notebooks use print statements
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5"
markers = [
    "compile: mark placeholder test used to compile integration tests without running them",
    "scheduled: mark tests to run in scheduled testing",
]
asyncio_mode = "auto"

