# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frogml._proto.qwak.model_group import model_group_pb2 as qwak_dot_model__group_dot_model__group__pb2


class ModelGroupManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateIfNotExistsModelGroup = channel.unary_unary(
                '/qwak.model_groups.management.ModelGroupManagementService/CreateIfNotExistsModelGroup',
                request_serializer=qwak_dot_model__group_dot_model__group__pb2.CreateIfNotExistsModelGroupRequest.SerializeToString,
                response_deserializer=qwak_dot_model__group_dot_model__group__pb2.ModelGroupBriefInfoResponse.FromString,
                )
        self.CreateRepositoriesForModelGroup = channel.unary_unary(
                '/qwak.model_groups.management.ModelGroupManagementService/CreateRepositoriesForModelGroup',
                request_serializer=qwak_dot_model__group_dot_model__group__pb2.CreateRepositoriesForModelGroupRequest.SerializeToString,
                response_deserializer=qwak_dot_model__group_dot_model__group__pb2.CreateRepositoriesForModelGroupResponse.FromString,
                )
        self.GetModelGroupInfo = channel.unary_unary(
                '/qwak.model_groups.management.ModelGroupManagementService/GetModelGroupInfo',
                request_serializer=qwak_dot_model__group_dot_model__group__pb2.GetModelGroupInfoRequest.SerializeToString,
                response_deserializer=qwak_dot_model__group_dot_model__group__pb2.ModelGroupBriefInfoResponse.FromString,
                )
        self.GetModelGroupSystemPullImageSecret = channel.unary_unary(
                '/qwak.model_groups.management.ModelGroupManagementService/GetModelGroupSystemPullImageSecret',
                request_serializer=qwak_dot_model__group_dot_model__group__pb2.GetModelGroupSystemPullImageSecretRequest.SerializeToString,
                response_deserializer=qwak_dot_model__group_dot_model__group__pb2.SystemPullSecretInfoNamesResponse.FromString,
                )


class ModelGroupManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateIfNotExistsModelGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRepositoriesForModelGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelGroupInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelGroupSystemPullImageSecret(self, request, context):
        """*
        This end point gets a list of model group names and returns a list of SystemPullSecretInfo
        that contains model group name and the secret pull image with the "system-" addition to the pull secret name
        For example:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelGroupManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateIfNotExistsModelGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIfNotExistsModelGroup,
                    request_deserializer=qwak_dot_model__group_dot_model__group__pb2.CreateIfNotExistsModelGroupRequest.FromString,
                    response_serializer=qwak_dot_model__group_dot_model__group__pb2.ModelGroupBriefInfoResponse.SerializeToString,
            ),
            'CreateRepositoriesForModelGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepositoriesForModelGroup,
                    request_deserializer=qwak_dot_model__group_dot_model__group__pb2.CreateRepositoriesForModelGroupRequest.FromString,
                    response_serializer=qwak_dot_model__group_dot_model__group__pb2.CreateRepositoriesForModelGroupResponse.SerializeToString,
            ),
            'GetModelGroupInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelGroupInfo,
                    request_deserializer=qwak_dot_model__group_dot_model__group__pb2.GetModelGroupInfoRequest.FromString,
                    response_serializer=qwak_dot_model__group_dot_model__group__pb2.ModelGroupBriefInfoResponse.SerializeToString,
            ),
            'GetModelGroupSystemPullImageSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelGroupSystemPullImageSecret,
                    request_deserializer=qwak_dot_model__group_dot_model__group__pb2.GetModelGroupSystemPullImageSecretRequest.FromString,
                    response_serializer=qwak_dot_model__group_dot_model__group__pb2.SystemPullSecretInfoNamesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qwak.model_groups.management.ModelGroupManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelGroupManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateIfNotExistsModelGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.model_groups.management.ModelGroupManagementService/CreateIfNotExistsModelGroup',
            qwak_dot_model__group_dot_model__group__pb2.CreateIfNotExistsModelGroupRequest.SerializeToString,
            qwak_dot_model__group_dot_model__group__pb2.ModelGroupBriefInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRepositoriesForModelGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.model_groups.management.ModelGroupManagementService/CreateRepositoriesForModelGroup',
            qwak_dot_model__group_dot_model__group__pb2.CreateRepositoriesForModelGroupRequest.SerializeToString,
            qwak_dot_model__group_dot_model__group__pb2.CreateRepositoriesForModelGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelGroupInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.model_groups.management.ModelGroupManagementService/GetModelGroupInfo',
            qwak_dot_model__group_dot_model__group__pb2.GetModelGroupInfoRequest.SerializeToString,
            qwak_dot_model__group_dot_model__group__pb2.ModelGroupBriefInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelGroupSystemPullImageSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.model_groups.management.ModelGroupManagementService/GetModelGroupSystemPullImageSecret',
            qwak_dot_model__group_dot_model__group__pb2.GetModelGroupSystemPullImageSecretRequest.SerializeToString,
            qwak_dot_model__group_dot_model__group__pb2.SystemPullSecretInfoNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
