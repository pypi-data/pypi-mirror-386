# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frogml._proto.qwak.jfrog.gateway.v0 import repository_service_pb2 as qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2


class RepositoryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRepository = channel.unary_unary(
                '/jfrog.gateway.repository.v0.RepositoryService/CreateRepository',
                request_serializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.CreateRepositoryRequest.SerializeToString,
                response_deserializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.CreateRepositoryResponse.FromString,
                )
        self.GetRepositoryConfiguration = channel.unary_unary(
                '/jfrog.gateway.repository.v0.RepositoryService/GetRepositoryConfiguration',
                request_serializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.GetRepositoryConfigurationRequest.SerializeToString,
                response_deserializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.GetRepositoryConfigurationResponse.FromString,
                )


class RepositoryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateRepository(self, request, context):
        """Creates a repository
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRepositoryConfiguration(self, request, context):
        """Get Repository Configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RepositoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRepository': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRepository,
                    request_deserializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.CreateRepositoryRequest.FromString,
                    response_serializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.CreateRepositoryResponse.SerializeToString,
            ),
            'GetRepositoryConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRepositoryConfiguration,
                    request_deserializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.GetRepositoryConfigurationRequest.FromString,
                    response_serializer=qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.GetRepositoryConfigurationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jfrog.gateway.repository.v0.RepositoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RepositoryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateRepository(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jfrog.gateway.repository.v0.RepositoryService/CreateRepository',
            qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.CreateRepositoryRequest.SerializeToString,
            qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.CreateRepositoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRepositoryConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jfrog.gateway.repository.v0.RepositoryService/GetRepositoryConfiguration',
            qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.GetRepositoryConfigurationRequest.SerializeToString,
            qwak_dot_jfrog_dot_gateway_dot_v0_dot_repository__service__pb2.GetRepositoryConfigurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
