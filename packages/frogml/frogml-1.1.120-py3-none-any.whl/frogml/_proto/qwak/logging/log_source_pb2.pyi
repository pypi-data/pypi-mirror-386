"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class LogSource(google.protobuf.message.Message):
    """Represent a source to fetch the logs from"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_RUNTIME_FIELD_NUMBER: builtins.int
    REMOTE_BUILD_FIELD_NUMBER: builtins.int
    INFERENCE_EXECUTION_FIELD_NUMBER: builtins.int
    STREAMING_FEATURE_SET_FIELD_NUMBER: builtins.int
    STREAMING_AGGREGATION_FEATURE_SET_FIELD_NUMBER: builtins.int
    BATCH_FEATURE_SET_FIELD_NUMBER: builtins.int
    REAL_TIME_FEATURE_EXTRACTOR_FIELD_NUMBER: builtins.int
    @property
    def model_runtime(self) -> global___ModelRuntimeSource: ...
    @property
    def remote_build(self) -> global___RemoteBuildSource: ...
    @property
    def inference_execution(self) -> global___InferenceExecutionSource: ...
    @property
    def streaming_feature_set(self) -> global___StreamingFeatureSetSource: ...
    @property
    def streaming_aggregation_feature_set(self) -> global___StreamingAggregationFeatureSetSource: ...
    @property
    def batch_feature_set(self) -> global___BatchFeatureSetSource: ...
    @property
    def real_time_feature_extractor(self) -> global___RealTimeFeatureExtractorSource: ...
    def __init__(
        self,
        *,
        model_runtime: global___ModelRuntimeSource | None = ...,
        remote_build: global___RemoteBuildSource | None = ...,
        inference_execution: global___InferenceExecutionSource | None = ...,
        streaming_feature_set: global___StreamingFeatureSetSource | None = ...,
        streaming_aggregation_feature_set: global___StreamingAggregationFeatureSetSource | None = ...,
        batch_feature_set: global___BatchFeatureSetSource | None = ...,
        real_time_feature_extractor: global___RealTimeFeatureExtractorSource | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["batch_feature_set", b"batch_feature_set", "inference_execution", b"inference_execution", "model_runtime", b"model_runtime", "real_time_feature_extractor", b"real_time_feature_extractor", "remote_build", b"remote_build", "source", b"source", "streaming_aggregation_feature_set", b"streaming_aggregation_feature_set", "streaming_feature_set", b"streaming_feature_set"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["batch_feature_set", b"batch_feature_set", "inference_execution", b"inference_execution", "model_runtime", b"model_runtime", "real_time_feature_extractor", b"real_time_feature_extractor", "remote_build", b"remote_build", "source", b"source", "streaming_aggregation_feature_set", b"streaming_aggregation_feature_set", "streaming_feature_set", b"streaming_feature_set"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source", b"source"]) -> typing_extensions.Literal["model_runtime", "remote_build", "inference_execution", "streaming_feature_set", "streaming_aggregation_feature_set", "batch_feature_set", "real_time_feature_extractor"] | None: ...

global___LogSource = LogSource

class RemoteBuildSource(google.protobuf.message.Message):
    """Represent a "remote build source" """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BUILD_ID_FIELD_NUMBER: builtins.int
    PHASE_IDS_FIELD_NUMBER: builtins.int
    build_id: builtins.str
    """Filter by build id"""
    @property
    def phase_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The name of the build phase (not set when we want logs from all phases)"""
    def __init__(
        self,
        *,
        build_id: builtins.str = ...,
        phase_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["build_id", b"build_id", "phase_ids", b"phase_ids"]) -> None: ...

global___RemoteBuildSource = RemoteBuildSource

class ModelRuntimeSource(google.protobuf.message.Message):
    """Represent a "model runtime source" """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEPLOYMENT_ID_FIELD_NUMBER: builtins.int
    BUILD_ID_FIELD_NUMBER: builtins.int
    deployment_id: builtins.str
    """Filter by deployment id"""
    build_id: builtins.str
    """Filter by build id"""
    def __init__(
        self,
        *,
        deployment_id: builtins.str = ...,
        build_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["build_id", b"build_id", "deployment_id", b"deployment_id", "search_by", b"search_by"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["build_id", b"build_id", "deployment_id", b"deployment_id", "search_by", b"search_by"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["search_by", b"search_by"]) -> typing_extensions.Literal["deployment_id", "build_id"] | None: ...

global___ModelRuntimeSource = ModelRuntimeSource

class InferenceExecutionSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFERENCE_JOB_ID_FIELD_NUMBER: builtins.int
    INFERENCE_TASK_ID_FIELD_NUMBER: builtins.int
    inference_job_id: builtins.str
    """Filter by deployment id"""
    inference_task_id: builtins.str
    """Filter by build id"""
    def __init__(
        self,
        *,
        inference_job_id: builtins.str = ...,
        inference_task_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["inference_job_id", b"inference_job_id", "inference_task_id", b"inference_task_id", "search_by", b"search_by"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["inference_job_id", b"inference_job_id", "inference_task_id", b"inference_task_id", "search_by", b"search_by"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["search_by", b"search_by"]) -> typing_extensions.Literal["inference_job_id", "inference_task_id"] | None: ...

global___InferenceExecutionSource = InferenceExecutionSource

class StreamingFeatureSetSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_NAME_FIELD_NUMBER: builtins.int
    OFFLINE_FIELD_NUMBER: builtins.int
    ONLINE_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    """Filter by feature set id"""
    feature_set_name: builtins.str
    """Filter by feature set name"""
    @property
    def offline(self) -> global___OfflineType: ...
    @property
    def online(self) -> global___OnlineType: ...
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_name: builtins.str = ...,
        offline: global___OfflineType | None = ...,
        online: global___OnlineType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["offline", b"offline", "online", b"online", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_set_id", b"feature_set_id", "feature_set_name", b"feature_set_name", "offline", b"offline", "online", b"online", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["offline", "online"] | None: ...

global___StreamingFeatureSetSource = StreamingFeatureSetSource

class BatchFeatureSetSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURESET_ID_FIELD_NUMBER: builtins.int
    FEATURESET_NAME_FIELD_NUMBER: builtins.int
    RUN_ID_FIELD_NUMBER: builtins.int
    featureset_id: builtins.str
    """Filter by feature set id"""
    featureset_name: builtins.str
    """Filter by feature set name"""
    run_id: builtins.str
    """Filter by run id"""
    def __init__(
        self,
        *,
        featureset_id: builtins.str = ...,
        featureset_name: builtins.str = ...,
        run_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["featureset_id", b"featureset_id", "featureset_name", b"featureset_name", "run_id", b"run_id"]) -> None: ...

global___BatchFeatureSetSource = BatchFeatureSetSource

class StreamingAggregationFeatureSetSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ROW_LEVEL_FIELD_NUMBER: builtins.int
    COMPACTION_FIELD_NUMBER: builtins.int
    BACKFILL_FIELD_NUMBER: builtins.int
    @property
    def row_level(self) -> global___RowLevelType: ...
    @property
    def compaction(self) -> global___CompactionType: ...
    @property
    def backfill(self) -> global___BackfillType: ...
    def __init__(
        self,
        *,
        row_level: global___RowLevelType | None = ...,
        compaction: global___CompactionType | None = ...,
        backfill: global___BackfillType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["backfill", b"backfill", "compaction", b"compaction", "row_level", b"row_level", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backfill", b"backfill", "compaction", b"compaction", "row_level", b"row_level", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["row_level", "compaction", "backfill"] | None: ...

global___StreamingAggregationFeatureSetSource = StreamingAggregationFeatureSetSource

class OnlineType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_NAME_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    """Filter by feature set id"""
    feature_set_name: builtins.str
    """Filter by feature set name"""
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_set_id", b"feature_set_id", "feature_set_name", b"feature_set_name"]) -> None: ...

global___OnlineType = OnlineType

class OfflineType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_NAME_FIELD_NUMBER: builtins.int
    RUN_ID_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    """Filter by feature set id"""
    feature_set_name: builtins.str
    """Filter by feature set name"""
    run_id: builtins.str
    """Filter by run id"""
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_name: builtins.str = ...,
        run_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_set_id", b"feature_set_id", "feature_set_name", b"feature_set_name", "run_id", b"run_id"]) -> None: ...

global___OfflineType = OfflineType

class RowLevelType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_NAME_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    """Filter by feature set id"""
    feature_set_name: builtins.str
    """Filter by feature set name"""
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_set_id", b"feature_set_id", "feature_set_name", b"feature_set_name"]) -> None: ...

global___RowLevelType = RowLevelType

class CompactionType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_NAME_FIELD_NUMBER: builtins.int
    RUN_ID_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    """Filter by feature set id"""
    feature_set_name: builtins.str
    """Filter by feature set name"""
    run_id: builtins.str
    """Filter by run id"""
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_name: builtins.str = ...,
        run_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_set_id", b"feature_set_id", "feature_set_name", b"feature_set_name", "run_id", b"run_id"]) -> None: ...

global___CompactionType = CompactionType

class BackfillType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_NAME_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    """Filter by feature set id"""
    feature_set_name: builtins.str
    """Filter by feature set name"""
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_set_id", b"feature_set_id", "feature_set_name", b"feature_set_name"]) -> None: ...

global___BackfillType = BackfillType

class RealTimeFeatureExtractorSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REAL_TIME_FEATURE_EXTRACTOR_ID_FIELD_NUMBER: builtins.int
    real_time_feature_extractor_id: builtins.str
    """Filter by the real-time feature extractor id"""
    def __init__(
        self,
        *,
        real_time_feature_extractor_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["real_time_feature_extractor_id", b"real_time_feature_extractor_id"]) -> None: ...

global___RealTimeFeatureExtractorSource = RealTimeFeatureExtractorSource
