"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.orm.v1.table_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class TableComputeServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Execute: grpc.UnaryUnaryMultiCallable[
        corvic_generated.orm.v1.table_pb2.ExecuteRequest,
        corvic_generated.orm.v1.table_pb2.ExecuteResponse,
    ]
    """Execute a table op and write resulting table to the provided location"""
    StreamExecute: grpc.StreamUnaryMultiCallable[
        corvic_generated.orm.v1.table_pb2.StreamExecuteRequest,
        corvic_generated.orm.v1.table_pb2.StreamExecuteResponse,
    ]

class TableComputeServiceAsyncStub:
    Execute: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.orm.v1.table_pb2.ExecuteRequest,
        corvic_generated.orm.v1.table_pb2.ExecuteResponse,
    ]
    """Execute a table op and write resulting table to the provided location"""
    StreamExecute: grpc.aio.StreamUnaryMultiCallable[
        corvic_generated.orm.v1.table_pb2.StreamExecuteRequest,
        corvic_generated.orm.v1.table_pb2.StreamExecuteResponse,
    ]

class TableComputeServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Execute(
        self,
        request: corvic_generated.orm.v1.table_pb2.ExecuteRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.orm.v1.table_pb2.ExecuteResponse, collections.abc.Awaitable[corvic_generated.orm.v1.table_pb2.ExecuteResponse]]:
        """Execute a table op and write resulting table to the provided location"""
    @abc.abstractmethod
    def StreamExecute(
        self,
        request_iterator: _MaybeAsyncIterator[corvic_generated.orm.v1.table_pb2.StreamExecuteRequest],
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.orm.v1.table_pb2.StreamExecuteResponse, collections.abc.Awaitable[corvic_generated.orm.v1.table_pb2.StreamExecuteResponse]]: ...

def add_TableComputeServiceServicer_to_server(servicer: TableComputeServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
