"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.feature.v1.space_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class SpaceServiceStub:
    """SpaceService exports a CRUD api to enable to management of corvic feature spaces."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetSpace: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.GetSpaceRequest,
        corvic_generated.feature.v1.space_pb2.GetSpaceResponse,
    ]
    """GetSpace is used to read a space by id, returning NotFound on failure."""
    CreateSpace: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.CreateSpaceRequest,
        corvic_generated.feature.v1.space_pb2.CreateSpaceResponse,
    ]
    """CreateSpace will create a space. Requires valid ids for the target org and target
    org room.
    """
    DeleteSpace: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.DeleteSpaceRequest,
        corvic_generated.feature.v1.space_pb2.DeleteSpaceResponse,
    ]
    """DeleteSpace is used to delete a space by id, returning NotFound on failure.
    Note: delete is not immediate.
    """
    ListSpaces: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.ListSpacesRequest,
        corvic_generated.feature.v1.space_pb2.ListSpacesResponse,
    ]
    """ListSpaces list spaces for an org. If a room_id is provided then only the spaces
    for the provided org room are returned.
    """
    GetSpaceRelationships: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsRequest,
        corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsResponse,
    ]
    """GetSpaceRelationships returns relationships between sources provided."""

class SpaceServiceAsyncStub:
    """SpaceService exports a CRUD api to enable to management of corvic feature spaces."""

    GetSpace: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.GetSpaceRequest,
        corvic_generated.feature.v1.space_pb2.GetSpaceResponse,
    ]
    """GetSpace is used to read a space by id, returning NotFound on failure."""
    CreateSpace: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.CreateSpaceRequest,
        corvic_generated.feature.v1.space_pb2.CreateSpaceResponse,
    ]
    """CreateSpace will create a space. Requires valid ids for the target org and target
    org room.
    """
    DeleteSpace: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.DeleteSpaceRequest,
        corvic_generated.feature.v1.space_pb2.DeleteSpaceResponse,
    ]
    """DeleteSpace is used to delete a space by id, returning NotFound on failure.
    Note: delete is not immediate.
    """
    ListSpaces: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.ListSpacesRequest,
        corvic_generated.feature.v1.space_pb2.ListSpacesResponse,
    ]
    """ListSpaces list spaces for an org. If a room_id is provided then only the spaces
    for the provided org room are returned.
    """
    GetSpaceRelationships: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsRequest,
        corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsResponse,
    ]
    """GetSpaceRelationships returns relationships between sources provided."""

class SpaceServiceServicer(metaclass=abc.ABCMeta):
    """SpaceService exports a CRUD api to enable to management of corvic feature spaces."""

    @abc.abstractmethod
    def GetSpace(
        self,
        request: corvic_generated.feature.v1.space_pb2.GetSpaceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v1.space_pb2.GetSpaceResponse, collections.abc.Awaitable[corvic_generated.feature.v1.space_pb2.GetSpaceResponse]]:
        """GetSpace is used to read a space by id, returning NotFound on failure."""
    @abc.abstractmethod
    def CreateSpace(
        self,
        request: corvic_generated.feature.v1.space_pb2.CreateSpaceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v1.space_pb2.CreateSpaceResponse, collections.abc.Awaitable[corvic_generated.feature.v1.space_pb2.CreateSpaceResponse]]:
        """CreateSpace will create a space. Requires valid ids for the target org and target
        org room.
        """
    @abc.abstractmethod
    def DeleteSpace(
        self,
        request: corvic_generated.feature.v1.space_pb2.DeleteSpaceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v1.space_pb2.DeleteSpaceResponse, collections.abc.Awaitable[corvic_generated.feature.v1.space_pb2.DeleteSpaceResponse]]:
        """DeleteSpace is used to delete a space by id, returning NotFound on failure.
        Note: delete is not immediate.
        """
    @abc.abstractmethod
    def ListSpaces(
        self,
        request: corvic_generated.feature.v1.space_pb2.ListSpacesRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v1.space_pb2.ListSpacesResponse, collections.abc.Awaitable[corvic_generated.feature.v1.space_pb2.ListSpacesResponse]]:
        """ListSpaces list spaces for an org. If a room_id is provided then only the spaces
        for the provided org room are returned.
        """
    @abc.abstractmethod
    def GetSpaceRelationships(
        self,
        request: corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsResponse, collections.abc.Awaitable[corvic_generated.feature.v1.space_pb2.GetSpaceRelationshipsResponse]]:
        """GetSpaceRelationships returns relationships between sources provided."""

def add_SpaceServiceServicer_to_server(servicer: SpaceServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
