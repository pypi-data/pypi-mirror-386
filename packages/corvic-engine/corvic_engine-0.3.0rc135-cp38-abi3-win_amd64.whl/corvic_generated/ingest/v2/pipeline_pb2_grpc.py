# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from corvic_generated.ingest.v2 import pipeline_pb2 as corvic_dot_ingest_dot_v2_dot_pipeline__pb2


class PipelineServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePipeline = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/CreatePipeline',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.CreatePipelineRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.CreatePipelineResponse.FromString,
                )
        self.DeletePipeline = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/DeletePipeline',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.DeletePipelineRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.DeletePipelineResponse.FromString,
                )
        self.GetPipeline = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/GetPipeline',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetPipelineRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetPipelineResponse.FromString,
                )
        self.ListPipelines = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/ListPipelines',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.ListPipelinesRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.ListPipelinesResponse.FromString,
                )
        self.AddPipelineDataConnection = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/AddPipelineDataConnection',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.AddPipelineDataConnectionRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.AddPipelineDataConnectionResponse.FromString,
                )
        self.TriggerCloudIngestion = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/TriggerCloudIngestion',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.TriggerCloudIngestionRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.TriggerCloudIngestionResponse.FromString,
                )
        self.PatchDataConnection = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/PatchDataConnection',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.PatchDataConnectionRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.PatchDataConnectionResponse.FromString,
                )
        self.GetDataConnectionStatus = channel.unary_unary(
                '/corvic.ingest.v2.PipelineService/GetDataConnectionStatus',
                request_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetDataConnectionStatusRequest.SerializeToString,
                response_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetDataConnectionStatusResponse.FromString,
                )


class PipelineServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPipelines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPipelineDataConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerCloudIngestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PatchDataConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataConnectionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PipelineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePipeline,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.CreatePipelineRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.CreatePipelineResponse.SerializeToString,
            ),
            'DeletePipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePipeline,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.DeletePipelineRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.DeletePipelineResponse.SerializeToString,
            ),
            'GetPipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPipeline,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetPipelineRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetPipelineResponse.SerializeToString,
            ),
            'ListPipelines': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPipelines,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.ListPipelinesRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.ListPipelinesResponse.SerializeToString,
            ),
            'AddPipelineDataConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPipelineDataConnection,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.AddPipelineDataConnectionRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.AddPipelineDataConnectionResponse.SerializeToString,
            ),
            'TriggerCloudIngestion': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerCloudIngestion,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.TriggerCloudIngestionRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.TriggerCloudIngestionResponse.SerializeToString,
            ),
            'PatchDataConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.PatchDataConnection,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.PatchDataConnectionRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.PatchDataConnectionResponse.SerializeToString,
            ),
            'GetDataConnectionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataConnectionStatus,
                    request_deserializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetDataConnectionStatusRequest.FromString,
                    response_serializer=corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetDataConnectionStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'corvic.ingest.v2.PipelineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PipelineService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/CreatePipeline',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.CreatePipelineRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.CreatePipelineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/DeletePipeline',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.DeletePipelineRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.DeletePipelineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/GetPipeline',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetPipelineRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetPipelineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPipelines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/ListPipelines',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.ListPipelinesRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.ListPipelinesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPipelineDataConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/AddPipelineDataConnection',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.AddPipelineDataConnectionRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.AddPipelineDataConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TriggerCloudIngestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/TriggerCloudIngestion',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.TriggerCloudIngestionRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.TriggerCloudIngestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PatchDataConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/PatchDataConnection',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.PatchDataConnectionRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.PatchDataConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataConnectionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.ingest.v2.PipelineService/GetDataConnectionStatus',
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetDataConnectionStatusRequest.SerializeToString,
            corvic_dot_ingest_dot_v2_dot_pipeline__pb2.GetDataConnectionStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
