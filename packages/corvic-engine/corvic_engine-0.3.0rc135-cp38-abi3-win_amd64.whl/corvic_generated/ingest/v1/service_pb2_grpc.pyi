"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.ingest.v1.service_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class IngestServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateStore: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.CreateStoreRequest,
        corvic_generated.ingest.v1.service_pb2.CreateStoreResponse,
    ]
    DeleteStore: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.DeleteStoreRequest,
        corvic_generated.ingest.v1.service_pb2.DeleteStoreResponse,
    ]
    GetStore: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.GetStoreRequest,
        corvic_generated.ingest.v1.service_pb2.GetStoreResponse,
    ]
    ListStores: grpc.UnaryStreamMultiCallable[
        corvic_generated.ingest.v1.service_pb2.ListStoresRequest,
        corvic_generated.ingest.v1.service_pb2.ListStoresResponse,
    ]
    UploadDocument: grpc.StreamUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.UploadDocumentRequest,
        corvic_generated.ingest.v1.service_pb2.UploadDocumentResponse,
    ]
    """UploadDocument directly uploads a document to a store."""
    CreateUploadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.CreateUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.CreateUploadURLResponse,
    ]
    """CreateUploadURL returns a limited-time duration URL that can be used to upload
    a document to a store.
    
    Callers should perform a PUT request on the returned URL to upload data and then
    call FinalizeUploadURL.
    
    This is an alternative to UploadDocument when uploads are large as clients
    directly write to the bucket store location.
    
    For more details on how to use the returned URL:
    https://cloud.google.com/storage/docs/performing-resumable-uploads
    """
    FinalizeUploadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLResponse,
    ]
    """FinalizeUploadURL completes an upload created with CreateUploadURL.
    
    Callers should perform a PUT request on the returned URL to complete the
    upload.
    
    This is an alternative to UploadDocument when uploads are large as clients
    directly write to the bucket store location.
    """
    DeleteDocument: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.DeleteDocumentRequest,
        corvic_generated.ingest.v1.service_pb2.DeleteDocumentResponse,
    ]
    GetDocument: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.GetDocumentRequest,
        corvic_generated.ingest.v1.service_pb2.GetDocumentResponse,
    ]
    ListDocumentsOfStore: grpc.UnaryStreamMultiCallable[
        corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreRequest,
        corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreResponse,
    ]
    CreateStructuredUploadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLResponse,
    ]
    """CreateStructuredUploadURL is analogous to CreateUploadURL but for structured data.
    
    StructuredUploads result in the creation of a table.
    """
    FinalizeStructuredUploadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLResponse,
    ]
    """FinalizeStructuredUploadURL is analogous to CreateUploadURL but for structured data.
    
    StructuredUploads result in the creation of a table.
    """

class IngestServiceAsyncStub:
    CreateStore: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.CreateStoreRequest,
        corvic_generated.ingest.v1.service_pb2.CreateStoreResponse,
    ]
    DeleteStore: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.DeleteStoreRequest,
        corvic_generated.ingest.v1.service_pb2.DeleteStoreResponse,
    ]
    GetStore: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.GetStoreRequest,
        corvic_generated.ingest.v1.service_pb2.GetStoreResponse,
    ]
    ListStores: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.ingest.v1.service_pb2.ListStoresRequest,
        corvic_generated.ingest.v1.service_pb2.ListStoresResponse,
    ]
    UploadDocument: grpc.aio.StreamUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.UploadDocumentRequest,
        corvic_generated.ingest.v1.service_pb2.UploadDocumentResponse,
    ]
    """UploadDocument directly uploads a document to a store."""
    CreateUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.CreateUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.CreateUploadURLResponse,
    ]
    """CreateUploadURL returns a limited-time duration URL that can be used to upload
    a document to a store.
    
    Callers should perform a PUT request on the returned URL to upload data and then
    call FinalizeUploadURL.
    
    This is an alternative to UploadDocument when uploads are large as clients
    directly write to the bucket store location.
    
    For more details on how to use the returned URL:
    https://cloud.google.com/storage/docs/performing-resumable-uploads
    """
    FinalizeUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLResponse,
    ]
    """FinalizeUploadURL completes an upload created with CreateUploadURL.
    
    Callers should perform a PUT request on the returned URL to complete the
    upload.
    
    This is an alternative to UploadDocument when uploads are large as clients
    directly write to the bucket store location.
    """
    DeleteDocument: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.DeleteDocumentRequest,
        corvic_generated.ingest.v1.service_pb2.DeleteDocumentResponse,
    ]
    GetDocument: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.GetDocumentRequest,
        corvic_generated.ingest.v1.service_pb2.GetDocumentResponse,
    ]
    ListDocumentsOfStore: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreRequest,
        corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreResponse,
    ]
    CreateStructuredUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLResponse,
    ]
    """CreateStructuredUploadURL is analogous to CreateUploadURL but for structured data.
    
    StructuredUploads result in the creation of a table.
    """
    FinalizeStructuredUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLRequest,
        corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLResponse,
    ]
    """FinalizeStructuredUploadURL is analogous to CreateUploadURL but for structured data.
    
    StructuredUploads result in the creation of a table.
    """

class IngestServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateStore(
        self,
        request: corvic_generated.ingest.v1.service_pb2.CreateStoreRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.CreateStoreResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.CreateStoreResponse]]: ...
    @abc.abstractmethod
    def DeleteStore(
        self,
        request: corvic_generated.ingest.v1.service_pb2.DeleteStoreRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.DeleteStoreResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.DeleteStoreResponse]]: ...
    @abc.abstractmethod
    def GetStore(
        self,
        request: corvic_generated.ingest.v1.service_pb2.GetStoreRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.GetStoreResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.GetStoreResponse]]: ...
    @abc.abstractmethod
    def ListStores(
        self,
        request: corvic_generated.ingest.v1.service_pb2.ListStoresRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.ingest.v1.service_pb2.ListStoresResponse], collections.abc.AsyncIterator[corvic_generated.ingest.v1.service_pb2.ListStoresResponse]]: ...
    @abc.abstractmethod
    def UploadDocument(
        self,
        request_iterator: _MaybeAsyncIterator[corvic_generated.ingest.v1.service_pb2.UploadDocumentRequest],
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.UploadDocumentResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.UploadDocumentResponse]]:
        """UploadDocument directly uploads a document to a store."""
    @abc.abstractmethod
    def CreateUploadURL(
        self,
        request: corvic_generated.ingest.v1.service_pb2.CreateUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.CreateUploadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.CreateUploadURLResponse]]:
        """CreateUploadURL returns a limited-time duration URL that can be used to upload
        a document to a store.
        
        Callers should perform a PUT request on the returned URL to upload data and then
        call FinalizeUploadURL.
        
        This is an alternative to UploadDocument when uploads are large as clients
        directly write to the bucket store location.
        
        For more details on how to use the returned URL:
        https://cloud.google.com/storage/docs/performing-resumable-uploads
        """
    @abc.abstractmethod
    def FinalizeUploadURL(
        self,
        request: corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.FinalizeUploadURLResponse]]:
        """FinalizeUploadURL completes an upload created with CreateUploadURL.
        
        Callers should perform a PUT request on the returned URL to complete the
        upload.
        
        This is an alternative to UploadDocument when uploads are large as clients
        directly write to the bucket store location.
        """
    @abc.abstractmethod
    def DeleteDocument(
        self,
        request: corvic_generated.ingest.v1.service_pb2.DeleteDocumentRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.DeleteDocumentResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.DeleteDocumentResponse]]: ...
    @abc.abstractmethod
    def GetDocument(
        self,
        request: corvic_generated.ingest.v1.service_pb2.GetDocumentRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.GetDocumentResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.GetDocumentResponse]]: ...
    @abc.abstractmethod
    def ListDocumentsOfStore(
        self,
        request: corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreResponse], collections.abc.AsyncIterator[corvic_generated.ingest.v1.service_pb2.ListDocumentsOfStoreResponse]]: ...
    @abc.abstractmethod
    def CreateStructuredUploadURL(
        self,
        request: corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.CreateStructuredUploadURLResponse]]:
        """CreateStructuredUploadURL is analogous to CreateUploadURL but for structured data.
        
        StructuredUploads result in the creation of a table.
        """
    @abc.abstractmethod
    def FinalizeStructuredUploadURL(
        self,
        request: corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v1.service_pb2.FinalizeStructuredUploadURLResponse]]:
        """FinalizeStructuredUploadURL is analogous to CreateUploadURL but for structured data.
        
        StructuredUploads result in the creation of a table.
        """

def add_IngestServiceServicer_to_server(servicer: IngestServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
