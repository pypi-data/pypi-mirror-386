"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.ingest.v2.resource_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ResourceServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateUploadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.CreateUploadURLRequest,
        corvic_generated.ingest.v2.resource_pb2.CreateUploadURLResponse,
    ]
    """CreateUploadURL returns a limited-time duration URL that can be used to upload
    a resource to a room.

    Callers should perform a PUT request on the returned URL to upload data and then
    call FinalizeUploadURL.

    This is an alternative to UploadResource when uploads are large as clients
    directly write to the bucket room location.

    For more details on how to use the returned URL:
    https://cloud.google.com/storage/docs/performing-resumable-uploads
    """
    FinalizeUploadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLRequest,
        corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLResponse,
    ]
    """FinalizeUploadURL completes an upload created with CreateUploadURL.

    Callers should perform a PUT request on the returned URL to complete the
    upload.

    This is an alternative to UploadResource when uploads are large as clients
    directly write to the bucket room location.
    """
    FetchAndFinalizeExternalURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLRequest,
        corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLResponse,
    ]
    DeleteResource: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.DeleteResourceRequest,
        corvic_generated.ingest.v2.resource_pb2.DeleteResourceResponse,
    ]
    GetResource: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.GetResourceRequest,
        corvic_generated.ingest.v2.resource_pb2.GetResourceResponse,
    ]
    ListResources: grpc.UnaryStreamMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.ListResourcesRequest,
        corvic_generated.ingest.v2.resource_pb2.ListResourcesResponse,
    ]
    ListResourcesPaginated: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedRequest,
        corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedResponse,
    ]
    WatchResources: grpc.UnaryStreamMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.WatchResourcesRequest,
        corvic_generated.ingest.v2.resource_pb2.WatchResourcesResponse,
    ]
    """Open a stream that notifies the caller about changes to the resources.

    This is useful for detecting changes to a resources digest status. Callers
    may continue to watch this stream to be notified about updated resources.

    The current status of all matching resources is always returned first
    regardless of how recently they were updated.

    Similar to ListResources with the difference being that ListResources terminates
    after resporting each requested resource.
    """
    CreateResourceDownloadURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLRequest,
        corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLResponse,
    ]
    CreateResourcePreviewURL: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLRequest,
        corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLResponse,
    ]

class ResourceServiceAsyncStub:
    CreateUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.CreateUploadURLRequest,
        corvic_generated.ingest.v2.resource_pb2.CreateUploadURLResponse,
    ]
    """CreateUploadURL returns a limited-time duration URL that can be used to upload
    a resource to a room.

    Callers should perform a PUT request on the returned URL to upload data and then
    call FinalizeUploadURL.

    This is an alternative to UploadResource when uploads are large as clients
    directly write to the bucket room location.

    For more details on how to use the returned URL:
    https://cloud.google.com/storage/docs/performing-resumable-uploads
    """
    FinalizeUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLRequest,
        corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLResponse,
    ]
    """FinalizeUploadURL completes an upload created with CreateUploadURL.

    Callers should perform a PUT request on the returned URL to complete the
    upload.

    This is an alternative to UploadResource when uploads are large as clients
    directly write to the bucket room location.
    """
    FetchAndFinalizeExternalURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLRequest,
        corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLResponse,
    ]
    DeleteResource: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.DeleteResourceRequest,
        corvic_generated.ingest.v2.resource_pb2.DeleteResourceResponse,
    ]
    GetResource: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.GetResourceRequest,
        corvic_generated.ingest.v2.resource_pb2.GetResourceResponse,
    ]
    ListResources: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.ListResourcesRequest,
        corvic_generated.ingest.v2.resource_pb2.ListResourcesResponse,
    ]
    ListResourcesPaginated: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedRequest,
        corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedResponse,
    ]
    WatchResources: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.WatchResourcesRequest,
        corvic_generated.ingest.v2.resource_pb2.WatchResourcesResponse,
    ]
    """Open a stream that notifies the caller about changes to the resources.

    This is useful for detecting changes to a resources digest status. Callers
    may continue to watch this stream to be notified about updated resources.

    The current status of all matching resources is always returned first
    regardless of how recently they were updated.

    Similar to ListResources with the difference being that ListResources terminates
    after resporting each requested resource.
    """
    CreateResourceDownloadURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLRequest,
        corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLResponse,
    ]
    CreateResourcePreviewURL: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLRequest,
        corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLResponse,
    ]

class ResourceServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateUploadURL(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.CreateUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.CreateUploadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.CreateUploadURLResponse]]:
        """CreateUploadURL returns a limited-time duration URL that can be used to upload
        a resource to a room.

        Callers should perform a PUT request on the returned URL to upload data and then
        call FinalizeUploadURL.

        This is an alternative to UploadResource when uploads are large as clients
        directly write to the bucket room location.

        For more details on how to use the returned URL:
        https://cloud.google.com/storage/docs/performing-resumable-uploads
        """
    @abc.abstractmethod
    def FinalizeUploadURL(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.FinalizeUploadURLResponse]]:
        """FinalizeUploadURL completes an upload created with CreateUploadURL.

        Callers should perform a PUT request on the returned URL to complete the
        upload.

        This is an alternative to UploadResource when uploads are large as clients
        directly write to the bucket room location.
        """
    @abc.abstractmethod
    def FetchAndFinalizeExternalURL(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.FetchAndFinalizeExternalURLResponse]]: ...
    @abc.abstractmethod
    def DeleteResource(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.DeleteResourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.DeleteResourceResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.DeleteResourceResponse]]: ...
    @abc.abstractmethod
    def GetResource(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.GetResourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.GetResourceResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.GetResourceResponse]]: ...
    @abc.abstractmethod
    def ListResources(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.ListResourcesRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.ingest.v2.resource_pb2.ListResourcesResponse], collections.abc.AsyncIterator[corvic_generated.ingest.v2.resource_pb2.ListResourcesResponse]]: ...
    @abc.abstractmethod
    def ListResourcesPaginated(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.ListResourcesPaginatedResponse]]: ...
    @abc.abstractmethod
    def WatchResources(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.WatchResourcesRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.ingest.v2.resource_pb2.WatchResourcesResponse], collections.abc.AsyncIterator[corvic_generated.ingest.v2.resource_pb2.WatchResourcesResponse]]:
        """Open a stream that notifies the caller about changes to the resources.

        This is useful for detecting changes to a resources digest status. Callers
        may continue to watch this stream to be notified about updated resources.

        The current status of all matching resources is always returned first
        regardless of how recently they were updated.

        Similar to ListResources with the difference being that ListResources terminates
        after resporting each requested resource.
        """
    @abc.abstractmethod
    def CreateResourceDownloadURL(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.CreateResourceDownloadURLResponse]]: ...
    @abc.abstractmethod
    def CreateResourcePreviewURL(
        self,
        request: corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.resource_pb2.CreateResourcePreviewURLResponse]]: ...

def add_ResourceServiceServicer_to_server(servicer: ResourceServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
