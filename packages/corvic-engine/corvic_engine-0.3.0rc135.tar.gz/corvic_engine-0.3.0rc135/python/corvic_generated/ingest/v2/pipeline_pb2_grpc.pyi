"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.ingest.v2.pipeline_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class PipelineServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreatePipeline: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineRequest,
        corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineResponse,
    ]
    DeletePipeline: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineRequest,
        corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineResponse,
    ]
    GetPipeline: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.GetPipelineRequest,
        corvic_generated.ingest.v2.pipeline_pb2.GetPipelineResponse,
    ]
    ListPipelines: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesRequest,
        corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesResponse,
    ]
    AddPipelineDataConnection: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionRequest,
        corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionResponse,
    ]
    TriggerCloudIngestion: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionRequest,
        corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionResponse,
    ]
    PatchDataConnection: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionRequest,
        corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionResponse,
    ]
    GetDataConnectionStatus: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusRequest,
        corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusResponse,
    ]

class PipelineServiceAsyncStub:
    CreatePipeline: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineRequest,
        corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineResponse,
    ]
    DeletePipeline: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineRequest,
        corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineResponse,
    ]
    GetPipeline: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.GetPipelineRequest,
        corvic_generated.ingest.v2.pipeline_pb2.GetPipelineResponse,
    ]
    ListPipelines: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesRequest,
        corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesResponse,
    ]
    AddPipelineDataConnection: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionRequest,
        corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionResponse,
    ]
    TriggerCloudIngestion: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionRequest,
        corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionResponse,
    ]
    PatchDataConnection: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionRequest,
        corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionResponse,
    ]
    GetDataConnectionStatus: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusRequest,
        corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusResponse,
    ]

class PipelineServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreatePipeline(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.CreatePipelineResponse]]: ...
    @abc.abstractmethod
    def DeletePipeline(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.DeletePipelineResponse]]: ...
    @abc.abstractmethod
    def GetPipeline(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.GetPipelineRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.GetPipelineResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.GetPipelineResponse]]: ...
    @abc.abstractmethod
    def ListPipelines(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.ListPipelinesResponse]]: ...
    @abc.abstractmethod
    def AddPipelineDataConnection(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.AddPipelineDataConnectionResponse]]: ...
    @abc.abstractmethod
    def TriggerCloudIngestion(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.TriggerCloudIngestionResponse]]: ...
    @abc.abstractmethod
    def PatchDataConnection(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.PatchDataConnectionResponse]]: ...
    @abc.abstractmethod
    def GetDataConnectionStatus(
        self,
        request: corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.pipeline_pb2.GetDataConnectionStatusResponse]]: ...

def add_PipelineServiceServicer_to_server(servicer: PipelineServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
