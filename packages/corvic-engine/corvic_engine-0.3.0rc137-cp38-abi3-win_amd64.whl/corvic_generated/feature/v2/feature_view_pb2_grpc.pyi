"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.feature.v2.feature_view_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class FeatureViewServiceStub:
    """FeatureViewService is a CRUD api for managing feature views."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetFeatureView: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRequest,
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewResponse,
    ]
    """GetFeatureView is used to read a feature view by id, returning NotFound on failure."""
    CreateFeatureView: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewRequest,
        corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewResponse,
    ]
    """CreateFeatureView will create a feature view. Requires valid ids for the target
    room.
    """
    DeleteFeatureView: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewRequest,
        corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewResponse,
    ]
    """DeleteFeatureView is used to delete a feature view by id, returning NotFound on
    failure.
    Note: delete is not immediate.
    """
    ListFeatureViews: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsRequest,
        corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsResponse,
    ]
    """ListFeatureViews list feature views. If a room_id is provided then only the
    feature views for the provided room are returned.
    """
    GetFeatureViewRelationships: grpc.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsRequest,
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsResponse,
    ]
    """GetFeatureViewRelationships returns relationships between sources provided."""

class FeatureViewServiceAsyncStub:
    """FeatureViewService is a CRUD api for managing feature views."""

    GetFeatureView: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRequest,
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewResponse,
    ]
    """GetFeatureView is used to read a feature view by id, returning NotFound on failure."""
    CreateFeatureView: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewRequest,
        corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewResponse,
    ]
    """CreateFeatureView will create a feature view. Requires valid ids for the target
    room.
    """
    DeleteFeatureView: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewRequest,
        corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewResponse,
    ]
    """DeleteFeatureView is used to delete a feature view by id, returning NotFound on
    failure.
    Note: delete is not immediate.
    """
    ListFeatureViews: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsRequest,
        corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsResponse,
    ]
    """ListFeatureViews list feature views. If a room_id is provided then only the
    feature views for the provided room are returned.
    """
    GetFeatureViewRelationships: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsRequest,
        corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsResponse,
    ]
    """GetFeatureViewRelationships returns relationships between sources provided."""

class FeatureViewServiceServicer(metaclass=abc.ABCMeta):
    """FeatureViewService is a CRUD api for managing feature views."""

    @abc.abstractmethod
    def GetFeatureView(
        self,
        request: corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewResponse, collections.abc.Awaitable[corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewResponse]]:
        """GetFeatureView is used to read a feature view by id, returning NotFound on failure."""
    @abc.abstractmethod
    def CreateFeatureView(
        self,
        request: corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewResponse, collections.abc.Awaitable[corvic_generated.feature.v2.feature_view_pb2.CreateFeatureViewResponse]]:
        """CreateFeatureView will create a feature view. Requires valid ids for the target
        room.
        """
    @abc.abstractmethod
    def DeleteFeatureView(
        self,
        request: corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewResponse, collections.abc.Awaitable[corvic_generated.feature.v2.feature_view_pb2.DeleteFeatureViewResponse]]:
        """DeleteFeatureView is used to delete a feature view by id, returning NotFound on
        failure.
        Note: delete is not immediate.
        """
    @abc.abstractmethod
    def ListFeatureViews(
        self,
        request: corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsResponse, collections.abc.Awaitable[corvic_generated.feature.v2.feature_view_pb2.ListFeatureViewsResponse]]:
        """ListFeatureViews list feature views. If a room_id is provided then only the
        feature views for the provided room are returned.
        """
    @abc.abstractmethod
    def GetFeatureViewRelationships(
        self,
        request: corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsResponse, collections.abc.Awaitable[corvic_generated.feature.v2.feature_view_pb2.GetFeatureViewRelationshipsResponse]]:
        """GetFeatureViewRelationships returns relationships between sources provided."""

def add_FeatureViewServiceServicer_to_server(servicer: FeatureViewServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
