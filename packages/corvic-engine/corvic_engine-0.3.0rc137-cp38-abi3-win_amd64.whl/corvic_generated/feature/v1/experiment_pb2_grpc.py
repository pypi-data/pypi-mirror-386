# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from corvic_generated.feature.v1 import experiment_pb2 as corvic_dot_feature_dot_v1_dot_experiment__pb2


class ExperimentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetExperiment = channel.unary_unary(
                '/corvic.feature.v1.ExperimentService/GetExperiment',
                request_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentRequest.SerializeToString,
                response_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResponse.FromString,
                )
        self.CreateExperiment = channel.unary_unary(
                '/corvic.feature.v1.ExperimentService/CreateExperiment',
                request_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.CreateExperimentRequest.SerializeToString,
                response_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.CreateExperimentResponse.FromString,
                )
        self.DeleteExperiment = channel.unary_unary(
                '/corvic.feature.v1.ExperimentService/DeleteExperiment',
                request_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.DeleteExperimentRequest.SerializeToString,
                response_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.DeleteExperimentResponse.FromString,
                )
        self.ListExperiments = channel.unary_unary(
                '/corvic.feature.v1.ExperimentService/ListExperiments',
                request_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.ListExperimentsRequest.SerializeToString,
                response_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.ListExperimentsResponse.FromString,
                )
        self.GetExperimentResult = channel.unary_unary(
                '/corvic.feature.v1.ExperimentService/GetExperimentResult',
                request_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResultRequest.SerializeToString,
                response_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResultResponse.FromString,
                )
        self.GetExperimentVisualization = channel.unary_unary(
                '/corvic.feature.v1.ExperimentService/GetExperimentVisualization',
                request_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentVisualizationRequest.SerializeToString,
                response_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentVisualizationResponse.FromString,
                )


class ExperimentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExperiments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentVisualization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExperimentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperiment,
                    request_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentRequest.FromString,
                    response_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResponse.SerializeToString,
            ),
            'CreateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExperiment,
                    request_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.CreateExperimentRequest.FromString,
                    response_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.CreateExperimentResponse.SerializeToString,
            ),
            'DeleteExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExperiment,
                    request_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.DeleteExperimentRequest.FromString,
                    response_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.DeleteExperimentResponse.SerializeToString,
            ),
            'ListExperiments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExperiments,
                    request_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.ListExperimentsRequest.FromString,
                    response_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.ListExperimentsResponse.SerializeToString,
            ),
            'GetExperimentResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentResult,
                    request_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResultRequest.FromString,
                    response_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResultResponse.SerializeToString,
            ),
            'GetExperimentVisualization': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentVisualization,
                    request_deserializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentVisualizationRequest.FromString,
                    response_serializer=corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentVisualizationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'corvic.feature.v1.ExperimentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExperimentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.feature.v1.ExperimentService/GetExperiment',
            corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentRequest.SerializeToString,
            corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.feature.v1.ExperimentService/CreateExperiment',
            corvic_dot_feature_dot_v1_dot_experiment__pb2.CreateExperimentRequest.SerializeToString,
            corvic_dot_feature_dot_v1_dot_experiment__pb2.CreateExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.feature.v1.ExperimentService/DeleteExperiment',
            corvic_dot_feature_dot_v1_dot_experiment__pb2.DeleteExperimentRequest.SerializeToString,
            corvic_dot_feature_dot_v1_dot_experiment__pb2.DeleteExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListExperiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.feature.v1.ExperimentService/ListExperiments',
            corvic_dot_feature_dot_v1_dot_experiment__pb2.ListExperimentsRequest.SerializeToString,
            corvic_dot_feature_dot_v1_dot_experiment__pb2.ListExperimentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.feature.v1.ExperimentService/GetExperimentResult',
            corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResultRequest.SerializeToString,
            corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentVisualization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.feature.v1.ExperimentService/GetExperimentVisualization',
            corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentVisualizationRequest.SerializeToString,
            corvic_dot_feature_dot_v1_dot_experiment__pb2.GetExperimentVisualizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
