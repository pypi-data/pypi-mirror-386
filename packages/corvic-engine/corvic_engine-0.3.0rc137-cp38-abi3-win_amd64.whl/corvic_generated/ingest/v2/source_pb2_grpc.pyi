"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.ingest.v2.source_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class SourceServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    DeleteSource: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.DeleteSourceRequest,
        corvic_generated.ingest.v2.source_pb2.DeleteSourceResponse,
    ]
    GetSource: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.GetSourceRequest,
        corvic_generated.ingest.v2.source_pb2.GetSourceResponse,
    ]
    """Get metadata about a particular source."""
    ListSources: grpc.UnaryStreamMultiCallable[
        corvic_generated.ingest.v2.source_pb2.ListSourcesRequest,
        corvic_generated.ingest.v2.source_pb2.ListSourcesResponse,
    ]
    ListSourcesPaginated: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedRequest,
        corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedResponse,
    ]
    GetSourceHead: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.GetSourceHeadRequest,
        corvic_generated.ingest.v2.source_pb2.GetSourceHeadResponse,
    ]
    """Get the source metadata plus the first few rows of the source.
    
    The head isn't included in the "GetSource" response because a source's
    data is not necessarily available as quickly as its metadata is.
    """
    PatchSource: grpc.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.PatchSourceRequest,
        corvic_generated.ingest.v2.source_pb2.PatchSourceResponse,
    ]

class SourceServiceAsyncStub:
    DeleteSource: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.DeleteSourceRequest,
        corvic_generated.ingest.v2.source_pb2.DeleteSourceResponse,
    ]
    GetSource: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.GetSourceRequest,
        corvic_generated.ingest.v2.source_pb2.GetSourceResponse,
    ]
    """Get metadata about a particular source."""
    ListSources: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.ingest.v2.source_pb2.ListSourcesRequest,
        corvic_generated.ingest.v2.source_pb2.ListSourcesResponse,
    ]
    ListSourcesPaginated: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedRequest,
        corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedResponse,
    ]
    GetSourceHead: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.GetSourceHeadRequest,
        corvic_generated.ingest.v2.source_pb2.GetSourceHeadResponse,
    ]
    """Get the source metadata plus the first few rows of the source.
    
    The head isn't included in the "GetSource" response because a source's
    data is not necessarily available as quickly as its metadata is.
    """
    PatchSource: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.ingest.v2.source_pb2.PatchSourceRequest,
        corvic_generated.ingest.v2.source_pb2.PatchSourceResponse,
    ]

class SourceServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def DeleteSource(
        self,
        request: corvic_generated.ingest.v2.source_pb2.DeleteSourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.source_pb2.DeleteSourceResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.source_pb2.DeleteSourceResponse]]: ...
    @abc.abstractmethod
    def GetSource(
        self,
        request: corvic_generated.ingest.v2.source_pb2.GetSourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.source_pb2.GetSourceResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.source_pb2.GetSourceResponse]]:
        """Get metadata about a particular source."""
    @abc.abstractmethod
    def ListSources(
        self,
        request: corvic_generated.ingest.v2.source_pb2.ListSourcesRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.ingest.v2.source_pb2.ListSourcesResponse], collections.abc.AsyncIterator[corvic_generated.ingest.v2.source_pb2.ListSourcesResponse]]: ...
    @abc.abstractmethod
    def ListSourcesPaginated(
        self,
        request: corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.source_pb2.ListSourcesPaginatedResponse]]: ...
    @abc.abstractmethod
    def GetSourceHead(
        self,
        request: corvic_generated.ingest.v2.source_pb2.GetSourceHeadRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.source_pb2.GetSourceHeadResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.source_pb2.GetSourceHeadResponse]]:
        """Get the source metadata plus the first few rows of the source.
        
        The head isn't included in the "GetSource" response because a source's
        data is not necessarily available as quickly as its metadata is.
        """
    @abc.abstractmethod
    def PatchSource(
        self,
        request: corvic_generated.ingest.v2.source_pb2.PatchSourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.ingest.v2.source_pb2.PatchSourceResponse, collections.abc.Awaitable[corvic_generated.ingest.v2.source_pb2.PatchSourceResponse]]: ...

def add_SourceServiceServicer_to_server(servicer: SourceServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
