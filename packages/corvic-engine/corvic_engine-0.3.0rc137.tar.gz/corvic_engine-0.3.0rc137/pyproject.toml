[project]
name = "corvic-engine"
requires-python = ">=3.12,<3.14"
classifiers = [
  "Environment :: Console",
  "License :: Other/Proprietary License",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Rust",
  "Topic :: Scientific/Engineering",
]
license = { file = "LICENSE" }
authors = [
  { name = "Corvic Team", email = "contact@corvic.ai" },
]
readme = "README.md"
description = "Seamless embedding generation and retrieval."
version = "0.3.0-rc.137" # sync this with tool.poetry.version below

# TODO(ddn): Pull dependencies from tool.poetry.dependencies. We use maturin as
# the build system but poetry for the development environment.
#
#   https://github.com/python-poetry/poetry/issues/3332
#
# Dependencies here are generally looser than their Poetry counterparts so we
# don't overimpose on users: either ">= x" or ">= 0.x" for semvar packages or
# minor versions for notable semvar exceptions: protobuf, numpy
dependencies = [
  "aiosqlite >=0.21",
  "cachetools >= 5",
  "duckdb >= 1.0.0",
  "more-itertools >= 10",
  "numpy >= 2",
  "polars >= 1.7.1",
  "protobuf >= 5",
  "protovalidate >= 0.3",
  "pyarrow >= 20",
  "sqlalchemy >= 2",
  "sqlglot >= 26, < 28",
  "structlog >= 24",
  "tqdm",
]

[project.optional-dependencies]
# Machine learning libraries that power individual
# operations but are not required in general
ml = [
  "umap-learn >= 0.5.5",
  "pillow >= 10.0.0",
  "scikit-learn >= 1.4.0",
  "transformers[torch] >= 4.45.0", # Needed for pre-trained torch models
  "sentencepiece >= 0.2.0", # Needed for SigLIP2
  "torchvision >= 0.22.1",
]

telemetry = [
  "opentelemetry-api >= 1.20.0",
  "opentelemetry-sdk >= 1.20.0",
]

[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[tool.poetry]
name = "corvic-engine"
packages = [
  { include = "corvic", from = "python" },
  { include = "corvic_generated", from = "python" },
  { include = "buf", from = "python" },
]
description = ""
authors = []
version = "0.3.0-rc.137"

[tool.poetry.scripts]
check = "corvic_check.cli:main"

[tool.poetry.plugins]

[[tool.poetry.source]]
name = "torch-cpu-linux"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[[tool.poetry.source]]
name = "pypi"
priority = "primary"

[tool.poetry.dependencies]
aiosqlite = ">=0.21.0"
cachetools = "^6.1.0"
duckdb = "1.1.3"
more-itertools = "^10.2.0"
numpy = "^2.3.4"
polars = "^1.33"
protobuf = "5.29.5"
protovalidate = "^0.7.1"
pyarrow = "^20"
# Should match build matrix for any native code dependencies (namely pyarrow)
python = ">=3.12,<3.14"
sqlalchemy = { extras = ["asyncio"], version = "2.0.41" }
# Rust tokenizer for better performances
sqlglot = { extras = ["rs"], version = "^27" }
structlog = "^25.4.0"
tqdm = "^4.66.3"

[tool.poetry.group.dev.dependencies]
anyio = "^4"
# TODO(thunt): update corvic_check to work with 8.2
click = ">=8.1,<8.2.0"
click_default_group = "^1.2.4"
codespell = "^2.2.6"
coverage = "^7.3.1"
grpcio = "1.62.1"
httpx = "^0.28"
import-linter = "^2.0"
maturin = "^1.4.0"
pdoc = "^15"
pre-commit = "^4.0.0"
psycopg = { extras = ["binary"], version = "^3.2" }
pyright = "1.1.403"
pytest = "^8.1.1"
pytest-benchmark = "^5"
pytest-fail-slow = "^0.6.0"
pytest-socket = "^0.7.0"
pytest-timeout = "^2.2.0"
ruff = "^0.12"
hypothesis = "^6.135"
yq = "^3.4.3" # includes xq for parsing xml test results

# Required to generate stubs for pyarrow, but not used by corvic itself
pyarrow-stubs = "^20.0.0.20250627"

[tool.poetry.group.docs.dependencies]
sphinx-autodoc-typehints = "^3.2"
sphinx-rtd-theme = "^3.0"
sphinx = "^8.0.2"
pydata-sphinx-theme = "^0.16.1"

[tool.poetry.group.check-license]
optional = true

[tool.poetry.group.check-license.dependencies]
pip-licenses-cli = "^1.2.0"

[tool.poetry.group.test.dependencies]
fastnode2vec = "^0.0.7"
umap-learn = "^0.5.5"
scikit-learn = "^1.4.0"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
sentencepiece = "^0.2.0"
torch = [
  { platform = "linux", version = "^2.8.0+cpu", source = "torch-cpu-linux" },
  { platform = "darwin", version = "^2.8.0", source = "pypi" },
]
torchvision = [
  { platform = "linux", version = "^0.23.0+cpu", source = "torch-cpu-linux" },
  { platform = "darwin", version = "^0.23.0", source = "pypi" },
]
transformers = "^4.51.3"
umap-learn = "^0.5.5"
pillow = "10.4.0"
scikit-learn = "^1.4.0"

[tool.poetry.group.telemetry]
optional = true

[tool.poetry.group.telemetry.dependencies]
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"

[tool.maturin]
module-name = "corvic.engine._native"
python-source = "python"
# TODO(ddn): corvic_generated package will conflict with other corvic_generated
# packages. Move this to an engine specific location.
python-packages = ["corvic_generated", "buf"]
features = ["pyo3/extension-module"]
# Note that these includes are relative to the directory that the manifest is in
include = [
  "corvic_generated/*/**/*.py",
  "corvic_generated/*/**/*.pyi",
]
manifest-path = "python/Cargo.toml"

[tool.ruff]
force-exclude = true
line-length = 88
src = ["python"]
exclude = ["corvic_generated", "buf"]
target-version = "py312"

[tool.ruff.lint]
select = [
  "B",
  "BLE",
  "C",
  "COM",
  "D",
  "DTZ",
  "E",
  "ERA",
  "EXE",
  "F",
  "FA",
  "FBT",
  "FIX",
  "G",
  "I",
  "ICN",
  "INP",
  "ISC002",
  "N",
  "NPY",
  "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PLC",
  "PLR",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S101",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]

ignore = [
  # Conflicts with ruff format
  "COM812",
  # Allow explicit concatenation
  "ISC003",
  # Having issue link with TODO is not necessary
  "TD003",
  # Allow TODO to exist
  "FIX002",
  # Do not complain about raising exception without arguments
  "RSE102",
  # Allow non-trivial exception messages
  "TRY003",
  # Allow use of print
  "T201",
  # Don't require docstrings on public methods
  "D102",
  # Don't require docstrings on public functions
  "D103",
  # Don't require docstrings on magic methods
  "D105",
  # Don't complain about __init__ method docstrings
  "D107",
  # Commented out code is allowed
  "ERA001",
  # We use `+` to concat long log messages across lines
  "G003",
  # Largely overlaps with C901
  "PLR0911",
  "PLR0912",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  # test functions, among other things, do not need docstrings
  "D102",
  "D103",
  "D104",
  # test functions can have magic constants
  "PLR2004",
  # test functions can access private identifiers
  "SLF001",
  # we don't care about importing tests
  "INP001",
  # test functions can have a lot of arguments
  "PLR0913",
  # test functions use assert
  "S101",
  # test can import slow packages at module level
  "TID253",
]

"python/corvic_test/**/*.py" = [
  # test utilities are allowed to use assert
  "S101",
]

"python/*/**/*.py" = [
  # TODO(Hunterlige): Remove use of TypeAlias
  # Allow use of TypeAlias
  "UP040",
  # TODO(Hunterlige): Remove use of Generic
  # Allow use of Generic
  "UP046",
  "UP047",
]

"python/*/**/*.pyi" = [
  # TODO(Hunterlige): Remove use of TypeAlias
  # Allow use of TypeAlias
  "UP040",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 8

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

# Ban certain modules from being imported at module level, instead requiring
# that they're imported lazily (e.g., within a function definition).
banned-module-level-imports = [
  "sentencepiece",
  "torch",
  "transformers",
  "umap",
  "sklearn",
  "PIL",
  "opentelemetry",
  "protovalidate",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.isort]
known-first-party = [
  "corvic",
  "corvic_check",
  "corvic_generated",
]
# the automatic detection that ruff does to detect first party modules identifies
# proto sometimes; this was causing a problem with typestub generation when it would
# make different choices.
known-third-party = ["proto", "rockset"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pandas".msg = "Use polars instead."
"matplotlib".msg = "Use plotly instead."
"seaborn".msg = "Use plotly instead."
"langchain".msg = "Don't use langchain."
"dynaconf".msg = "It's not worth the pain."
"urllib.request".msg = "Use httpx instead."
"requests".msg = "Use httpx instead."

[tool.ruff.lint.flake8-import-conventions]
banned-from = [
  "corvic.result",
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# import aliases beyond the defaults
"pyarrow.parquet" = "pq" # this alias is used in pyarrow examples
"sqlalchemy" = "sa" # common way to refer to sqlalchemy
"sqlalchemy.orm" = "sa_orm" # shortening to disambiguate from corvic.orm
"sqlalchemy.ext.asyncio" = "sa_async" # common way to refer to sqlalchemy asyncio
"polars.selectors" = "cs" # this alias is used in polars examples

[tool.pyright]
include = ["python", "tests"]
ignore = [
  "python/corvic_generated",
  "python/buf",
  "typings_generated",
  "_typeshed",
]
typeCheckingMode = "strict"
# Enable additional checks beyond strict
reportCallInDefaultInitializer = "error"
# typing.overrides will be available in Python 3.12
# reportImplicitOverride	= "error"
reportImplicitStringConcatenation = "error"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"
# Disable some checks enabled by strict because we do not require typing
# everywhere
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
# Unused import is checked and formatted by ruff
reportUnusedImport = "none"
stubPath = "typings_generated"
pythonVersion = "3.12"
pythonPlatform = "Linux"

[tool.pytest.ini_options]
markers = [
  "bench", # https://github.com/ionelmc/pytest-benchmark
]
xfail_strict = true
# Tell tests where python files live
testpaths = [
  "tests",
]
# Test timeout in seconds.
#
# pytest-timeout preemptively kills long running tests, which can break
# internal invariants in pytest, obscuring information about the long running
# test and preventing pytest from completing.
#
# pytest-fail-slow, configured in conftest.py, fails slow tests, which provides
# more consistent information if/when a test completes before being forcibly
# killed.
#
# The slow threshold should be less than the timeout threshold.
timeout = 60
# pytest-socket
addopts = "--disable-socket --allow-unix-socket --allow-hosts=127.0.0.1,localhost,[::1]"

[tool.coverage.run]
branch = true
omit = [
  "python/corvic_generated/*",
  "python/buf/*",
]

[tool.coverage.report]
skip_covered = true

[tool.codespell]
skip = "**/target/*,./docs/build/*,**/typings_generated/*,./htmlcov/*,poetry.lock,./python/corvic_generated/*,./typings/*"

# Hard to avoid crate in Rust
# Sqlglot uses "ons" as a plural of on
# fro is sometimes a constant for Frobenius norm
ignore-words-list = "crate,ons,fro"

[tool.importlinter]
root_packages = [
  # importlinter expects an explicit list of "portions" (corvic.clogging) of a
  # namespace package (corvic), The completeportion contract ensures that the
  # portions listed here match the modules defined under python/corvic (and
  # vice versa).
  "corvic.context",
  "corvic.embed",
  "corvic.embedding_metric",
  "corvic.emodel",
  "corvic.engine",
  "corvic.eorm",
  "corvic.op_graph",
  "corvic.orm",
  "corvic.pa_scalar",
  "corvic.proto_wrapper",
  "corvic.result",
  "corvic.sql",
  "corvic.system",
  "corvic.system_sqlite",
  "corvic.table",
  "corvic.transfer",
  "corvic.version",
  "corvic.well_known_types",
  "corvic_check",
  "corvic_generated",
]

# Space is significant in, <type>:<space><contract class>
contract_types = [
  "tshaped: corvic_check.importcontract.TShapedContract",
  "safename: corvic_check.importcontract.SafeNameContract",
  "completeportion: corvic_check.importcontract.CompletePortionContract",
  "namespacelayers: corvic_check.importcontract.NamespaceLayersContract",
]

[[tool.importlinter.contracts]]
name = "all corvic.* portions are accounted for"
type = "completeportion"
namespace_package = "corvic"
local_namespace_path = "python/corvic"

[[tool.importlinter.contracts]]
name = "corvic modules have safe names"
type = "safename"
modules = [
  "corvic.*",
  "corvic_check",
]
local_namespace_path = "python/corvic"

[[tool.importlinter.contracts]]
name = "corvic.* is T-shaped"
type = "tshaped"
root = "corvic.*"
local_namespace_path = "python/corvic"

[[tool.importlinter.contracts]]
name = "corvic_check.* is T-shaped"
type = "tshaped"
root = "corvic_check"
