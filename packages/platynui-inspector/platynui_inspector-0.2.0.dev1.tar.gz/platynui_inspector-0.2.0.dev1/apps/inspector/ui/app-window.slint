import { CheckBox, LineEdit, StandardListView, GroupBox, StandardTableView, Palette } from "std-widgets.slint";
import { HorizontalResizablePane } from "components/horizontal-resizable-pane.slint";
import { VerticalResizablePane } from "components/vertical-resizable-pane.slint";
import { TreeView, TreeNodeVM } from "components/tree-view.slint";

// Rows for StandardTableView use StandardListViewItem cells

export component MainWindow inherits Window {
    preferred-width: 1100px;
    preferred-height: 750px;
    title: "PlatynUI Inspector";

    // External model for the TreeView (set from Rust)
    in property <[TreeNodeVM]> tree-model: [];
    // Attribute table rows for the selected node (set from Rust)
    in-out property <[[StandardListViewItem]]> attr-rows: [];

    // Forward important TreeView events to Rust (index-only)
    callback tree-node-selected-index(index: int);
    callback tree-node-toggled-index(index: int, expanded: bool);
    callback tree-request-children-index(index: int);
    callback tree-refresh-index(index: int);
    callback tree-refresh-subtree-index(index: int);


    // Exit callback
    callback exit-requested();
    MenuBar {
        Menu {
            title: "File";
            MenuItem {
                title: "Exit";
                activated => {
                    root.exit-requested();
                };
            }
        }

        Menu {
            title: "Edit";
            MenuItem {
                title: "Undo";
            }

            MenuItem {
                title: "Redo";
            }

            MenuItem {
                title: "Cut";
            }

            MenuItem {
                title: "Copy";
            }

            MenuItem {
                title: "Paste";
            }
        }

        Menu {
            title: "Help";
            MenuItem {
                title: "About PlatynUI Inspector";
            }
        }
    }

    VerticalLayout {
        //padding: 6px;
        spacing: 6px;

        // Top Bar
        HorizontalLayout {
            spacing: 12px;
            padding: 6px;
            LineEdit {
                placeholder-text: "Search via XPath...";
                horizontal-stretch: 1;
            }

            CheckBox {
                text: "Always On Top";
            }
        }

        // Main Content Area (resizable) mit TreeView + Properties
        VerticalResizablePane {
            content-height: 450px;
            HorizontalLayout {
                spacing: 0px;

                // Linke resizable Pane für TreeView
                HorizontalResizablePane {
                    content-width: 450px;
                    tv := TreeView {
                        root-model: root.tree-model;
                        node-selected-index(index) => {
                            root.tree-node-selected-index(index);
                        }
                        node-toggled-index(index, expanded) => {
                            root.tree-node-toggled-index(index, expanded);
                        }
                        request-children-index(index) => {
                            root.tree-request-children-index(index);
                        }
                        refresh-index(index) => {
                            root.tree-refresh-index(index);
                        }
                        refresh-subtree-index(index) => {
                            root.tree-refresh-subtree-index(index);
                        }
                    }
                }

                // Rechte Seite für dynamische Properties der Auswahl
                StandardTableView {
                    columns: [{ title: "Name" }, { title: "Value" }, { title: "Type" }];
                    rows: root.attr-rows;
                }
            }
        }

        // Results Pane (unten, fest)
        GroupBox {
            title: "Results";
            VerticalLayout {
                StandardListView {
                    model: [
                        { text: "Control \"DummyResult1\"" },
                        { text: "Control \"DummyResult2\"" },
                    ];
                }
            }
        }
    }
}
