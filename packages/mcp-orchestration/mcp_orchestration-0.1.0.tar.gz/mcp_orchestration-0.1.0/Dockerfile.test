# Test-focused Dockerfile for CI/CD
# Ensures isolated environment with correct package versions
# Solves CI issues where GitHub Actions may have system package conflicts
# Pattern from mcp-n8n: Achieved 100% test pass rate (was 98.1%)
# Generated by chora-base template

FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Install system dependencies needed for testing
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
&& rm -rf /var/lib/apt/lists/*

# Copy dependency files first (better layer caching)
# Layer caching: Dependencies change less frequently than source code
COPY pyproject.toml README.md ./

# Copy source code
COPY src/ ./src/

# Install package with dev dependencies in isolated environment
# This ensures all dependencies from pyproject.toml are correctly installed
# Prevents system vs pip version conflicts that cause CI failures
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e ".[dev]"

# Copy test files
COPY tests/ ./tests/

# Set environment variable to indicate we're in CI
ENV CI=true \
    PYTHONUNBUFFERED=1

# Default command: Run full test suite with coverage
# Can be overridden in CI workflow or docker run command
CMD ["pytest", "tests/", "--cov=src/mcp_orchestration", "--cov-report=term", "--cov-fail-under=85", "-v"]
# === Build Instructions ===
#
# Standard build:
#   docker build -t mcp-orchestration:test -f Dockerfile.test .
#
# Run instructions:
#   docker run --rm mcp-orchestration:test
#
# === CI Usage (GitHub Actions) ===
#
# Pattern from mcp-n8n: Achieves 6x faster builds with proper caching
#
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#
#       - name: Build test image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./Dockerfile.test
#           tags: mcp-orchestration:test
#           cache-from: type=gha            # Read from GitHub Actions cache
#           cache-to: type=gha,mode=max     # Write all layers to cache
#           load: true                      # Load image into Docker
#
#       - name: Run tests
#         run: docker run --rm mcp-orchestration:test
#
#       # Coverage extraction pattern (from mcp-n8n)
#       - name: Extract coverage report
#         run: |
#           container_id=$(docker create mcp-orchestration:test)
#           docker cp $container_id:/app/coverage.xml ./coverage.xml
#           docker rm $container_id
#
#       - name: Upload coverage
#         uses: codecov/codecov-action@v4
#         with:
#           file: ./coverage.xml
#
# === Performance Notes ===
#
# First build: ~2-3 minutes (populates cache)
# Cached builds: ~30 seconds (uses cached layers)
# Cache strategy: mode=max caches all layers, not just final image
