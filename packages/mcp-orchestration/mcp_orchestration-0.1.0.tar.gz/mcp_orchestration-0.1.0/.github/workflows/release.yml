name: Release to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v0.1.0, v1.0.0, etc.)

permissions:
  contents: write  # For creating GitHub releases
jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build==1.0.3 twine==6.0.0

      - name: Build distribution packages
        run: python -m build

      - name: Check distribution packages
        run: twine check dist/*

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  test:
    name: Run tests before release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run full test suite
        run: pytest --cov=src/mcp_orchestrator --cov-report=term

  publish-pypi:
    name: Publish to PyPI
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI using token
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          print-hash: true
          # To use: Create token at https://pypi.org/manage/account/token/
          # Add as repository secret: PYPI_TOKEN

  github-release:
    name: Create GitHub Release
    needs: [publish-pypi]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract tag version
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          # Extract changelog section for this version
          awk "/## \[${VERSION}\]/,/## \[/" CHANGELOG.md | sed '$d' > release_notes.md
          # If empty, use a default message
          if [ ! -s release_notes.md ]; then
            echo "Release ${VERSION}" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-release notifications
    needs: [github-release]
    runs-on: ubuntu-latest

    steps:
      - name: Extract tag version
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Release summary
        run: |
          echo "✅ Release ${{ steps.tag.outputs.version }} published successfully!"
          echo ""
          echo "📦 PyPI: https://pypi.org/project/mcp-orchestration/${{ steps.tag.outputs.version }}/"
          echo "🐙 GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.tag.outputs.version }}"
          echo ""
          echo "Install with: pip install mcp-orchestration==${{ steps.tag.outputs.version }}"
