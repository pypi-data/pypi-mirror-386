# Docker Compose configuration for mcp-orchestration
# Orchestrates mcp_server service and dependencies# Generated by chora-base template

version: "3.8"

services:
# mcp-orchestration MCP Server
  mcp-orchestration:
    build:
      context: .
      dockerfile: Dockerfile
    image: mcp-orchestration:latest
    container_name: mcp-orchestration
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Environment-based configuration (pattern from chora-compose)
      - MCP_ORCHESTRATION_LOG_LEVEL=${MCP_ORCHESTRATION_LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      # Uncomment for SSE/HTTP transport:
      # - MCP_TRANSPORT=sse
      # - MCP_SERVER_HOST=0.0.0.0
      # - MCP_SERVER_PORT=8000
# Uncomment to expose MCP server via HTTP/SSE
    # ports:
    #   - "${MCP_PORT:-8000}:8000"
volumes:
      # Three-tier volume strategy (pattern from chora-compose):
      # 1. Configs (read-mostly, hot-reload without rebuild)
      # - ./configs:/app/configs:ro

      # 2. Ephemeral (session data, survives restarts)
      # - ./ephemeral:/app/ephemeral

      # 3. Persistent (long-term artifacts and logs)
      - ./logs:/app/logs
      - ./data:/app/data
# Agent memory persistence
      - ./.chora/memory/events:/app/.chora/memory/events
      - ./.chora/memory/knowledge:/app/.chora/memory/knowledge
networks:
      - mcp-orchestration-network
    # Health check (import-based pattern from coda-mcp)
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_orchestration; assert mcp_orchestration.__version__"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Optional: n8n workflow orchestration (pattern from chora-compose)
  # Uncomment to enable n8n integration
  # n8n:
  #   image: n8nio/n8n:latest
  #   container_name: mcp-orchestration-n8n
  #   restart: unless-stopped
  #   ports:
  #     - "5678:5678"
  #   env_file:
  #     - .env
  #   environment:
  #     - TZ=${TZ:-UTC}
  #     - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-UTC}
  #     # Enable MCP tool usage in AI Agent workflows
  #     - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
  #     # MCP server connection URL (if using SSE transport)
  #     - MCP_SERVER_URL=http://mcp-orchestration:8000/sse
  #   volumes:
  #     - ./n8n_data:/home/node/.n8n
  #   networks:
  #     - mcp-orchestration-network
  #   depends_on:
  #     mcp-orchestration:
  #       condition: service_healthy  # Wait for MCP server health (pattern from chora-compose)
  #   healthcheck:
  #     test: ["CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s

networks:
  mcp-orchestration-network:
    driver: bridge
    name: mcp-orchestration-network  # Explicit name for service discovery

volumes:
logs:
    driver: local
  data:
    driver: local
memory_events:
    driver: local
  memory_knowledge:
    driver: local
# Usage instructions:
#
# Start services:
#   docker-compose up -d
#
# View logs:
#   docker-compose logs -f mcp-orchestration
#
# Stop services:
#   docker-compose down
#
# Rebuild and restart:
#   docker-compose up -d --build
#
# Remove all containers and volumes:
#   docker-compose down -v
