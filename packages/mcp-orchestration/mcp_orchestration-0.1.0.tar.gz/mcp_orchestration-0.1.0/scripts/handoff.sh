#!/usr/bin/env bash
# handoff.sh - Automate context-switch protocol for single-dev multi-instance workflow
#
# This script prepares a clean handoff between Claude Code instances when switching
# between mcp-orchestration and chora-composer codebases.
#
# Usage: ./scripts/handoff.sh [TARGET_INSTANCE]
#   TARGET_INSTANCE: "mcp-orchestration" or "chora-composer"

set -euo pipefail

echo "=== Context Switch Handoff Tool ==="
echo ""

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Determine target instance
TARGET="${1:-}"
if [ -z "$TARGET" ]; then
    echo "Usage: ./scripts/handoff.sh [TARGET_INSTANCE]"
    echo "  TARGET_INSTANCE: 'mcp-orchestration' or 'chora-composer'"
    exit 1
fi

if [ "$TARGET" != "mcp-orchestration" ] && [ "$TARGET" != "chora-composer" ]; then
    echo -e "${RED}Error: TARGET_INSTANCE must be 'mcp-orchestration' or 'chora-composer'${NC}"
    exit 1
fi

# Determine current instance
CURRENT_DIR=$(basename "$PWD")
if [ "$CURRENT_DIR" = "mcp-orchestration" ]; then
    CURRENT="mcp-orchestration"
elif [ "$CURRENT_DIR" = "chora-compose" ] || [ "$CURRENT_DIR" = "chora-composer" ]; then
    CURRENT="chora-composer"
else
    echo -e "${YELLOW}Warning: Unable to detect current instance from directory name${NC}"
    CURRENT="unknown"
fi

echo "Current instance: $CURRENT"
echo "Target instance: $TARGET"
echo ""

# Step 1: Check for uncommitted changes
echo -e "${YELLOW}Step 1: Checking for uncommitted changes...${NC}"
if ! git diff-index --quiet HEAD --; then
    echo -e "${RED}Error: You have uncommitted changes${NC}"
    echo ""
    echo "Uncommitted files:"
    git status --short
    echo ""
    echo "Please commit or stash changes before handoff:"
    echo "  git add -A"
    echo "  git commit -m 'Sprint X work in progress'"
    exit 1
fi
echo -e "${GREEN}✓ No uncommitted changes${NC}"
echo ""

# Step 2: Run quality checks
echo -e "${YELLOW}Step 2: Running quality checks...${NC}"
if command -v just &> /dev/null; then
    if ! just verify; then
        echo -e "${RED}Error: Quality checks failed${NC}"
        echo "Fix issues before handoff or use --force (not recommended)"
        exit 1
    fi
else
    echo -e "${YELLOW}Warning: 'just' not found, skipping quality checks${NC}"
fi
echo -e "${GREEN}✓ Quality checks passed${NC}"
echo ""

# Step 3: Generate SPRINT_HANDOFF.md
echo -e "${YELLOW}Step 3: Generating SPRINT_HANDOFF.md...${NC}"

HANDOFF_FILE="SPRINT_HANDOFF.md"
TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
BRANCH=$(git branch --show-current)
LAST_COMMIT=$(git log -1 --oneline)

cat > "$HANDOFF_FILE" <<EOF
# Sprint Handoff: $CURRENT → $TARGET

**Date:** $TIMESTAMP
**Branch:** $BRANCH
**Last Commit:** $LAST_COMMIT

---

## Status Summary

### Work Completed
<!-- Summarize what was accomplished in this session -->

- [ ] TODO: Fill in completed work

### Current Sprint Progress
<!-- Reference UNIFIED_ROADMAP.md -->

- **Current Sprint:** <!-- e.g., Sprint 2, Day 2 -->
- **Exit Criteria Status:** <!-- List criteria and completion status -->

### Blockers & Issues
<!-- List any blockers, errors, or issues that need attention -->

- [ ] TODO: List blockers (or write "None")

---

## Handoff to $TARGET

### Immediate Next Steps
<!-- What should the target instance work on first? -->

1. TODO: List next steps

### Integration Points
<!-- If switching between instances, note any integration dependencies -->

- **Specs to reference:** docs/process/specs/
- **Dependencies:** <!-- e.g., "Requires chora-composer v1.1.1" -->

### Environment Notes
<!-- Any special configuration or environment setup needed -->

- **Environment variables:** Check \`.env.example\`
- **Dependencies:** Run \`just setup\` or \`./scripts/setup.sh\`

---

## Context for Return
<!-- When switching back to $CURRENT, what should you remember? -->

### Open Questions
<!-- Questions that came up during this session -->

- TODO: List open questions

### Future Work
<!-- Ideas for future sprints -->

- TODO: List future ideas

---

## Verification Checklist

Before closing this IDE instance:

- [x] All changes committed
- [x] Quality checks passed
- [ ] SPRINT_HANDOFF.md filled out
- [ ] Specs updated (if applicable)
- [ ] Integration tests passed (if Sprint 2 Day 3+)

---

**Generated by:** scripts/handoff.sh
**Target instance:** $TARGET
EOF

echo -e "${GREEN}✓ SPRINT_HANDOFF.md generated${NC}"
echo ""

# Step 4: Remind about manual steps
echo -e "${YELLOW}Step 4: Manual handoff steps${NC}"
echo ""
echo "Please complete the following:"
echo "  1. Fill out SPRINT_HANDOFF.md with:"
echo "     - Work completed"
echo "     - Current sprint progress"
echo "     - Blockers & issues"
echo "     - Next steps for $TARGET"
echo ""
echo "  2. Review and commit SPRINT_HANDOFF.md:"
echo "     git add SPRINT_HANDOFF.md"
echo "     git commit -m 'Handoff: $CURRENT → $TARGET'"
echo ""
echo "  3. Push changes (optional but recommended):"
echo "     git push"
echo ""
echo "  4. Close all IDE files and terminal sessions"
echo ""
echo "  5. Switch to $TARGET codebase:"
if [ "$TARGET" = "mcp-orchestration" ]; then
    echo "     cd /path/to/mcp-orchestration"
else
    echo "     cd /path/to/chora-composer"
fi
echo ""
echo "  NOTE: Update paths in this script for your local setup"
echo ""
echo "  6. Open $TARGET in fresh IDE instance"
echo ""
echo "  7. Read SPRINT_HANDOFF.md from $CURRENT to understand context"
echo ""
echo -e "${GREEN}Handoff preparation complete!${NC}"
