upstream tornadoserver {
  # One for every tornado instance you're running that you want to balance
  server 127.0.0.1:8000;
}

server {
  # Use always HTTPS
  listen 80 default_server;
  listen [::]:80 default_server;
  # Your server name if you have weird network config. Otherwise leave commented
  #server_name your.server.domain;
  return 301 https://$server_name$request_uri;
}

server {
  # Enabling HTTP/2
  listen 443 ssl http2 default_server;      # For IPv4
  listen [::]:443 ssl http2 default_server; # For IPv6
  server_name your.server.domain;           # Server domain name

  ssl_prefer_server_ciphers On;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

  # Certs that will be shown to the user connecting to the web.
  # Preferably NOT grid certs. Use something that the user cert will not complain about
  ssl_certificate     /opt/dirac/etc/grid-security/hostcert.pem;
  ssl_certificate_key /opt/dirac/etc/grid-security/hostkey.pem;

  ssl_session_tickets off;

  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
  # Generate your DH parameters with OpenSSL:
  # ~ cd /etc/nginx/ssl
  # ~ openssl dhparam -out dhparam.pem 4096
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security max-age=15768000;

  # To secure NGINX from Click-jacking attack
  add_header X-Frame-Options SAMEORIGIN always;

  # OCSP Stapling --- fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;

  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

  # DNS resolver for stapling so that the resolver defaults to Googleâ€™s DNS
  resolver 8.8.4.4 8.8.8.8;

  ssl_client_certificate /opt/dirac/etc/grid-security/cas.pem;
  # ssl_crl /opt/dirac/pro/etc/grid-security/allRevokedCerts.pem;
  ssl_verify_client optional;
  ssl_verify_depth 10;
  ssl_session_cache shared:SSL:10m;

  root /opt/dirac/pro;

  location ~ ^/[a-zA-Z]+/(s:.*/g:.*/)?static/(.+\.(jpg|jpeg|gif|png|bmp|ico|pdf))$ {
    alias /opt/dirac/webRoot/resources/;
    # Add one more for every static path. For instance for LHCbWebDIRAC:
    # try_files LHCbWebDIRAC/$2 WebAppDIRAC/$2 /;
    try_files WebAppDIRAC/$2 DIRACWebAppResources/$2 /;
    # Prior to v7r3 this should be slightly different:
    #   alias /opt/dirac/pro/;
    #   try_files WebAppDIRAC/WebApp/static/$2 /;
    # The new-style is mandatory for Python 3 based installations/
    expires 10d;
    gzip_static on;
    gzip_disable "MSIE [1-6]\.";
    add_header Cache-Control public;
    break;
  }

  location ~ ^/[a-zA-Z]+/(s:.*/g:.*/)?static/(.+)$ {
    alias /opt/dirac/webRoot/resources/;
    # Add one more for every static path. For instance for LHCbWebDIRAC:
    # try_files LHCbWebDIRAC/$2 WebAppDIRAC/$2 /;
    try_files WebAppDIRAC/$2 DIRACWebAppResources/$2 /;
    # Prior to v7r3 this should be slightly different:
    #   alias /opt/dirac/pro/;
    #   try_files WebAppDIRAC/WebApp/static/$2 /;
    # The new-style is mandatory for Python 3 based installations/
    expires 1d;
    gzip_static on;
    gzip_disable "MSIE [1-6]\.";
    add_header Cache-Control public;
    break;
  }

  location ~ /DIRAC/ {
    proxy_pass_header Server;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Scheme $scheme;
    proxy_pass http://tornadoserver;
    proxy_read_timeout 3600;
    proxy_send_timeout 3600;

    proxy_set_header X-Ssl_client_verify $ssl_client_verify;
    proxy_set_header X-Ssl_client_s_dn $ssl_client_s_dn;
    proxy_set_header X-Ssl_client_i_dn $ssl_client_i_dn;
    # pass escaped certificate pem to DIRAC
    proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;

    gzip on;
    gzip_proxied any;
    gzip_comp_level 9;
    gzip_types text/plain text/css application/javascript application/xml application/json;

    # WebSocket support (nginx 1.4)
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    break;
  }

  location /pilot/ {
  autoindex on;
  root /opt/dirac/webRoot/www;
  expires 1h;
  break;
  }

  location /files/ {
  autoindex on;
  root /opt/dirac/webRoot/www;
  expires 1h;
  break;
  }

  location /defaults/ {
  autoindex on;
  root /opt/dirac/webRoot/www;
  expires 1h;
  break;
  }

  location / {
    rewrite ^ https://$server_name/DIRAC/ permanent;
  }
}
