Metadata-Version: 2.4
Name: ray-map
Version: 0.1.0
Summary: Efficient Ray-powered map/imap with backpressure, checkpointing, timeouts, and async
Author-email: Your Name <your.email@example.com>
License: MIT License
        
        Copyright (c) 2025 Tovarnov Mikhail
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in
        all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        THE SOFTWARE.
        
Project-URL: Homepage, https://github.com/TovarnovM/ray_map
Project-URL: Source, https://github.com/TovarnovM/ray_map
Project-URL: Issues, https://github.com/TovarnovM/ray_map/issues
Keywords: ray,parallel,map,distributed-computing,async
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: System :: Distributed Computing
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ray>=2.6
Requires-Dist: cloudpickle>=2.2
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-timeout>=2.1; extra == "dev"
Requires-Dist: ruff>=0.5; extra == "dev"
Requires-Dist: black>=24.0; extra == "dev"
Requires-Dist: mypy>=1.8; extra == "dev"
Requires-Dist: build>=1.2; extra == "dev"
Requires-Dist: twine>=5.0; extra == "dev"
Dynamic: license-file

# ray-map

Efficient Ray-powered `imap`/`map` with backpressure, checkpointing, per-item timeouts, safe exceptions, and async variants.

## Features

- ⚡ Parallel map/imap on [Ray] with **back-pressure** and **batching**
- 💾 **Checkpointing** + replay of already computed points
- ⏱️ **Per-item timeouts** (worker-side, via threads)  
- 🧯 **Safe exceptions**: return `Exception` objects instead of failing the whole run
- 🔁 **Ordered** or **as-ready** modes, `(arg, res)` or plain `res`
- 🧰 **Async** API: `imap_async`, `map_async`
- 🧩 Works with single file module `ray_map.py`, src-layout, no extra boilerplate

## Install

```bash
pip install ray-map
```

# Quickstart

```python

from ray_map import RayMap

def foo(x):
    if x == 3:
        raise ValueError("oops")
    return x * x

rmap = RayMap(foo, batch_size=8, max_pending=-1, checkpoint_path="res.pkl")

# stream (ordered), exceptions raise by default
for y in rmap.imap(range(10)):
    print(y)

# stream (as-ready), safe exceptions, return (arg, res_or_exc)
for arg, res in rmap.imap(range(10), keep_order=False, safe_exceptions=True, ret_args=True, timeout=2.0):
    print(arg, "->", res)

# list
lst = rmap.map(range(1000), timeout=2.0, safe_exceptions=True)

```


# API essentials

```python
RayMap.imap(iterable, *, timeout=None, safe_exceptions=False, keep_order=True, ret_args=False) -> iterator
RayMap.map(iterable,  *, timeout=None, safe_exceptions=False, keep_order=True, ret_args=False) -> list

# Async variants
RayMap.imap_async(...): async iterator
RayMap.map_async(...): list
```
- `timeout`: per-item timeout (seconds) on worker via `ThreadPoolExecutor`
- `safe_exceptions=True`: return exception objects (no crash)
- `keep_order=True`: preserve input order (1:1); `False` → yield as-ready
- `ret_args=True`: yield `(arg, res_or_exc)` instead of just `res_or_exc`

# Checkpointing
- Stores `(key, arg, result_or_exc)` to `checkpoint_path`.
- On restart, previously computed results are yielded first; then Ray resumes the rest.
- (Optional) You can add a flag to skip storing exceptions in a future version
