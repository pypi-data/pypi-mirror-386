[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "inductance"
version = "0.1.7"
description = "Code for 2D inductance calculations"
authors = [{ name = "Darren Garnier", email = "dgarnier@reinrag.net" }]
requires-python = ">=3.10,<3.14"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["inductance", "electromagnetism", "physics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"]
dependencies = [
    "numpy>=1.24,<2.3", # matches numba requirement
    "numba>=0.61.2", # for numpy 2.2
    "pre-commit>=3.8.0",
    "click>=8.2.1",
    "docutils>=0.21.2",
]

[project.urls]
Homepage = "https://github.com/dgarnier/inductance"
Repository = "https://github.com/dgarnier/inductance"
Documentation = "https://inductance.readthedocs.io"
Changelog = "https://github.com/dgarnier/inductance/releases"

[dependency-groups]
  pre-commit = [
    "bandit",
    "darglint",
    "flake8",
    "flake8-bugbear",
    "flake8-docstrings",
    "flake8-rst-docstrings",
    "pep8-naming",
    "pre-commit",
    "pre-commit-hooks",
    "pyupgrade",
    "ruff",
    "safety>=1.10.3,<3",
  ]

  dev = [
    "mpmath>=1.0.0,<2",
    "nox>=2025,<2026",
    "dunamai>=1.17.0,<2",
    "Pygments>=2.10.0",
    "coverage[toml]>=6.2",
    "darglint>=1.8.1",
    "flake8>=7.1",
    "flake8-bandit>=2.1.2",
    "flake8-bugbear>=21.9.2",
    "flake8-docstrings>=1.6.0",
    "flake8-rst-docstrings>=0.2.5",
    "mypy>=1.11",
    "pep8-naming>=0.12.1",
    "pre-commit>=3.8",
    "pre-commit-hooks>=4.1.0",
    "pytest>=6.2.5",
    "pyupgrade>=2.29.1",
    "typeguard>=2.13.3",
    "xdoctest[colors]>=0.15.10",
    "bump-my-version>=1.2.4",
    "docutils>=0.21.2",
    "markdown-it-py>=3.0.0",
]

  docs = [
    "furo>=2024.8.6",
    "myst-parser>=4.0.0",
    "sphinx>8.0,<=8.2",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-click>=5",
  ]

[tool.mypy]
mypy_path = "stubs"
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["inductance", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.ruff]
force-exclude = true  # make sure we exclude below when running pre-commit
extend-exclude = ["src/elliptics.py"]
show-fixes = true

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
#  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
#  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
  "PYI",         # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic comparison
  "ISC001",   # Conflicts with formatter
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]

[tool.codespell]
ignore-words-list = ["garnier"]

[tool.bumpversion]
current_version = "0.1.7"
#parse = """(?x)
#    (?P<major>0|[1-9]\\d*)\\.
#    (?P<minor>0|[1-9]\\d*)\\.
#    (?P<patch>0|[1-9]\\d*)
#    (?:
#        -                             # dash separator for pre-release section
#        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
#        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
#    )?                                # pre-release section is optional
#"""
patch = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = [
    "{major}.{minor}.{patch}",
]
#    "{major}.{minor}.{patch}-{pre_l}{pre_n}",

search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""


#[tool.bumpversion.parts.pre_l]
#values = ["dev", "rc", "final"]
#optional_value = "final"
