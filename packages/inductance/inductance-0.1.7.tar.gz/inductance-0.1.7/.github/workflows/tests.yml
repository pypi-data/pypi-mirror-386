name: Tests

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python: "3.13", os: "ubuntu-latest", session: "pre-commit" }
          - { python: "3.13", os: "ubuntu-latest", session: "safety" }
          - { python: "3.13", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.10", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.13", os: "ubuntu-latest", session: "tests" }
          - { python: "3.12", os: "ubuntu-latest", session: "tests" }
          - { python: "3.11", os: "ubuntu-latest", session: "tests" }
          - { python: "3.10", os: "ubuntu-latest", session: "tests" }
          - { python: "3.10", os: "windows-latest", session: "tests" }
          - { python: "3.10", os: "macos-latest", session: "tests" }
          - { python: "3.13", os: "ubuntu-latest", session: "typeguard" }
          - { python: "3.13", os: "ubuntu-latest", session: "xdoctest" }
          - { python: "3.13", os: "ubuntu-latest", session: "docs-build" }

    env:
      UV_PYTHON: ${{ matrix.python }}
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v5

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ matrix.python }}

      - name: Install the project using uv
        run: |
          uv sync --all-extras --group dev

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: uv run python {0}
        run: |
          import hashlib
          import sys
          import os

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          with open(os.environ["GITHUB_OUTPUT"], mode="a") as io:
              print(f"result={result}", file=io)

      - name: Restore pre-commit cache
        uses: actions/cache@v4
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Run Nox
        run: |
          uv run nox

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python }}-${{ matrix.os }}
          include-hidden-files: true
          path: ".coverage.*"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.python }}-${{ matrix.os }}
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install project
        run: |
          uv sync --all-extras --group dev

      - name: Download coverage data
        uses: actions/download-artifact@v6
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage data and display human readable report
        run: |
          uv run nox --session=coverage

      - name: Create coverage report
        run: |
          uv run nox --session=coverage -- xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: g${{ secrets.CODECOV_TOKEN }}
