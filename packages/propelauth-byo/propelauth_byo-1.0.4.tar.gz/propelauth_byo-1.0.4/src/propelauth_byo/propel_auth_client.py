# Generated by PropelAuth

import json
from dataclasses import asdict
from typing import Optional, Dict, Any, Callable
from urllib.parse import urlparse
import aiohttp
from .result import Result, Ok, Err, ok, err, is_ok

from .passkey_client import PasskeyClient
from .session_client import SessionClient
from .scim_client import ScimClient
from .impersonation_client import ImpersonationClient
from .sso_client import SsoClient
from .generated.ping_command import PingCommand
from .generated.ping_response import PingResponse
from .generated.ping_error import (
    PingError,
)

class PropelAuthClient:
    
    def __init__(self, url: str, integration_key: str):
        self._url = self._validate_url(url)
        self._integration_key = integration_key
        
        self.passkeys = PasskeyClient(self._request)
        self.session = SessionClient(self._request)
        self.scim = ScimClient(self._request)
        self.impersonation = ImpersonationClient(self._request)
        self.sso = SsoClient(self._request)
    
    def _validate_url(self, url: str) -> str:
        try:
            parsed = urlparse(url)
            if not parsed.scheme or not parsed.netloc:
                raise ValueError(f"Invalid URL provided: {url}")
        except Exception as e:
            raise ValueError(f"Invalid URL provided: {url}") from e
        
        if url.endswith("/"):
            return url[:-1]
        return url
    
    async def _request(self, command: str, data: Optional[Dict[str, Any]] = None) -> Result[Dict[str, Any], Dict[str, Any]]:
        try:
            async with aiohttp.ClientSession() as session:
                payload: Dict[str, Any] = {"command": command}
                if data is not None:
                    payload["data"] = data
                
                async with session.post(
                    f"{self._url}/run-command",
                    json=payload,
                    headers={
                        "Content-Type": "application/json",
                        "Authorization": f"Bearer {self._integration_key}"
                    }
                ) as response:
                    response_data = await response.json()
                    
                    if response.status == 200:
                        return ok(response_data)
                    else:
                        return err(response_data)
        except aiohttp.ClientError as e:
            print(f"Error making request to PropelAuth API: {e}")
            return err({"type": "UnexpectedError", "details": str(e)})
        except Exception as e:
            print(f"Unexpected error: {e}")
            return err({"type": "UnexpectedError", "details": str(e)})
    
    async def ping(
        self
    ) -> Result[PingResponse, PingError]:
        data: Dict[str, Any] = {}
        response = await self._request(
            command="Ping",
            data=data
        )
        if is_ok(response):
            data = response.data
            return ok(PingResponse(
                timestamp=data["timestamp"]
            ))
        else:
            error_data = response.error
            return err(PingError(
                type=error_data.get("type", "An unexpected error occurred"),
                details=error_data.get("details", "An unexpected error occurred")
            ))
    

def create_client(url: str, integration_key: str) -> PropelAuthClient:
    return PropelAuthClient(url, integration_key)