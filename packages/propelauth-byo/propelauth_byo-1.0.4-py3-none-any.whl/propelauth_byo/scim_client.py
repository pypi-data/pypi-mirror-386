# Generated by PropelAuth

import json
from typing import Callable, List, Optional, Dict, Any
from .result import Result, Ok, Err, ok, err, is_ok
from .types import RequestFunc

from .generated.scim_request_command import ScimRequestCommand
from .generated.scim_request_response import (
    ScimRequestResponse,
    ScimRequestResponseCompleted,
    ScimRequestResponseActionRequiredLinkUser,
    ScimRequestResponseActionRequiredDisableUser,
    ScimRequestResponseActionRequiredEnableUser,
    ScimRequestResponseActionRequiredDeleteUser
)
from .generated.scim_client_facing_error import (
    ScimClientFacingError,
)
from .generated.link_scim_user_command import LinkScimUserCommand
from .generated.completed_scim_request_response import CompletedScimRequestResponse
from .generated.link_scim_user_error import (
    LinkScimUserError,
    LinkScimUserErrorScimConnectionNotFound,
    LinkScimUserErrorUserNotFound,
    LinkScimUserErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.commit_scim_user_change_command import CommitScimUserChangeCommand
from .generated.completed_scim_request_response import CompletedScimRequestResponse
from .generated.commit_scim_user_change_error import (
    CommitScimUserChangeError,
    CommitScimUserChangeErrorScimConnectionNotFound,
    CommitScimUserChangeErrorStagedChangeNotFound,
    CommitScimUserChangeErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.get_scim_user_command import GetScimUserCommand
from .generated.get_scim_user_response import GetScimUserResponse
from .generated.get_scim_user_error import (
    GetScimUserError,
    GetScimUserErrorScimConnectionNotFound,
    GetScimUserErrorUserNotFound,
    GetScimUserErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.complete_scim_user_response import CompleteScimUserResponse
from .generated.scim_group_membership_response import ScimGroupMembershipResponse
from .generated.http_method import HttpMethod
from .generated.serde_json.json_value import JsonValue
from .scim_management_client import ScimManagementClient

class ScimClient:
    
    def __init__(self, request_func: RequestFunc):
        self._request = request_func
        
        self.management = ScimManagementClient(self._request)
    
    async def scim_request(
        self,
        method: HttpMethod,
        path_and_query_params: str,
        body: Optional[JsonValue] = None,
        scim_api_key: Optional[str] = None
    ) -> Result[ScimRequestResponse, ScimClientFacingError]:
        data: Dict[str, Any] = {}
        if method is not None:
            data["method"] = method
        if path_and_query_params is not None:
            data["pathAndQueryParams"] = path_and_query_params
        if body is not None:
            data["body"] = body
        if scim_api_key is not None:
            data["scimApiKey"] = scim_api_key
        response = await self._request(
            command="ScimRequest",
            data=data
        )
        if is_ok(response):
            data = response.data
            # Handle discriminated union response
            if data.get("status") == "Completed":
                return ok(ScimRequestResponseCompleted(
                    connection_id=data["connectionId"],
                    response_data=data.get("responseData"),
                    response_http_code=data["responseHttpCode"],
                    affected_user_ids=data.get("affectedUserIds")
                ))
            elif data.get("status") == "ActionRequired" and data.get("action") == "LinkUser":
                return ok(ScimRequestResponseActionRequiredLinkUser(
                    connection_id=data["connectionId"],
                    commit_id=data["commitId"],
                    primary_email=data.get("primaryEmail"),
                    user_name=data["userName"],
                    parsed_user_data=data["parsedUserData"],
                    active=data["active"],
                    sso_user_subject=data.get("ssoUserSubject")
                ))
            elif data.get("status") == "ActionRequired" and data.get("action") == "DisableUser":
                return ok(ScimRequestResponseActionRequiredDisableUser(
                    connection_id=data["connectionId"],
                    commit_id=data["commitId"],
                    user_id=data["userId"],
                    primary_email=data.get("primaryEmail"),
                    parsed_user_data=data["parsedUserData"]
                ))
            elif data.get("status") == "ActionRequired" and data.get("action") == "EnableUser":
                return ok(ScimRequestResponseActionRequiredEnableUser(
                    connection_id=data["connectionId"],
                    commit_id=data["commitId"],
                    user_id=data["userId"],
                    primary_email=data.get("primaryEmail"),
                    parsed_user_data=data["parsedUserData"]
                ))
            elif data.get("status") == "ActionRequired" and data.get("action") == "DeleteUser":
                return ok(ScimRequestResponseActionRequiredDeleteUser(
                    connection_id=data["connectionId"],
                    commit_id=data["commitId"],
                    user_id=data["userId"],
                    primary_email=data.get("primaryEmail"),
                    parsed_user_data=data["parsedUserData"]
                ))
            else:
                # All discriminated union variants have been checked - this should never happen
                raise ValueError("Unexpected ScimRequestResponse response pattern")

        else:
            error_data = response.error
            return err(ScimClientFacingError(
                status_to_return=error_data.get("statusToReturn"),
                body_to_return=error_data.get("bodyToReturn"),
                underlying_error=error_data.get("underlyingError")
            ))
    
    async def link_scim_user(
        self,
        connection_id: str,
        commit_id: str,
        user_id: str
    ) -> Result[CompletedScimRequestResponse, LinkScimUserError]:
        data: Dict[str, Any] = {}
        if connection_id is not None:
            data["connectionId"] = connection_id
        if commit_id is not None:
            data["commitId"] = commit_id
        if user_id is not None:
            data["userId"] = user_id
        response = await self._request(
            command="LinkScimUser",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(CompletedScimRequestResponse(
                connection_id=data["connectionId"],
                response_data=data.get("responseData"),
                response_http_code=data["responseHttpCode"],
                affected_user_ids=data.get("affectedUserIds")
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(LinkScimUserErrorScimConnectionNotFound())
            elif error_data["type"] == "UserNotFound":
                return err(LinkScimUserErrorUserNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(LinkScimUserErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def commit_scim_user_change(
        self,
        connection_id: str,
        commit_id: str
    ) -> Result[CompletedScimRequestResponse, CommitScimUserChangeError]:
        data: Dict[str, Any] = {}
        if connection_id is not None:
            data["connectionId"] = connection_id
        if commit_id is not None:
            data["commitId"] = commit_id
        response = await self._request(
            command="CommitScimUserChange",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(CompletedScimRequestResponse(
                connection_id=data["connectionId"],
                response_data=data.get("responseData"),
                response_http_code=data["responseHttpCode"],
                affected_user_ids=data.get("affectedUserIds")
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(CommitScimUserChangeErrorScimConnectionNotFound())
            elif error_data["type"] == "StagedChangeNotFound":
                return err(CommitScimUserChangeErrorStagedChangeNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(CommitScimUserChangeErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def get_scim_user(
        self,
        user_id: str,
        scim_connection_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[GetScimUserResponse, GetScimUserError]:
        data: Dict[str, Any] = {}
        if user_id is not None:
            data["userId"] = user_id
        if scim_connection_id is not None:
            data["scimConnectionId"] = scim_connection_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="GetScimUser",
            data=data
        )
        if is_ok(response):
            data = response.data
            groups: List[ScimGroupMembershipResponse] = []
            for groups_data in data["groups"]:  # type: Dict[str, Any]
                groups.append(ScimGroupMembershipResponse(
                    group_id=groups_data["groupId"],
                    display_name=groups_data["displayName"],
                    external_id=groups_data.get("externalId")
                ))
            # Convert complex fields from camelCase to snake_case
            user_data: Dict[str, Any] = data["user"]
            # Handle object field: user
            user = CompleteScimUserResponse(
                connection_id=user_data["connectionId"],
                scim_user=user_data["scimUser"],
                primary_email=user_data.get("primaryEmail"),
                parsed_user_data=user_data["parsedUserData"],
                active=user_data["active"],
                user_id=user_data.get("userId")
            )

            return ok(GetScimUserResponse(
                connection_id=data["connectionId"],
                user=user,
                groups=groups
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(GetScimUserErrorScimConnectionNotFound())
            elif error_data["type"] == "UserNotFound":
                return err(GetScimUserErrorUserNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(GetScimUserErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
