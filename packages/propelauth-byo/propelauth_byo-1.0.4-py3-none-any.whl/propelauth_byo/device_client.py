# Generated by PropelAuth

import json
from typing import Callable, Optional, Dict, Any
from .result import Result, Ok, Err, ok, err, is_ok
from .types import RequestFunc

from .generated.create_device_challenge_command import CreateDeviceChallengeCommand
from .generated.create_device_challenge_response import CreateDeviceChallengeResponse
from .generated.create_device_challenge_error import (
    CreateDeviceChallengeError,
)
from .generated.register_device_command import RegisterDeviceCommand
from .generated.register_device_response import RegisterDeviceResponse
from .generated.register_device_error import (
    RegisterDeviceError,
    RegisterDeviceErrorSessionNotFound,
    RegisterDeviceErrorNewDeviceChallengeRequired,
    RegisterDeviceErrorNewDeviceChallengeRequiredDetails,
    RegisterDeviceErrorInvalidDeviceRegistration,
    RegisterDeviceErrorDeviceAlreadyRegistered,
    RegisterDeviceErrorUnexpectedError,
    UnexpectedErrorDetails
)

class DeviceClient:
    
    def __init__(self, request_func: RequestFunc):
        self._request = request_func
    
    async def create_challenge(
        self,
        user_agent: Optional[str] = None,
        ip_address: Optional[str] = None
    ) -> Result[CreateDeviceChallengeResponse, CreateDeviceChallengeError]:
        data: Dict[str, Any] = {}
        if user_agent is not None:
            data["userAgent"] = user_agent
        if ip_address is not None:
            data["ipAddress"] = ip_address
        response = await self._request(
            command="CreateDeviceChallenge",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(CreateDeviceChallengeResponse(
                device_challenge=data["deviceChallenge"],
                expires_at=data["expiresAt"]
            ))

        else:
            error_data = response.error
            return err(CreateDeviceChallengeError(
                type=error_data.get("type"),
                details=error_data.get("details")
            ))
    
    async def register(
        self,
        signed_device_challenge: str,
        remember_device: bool,
        session_token: Optional[str] = None,
        session_id: Optional[str] = None,
        request_url: Optional[str] = None,
        request_method: Optional[str] = None,
        user_agent: Optional[str] = None,
        ip_address: Optional[str] = None
    ) -> Result[RegisterDeviceResponse, RegisterDeviceError]:
        data: Dict[str, Any] = {}
        if session_token is not None:
            data["sessionToken"] = session_token
        if session_id is not None:
            data["sessionId"] = session_id
        if signed_device_challenge is not None:
            data["signedDeviceChallenge"] = signed_device_challenge
        if remember_device is not None:
            data["rememberDevice"] = remember_device
        if request_url is not None:
            data["requestUrl"] = request_url
        if request_method is not None:
            data["requestMethod"] = request_method
        if user_agent is not None:
            data["userAgent"] = user_agent
        if ip_address is not None:
            data["ipAddress"] = ip_address
        response = await self._request(
            command="RegisterDevice",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(RegisterDeviceResponse(
                new_device_detected=data["newDeviceDetected"]
            ))

        else:
            error_data = response.error
            if error_data["type"] == "SessionNotFound":
                return err(RegisterDeviceErrorSessionNotFound())
            elif error_data["type"] == "NewDeviceChallengeRequired":
                return err(RegisterDeviceErrorNewDeviceChallengeRequired(
                    details=RegisterDeviceErrorNewDeviceChallengeRequiredDetails(
                        device_challenge=error_data["details"]["deviceChallenge"],
                        expires_at=error_data["details"]["expiresAt"]
                    )
                ))
            elif error_data["type"] == "InvalidDeviceRegistration":
                return err(RegisterDeviceErrorInvalidDeviceRegistration())
            elif error_data["type"] == "DeviceAlreadyRegistered":
                return err(RegisterDeviceErrorDeviceAlreadyRegistered())
            elif error_data["type"] == "UnexpectedError":
                return err(RegisterDeviceErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
