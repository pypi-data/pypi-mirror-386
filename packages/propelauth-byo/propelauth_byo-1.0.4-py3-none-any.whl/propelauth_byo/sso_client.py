# Generated by PropelAuth

import json
from typing import Callable, Optional, Dict, Any
from .result import Result, Ok, Err, ok, err, is_ok
from .types import RequestFunc

from .generated.initiate_oidc_login_command import InitiateOidcLoginCommand
from .generated.initiate_oidc_login_response import InitiateOidcLoginResponse
from .generated.initiate_oidc_login_error import (
    InitiateOidcLoginError,
    InitiateOidcLoginErrorClientNotFound,
    InitiateOidcLoginErrorRedirectUrlInvalid,
    InitiateOidcLoginErrorRedirectUrlInvalidDetails,
    InitiateOidcLoginErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.complete_oidc_login_command import CompleteOidcLoginCommand
from .generated.complete_oidc_login_response import CompleteOidcLoginResponse
from .generated.complete_oidc_login_error import (
    CompleteOidcLoginError,
    CompleteOidcLoginErrorLoginBlockedByEmailAllowlist,
    CompleteOidcLoginErrorScimUserNotFoundWhereExpected,
    CompleteOidcLoginErrorScimUserNotActive,
    CompleteOidcLoginErrorInvalidLoginRequest,
    CompleteOidcLoginErrorIdentityProviderError,
    CompleteOidcLoginErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.oidc_login_request_error import OidcLoginRequestError
from .generated.identity_provider_error import IdentityProviderError
from .generated.complete_scim_user_response import CompleteScimUserResponse
from .generated.serde_json.json_value import JsonValue
from .sso_management_client import SsoManagementClient

class SsoClient:
    
    def __init__(self, request_func: RequestFunc):
        self._request = request_func
        
        self.management = SsoManagementClient(self._request)
    
    async def initiate_oidc_login(
        self,
        post_login_redirect_url: Optional[str] = None,
        oidc_client_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[InitiateOidcLoginResponse, InitiateOidcLoginError]:
        data: Dict[str, Any] = {}
        if post_login_redirect_url is not None:
            data["postLoginRedirectUrl"] = post_login_redirect_url
        if oidc_client_id is not None:
            data["oidcClientId"] = oidc_client_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="InitiateOidcLogin",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(InitiateOidcLoginResponse(
                send_user_to_idp_url=data["sendUserToIdpUrl"],
                state_for_cookie=data["stateForCookie"]
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ClientNotFound":
                return err(InitiateOidcLoginErrorClientNotFound())
            elif error_data["type"] == "RedirectUrlInvalid":
                return err(InitiateOidcLoginErrorRedirectUrlInvalid(
                    details=InitiateOidcLoginErrorRedirectUrlInvalidDetails(
                        message=error_data["details"]["message"]
                    )
                ))
            elif error_data["type"] == "UnexpectedError":
                return err(InitiateOidcLoginErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def complete_oidc_login(
        self,
        callback_path_and_query_params: str,
        state_from_cookie: Optional[str] = None
    ) -> Result[CompleteOidcLoginResponse, CompleteOidcLoginError]:
        data: Dict[str, Any] = {}
        if state_from_cookie is not None:
            data["stateFromCookie"] = state_from_cookie
        if callback_path_and_query_params is not None:
            data["callbackPathAndQueryParams"] = callback_path_and_query_params
        response = await self._request(
            command="CompleteOidcLogin",
            data=data
        )
        if is_ok(response):
            data = response.data
            # Convert complex fields from camelCase to snake_case
            scim_user_data: Optional[Dict[str, Any]] = data.get("scimUser")
            # Handle object field: scim_user
            if scim_user_data:
                scim_user = CompleteScimUserResponse(
                    connection_id=scim_user_data["connectionId"],
                    scim_user=scim_user_data["scimUser"],
                    primary_email=scim_user_data.get("primaryEmail"),
                    parsed_user_data=scim_user_data["parsedUserData"],
                    active=scim_user_data["active"],
                    user_id=scim_user_data.get("userId")
                )
            else:
                scim_user = None

            return ok(CompleteOidcLoginResponse(
                client_id=data["clientId"],
                customer_id=data["customerId"],
                oidc_user_id=data["oidcUserId"],
                email=data.get("email"),
                email_verified=data["emailVerified"],
                preferred_username=data.get("preferredUsername"),
                data_from_sso=data["dataFromSso"],
                post_login_redirect_url=data.get("postLoginRedirectUrl"),
                scim_user=scim_user
            ))

        else:
            error_data = response.error
            if error_data["type"] == "LoginBlockedByEmailAllowlist":
                return err(CompleteOidcLoginErrorLoginBlockedByEmailAllowlist())
            elif error_data["type"] == "ScimUserNotFoundWhereExpected":
                return err(CompleteOidcLoginErrorScimUserNotFoundWhereExpected())
            elif error_data["type"] == "ScimUserNotActive":
                return err(CompleteOidcLoginErrorScimUserNotActive())
            elif error_data["type"] == "InvalidLoginRequest":
                return err(CompleteOidcLoginErrorInvalidLoginRequest(
                    details=error_data["details"]
                                    ))
            elif error_data["type"] == "IdentityProviderError":
                return err(CompleteOidcLoginErrorIdentityProviderError(
                    details=error_data["details"]
                                    ))
            elif error_data["type"] == "UnexpectedError":
                return err(CompleteOidcLoginErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
