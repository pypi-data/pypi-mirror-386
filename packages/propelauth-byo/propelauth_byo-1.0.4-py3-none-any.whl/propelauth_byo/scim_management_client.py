# Generated by PropelAuth

import json
from typing import Callable, List, Optional, Dict, Any
from .result import Result, Ok, Err, ok, err, is_ok
from .types import RequestFunc

from .generated.get_scim_users_command import GetScimUsersCommand
from .generated.get_scim_users_response import GetScimUsersResponse
from .generated.get_scim_users_error import (
    GetScimUsersError,
    GetScimUsersErrorScimConnectionNotFound,
    GetScimUsersErrorInvalidQueryField,
    GetScimUsersErrorInvalidQueryFieldDetails,
    GetScimUsersErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.complete_scim_user_response import CompleteScimUserResponse
from .generated.create_scim_connection_command import CreateScimConnectionCommand
from .generated.create_scim_connection_response import CreateScimConnectionResponse
from .generated.create_scim_connection_error import (
    CreateScimConnectionError,
    CreateScimConnectionErrorInvalidFields,
    CreateScimConnectionErrorInvalidFieldsDetails,
    CreateScimConnectionErrorScimConnectionForCustomerIdAlreadyExists,
    CreateScimConnectionErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.fetch_scim_connection_command import FetchScimConnectionCommand
from .generated.fetch_scim_connection_response import FetchScimConnectionResponse
from .generated.fetch_scim_connection_error import (
    FetchScimConnectionError,
    FetchScimConnectionErrorScimConnectionNotFound,
    FetchScimConnectionErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.scim_user_mapping_field_definition import ScimUserMappingFieldDefinition
from .generated.scim_user_mapping_config import ScimUserMappingConfig
from .generated.patch_scim_connection_command import PatchScimConnectionCommand
from .generated.patch_scim_connection_response import PatchScimConnectionResponse
from .generated.patch_scim_connection_error import (
    PatchScimConnectionError,
    PatchScimConnectionErrorScimConnectionNotFound,
    PatchScimConnectionErrorDisplayNameInvalid,
    PatchScimConnectionErrorDisplayNameInvalidDetails,
    PatchScimConnectionErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.reset_scim_api_key_command import ResetScimApiKeyCommand
from .generated.reset_scim_api_key_response import ResetScimApiKeyResponse
from .generated.reset_scim_api_key_error import (
    ResetScimApiKeyError,
    ResetScimApiKeyErrorScimConnectionNotFound,
    ResetScimApiKeyErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.delete_scim_connection_command import DeleteScimConnectionCommand
from .generated.delete_scim_connection_response import DeleteScimConnectionResponse
from .generated.delete_scim_connection_error import (
    DeleteScimConnectionError,
    DeleteScimConnectionErrorScimConnectionNotFound,
    DeleteScimConnectionErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.scim_users_page_equality_filter import ScimUsersPageEqualityFilter

class ScimManagementClient:
    
    def __init__(self, request_func: RequestFunc):
        self._request = request_func
    
    async def get_scim_users(
        self,
        filter: Optional[ScimUsersPageEqualityFilter] = None,
        page_number: Optional[int] = None,
        page_size: Optional[int] = None,
        scim_connection_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[GetScimUsersResponse, GetScimUsersError]:
        data: Dict[str, Any] = {}
        if filter is not None:
            data["filter"] = filter._to_request()
        if page_number is not None:
            data["pageNumber"] = page_number
        if page_size is not None:
            data["pageSize"] = page_size
        if scim_connection_id is not None:
            data["scimConnectionId"] = scim_connection_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="GetScimUsers",
            data=data
        )
        if is_ok(response):
            data = response.data
            users: List[CompleteScimUserResponse] = []
            for users_data in data["users"]:  # type: Dict[str, Any]
                users.append(CompleteScimUserResponse(
                    connection_id=users_data["connectionId"],
                    scim_user=users_data["scimUser"],
                    primary_email=users_data.get("primaryEmail"),
                    parsed_user_data=users_data["parsedUserData"],
                    active=users_data["active"],
                    user_id=users_data.get("userId")
                ))

            return ok(GetScimUsersResponse(
                connection_id=data["connectionId"],
                page_number=data["pageNumber"],
                page_size=data["pageSize"],
                total_results=data["totalResults"],
                users=users
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(GetScimUsersErrorScimConnectionNotFound())
            elif error_data["type"] == "InvalidQueryField":
                return err(GetScimUsersErrorInvalidQueryField(
                    details=GetScimUsersErrorInvalidQueryFieldDetails(
                        field=error_data["details"]["field"],
                        message=error_data["details"]["message"]
                    )
                ))
            elif error_data["type"] == "UnexpectedError":
                return err(GetScimUsersErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def create_scim_connection(
        self,
        customer_id: str,
        display_name: Optional[str] = None,
        scim_api_key_expiration: Optional[int] = None,
        custom_mapping: Optional[ScimUserMappingConfig] = None
    ) -> Result[CreateScimConnectionResponse, CreateScimConnectionError]:
        data: Dict[str, Any] = {}
        if customer_id is not None:
            data["customerId"] = customer_id
        if display_name is not None:
            data["displayName"] = display_name
        if scim_api_key_expiration is not None:
            data["scimApiKeyExpiration"] = scim_api_key_expiration
        if custom_mapping is not None:
            data["customMapping"] = custom_mapping._to_request()
        response = await self._request(
            command="CreateScimConnection",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(CreateScimConnectionResponse(
                connection_id=data["connectionId"],
                scim_api_key=data["scimApiKey"]
            ))

        else:
            error_data = response.error
            if error_data["type"] == "InvalidFields":
                return err(CreateScimConnectionErrorInvalidFields(
                    details=CreateScimConnectionErrorInvalidFieldsDetails(
                        fields=error_data["details"]["fields"]
                    )
                ))
            elif error_data["type"] == "ScimConnectionForCustomerIdAlreadyExists":
                return err(CreateScimConnectionErrorScimConnectionForCustomerIdAlreadyExists())
            elif error_data["type"] == "UnexpectedError":
                return err(CreateScimConnectionErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def fetch_scim_connection(
        self,
        scim_connection_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[FetchScimConnectionResponse, FetchScimConnectionError]:
        data: Dict[str, Any] = {}
        if scim_connection_id is not None:
            data["scimConnectionId"] = scim_connection_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="FetchScimConnection",
            data=data
        )
        if is_ok(response):
            data = response.data
            # Convert complex fields from camelCase to snake_case
            user_mapping_data: Dict[str, Any] = data["userMapping"]
            # Handle object field: user_mapping
            # Process nested array fields first
            user_mapping_user_schema: List[ScimUserMappingFieldDefinition] = []
            for item_data in user_mapping_data.get("userSchema", []):  # type: Dict[str, Any]
                user_mapping_user_schema.append(ScimUserMappingFieldDefinition(
                    output_field=item_data["outputField"],
                    input_path=item_data["inputPath"],
                    fallback_input_paths=item_data["fallbackInputPaths"],
                    property_type=item_data["propertyType"],
                    display_name=item_data["displayName"],
                    description=item_data.get("description"),
                    warn_if_missing=item_data["warnIfMissing"],
                    default_value=item_data.get("defaultValue")
                ))
            user_mapping = ScimUserMappingConfig(
                user_schema=user_mapping_user_schema
            )

            return ok(FetchScimConnectionResponse(
                connection_id=data["connectionId"],
                customer_id=data["customerId"],
                display_name=data.get("displayName"),
                scim_api_key_valid_until=data.get("scimApiKeyValidUntil"),
                user_mapping=user_mapping
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(FetchScimConnectionErrorScimConnectionNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(FetchScimConnectionErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def patch_scim_connection(
        self,
        display_name: Optional[str] = None,
        scim_api_key_expiration: Optional[int] = None,
        custom_mapping: Optional[ScimUserMappingConfig] = None,
        scim_connection_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[PatchScimConnectionResponse, PatchScimConnectionError]:
        data: Dict[str, Any] = {}
        if display_name is not None:
            data["displayName"] = display_name
        if scim_api_key_expiration is not None:
            data["scimApiKeyExpiration"] = scim_api_key_expiration
        if custom_mapping is not None:
            data["customMapping"] = custom_mapping._to_request()
        if scim_connection_id is not None:
            data["scimConnectionId"] = scim_connection_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="PatchScimConnection",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(PatchScimConnectionResponse())
            
        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(PatchScimConnectionErrorScimConnectionNotFound())
            elif error_data["type"] == "DisplayNameInvalid":
                return err(PatchScimConnectionErrorDisplayNameInvalid(
                    details=PatchScimConnectionErrorDisplayNameInvalidDetails(
                        message=error_data["details"]["message"]
                    )
                ))
            elif error_data["type"] == "UnexpectedError":
                return err(PatchScimConnectionErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def reset_scim_api_key(
        self,
        scim_api_key_expiration: Optional[int] = None,
        scim_connection_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[ResetScimApiKeyResponse, ResetScimApiKeyError]:
        data: Dict[str, Any] = {}
        if scim_api_key_expiration is not None:
            data["scimApiKeyExpiration"] = scim_api_key_expiration
        if scim_connection_id is not None:
            data["scimConnectionId"] = scim_connection_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="ResetScimApiKey",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(ResetScimApiKeyResponse(
                connection_id=data["connectionId"],
                scim_api_key=data["scimApiKey"]
            ))

        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(ResetScimApiKeyErrorScimConnectionNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(ResetScimApiKeyErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def delete_scim_connection(
        self,
        scim_connection_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[DeleteScimConnectionResponse, DeleteScimConnectionError]:
        data: Dict[str, Any] = {}
        if scim_connection_id is not None:
            data["scimConnectionId"] = scim_connection_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="DeleteScimConnection",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(DeleteScimConnectionResponse())
            
        else:
            error_data = response.error
            if error_data["type"] == "ScimConnectionNotFound":
                return err(DeleteScimConnectionErrorScimConnectionNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(DeleteScimConnectionErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
