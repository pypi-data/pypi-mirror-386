# Generated by PropelAuth

import json
from typing import Callable, List, Optional, Dict, Any
from .result import Result, Ok, Err, ok, err, is_ok
from .types import RequestFunc

from .generated.create_oidc_client_command import CreateOidcClientCommand
from .generated.create_oidc_client_response import CreateOidcClientResponse
from .generated.create_oidc_client_error import (
    CreateOidcClientError,
    CreateOidcClientErrorInvalidFields,
    CreateOidcClientErrorInvalidFieldsDetails,
    CreateOidcClientErrorClientIdAlreadyTaken,
    CreateOidcClientErrorCustomerIdAlreadyTakenForEoidcClient,
    CreateOidcClientErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.fetch_oidc_client_command import FetchOidcClientCommand
from .generated.fetch_oidc_client_response import FetchOidcClientResponse
from .generated.fetch_oidc_client_error import (
    FetchOidcClientError,
    FetchOidcClientErrorOidcClientNotFound,
    FetchOidcClientErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.idp_info_from_customer_response import (
    IdpInfoFromCustomerResponse,
    IdpInfoFromCustomerResponseMicrosoftEntra,
    IdpInfoFromCustomerResponseOkta,
    IdpInfoFromCustomerResponseGeneric
)
from .generated.fetch_scim_connection_response import FetchScimConnectionResponse
from .generated.scim_matching_definition import ScimMatchingDefinition
from .generated.patch_oidc_client_command import PatchOidcClientCommand
from .generated.patch_oidc_client_response import PatchOidcClientResponse
from .generated.patch_oidc_client_error import (
    PatchOidcClientError,
    PatchOidcClientErrorOidcClientNotFound,
    PatchOidcClientErrorInvalidFields,
    PatchOidcClientErrorInvalidFieldsDetails,
    PatchOidcClientErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.delete_oidc_client_command import DeleteOidcClientCommand
from .generated.delete_oidc_client_response import DeleteOidcClientResponse
from .generated.delete_oidc_client_error import (
    DeleteOidcClientError,
    DeleteOidcClientErrorOidcClientNotFound,
    DeleteOidcClientErrorUnexpectedError,
    UnexpectedErrorDetails
)
from .generated.idp_info_from_customer import IdpInfoFromCustomer
from .generated.optional_idp_info_from_customer import OptionalIdpInfoFromCustomer

class SsoManagementClient:
    
    def __init__(self, request_func: RequestFunc):
        self._request = request_func
    
    async def create_oidc_client(
        self,
        idp_info_from_customer: IdpInfoFromCustomer,
        customer_id: str,
        redirect_url: str,
        display_name: Optional[str] = None,
        additional_scopes: Optional[List[str]] = None,
        scim_matching_definition: Optional[ScimMatchingDefinition] = None,
        email_domain_allowlist: Optional[List[str]] = None
    ) -> Result[CreateOidcClientResponse, CreateOidcClientError]:
        data: Dict[str, Any] = {}
        if idp_info_from_customer is not None:
            data["idpInfoFromCustomer"] = idp_info_from_customer._to_request()
        if customer_id is not None:
            data["customerId"] = customer_id
        if display_name is not None:
            data["displayName"] = display_name
        if redirect_url is not None:
            data["redirectUrl"] = redirect_url
        if additional_scopes is not None:
            data["additionalScopes"] = additional_scopes
        if scim_matching_definition is not None:
            data["scimMatchingDefinition"] = scim_matching_definition._to_request()
        if email_domain_allowlist is not None:
            data["emailDomainAllowlist"] = email_domain_allowlist
        response = await self._request(
            command="CreateOidcClient",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(CreateOidcClientResponse(
                client_id=data["clientId"]
            ))

        else:
            error_data = response.error
            if error_data["type"] == "InvalidFields":
                return err(CreateOidcClientErrorInvalidFields(
                    details=CreateOidcClientErrorInvalidFieldsDetails(
                        fields=error_data["details"]["fields"]
                    )
                ))
            elif error_data["type"] == "ClientIdAlreadyTaken":
                return err(CreateOidcClientErrorClientIdAlreadyTaken())
            elif error_data["type"] == "CustomerIdAlreadyTakenForEoidcClient":
                return err(CreateOidcClientErrorCustomerIdAlreadyTakenForEoidcClient())
            elif error_data["type"] == "UnexpectedError":
                return err(CreateOidcClientErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def fetch_oidc_client(
        self,
        oidc_client_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[FetchOidcClientResponse, FetchOidcClientError]:
        data: Dict[str, Any] = {}
        if oidc_client_id is not None:
            data["oidcClientId"] = oidc_client_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="FetchOidcClient",
            data=data
        )
        if is_ok(response):
            data = response.data
            # Convert complex fields from camelCase to snake_case
            idp_info_from_customer_data: Dict[str, Any] = data["idpInfoFromCustomer"]
            # Handle discriminated union field: idp_info_from_customer
            idp_info_from_customer: IdpInfoFromCustomerResponse
            discriminator_value = idp_info_from_customer_data.get("idpType")
            if discriminator_value == "MicrosoftEntra":
                idp_info_from_customer = IdpInfoFromCustomerResponseMicrosoftEntra(
                    client_id=idp_info_from_customer_data["clientId"],
                    uses_pkce=idp_info_from_customer_data["usesPkce"],
                    tenant_id=idp_info_from_customer_data["tenantId"]
                )
            elif discriminator_value == "Okta":
                idp_info_from_customer = IdpInfoFromCustomerResponseOkta(
                    client_id=idp_info_from_customer_data["clientId"],
                    uses_pkce=idp_info_from_customer_data["usesPkce"],
                    sso_domain=idp_info_from_customer_data["ssoDomain"]
                )
            elif discriminator_value == "Generic":
                idp_info_from_customer = IdpInfoFromCustomerResponseGeneric(
                    client_id=idp_info_from_customer_data["clientId"],
                    uses_pkce=idp_info_from_customer_data["usesPkce"],
                    auth_url=idp_info_from_customer_data["authUrl"],
                    token_url=idp_info_from_customer_data["tokenUrl"],
                    userinfo_url=idp_info_from_customer_data["userinfoUrl"]
                )
            else:
                raise ValueError(f"Unknown discriminator value for idp_info_from_customer: {discriminator_value}")
            scim_connection_data: Optional[Dict[str, Any]] = data.get("scimConnection")
            # Handle object field: scim_connection
            if scim_connection_data:
                scim_connection = FetchScimConnectionResponse(
                    connection_id=scim_connection_data["connectionId"],
                    customer_id=scim_connection_data["customerId"],
                    display_name=scim_connection_data.get("displayName"),
                    scim_api_key_valid_until=scim_connection_data.get("scimApiKeyValidUntil"),
                    user_mapping=scim_connection_data["userMapping"]
                )
            else:
                scim_connection = None
            scim_matching_definition_data: Optional[Dict[str, Any]] = data.get("scimMatchingDefinition")
            # Handle object field: scim_matching_definition
            if scim_matching_definition_data:
                scim_matching_definition = ScimMatchingDefinition(
                    strategy=scim_matching_definition_data["strategy"]
                )
            else:
                scim_matching_definition = None

            return ok(FetchOidcClientResponse(
                customer_id=data["customerId"],
                display_name=data.get("displayName"),
                redirect_url=data["redirectUrl"],
                email_domain_allowlist=data["emailDomainAllowlist"],
                additional_scopes=data["additionalScopes"],
                idp_info_from_customer=idp_info_from_customer,
                scim_connection=scim_connection,
                scim_matching_definition=scim_matching_definition
            ))

        else:
            error_data = response.error
            if error_data["type"] == "OidcClientNotFound":
                return err(FetchOidcClientErrorOidcClientNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(FetchOidcClientErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def patch_oidc_client(
        self,
        idp_info_from_customer: Optional[OptionalIdpInfoFromCustomer] = None,
        display_name: Optional[str] = None,
        email_domain_allowlist: Optional[List[str]] = None,
        redirect_url: Optional[str] = None,
        additional_scopes: Optional[List[str]] = None,
        scim_matching_definition: Optional[ScimMatchingDefinition] = None,
        oidc_client_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[PatchOidcClientResponse, PatchOidcClientError]:
        data: Dict[str, Any] = {}
        if idp_info_from_customer is not None:
            data["idpInfoFromCustomer"] = idp_info_from_customer._to_request()
        if display_name is not None:
            data["displayName"] = display_name
        if email_domain_allowlist is not None:
            data["emailDomainAllowlist"] = email_domain_allowlist
        if redirect_url is not None:
            data["redirectUrl"] = redirect_url
        if additional_scopes is not None:
            data["additionalScopes"] = additional_scopes
        if scim_matching_definition is not None:
            data["scimMatchingDefinition"] = scim_matching_definition._to_request()
        if oidc_client_id is not None:
            data["oidcClientId"] = oidc_client_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="PatchOidcClient",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(PatchOidcClientResponse(
                client_id=data["clientId"]
            ))

        else:
            error_data = response.error
            if error_data["type"] == "OidcClientNotFound":
                return err(PatchOidcClientErrorOidcClientNotFound())
            elif error_data["type"] == "InvalidFields":
                return err(PatchOidcClientErrorInvalidFields(
                    details=PatchOidcClientErrorInvalidFieldsDetails(
                        fields=error_data["details"]["fields"]
                    )
                ))
            elif error_data["type"] == "UnexpectedError":
                return err(PatchOidcClientErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
    async def delete_oidc_client(
        self,
        oidc_client_id: Optional[str] = None,
        customer_id: Optional[str] = None
    ) -> Result[DeleteOidcClientResponse, DeleteOidcClientError]:
        data: Dict[str, Any] = {}
        if oidc_client_id is not None:
            data["oidcClientId"] = oidc_client_id
        if customer_id is not None:
            data["customerId"] = customer_id
        response = await self._request(
            command="DeleteOidcClient",
            data=data
        )
        if is_ok(response):
            data = response.data

            return ok(DeleteOidcClientResponse())
            
        else:
            error_data = response.error
            if error_data["type"] == "OidcClientNotFound":
                return err(DeleteOidcClientErrorOidcClientNotFound())
            elif error_data["type"] == "UnexpectedError":
                return err(DeleteOidcClientErrorUnexpectedError(
                    details=str(error_data["details"]) if isinstance(error_data["details"], (str, int, float, bool)) else json.dumps(error_data["details"])
                ))
            else:
                raise ValueError(f"Unknown error type: {error_data.get('type', 'missing type field')}")
    
