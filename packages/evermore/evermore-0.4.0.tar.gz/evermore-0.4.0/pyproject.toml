[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "evermore"
authors = [
    { name = "Peter Fackeldey", email = "fackeldey.peter@gmail.com" },
]
description = "Differentiable (binned) likelihoods in JAX."
license = "BSD-3-Clause"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dynamic = ["version"] # version is set in src/evermore/__init__.py
dependencies = [
    "jax>=0.7.2", # jax.new_ref
    "jaxlib",
    "jaxtyping",
    "flax>=0.12.0",
]

[dependency-groups]
test = ["pytest >=7", "pytest-cov >=3"]
examples = [
    "iminuit",
    "jaxtyping",
    "optax",
    "optimistix",
    "wadler_lindig",
]
docs = [
    "sphinx",
    "myst-parser",
    "myst-nb",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "sphinx-book-theme",
    "sphinx-design",
    "sphinx-togglebutton",
]
dev = [
    { include-group = "test" },
    { include-group = "examples" },
    { include-group = "docs" },
    "ipython",
    "ruff",
    "pre_commit",
    "mypy",
]

[project.urls]
Homepage = "https://github.com/pfackeldey/evermore"
"Bug Tracker" = "https://github.com/pfackeldey/evermore/issues"
Discussions = "https://github.com/pfackeldey/evermore/discussions"
Changelog = "https://github.com/pfackeldey/evermore/releases"


[tool.hatch]
version.path = "src/evermore/__init__.py"
envs.default.dependencies = ["pytest", "pytest-cov"]

[tool.pytest.ini_options]
minversion = "7"
xfail_strict = true
addopts = ["-ra", "--strict-config", "--strict-markers"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning", # <- remove once equinox publishes a new release (see: https://github.com/patrick-kidger/equinox/commit/5a5bf287f73032201c34ff2c73e73573f8232739)
]
log_cli_level = "INFO"
testpaths = ["tests"]


[tool.coverage]
run.source = ["evermore"]
port.exclude_lines = ['pragma: no cover', '\.\.\.', 'if typing.TYPE_CHECKING:']


[tool.mypy]
files = ["src", "tests"]
python_version = "3.11"
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = false
ignore_missing_imports = true


[tool.ruff.lint]
preview = true
ignore = [
    "PLR",  # Design related pylint codes
    "E501", # Line too long
    # "B006",   # converts default args to 'None'
    "I002",    # isort: "from __future__ import annotations"
    "ISC001",  # flake8-implicit-str-concat: Implicit string concatenation"
    "PLC0415", # `import` should be at the top-level of a file
    "PLW3201", # Dunder method `...` has no special meaning in Python 3
    "RUF052",  # Local dummy variable `...` is accessed
    "F722",    # jaxtyping: `Float32[Array, "b c"]` (https://docs.kidger.site/jaxtyping/faq/#flake8-or-ruff-are-throwing-an-error)
]
select = [
    "E",
    "F",
    "W",    # flake8
    "B",    # flake8-bugbear
    "I",    # isort
    "C4",   # flake8-comprehensions
    "EM",   # flake8-errmsg
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "G",    # flake8-logging-format
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "RET",  # flake8-return
    "RUF",  # Ruff-specific
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "EXE",  # flake8-executable
    "E303", # Too many blank lines
]
unfixable = [
    "F841", # Would remove unused variables
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
