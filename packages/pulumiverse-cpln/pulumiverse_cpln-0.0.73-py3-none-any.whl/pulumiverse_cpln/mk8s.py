# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Mk8sArgs', 'Mk8s']

@pulumi.input_type
class Mk8sArgs:
    def __init__(__self__, *,
                 version: pulumi.Input[_builtins.str],
                 add_ons: Optional[pulumi.Input['Mk8sAddOnsArgs']] = None,
                 aws_provider: Optional[pulumi.Input['Mk8sAwsProviderArgs']] = None,
                 azure_provider: Optional[pulumi.Input['Mk8sAzureProviderArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digital_ocean_provider: Optional[pulumi.Input['Mk8sDigitalOceanProviderArgs']] = None,
                 ephemeral_provider: Optional[pulumi.Input['Mk8sEphemeralProviderArgs']] = None,
                 firewalls: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]]] = None,
                 gcp_provider: Optional[pulumi.Input['Mk8sGcpProviderArgs']] = None,
                 generic_provider: Optional[pulumi.Input['Mk8sGenericProviderArgs']] = None,
                 hetzner_provider: Optional[pulumi.Input['Mk8sHetznerProviderArgs']] = None,
                 lambdalabs_provider: Optional[pulumi.Input['Mk8sLambdalabsProviderArgs']] = None,
                 linode_provider: Optional[pulumi.Input['Mk8sLinodeProviderArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 oblivus_provider: Optional[pulumi.Input['Mk8sOblivusProviderArgs']] = None,
                 paperspace_provider: Optional[pulumi.Input['Mk8sPaperspaceProviderArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 triton_provider: Optional[pulumi.Input['Mk8sTritonProviderArgs']] = None):
        """
        The set of arguments for constructing a Mk8s resource.
        :param pulumi.Input[_builtins.str] description: Description of the mk8s.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]] firewalls: Allow-list.
        :param pulumi.Input[_builtins.str] name: Name of the mk8s.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value map of resource tags.
        """
        pulumi.set(__self__, "version", version)
        if add_ons is not None:
            pulumi.set(__self__, "add_ons", add_ons)
        if aws_provider is not None:
            pulumi.set(__self__, "aws_provider", aws_provider)
        if azure_provider is not None:
            pulumi.set(__self__, "azure_provider", azure_provider)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digital_ocean_provider is not None:
            pulumi.set(__self__, "digital_ocean_provider", digital_ocean_provider)
        if ephemeral_provider is not None:
            pulumi.set(__self__, "ephemeral_provider", ephemeral_provider)
        if firewalls is not None:
            pulumi.set(__self__, "firewalls", firewalls)
        if gcp_provider is not None:
            pulumi.set(__self__, "gcp_provider", gcp_provider)
        if generic_provider is not None:
            pulumi.set(__self__, "generic_provider", generic_provider)
        if hetzner_provider is not None:
            pulumi.set(__self__, "hetzner_provider", hetzner_provider)
        if lambdalabs_provider is not None:
            pulumi.set(__self__, "lambdalabs_provider", lambdalabs_provider)
        if linode_provider is not None:
            pulumi.set(__self__, "linode_provider", linode_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oblivus_provider is not None:
            pulumi.set(__self__, "oblivus_provider", oblivus_provider)
        if paperspace_provider is not None:
            pulumi.set(__self__, "paperspace_provider", paperspace_provider)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triton_provider is not None:
            pulumi.set(__self__, "triton_provider", triton_provider)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[pulumi.Input['Mk8sAddOnsArgs']]:
        return pulumi.get(self, "add_ons")

    @add_ons.setter
    def add_ons(self, value: Optional[pulumi.Input['Mk8sAddOnsArgs']]):
        pulumi.set(self, "add_ons", value)

    @_builtins.property
    @pulumi.getter(name="awsProvider")
    def aws_provider(self) -> Optional[pulumi.Input['Mk8sAwsProviderArgs']]:
        return pulumi.get(self, "aws_provider")

    @aws_provider.setter
    def aws_provider(self, value: Optional[pulumi.Input['Mk8sAwsProviderArgs']]):
        pulumi.set(self, "aws_provider", value)

    @_builtins.property
    @pulumi.getter(name="azureProvider")
    def azure_provider(self) -> Optional[pulumi.Input['Mk8sAzureProviderArgs']]:
        return pulumi.get(self, "azure_provider")

    @azure_provider.setter
    def azure_provider(self, value: Optional[pulumi.Input['Mk8sAzureProviderArgs']]):
        pulumi.set(self, "azure_provider", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the mk8s.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="digitalOceanProvider")
    def digital_ocean_provider(self) -> Optional[pulumi.Input['Mk8sDigitalOceanProviderArgs']]:
        return pulumi.get(self, "digital_ocean_provider")

    @digital_ocean_provider.setter
    def digital_ocean_provider(self, value: Optional[pulumi.Input['Mk8sDigitalOceanProviderArgs']]):
        pulumi.set(self, "digital_ocean_provider", value)

    @_builtins.property
    @pulumi.getter(name="ephemeralProvider")
    def ephemeral_provider(self) -> Optional[pulumi.Input['Mk8sEphemeralProviderArgs']]:
        return pulumi.get(self, "ephemeral_provider")

    @ephemeral_provider.setter
    def ephemeral_provider(self, value: Optional[pulumi.Input['Mk8sEphemeralProviderArgs']]):
        pulumi.set(self, "ephemeral_provider", value)

    @_builtins.property
    @pulumi.getter
    def firewalls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]]]:
        """
        Allow-list.
        """
        return pulumi.get(self, "firewalls")

    @firewalls.setter
    def firewalls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]]]):
        pulumi.set(self, "firewalls", value)

    @_builtins.property
    @pulumi.getter(name="gcpProvider")
    def gcp_provider(self) -> Optional[pulumi.Input['Mk8sGcpProviderArgs']]:
        return pulumi.get(self, "gcp_provider")

    @gcp_provider.setter
    def gcp_provider(self, value: Optional[pulumi.Input['Mk8sGcpProviderArgs']]):
        pulumi.set(self, "gcp_provider", value)

    @_builtins.property
    @pulumi.getter(name="genericProvider")
    def generic_provider(self) -> Optional[pulumi.Input['Mk8sGenericProviderArgs']]:
        return pulumi.get(self, "generic_provider")

    @generic_provider.setter
    def generic_provider(self, value: Optional[pulumi.Input['Mk8sGenericProviderArgs']]):
        pulumi.set(self, "generic_provider", value)

    @_builtins.property
    @pulumi.getter(name="hetznerProvider")
    def hetzner_provider(self) -> Optional[pulumi.Input['Mk8sHetznerProviderArgs']]:
        return pulumi.get(self, "hetzner_provider")

    @hetzner_provider.setter
    def hetzner_provider(self, value: Optional[pulumi.Input['Mk8sHetznerProviderArgs']]):
        pulumi.set(self, "hetzner_provider", value)

    @_builtins.property
    @pulumi.getter(name="lambdalabsProvider")
    def lambdalabs_provider(self) -> Optional[pulumi.Input['Mk8sLambdalabsProviderArgs']]:
        return pulumi.get(self, "lambdalabs_provider")

    @lambdalabs_provider.setter
    def lambdalabs_provider(self, value: Optional[pulumi.Input['Mk8sLambdalabsProviderArgs']]):
        pulumi.set(self, "lambdalabs_provider", value)

    @_builtins.property
    @pulumi.getter(name="linodeProvider")
    def linode_provider(self) -> Optional[pulumi.Input['Mk8sLinodeProviderArgs']]:
        return pulumi.get(self, "linode_provider")

    @linode_provider.setter
    def linode_provider(self, value: Optional[pulumi.Input['Mk8sLinodeProviderArgs']]):
        pulumi.set(self, "linode_provider", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the mk8s.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="oblivusProvider")
    def oblivus_provider(self) -> Optional[pulumi.Input['Mk8sOblivusProviderArgs']]:
        return pulumi.get(self, "oblivus_provider")

    @oblivus_provider.setter
    def oblivus_provider(self, value: Optional[pulumi.Input['Mk8sOblivusProviderArgs']]):
        pulumi.set(self, "oblivus_provider", value)

    @_builtins.property
    @pulumi.getter(name="paperspaceProvider")
    def paperspace_provider(self) -> Optional[pulumi.Input['Mk8sPaperspaceProviderArgs']]:
        return pulumi.get(self, "paperspace_provider")

    @paperspace_provider.setter
    def paperspace_provider(self, value: Optional[pulumi.Input['Mk8sPaperspaceProviderArgs']]):
        pulumi.set(self, "paperspace_provider", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tritonProvider")
    def triton_provider(self) -> Optional[pulumi.Input['Mk8sTritonProviderArgs']]:
        return pulumi.get(self, "triton_provider")

    @triton_provider.setter
    def triton_provider(self, value: Optional[pulumi.Input['Mk8sTritonProviderArgs']]):
        pulumi.set(self, "triton_provider", value)


@pulumi.input_type
class _Mk8sState:
    def __init__(__self__, *,
                 add_ons: Optional[pulumi.Input['Mk8sAddOnsArgs']] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_provider: Optional[pulumi.Input['Mk8sAwsProviderArgs']] = None,
                 azure_provider: Optional[pulumi.Input['Mk8sAzureProviderArgs']] = None,
                 cpln_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digital_ocean_provider: Optional[pulumi.Input['Mk8sDigitalOceanProviderArgs']] = None,
                 ephemeral_provider: Optional[pulumi.Input['Mk8sEphemeralProviderArgs']] = None,
                 firewalls: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]]] = None,
                 gcp_provider: Optional[pulumi.Input['Mk8sGcpProviderArgs']] = None,
                 generic_provider: Optional[pulumi.Input['Mk8sGenericProviderArgs']] = None,
                 hetzner_provider: Optional[pulumi.Input['Mk8sHetznerProviderArgs']] = None,
                 lambdalabs_provider: Optional[pulumi.Input['Mk8sLambdalabsProviderArgs']] = None,
                 linode_provider: Optional[pulumi.Input['Mk8sLinodeProviderArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 oblivus_provider: Optional[pulumi.Input['Mk8sOblivusProviderArgs']] = None,
                 paperspace_provider: Optional[pulumi.Input['Mk8sPaperspaceProviderArgs']] = None,
                 self_link: Optional[pulumi.Input[_builtins.str]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 triton_provider: Optional[pulumi.Input['Mk8sTritonProviderArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Mk8s resources.
        :param pulumi.Input[_builtins.str] alias: The alias name of the Mk8s.
        :param pulumi.Input[_builtins.str] cpln_id: The ID, in GUID format, of the mk8s.
        :param pulumi.Input[_builtins.str] description: Description of the mk8s.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]] firewalls: Allow-list.
        :param pulumi.Input[_builtins.str] name: Name of the mk8s.
        :param pulumi.Input[_builtins.str] self_link: Full link to this resource. Can be referenced by other resources.
        :param pulumi.Input[Sequence[pulumi.Input['Mk8sStatusArgs']]] statuses: Status of the mk8s.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value map of resource tags.
        """
        if add_ons is not None:
            pulumi.set(__self__, "add_ons", add_ons)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if aws_provider is not None:
            pulumi.set(__self__, "aws_provider", aws_provider)
        if azure_provider is not None:
            pulumi.set(__self__, "azure_provider", azure_provider)
        if cpln_id is not None:
            pulumi.set(__self__, "cpln_id", cpln_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digital_ocean_provider is not None:
            pulumi.set(__self__, "digital_ocean_provider", digital_ocean_provider)
        if ephemeral_provider is not None:
            pulumi.set(__self__, "ephemeral_provider", ephemeral_provider)
        if firewalls is not None:
            pulumi.set(__self__, "firewalls", firewalls)
        if gcp_provider is not None:
            pulumi.set(__self__, "gcp_provider", gcp_provider)
        if generic_provider is not None:
            pulumi.set(__self__, "generic_provider", generic_provider)
        if hetzner_provider is not None:
            pulumi.set(__self__, "hetzner_provider", hetzner_provider)
        if lambdalabs_provider is not None:
            pulumi.set(__self__, "lambdalabs_provider", lambdalabs_provider)
        if linode_provider is not None:
            pulumi.set(__self__, "linode_provider", linode_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oblivus_provider is not None:
            pulumi.set(__self__, "oblivus_provider", oblivus_provider)
        if paperspace_provider is not None:
            pulumi.set(__self__, "paperspace_provider", paperspace_provider)
        if self_link is not None:
            pulumi.set(__self__, "self_link", self_link)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triton_provider is not None:
            pulumi.set(__self__, "triton_provider", triton_provider)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[pulumi.Input['Mk8sAddOnsArgs']]:
        return pulumi.get(self, "add_ons")

    @add_ons.setter
    def add_ons(self, value: Optional[pulumi.Input['Mk8sAddOnsArgs']]):
        pulumi.set(self, "add_ons", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The alias name of the Mk8s.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="awsProvider")
    def aws_provider(self) -> Optional[pulumi.Input['Mk8sAwsProviderArgs']]:
        return pulumi.get(self, "aws_provider")

    @aws_provider.setter
    def aws_provider(self, value: Optional[pulumi.Input['Mk8sAwsProviderArgs']]):
        pulumi.set(self, "aws_provider", value)

    @_builtins.property
    @pulumi.getter(name="azureProvider")
    def azure_provider(self) -> Optional[pulumi.Input['Mk8sAzureProviderArgs']]:
        return pulumi.get(self, "azure_provider")

    @azure_provider.setter
    def azure_provider(self, value: Optional[pulumi.Input['Mk8sAzureProviderArgs']]):
        pulumi.set(self, "azure_provider", value)

    @_builtins.property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID, in GUID format, of the mk8s.
        """
        return pulumi.get(self, "cpln_id")

    @cpln_id.setter
    def cpln_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cpln_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the mk8s.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="digitalOceanProvider")
    def digital_ocean_provider(self) -> Optional[pulumi.Input['Mk8sDigitalOceanProviderArgs']]:
        return pulumi.get(self, "digital_ocean_provider")

    @digital_ocean_provider.setter
    def digital_ocean_provider(self, value: Optional[pulumi.Input['Mk8sDigitalOceanProviderArgs']]):
        pulumi.set(self, "digital_ocean_provider", value)

    @_builtins.property
    @pulumi.getter(name="ephemeralProvider")
    def ephemeral_provider(self) -> Optional[pulumi.Input['Mk8sEphemeralProviderArgs']]:
        return pulumi.get(self, "ephemeral_provider")

    @ephemeral_provider.setter
    def ephemeral_provider(self, value: Optional[pulumi.Input['Mk8sEphemeralProviderArgs']]):
        pulumi.set(self, "ephemeral_provider", value)

    @_builtins.property
    @pulumi.getter
    def firewalls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]]]:
        """
        Allow-list.
        """
        return pulumi.get(self, "firewalls")

    @firewalls.setter
    def firewalls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sFirewallArgs']]]]):
        pulumi.set(self, "firewalls", value)

    @_builtins.property
    @pulumi.getter(name="gcpProvider")
    def gcp_provider(self) -> Optional[pulumi.Input['Mk8sGcpProviderArgs']]:
        return pulumi.get(self, "gcp_provider")

    @gcp_provider.setter
    def gcp_provider(self, value: Optional[pulumi.Input['Mk8sGcpProviderArgs']]):
        pulumi.set(self, "gcp_provider", value)

    @_builtins.property
    @pulumi.getter(name="genericProvider")
    def generic_provider(self) -> Optional[pulumi.Input['Mk8sGenericProviderArgs']]:
        return pulumi.get(self, "generic_provider")

    @generic_provider.setter
    def generic_provider(self, value: Optional[pulumi.Input['Mk8sGenericProviderArgs']]):
        pulumi.set(self, "generic_provider", value)

    @_builtins.property
    @pulumi.getter(name="hetznerProvider")
    def hetzner_provider(self) -> Optional[pulumi.Input['Mk8sHetznerProviderArgs']]:
        return pulumi.get(self, "hetzner_provider")

    @hetzner_provider.setter
    def hetzner_provider(self, value: Optional[pulumi.Input['Mk8sHetznerProviderArgs']]):
        pulumi.set(self, "hetzner_provider", value)

    @_builtins.property
    @pulumi.getter(name="lambdalabsProvider")
    def lambdalabs_provider(self) -> Optional[pulumi.Input['Mk8sLambdalabsProviderArgs']]:
        return pulumi.get(self, "lambdalabs_provider")

    @lambdalabs_provider.setter
    def lambdalabs_provider(self, value: Optional[pulumi.Input['Mk8sLambdalabsProviderArgs']]):
        pulumi.set(self, "lambdalabs_provider", value)

    @_builtins.property
    @pulumi.getter(name="linodeProvider")
    def linode_provider(self) -> Optional[pulumi.Input['Mk8sLinodeProviderArgs']]:
        return pulumi.get(self, "linode_provider")

    @linode_provider.setter
    def linode_provider(self, value: Optional[pulumi.Input['Mk8sLinodeProviderArgs']]):
        pulumi.set(self, "linode_provider", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the mk8s.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="oblivusProvider")
    def oblivus_provider(self) -> Optional[pulumi.Input['Mk8sOblivusProviderArgs']]:
        return pulumi.get(self, "oblivus_provider")

    @oblivus_provider.setter
    def oblivus_provider(self, value: Optional[pulumi.Input['Mk8sOblivusProviderArgs']]):
        pulumi.set(self, "oblivus_provider", value)

    @_builtins.property
    @pulumi.getter(name="paperspaceProvider")
    def paperspace_provider(self) -> Optional[pulumi.Input['Mk8sPaperspaceProviderArgs']]:
        return pulumi.get(self, "paperspace_provider")

    @paperspace_provider.setter
    def paperspace_provider(self, value: Optional[pulumi.Input['Mk8sPaperspaceProviderArgs']]):
        pulumi.set(self, "paperspace_provider", value)

    @_builtins.property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Full link to this resource. Can be referenced by other resources.
        """
        return pulumi.get(self, "self_link")

    @self_link.setter
    def self_link(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "self_link", value)

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusArgs']]]]:
        """
        Status of the mk8s.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tritonProvider")
    def triton_provider(self) -> Optional[pulumi.Input['Mk8sTritonProviderArgs']]:
        return pulumi.get(self, "triton_provider")

    @triton_provider.setter
    def triton_provider(self, value: Optional[pulumi.Input['Mk8sTritonProviderArgs']]):
        pulumi.set(self, "triton_provider", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("cpln:index/mk8s:Mk8s")
class Mk8s(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_ons: Optional[pulumi.Input[Union['Mk8sAddOnsArgs', 'Mk8sAddOnsArgsDict']]] = None,
                 aws_provider: Optional[pulumi.Input[Union['Mk8sAwsProviderArgs', 'Mk8sAwsProviderArgsDict']]] = None,
                 azure_provider: Optional[pulumi.Input[Union['Mk8sAzureProviderArgs', 'Mk8sAzureProviderArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digital_ocean_provider: Optional[pulumi.Input[Union['Mk8sDigitalOceanProviderArgs', 'Mk8sDigitalOceanProviderArgsDict']]] = None,
                 ephemeral_provider: Optional[pulumi.Input[Union['Mk8sEphemeralProviderArgs', 'Mk8sEphemeralProviderArgsDict']]] = None,
                 firewalls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Mk8sFirewallArgs', 'Mk8sFirewallArgsDict']]]]] = None,
                 gcp_provider: Optional[pulumi.Input[Union['Mk8sGcpProviderArgs', 'Mk8sGcpProviderArgsDict']]] = None,
                 generic_provider: Optional[pulumi.Input[Union['Mk8sGenericProviderArgs', 'Mk8sGenericProviderArgsDict']]] = None,
                 hetzner_provider: Optional[pulumi.Input[Union['Mk8sHetznerProviderArgs', 'Mk8sHetznerProviderArgsDict']]] = None,
                 lambdalabs_provider: Optional[pulumi.Input[Union['Mk8sLambdalabsProviderArgs', 'Mk8sLambdalabsProviderArgsDict']]] = None,
                 linode_provider: Optional[pulumi.Input[Union['Mk8sLinodeProviderArgs', 'Mk8sLinodeProviderArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 oblivus_provider: Optional[pulumi.Input[Union['Mk8sOblivusProviderArgs', 'Mk8sOblivusProviderArgsDict']]] = None,
                 paperspace_provider: Optional[pulumi.Input[Union['Mk8sPaperspaceProviderArgs', 'Mk8sPaperspaceProviderArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 triton_provider: Optional[pulumi.Input[Union['Mk8sTritonProviderArgs', 'Mk8sTritonProviderArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Mk8s resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the mk8s.
        :param pulumi.Input[Sequence[pulumi.Input[Union['Mk8sFirewallArgs', 'Mk8sFirewallArgsDict']]]] firewalls: Allow-list.
        :param pulumi.Input[_builtins.str] name: Name of the mk8s.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value map of resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Mk8sArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Mk8s resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param Mk8sArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Mk8sArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_ons: Optional[pulumi.Input[Union['Mk8sAddOnsArgs', 'Mk8sAddOnsArgsDict']]] = None,
                 aws_provider: Optional[pulumi.Input[Union['Mk8sAwsProviderArgs', 'Mk8sAwsProviderArgsDict']]] = None,
                 azure_provider: Optional[pulumi.Input[Union['Mk8sAzureProviderArgs', 'Mk8sAzureProviderArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 digital_ocean_provider: Optional[pulumi.Input[Union['Mk8sDigitalOceanProviderArgs', 'Mk8sDigitalOceanProviderArgsDict']]] = None,
                 ephemeral_provider: Optional[pulumi.Input[Union['Mk8sEphemeralProviderArgs', 'Mk8sEphemeralProviderArgsDict']]] = None,
                 firewalls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Mk8sFirewallArgs', 'Mk8sFirewallArgsDict']]]]] = None,
                 gcp_provider: Optional[pulumi.Input[Union['Mk8sGcpProviderArgs', 'Mk8sGcpProviderArgsDict']]] = None,
                 generic_provider: Optional[pulumi.Input[Union['Mk8sGenericProviderArgs', 'Mk8sGenericProviderArgsDict']]] = None,
                 hetzner_provider: Optional[pulumi.Input[Union['Mk8sHetznerProviderArgs', 'Mk8sHetznerProviderArgsDict']]] = None,
                 lambdalabs_provider: Optional[pulumi.Input[Union['Mk8sLambdalabsProviderArgs', 'Mk8sLambdalabsProviderArgsDict']]] = None,
                 linode_provider: Optional[pulumi.Input[Union['Mk8sLinodeProviderArgs', 'Mk8sLinodeProviderArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 oblivus_provider: Optional[pulumi.Input[Union['Mk8sOblivusProviderArgs', 'Mk8sOblivusProviderArgsDict']]] = None,
                 paperspace_provider: Optional[pulumi.Input[Union['Mk8sPaperspaceProviderArgs', 'Mk8sPaperspaceProviderArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 triton_provider: Optional[pulumi.Input[Union['Mk8sTritonProviderArgs', 'Mk8sTritonProviderArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Mk8sArgs.__new__(Mk8sArgs)

            __props__.__dict__["add_ons"] = add_ons
            __props__.__dict__["aws_provider"] = aws_provider
            __props__.__dict__["azure_provider"] = azure_provider
            __props__.__dict__["description"] = description
            __props__.__dict__["digital_ocean_provider"] = digital_ocean_provider
            __props__.__dict__["ephemeral_provider"] = ephemeral_provider
            __props__.__dict__["firewalls"] = firewalls
            __props__.__dict__["gcp_provider"] = gcp_provider
            __props__.__dict__["generic_provider"] = generic_provider
            __props__.__dict__["hetzner_provider"] = hetzner_provider
            __props__.__dict__["lambdalabs_provider"] = lambdalabs_provider
            __props__.__dict__["linode_provider"] = linode_provider
            __props__.__dict__["name"] = name
            __props__.__dict__["oblivus_provider"] = oblivus_provider
            __props__.__dict__["paperspace_provider"] = paperspace_provider
            __props__.__dict__["tags"] = tags
            __props__.__dict__["triton_provider"] = triton_provider
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["alias"] = None
            __props__.__dict__["cpln_id"] = None
            __props__.__dict__["self_link"] = None
            __props__.__dict__["statuses"] = None
        super(Mk8s, __self__).__init__(
            'cpln:index/mk8s:Mk8s',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_ons: Optional[pulumi.Input[Union['Mk8sAddOnsArgs', 'Mk8sAddOnsArgsDict']]] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            aws_provider: Optional[pulumi.Input[Union['Mk8sAwsProviderArgs', 'Mk8sAwsProviderArgsDict']]] = None,
            azure_provider: Optional[pulumi.Input[Union['Mk8sAzureProviderArgs', 'Mk8sAzureProviderArgsDict']]] = None,
            cpln_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            digital_ocean_provider: Optional[pulumi.Input[Union['Mk8sDigitalOceanProviderArgs', 'Mk8sDigitalOceanProviderArgsDict']]] = None,
            ephemeral_provider: Optional[pulumi.Input[Union['Mk8sEphemeralProviderArgs', 'Mk8sEphemeralProviderArgsDict']]] = None,
            firewalls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Mk8sFirewallArgs', 'Mk8sFirewallArgsDict']]]]] = None,
            gcp_provider: Optional[pulumi.Input[Union['Mk8sGcpProviderArgs', 'Mk8sGcpProviderArgsDict']]] = None,
            generic_provider: Optional[pulumi.Input[Union['Mk8sGenericProviderArgs', 'Mk8sGenericProviderArgsDict']]] = None,
            hetzner_provider: Optional[pulumi.Input[Union['Mk8sHetznerProviderArgs', 'Mk8sHetznerProviderArgsDict']]] = None,
            lambdalabs_provider: Optional[pulumi.Input[Union['Mk8sLambdalabsProviderArgs', 'Mk8sLambdalabsProviderArgsDict']]] = None,
            linode_provider: Optional[pulumi.Input[Union['Mk8sLinodeProviderArgs', 'Mk8sLinodeProviderArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            oblivus_provider: Optional[pulumi.Input[Union['Mk8sOblivusProviderArgs', 'Mk8sOblivusProviderArgsDict']]] = None,
            paperspace_provider: Optional[pulumi.Input[Union['Mk8sPaperspaceProviderArgs', 'Mk8sPaperspaceProviderArgsDict']]] = None,
            self_link: Optional[pulumi.Input[_builtins.str]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Mk8sStatusArgs', 'Mk8sStatusArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            triton_provider: Optional[pulumi.Input[Union['Mk8sTritonProviderArgs', 'Mk8sTritonProviderArgsDict']]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Mk8s':
        """
        Get an existing Mk8s resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: The alias name of the Mk8s.
        :param pulumi.Input[_builtins.str] cpln_id: The ID, in GUID format, of the mk8s.
        :param pulumi.Input[_builtins.str] description: Description of the mk8s.
        :param pulumi.Input[Sequence[pulumi.Input[Union['Mk8sFirewallArgs', 'Mk8sFirewallArgsDict']]]] firewalls: Allow-list.
        :param pulumi.Input[_builtins.str] name: Name of the mk8s.
        :param pulumi.Input[_builtins.str] self_link: Full link to this resource. Can be referenced by other resources.
        :param pulumi.Input[Sequence[pulumi.Input[Union['Mk8sStatusArgs', 'Mk8sStatusArgsDict']]]] statuses: Status of the mk8s.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Key-value map of resource tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Mk8sState.__new__(_Mk8sState)

        __props__.__dict__["add_ons"] = add_ons
        __props__.__dict__["alias"] = alias
        __props__.__dict__["aws_provider"] = aws_provider
        __props__.__dict__["azure_provider"] = azure_provider
        __props__.__dict__["cpln_id"] = cpln_id
        __props__.__dict__["description"] = description
        __props__.__dict__["digital_ocean_provider"] = digital_ocean_provider
        __props__.__dict__["ephemeral_provider"] = ephemeral_provider
        __props__.__dict__["firewalls"] = firewalls
        __props__.__dict__["gcp_provider"] = gcp_provider
        __props__.__dict__["generic_provider"] = generic_provider
        __props__.__dict__["hetzner_provider"] = hetzner_provider
        __props__.__dict__["lambdalabs_provider"] = lambdalabs_provider
        __props__.__dict__["linode_provider"] = linode_provider
        __props__.__dict__["name"] = name
        __props__.__dict__["oblivus_provider"] = oblivus_provider
        __props__.__dict__["paperspace_provider"] = paperspace_provider
        __props__.__dict__["self_link"] = self_link
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["tags"] = tags
        __props__.__dict__["triton_provider"] = triton_provider
        __props__.__dict__["version"] = version
        return Mk8s(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> pulumi.Output[Optional['outputs.Mk8sAddOns']]:
        return pulumi.get(self, "add_ons")

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        The alias name of the Mk8s.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="awsProvider")
    def aws_provider(self) -> pulumi.Output[Optional['outputs.Mk8sAwsProvider']]:
        return pulumi.get(self, "aws_provider")

    @_builtins.property
    @pulumi.getter(name="azureProvider")
    def azure_provider(self) -> pulumi.Output[Optional['outputs.Mk8sAzureProvider']]:
        return pulumi.get(self, "azure_provider")

    @_builtins.property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID, in GUID format, of the mk8s.
        """
        return pulumi.get(self, "cpln_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Description of the mk8s.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="digitalOceanProvider")
    def digital_ocean_provider(self) -> pulumi.Output[Optional['outputs.Mk8sDigitalOceanProvider']]:
        return pulumi.get(self, "digital_ocean_provider")

    @_builtins.property
    @pulumi.getter(name="ephemeralProvider")
    def ephemeral_provider(self) -> pulumi.Output[Optional['outputs.Mk8sEphemeralProvider']]:
        return pulumi.get(self, "ephemeral_provider")

    @_builtins.property
    @pulumi.getter
    def firewalls(self) -> pulumi.Output[Optional[Sequence['outputs.Mk8sFirewall']]]:
        """
        Allow-list.
        """
        return pulumi.get(self, "firewalls")

    @_builtins.property
    @pulumi.getter(name="gcpProvider")
    def gcp_provider(self) -> pulumi.Output[Optional['outputs.Mk8sGcpProvider']]:
        return pulumi.get(self, "gcp_provider")

    @_builtins.property
    @pulumi.getter(name="genericProvider")
    def generic_provider(self) -> pulumi.Output[Optional['outputs.Mk8sGenericProvider']]:
        return pulumi.get(self, "generic_provider")

    @_builtins.property
    @pulumi.getter(name="hetznerProvider")
    def hetzner_provider(self) -> pulumi.Output[Optional['outputs.Mk8sHetznerProvider']]:
        return pulumi.get(self, "hetzner_provider")

    @_builtins.property
    @pulumi.getter(name="lambdalabsProvider")
    def lambdalabs_provider(self) -> pulumi.Output[Optional['outputs.Mk8sLambdalabsProvider']]:
        return pulumi.get(self, "lambdalabs_provider")

    @_builtins.property
    @pulumi.getter(name="linodeProvider")
    def linode_provider(self) -> pulumi.Output[Optional['outputs.Mk8sLinodeProvider']]:
        return pulumi.get(self, "linode_provider")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the mk8s.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="oblivusProvider")
    def oblivus_provider(self) -> pulumi.Output[Optional['outputs.Mk8sOblivusProvider']]:
        return pulumi.get(self, "oblivus_provider")

    @_builtins.property
    @pulumi.getter(name="paperspaceProvider")
    def paperspace_provider(self) -> pulumi.Output[Optional['outputs.Mk8sPaperspaceProvider']]:
        return pulumi.get(self, "paperspace_provider")

    @_builtins.property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> pulumi.Output[_builtins.str]:
        """
        Full link to this resource. Can be referenced by other resources.
        """
        return pulumi.get(self, "self_link")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.Mk8sStatus']]:
        """
        Status of the mk8s.
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tritonProvider")
    def triton_provider(self) -> pulumi.Output[Optional['outputs.Mk8sTritonProvider']]:
        return pulumi.get(self, "triton_provider")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version")

