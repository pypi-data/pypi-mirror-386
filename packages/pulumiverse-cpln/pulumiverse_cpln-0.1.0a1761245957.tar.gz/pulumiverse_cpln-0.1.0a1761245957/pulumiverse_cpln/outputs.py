# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'CloudAccountAws',
    'CloudAccountAzure',
    'CloudAccountGcp',
    'CloudAccountNgs',
    'DomainRouteHeaders',
    'DomainRouteHeadersRequest',
    'DomainSpec',
    'DomainSpecPort',
    'DomainSpecPortCors',
    'DomainSpecPortCorsAllowOrigin',
    'DomainSpecPortTls',
    'DomainSpecPortTlsClientCertificate',
    'DomainSpecPortTlsServerCertificate',
    'DomainStatus',
    'DomainStatusDnsConfig',
    'DomainStatusEndpoint',
    'DomainStatusLocation',
    'GroupIdentityMatcher',
    'GroupMemberQuery',
    'GroupMemberQuerySpec',
    'GroupMemberQuerySpecTerm',
    'GvcControlplaneTracing',
    'GvcKeda',
    'GvcLightstepTracing',
    'GvcLoadBalancer',
    'GvcLoadBalancerMultiZone',
    'GvcLoadBalancerRedirect',
    'GvcLoadBalancerRedirectClass',
    'GvcOtelTracing',
    'GvcSidecar',
    'IdentityAwsAccessPolicy',
    'IdentityAwsAccessPolicyTrustPolicy',
    'IdentityAzureAccessPolicy',
    'IdentityAzureAccessPolicyRoleAssignment',
    'IdentityGcpAccessPolicy',
    'IdentityGcpAccessPolicyBinding',
    'IdentityNativeNetworkResource',
    'IdentityNativeNetworkResourceAwsPrivateLink',
    'IdentityNativeNetworkResourceGcpServiceConnect',
    'IdentityNetworkResource',
    'IdentityNgsAccessPolicy',
    'IdentityNgsAccessPolicyPub',
    'IdentityNgsAccessPolicyResp',
    'IdentityNgsAccessPolicySub',
    'IpSetLocation',
    'IpSetStatus',
    'IpSetStatusIpAddress',
    'LocationGeo',
    'Mk8sAddOns',
    'Mk8sAddOnsAwsEcr',
    'Mk8sAddOnsAwsEfs',
    'Mk8sAddOnsAwsElb',
    'Mk8sAddOnsAzureAcr',
    'Mk8sAddOnsAzureWorkloadIdentity',
    'Mk8sAddOnsByok',
    'Mk8sAddOnsByokConfig',
    'Mk8sAddOnsByokConfigActuator',
    'Mk8sAddOnsByokConfigCommon',
    'Mk8sAddOnsByokConfigCommonPdb',
    'Mk8sAddOnsByokConfigIngress',
    'Mk8sAddOnsByokConfigInternalDns',
    'Mk8sAddOnsByokConfigIstio',
    'Mk8sAddOnsByokConfigIstioIngressGateway',
    'Mk8sAddOnsByokConfigIstioIstiod',
    'Mk8sAddOnsByokConfigIstioSidecar',
    'Mk8sAddOnsByokConfigLogSplitter',
    'Mk8sAddOnsByokConfigLonghorn',
    'Mk8sAddOnsByokConfigMiddlebox',
    'Mk8sAddOnsByokConfigMonitoring',
    'Mk8sAddOnsByokConfigMonitoringKubeStateMetrics',
    'Mk8sAddOnsByokConfigMonitoringPrometheus',
    'Mk8sAddOnsByokConfigMonitoringPrometheusMain',
    'Mk8sAddOnsByokConfigRedis',
    'Mk8sAddOnsByokConfigRedisHa',
    'Mk8sAddOnsByokConfigRedisSentinel',
    'Mk8sAddOnsByokConfigTempoAgent',
    'Mk8sAddOnsLogs',
    'Mk8sAddOnsMetrics',
    'Mk8sAddOnsMetricsScrapeAnnotated',
    'Mk8sAddOnsNvidia',
    'Mk8sAddOnsRegistryMirror',
    'Mk8sAddOnsRegistryMirrorMirror',
    'Mk8sAwsProvider',
    'Mk8sAwsProviderAutoscaler',
    'Mk8sAwsProviderDeployRoleChain',
    'Mk8sAwsProviderImage',
    'Mk8sAwsProviderNetworking',
    'Mk8sAwsProviderNodePool',
    'Mk8sAwsProviderNodePoolOverrideImage',
    'Mk8sAwsProviderNodePoolTaint',
    'Mk8sAzureProvider',
    'Mk8sAzureProviderAutoscaler',
    'Mk8sAzureProviderImage',
    'Mk8sAzureProviderImageReference',
    'Mk8sAzureProviderNetworking',
    'Mk8sAzureProviderNodePool',
    'Mk8sAzureProviderNodePoolOverrideImage',
    'Mk8sAzureProviderNodePoolOverrideImageReference',
    'Mk8sAzureProviderNodePoolTaint',
    'Mk8sDigitalOceanProvider',
    'Mk8sDigitalOceanProviderAutoscaler',
    'Mk8sDigitalOceanProviderNetworking',
    'Mk8sDigitalOceanProviderNodePool',
    'Mk8sDigitalOceanProviderNodePoolTaint',
    'Mk8sEphemeralProvider',
    'Mk8sEphemeralProviderNodePool',
    'Mk8sEphemeralProviderNodePoolTaint',
    'Mk8sFirewall',
    'Mk8sGcpProvider',
    'Mk8sGcpProviderAutoscaler',
    'Mk8sGcpProviderImage',
    'Mk8sGcpProviderNetworking',
    'Mk8sGcpProviderNodePool',
    'Mk8sGcpProviderNodePoolOverrideImage',
    'Mk8sGcpProviderNodePoolTaint',
    'Mk8sGenericProvider',
    'Mk8sGenericProviderNetworking',
    'Mk8sGenericProviderNodePool',
    'Mk8sGenericProviderNodePoolTaint',
    'Mk8sHetznerProvider',
    'Mk8sHetznerProviderAutoscaler',
    'Mk8sHetznerProviderDedicatedServerNodePool',
    'Mk8sHetznerProviderDedicatedServerNodePoolTaint',
    'Mk8sHetznerProviderNetworking',
    'Mk8sHetznerProviderNodePool',
    'Mk8sHetznerProviderNodePoolTaint',
    'Mk8sLambdalabsProvider',
    'Mk8sLambdalabsProviderAutoscaler',
    'Mk8sLambdalabsProviderNodePool',
    'Mk8sLambdalabsProviderNodePoolTaint',
    'Mk8sLambdalabsProviderUnmanagedNodePool',
    'Mk8sLambdalabsProviderUnmanagedNodePoolTaint',
    'Mk8sLinodeProvider',
    'Mk8sLinodeProviderAutoscaler',
    'Mk8sLinodeProviderNetworking',
    'Mk8sLinodeProviderNodePool',
    'Mk8sLinodeProviderNodePoolTaint',
    'Mk8sOblivusProvider',
    'Mk8sOblivusProviderAutoscaler',
    'Mk8sOblivusProviderNodePool',
    'Mk8sOblivusProviderNodePoolTaint',
    'Mk8sOblivusProviderUnmanagedNodePool',
    'Mk8sOblivusProviderUnmanagedNodePoolTaint',
    'Mk8sPaperspaceProvider',
    'Mk8sPaperspaceProviderAutoscaler',
    'Mk8sPaperspaceProviderNodePool',
    'Mk8sPaperspaceProviderNodePoolTaint',
    'Mk8sPaperspaceProviderUnmanagedNodePool',
    'Mk8sPaperspaceProviderUnmanagedNodePoolTaint',
    'Mk8sStatus',
    'Mk8sStatusAddOn',
    'Mk8sStatusAddOnAwsEcr',
    'Mk8sStatusAddOnAwsEf',
    'Mk8sStatusAddOnAwsElb',
    'Mk8sStatusAddOnAwsWorkloadIdentity',
    'Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig',
    'Mk8sStatusAddOnDashboard',
    'Mk8sStatusAddOnLog',
    'Mk8sStatusAddOnMetric',
    'Mk8sTritonProvider',
    'Mk8sTritonProviderAutoscaler',
    'Mk8sTritonProviderConnection',
    'Mk8sTritonProviderLoadBalancer',
    'Mk8sTritonProviderLoadBalancerGateway',
    'Mk8sTritonProviderLoadBalancerManual',
    'Mk8sTritonProviderLoadBalancerManualLogging',
    'Mk8sTritonProviderLoadBalancerNone',
    'Mk8sTritonProviderNetworking',
    'Mk8sTritonProviderNodePool',
    'Mk8sTritonProviderNodePoolTaint',
    'OrgAuthConfig',
    'OrgLoggingCloudWatchLogging',
    'OrgLoggingCoralogixLogging',
    'OrgLoggingDatadogLogging',
    'OrgLoggingElasticLogging',
    'OrgLoggingElasticLoggingAws',
    'OrgLoggingElasticLoggingElasticCloud',
    'OrgLoggingElasticLoggingGeneric',
    'OrgLoggingFluentdLogging',
    'OrgLoggingLogzioLogging',
    'OrgLoggingS3Logging',
    'OrgLoggingStackdriverLogging',
    'OrgLoggingSyslogLogging',
    'OrgObservability',
    'OrgSecurity',
    'OrgSecurityThreatDetection',
    'OrgSecurityThreatDetectionSyslog',
    'OrgStatus',
    'OrgTracingControlplaneTracing',
    'OrgTracingLightstepTracing',
    'OrgTracingOtelTracing',
    'PolicyBinding',
    'PolicyTargetQuery',
    'PolicyTargetQuerySpec',
    'PolicyTargetQuerySpecTerm',
    'SecretAws',
    'SecretAzureConnector',
    'SecretEcr',
    'SecretKeypair',
    'SecretNatsAccount',
    'SecretOpaque',
    'SecretTls',
    'SecretUserpass',
    'VolumeSetAutoscaling',
    'VolumeSetCustomEncryption',
    'VolumeSetCustomEncryptionRegions',
    'VolumeSetMountOptions',
    'VolumeSetMountOptionsResources',
    'VolumeSetSnapshots',
    'VolumeSetStatus',
    'WorkloadContainer',
    'WorkloadContainerGpuCustom',
    'WorkloadContainerGpuNvidia',
    'WorkloadContainerLifecycle',
    'WorkloadContainerLifecyclePostStart',
    'WorkloadContainerLifecyclePostStartExec',
    'WorkloadContainerLifecyclePreStop',
    'WorkloadContainerLifecyclePreStopExec',
    'WorkloadContainerLivenessProbe',
    'WorkloadContainerLivenessProbeExec',
    'WorkloadContainerLivenessProbeGrpc',
    'WorkloadContainerLivenessProbeHttpGet',
    'WorkloadContainerLivenessProbeTcpSocket',
    'WorkloadContainerMetrics',
    'WorkloadContainerPort',
    'WorkloadContainerReadinessProbe',
    'WorkloadContainerReadinessProbeExec',
    'WorkloadContainerReadinessProbeGrpc',
    'WorkloadContainerReadinessProbeHttpGet',
    'WorkloadContainerReadinessProbeTcpSocket',
    'WorkloadContainerVolume',
    'WorkloadFirewallSpec',
    'WorkloadFirewallSpecExternal',
    'WorkloadFirewallSpecExternalHttp',
    'WorkloadFirewallSpecExternalHttpInboundHeaderFilter',
    'WorkloadFirewallSpecExternalOutboundAllowPort',
    'WorkloadFirewallSpecInternal',
    'WorkloadJob',
    'WorkloadLoadBalancer',
    'WorkloadLoadBalancerDirect',
    'WorkloadLoadBalancerDirectPort',
    'WorkloadLoadBalancerGeoLocation',
    'WorkloadLoadBalancerGeoLocationHeaders',
    'WorkloadLocalOption',
    'WorkloadLocalOptionAutoscaling',
    'WorkloadLocalOptionAutoscalingKeda',
    'WorkloadLocalOptionAutoscalingKedaAdvanced',
    'WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers',
    'WorkloadLocalOptionAutoscalingKedaTrigger',
    'WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRef',
    'WorkloadLocalOptionAutoscalingMulti',
    'WorkloadLocalOptionMultiZone',
    'WorkloadOptions',
    'WorkloadOptionsAutoscaling',
    'WorkloadOptionsAutoscalingKeda',
    'WorkloadOptionsAutoscalingKedaAdvanced',
    'WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers',
    'WorkloadOptionsAutoscalingKedaTrigger',
    'WorkloadOptionsAutoscalingKedaTriggerAuthenticationRef',
    'WorkloadOptionsAutoscalingMulti',
    'WorkloadOptionsMultiZone',
    'WorkloadRequestRetryPolicy',
    'WorkloadRolloutOption',
    'WorkloadSecurityOptions',
    'WorkloadSidecar',
    'WorkloadStatus',
    'WorkloadStatusHealthCheck',
    'WorkloadStatusLoadBalancer',
    'WorkloadStatusResolvedImage',
    'WorkloadStatusResolvedImageImage',
    'WorkloadStatusResolvedImageImageManifest',
    'GetGvcControlplaneTracingResult',
    'GetGvcKedaResult',
    'GetGvcLightstepTracingResult',
    'GetGvcLoadBalancerResult',
    'GetGvcLoadBalancerMultiZoneResult',
    'GetGvcLoadBalancerRedirectResult',
    'GetGvcLoadBalancerRedirectClassResult',
    'GetGvcOtelTracingResult',
    'GetGvcSidecarResult',
    'GetImageManifestResult',
    'GetImageManifestConfigResult',
    'GetImageManifestLayerResult',
    'GetImagesImageResult',
    'GetImagesImageManifestResult',
    'GetImagesImageManifestConfigResult',
    'GetImagesImageManifestLayerResult',
    'GetImagesQueryResult',
    'GetImagesQuerySpecResult',
    'GetImagesQuerySpecTermResult',
    'GetLocationGeoResult',
    'GetLocationsLocationResult',
    'GetLocationsLocationGeoResult',
    'GetOrgAuthConfigResult',
    'GetOrgObservabilityResult',
    'GetOrgSecurityResult',
    'GetOrgSecurityThreatDetectionResult',
    'GetOrgSecurityThreatDetectionSyslogResult',
    'GetOrgStatusResult',
    'GetSecretAwResult',
    'GetSecretAzureConnectorResult',
    'GetSecretEcrResult',
    'GetSecretKeypairResult',
    'GetSecretNatsAccountResult',
    'GetSecretOpaqueResult',
    'GetSecretTlResult',
    'GetSecretUserpassResult',
    'GetWorkloadContainerResult',
    'GetWorkloadContainerGpuCustomResult',
    'GetWorkloadContainerGpuNvidiaResult',
    'GetWorkloadContainerLifecycleResult',
    'GetWorkloadContainerLifecyclePostStartResult',
    'GetWorkloadContainerLifecyclePostStartExecResult',
    'GetWorkloadContainerLifecyclePreStopResult',
    'GetWorkloadContainerLifecyclePreStopExecResult',
    'GetWorkloadContainerLivenessProbeResult',
    'GetWorkloadContainerLivenessProbeExecResult',
    'GetWorkloadContainerLivenessProbeGrpcResult',
    'GetWorkloadContainerLivenessProbeHttpGetResult',
    'GetWorkloadContainerLivenessProbeTcpSocketResult',
    'GetWorkloadContainerMetricResult',
    'GetWorkloadContainerPortResult',
    'GetWorkloadContainerReadinessProbeResult',
    'GetWorkloadContainerReadinessProbeExecResult',
    'GetWorkloadContainerReadinessProbeGrpcResult',
    'GetWorkloadContainerReadinessProbeHttpGetResult',
    'GetWorkloadContainerReadinessProbeTcpSocketResult',
    'GetWorkloadContainerVolumeResult',
    'GetWorkloadFirewallSpecResult',
    'GetWorkloadFirewallSpecExternalResult',
    'GetWorkloadFirewallSpecExternalHttpResult',
    'GetWorkloadFirewallSpecExternalHttpInboundHeaderFilterResult',
    'GetWorkloadFirewallSpecExternalOutboundAllowPortResult',
    'GetWorkloadFirewallSpecInternalResult',
    'GetWorkloadJobResult',
    'GetWorkloadLoadBalancerResult',
    'GetWorkloadLoadBalancerDirectResult',
    'GetWorkloadLoadBalancerDirectPortResult',
    'GetWorkloadLoadBalancerGeoLocationResult',
    'GetWorkloadLoadBalancerGeoLocationHeaderResult',
    'GetWorkloadLocalOptionResult',
    'GetWorkloadLocalOptionAutoscalingResult',
    'GetWorkloadLocalOptionAutoscalingKedaResult',
    'GetWorkloadLocalOptionAutoscalingKedaAdvancedResult',
    'GetWorkloadLocalOptionAutoscalingKedaAdvancedScalingModifierResult',
    'GetWorkloadLocalOptionAutoscalingKedaTriggerResult',
    'GetWorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefResult',
    'GetWorkloadLocalOptionAutoscalingMultiResult',
    'GetWorkloadLocalOptionMultiZoneResult',
    'GetWorkloadOptionResult',
    'GetWorkloadOptionAutoscalingResult',
    'GetWorkloadOptionAutoscalingKedaResult',
    'GetWorkloadOptionAutoscalingKedaAdvancedResult',
    'GetWorkloadOptionAutoscalingKedaAdvancedScalingModifierResult',
    'GetWorkloadOptionAutoscalingKedaTriggerResult',
    'GetWorkloadOptionAutoscalingKedaTriggerAuthenticationRefResult',
    'GetWorkloadOptionAutoscalingMultiResult',
    'GetWorkloadOptionMultiZoneResult',
    'GetWorkloadRequestRetryPolicyResult',
    'GetWorkloadRolloutOptionResult',
    'GetWorkloadSecurityOptionResult',
    'GetWorkloadSidecarResult',
    'GetWorkloadStatusResult',
    'GetWorkloadStatusHealthCheckResult',
    'GetWorkloadStatusLoadBalancerResult',
    'GetWorkloadStatusResolvedImageResult',
    'GetWorkloadStatusResolvedImageImageResult',
    'GetWorkloadStatusResolvedImageImageManifestResult',
]

@pulumi.output_type
class CloudAccountAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAccountAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAccountAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAccountAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str role_arn: Amazon Resource Name (ARN) Role.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Amazon Resource Name (ARN) Role.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class CloudAccountAzure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretLink":
            suggest = "secret_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAccountAzure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAccountAzure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAccountAzure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_link: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_link: Full link to an Azure secret. (e.g., /org/ORG_NAME/secret/AZURE_SECRET).
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @_builtins.property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[_builtins.str]:
        """
        Full link to an Azure secret. (e.g., /org/ORG_NAME/secret/AZURE_SECRET).
        """
        return pulumi.get(self, "secret_link")


@pulumi.output_type
class CloudAccountGcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAccountGcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAccountGcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAccountGcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str project_id: GCP project ID. Obtained from the GCP cloud console.
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        GCP project ID. Obtained from the GCP cloud console.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class CloudAccountNgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretLink":
            suggest = "secret_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAccountNgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAccountNgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAccountNgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_link: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_link: Full link to a NATS Account Secret secret. (e.g., /org/ORG_NAME/secret/NATS_ACCOUNT_SECRET).
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @_builtins.property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[_builtins.str]:
        """
        Full link to a NATS Account Secret secret. (e.g., /org/ORG_NAME/secret/NATS_ACCOUNT_SECRET).
        """
        return pulumi.get(self, "secret_link")


@pulumi.output_type
class DomainRouteHeaders(dict):
    def __init__(__self__, *,
                 request: Optional['outputs.DomainRouteHeadersRequest'] = None):
        """
        :param 'DomainRouteHeadersRequestArgs' request: Manipulates HTTP headers.
        """
        if request is not None:
            pulumi.set(__self__, "request", request)

    @_builtins.property
    @pulumi.getter
    def request(self) -> Optional['outputs.DomainRouteHeadersRequest']:
        """
        Manipulates HTTP headers.
        """
        return pulumi.get(self, "request")


@pulumi.output_type
class DomainRouteHeadersRequest(dict):
    def __init__(__self__, *,
                 set: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Mapping[str, _builtins.str] set: Sets or overrides headers to all http requests for this route.
        """
        if set is not None:
            pulumi.set(__self__, "set", set)

    @_builtins.property
    @pulumi.getter
    def set(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Sets or overrides headers to all http requests for this route.
        """
        return pulumi.get(self, "set")


@pulumi.output_type
class DomainSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptAllHosts":
            suggest = "accept_all_hosts"
        elif key == "acceptAllSubdomains":
            suggest = "accept_all_subdomains"
        elif key == "certChallengeType":
            suggest = "cert_challenge_type"
        elif key == "dnsMode":
            suggest = "dns_mode"
        elif key == "gvcLink":
            suggest = "gvc_link"
        elif key == "workloadLink":
            suggest = "workload_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_all_hosts: Optional[_builtins.bool] = None,
                 accept_all_subdomains: Optional[_builtins.bool] = None,
                 cert_challenge_type: Optional[_builtins.str] = None,
                 dns_mode: Optional[_builtins.str] = None,
                 gvc_link: Optional[_builtins.str] = None,
                 ports: Optional[Sequence['outputs.DomainSpecPort']] = None,
                 workload_link: Optional[_builtins.str] = None):
        """
        :param _builtins.bool accept_all_hosts: Allows domain to accept wildcards. The associated GVC must have dedicated load balancing enabled.
        :param _builtins.bool accept_all_subdomains: Accept all subdomains will accept any host that is a sub domain of the domain so *.$DOMAIN
        :param _builtins.str cert_challenge_type: Defines the method used to prove domain ownership for certificate issuance.
        :param _builtins.str dns_mode: In `cname` dnsMode, Control Plane will configure workloads to accept traffic for the domain but will not manage DNS records for the domain. End users must configure CNAME records in their own DNS pointed to the canonical workload endpoint. Currently `cname` dnsMode requires that a TLS server certificate be configured when subdomain based routing is used. In `ns` dnsMode, Control Plane will manage the subdomains and create all necessary DNS records. End users configure NS records to forward DNS requests to the Control Plane managed DNS servers. Valid values: `cname`, `ns`. Default: `cname`.
        :param _builtins.str gvc_link: This value is set to a target GVC (using a full link) for use by subdomain based routing. Each workload in the GVC will receive a subdomain in the form ${workload.name}.${domain.name}. **Do not include if path based routing is used.**
        :param Sequence['DomainSpecPortArgs'] ports: Domain port specifications.
        :param _builtins.str workload_link: Creates a unique subdomain for each replica of a stateful workload, enabling direct access to individual instances.
        """
        if accept_all_hosts is not None:
            pulumi.set(__self__, "accept_all_hosts", accept_all_hosts)
        if accept_all_subdomains is not None:
            pulumi.set(__self__, "accept_all_subdomains", accept_all_subdomains)
        if cert_challenge_type is not None:
            pulumi.set(__self__, "cert_challenge_type", cert_challenge_type)
        if dns_mode is not None:
            pulumi.set(__self__, "dns_mode", dns_mode)
        if gvc_link is not None:
            pulumi.set(__self__, "gvc_link", gvc_link)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if workload_link is not None:
            pulumi.set(__self__, "workload_link", workload_link)

    @_builtins.property
    @pulumi.getter(name="acceptAllHosts")
    def accept_all_hosts(self) -> Optional[_builtins.bool]:
        """
        Allows domain to accept wildcards. The associated GVC must have dedicated load balancing enabled.
        """
        return pulumi.get(self, "accept_all_hosts")

    @_builtins.property
    @pulumi.getter(name="acceptAllSubdomains")
    def accept_all_subdomains(self) -> Optional[_builtins.bool]:
        """
        Accept all subdomains will accept any host that is a sub domain of the domain so *.$DOMAIN
        """
        return pulumi.get(self, "accept_all_subdomains")

    @_builtins.property
    @pulumi.getter(name="certChallengeType")
    def cert_challenge_type(self) -> Optional[_builtins.str]:
        """
        Defines the method used to prove domain ownership for certificate issuance.
        """
        return pulumi.get(self, "cert_challenge_type")

    @_builtins.property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[_builtins.str]:
        """
        In `cname` dnsMode, Control Plane will configure workloads to accept traffic for the domain but will not manage DNS records for the domain. End users must configure CNAME records in their own DNS pointed to the canonical workload endpoint. Currently `cname` dnsMode requires that a TLS server certificate be configured when subdomain based routing is used. In `ns` dnsMode, Control Plane will manage the subdomains and create all necessary DNS records. End users configure NS records to forward DNS requests to the Control Plane managed DNS servers. Valid values: `cname`, `ns`. Default: `cname`.
        """
        return pulumi.get(self, "dns_mode")

    @_builtins.property
    @pulumi.getter(name="gvcLink")
    def gvc_link(self) -> Optional[_builtins.str]:
        """
        This value is set to a target GVC (using a full link) for use by subdomain based routing. Each workload in the GVC will receive a subdomain in the form ${workload.name}.${domain.name}. **Do not include if path based routing is used.**
        """
        return pulumi.get(self, "gvc_link")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.DomainSpecPort']]:
        """
        Domain port specifications.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="workloadLink")
    def workload_link(self) -> Optional[_builtins.str]:
        """
        Creates a unique subdomain for each replica of a stateful workload, enabling direct access to individual instances.
        """
        return pulumi.get(self, "workload_link")


@pulumi.output_type
class DomainSpecPort(dict):
    def __init__(__self__, *,
                 cors: Optional['outputs.DomainSpecPortCors'] = None,
                 number: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 tls: Optional['outputs.DomainSpecPortTls'] = None):
        """
        :param 'DomainSpecPortCorsArgs' cors: A security feature implemented by web browsers to allow resources on a web page to be requested from another domain outside the domain from which the resource originated.
        :param _builtins.int number: Sets or overrides headers to all http requests for this route.
        :param _builtins.str protocol: Allowed protocol. Valid values: `http`, `http2`, `tcp`. Default: `http2`.
        :param 'DomainSpecPortTlsArgs' tls: Used for TLS connections for this Domain. End users are responsible for certificate updates.
        """
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @_builtins.property
    @pulumi.getter
    def cors(self) -> Optional['outputs.DomainSpecPortCors']:
        """
        A security feature implemented by web browsers to allow resources on a web page to be requested from another domain outside the domain from which the resource originated.
        """
        return pulumi.get(self, "cors")

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[_builtins.int]:
        """
        Sets or overrides headers to all http requests for this route.
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Allowed protocol. Valid values: `http`, `http2`, `tcp`. Default: `http2`.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def tls(self) -> Optional['outputs.DomainSpecPortTls']:
        """
        Used for TLS connections for this Domain. End users are responsible for certificate updates.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class DomainSpecPortCors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowCredentials":
            suggest = "allow_credentials"
        elif key == "allowHeaders":
            suggest = "allow_headers"
        elif key == "allowMethods":
            suggest = "allow_methods"
        elif key == "allowOrigins":
            suggest = "allow_origins"
        elif key == "exposeHeaders":
            suggest = "expose_headers"
        elif key == "maxAge":
            suggest = "max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSpecPortCors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSpecPortCors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSpecPortCors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_credentials: Optional[_builtins.bool] = None,
                 allow_headers: Optional[Sequence[_builtins.str]] = None,
                 allow_methods: Optional[Sequence[_builtins.str]] = None,
                 allow_origins: Optional[Sequence['outputs.DomainSpecPortCorsAllowOrigin']] = None,
                 expose_headers: Optional[Sequence[_builtins.str]] = None,
                 max_age: Optional[_builtins.str] = None):
        """
        :param _builtins.bool allow_credentials: Determines whether the client-side code (typically running in a web browser) is allowed to include credentials (such as cookies, HTTP authentication, or client-side SSL certificates) in cross-origin requests.
        :param Sequence[_builtins.str] allow_headers: Specifies the custom HTTP headers that are allowed in a cross-origin request to a specific resource.
        :param Sequence[_builtins.str] allow_methods: Specifies the HTTP methods (such as `GET`, `POST`, `PUT`, `DELETE`, etc.) that are allowed for a cross-origin request to a specific resource.
        :param Sequence['DomainSpecPortCorsAllowOriginArgs'] allow_origins: Determines which origins are allowed to access a particular resource on a server from a web browser.
        :param Sequence[_builtins.str] expose_headers: The HTTP headers that a server allows to be exposed to the client in response to a cross-origin request. These headers provide additional information about the server's capabilities or requirements, aiding in proper handling of the request by the client's browser or application.
        :param _builtins.str max_age: Maximum amount of time that a preflight request result can be cached by the client browser. Input is expected as a duration string (i.e, 24h, 20m, etc.).
        """
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_methods is not None:
            pulumi.set(__self__, "allow_methods", allow_methods)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)

    @_builtins.property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[_builtins.bool]:
        """
        Determines whether the client-side code (typically running in a web browser) is allowed to include credentials (such as cookies, HTTP authentication, or client-side SSL certificates) in cross-origin requests.
        """
        return pulumi.get(self, "allow_credentials")

    @_builtins.property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the custom HTTP headers that are allowed in a cross-origin request to a specific resource.
        """
        return pulumi.get(self, "allow_headers")

    @_builtins.property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the HTTP methods (such as `GET`, `POST`, `PUT`, `DELETE`, etc.) that are allowed for a cross-origin request to a specific resource.
        """
        return pulumi.get(self, "allow_methods")

    @_builtins.property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[Sequence['outputs.DomainSpecPortCorsAllowOrigin']]:
        """
        Determines which origins are allowed to access a particular resource on a server from a web browser.
        """
        return pulumi.get(self, "allow_origins")

    @_builtins.property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[_builtins.str]]:
        """
        The HTTP headers that a server allows to be exposed to the client in response to a cross-origin request. These headers provide additional information about the server's capabilities or requirements, aiding in proper handling of the request by the client's browser or application.
        """
        return pulumi.get(self, "expose_headers")

    @_builtins.property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[_builtins.str]:
        """
        Maximum amount of time that a preflight request result can be cached by the client browser. Input is expected as a duration string (i.e, 24h, 20m, etc.).
        """
        return pulumi.get(self, "max_age")


@pulumi.output_type
class DomainSpecPortCorsAllowOrigin(dict):
    def __init__(__self__, *,
                 exact: Optional[_builtins.str] = None,
                 regex: Optional[_builtins.str] = None):
        """
        :param _builtins.str exact: Value of allowed origin.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def exact(self) -> Optional[_builtins.str]:
        """
        Value of allowed origin.
        """
        return pulumi.get(self, "exact")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class DomainSpecPortTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cipherSuites":
            suggest = "cipher_suites"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "minProtocolVersion":
            suggest = "min_protocol_version"
        elif key == "serverCertificate":
            suggest = "server_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSpecPortTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSpecPortTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSpecPortTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cipher_suites: Optional[Sequence[_builtins.str]] = None,
                 client_certificate: Optional['outputs.DomainSpecPortTlsClientCertificate'] = None,
                 min_protocol_version: Optional[_builtins.str] = None,
                 server_certificate: Optional['outputs.DomainSpecPortTlsServerCertificate'] = None):
        """
        :param Sequence[_builtins.str] cipher_suites: Allowed cipher suites. Refer to the [Domain Reference](https://docs.controlplane.com/reference/domain#cipher-suites) for details.
        :param 'DomainSpecPortTlsClientCertificateArgs' client_certificate: The certificate authority PEM, stored as a TLS Secret, used to verify the authority of the client certificate. The only verification performed checks that the CN of the PEM matches the Domain (i.e., CN=*.DOMAIN).
        :param _builtins.str min_protocol_version: Minimum TLS version to accept. Minimum is `1.0`. Default: `1.2`.
        :param 'DomainSpecPortTlsServerCertificateArgs' server_certificate: Configure an optional custom server certificate for the domain. When the port number is 443 and this is not supplied, a certificate is provisioned automatically.
        """
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if min_protocol_version is not None:
            pulumi.set(__self__, "min_protocol_version", min_protocol_version)
        if server_certificate is not None:
            pulumi.set(__self__, "server_certificate", server_certificate)

    @_builtins.property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[Sequence[_builtins.str]]:
        """
        Allowed cipher suites. Refer to the [Domain Reference](https://docs.controlplane.com/reference/domain#cipher-suites) for details.
        """
        return pulumi.get(self, "cipher_suites")

    @_builtins.property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.DomainSpecPortTlsClientCertificate']:
        """
        The certificate authority PEM, stored as a TLS Secret, used to verify the authority of the client certificate. The only verification performed checks that the CN of the PEM matches the Domain (i.e., CN=*.DOMAIN).
        """
        return pulumi.get(self, "client_certificate")

    @_builtins.property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[_builtins.str]:
        """
        Minimum TLS version to accept. Minimum is `1.0`. Default: `1.2`.
        """
        return pulumi.get(self, "min_protocol_version")

    @_builtins.property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional['outputs.DomainSpecPortTlsServerCertificate']:
        """
        Configure an optional custom server certificate for the domain. When the port number is 443 and this is not supplied, a certificate is provisioned automatically.
        """
        return pulumi.get(self, "server_certificate")


@pulumi.output_type
class DomainSpecPortTlsClientCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretLink":
            suggest = "secret_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSpecPortTlsClientCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSpecPortTlsClientCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSpecPortTlsClientCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_link: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_link: The secret will include a client certificate authority cert in PEM format used to verify requests which include client certificates. The key subject must match the domain and the key usage properties must be configured for client certificate authorization. The secret type must be keypair.
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @_builtins.property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[_builtins.str]:
        """
        The secret will include a client certificate authority cert in PEM format used to verify requests which include client certificates. The key subject must match the domain and the key usage properties must be configured for client certificate authorization. The secret type must be keypair.
        """
        return pulumi.get(self, "secret_link")


@pulumi.output_type
class DomainSpecPortTlsServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretLink":
            suggest = "secret_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSpecPortTlsServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSpecPortTlsServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSpecPortTlsServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_link: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_link: When provided, this is used as the server certificate authority. The secret type must be keypair and the content must be PEM encoded.
        """
        if secret_link is not None:
            pulumi.set(__self__, "secret_link", secret_link)

    @_builtins.property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[_builtins.str]:
        """
        When provided, this is used as the server certificate authority. The secret type must be keypair and the content must be PEM encoded.
        """
        return pulumi.get(self, "secret_link")


@pulumi.output_type
class DomainStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsConfigs":
            suggest = "dns_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_configs: Optional[Sequence['outputs.DomainStatusDnsConfig']] = None,
                 endpoints: Optional[Sequence['outputs.DomainStatusEndpoint']] = None,
                 fingerprint: Optional[_builtins.str] = None,
                 locations: Optional[Sequence['outputs.DomainStatusLocation']] = None,
                 status: Optional[_builtins.str] = None,
                 warning: Optional[_builtins.str] = None):
        """
        :param Sequence['DomainStatusDnsConfigArgs'] dns_configs: List of required DNS record entries.
        :param Sequence['DomainStatusEndpointArgs'] endpoints: List of configured domain endpoints.
        :param Sequence['DomainStatusLocationArgs'] locations: Contains the cloud provider name, region, and certificate status.
        :param _builtins.str status: Status of Domain. Possible values: `initializing`, `ready`, `pendingDnsConfig`, `pendingCertificate`, `usedByGvc`.
        :param _builtins.str warning: Warning message.
        """
        if dns_configs is not None:
            pulumi.set(__self__, "dns_configs", dns_configs)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @_builtins.property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Optional[Sequence['outputs.DomainStatusDnsConfig']]:
        """
        List of required DNS record entries.
        """
        return pulumi.get(self, "dns_configs")

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.DomainStatusEndpoint']]:
        """
        List of configured domain endpoints.
        """
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.DomainStatusLocation']]:
        """
        Contains the cloud provider name, region, and certificate status.
        """
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of Domain. Possible values: `initializing`, `ready`, `pendingDnsConfig`, `pendingCertificate`, `usedByGvc`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def warning(self) -> Optional[_builtins.str]:
        """
        Warning message.
        """
        return pulumi.get(self, "warning")


@pulumi.output_type
class DomainStatusDnsConfig(dict):
    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 ttl: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The host in DNS terminology refers to the domain or subdomain that the DNS record is associated with. It's essentially the name that is being queried or managed. For example, in a DNS record for `www.example.com`, `www` is a host in the domain `example.com`.
        :param _builtins.int ttl: Time to live (TTL) is a value that signifies how long (in seconds) a DNS record should be cached by a resolver or a browser before a new request should be sent to refresh the data. Lower TTL values mean records are updated more frequently, which is beneficial for dynamic DNS configurations or during DNS migrations. Higher TTL values reduce the load on DNS servers and improve the speed of name resolution for end users by relying on cached data.
        :param _builtins.str type: The DNS record type specifies the type of data the DNS record contains. Valid values: `CNAME`, `NS`, `TXT`.
        :param _builtins.str value: The value of a DNS record contains the data the record is meant to convey, based on the type of the record.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The host in DNS terminology refers to the domain or subdomain that the DNS record is associated with. It's essentially the name that is being queried or managed. For example, in a DNS record for `www.example.com`, `www` is a host in the domain `example.com`.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[_builtins.int]:
        """
        Time to live (TTL) is a value that signifies how long (in seconds) a DNS record should be cached by a resolver or a browser before a new request should be sent to refresh the data. Lower TTL values mean records are updated more frequently, which is beneficial for dynamic DNS configurations or during DNS migrations. Higher TTL values reduce the load on DNS servers and improve the speed of name resolution for end users by relying on cached data.
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The DNS record type specifies the type of data the DNS record contains. Valid values: `CNAME`, `NS`, `TXT`.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of a DNS record contains the data the record is meant to convey, based on the type of the record.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainStatusEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workloadLink":
            suggest = "workload_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainStatusEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainStatusEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainStatusEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: Optional[_builtins.str] = None,
                 workload_link: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: URL of endpoint.
        :param _builtins.str workload_link: Full link to associated workload.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)
        if workload_link is not None:
            pulumi.set(__self__, "workload_link", workload_link)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        URL of endpoint.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="workloadLink")
    def workload_link(self) -> Optional[_builtins.str]:
        """
        Full link to associated workload.
        """
        return pulumi.get(self, "workload_link")


@pulumi.output_type
class DomainStatusLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateStatus":
            suggest = "certificate_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainStatusLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainStatusLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainStatusLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_status: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str certificate_status: The current validity or status of the SSL/TLS certificate.
        :param _builtins.str name: The name of the location.
        """
        if certificate_status is not None:
            pulumi.set(__self__, "certificate_status", certificate_status)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="certificateStatus")
    def certificate_status(self) -> Optional[_builtins.str]:
        """
        The current validity or status of the SSL/TLS certificate.
        """
        return pulumi.get(self, "certificate_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the location.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GroupIdentityMatcher(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 language: Optional[_builtins.str] = None):
        """
        :param _builtins.str expression: Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful for managing the grouping of users logged in with SAML providers.
        :param _builtins.str language: Language of the expression. Either `jmespath` or `javascript`. Default: `jmespath`.
        """
        pulumi.set(__self__, "expression", expression)
        if language is not None:
            pulumi.set(__self__, "language", language)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful for managing the grouping of users logged in with SAML providers.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[_builtins.str]:
        """
        Language of the expression. Either `jmespath` or `javascript`. Default: `jmespath`.
        """
        return pulumi.get(self, "language")


@pulumi.output_type
class GroupMemberQuery(dict):
    def __init__(__self__, *,
                 fetch: Optional[_builtins.str] = None,
                 spec: Optional['outputs.GroupMemberQuerySpec'] = None):
        """
        :param _builtins.str fetch: Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        if fetch is not None:
            pulumi.set(__self__, "fetch", fetch)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @_builtins.property
    @pulumi.getter
    def fetch(self) -> Optional[_builtins.str]:
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        return pulumi.get(self, "fetch")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional['outputs.GroupMemberQuerySpec']:
        return pulumi.get(self, "spec")


@pulumi.output_type
class GroupMemberQuerySpec(dict):
    def __init__(__self__, *,
                 match: Optional[_builtins.str] = None,
                 terms: Optional[Sequence['outputs.GroupMemberQuerySpecTerm']] = None):
        """
        :param _builtins.str match: Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        :param Sequence['GroupMemberQuerySpecTermArgs'] terms: Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        if match is not None:
            pulumi.set(__self__, "match", match)
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @_builtins.property
    @pulumi.getter
    def match(self) -> Optional[_builtins.str]:
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        return pulumi.get(self, "match")

    @_builtins.property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['outputs.GroupMemberQuerySpecTerm']]:
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        return pulumi.get(self, "terms")


@pulumi.output_type
class GroupMemberQuerySpecTerm(dict):
    def __init__(__self__, *,
                 op: Optional[_builtins.str] = None,
                 property: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None,
                 tag: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str op: Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        :param _builtins.str property: Property to use for query evaluation.
        :param _builtins.str rel: Relation to use for query evaluation.
        :param _builtins.str tag: Tag key to use for query evaluation.
        :param _builtins.str value: Testing value for query evaluation.
        """
        if op is not None:
            pulumi.set(__self__, "op", op)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def op(self) -> Optional[_builtins.str]:
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        return pulumi.get(self, "op")

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[_builtins.str]:
        """
        Property to use for query evaluation.
        """
        return pulumi.get(self, "property")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        Relation to use for query evaluation.
        """
        return pulumi.get(self, "rel")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        """
        Tag key to use for query evaluation.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Testing value for query evaluation.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GvcControlplaneTracing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GvcControlplaneTracing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GvcControlplaneTracing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GvcControlplaneTracing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sampling: _builtins.float,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GvcKeda(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityLink":
            suggest = "identity_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GvcKeda. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GvcKeda.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GvcKeda.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None,
                 identity_link: Optional[_builtins.str] = None,
                 secrets: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.bool enabled: Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        :param _builtins.str identity_link: A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        :param Sequence[_builtins.str] secrets: A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if identity_link is not None:
            pulumi.set(__self__, "identity_link", identity_link)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="identityLink")
    def identity_link(self) -> Optional[_builtins.str]:
        """
        A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        """
        return pulumi.get(self, "identity_link")

    @_builtins.property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        return pulumi.get(self, "secrets")


@pulumi.output_type
class GvcLightstepTracing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GvcLightstepTracing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GvcLightstepTracing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GvcLightstepTracing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 sampling: _builtins.float,
                 credentials: Optional[_builtins.str] = None,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param _builtins.str credentials: Full link to referenced Opaque Secret.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[_builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GvcLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "multiZone":
            suggest = "multi_zone"
        elif key == "trustedProxies":
            suggest = "trusted_proxies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GvcLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GvcLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GvcLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dedicated: Optional[_builtins.bool] = None,
                 ipset: Optional[_builtins.str] = None,
                 multi_zone: Optional['outputs.GvcLoadBalancerMultiZone'] = None,
                 redirect: Optional['outputs.GvcLoadBalancerRedirect'] = None,
                 trusted_proxies: Optional[_builtins.int] = None):
        """
        :param _builtins.bool dedicated: Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        :param _builtins.str ipset: The link or the name of the IP Set that will be used for this load balancer.
        :param 'GvcLoadBalancerRedirectArgs' redirect: Specify the url to be redirected to for different http status codes.
        :param _builtins.int trusted_proxies: Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if ipset is not None:
            pulumi.set(__self__, "ipset", ipset)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if trusted_proxies is not None:
            pulumi.set(__self__, "trusted_proxies", trusted_proxies)

    @_builtins.property
    @pulumi.getter
    def dedicated(self) -> Optional[_builtins.bool]:
        """
        Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        """
        return pulumi.get(self, "dedicated")

    @_builtins.property
    @pulumi.getter
    def ipset(self) -> Optional[_builtins.str]:
        """
        The link or the name of the IP Set that will be used for this load balancer.
        """
        return pulumi.get(self, "ipset")

    @_builtins.property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional['outputs.GvcLoadBalancerMultiZone']:
        return pulumi.get(self, "multi_zone")

    @_builtins.property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.GvcLoadBalancerRedirect']:
        """
        Specify the url to be redirected to for different http status codes.
        """
        return pulumi.get(self, "redirect")

    @_builtins.property
    @pulumi.getter(name="trustedProxies")
    def trusted_proxies(self) -> Optional[_builtins.int]:
        """
        Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        return pulumi.get(self, "trusted_proxies")


@pulumi.output_type
class GvcLoadBalancerMultiZone(dict):
    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GvcLoadBalancerRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GvcLoadBalancerRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GvcLoadBalancerRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GvcLoadBalancerRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_: Optional['outputs.GvcLoadBalancerRedirectClass'] = None):
        """
        :param 'GvcLoadBalancerRedirectClassArgs' class_: Specify the redirect url for all status codes in a class.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)

    @_builtins.property
    @pulumi.getter(name="class")
    def class_(self) -> Optional['outputs.GvcLoadBalancerRedirectClass']:
        """
        Specify the redirect url for all status codes in a class.
        """
        return pulumi.get(self, "class_")


@pulumi.output_type
class GvcLoadBalancerRedirectClass(dict):
    def __init__(__self__, *,
                 status401: Optional[_builtins.str] = None,
                 status5xx: Optional[_builtins.str] = None):
        """
        :param _builtins.str status401: An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        :param _builtins.str status5xx: Specify the redirect url for any 500 level status code.
        """
        if status401 is not None:
            pulumi.set(__self__, "status401", status401)
        if status5xx is not None:
            pulumi.set(__self__, "status5xx", status5xx)

    @_builtins.property
    @pulumi.getter
    def status401(self) -> Optional[_builtins.str]:
        """
        An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        """
        return pulumi.get(self, "status401")

    @_builtins.property
    @pulumi.getter
    def status5xx(self) -> Optional[_builtins.str]:
        """
        Specify the redirect url for any 500 level status code.
        """
        return pulumi.get(self, "status5xx")


@pulumi.output_type
class GvcOtelTracing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GvcOtelTracing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GvcOtelTracing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GvcOtelTracing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 sampling: _builtins.float,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GvcSidecar(dict):
    def __init__(__self__, *,
                 envoy: _builtins.str):
        pulumi.set(__self__, "envoy", envoy)

    @_builtins.property
    @pulumi.getter
    def envoy(self) -> _builtins.str:
        return pulumi.get(self, "envoy")


@pulumi.output_type
class IdentityAwsAccessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudAccountLink":
            suggest = "cloud_account_link"
        elif key == "policyRefs":
            suggest = "policy_refs"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "trustPolicies":
            suggest = "trust_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityAwsAccessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityAwsAccessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityAwsAccessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_account_link: _builtins.str,
                 policy_refs: Optional[Sequence[_builtins.str]] = None,
                 role_name: Optional[_builtins.str] = None,
                 trust_policies: Optional[Sequence['outputs.IdentityAwsAccessPolicyTrustPolicy']] = None):
        """
        :param _builtins.str cloud_account_link: Full link to referenced cloud account.
        :param Sequence[_builtins.str] policy_refs: List of policies.
        :param _builtins.str role_name: Role name.
        :param Sequence['IdentityAwsAccessPolicyTrustPolicyArgs'] trust_policies: The trust policy for the role.
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if policy_refs is not None:
            pulumi.set(__self__, "policy_refs", policy_refs)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if trust_policies is not None:
            pulumi.set(__self__, "trust_policies", trust_policies)

    @_builtins.property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> _builtins.str:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @_builtins.property
    @pulumi.getter(name="policyRefs")
    def policy_refs(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of policies.
        """
        return pulumi.get(self, "policy_refs")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[_builtins.str]:
        """
        Role name.
        """
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="trustPolicies")
    def trust_policies(self) -> Optional[Sequence['outputs.IdentityAwsAccessPolicyTrustPolicy']]:
        """
        The trust policy for the role.
        """
        return pulumi.get(self, "trust_policies")


@pulumi.output_type
class IdentityAwsAccessPolicyTrustPolicy(dict):
    def __init__(__self__, *,
                 statements: Optional[Sequence[Mapping[str, _builtins.str]]] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param Sequence[Mapping[str, _builtins.str]] statements: List of statements.
        :param _builtins.str version: Version of the policy.
        """
        if statements is not None:
            pulumi.set(__self__, "statements", statements)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def statements(self) -> Optional[Sequence[Mapping[str, _builtins.str]]]:
        """
        List of statements.
        """
        return pulumi.get(self, "statements")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Version of the policy.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class IdentityAzureAccessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudAccountLink":
            suggest = "cloud_account_link"
        elif key == "roleAssignments":
            suggest = "role_assignments"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityAzureAccessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityAzureAccessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityAzureAccessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_account_link: _builtins.str,
                 role_assignments: Optional[Sequence['outputs.IdentityAzureAccessPolicyRoleAssignment']] = None):
        """
        :param _builtins.str cloud_account_link: Full link to referenced cloud account.
        :param Sequence['IdentityAzureAccessPolicyRoleAssignmentArgs'] role_assignments: The process of assigning specific roles or permissions to an entity, such as a user or a service principal, within the system.
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if role_assignments is not None:
            pulumi.set(__self__, "role_assignments", role_assignments)

    @_builtins.property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> _builtins.str:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @_builtins.property
    @pulumi.getter(name="roleAssignments")
    def role_assignments(self) -> Optional[Sequence['outputs.IdentityAzureAccessPolicyRoleAssignment']]:
        """
        The process of assigning specific roles or permissions to an entity, such as a user or a service principal, within the system.
        """
        return pulumi.get(self, "role_assignments")


@pulumi.output_type
class IdentityAzureAccessPolicyRoleAssignment(dict):
    def __init__(__self__, *,
                 roles: Optional[Sequence[_builtins.str]] = None,
                 scope: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] roles: List of assigned roles.
        :param _builtins.str scope: Scope of roles.
        """
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of assigned roles.
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.str]:
        """
        Scope of roles.
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class IdentityGcpAccessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudAccountLink":
            suggest = "cloud_account_link"
        elif key == "serviceAccount":
            suggest = "service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityGcpAccessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityGcpAccessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityGcpAccessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_account_link: _builtins.str,
                 bindings: Optional[Sequence['outputs.IdentityGcpAccessPolicyBinding']] = None,
                 scopes: Optional[_builtins.str] = None,
                 service_account: Optional[_builtins.str] = None):
        """
        :param _builtins.str cloud_account_link: Full link to referenced cloud account.
        :param Sequence['IdentityGcpAccessPolicyBindingArgs'] bindings: The association or connection between a particular identity, such as a user or a group, and a set of permissions or roles within the system.
        :param _builtins.str scopes: Comma delimited list of GCP scope URLs.
        :param _builtins.str service_account: Name of existing GCP service account.
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @_builtins.property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> _builtins.str:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.IdentityGcpAccessPolicyBinding']]:
        """
        The association or connection between a particular identity, such as a user or a group, and a set of permissions or roles within the system.
        """
        return pulumi.get(self, "bindings")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[_builtins.str]:
        """
        Comma delimited list of GCP scope URLs.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[_builtins.str]:
        """
        Name of existing GCP service account.
        """
        return pulumi.get(self, "service_account")


@pulumi.output_type
class IdentityGcpAccessPolicyBinding(dict):
    def __init__(__self__, *,
                 resource: Optional[_builtins.str] = None,
                 roles: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str resource: Name of resource for binding.
        :param Sequence[_builtins.str] roles: List of allowed roles.
        """
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[_builtins.str]:
        """
        Name of resource for binding.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of allowed roles.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class IdentityNativeNetworkResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsPrivateLink":
            suggest = "aws_private_link"
        elif key == "gcpServiceConnect":
            suggest = "gcp_service_connect"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityNativeNetworkResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityNativeNetworkResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityNativeNetworkResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: _builtins.str,
                 name: _builtins.str,
                 ports: Sequence[_builtins.int],
                 aws_private_link: Optional['outputs.IdentityNativeNetworkResourceAwsPrivateLink'] = None,
                 gcp_service_connect: Optional['outputs.IdentityNativeNetworkResourceGcpServiceConnect'] = None):
        """
        :param _builtins.str fqdn: Fully qualified domain name.
        :param _builtins.str name: Name of the Native Network Resource.
        :param Sequence[_builtins.int] ports: Ports to expose. At least one port is required.
        :param 'IdentityNativeNetworkResourceAwsPrivateLinkArgs' aws_private_link: A feature provided by AWS that enables private connectivity between private VPCs and compute running at Control Plane without traversing the public internet.
        :param 'IdentityNativeNetworkResourceGcpServiceConnectArgs' gcp_service_connect: Capability provided by GCP that allows private communication between private VPC networks and compute running at Control Plane.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if aws_private_link is not None:
            pulumi.set(__self__, "aws_private_link", aws_private_link)
        if gcp_service_connect is not None:
            pulumi.set(__self__, "gcp_service_connect", gcp_service_connect)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> _builtins.str:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Native Network Resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence[_builtins.int]:
        """
        Ports to expose. At least one port is required.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="awsPrivateLink")
    def aws_private_link(self) -> Optional['outputs.IdentityNativeNetworkResourceAwsPrivateLink']:
        """
        A feature provided by AWS that enables private connectivity between private VPCs and compute running at Control Plane without traversing the public internet.
        """
        return pulumi.get(self, "aws_private_link")

    @_builtins.property
    @pulumi.getter(name="gcpServiceConnect")
    def gcp_service_connect(self) -> Optional['outputs.IdentityNativeNetworkResourceGcpServiceConnect']:
        """
        Capability provided by GCP that allows private communication between private VPC networks and compute running at Control Plane.
        """
        return pulumi.get(self, "gcp_service_connect")


@pulumi.output_type
class IdentityNativeNetworkResourceAwsPrivateLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointServiceName":
            suggest = "endpoint_service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityNativeNetworkResourceAwsPrivateLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityNativeNetworkResourceAwsPrivateLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityNativeNetworkResourceAwsPrivateLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_service_name: _builtins.str):
        """
        :param _builtins.str endpoint_service_name: Endpoint service name.
        """
        pulumi.set(__self__, "endpoint_service_name", endpoint_service_name)

    @_builtins.property
    @pulumi.getter(name="endpointServiceName")
    def endpoint_service_name(self) -> _builtins.str:
        """
        Endpoint service name.
        """
        return pulumi.get(self, "endpoint_service_name")


@pulumi.output_type
class IdentityNativeNetworkResourceGcpServiceConnect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetService":
            suggest = "target_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityNativeNetworkResourceGcpServiceConnect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityNativeNetworkResourceGcpServiceConnect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityNativeNetworkResourceGcpServiceConnect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_service: _builtins.str):
        """
        :param _builtins.str target_service: Target service name.
        """
        pulumi.set(__self__, "target_service", target_service)

    @_builtins.property
    @pulumi.getter(name="targetService")
    def target_service(self) -> _builtins.str:
        """
        Target service name.
        """
        return pulumi.get(self, "target_service")


@pulumi.output_type
class IdentityNetworkResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentLink":
            suggest = "agent_link"
        elif key == "resolverIp":
            suggest = "resolver_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityNetworkResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityNetworkResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityNetworkResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 ports: Sequence[_builtins.int],
                 agent_link: Optional[_builtins.str] = None,
                 fqdn: Optional[_builtins.str] = None,
                 ips: Optional[Sequence[_builtins.str]] = None,
                 resolver_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Name of the Network Resource.
        :param Sequence[_builtins.int] ports: Ports to expose.
        :param _builtins.str agent_link: Full link to referenced Agent.
        :param _builtins.str fqdn: Fully qualified domain name.
        :param Sequence[_builtins.str] ips: List of IP addresses.
        :param _builtins.str resolver_ip: Resolver IP.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if agent_link is not None:
            pulumi.set(__self__, "agent_link", agent_link)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if resolver_ip is not None:
            pulumi.set(__self__, "resolver_ip", resolver_ip)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Network Resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Sequence[_builtins.int]:
        """
        Ports to expose.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="agentLink")
    def agent_link(self) -> Optional[_builtins.str]:
        """
        Full link to referenced Agent.
        """
        return pulumi.get(self, "agent_link")

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> Optional[_builtins.str]:
        """
        Fully qualified domain name.
        """
        return pulumi.get(self, "fqdn")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IP addresses.
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="resolverIp")
    def resolver_ip(self) -> Optional[_builtins.str]:
        """
        Resolver IP.
        """
        return pulumi.get(self, "resolver_ip")


@pulumi.output_type
class IdentityNgsAccessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudAccountLink":
            suggest = "cloud_account_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityNgsAccessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityNgsAccessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityNgsAccessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_account_link: _builtins.str,
                 data: Optional[_builtins.int] = None,
                 payload: Optional[_builtins.int] = None,
                 pub: Optional['outputs.IdentityNgsAccessPolicyPub'] = None,
                 resp: Optional['outputs.IdentityNgsAccessPolicyResp'] = None,
                 sub: Optional['outputs.IdentityNgsAccessPolicySub'] = None,
                 subs: Optional[_builtins.int] = None):
        """
        :param _builtins.str cloud_account_link: Full link to referenced cloud account.
        :param _builtins.int data: Max number of bytes a connection can send. Default: -1
        :param _builtins.int payload: Max message payload. Default: -1
        :param 'IdentityNgsAccessPolicyPubArgs' pub: Pub Permission.
        :param 'IdentityNgsAccessPolicyRespArgs' resp: Reponses.
        :param 'IdentityNgsAccessPolicySubArgs' sub: Sub Permission.
        :param _builtins.int subs: Max number of subscriptions per connection. Default: -1
        """
        pulumi.set(__self__, "cloud_account_link", cloud_account_link)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if pub is not None:
            pulumi.set(__self__, "pub", pub)
        if resp is not None:
            pulumi.set(__self__, "resp", resp)
        if sub is not None:
            pulumi.set(__self__, "sub", sub)
        if subs is not None:
            pulumi.set(__self__, "subs", subs)

    @_builtins.property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> _builtins.str:
        """
        Full link to referenced cloud account.
        """
        return pulumi.get(self, "cloud_account_link")

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[_builtins.int]:
        """
        Max number of bytes a connection can send. Default: -1
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def payload(self) -> Optional[_builtins.int]:
        """
        Max message payload. Default: -1
        """
        return pulumi.get(self, "payload")

    @_builtins.property
    @pulumi.getter
    def pub(self) -> Optional['outputs.IdentityNgsAccessPolicyPub']:
        """
        Pub Permission.
        """
        return pulumi.get(self, "pub")

    @_builtins.property
    @pulumi.getter
    def resp(self) -> Optional['outputs.IdentityNgsAccessPolicyResp']:
        """
        Reponses.
        """
        return pulumi.get(self, "resp")

    @_builtins.property
    @pulumi.getter
    def sub(self) -> Optional['outputs.IdentityNgsAccessPolicySub']:
        """
        Sub Permission.
        """
        return pulumi.get(self, "sub")

    @_builtins.property
    @pulumi.getter
    def subs(self) -> Optional[_builtins.int]:
        """
        Max number of subscriptions per connection. Default: -1
        """
        return pulumi.get(self, "subs")


@pulumi.output_type
class IdentityNgsAccessPolicyPub(dict):
    def __init__(__self__, *,
                 allows: Optional[Sequence[_builtins.str]] = None,
                 denies: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] allows: List of allow subjects.
        :param Sequence[_builtins.str] denies: List of deny subjects.
        """
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if denies is not None:
            pulumi.set(__self__, "denies", denies)

    @_builtins.property
    @pulumi.getter
    def allows(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of allow subjects.
        """
        return pulumi.get(self, "allows")

    @_builtins.property
    @pulumi.getter
    def denies(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of deny subjects.
        """
        return pulumi.get(self, "denies")


@pulumi.output_type
class IdentityNgsAccessPolicyResp(dict):
    def __init__(__self__, *,
                 max: Optional[_builtins.int] = None,
                 ttl: Optional[_builtins.str] = None):
        """
        :param _builtins.int max: Number of responses allowed on the replyTo subject, -1 means no limit. Default: -1
        :param _builtins.str ttl: Deadline to send replies on the replyTo subject [#ms(millis) | #s(econds) | m(inutes) | h(ours)]. -1 means no restriction.
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter
    def max(self) -> Optional[_builtins.int]:
        """
        Number of responses allowed on the replyTo subject, -1 means no limit. Default: -1
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[_builtins.str]:
        """
        Deadline to send replies on the replyTo subject [#ms(millis) | #s(econds) | m(inutes) | h(ours)]. -1 means no restriction.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class IdentityNgsAccessPolicySub(dict):
    def __init__(__self__, *,
                 allows: Optional[Sequence[_builtins.str]] = None,
                 denies: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] allows: List of allow subjects.
        :param Sequence[_builtins.str] denies: List of deny subjects.
        """
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if denies is not None:
            pulumi.set(__self__, "denies", denies)

    @_builtins.property
    @pulumi.getter
    def allows(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of allow subjects.
        """
        return pulumi.get(self, "allows")

    @_builtins.property
    @pulumi.getter
    def denies(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of deny subjects.
        """
        return pulumi.get(self, "denies")


@pulumi.output_type
class IpSetLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPolicy":
            suggest = "retention_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpSetLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpSetLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpSetLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 retention_policy: _builtins.str):
        """
        :param _builtins.str name: The self link of a location.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retention_policy", retention_policy)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The self link of a location.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> _builtins.str:
        return pulumi.get(self, "retention_policy")


@pulumi.output_type
class IpSetStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddresses":
            suggest = "ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpSetStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpSetStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpSetStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: Optional[_builtins.str] = None,
                 ip_addresses: Optional[Sequence['outputs.IpSetStatusIpAddress']] = None,
                 warning: Optional[_builtins.str] = None):
        if error is not None:
            pulumi.set(__self__, "error", error)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @_builtins.property
    @pulumi.getter
    def error(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence['outputs.IpSetStatusIpAddress']]:
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter
    def warning(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "warning")


@pulumi.output_type
class IpSetStatusIpAddress(dict):
    def __init__(__self__, *,
                 created: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class LocationGeo(dict):
    def __init__(__self__, *,
                 city: Optional[_builtins.str] = None,
                 continent: Optional[_builtins.str] = None,
                 country: Optional[_builtins.str] = None,
                 lat: Optional[_builtins.float] = None,
                 lon: Optional[_builtins.float] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str city: City of the location.
        :param _builtins.str continent: Continent of the location.
        :param _builtins.str country: Country of the location.
        :param _builtins.float lat: Latitude of the location.
        :param _builtins.float lon: Longitude of the location.
        :param _builtins.str state: State of the location.
        """
        if city is not None:
            pulumi.set(__self__, "city", city)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if lat is not None:
            pulumi.set(__self__, "lat", lat)
        if lon is not None:
            pulumi.set(__self__, "lon", lon)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        City of the location.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def continent(self) -> Optional[_builtins.str]:
        """
        Continent of the location.
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        Country of the location.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def lat(self) -> Optional[_builtins.float]:
        """
        Latitude of the location.
        """
        return pulumi.get(self, "lat")

    @_builtins.property
    @pulumi.getter
    def lon(self) -> Optional[_builtins.float]:
        """
        Longitude of the location.
        """
        return pulumi.get(self, "lon")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        State of the location.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class Mk8sAddOns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsEcr":
            suggest = "aws_ecr"
        elif key == "awsEfs":
            suggest = "aws_efs"
        elif key == "awsElb":
            suggest = "aws_elb"
        elif key == "awsWorkloadIdentity":
            suggest = "aws_workload_identity"
        elif key == "azureAcr":
            suggest = "azure_acr"
        elif key == "azureWorkloadIdentity":
            suggest = "azure_workload_identity"
        elif key == "localPathStorage":
            suggest = "local_path_storage"
        elif key == "registryMirror":
            suggest = "registry_mirror"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_ecr: Optional['outputs.Mk8sAddOnsAwsEcr'] = None,
                 aws_efs: Optional['outputs.Mk8sAddOnsAwsEfs'] = None,
                 aws_elb: Optional['outputs.Mk8sAddOnsAwsElb'] = None,
                 aws_workload_identity: Optional[_builtins.bool] = None,
                 azure_acr: Optional['outputs.Mk8sAddOnsAzureAcr'] = None,
                 azure_workload_identity: Optional['outputs.Mk8sAddOnsAzureWorkloadIdentity'] = None,
                 byok: Optional['outputs.Mk8sAddOnsByok'] = None,
                 dashboard: Optional[_builtins.bool] = None,
                 local_path_storage: Optional[_builtins.bool] = None,
                 logs: Optional['outputs.Mk8sAddOnsLogs'] = None,
                 metrics: Optional['outputs.Mk8sAddOnsMetrics'] = None,
                 nvidia: Optional['outputs.Mk8sAddOnsNvidia'] = None,
                 registry_mirror: Optional['outputs.Mk8sAddOnsRegistryMirror'] = None,
                 sysbox: Optional[_builtins.bool] = None):
        """
        :param 'Mk8sAddOnsByokArgs' byok: Bring-your-own Kubernetes (BYOK) add-on settings.
        :param 'Mk8sAddOnsMetricsArgs' metrics: Scrape pods annotated with prometheus.io/scrape=true
        """
        if aws_ecr is not None:
            pulumi.set(__self__, "aws_ecr", aws_ecr)
        if aws_efs is not None:
            pulumi.set(__self__, "aws_efs", aws_efs)
        if aws_elb is not None:
            pulumi.set(__self__, "aws_elb", aws_elb)
        if aws_workload_identity is not None:
            pulumi.set(__self__, "aws_workload_identity", aws_workload_identity)
        if azure_acr is not None:
            pulumi.set(__self__, "azure_acr", azure_acr)
        if azure_workload_identity is not None:
            pulumi.set(__self__, "azure_workload_identity", azure_workload_identity)
        if byok is not None:
            pulumi.set(__self__, "byok", byok)
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if local_path_storage is not None:
            pulumi.set(__self__, "local_path_storage", local_path_storage)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if nvidia is not None:
            pulumi.set(__self__, "nvidia", nvidia)
        if registry_mirror is not None:
            pulumi.set(__self__, "registry_mirror", registry_mirror)
        if sysbox is not None:
            pulumi.set(__self__, "sysbox", sysbox)

    @_builtins.property
    @pulumi.getter(name="awsEcr")
    def aws_ecr(self) -> Optional['outputs.Mk8sAddOnsAwsEcr']:
        return pulumi.get(self, "aws_ecr")

    @_builtins.property
    @pulumi.getter(name="awsEfs")
    def aws_efs(self) -> Optional['outputs.Mk8sAddOnsAwsEfs']:
        return pulumi.get(self, "aws_efs")

    @_builtins.property
    @pulumi.getter(name="awsElb")
    def aws_elb(self) -> Optional['outputs.Mk8sAddOnsAwsElb']:
        return pulumi.get(self, "aws_elb")

    @_builtins.property
    @pulumi.getter(name="awsWorkloadIdentity")
    def aws_workload_identity(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "aws_workload_identity")

    @_builtins.property
    @pulumi.getter(name="azureAcr")
    def azure_acr(self) -> Optional['outputs.Mk8sAddOnsAzureAcr']:
        return pulumi.get(self, "azure_acr")

    @_builtins.property
    @pulumi.getter(name="azureWorkloadIdentity")
    def azure_workload_identity(self) -> Optional['outputs.Mk8sAddOnsAzureWorkloadIdentity']:
        return pulumi.get(self, "azure_workload_identity")

    @_builtins.property
    @pulumi.getter
    def byok(self) -> Optional['outputs.Mk8sAddOnsByok']:
        """
        Bring-your-own Kubernetes (BYOK) add-on settings.
        """
        return pulumi.get(self, "byok")

    @_builtins.property
    @pulumi.getter
    def dashboard(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "dashboard")

    @_builtins.property
    @pulumi.getter(name="localPathStorage")
    def local_path_storage(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "local_path_storage")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Optional['outputs.Mk8sAddOnsLogs']:
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.Mk8sAddOnsMetrics']:
        """
        Scrape pods annotated with prometheus.io/scrape=true
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def nvidia(self) -> Optional['outputs.Mk8sAddOnsNvidia']:
        return pulumi.get(self, "nvidia")

    @_builtins.property
    @pulumi.getter(name="registryMirror")
    def registry_mirror(self) -> Optional['outputs.Mk8sAddOnsRegistryMirror']:
        return pulumi.get(self, "registry_mirror")

    @_builtins.property
    @pulumi.getter
    def sysbox(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "sysbox")


@pulumi.output_type
class Mk8sAddOnsAwsEcr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsAwsEcr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsAwsEcr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsAwsEcr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str role_arn: Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class Mk8sAddOnsAwsEfs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsAwsEfs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsAwsEfs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsAwsEfs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str role_arn: Use this role for EFS interaction.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Use this role for EFS interaction.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class Mk8sAddOnsAwsElb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsAwsElb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsAwsElb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsAwsElb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str role_arn: Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.
        """
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class Mk8sAddOnsAzureAcr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsAzureAcr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsAzureAcr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsAzureAcr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str):
        pulumi.set(__self__, "client_id", client_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        return pulumi.get(self, "client_id")


@pulumi.output_type
class Mk8sAddOnsAzureWorkloadIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsAzureWorkloadIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsAzureWorkloadIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsAzureWorkloadIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tenant_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str tenant_id: Tenant ID to use for workload identity.
        """
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        """
        Tenant ID to use for workload identity.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class Mk8sAddOnsByok(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreUpdates":
            suggest = "ignore_updates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByok. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByok.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByok.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 config: Optional['outputs.Mk8sAddOnsByokConfig'] = None,
                 ignore_updates: Optional[_builtins.bool] = None):
        """
        :param _builtins.str location: The full link of a BYOK location.
        :param 'Mk8sAddOnsByokConfigArgs' config: Fine-grained configuration for the BYOK workloads.
        :param _builtins.bool ignore_updates: Disable Control Plane managed upgrades for BYOK components.
        """
        pulumi.set(__self__, "location", location)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if ignore_updates is not None:
            pulumi.set(__self__, "ignore_updates", ignore_updates)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        The full link of a BYOK location.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional['outputs.Mk8sAddOnsByokConfig']:
        """
        Fine-grained configuration for the BYOK workloads.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="ignoreUpdates")
    def ignore_updates(self) -> Optional[_builtins.bool]:
        """
        Disable Control Plane managed upgrades for BYOK components.
        """
        return pulumi.get(self, "ignore_updates")


@pulumi.output_type
class Mk8sAddOnsByokConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalDns":
            suggest = "internal_dns"
        elif key == "logSplitter":
            suggest = "log_splitter"
        elif key == "redisHa":
            suggest = "redis_ha"
        elif key == "redisSentinel":
            suggest = "redis_sentinel"
        elif key == "tempoAgent":
            suggest = "tempo_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actuator: Optional['outputs.Mk8sAddOnsByokConfigActuator'] = None,
                 common: Optional['outputs.Mk8sAddOnsByokConfigCommon'] = None,
                 ingress: Optional['outputs.Mk8sAddOnsByokConfigIngress'] = None,
                 internal_dns: Optional['outputs.Mk8sAddOnsByokConfigInternalDns'] = None,
                 istio: Optional['outputs.Mk8sAddOnsByokConfigIstio'] = None,
                 log_splitter: Optional['outputs.Mk8sAddOnsByokConfigLogSplitter'] = None,
                 longhorn: Optional['outputs.Mk8sAddOnsByokConfigLonghorn'] = None,
                 middlebox: Optional['outputs.Mk8sAddOnsByokConfigMiddlebox'] = None,
                 monitoring: Optional['outputs.Mk8sAddOnsByokConfigMonitoring'] = None,
                 redis: Optional['outputs.Mk8sAddOnsByokConfigRedis'] = None,
                 redis_ha: Optional['outputs.Mk8sAddOnsByokConfigRedisHa'] = None,
                 redis_sentinel: Optional['outputs.Mk8sAddOnsByokConfigRedisSentinel'] = None,
                 tempo_agent: Optional['outputs.Mk8sAddOnsByokConfigTempoAgent'] = None):
        """
        :param 'Mk8sAddOnsByokConfigActuatorArgs' actuator: Resource tuning for the actuator component.
        :param 'Mk8sAddOnsByokConfigCommonArgs' common: Shared rollout settings for BYOK workloads.
        :param 'Mk8sAddOnsByokConfigIngressArgs' ingress: Ingress controller resource configuration.
        :param 'Mk8sAddOnsByokConfigInternalDnsArgs' internal_dns: Internal DNS deployment settings.
        :param 'Mk8sAddOnsByokConfigIstioArgs' istio: Istio service mesh configuration.
        :param 'Mk8sAddOnsByokConfigLogSplitterArgs' log_splitter: Log splitter deployment configuration.
        :param 'Mk8sAddOnsByokConfigLonghornArgs' longhorn: Longhorn persistent volume settings.
        :param 'Mk8sAddOnsByokConfigMiddleboxArgs' middlebox: Configuration for the optional middlebox traffic shaper.
        :param 'Mk8sAddOnsByokConfigMonitoringArgs' monitoring: Monitoring stack configuration.
        :param 'Mk8sAddOnsByokConfigRedisArgs' redis: Redis cache configuration.
        :param 'Mk8sAddOnsByokConfigRedisHaArgs' redis_ha: High-availability Redis configuration.
        :param 'Mk8sAddOnsByokConfigRedisSentinelArgs' redis_sentinel: Redis Sentinel configuration.
        :param 'Mk8sAddOnsByokConfigTempoAgentArgs' tempo_agent: Tempo agent resource configuration.
        """
        if actuator is not None:
            pulumi.set(__self__, "actuator", actuator)
        if common is not None:
            pulumi.set(__self__, "common", common)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)
        if internal_dns is not None:
            pulumi.set(__self__, "internal_dns", internal_dns)
        if istio is not None:
            pulumi.set(__self__, "istio", istio)
        if log_splitter is not None:
            pulumi.set(__self__, "log_splitter", log_splitter)
        if longhorn is not None:
            pulumi.set(__self__, "longhorn", longhorn)
        if middlebox is not None:
            pulumi.set(__self__, "middlebox", middlebox)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if redis_ha is not None:
            pulumi.set(__self__, "redis_ha", redis_ha)
        if redis_sentinel is not None:
            pulumi.set(__self__, "redis_sentinel", redis_sentinel)
        if tempo_agent is not None:
            pulumi.set(__self__, "tempo_agent", tempo_agent)

    @_builtins.property
    @pulumi.getter
    def actuator(self) -> Optional['outputs.Mk8sAddOnsByokConfigActuator']:
        """
        Resource tuning for the actuator component.
        """
        return pulumi.get(self, "actuator")

    @_builtins.property
    @pulumi.getter
    def common(self) -> Optional['outputs.Mk8sAddOnsByokConfigCommon']:
        """
        Shared rollout settings for BYOK workloads.
        """
        return pulumi.get(self, "common")

    @_builtins.property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.Mk8sAddOnsByokConfigIngress']:
        """
        Ingress controller resource configuration.
        """
        return pulumi.get(self, "ingress")

    @_builtins.property
    @pulumi.getter(name="internalDns")
    def internal_dns(self) -> Optional['outputs.Mk8sAddOnsByokConfigInternalDns']:
        """
        Internal DNS deployment settings.
        """
        return pulumi.get(self, "internal_dns")

    @_builtins.property
    @pulumi.getter
    def istio(self) -> Optional['outputs.Mk8sAddOnsByokConfigIstio']:
        """
        Istio service mesh configuration.
        """
        return pulumi.get(self, "istio")

    @_builtins.property
    @pulumi.getter(name="logSplitter")
    def log_splitter(self) -> Optional['outputs.Mk8sAddOnsByokConfigLogSplitter']:
        """
        Log splitter deployment configuration.
        """
        return pulumi.get(self, "log_splitter")

    @_builtins.property
    @pulumi.getter
    def longhorn(self) -> Optional['outputs.Mk8sAddOnsByokConfigLonghorn']:
        """
        Longhorn persistent volume settings.
        """
        return pulumi.get(self, "longhorn")

    @_builtins.property
    @pulumi.getter
    def middlebox(self) -> Optional['outputs.Mk8sAddOnsByokConfigMiddlebox']:
        """
        Configuration for the optional middlebox traffic shaper.
        """
        return pulumi.get(self, "middlebox")

    @_builtins.property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.Mk8sAddOnsByokConfigMonitoring']:
        """
        Monitoring stack configuration.
        """
        return pulumi.get(self, "monitoring")

    @_builtins.property
    @pulumi.getter
    def redis(self) -> Optional['outputs.Mk8sAddOnsByokConfigRedis']:
        """
        Redis cache configuration.
        """
        return pulumi.get(self, "redis")

    @_builtins.property
    @pulumi.getter(name="redisHa")
    def redis_ha(self) -> Optional['outputs.Mk8sAddOnsByokConfigRedisHa']:
        """
        High-availability Redis configuration.
        """
        return pulumi.get(self, "redis_ha")

    @_builtins.property
    @pulumi.getter(name="redisSentinel")
    def redis_sentinel(self) -> Optional['outputs.Mk8sAddOnsByokConfigRedisSentinel']:
        """
        Redis Sentinel configuration.
        """
        return pulumi.get(self, "redis_sentinel")

    @_builtins.property
    @pulumi.getter(name="tempoAgent")
    def tempo_agent(self) -> Optional['outputs.Mk8sAddOnsByokConfigTempoAgent']:
        """
        Tempo agent resource configuration.
        """
        return pulumi.get(self, "tempo_agent")


@pulumi.output_type
class Mk8sAddOnsByokConfigActuator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logLevel":
            suggest = "log_level"
        elif key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigActuator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigActuator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigActuator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 env: Optional[Mapping[str, _builtins.str]] = None,
                 log_level: Optional[_builtins.str] = None,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None):
        """
        :param Mapping[str, _builtins.str] env: Additional environment variables injected into actuator pods.
        :param _builtins.str log_level: Log level override for actuator containers. Valid values are: trace, info, error.
        :param _builtins.str max_cpu: CPU limit applied to actuator pods.
        :param _builtins.str max_memory: Memory limit applied to actuator pods.
        :param _builtins.str min_cpu: Minimum CPU request applied to actuator pods (e.g. "100m").
        :param _builtins.str min_memory: Minimum memory request applied to actuator pods (e.g. "128Mi").
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Additional environment variables injected into actuator pods.
        """
        return pulumi.get(self, "env")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[_builtins.str]:
        """
        Log level override for actuator containers. Valid values are: trace, info, error.
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to actuator pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to actuator pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        Minimum CPU request applied to actuator pods (e.g. "100m").
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Minimum memory request applied to actuator pods (e.g. "128Mi").
        """
        return pulumi.get(self, "min_memory")


@pulumi.output_type
class Mk8sAddOnsByokConfigCommon(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentReplicas":
            suggest = "deployment_replicas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigCommon. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigCommon.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigCommon.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_replicas: Optional[_builtins.int] = None,
                 pdb: Optional['outputs.Mk8sAddOnsByokConfigCommonPdb'] = None):
        """
        :param _builtins.int deployment_replicas: Replica count shared by BYOK control plane deployments.
        :param 'Mk8sAddOnsByokConfigCommonPdbArgs' pdb: Pod disruption budget limits for BYOK workloads.
        """
        if deployment_replicas is not None:
            pulumi.set(__self__, "deployment_replicas", deployment_replicas)
        if pdb is not None:
            pulumi.set(__self__, "pdb", pdb)

    @_builtins.property
    @pulumi.getter(name="deploymentReplicas")
    def deployment_replicas(self) -> Optional[_builtins.int]:
        """
        Replica count shared by BYOK control plane deployments.
        """
        return pulumi.get(self, "deployment_replicas")

    @_builtins.property
    @pulumi.getter
    def pdb(self) -> Optional['outputs.Mk8sAddOnsByokConfigCommonPdb']:
        """
        Pod disruption budget limits for BYOK workloads.
        """
        return pulumi.get(self, "pdb")


@pulumi.output_type
class Mk8sAddOnsByokConfigCommonPdb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxUnavailable":
            suggest = "max_unavailable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigCommonPdb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigCommonPdb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigCommonPdb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_unavailable: Optional[_builtins.int] = None):
        """
        :param _builtins.int max_unavailable: Maximum number of pods that can be unavailable during disruptions.
        """
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)

    @_builtins.property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[_builtins.int]:
        """
        Maximum number of pods that can be unavailable during disruptions.
        """
        return pulumi.get(self, "max_unavailable")


@pulumi.output_type
class Mk8sAddOnsByokConfigIngress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPercent":
            suggest = "target_percent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigIngress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigIngress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigIngress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.str] = None,
                 target_percent: Optional[_builtins.float] = None):
        """
        :param _builtins.str cpu: CPU request/limit string applied to ingress pods.
        :param _builtins.str memory: Memory request/limit string applied to ingress pods.
        :param _builtins.float target_percent: Target usage percentage that triggers ingress autoscaling.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if target_percent is not None:
            pulumi.set(__self__, "target_percent", target_percent)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        CPU request/limit string applied to ingress pods.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        Memory request/limit string applied to ingress pods.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="targetPercent")
    def target_percent(self) -> Optional[_builtins.float]:
        """
        Target usage percentage that triggers ingress autoscaling.
        """
        return pulumi.get(self, "target_percent")


@pulumi.output_type
class Mk8sAddOnsByokConfigInternalDns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigInternalDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigInternalDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigInternalDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to internal DNS pods.
        :param _builtins.str max_memory: Memory limit applied to internal DNS pods.
        :param _builtins.str min_cpu: CPU request applied to internal DNS pods.
        :param _builtins.str min_memory: Memory request applied to internal DNS pods.
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to internal DNS pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to internal DNS pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to internal DNS pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to internal DNS pods.
        """
        return pulumi.get(self, "min_memory")


@pulumi.output_type
class Mk8sAddOnsByokConfigIstio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressGateway":
            suggest = "ingress_gateway"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigIstio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigIstio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigIstio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_gateway: Optional['outputs.Mk8sAddOnsByokConfigIstioIngressGateway'] = None,
                 istiod: Optional['outputs.Mk8sAddOnsByokConfigIstioIstiod'] = None,
                 sidecar: Optional['outputs.Mk8sAddOnsByokConfigIstioSidecar'] = None):
        """
        :param 'Mk8sAddOnsByokConfigIstioIngressGatewayArgs' ingress_gateway: Istio ingress gateway deployment settings.
        :param 'Mk8sAddOnsByokConfigIstioIstiodArgs' istiod: Control plane deployment settings for istiod.
        :param 'Mk8sAddOnsByokConfigIstioSidecarArgs' sidecar: Default resource requests for Istio sidecar injection.
        """
        if ingress_gateway is not None:
            pulumi.set(__self__, "ingress_gateway", ingress_gateway)
        if istiod is not None:
            pulumi.set(__self__, "istiod", istiod)
        if sidecar is not None:
            pulumi.set(__self__, "sidecar", sidecar)

    @_builtins.property
    @pulumi.getter(name="ingressGateway")
    def ingress_gateway(self) -> Optional['outputs.Mk8sAddOnsByokConfigIstioIngressGateway']:
        """
        Istio ingress gateway deployment settings.
        """
        return pulumi.get(self, "ingress_gateway")

    @_builtins.property
    @pulumi.getter
    def istiod(self) -> Optional['outputs.Mk8sAddOnsByokConfigIstioIstiod']:
        """
        Control plane deployment settings for istiod.
        """
        return pulumi.get(self, "istiod")

    @_builtins.property
    @pulumi.getter
    def sidecar(self) -> Optional['outputs.Mk8sAddOnsByokConfigIstioSidecar']:
        """
        Default resource requests for Istio sidecar injection.
        """
        return pulumi.get(self, "sidecar")


@pulumi.output_type
class Mk8sAddOnsByokConfigIstioIngressGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigIstioIngressGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigIstioIngressGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigIstioIngressGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 replicas: Optional[_builtins.int] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to ingress gateway pods.
        :param _builtins.str max_memory: Memory limit applied to ingress gateway pods.
        :param _builtins.int replicas: Number of ingress gateway replicas.
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to ingress gateway pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to ingress gateway pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[_builtins.int]:
        """
        Number of ingress gateway replicas.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class Mk8sAddOnsByokConfigIstioIstiod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigIstioIstiod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigIstioIstiod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigIstioIstiod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 pdb: Optional[_builtins.int] = None,
                 replicas: Optional[_builtins.int] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to istiod pods.
        :param _builtins.str max_memory: Memory limit applied to istiod pods.
        :param _builtins.str min_cpu: CPU request applied to istiod pods.
        :param _builtins.str min_memory: Memory request applied to istiod pods.
        :param _builtins.int pdb: Pod disruption budget maxUnavailable for istiod.
        :param _builtins.int replicas: Number of istiod replicas.
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if pdb is not None:
            pulumi.set(__self__, "pdb", pdb)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to istiod pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to istiod pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to istiod pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to istiod pods.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    def pdb(self) -> Optional[_builtins.int]:
        """
        Pod disruption budget maxUnavailable for istiod.
        """
        return pulumi.get(self, "pdb")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[_builtins.int]:
        """
        Number of istiod replicas.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class Mk8sAddOnsByokConfigIstioSidecar(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigIstioSidecar. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigIstioSidecar.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigIstioSidecar.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str min_cpu: CPU request applied to injected sidecars.
        :param _builtins.str min_memory: Memory request applied to injected sidecars.
        """
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to injected sidecars.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to injected sidecars.
        """
        return pulumi.get(self, "min_memory")


@pulumi.output_type
class Mk8sAddOnsByokConfigLogSplitter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "memBufferSize":
            suggest = "mem_buffer_size"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"
        elif key == "perPodRate":
            suggest = "per_pod_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigLogSplitter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigLogSplitter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigLogSplitter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 mem_buffer_size: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 per_pod_rate: Optional[_builtins.int] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to log splitter pods.
        :param _builtins.str max_memory: Memory limit applied to log splitter pods.
        :param _builtins.str mem_buffer_size: In-memory buffer size consumed by each log splitter pod.
        :param _builtins.str min_cpu: CPU request applied to log splitter pods.
        :param _builtins.str min_memory: Memory request applied to log splitter pods.
        :param _builtins.int per_pod_rate: Per-pod log processing rate limit.
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if mem_buffer_size is not None:
            pulumi.set(__self__, "mem_buffer_size", mem_buffer_size)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if per_pod_rate is not None:
            pulumi.set(__self__, "per_pod_rate", per_pod_rate)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to log splitter pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to log splitter pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="memBufferSize")
    def mem_buffer_size(self) -> Optional[_builtins.str]:
        """
        In-memory buffer size consumed by each log splitter pod.
        """
        return pulumi.get(self, "mem_buffer_size")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to log splitter pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to log splitter pods.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter(name="perPodRate")
    def per_pod_rate(self) -> Optional[_builtins.int]:
        """
        Per-pod log processing rate limit.
        """
        return pulumi.get(self, "per_pod_rate")


@pulumi.output_type
class Mk8sAddOnsByokConfigLonghorn(dict):
    def __init__(__self__, *,
                 replicas: Optional[_builtins.int] = None):
        """
        :param _builtins.int replicas: Replica factor for Longhorn volumes. Minimum: 1.
        """
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[_builtins.int]:
        """
        Replica factor for Longhorn volumes. Minimum: 1.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class Mk8sAddOnsByokConfigMiddlebox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthAlertMbps":
            suggest = "bandwidth_alert_mbps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigMiddlebox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigMiddlebox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigMiddlebox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_alert_mbps: Optional[_builtins.int] = None,
                 enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.int bandwidth_alert_mbps: Alert threshold, in Mbps, for middlebox bandwidth usage.
        :param _builtins.bool enabled: Whether to deploy the middlebox component.
        """
        if bandwidth_alert_mbps is not None:
            pulumi.set(__self__, "bandwidth_alert_mbps", bandwidth_alert_mbps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter(name="bandwidthAlertMbps")
    def bandwidth_alert_mbps(self) -> Optional[_builtins.int]:
        """
        Alert threshold, in Mbps, for middlebox bandwidth usage.
        """
        return pulumi.get(self, "bandwidth_alert_mbps")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether to deploy the middlebox component.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class Mk8sAddOnsByokConfigMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubeStateMetrics":
            suggest = "kube_state_metrics"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kube_state_metrics: Optional['outputs.Mk8sAddOnsByokConfigMonitoringKubeStateMetrics'] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 prometheus: Optional['outputs.Mk8sAddOnsByokConfigMonitoringPrometheus'] = None):
        """
        :param 'Mk8sAddOnsByokConfigMonitoringKubeStateMetricsArgs' kube_state_metrics: Kube-state-metrics resource overrides.
        :param _builtins.str max_memory: Maximum memory limit for monitoring components.
        :param _builtins.str min_memory: Minimum memory request for monitoring components.
        :param 'Mk8sAddOnsByokConfigMonitoringPrometheusArgs' prometheus: Prometheus deployment configuration.
        """
        if kube_state_metrics is not None:
            pulumi.set(__self__, "kube_state_metrics", kube_state_metrics)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @_builtins.property
    @pulumi.getter(name="kubeStateMetrics")
    def kube_state_metrics(self) -> Optional['outputs.Mk8sAddOnsByokConfigMonitoringKubeStateMetrics']:
        """
        Kube-state-metrics resource overrides.
        """
        return pulumi.get(self, "kube_state_metrics")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Maximum memory limit for monitoring components.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Minimum memory request for monitoring components.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    def prometheus(self) -> Optional['outputs.Mk8sAddOnsByokConfigMonitoringPrometheus']:
        """
        Prometheus deployment configuration.
        """
        return pulumi.get(self, "prometheus")


@pulumi.output_type
class Mk8sAddOnsByokConfigMonitoringKubeStateMetrics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigMonitoringKubeStateMetrics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigMonitoringKubeStateMetrics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigMonitoringKubeStateMetrics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str min_memory: Memory request applied to kube-state-metrics pods.
        """
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to kube-state-metrics pods.
        """
        return pulumi.get(self, "min_memory")


@pulumi.output_type
class Mk8sAddOnsByokConfigMonitoringPrometheus(dict):
    def __init__(__self__, *,
                 main: Optional['outputs.Mk8sAddOnsByokConfigMonitoringPrometheusMain'] = None):
        """
        :param 'Mk8sAddOnsByokConfigMonitoringPrometheusMainArgs' main: Primary Prometheus instance settings.
        """
        if main is not None:
            pulumi.set(__self__, "main", main)

    @_builtins.property
    @pulumi.getter
    def main(self) -> Optional['outputs.Mk8sAddOnsByokConfigMonitoringPrometheusMain']:
        """
        Primary Prometheus instance settings.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class Mk8sAddOnsByokConfigMonitoringPrometheusMain(dict):
    def __init__(__self__, *,
                 storage: Optional[_builtins.str] = None):
        """
        :param _builtins.str storage: Persistent volume size for Prometheus (for example, "50Gi").
        """
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[_builtins.str]:
        """
        Persistent volume size for Prometheus (for example, "50Gi").
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class Mk8sAddOnsByokConfigRedis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigRedis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigRedis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigRedis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 storage: Optional[_builtins.str] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to the Redis pods.
        :param _builtins.str max_memory: Memory limit applied to the Redis pods.
        :param _builtins.str min_cpu: CPU request applied to the Redis pods.
        :param _builtins.str min_memory: Memory request applied to the Redis pods.
        :param _builtins.str storage: Persistent storage size allocated to the Redis pods (for example, "8Gi").
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to the Redis pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to the Redis pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to the Redis pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to the Redis pods.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[_builtins.str]:
        """
        Persistent storage size allocated to the Redis pods (for example, "8Gi").
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class Mk8sAddOnsByokConfigRedisHa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigRedisHa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigRedisHa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigRedisHa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 storage: Optional[_builtins.int] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to the Redis pods.
        :param _builtins.str max_memory: Memory limit applied to the Redis pods.
        :param _builtins.str min_cpu: CPU request applied to the Redis pods.
        :param _builtins.str min_memory: Memory request applied to the Redis pods.
        :param _builtins.int storage: Persistent storage size allocated to the Redis pods, in GiB.
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to the Redis pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to the Redis pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to the Redis pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to the Redis pods.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[_builtins.int]:
        """
        Persistent storage size allocated to the Redis pods, in GiB.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class Mk8sAddOnsByokConfigRedisSentinel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigRedisSentinel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigRedisSentinel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigRedisSentinel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 storage: Optional[_builtins.int] = None):
        """
        :param _builtins.str max_cpu: CPU limit applied to the Redis pods.
        :param _builtins.str max_memory: Memory limit applied to the Redis pods.
        :param _builtins.str min_cpu: CPU request applied to the Redis pods.
        :param _builtins.str min_memory: Memory request applied to the Redis pods.
        :param _builtins.int storage: Persistent storage size allocated to the Redis pods, in GiB.
        """
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        """
        CPU limit applied to the Redis pods.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        """
        Memory limit applied to the Redis pods.
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to the Redis pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to the Redis pods.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[_builtins.int]:
        """
        Persistent storage size allocated to the Redis pods, in GiB.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class Mk8sAddOnsByokConfigTempoAgent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsByokConfigTempoAgent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsByokConfigTempoAgent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsByokConfigTempoAgent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str min_cpu: CPU request applied to tempo agent pods.
        :param _builtins.str min_memory: Memory request applied to tempo agent pods.
        """
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        CPU request applied to tempo agent pods.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Memory request applied to tempo agent pods.
        """
        return pulumi.get(self, "min_memory")


@pulumi.output_type
class Mk8sAddOnsLogs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditEnabled":
            suggest = "audit_enabled"
        elif key == "excludeNamespaces":
            suggest = "exclude_namespaces"
        elif key == "includeNamespaces":
            suggest = "include_namespaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_enabled: Optional[_builtins.bool] = None,
                 docker: Optional[_builtins.bool] = None,
                 events: Optional[_builtins.bool] = None,
                 exclude_namespaces: Optional[_builtins.str] = None,
                 include_namespaces: Optional[_builtins.str] = None,
                 kernel: Optional[_builtins.bool] = None,
                 kubelet: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool audit_enabled: Collect k8s audit log as log events.
        :param _builtins.bool docker: Collect docker logs if docker is also running.
        :param _builtins.bool events: Collect K8S events from all namespaces.
        :param _builtins.bool kernel: Collect kernel logs.
        :param _builtins.bool kubelet: Collect kubelet logs from journald.
        """
        if audit_enabled is not None:
            pulumi.set(__self__, "audit_enabled", audit_enabled)
        if docker is not None:
            pulumi.set(__self__, "docker", docker)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if exclude_namespaces is not None:
            pulumi.set(__self__, "exclude_namespaces", exclude_namespaces)
        if include_namespaces is not None:
            pulumi.set(__self__, "include_namespaces", include_namespaces)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if kubelet is not None:
            pulumi.set(__self__, "kubelet", kubelet)

    @_builtins.property
    @pulumi.getter(name="auditEnabled")
    def audit_enabled(self) -> Optional[_builtins.bool]:
        """
        Collect k8s audit log as log events.
        """
        return pulumi.get(self, "audit_enabled")

    @_builtins.property
    @pulumi.getter
    def docker(self) -> Optional[_builtins.bool]:
        """
        Collect docker logs if docker is also running.
        """
        return pulumi.get(self, "docker")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[_builtins.bool]:
        """
        Collect K8S events from all namespaces.
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter(name="excludeNamespaces")
    def exclude_namespaces(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "exclude_namespaces")

    @_builtins.property
    @pulumi.getter(name="includeNamespaces")
    def include_namespaces(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "include_namespaces")

    @_builtins.property
    @pulumi.getter
    def kernel(self) -> Optional[_builtins.bool]:
        """
        Collect kernel logs.
        """
        return pulumi.get(self, "kernel")

    @_builtins.property
    @pulumi.getter
    def kubelet(self) -> Optional[_builtins.bool]:
        """
        Collect kubelet logs from journald.
        """
        return pulumi.get(self, "kubelet")


@pulumi.output_type
class Mk8sAddOnsMetrics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiServer":
            suggest = "api_server"
        elif key == "coreDns":
            suggest = "core_dns"
        elif key == "kubeState":
            suggest = "kube_state"
        elif key == "nodeExporter":
            suggest = "node_exporter"
        elif key == "scrapeAnnotated":
            suggest = "scrape_annotated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsMetrics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsMetrics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsMetrics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_server: Optional[_builtins.bool] = None,
                 cadvisor: Optional[_builtins.bool] = None,
                 core_dns: Optional[_builtins.bool] = None,
                 kube_state: Optional[_builtins.bool] = None,
                 kubelet: Optional[_builtins.bool] = None,
                 node_exporter: Optional[_builtins.bool] = None,
                 scrape_annotated: Optional['outputs.Mk8sAddOnsMetricsScrapeAnnotated'] = None):
        """
        :param _builtins.bool api_server: Enable scraping apiserver stats.
        :param _builtins.bool cadvisor: Enable CNI-level container stats.
        :param _builtins.bool core_dns: Enable scraping of core-dns service.
        :param _builtins.bool kube_state: Enable kube-state metrics.
        :param _builtins.bool kubelet: Enable scraping kubelet stats.
        :param _builtins.bool node_exporter: Enable collecting node-level stats (disk, network, filesystem, etc).
        """
        if api_server is not None:
            pulumi.set(__self__, "api_server", api_server)
        if cadvisor is not None:
            pulumi.set(__self__, "cadvisor", cadvisor)
        if core_dns is not None:
            pulumi.set(__self__, "core_dns", core_dns)
        if kube_state is not None:
            pulumi.set(__self__, "kube_state", kube_state)
        if kubelet is not None:
            pulumi.set(__self__, "kubelet", kubelet)
        if node_exporter is not None:
            pulumi.set(__self__, "node_exporter", node_exporter)
        if scrape_annotated is not None:
            pulumi.set(__self__, "scrape_annotated", scrape_annotated)

    @_builtins.property
    @pulumi.getter(name="apiServer")
    def api_server(self) -> Optional[_builtins.bool]:
        """
        Enable scraping apiserver stats.
        """
        return pulumi.get(self, "api_server")

    @_builtins.property
    @pulumi.getter
    def cadvisor(self) -> Optional[_builtins.bool]:
        """
        Enable CNI-level container stats.
        """
        return pulumi.get(self, "cadvisor")

    @_builtins.property
    @pulumi.getter(name="coreDns")
    def core_dns(self) -> Optional[_builtins.bool]:
        """
        Enable scraping of core-dns service.
        """
        return pulumi.get(self, "core_dns")

    @_builtins.property
    @pulumi.getter(name="kubeState")
    def kube_state(self) -> Optional[_builtins.bool]:
        """
        Enable kube-state metrics.
        """
        return pulumi.get(self, "kube_state")

    @_builtins.property
    @pulumi.getter
    def kubelet(self) -> Optional[_builtins.bool]:
        """
        Enable scraping kubelet stats.
        """
        return pulumi.get(self, "kubelet")

    @_builtins.property
    @pulumi.getter(name="nodeExporter")
    def node_exporter(self) -> Optional[_builtins.bool]:
        """
        Enable collecting node-level stats (disk, network, filesystem, etc).
        """
        return pulumi.get(self, "node_exporter")

    @_builtins.property
    @pulumi.getter(name="scrapeAnnotated")
    def scrape_annotated(self) -> Optional['outputs.Mk8sAddOnsMetricsScrapeAnnotated']:
        return pulumi.get(self, "scrape_annotated")


@pulumi.output_type
class Mk8sAddOnsMetricsScrapeAnnotated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeNamespaces":
            suggest = "exclude_namespaces"
        elif key == "includeNamespaces":
            suggest = "include_namespaces"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "retainLabels":
            suggest = "retain_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsMetricsScrapeAnnotated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsMetricsScrapeAnnotated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsMetricsScrapeAnnotated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_namespaces: Optional[_builtins.str] = None,
                 include_namespaces: Optional[_builtins.str] = None,
                 interval_seconds: Optional[_builtins.int] = None,
                 retain_labels: Optional[_builtins.str] = None):
        if exclude_namespaces is not None:
            pulumi.set(__self__, "exclude_namespaces", exclude_namespaces)
        if include_namespaces is not None:
            pulumi.set(__self__, "include_namespaces", include_namespaces)
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if retain_labels is not None:
            pulumi.set(__self__, "retain_labels", retain_labels)

    @_builtins.property
    @pulumi.getter(name="excludeNamespaces")
    def exclude_namespaces(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "exclude_namespaces")

    @_builtins.property
    @pulumi.getter(name="includeNamespaces")
    def include_namespaces(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "include_namespaces")

    @_builtins.property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "interval_seconds")

    @_builtins.property
    @pulumi.getter(name="retainLabels")
    def retain_labels(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "retain_labels")


@pulumi.output_type
class Mk8sAddOnsNvidia(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taintGpuNodes":
            suggest = "taint_gpu_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAddOnsNvidia. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAddOnsNvidia.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAddOnsNvidia.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 taint_gpu_nodes: Optional[_builtins.bool] = None):
        if taint_gpu_nodes is not None:
            pulumi.set(__self__, "taint_gpu_nodes", taint_gpu_nodes)

    @_builtins.property
    @pulumi.getter(name="taintGpuNodes")
    def taint_gpu_nodes(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "taint_gpu_nodes")


@pulumi.output_type
class Mk8sAddOnsRegistryMirror(dict):
    def __init__(__self__, *,
                 mirrors: Optional[Sequence['outputs.Mk8sAddOnsRegistryMirrorMirror']] = None):
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)

    @_builtins.property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['outputs.Mk8sAddOnsRegistryMirrorMirror']]:
        return pulumi.get(self, "mirrors")


@pulumi.output_type
class Mk8sAddOnsRegistryMirrorMirror(dict):
    def __init__(__self__, *,
                 registry: _builtins.str,
                 mirrors: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "registry", registry)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)

    @_builtins.property
    @pulumi.getter
    def registry(self) -> _builtins.str:
        return pulumi.get(self, "registry")

    @_builtins.property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "mirrors")


@pulumi.output_type
class Mk8sAwsProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployRoleArn":
            suggest = "deploy_role_arn"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "awsTags":
            suggest = "aws_tags"
        elif key == "deployRoleChains":
            suggest = "deploy_role_chains"
        elif key == "diskEncryptionKeyArn":
            suggest = "disk_encryption_key_arn"
        elif key == "extraNodePolicies":
            suggest = "extra_node_policies"
        elif key == "keyPair":
            suggest = "key_pair"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "skipCreateRoles":
            suggest = "skip_create_roles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAwsProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAwsProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAwsProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_role_arn: _builtins.str,
                 region: _builtins.str,
                 vpc_id: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sAwsProviderAutoscaler'] = None,
                 aws_tags: Optional[Mapping[str, _builtins.str]] = None,
                 deploy_role_chains: Optional[Sequence['outputs.Mk8sAwsProviderDeployRoleChain']] = None,
                 disk_encryption_key_arn: Optional[_builtins.str] = None,
                 extra_node_policies: Optional[Sequence[_builtins.str]] = None,
                 image: Optional['outputs.Mk8sAwsProviderImage'] = None,
                 key_pair: Optional[_builtins.str] = None,
                 networking: Optional['outputs.Mk8sAwsProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sAwsProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 security_group_ids: Optional[Sequence[_builtins.str]] = None,
                 skip_create_roles: Optional[_builtins.bool] = None):
        """
        :param _builtins.str deploy_role_arn: Control Plane will set up the cluster by assuming this role.
        :param _builtins.str region: Region where the cluster nodes will live.
        :param _builtins.str vpc_id: The vpc where nodes will be deployed. Supports SSM.
        :param Mapping[str, _builtins.str] aws_tags: Extra tags to attach to all created objects.
        :param _builtins.str disk_encryption_key_arn: KMS key used to encrypt volumes. Supports SSM.
        :param 'Mk8sAwsProviderImageArgs' image: Default image for all nodes.
        :param _builtins.str key_pair: Name of keyPair. Supports SSM
        :param Sequence['Mk8sAwsProviderNodePoolArgs'] node_pools: List of node pools.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param Sequence[_builtins.str] security_group_ids: Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        :param _builtins.bool skip_create_roles: If true, Control Plane will not create any roles.
        """
        pulumi.set(__self__, "deploy_role_arn", deploy_role_arn)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if aws_tags is not None:
            pulumi.set(__self__, "aws_tags", aws_tags)
        if deploy_role_chains is not None:
            pulumi.set(__self__, "deploy_role_chains", deploy_role_chains)
        if disk_encryption_key_arn is not None:
            pulumi.set(__self__, "disk_encryption_key_arn", disk_encryption_key_arn)
        if extra_node_policies is not None:
            pulumi.set(__self__, "extra_node_policies", extra_node_policies)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if key_pair is not None:
            pulumi.set(__self__, "key_pair", key_pair)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if skip_create_roles is not None:
            pulumi.set(__self__, "skip_create_roles", skip_create_roles)

    @_builtins.property
    @pulumi.getter(name="deployRoleArn")
    def deploy_role_arn(self) -> _builtins.str:
        """
        Control Plane will set up the cluster by assuming this role.
        """
        return pulumi.get(self, "deploy_role_arn")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The vpc where nodes will be deployed. Supports SSM.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sAwsProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="awsTags")
    def aws_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra tags to attach to all created objects.
        """
        return pulumi.get(self, "aws_tags")

    @_builtins.property
    @pulumi.getter(name="deployRoleChains")
    def deploy_role_chains(self) -> Optional[Sequence['outputs.Mk8sAwsProviderDeployRoleChain']]:
        return pulumi.get(self, "deploy_role_chains")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionKeyArn")
    def disk_encryption_key_arn(self) -> Optional[_builtins.str]:
        """
        KMS key used to encrypt volumes. Supports SSM.
        """
        return pulumi.get(self, "disk_encryption_key_arn")

    @_builtins.property
    @pulumi.getter(name="extraNodePolicies")
    def extra_node_policies(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "extra_node_policies")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional['outputs.Mk8sAwsProviderImage']:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[_builtins.str]:
        """
        Name of keyPair. Supports SSM
        """
        return pulumi.get(self, "key_pair")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sAwsProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sAwsProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="skipCreateRoles")
    def skip_create_roles(self) -> Optional[_builtins.bool]:
        """
        If true, Control Plane will not create any roles.
        """
        return pulumi.get(self, "skip_create_roles")


@pulumi.output_type
class Mk8sAwsProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAwsProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAwsProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAwsProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sAwsProviderDeployRoleChain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "sessionNamePrefix":
            suggest = "session_name_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAwsProviderDeployRoleChain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAwsProviderDeployRoleChain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAwsProviderDeployRoleChain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: _builtins.str,
                 external_id: Optional[_builtins.str] = None,
                 session_name_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str session_name_prefix: Control Plane will set up the cluster by assuming this role.
        """
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if session_name_prefix is not None:
            pulumi.set(__self__, "session_name_prefix", session_name_prefix)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> _builtins.str:
        return pulumi.get(self, "role_arn")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter(name="sessionNamePrefix")
    def session_name_prefix(self) -> Optional[_builtins.str]:
        """
        Control Plane will set up the cluster by assuming this role.
        """
        return pulumi.get(self, "session_name_prefix")


@pulumi.output_type
class Mk8sAwsProviderImage(dict):
    def __init__(__self__, *,
                 exact: Optional[_builtins.str] = None,
                 recommended: Optional[_builtins.str] = None):
        """
        :param _builtins.str exact: Support SSM.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)

    @_builtins.property
    @pulumi.getter
    def exact(self) -> Optional[_builtins.str]:
        """
        Support SSM.
        """
        return pulumi.get(self, "exact")

    @_builtins.property
    @pulumi.getter
    def recommended(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recommended")


@pulumi.output_type
class Mk8sAwsProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAwsProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAwsProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAwsProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sAwsProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceTypes":
            suggest = "instance_types"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "extraSecurityGroupIds":
            suggest = "extra_security_group_ids"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "onDemandBaseCapacity":
            suggest = "on_demand_base_capacity"
        elif key == "onDemandPercentageAboveBaseCapacity":
            suggest = "on_demand_percentage_above_base_capacity"
        elif key == "overrideImage":
            suggest = "override_image"
        elif key == "spotAllocationStrategy":
            suggest = "spot_allocation_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAwsProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAwsProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAwsProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_types: Sequence[_builtins.str],
                 name: _builtins.str,
                 subnet_ids: Sequence[_builtins.str],
                 boot_disk_size: Optional[_builtins.int] = None,
                 extra_security_group_ids: Optional[Sequence[_builtins.str]] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 on_demand_base_capacity: Optional[_builtins.int] = None,
                 on_demand_percentage_above_base_capacity: Optional[_builtins.int] = None,
                 override_image: Optional['outputs.Mk8sAwsProviderNodePoolOverrideImage'] = None,
                 spot_allocation_strategy: Optional[_builtins.str] = None,
                 taints: Optional[Sequence['outputs.Mk8sAwsProviderNodePoolTaint']] = None):
        """
        :param _builtins.int boot_disk_size: Size in GB.
        :param Sequence[_builtins.str] extra_security_group_ids: Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param 'Mk8sAwsProviderNodePoolOverrideImageArgs' override_image: Default image for all nodes.
        :param Sequence['Mk8sAwsProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if boot_disk_size is not None:
            pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        if extra_security_group_ids is not None:
            pulumi.set(__self__, "extra_security_group_ids", extra_security_group_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if on_demand_base_capacity is not None:
            pulumi.set(__self__, "on_demand_base_capacity", on_demand_base_capacity)
        if on_demand_percentage_above_base_capacity is not None:
            pulumi.set(__self__, "on_demand_percentage_above_base_capacity", on_demand_percentage_above_base_capacity)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if spot_allocation_strategy is not None:
            pulumi.set(__self__, "spot_allocation_strategy", spot_allocation_strategy)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "instance_types")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[_builtins.int]:
        """
        Size in GB.
        """
        return pulumi.get(self, "boot_disk_size")

    @_builtins.property
    @pulumi.getter(name="extraSecurityGroupIds")
    def extra_security_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
        """
        return pulumi.get(self, "extra_security_group_ids")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="onDemandBaseCapacity")
    def on_demand_base_capacity(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "on_demand_base_capacity")

    @_builtins.property
    @pulumi.getter(name="onDemandPercentageAboveBaseCapacity")
    def on_demand_percentage_above_base_capacity(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "on_demand_percentage_above_base_capacity")

    @_builtins.property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional['outputs.Mk8sAwsProviderNodePoolOverrideImage']:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "override_image")

    @_builtins.property
    @pulumi.getter(name="spotAllocationStrategy")
    def spot_allocation_strategy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "spot_allocation_strategy")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sAwsProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sAwsProviderNodePoolOverrideImage(dict):
    def __init__(__self__, *,
                 exact: Optional[_builtins.str] = None,
                 recommended: Optional[_builtins.str] = None):
        """
        :param _builtins.str exact: Support SSM.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)

    @_builtins.property
    @pulumi.getter
    def exact(self) -> Optional[_builtins.str]:
        """
        Support SSM.
        """
        return pulumi.get(self, "exact")

    @_builtins.property
    @pulumi.getter
    def recommended(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recommended")


@pulumi.output_type
class Mk8sAwsProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sAzureProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "resourceGroup":
            suggest = "resource_group"
        elif key == "sdkSecretLink":
            suggest = "sdk_secret_link"
        elif key == "sshKeys":
            suggest = "ssh_keys"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAzureProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAzureProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAzureProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 network_id: _builtins.str,
                 resource_group: _builtins.str,
                 sdk_secret_link: _builtins.str,
                 ssh_keys: Sequence[_builtins.str],
                 subscription_id: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sAzureProviderAutoscaler'] = None,
                 image: Optional['outputs.Mk8sAzureProviderImage'] = None,
                 networking: Optional['outputs.Mk8sAzureProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sAzureProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str location: Region where the cluster nodes will live.
        :param _builtins.str network_id: The vpc where nodes will be deployed.
        :param Sequence[_builtins.str] ssh_keys: SSH keys to install for "azureuser" linux user
        :param 'Mk8sAzureProviderImageArgs' image: Default image for all nodes.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param Mapping[str, _builtins.str] tags: Extra tags to attach to all created objects.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "sdk_secret_link", sdk_secret_link)
        pulumi.set(__self__, "ssh_keys", ssh_keys)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        The vpc where nodes will be deployed.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="sdkSecretLink")
    def sdk_secret_link(self) -> _builtins.str:
        return pulumi.get(self, "sdk_secret_link")

    @_builtins.property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Sequence[_builtins.str]:
        """
        SSH keys to install for "azureuser" linux user
        """
        return pulumi.get(self, "ssh_keys")

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> _builtins.str:
        return pulumi.get(self, "subscription_id")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sAzureProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional['outputs.Mk8sAzureProviderImage']:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sAzureProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sAzureProviderNodePool']]:
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra tags to attach to all created objects.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class Mk8sAzureProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAzureProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAzureProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAzureProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sAzureProviderImage(dict):
    def __init__(__self__, *,
                 recommended: Optional[_builtins.str] = None,
                 reference: Optional['outputs.Mk8sAzureProviderImageReference'] = None):
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @_builtins.property
    @pulumi.getter
    def recommended(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recommended")

    @_builtins.property
    @pulumi.getter
    def reference(self) -> Optional['outputs.Mk8sAzureProviderImageReference']:
        return pulumi.get(self, "reference")


@pulumi.output_type
class Mk8sAzureProviderImageReference(dict):
    def __init__(__self__, *,
                 offer: _builtins.str,
                 publisher: _builtins.str,
                 sku: _builtins.str,
                 version: _builtins.str):
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def offer(self) -> _builtins.str:
        return pulumi.get(self, "offer")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> _builtins.str:
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter
    def sku(self) -> _builtins.str:
        return pulumi.get(self, "sku")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class Mk8sAzureProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAzureProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAzureProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAzureProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sAzureProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "overrideImage":
            suggest = "override_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sAzureProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sAzureProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sAzureProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk_size: _builtins.int,
                 name: _builtins.str,
                 size: _builtins.str,
                 subnet_id: _builtins.str,
                 zones: Sequence[_builtins.int],
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 override_image: Optional['outputs.Mk8sAzureProviderNodePoolOverrideImage'] = None,
                 taints: Optional[Sequence['outputs.Mk8sAzureProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sAzureProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zones", zones)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> _builtins.int:
        return pulumi.get(self, "boot_disk_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.str:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "zones")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional['outputs.Mk8sAzureProviderNodePoolOverrideImage']:
        return pulumi.get(self, "override_image")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sAzureProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sAzureProviderNodePoolOverrideImage(dict):
    def __init__(__self__, *,
                 recommended: Optional[_builtins.str] = None,
                 reference: Optional['outputs.Mk8sAzureProviderNodePoolOverrideImageReference'] = None):
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @_builtins.property
    @pulumi.getter
    def recommended(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recommended")

    @_builtins.property
    @pulumi.getter
    def reference(self) -> Optional['outputs.Mk8sAzureProviderNodePoolOverrideImageReference']:
        return pulumi.get(self, "reference")


@pulumi.output_type
class Mk8sAzureProviderNodePoolOverrideImageReference(dict):
    def __init__(__self__, *,
                 offer: _builtins.str,
                 publisher: _builtins.str,
                 sku: _builtins.str,
                 version: _builtins.str):
        pulumi.set(__self__, "offer", offer)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def offer(self) -> _builtins.str:
        return pulumi.get(self, "offer")

    @_builtins.property
    @pulumi.getter
    def publisher(self) -> _builtins.str:
        return pulumi.get(self, "publisher")

    @_builtins.property
    @pulumi.getter
    def sku(self) -> _builtins.str:
        return pulumi.get(self, "sku")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


@pulumi.output_type
class Mk8sAzureProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sDigitalOceanProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKeys":
            suggest = "ssh_keys"
        elif key == "tokenSecretLink":
            suggest = "token_secret_link"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "digitalOceanTags":
            suggest = "digital_ocean_tags"
        elif key == "extraSshKeys":
            suggest = "extra_ssh_keys"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "reservedIps":
            suggest = "reserved_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sDigitalOceanProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sDigitalOceanProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sDigitalOceanProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: _builtins.str,
                 region: _builtins.str,
                 ssh_keys: Sequence[_builtins.str],
                 token_secret_link: _builtins.str,
                 vpc_id: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sDigitalOceanProviderAutoscaler'] = None,
                 digital_ocean_tags: Optional[Sequence[_builtins.str]] = None,
                 extra_ssh_keys: Optional[Sequence[_builtins.str]] = None,
                 networking: Optional['outputs.Mk8sDigitalOceanProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sDigitalOceanProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 reserved_ips: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str image: Default image for all nodes.
        :param _builtins.str region: Region to deploy nodes to.
        :param Sequence[_builtins.str] ssh_keys: SSH key name for accessing deployed nodes.
        :param _builtins.str token_secret_link: Link to a secret holding personal access token.
        :param _builtins.str vpc_id: ID of the Hetzner network to deploy nodes to.
        :param Sequence[_builtins.str] digital_ocean_tags: Extra tags to attach to droplets.
        :param Sequence[_builtins.str] extra_ssh_keys: Extra SSH keys to provision for user root that are not registered in the DigitalOcean.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param Sequence[_builtins.str] reserved_ips: Optional set of IPs to assign as extra IPs for nodes of the cluster.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_keys", ssh_keys)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if digital_ocean_tags is not None:
            pulumi.set(__self__, "digital_ocean_tags", digital_ocean_tags)
        if extra_ssh_keys is not None:
            pulumi.set(__self__, "extra_ssh_keys", extra_ssh_keys)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if reserved_ips is not None:
            pulumi.set(__self__, "reserved_ips", reserved_ips)

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region to deploy nodes to.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Sequence[_builtins.str]:
        """
        SSH key name for accessing deployed nodes.
        """
        return pulumi.get(self, "ssh_keys")

    @_builtins.property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> _builtins.str:
        """
        Link to a secret holding personal access token.
        """
        return pulumi.get(self, "token_secret_link")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        ID of the Hetzner network to deploy nodes to.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sDigitalOceanProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="digitalOceanTags")
    def digital_ocean_tags(self) -> Optional[Sequence[_builtins.str]]:
        """
        Extra tags to attach to droplets.
        """
        return pulumi.get(self, "digital_ocean_tags")

    @_builtins.property
    @pulumi.getter(name="extraSshKeys")
    def extra_ssh_keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        Extra SSH keys to provision for user root that are not registered in the DigitalOcean.
        """
        return pulumi.get(self, "extra_ssh_keys")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sDigitalOceanProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sDigitalOceanProviderNodePool']]:
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        Optional set of IPs to assign as extra IPs for nodes of the cluster.
        """
        return pulumi.get(self, "reserved_ips")


@pulumi.output_type
class Mk8sDigitalOceanProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sDigitalOceanProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sDigitalOceanProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sDigitalOceanProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sDigitalOceanProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sDigitalOceanProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sDigitalOceanProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sDigitalOceanProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sDigitalOceanProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dropletSize":
            suggest = "droplet_size"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "overrideImage":
            suggest = "override_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sDigitalOceanProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sDigitalOceanProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sDigitalOceanProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 droplet_size: _builtins.str,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 override_image: Optional[_builtins.str] = None,
                 taints: Optional[Sequence['outputs.Mk8sDigitalOceanProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sDigitalOceanProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "droplet_size", droplet_size)
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="dropletSize")
    def droplet_size(self) -> _builtins.str:
        return pulumi.get(self, "droplet_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "override_image")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sDigitalOceanProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sDigitalOceanProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sEphemeralProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodePools":
            suggest = "node_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sEphemeralProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sEphemeralProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sEphemeralProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 node_pools: Optional[Sequence['outputs.Mk8sEphemeralProviderNodePool']] = None):
        """
        :param _builtins.str location: Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        :param Sequence['Mk8sEphemeralProviderNodePoolArgs'] node_pools: List of node pools.
        """
        pulumi.set(__self__, "location", location)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sEphemeralProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")


@pulumi.output_type
class Mk8sEphemeralProviderNodePool(dict):
    def __init__(__self__, *,
                 arch: _builtins.str,
                 count: _builtins.int,
                 cpu: _builtins.str,
                 memory: _builtins.str,
                 name: _builtins.str,
                 flavor: Optional[_builtins.str] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 taints: Optional[Sequence['outputs.Mk8sEphemeralProviderNodePoolTaint']] = None):
        """
        :param _builtins.str arch: CPU architecture of the nodes.
        :param _builtins.int count: Number of nodes to deploy.
        :param _builtins.str cpu: Allocated CPU.
        :param _builtins.str memory: Allocated memory.
        :param _builtins.str flavor: Linux distro to use for ephemeral nodes.
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sEphemeralProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def arch(self) -> _builtins.str:
        """
        CPU architecture of the nodes.
        """
        return pulumi.get(self, "arch")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Number of nodes to deploy.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        Allocated CPU.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Allocated memory.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[_builtins.str]:
        """
        Linux distro to use for ephemeral nodes.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sEphemeralProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sEphemeralProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sFirewall(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceCidr":
            suggest = "source_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sFirewall. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sFirewall.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sFirewall.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_cidr: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "source_cidr", source_cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> _builtins.str:
        return pulumi.get(self, "source_cidr")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class Mk8sGcpProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"
        elif key == "saKeyLink":
            suggest = "sa_key_link"
        elif key == "gcpLabels":
            suggest = "gcp_labels"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sGcpProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sGcpProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sGcpProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: _builtins.str,
                 project_id: _builtins.str,
                 region: _builtins.str,
                 sa_key_link: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sGcpProviderAutoscaler'] = None,
                 gcp_labels: Optional[Mapping[str, _builtins.str]] = None,
                 image: Optional['outputs.Mk8sGcpProviderImage'] = None,
                 networking: Optional['outputs.Mk8sGcpProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sGcpProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None):
        """
        :param _builtins.str network: VPC network used by the cluster.
        :param _builtins.str project_id: GCP project ID that hosts the cluster infrastructure.
        :param _builtins.str region: Region where the cluster nodes will live.
        :param _builtins.str sa_key_link: Link to a secret containing the service account JSON key.
        :param Mapping[str, _builtins.str] gcp_labels: Extra tags to attach to all created objects.
        :param 'Mk8sGcpProviderImageArgs' image: Default image for all nodes.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "sa_key_link", sa_key_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if gcp_labels is not None:
            pulumi.set(__self__, "gcp_labels", gcp_labels)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)

    @_builtins.property
    @pulumi.getter
    def network(self) -> _builtins.str:
        """
        VPC network used by the cluster.
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        GCP project ID that hosts the cluster infrastructure.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="saKeyLink")
    def sa_key_link(self) -> _builtins.str:
        """
        Link to a secret containing the service account JSON key.
        """
        return pulumi.get(self, "sa_key_link")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sGcpProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="gcpLabels")
    def gcp_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra tags to attach to all created objects.
        """
        return pulumi.get(self, "gcp_labels")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional['outputs.Mk8sGcpProviderImage']:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sGcpProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sGcpProviderNodePool']]:
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")


@pulumi.output_type
class Mk8sGcpProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sGcpProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sGcpProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sGcpProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sGcpProviderImage(dict):
    def __init__(__self__, *,
                 recommended: Optional[_builtins.str] = None):
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)

    @_builtins.property
    @pulumi.getter
    def recommended(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recommended")


@pulumi.output_type
class Mk8sGcpProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sGcpProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sGcpProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sGcpProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sGcpProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "overrideImage":
            suggest = "override_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sGcpProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sGcpProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sGcpProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk_size: _builtins.int,
                 machine_type: _builtins.str,
                 name: _builtins.str,
                 subnet: _builtins.str,
                 zone: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 override_image: Optional['outputs.Mk8sGcpProviderNodePoolOverrideImage'] = None,
                 taints: Optional[Sequence['outputs.Mk8sGcpProviderNodePoolTaint']] = None):
        """
        :param _builtins.int boot_disk_size: Size in GB.
        :param _builtins.str machine_type: GCE machine type for nodes in this pool.
        :param _builtins.str subnet: Subnet within the selected network.
        :param _builtins.str zone: Zone where the pool nodes run.
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sGcpProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "zone", zone)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> _builtins.int:
        """
        Size in GB.
        """
        return pulumi.get(self, "boot_disk_size")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> _builtins.str:
        """
        GCE machine type for nodes in this pool.
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> _builtins.str:
        """
        Subnet within the selected network.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        """
        Zone where the pool nodes run.
        """
        return pulumi.get(self, "zone")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional['outputs.Mk8sGcpProviderNodePoolOverrideImage']:
        return pulumi.get(self, "override_image")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sGcpProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sGcpProviderNodePoolOverrideImage(dict):
    def __init__(__self__, *,
                 recommended: Optional[_builtins.str] = None):
        if recommended is not None:
            pulumi.set(__self__, "recommended", recommended)

    @_builtins.property
    @pulumi.getter
    def recommended(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "recommended")


@pulumi.output_type
class Mk8sGcpProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sGenericProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodePools":
            suggest = "node_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sGenericProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sGenericProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sGenericProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 networking: Optional['outputs.Mk8sGenericProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sGenericProviderNodePool']] = None):
        """
        :param _builtins.str location: Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        :param Sequence['Mk8sGenericProviderNodePoolArgs'] node_pools: List of node pools.
        """
        pulumi.set(__self__, "location", location)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sGenericProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sGenericProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")


@pulumi.output_type
class Mk8sGenericProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sGenericProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sGenericProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sGenericProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sGenericProviderNodePool(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 taints: Optional[Sequence['outputs.Mk8sGenericProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sGenericProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sGenericProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sGenericProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sHetznerProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "tokenSecretLink":
            suggest = "token_secret_link"
        elif key == "dedicatedServerNodePools":
            suggest = "dedicated_server_node_pools"
        elif key == "firewallId":
            suggest = "firewall_id"
        elif key == "floatingIpSelector":
            suggest = "floating_ip_selector"
        elif key == "hetznerLabels":
            suggest = "hetzner_labels"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "sshKey":
            suggest = "ssh_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sHetznerProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sHetznerProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sHetznerProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: _builtins.str,
                 region: _builtins.str,
                 token_secret_link: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sHetznerProviderAutoscaler'] = None,
                 dedicated_server_node_pools: Optional[Sequence['outputs.Mk8sHetznerProviderDedicatedServerNodePool']] = None,
                 firewall_id: Optional[_builtins.str] = None,
                 floating_ip_selector: Optional[Mapping[str, _builtins.str]] = None,
                 hetzner_labels: Optional[Mapping[str, _builtins.str]] = None,
                 image: Optional[_builtins.str] = None,
                 networking: Optional['outputs.Mk8sHetznerProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sHetznerProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 ssh_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str network_id: ID of the Hetzner network to deploy nodes to.
        :param _builtins.str region: Hetzner region to deploy nodes to.
        :param _builtins.str token_secret_link: Link to a secret holding Hetzner access key.
        :param Sequence['Mk8sHetznerProviderDedicatedServerNodePoolArgs'] dedicated_server_node_pools: Node pools that can configure dedicated Hetzner servers.
        :param _builtins.str firewall_id: Optional firewall rule to attach to all nodes.
        :param Mapping[str, _builtins.str] floating_ip_selector: If supplied, nodes will get assigned a random floating ip matching the selector.
        :param Mapping[str, _builtins.str] hetzner_labels: Extra labels to attach to servers.
        :param _builtins.str image: Default image for all nodes.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param _builtins.str ssh_key: SSH key name for accessing deployed nodes.
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if dedicated_server_node_pools is not None:
            pulumi.set(__self__, "dedicated_server_node_pools", dedicated_server_node_pools)
        if firewall_id is not None:
            pulumi.set(__self__, "firewall_id", firewall_id)
        if floating_ip_selector is not None:
            pulumi.set(__self__, "floating_ip_selector", floating_ip_selector)
        if hetzner_labels is not None:
            pulumi.set(__self__, "hetzner_labels", hetzner_labels)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if ssh_key is not None:
            pulumi.set(__self__, "ssh_key", ssh_key)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        ID of the Hetzner network to deploy nodes to.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Hetzner region to deploy nodes to.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> _builtins.str:
        """
        Link to a secret holding Hetzner access key.
        """
        return pulumi.get(self, "token_secret_link")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sHetznerProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="dedicatedServerNodePools")
    def dedicated_server_node_pools(self) -> Optional[Sequence['outputs.Mk8sHetznerProviderDedicatedServerNodePool']]:
        """
        Node pools that can configure dedicated Hetzner servers.
        """
        return pulumi.get(self, "dedicated_server_node_pools")

    @_builtins.property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[_builtins.str]:
        """
        Optional firewall rule to attach to all nodes.
        """
        return pulumi.get(self, "firewall_id")

    @_builtins.property
    @pulumi.getter(name="floatingIpSelector")
    def floating_ip_selector(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        If supplied, nodes will get assigned a random floating ip matching the selector.
        """
        return pulumi.get(self, "floating_ip_selector")

    @_builtins.property
    @pulumi.getter(name="hetznerLabels")
    def hetzner_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra labels to attach to servers.
        """
        return pulumi.get(self, "hetzner_labels")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sHetznerProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sHetznerProviderNodePool']]:
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[_builtins.str]:
        """
        SSH key name for accessing deployed nodes.
        """
        return pulumi.get(self, "ssh_key")


@pulumi.output_type
class Mk8sHetznerProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sHetznerProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sHetznerProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sHetznerProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sHetznerProviderDedicatedServerNodePool(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 taints: Optional[Sequence['outputs.Mk8sHetznerProviderDedicatedServerNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sHetznerProviderDedicatedServerNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sHetznerProviderDedicatedServerNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sHetznerProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sHetznerProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sHetznerProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sHetznerProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sHetznerProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverType":
            suggest = "server_type"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "overrideImage":
            suggest = "override_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sHetznerProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sHetznerProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sHetznerProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 server_type: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 override_image: Optional[_builtins.str] = None,
                 taints: Optional[Sequence['outputs.Mk8sHetznerProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sHetznerProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_type", server_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> _builtins.str:
        return pulumi.get(self, "server_type")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "override_image")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sHetznerProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sHetznerProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sLambdalabsProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKey":
            suggest = "ssh_key"
        elif key == "tokenSecretLink":
            suggest = "token_secret_link"
        elif key == "fileSystems":
            suggest = "file_systems"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "unmanagedNodePools":
            suggest = "unmanaged_node_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLambdalabsProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLambdalabsProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLambdalabsProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: _builtins.str,
                 ssh_key: _builtins.str,
                 token_secret_link: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sLambdalabsProviderAutoscaler'] = None,
                 file_systems: Optional[Sequence[_builtins.str]] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sLambdalabsProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 unmanaged_node_pools: Optional[Sequence['outputs.Mk8sLambdalabsProviderUnmanagedNodePool']] = None):
        """
        :param _builtins.str region: Region where the cluster nodes will live.
        :param _builtins.str ssh_key: SSH key name for accessing deployed nodes.
        :param _builtins.str token_secret_link: Link to a secret holding Lambdalabs access key.
        :param Sequence['Mk8sLambdalabsProviderNodePoolArgs'] node_pools: List of node pools.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if file_systems is not None:
            pulumi.set(__self__, "file_systems", file_systems)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if unmanaged_node_pools is not None:
            pulumi.set(__self__, "unmanaged_node_pools", unmanaged_node_pools)

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> _builtins.str:
        """
        SSH key name for accessing deployed nodes.
        """
        return pulumi.get(self, "ssh_key")

    @_builtins.property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> _builtins.str:
        """
        Link to a secret holding Lambdalabs access key.
        """
        return pulumi.get(self, "token_secret_link")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sLambdalabsProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="fileSystems")
    def file_systems(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "file_systems")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sLambdalabsProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[Sequence['outputs.Mk8sLambdalabsProviderUnmanagedNodePool']]:
        return pulumi.get(self, "unmanaged_node_pools")


@pulumi.output_type
class Mk8sLambdalabsProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLambdalabsProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLambdalabsProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLambdalabsProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sLambdalabsProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLambdalabsProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLambdalabsProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLambdalabsProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: _builtins.str,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 taints: Optional[Sequence['outputs.Mk8sLambdalabsProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sLambdalabsProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sLambdalabsProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sLambdalabsProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sLambdalabsProviderUnmanagedNodePool(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 taints: Optional[Sequence['outputs.Mk8sLambdalabsProviderUnmanagedNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sLambdalabsProviderUnmanagedNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sLambdalabsProviderUnmanagedNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sLinodeProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenSecretLink":
            suggest = "token_secret_link"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "authorizedKeys":
            suggest = "authorized_keys"
        elif key == "authorizedUsers":
            suggest = "authorized_users"
        elif key == "firewallId":
            suggest = "firewall_id"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLinodeProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLinodeProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLinodeProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: _builtins.str,
                 region: _builtins.str,
                 token_secret_link: _builtins.str,
                 vpc_id: _builtins.str,
                 authorized_keys: Optional[Sequence[_builtins.str]] = None,
                 authorized_users: Optional[Sequence[_builtins.str]] = None,
                 autoscaler: Optional['outputs.Mk8sLinodeProviderAutoscaler'] = None,
                 firewall_id: Optional[_builtins.str] = None,
                 networking: Optional['outputs.Mk8sLinodeProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sLinodeProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None):
        """
        :param _builtins.str image: Default image for all nodes.
        :param _builtins.str region: Region where the cluster nodes will live.
        :param _builtins.str token_secret_link: Link to a secret holding Linode access key.
        :param _builtins.str vpc_id: The vpc where nodes will be deployed. Supports SSM.
        :param _builtins.str firewall_id: Optional firewall rule to attach to all nodes.
        :param Sequence['Mk8sLinodeProviderNodePoolArgs'] node_pools: List of node pools.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if authorized_keys is not None:
            pulumi.set(__self__, "authorized_keys", authorized_keys)
        if authorized_users is not None:
            pulumi.set(__self__, "authorized_users", authorized_users)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if firewall_id is not None:
            pulumi.set(__self__, "firewall_id", firewall_id)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> _builtins.str:
        """
        Link to a secret holding Linode access key.
        """
        return pulumi.get(self, "token_secret_link")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The vpc where nodes will be deployed. Supports SSM.
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="authorizedKeys")
    def authorized_keys(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "authorized_keys")

    @_builtins.property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "authorized_users")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sLinodeProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[_builtins.str]:
        """
        Optional firewall rule to attach to all nodes.
        """
        return pulumi.get(self, "firewall_id")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sLinodeProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sLinodeProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")


@pulumi.output_type
class Mk8sLinodeProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLinodeProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLinodeProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLinodeProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sLinodeProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLinodeProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLinodeProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLinodeProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sLinodeProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverType":
            suggest = "server_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "overrideImage":
            suggest = "override_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sLinodeProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sLinodeProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sLinodeProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 server_type: _builtins.str,
                 subnet_id: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 override_image: Optional[_builtins.str] = None,
                 taints: Optional[Sequence['outputs.Mk8sLinodeProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sLinodeProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image is not None:
            pulumi.set(__self__, "override_image", override_image)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> _builtins.str:
        return pulumi.get(self, "server_type")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "override_image")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sLinodeProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sLinodeProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sOblivusProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenSecretLink":
            suggest = "token_secret_link"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "sshKeys":
            suggest = "ssh_keys"
        elif key == "unmanagedNodePools":
            suggest = "unmanaged_node_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sOblivusProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sOblivusProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sOblivusProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: _builtins.str,
                 token_secret_link: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sOblivusProviderAutoscaler'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sOblivusProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 ssh_keys: Optional[Sequence[_builtins.str]] = None,
                 unmanaged_node_pools: Optional[Sequence['outputs.Mk8sOblivusProviderUnmanagedNodePool']] = None):
        """
        :param _builtins.str token_secret_link: Link to a secret holding Oblivus access key.
        :param Sequence['Mk8sOblivusProviderNodePoolArgs'] node_pools: List of node pools.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if unmanaged_node_pools is not None:
            pulumi.set(__self__, "unmanaged_node_pools", unmanaged_node_pools)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> _builtins.str:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> _builtins.str:
        """
        Link to a secret holding Oblivus access key.
        """
        return pulumi.get(self, "token_secret_link")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sOblivusProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sOblivusProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "ssh_keys")

    @_builtins.property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[Sequence['outputs.Mk8sOblivusProviderUnmanagedNodePool']]:
        return pulumi.get(self, "unmanaged_node_pools")


@pulumi.output_type
class Mk8sOblivusProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sOblivusProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sOblivusProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sOblivusProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sOblivusProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sOblivusProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sOblivusProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sOblivusProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor: _builtins.str,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 taints: Optional[Sequence['outputs.Mk8sOblivusProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sOblivusProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sOblivusProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sOblivusProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sOblivusProviderUnmanagedNodePool(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 taints: Optional[Sequence['outputs.Mk8sOblivusProviderUnmanagedNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sOblivusProviderUnmanagedNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sOblivusProviderUnmanagedNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sPaperspaceProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "tokenSecretLink":
            suggest = "token_secret_link"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "sharedDrives":
            suggest = "shared_drives"
        elif key == "unmanagedNodePools":
            suggest = "unmanaged_node_pools"
        elif key == "userIds":
            suggest = "user_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sPaperspaceProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sPaperspaceProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sPaperspaceProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: _builtins.str,
                 region: _builtins.str,
                 token_secret_link: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sPaperspaceProviderAutoscaler'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sPaperspaceProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 shared_drives: Optional[Sequence[_builtins.str]] = None,
                 unmanaged_node_pools: Optional[Sequence['outputs.Mk8sPaperspaceProviderUnmanagedNodePool']] = None,
                 user_ids: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str region: Region where the cluster nodes will live.
        :param _builtins.str token_secret_link: Link to a secret holding Paperspace access key.
        :param Sequence['Mk8sPaperspaceProviderNodePoolArgs'] node_pools: List of node pools.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "token_secret_link", token_secret_link)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if shared_drives is not None:
            pulumi.set(__self__, "shared_drives", shared_drives)
        if unmanaged_node_pools is not None:
            pulumi.set(__self__, "unmanaged_node_pools", unmanaged_node_pools)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region where the cluster nodes will live.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> _builtins.str:
        """
        Link to a secret holding Paperspace access key.
        """
        return pulumi.get(self, "token_secret_link")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sPaperspaceProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sPaperspaceProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="sharedDrives")
    def shared_drives(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "shared_drives")

    @_builtins.property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[Sequence['outputs.Mk8sPaperspaceProviderUnmanagedNodePool']]:
        return pulumi.get(self, "unmanaged_node_pools")

    @_builtins.property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "user_ids")


@pulumi.output_type
class Mk8sPaperspaceProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sPaperspaceProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sPaperspaceProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sPaperspaceProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sPaperspaceProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineType":
            suggest = "machine_type"
        elif key == "publicIpType":
            suggest = "public_ip_type"
        elif key == "bootDiskSize":
            suggest = "boot_disk_size"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sPaperspaceProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sPaperspaceProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sPaperspaceProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 machine_type: _builtins.str,
                 name: _builtins.str,
                 public_ip_type: _builtins.str,
                 boot_disk_size: Optional[_builtins.int] = None,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 taints: Optional[Sequence['outputs.Mk8sPaperspaceProviderNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sPaperspaceProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip_type", public_ip_type)
        if boot_disk_size is not None:
            pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> _builtins.str:
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicIpType")
    def public_ip_type(self) -> _builtins.str:
        return pulumi.get(self, "public_ip_type")

    @_builtins.property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "boot_disk_size")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sPaperspaceProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sPaperspaceProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sPaperspaceProviderUnmanagedNodePool(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 taints: Optional[Sequence['outputs.Mk8sPaperspaceProviderUnmanagedNodePoolTaint']] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        """
        pulumi.set(__self__, "name", name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sPaperspaceProviderUnmanagedNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class Mk8sPaperspaceProviderUnmanagedNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class Mk8sStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOns":
            suggest = "add_ons"
        elif key == "homeLocation":
            suggest = "home_location"
        elif key == "oidcProviderUrl":
            suggest = "oidc_provider_url"
        elif key == "serverUrl":
            suggest = "server_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_ons: Optional[Sequence['outputs.Mk8sStatusAddOn']] = None,
                 home_location: Optional[_builtins.str] = None,
                 oidc_provider_url: Optional[_builtins.str] = None,
                 server_url: Optional[_builtins.str] = None):
        if add_ons is not None:
            pulumi.set(__self__, "add_ons", add_ons)
        if home_location is not None:
            pulumi.set(__self__, "home_location", home_location)
        if oidc_provider_url is not None:
            pulumi.set(__self__, "oidc_provider_url", oidc_provider_url)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)

    @_builtins.property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[Sequence['outputs.Mk8sStatusAddOn']]:
        return pulumi.get(self, "add_ons")

    @_builtins.property
    @pulumi.getter(name="homeLocation")
    def home_location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "home_location")

    @_builtins.property
    @pulumi.getter(name="oidcProviderUrl")
    def oidc_provider_url(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "oidc_provider_url")

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "server_url")


@pulumi.output_type
class Mk8sStatusAddOn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsEcrs":
            suggest = "aws_ecrs"
        elif key == "awsEfs":
            suggest = "aws_efs"
        elif key == "awsElbs":
            suggest = "aws_elbs"
        elif key == "awsWorkloadIdentities":
            suggest = "aws_workload_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_ecrs: Optional[Sequence['outputs.Mk8sStatusAddOnAwsEcr']] = None,
                 aws_efs: Optional[Sequence['outputs.Mk8sStatusAddOnAwsEf']] = None,
                 aws_elbs: Optional[Sequence['outputs.Mk8sStatusAddOnAwsElb']] = None,
                 aws_workload_identities: Optional[Sequence['outputs.Mk8sStatusAddOnAwsWorkloadIdentity']] = None,
                 dashboards: Optional[Sequence['outputs.Mk8sStatusAddOnDashboard']] = None,
                 logs: Optional[Sequence['outputs.Mk8sStatusAddOnLog']] = None,
                 metrics: Optional[Sequence['outputs.Mk8sStatusAddOnMetric']] = None):
        if aws_ecrs is not None:
            pulumi.set(__self__, "aws_ecrs", aws_ecrs)
        if aws_efs is not None:
            pulumi.set(__self__, "aws_efs", aws_efs)
        if aws_elbs is not None:
            pulumi.set(__self__, "aws_elbs", aws_elbs)
        if aws_workload_identities is not None:
            pulumi.set(__self__, "aws_workload_identities", aws_workload_identities)
        if dashboards is not None:
            pulumi.set(__self__, "dashboards", dashboards)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @_builtins.property
    @pulumi.getter(name="awsEcrs")
    def aws_ecrs(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnAwsEcr']]:
        return pulumi.get(self, "aws_ecrs")

    @_builtins.property
    @pulumi.getter(name="awsEfs")
    def aws_efs(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnAwsEf']]:
        return pulumi.get(self, "aws_efs")

    @_builtins.property
    @pulumi.getter(name="awsElbs")
    def aws_elbs(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnAwsElb']]:
        return pulumi.get(self, "aws_elbs")

    @_builtins.property
    @pulumi.getter(name="awsWorkloadIdentities")
    def aws_workload_identities(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnAwsWorkloadIdentity']]:
        return pulumi.get(self, "aws_workload_identities")

    @_builtins.property
    @pulumi.getter
    def dashboards(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnDashboard']]:
        return pulumi.get(self, "dashboards")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnLog']]:
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnMetric']]:
        return pulumi.get(self, "metrics")


@pulumi.output_type
class Mk8sStatusAddOnAwsEcr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustPolicy":
            suggest = "trust_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnAwsEcr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnAwsEcr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnAwsEcr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trust_policy: Optional[_builtins.str] = None):
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @_builtins.property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trust_policy")


@pulumi.output_type
class Mk8sStatusAddOnAwsEf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustPolicy":
            suggest = "trust_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnAwsEf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnAwsEf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnAwsEf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trust_policy: Optional[_builtins.str] = None):
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @_builtins.property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trust_policy")


@pulumi.output_type
class Mk8sStatusAddOnAwsElb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustPolicy":
            suggest = "trust_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnAwsElb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnAwsElb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnAwsElb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trust_policy: Optional[_builtins.str] = None):
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @_builtins.property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trust_policy")


@pulumi.output_type
class Mk8sStatusAddOnAwsWorkloadIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oidcProviderConfigs":
            suggest = "oidc_provider_configs"
        elif key == "trustPolicy":
            suggest = "trust_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnAwsWorkloadIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnAwsWorkloadIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnAwsWorkloadIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 oidc_provider_configs: Optional[Sequence['outputs.Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig']] = None,
                 trust_policy: Optional[_builtins.str] = None):
        if oidc_provider_configs is not None:
            pulumi.set(__self__, "oidc_provider_configs", oidc_provider_configs)
        if trust_policy is not None:
            pulumi.set(__self__, "trust_policy", trust_policy)

    @_builtins.property
    @pulumi.getter(name="oidcProviderConfigs")
    def oidc_provider_configs(self) -> Optional[Sequence['outputs.Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig']]:
        return pulumi.get(self, "oidc_provider_configs")

    @_builtins.property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trust_policy")


@pulumi.output_type
class Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "providerUrl":
            suggest = "provider_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audience: Optional[_builtins.str] = None,
                 provider_url: Optional[_builtins.str] = None):
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if provider_url is not None:
            pulumi.set(__self__, "provider_url", provider_url)

    @_builtins.property
    @pulumi.getter
    def audience(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "audience")

    @_builtins.property
    @pulumi.getter(name="providerUrl")
    def provider_url(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "provider_url")


@pulumi.output_type
class Mk8sStatusAddOnDashboard(dict):
    def __init__(__self__, *,
                 url: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: Access to dashboard.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        Access to dashboard.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class Mk8sStatusAddOnLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lokiAddress":
            suggest = "loki_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 loki_address: Optional[_builtins.str] = None):
        """
        :param _builtins.str loki_address: Loki endpoint to query logs from.
        """
        if loki_address is not None:
            pulumi.set(__self__, "loki_address", loki_address)

    @_builtins.property
    @pulumi.getter(name="lokiAddress")
    def loki_address(self) -> Optional[_builtins.str]:
        """
        Loki endpoint to query logs from.
        """
        return pulumi.get(self, "loki_address")


@pulumi.output_type
class Mk8sStatusAddOnMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prometheusEndpoint":
            suggest = "prometheus_endpoint"
        elif key == "remoteWriteConfig":
            suggest = "remote_write_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sStatusAddOnMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sStatusAddOnMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sStatusAddOnMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prometheus_endpoint: Optional[_builtins.str] = None,
                 remote_write_config: Optional[_builtins.str] = None):
        if prometheus_endpoint is not None:
            pulumi.set(__self__, "prometheus_endpoint", prometheus_endpoint)
        if remote_write_config is not None:
            pulumi.set(__self__, "remote_write_config", remote_write_config)

    @_builtins.property
    @pulumi.getter(name="prometheusEndpoint")
    def prometheus_endpoint(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prometheus_endpoint")

    @_builtins.property
    @pulumi.getter(name="remoteWriteConfig")
    def remote_write_config(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "remote_write_config")


@pulumi.output_type
class Mk8sTritonProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageId":
            suggest = "image_id"
        elif key == "privateNetworkId":
            suggest = "private_network_id"
        elif key == "firewallEnabled":
            suggest = "firewall_enabled"
        elif key == "loadBalancer":
            suggest = "load_balancer"
        elif key == "nodePools":
            suggest = "node_pools"
        elif key == "preInstallScript":
            suggest = "pre_install_script"
        elif key == "sshKeys":
            suggest = "ssh_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_id: _builtins.str,
                 location: _builtins.str,
                 private_network_id: _builtins.str,
                 autoscaler: Optional['outputs.Mk8sTritonProviderAutoscaler'] = None,
                 connection: Optional['outputs.Mk8sTritonProviderConnection'] = None,
                 firewall_enabled: Optional[_builtins.bool] = None,
                 load_balancer: Optional['outputs.Mk8sTritonProviderLoadBalancer'] = None,
                 networking: Optional['outputs.Mk8sTritonProviderNetworking'] = None,
                 node_pools: Optional[Sequence['outputs.Mk8sTritonProviderNodePool']] = None,
                 pre_install_script: Optional[_builtins.str] = None,
                 ssh_keys: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str image_id: Default image for all nodes.
        :param _builtins.str location: Control Plane location that will host the K8s components. Prefer one that is closest to the Triton datacenter.
        :param _builtins.str private_network_id: ID of the private Fabric/Network.
        :param _builtins.bool firewall_enabled: Enable firewall for the instances deployed.
        :param Sequence['Mk8sTritonProviderNodePoolArgs'] node_pools: List of node pools.
        :param _builtins.str pre_install_script: Optional shell script that will be run before K8s is installed. Supports SSM.
        :param Sequence[_builtins.str] ssh_keys: Extra SSH keys to provision for user root.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "private_network_id", private_network_id)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if firewall_enabled is not None:
            pulumi.set(__self__, "firewall_enabled", firewall_enabled)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if pre_install_script is not None:
            pulumi.set(__self__, "pre_install_script", pre_install_script)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        Default image for all nodes.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Control Plane location that will host the K8s components. Prefer one that is closest to the Triton datacenter.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="privateNetworkId")
    def private_network_id(self) -> _builtins.str:
        """
        ID of the private Fabric/Network.
        """
        return pulumi.get(self, "private_network_id")

    @_builtins.property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.Mk8sTritonProviderAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @_builtins.property
    @pulumi.getter
    def connection(self) -> Optional['outputs.Mk8sTritonProviderConnection']:
        return pulumi.get(self, "connection")

    @_builtins.property
    @pulumi.getter(name="firewallEnabled")
    def firewall_enabled(self) -> Optional[_builtins.bool]:
        """
        Enable firewall for the instances deployed.
        """
        return pulumi.get(self, "firewall_enabled")

    @_builtins.property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional['outputs.Mk8sTritonProviderLoadBalancer']:
        return pulumi.get(self, "load_balancer")

    @_builtins.property
    @pulumi.getter
    def networking(self) -> Optional['outputs.Mk8sTritonProviderNetworking']:
        return pulumi.get(self, "networking")

    @_builtins.property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[Sequence['outputs.Mk8sTritonProviderNodePool']]:
        """
        List of node pools.
        """
        return pulumi.get(self, "node_pools")

    @_builtins.property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[_builtins.str]:
        """
        Optional shell script that will be run before K8s is installed. Supports SSM.
        """
        return pulumi.get(self, "pre_install_script")

    @_builtins.property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        Extra SSH keys to provision for user root.
        """
        return pulumi.get(self, "ssh_keys")


@pulumi.output_type
class Mk8sTritonProviderAutoscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unneededTime":
            suggest = "unneeded_time"
        elif key == "unreadyTime":
            suggest = "unready_time"
        elif key == "utilizationThreshold":
            suggest = "utilization_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProviderAutoscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProviderAutoscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProviderAutoscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expanders: Optional[Sequence[_builtins.str]] = None,
                 unneeded_time: Optional[_builtins.str] = None,
                 unready_time: Optional[_builtins.str] = None,
                 utilization_threshold: Optional[_builtins.float] = None):
        if expanders is not None:
            pulumi.set(__self__, "expanders", expanders)
        if unneeded_time is not None:
            pulumi.set(__self__, "unneeded_time", unneeded_time)
        if unready_time is not None:
            pulumi.set(__self__, "unready_time", unready_time)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)

    @_builtins.property
    @pulumi.getter
    def expanders(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "expanders")

    @_builtins.property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unneeded_time")

    @_builtins.property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unready_time")

    @_builtins.property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "utilization_threshold")


@pulumi.output_type
class Mk8sTritonProviderConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKeySecretLink":
            suggest = "private_key_secret_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProviderConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProviderConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProviderConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: _builtins.str,
                 private_key_secret_link: _builtins.str,
                 url: _builtins.str,
                 user: Optional[_builtins.str] = None):
        """
        :param _builtins.str private_key_secret_link: Link to a SSH or opaque secret.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "private_key_secret_link", private_key_secret_link)
        pulumi.set(__self__, "url", url)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="privateKeySecretLink")
    def private_key_secret_link(self) -> _builtins.str:
        """
        Link to a SSH or opaque secret.
        """
        return pulumi.get(self, "private_key_secret_link")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class Mk8sTritonProviderLoadBalancer(dict):
    def __init__(__self__, *,
                 gateway: Optional['outputs.Mk8sTritonProviderLoadBalancerGateway'] = None,
                 manual: Optional['outputs.Mk8sTritonProviderLoadBalancerManual'] = None,
                 none: Optional['outputs.Mk8sTritonProviderLoadBalancerNone'] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)
        if none is not None:
            pulumi.set(__self__, "none", none)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional['outputs.Mk8sTritonProviderLoadBalancerGateway']:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def manual(self) -> Optional['outputs.Mk8sTritonProviderLoadBalancerManual']:
        return pulumi.get(self, "manual")

    @_builtins.property
    @pulumi.getter
    def none(self) -> Optional['outputs.Mk8sTritonProviderLoadBalancerNone']:
        return pulumi.get(self, "none")


@pulumi.output_type
class Mk8sTritonProviderLoadBalancerGateway(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class Mk8sTritonProviderLoadBalancerManual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cnsInternalDomain":
            suggest = "cns_internal_domain"
        elif key == "cnsPublicDomain":
            suggest = "cns_public_domain"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "packageId":
            suggest = "package_id"
        elif key == "privateNetworkIds":
            suggest = "private_network_ids"
        elif key == "publicNetworkId":
            suggest = "public_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProviderLoadBalancerManual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProviderLoadBalancerManual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProviderLoadBalancerManual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cns_internal_domain: _builtins.str,
                 cns_public_domain: _builtins.str,
                 image_id: _builtins.str,
                 package_id: _builtins.str,
                 private_network_ids: Sequence[_builtins.str],
                 public_network_id: _builtins.str,
                 count: Optional[_builtins.int] = None,
                 logging: Optional['outputs.Mk8sTritonProviderLoadBalancerManualLogging'] = None,
                 metadata: Optional[Mapping[str, _builtins.str]] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Sequence[_builtins.str] private_network_ids: If set, machine will also get a public IP.
        :param _builtins.str public_network_id: If set, machine will also get a public IP.
        :param Mapping[str, _builtins.str] metadata: Extra tags to attach to instances from a node pool.
        :param Mapping[str, _builtins.str] tags: Extra tags to attach to instances from a node pool.
        """
        pulumi.set(__self__, "cns_internal_domain", cns_internal_domain)
        pulumi.set(__self__, "cns_public_domain", cns_public_domain)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "package_id", package_id)
        pulumi.set(__self__, "private_network_ids", private_network_ids)
        pulumi.set(__self__, "public_network_id", public_network_id)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="cnsInternalDomain")
    def cns_internal_domain(self) -> _builtins.str:
        return pulumi.get(self, "cns_internal_domain")

    @_builtins.property
    @pulumi.getter(name="cnsPublicDomain")
    def cns_public_domain(self) -> _builtins.str:
        return pulumi.get(self, "cns_public_domain")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> _builtins.str:
        return pulumi.get(self, "package_id")

    @_builtins.property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Sequence[_builtins.str]:
        """
        If set, machine will also get a public IP.
        """
        return pulumi.get(self, "private_network_ids")

    @_builtins.property
    @pulumi.getter(name="publicNetworkId")
    def public_network_id(self) -> _builtins.str:
        """
        If set, machine will also get a public IP.
        """
        return pulumi.get(self, "public_network_id")

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def logging(self) -> Optional['outputs.Mk8sTritonProviderLoadBalancerManualLogging']:
        return pulumi.get(self, "logging")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra tags to attach to instances from a node pool.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra tags to attach to instances from a node pool.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class Mk8sTritonProviderLoadBalancerManualLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSyslog":
            suggest = "external_syslog"
        elif key == "nodePort":
            suggest = "node_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProviderLoadBalancerManualLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProviderLoadBalancerManualLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProviderLoadBalancerManualLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_syslog: Optional[_builtins.str] = None,
                 node_port: Optional[_builtins.int] = None):
        if external_syslog is not None:
            pulumi.set(__self__, "external_syslog", external_syslog)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @_builtins.property
    @pulumi.getter(name="externalSyslog")
    def external_syslog(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "external_syslog")

    @_builtins.property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "node_port")


@pulumi.output_type
class Mk8sTritonProviderLoadBalancerNone(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class Mk8sTritonProviderNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsForwarder":
            suggest = "dns_forwarder"
        elif key == "podNetwork":
            suggest = "pod_network"
        elif key == "serviceNetwork":
            suggest = "service_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProviderNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProviderNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProviderNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_forwarder: Optional[_builtins.str] = None,
                 pod_network: Optional[_builtins.str] = None,
                 service_network: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_forwarder: DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        :param _builtins.str pod_network: The CIDR of the pod network.
        :param _builtins.str service_network: The CIDR of the service network.
        """
        if dns_forwarder is not None:
            pulumi.set(__self__, "dns_forwarder", dns_forwarder)
        if pod_network is not None:
            pulumi.set(__self__, "pod_network", pod_network)
        if service_network is not None:
            pulumi.set(__self__, "service_network", service_network)

    @_builtins.property
    @pulumi.getter(name="dnsForwarder")
    def dns_forwarder(self) -> Optional[_builtins.str]:
        """
        DNS forwarder used by the cluster. Can be a space-delimited list of dns servers. Default is /etc/resolv.conf when not specified.
        """
        return pulumi.get(self, "dns_forwarder")

    @_builtins.property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the pod network.
        """
        return pulumi.get(self, "pod_network")

    @_builtins.property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[_builtins.str]:
        """
        The CIDR of the service network.
        """
        return pulumi.get(self, "service_network")


@pulumi.output_type
class Mk8sTritonProviderNodePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "overrideImageId":
            suggest = "override_image_id"
        elif key == "privateNetworkIds":
            suggest = "private_network_ids"
        elif key == "publicNetworkId":
            suggest = "public_network_id"
        elif key == "tritonTags":
            suggest = "triton_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Mk8sTritonProviderNodePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Mk8sTritonProviderNodePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Mk8sTritonProviderNodePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 package_id: _builtins.str,
                 labels: Optional[Mapping[str, _builtins.str]] = None,
                 max_size: Optional[_builtins.int] = None,
                 min_size: Optional[_builtins.int] = None,
                 override_image_id: Optional[_builtins.str] = None,
                 private_network_ids: Optional[Sequence[_builtins.str]] = None,
                 public_network_id: Optional[_builtins.str] = None,
                 taints: Optional[Sequence['outputs.Mk8sTritonProviderNodePoolTaint']] = None,
                 triton_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param Mapping[str, _builtins.str] labels: Labels to attach to nodes of a node pool.
        :param Sequence[_builtins.str] private_network_ids: More private networks to join.
        :param _builtins.str public_network_id: If set, machine will also get a public IP.
        :param Sequence['Mk8sTritonProviderNodePoolTaintArgs'] taints: Taint for the nodes of a pool.
        :param Mapping[str, _builtins.str] triton_tags: Extra tags to attach to instances from a node pool.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if override_image_id is not None:
            pulumi.set(__self__, "override_image_id", override_image_id)
        if private_network_ids is not None:
            pulumi.set(__self__, "private_network_ids", private_network_ids)
        if public_network_id is not None:
            pulumi.set(__self__, "public_network_id", public_network_id)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if triton_tags is not None:
            pulumi.set(__self__, "triton_tags", triton_tags)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> _builtins.str:
        return pulumi.get(self, "package_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Labels to attach to nodes of a node pool.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_size")

    @_builtins.property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "min_size")

    @_builtins.property
    @pulumi.getter(name="overrideImageId")
    def override_image_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "override_image_id")

    @_builtins.property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        More private networks to join.
        """
        return pulumi.get(self, "private_network_ids")

    @_builtins.property
    @pulumi.getter(name="publicNetworkId")
    def public_network_id(self) -> Optional[_builtins.str]:
        """
        If set, machine will also get a public IP.
        """
        return pulumi.get(self, "public_network_id")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.Mk8sTritonProviderNodePoolTaint']]:
        """
        Taint for the nodes of a pool.
        """
        return pulumi.get(self, "taints")

    @_builtins.property
    @pulumi.getter(name="tritonTags")
    def triton_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Extra tags to attach to instances from a node pool.
        """
        return pulumi.get(self, "triton_tags")


@pulumi.output_type
class Mk8sTritonProviderNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OrgAuthConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainAutoMembers":
            suggest = "domain_auto_members"
        elif key == "samlOnly":
            suggest = "saml_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgAuthConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgAuthConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgAuthConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_auto_members: Sequence[_builtins.str],
                 saml_only: Optional[_builtins.bool] = None):
        """
        :param Sequence[_builtins.str] domain_auto_members: List of domains which will auto-provision users when authenticating using SAML.
        :param _builtins.bool saml_only: Enforce SAML only authentication.
        """
        pulumi.set(__self__, "domain_auto_members", domain_auto_members)
        if saml_only is not None:
            pulumi.set(__self__, "saml_only", saml_only)

    @_builtins.property
    @pulumi.getter(name="domainAutoMembers")
    def domain_auto_members(self) -> Sequence[_builtins.str]:
        """
        List of domains which will auto-provision users when authenticating using SAML.
        """
        return pulumi.get(self, "domain_auto_members")

    @_builtins.property
    @pulumi.getter(name="samlOnly")
    def saml_only(self) -> Optional[_builtins.bool]:
        """
        Enforce SAML only authentication.
        """
        return pulumi.get(self, "saml_only")


@pulumi.output_type
class OrgLoggingCloudWatchLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "extractFields":
            suggest = "extract_fields"
        elif key == "retentionDays":
            suggest = "retention_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLoggingCloudWatchLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLoggingCloudWatchLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLoggingCloudWatchLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: _builtins.str,
                 group_name: _builtins.str,
                 region: _builtins.str,
                 stream_name: _builtins.str,
                 extract_fields: Optional[Mapping[str, _builtins.str]] = None,
                 retention_days: Optional[_builtins.int] = None):
        """
        :param _builtins.str credentials: Full Link to a secret of type `opaque`.
        :param _builtins.str group_name: A container for log streams with common settings like retention. Used to categorize logs by application or service type.
        :param _builtins.str region: Valid AWS region.
        :param _builtins.str stream_name: A sequence of log events from the same source within a log group. Typically represents individual instances of services or applications.
        :param Mapping[str, _builtins.str] extract_fields: Enable custom data extraction from log entries for enhanced querying and analysis.
        :param _builtins.int retention_days: Length, in days, for how log data is kept before it is automatically deleted.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "stream_name", stream_name)
        if extract_fields is not None:
            pulumi.set(__self__, "extract_fields", extract_fields)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full Link to a secret of type `opaque`.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        A container for log streams with common settings like retention. Used to categorize logs by application or service type.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Valid AWS region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> _builtins.str:
        """
        A sequence of log events from the same source within a log group. Typically represents individual instances of services or applications.
        """
        return pulumi.get(self, "stream_name")

    @_builtins.property
    @pulumi.getter(name="extractFields")
    def extract_fields(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Enable custom data extraction from log entries for enhanced querying and analysis.
        """
        return pulumi.get(self, "extract_fields")

    @_builtins.property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[_builtins.int]:
        """
        Length, in days, for how log data is kept before it is automatically deleted.
        """
        return pulumi.get(self, "retention_days")


@pulumi.output_type
class OrgLoggingCoralogixLogging(dict):
    def __init__(__self__, *,
                 cluster: _builtins.str,
                 credentials: _builtins.str,
                 app: Optional[_builtins.str] = None,
                 subsystem: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster: Coralogix cluster URI.
        :param _builtins.str credentials: Full link to referenced Opaque Secret.
        :param _builtins.str app: App name to be displayed in Coralogix dashboard.
        :param _builtins.str subsystem: Subsystem name to be displayed in Coralogix dashboard.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "credentials", credentials)
        if app is not None:
            pulumi.set(__self__, "app", app)
        if subsystem is not None:
            pulumi.set(__self__, "subsystem", subsystem)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        """
        Coralogix cluster URI.
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def app(self) -> Optional[_builtins.str]:
        """
        App name to be displayed in Coralogix dashboard.
        """
        return pulumi.get(self, "app")

    @_builtins.property
    @pulumi.getter
    def subsystem(self) -> Optional[_builtins.str]:
        """
        Subsystem name to be displayed in Coralogix dashboard.
        """
        return pulumi.get(self, "subsystem")


@pulumi.output_type
class OrgLoggingDatadogLogging(dict):
    def __init__(__self__, *,
                 credentials: _builtins.str,
                 host: _builtins.str):
        """
        :param _builtins.str credentials: Full link to referenced Opaque Secret.
        :param _builtins.str host: Datadog host URI.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "host", host)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Datadog host URI.
        """
        return pulumi.get(self, "host")


@pulumi.output_type
class OrgLoggingElasticLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticCloud":
            suggest = "elastic_cloud"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLoggingElasticLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLoggingElasticLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLoggingElasticLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws: Optional['outputs.OrgLoggingElasticLoggingAws'] = None,
                 elastic_cloud: Optional['outputs.OrgLoggingElasticLoggingElasticCloud'] = None,
                 generic: Optional['outputs.OrgLoggingElasticLoggingGeneric'] = None):
        """
        :param 'OrgLoggingElasticLoggingAwsArgs' aws: For targeting Amazon Web Services (AWS) ElasticSearch.
        :param 'OrgLoggingElasticLoggingElasticCloudArgs' elastic_cloud: For targeting Elastic Cloud.
        :param 'OrgLoggingElasticLoggingGenericArgs' generic: For targeting generic Elastic Search providers.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if elastic_cloud is not None:
            pulumi.set(__self__, "elastic_cloud", elastic_cloud)
        if generic is not None:
            pulumi.set(__self__, "generic", generic)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional['outputs.OrgLoggingElasticLoggingAws']:
        """
        For targeting Amazon Web Services (AWS) ElasticSearch.
        """
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter(name="elasticCloud")
    def elastic_cloud(self) -> Optional['outputs.OrgLoggingElasticLoggingElasticCloud']:
        """
        For targeting Elastic Cloud.
        """
        return pulumi.get(self, "elastic_cloud")

    @_builtins.property
    @pulumi.getter
    def generic(self) -> Optional['outputs.OrgLoggingElasticLoggingGeneric']:
        """
        For targeting generic Elastic Search providers.
        """
        return pulumi.get(self, "generic")


@pulumi.output_type
class OrgLoggingElasticLoggingAws(dict):
    def __init__(__self__, *,
                 credentials: _builtins.str,
                 host: _builtins.str,
                 index: _builtins.str,
                 port: _builtins.int,
                 region: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str credentials: Full Link to a secret of type `aws`.
        :param _builtins.str host: A valid AWS ElasticSearch hostname (must end with es.amazonaws.com).
        :param _builtins.str index: Logging Index.
        :param _builtins.int port: Port. Default: 443
        :param _builtins.str region: Valid AWS region.
        :param _builtins.str type: Logging Type.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full Link to a secret of type `aws`.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        A valid AWS ElasticSearch hostname (must end with es.amazonaws.com).
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.str:
        """
        Logging Index.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port. Default: 443
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Valid AWS region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Logging Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OrgLoggingElasticLoggingElasticCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudId":
            suggest = "cloud_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLoggingElasticLoggingElasticCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLoggingElasticLoggingElasticCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLoggingElasticLoggingElasticCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_id: _builtins.str,
                 credentials: _builtins.str,
                 index: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str cloud_id: [Cloud ID](https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html)
        :param _builtins.str credentials: Full Link to a secret of type `userpass`.
        :param _builtins.str index: Logging Index.
        :param _builtins.str type: Logging Type.
        """
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> _builtins.str:
        """
        [Cloud ID](https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html)
        """
        return pulumi.get(self, "cloud_id")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full Link to a secret of type `userpass`.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.str:
        """
        Logging Index.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Logging Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OrgLoggingElasticLoggingGeneric(dict):
    def __init__(__self__, *,
                 credentials: _builtins.str,
                 host: _builtins.str,
                 index: _builtins.str,
                 path: _builtins.str,
                 port: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str credentials: Full Link to a secret of type `userpass`.
        :param _builtins.str host: A valid Elastic Search provider hostname.
        :param _builtins.str index: Logging Index.
        :param _builtins.str path: Logging path.
        :param _builtins.int port: Port. Default: 443
        :param _builtins.str type: Logging Type.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full Link to a secret of type `userpass`.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        A valid Elastic Search provider hostname.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def index(self) -> _builtins.str:
        """
        Logging Index.
        """
        return pulumi.get(self, "index")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Logging path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port. Default: 443
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Logging Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class OrgLoggingFluentdLogging(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 port: Optional[_builtins.int] = None):
        """
        :param _builtins.str host: The hostname or IP address of a remote log storage system.
        :param _builtins.int port: Port. Default: 24224
        """
        pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The hostname or IP address of a remote log storage system.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Port. Default: 24224
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class OrgLoggingLogzioLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerHost":
            suggest = "listener_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgLoggingLogzioLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgLoggingLogzioLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgLoggingLogzioLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credentials: _builtins.str,
                 listener_host: _builtins.str):
        """
        :param _builtins.str credentials: Full link to referenced Opaque Secret.
        :param _builtins.str listener_host: Logzio listener host URI.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "listener_host", listener_host)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="listenerHost")
    def listener_host(self) -> _builtins.str:
        """
        Logzio listener host URI.
        """
        return pulumi.get(self, "listener_host")


@pulumi.output_type
class OrgLoggingS3Logging(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 credentials: _builtins.str,
                 region: _builtins.str,
                 prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: Name of S3 bucket.
        :param _builtins.str credentials: Full link to referenced AWS Secret.
        :param _builtins.str region: AWS region where bucket is located.
        :param _builtins.str prefix: Bucket path prefix. Default: "/".
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "region", region)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Name of S3 bucket.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full link to referenced AWS Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        AWS region where bucket is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Bucket path prefix. Default: "/".
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class OrgLoggingStackdriverLogging(dict):
    def __init__(__self__, *,
                 credentials: _builtins.str,
                 location: _builtins.str):
        """
        :param _builtins.str credentials: Full Link to a secret of type `opaque`.
        :param _builtins.str location: A Google Cloud Provider region.
        """
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "location", location)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> _builtins.str:
        """
        Full Link to a secret of type `opaque`.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        A Google Cloud Provider region.
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class OrgLoggingSyslogLogging(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 port: _builtins.int,
                 format: Optional[_builtins.str] = None,
                 mode: Optional[_builtins.str] = None,
                 severity: Optional[_builtins.int] = None):
        """
        :param _builtins.str host: Hostname of Syslog Endpoint.
        :param _builtins.int port: Port of Syslog Endpoint.
        :param _builtins.str format: Log Format. Valid values: RFC3164 or RFC5424.
        :param _builtins.str mode: Log Mode. Valid values: TCP, TLS, or UDP.
        :param _builtins.int severity: Severity Level. See documentation for details. Valid values: 0 to 7.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Hostname of Syslog Endpoint.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port of Syslog Endpoint.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[_builtins.str]:
        """
        Log Format. Valid values: RFC3164 or RFC5424.
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Log Mode. Valid values: TCP, TLS, or UDP.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[_builtins.int]:
        """
        Severity Level. See documentation for details. Valid values: 0 to 7.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class OrgObservability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAlertEmails":
            suggest = "default_alert_emails"
        elif key == "logsRetentionDays":
            suggest = "logs_retention_days"
        elif key == "metricsRetentionDays":
            suggest = "metrics_retention_days"
        elif key == "tracesRetentionDays":
            suggest = "traces_retention_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgObservability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgObservability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgObservability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_alert_emails: Optional[Sequence[_builtins.str]] = None,
                 logs_retention_days: Optional[_builtins.int] = None,
                 metrics_retention_days: Optional[_builtins.int] = None,
                 traces_retention_days: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] default_alert_emails: These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        :param _builtins.int logs_retention_days: Log retention days. Default: 30
        :param _builtins.int metrics_retention_days: Metrics retention days. Default: 30
        :param _builtins.int traces_retention_days: Traces retention days. Default: 30
        """
        if default_alert_emails is not None:
            pulumi.set(__self__, "default_alert_emails", default_alert_emails)
        if logs_retention_days is not None:
            pulumi.set(__self__, "logs_retention_days", logs_retention_days)
        if metrics_retention_days is not None:
            pulumi.set(__self__, "metrics_retention_days", metrics_retention_days)
        if traces_retention_days is not None:
            pulumi.set(__self__, "traces_retention_days", traces_retention_days)

    @_builtins.property
    @pulumi.getter(name="defaultAlertEmails")
    def default_alert_emails(self) -> Optional[Sequence[_builtins.str]]:
        """
        These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        """
        return pulumi.get(self, "default_alert_emails")

    @_builtins.property
    @pulumi.getter(name="logsRetentionDays")
    def logs_retention_days(self) -> Optional[_builtins.int]:
        """
        Log retention days. Default: 30
        """
        return pulumi.get(self, "logs_retention_days")

    @_builtins.property
    @pulumi.getter(name="metricsRetentionDays")
    def metrics_retention_days(self) -> Optional[_builtins.int]:
        """
        Metrics retention days. Default: 30
        """
        return pulumi.get(self, "metrics_retention_days")

    @_builtins.property
    @pulumi.getter(name="tracesRetentionDays")
    def traces_retention_days(self) -> Optional[_builtins.int]:
        """
        Traces retention days. Default: 30
        """
        return pulumi.get(self, "traces_retention_days")


@pulumi.output_type
class OrgSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "threatDetection":
            suggest = "threat_detection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 threat_detection: Optional['outputs.OrgSecurityThreatDetection'] = None):
        if threat_detection is not None:
            pulumi.set(__self__, "threat_detection", threat_detection)

    @_builtins.property
    @pulumi.getter(name="threatDetection")
    def threat_detection(self) -> Optional['outputs.OrgSecurityThreatDetection']:
        return pulumi.get(self, "threat_detection")


@pulumi.output_type
class OrgSecurityThreatDetection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumSeverity":
            suggest = "minimum_severity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgSecurityThreatDetection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgSecurityThreatDetection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgSecurityThreatDetection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 minimum_severity: Optional[_builtins.str] = None,
                 syslog: Optional['outputs.OrgSecurityThreatDetectionSyslog'] = None):
        """
        :param _builtins.bool enabled: Indicates whether threat detection should be forwarded or not.
        :param _builtins.str minimum_severity: Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        :param 'OrgSecurityThreatDetectionSyslogArgs' syslog: Configuration for syslog forwarding.
        """
        pulumi.set(__self__, "enabled", enabled)
        if minimum_severity is not None:
            pulumi.set(__self__, "minimum_severity", minimum_severity)
        if syslog is not None:
            pulumi.set(__self__, "syslog", syslog)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indicates whether threat detection should be forwarded or not.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="minimumSeverity")
    def minimum_severity(self) -> Optional[_builtins.str]:
        """
        Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        """
        return pulumi.get(self, "minimum_severity")

    @_builtins.property
    @pulumi.getter
    def syslog(self) -> Optional['outputs.OrgSecurityThreatDetectionSyslog']:
        """
        Configuration for syslog forwarding.
        """
        return pulumi.get(self, "syslog")


@pulumi.output_type
class OrgSecurityThreatDetectionSyslog(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 port: _builtins.int,
                 transport: Optional[_builtins.str] = None):
        """
        :param _builtins.str host: The hostname to send syslog messages to.
        :param _builtins.int port: The port to send syslog messages to.
        :param _builtins.str transport: The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The hostname to send syslog messages to.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port to send syslog messages to.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def transport(self) -> Optional[_builtins.str]:
        """
        The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class OrgStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountLink":
            suggest = "account_link"
        elif key == "endpointPrefix":
            suggest = "endpoint_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_link: Optional[_builtins.str] = None,
                 active: Optional[_builtins.bool] = None,
                 endpoint_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_link: The link of the account the org belongs to.
        :param _builtins.bool active: Indicates whether the org is active or not.
        """
        if account_link is not None:
            pulumi.set(__self__, "account_link", account_link)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if endpoint_prefix is not None:
            pulumi.set(__self__, "endpoint_prefix", endpoint_prefix)

    @_builtins.property
    @pulumi.getter(name="accountLink")
    def account_link(self) -> Optional[_builtins.str]:
        """
        The link of the account the org belongs to.
        """
        return pulumi.get(self, "account_link")

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the org is active or not.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="endpointPrefix")
    def endpoint_prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_prefix")


@pulumi.output_type
class OrgTracingControlplaneTracing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgTracingControlplaneTracing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgTracingControlplaneTracing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgTracingControlplaneTracing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sampling: _builtins.float,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class OrgTracingLightstepTracing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgTracingLightstepTracing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgTracingLightstepTracing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgTracingLightstepTracing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 sampling: _builtins.float,
                 credentials: Optional[_builtins.str] = None,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param _builtins.str credentials: Full link to referenced Opaque Secret.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[_builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class OrgTracingOtelTracing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTags":
            suggest = "custom_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgTracingOtelTracing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgTracingOtelTracing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgTracingOtelTracing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 sampling: _builtins.float,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class PolicyBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalLinks":
            suggest = "principal_links"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permissions: Sequence[_builtins.str],
                 principal_links: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] permissions: List of permissions to allow.
        :param Sequence[_builtins.str] principal_links: List of the principals this binding will be applied to. Principal links format: `group/GROUP_NAME`, `user/USER_EMAIL`, `gvc/GVC_NAME/identity/IDENTITY_NAME`, `serviceaccount/SERVICE_ACCOUNT_NAME`.
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "principal_links", principal_links)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence[_builtins.str]:
        """
        List of permissions to allow.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="principalLinks")
    def principal_links(self) -> Sequence[_builtins.str]:
        """
        List of the principals this binding will be applied to. Principal links format: `group/GROUP_NAME`, `user/USER_EMAIL`, `gvc/GVC_NAME/identity/IDENTITY_NAME`, `serviceaccount/SERVICE_ACCOUNT_NAME`.
        """
        return pulumi.get(self, "principal_links")


@pulumi.output_type
class PolicyTargetQuery(dict):
    def __init__(__self__, *,
                 fetch: Optional[_builtins.str] = None,
                 spec: Optional['outputs.PolicyTargetQuerySpec'] = None):
        """
        :param _builtins.str fetch: Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        if fetch is not None:
            pulumi.set(__self__, "fetch", fetch)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @_builtins.property
    @pulumi.getter
    def fetch(self) -> Optional[_builtins.str]:
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        return pulumi.get(self, "fetch")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional['outputs.PolicyTargetQuerySpec']:
        return pulumi.get(self, "spec")


@pulumi.output_type
class PolicyTargetQuerySpec(dict):
    def __init__(__self__, *,
                 match: Optional[_builtins.str] = None,
                 terms: Optional[Sequence['outputs.PolicyTargetQuerySpecTerm']] = None):
        """
        :param _builtins.str match: Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        :param Sequence['PolicyTargetQuerySpecTermArgs'] terms: Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        if match is not None:
            pulumi.set(__self__, "match", match)
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @_builtins.property
    @pulumi.getter
    def match(self) -> Optional[_builtins.str]:
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        return pulumi.get(self, "match")

    @_builtins.property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['outputs.PolicyTargetQuerySpecTerm']]:
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        return pulumi.get(self, "terms")


@pulumi.output_type
class PolicyTargetQuerySpecTerm(dict):
    def __init__(__self__, *,
                 op: Optional[_builtins.str] = None,
                 property: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None,
                 tag: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str op: Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        :param _builtins.str property: Property to use for query evaluation.
        :param _builtins.str rel: Relation to use for query evaluation.
        :param _builtins.str tag: Tag key to use for query evaluation.
        :param _builtins.str value: Testing value for query evaluation.
        """
        if op is not None:
            pulumi.set(__self__, "op", op)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def op(self) -> Optional[_builtins.str]:
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        return pulumi.get(self, "op")

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[_builtins.str]:
        """
        Property to use for query evaluation.
        """
        return pulumi.get(self, "property")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        Relation to use for query evaluation.
        """
        return pulumi.get(self, "rel")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        """
        Tag key to use for query evaluation.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Testing value for query evaluation.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SecretAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: _builtins.str,
                 secret_key: _builtins.str,
                 external_id: Optional[_builtins.str] = None,
                 role_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_key: Access Key provided by AWS.
        :param _builtins.str secret_key: Secret Key provided by AWS.
        :param _builtins.str external_id: AWS IAM Role External ID.
        :param _builtins.str role_arn: Role ARN provided by AWS.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "secret_key", secret_key)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[_builtins.str]:
        """
        AWS IAM Role External ID.
        """
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class SecretAzureConnector(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str code: Code/Key to authenticate to deployment URL.
        :param _builtins.str url: Deployment URL.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Code/Key to authenticate to deployment URL.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Deployment URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class SecretEcr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretEcr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretEcr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretEcr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: _builtins.str,
                 repos: Sequence[_builtins.str],
                 secret_key: _builtins.str,
                 external_id: Optional[_builtins.str] = None,
                 role_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_key: Access Key provided by AWS.
        :param Sequence[_builtins.str] repos: List of ECR repositories.
        :param _builtins.str secret_key: Secret Key provided by AWS.
        :param _builtins.str external_id: AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        :param _builtins.str role_arn: Role ARN provided by AWS.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "repos", repos)
        pulumi.set(__self__, "secret_key", secret_key)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter
    def repos(self) -> Sequence[_builtins.str]:
        """
        List of ECR repositories.
        """
        return pulumi.get(self, "repos")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[_builtins.str]:
        """
        AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class SecretKeypair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretKey":
            suggest = "secret_key"
        elif key == "publicKey":
            suggest = "public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretKeypair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretKeypair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretKeypair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_key: _builtins.str,
                 passphrase: Optional[_builtins.str] = None,
                 public_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_key: Secret/Private Key.
        :param _builtins.str passphrase: Passphrase for private key.
        :param _builtins.str public_key: Public Key.
        """
        pulumi.set(__self__, "secret_key", secret_key)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Secret/Private Key.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[_builtins.str]:
        """
        Passphrase for private key.
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[_builtins.str]:
        """
        Public Key.
        """
        return pulumi.get(self, "public_key")


@pulumi.output_type
class SecretNatsAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretNatsAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretNatsAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretNatsAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 private_key: _builtins.str):
        """
        :param _builtins.str account_id: Account ID.
        :param _builtins.str private_key: Private Key.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "private_key", private_key)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        Private Key.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class SecretOpaque(dict):
    def __init__(__self__, *,
                 payload: _builtins.str,
                 encoding: Optional[_builtins.str] = None):
        """
        :param _builtins.str payload: Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        :param _builtins.str encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        """
        pulumi.set(__self__, "payload", payload)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)

    @_builtins.property
    @pulumi.getter
    def payload(self) -> _builtins.str:
        """
        Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        return pulumi.get(self, "payload")

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> Optional[_builtins.str]:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")


@pulumi.output_type
class SecretTls(dict):
    def __init__(__self__, *,
                 cert: _builtins.str,
                 key: _builtins.str,
                 chain: Optional[_builtins.str] = None):
        """
        :param _builtins.str cert: Public Certificate.
        :param _builtins.str key: Private Certificate.
        :param _builtins.str chain: Chain Certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)
        if chain is not None:
            pulumi.set(__self__, "chain", chain)

    @_builtins.property
    @pulumi.getter
    def cert(self) -> _builtins.str:
        """
        Public Certificate.
        """
        return pulumi.get(self, "cert")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Private Certificate.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def chain(self) -> Optional[_builtins.str]:
        """
        Chain Certificate.
        """
        return pulumi.get(self, "chain")


@pulumi.output_type
class SecretUserpass(dict):
    def __init__(__self__, *,
                 password: _builtins.str,
                 username: _builtins.str,
                 encoding: Optional[_builtins.str] = None):
        """
        :param _builtins.str password: Password.
        :param _builtins.str username: Username.
        :param _builtins.str encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> Optional[_builtins.str]:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")


@pulumi.output_type
class VolumeSetAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCapacity":
            suggest = "max_capacity"
        elif key == "minFreePercentage":
            suggest = "min_free_percentage"
        elif key == "scalingFactor":
            suggest = "scaling_factor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSetAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSetAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSetAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_capacity: Optional[_builtins.int] = None,
                 min_free_percentage: Optional[_builtins.int] = None,
                 scaling_factor: Optional[_builtins.float] = None):
        """
        :param _builtins.int max_capacity: The maximum size in GB for a volume in this set. A volume cannot grow to be bigger than this value. Minimum value: `10`.
        :param _builtins.int min_free_percentage: The guaranteed free space on the volume as a percentage of the volume's total size. Control Plane will try to maintain at least that many percent free by scaling up the total size. Minimum percentage: `1`. Maximum Percentage: `100`.
        :param _builtins.float scaling_factor: When scaling is necessary, then `new_capacity = current_capacity * storageScalingFactor`. Minimum value: `1.1`.
        """
        if max_capacity is not None:
            pulumi.set(__self__, "max_capacity", max_capacity)
        if min_free_percentage is not None:
            pulumi.set(__self__, "min_free_percentage", min_free_percentage)
        if scaling_factor is not None:
            pulumi.set(__self__, "scaling_factor", scaling_factor)

    @_builtins.property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[_builtins.int]:
        """
        The maximum size in GB for a volume in this set. A volume cannot grow to be bigger than this value. Minimum value: `10`.
        """
        return pulumi.get(self, "max_capacity")

    @_builtins.property
    @pulumi.getter(name="minFreePercentage")
    def min_free_percentage(self) -> Optional[_builtins.int]:
        """
        The guaranteed free space on the volume as a percentage of the volume's total size. Control Plane will try to maintain at least that many percent free by scaling up the total size. Minimum percentage: `1`. Maximum Percentage: `100`.
        """
        return pulumi.get(self, "min_free_percentage")

    @_builtins.property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> Optional[_builtins.float]:
        """
        When scaling is necessary, then `new_capacity = current_capacity * storageScalingFactor`. Minimum value: `1.1`.
        """
        return pulumi.get(self, "scaling_factor")


@pulumi.output_type
class VolumeSetCustomEncryption(dict):
    def __init__(__self__, *,
                 regions: Mapping[str, 'outputs.VolumeSetCustomEncryptionRegions']):
        """
        :param Mapping[str, 'VolumeSetCustomEncryptionRegionsArgs'] regions: Map of region identifiers to encryption key configuration.
        """
        pulumi.set(__self__, "regions", regions)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Mapping[str, 'outputs.VolumeSetCustomEncryptionRegions']:
        """
        Map of region identifiers to encryption key configuration.
        """
        return pulumi.get(self, "regions")


@pulumi.output_type
class VolumeSetCustomEncryptionRegions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSetCustomEncryptionRegions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSetCustomEncryptionRegions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSetCustomEncryptionRegions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_id: _builtins.str):
        pulumi.set(__self__, "key_id", key_id)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class VolumeSetMountOptions(dict):
    def __init__(__self__, *,
                 resources: Optional['outputs.VolumeSetMountOptionsResources'] = None):
        """
        :param 'VolumeSetMountOptionsResourcesArgs' resources: For volume sets using the shared file system, this object specifies the CPU and memory resources allotted to each mount point.
        """
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional['outputs.VolumeSetMountOptionsResources']:
        """
        For volume sets using the shared file system, this object specifies the CPU and memory resources allotted to each mount point.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class VolumeSetMountOptionsResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCpu":
            suggest = "max_cpu"
        elif key == "maxMemory":
            suggest = "max_memory"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSetMountOptionsResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSetMountOptionsResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSetMountOptionsResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cpu: Optional[_builtins.str] = None,
                 max_memory: Optional[_builtins.str] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None):
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "min_memory")


@pulumi.output_type
class VolumeSetSnapshots(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createFinalSnapshot":
            suggest = "create_final_snapshot"
        elif key == "retentionDuration":
            suggest = "retention_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSetSnapshots. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSetSnapshots.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSetSnapshots.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_final_snapshot: Optional[_builtins.bool] = None,
                 retention_duration: Optional[_builtins.str] = None,
                 schedule: Optional[_builtins.str] = None):
        """
        :param _builtins.bool create_final_snapshot: If true, a volume snapshot will be created immediately before deletion of any volume in this set. Default: `true`
        :param _builtins.str retention_duration: The default retention period for volume snapshots. This string should contain a floating point number followed by either d, h, or m. For example, "10d" would retain snapshots for 10 days.
        :param _builtins.str schedule: A standard cron schedule expression used to determine when a snapshot will be taken. (i.e., `0 * * * *` Every hour). Note: snapshots cannot be scheduled more often than once per hour.
        """
        if create_final_snapshot is not None:
            pulumi.set(__self__, "create_final_snapshot", create_final_snapshot)
        if retention_duration is not None:
            pulumi.set(__self__, "retention_duration", retention_duration)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @_builtins.property
    @pulumi.getter(name="createFinalSnapshot")
    def create_final_snapshot(self) -> Optional[_builtins.bool]:
        """
        If true, a volume snapshot will be created immediately before deletion of any volume in this set. Default: `true`
        """
        return pulumi.get(self, "create_final_snapshot")

    @_builtins.property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[_builtins.str]:
        """
        The default retention period for volume snapshots. This string should contain a floating point number followed by either d, h, or m. For example, "10d" would retain snapshots for 10 days.
        """
        return pulumi.get(self, "retention_duration")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[_builtins.str]:
        """
        A standard cron schedule expression used to determine when a snapshot will be taken. (i.e., `0 * * * *` Every hour). Note: snapshots cannot be scheduled more often than once per hour.
        """
        return pulumi.get(self, "schedule")


@pulumi.output_type
class VolumeSetStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindingId":
            suggest = "binding_id"
        elif key == "parentId":
            suggest = "parent_id"
        elif key == "usedByWorkload":
            suggest = "used_by_workload"
        elif key == "workloadLinks":
            suggest = "workload_links"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSetStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSetStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSetStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binding_id: Optional[_builtins.str] = None,
                 locations: Optional[Sequence[_builtins.str]] = None,
                 parent_id: Optional[_builtins.str] = None,
                 used_by_workload: Optional[_builtins.str] = None,
                 workload_links: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str binding_id: Uniquely identifies the connection between the volume set and its workload. Every time a new connection is made, a new id is generated (e.g., If a workload is updated to remove the volume set, then updated again to reattach it, the volume set will have a new binding id).
        :param Sequence[_builtins.str] locations: Contains a list of actual volumes grouped by location.
        :param _builtins.str parent_id: The GVC ID.
        :param _builtins.str used_by_workload: The url of the workload currently using this volume set (if any).
        :param Sequence[_builtins.str] workload_links: Contains a list of workload links that are using this volume set.
        """
        if binding_id is not None:
            pulumi.set(__self__, "binding_id", binding_id)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if used_by_workload is not None:
            pulumi.set(__self__, "used_by_workload", used_by_workload)
        if workload_links is not None:
            pulumi.set(__self__, "workload_links", workload_links)

    @_builtins.property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> Optional[_builtins.str]:
        """
        Uniquely identifies the connection between the volume set and its workload. Every time a new connection is made, a new id is generated (e.g., If a workload is updated to remove the volume set, then updated again to reattach it, the volume set will have a new binding id).
        """
        return pulumi.get(self, "binding_id")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[_builtins.str]]:
        """
        Contains a list of actual volumes grouped by location.
        """
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[_builtins.str]:
        """
        The GVC ID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="usedByWorkload")
    def used_by_workload(self) -> Optional[_builtins.str]:
        """
        The url of the workload currently using this volume set (if any).
        """
        return pulumi.get(self, "used_by_workload")

    @_builtins.property
    @pulumi.getter(name="workloadLinks")
    def workload_links(self) -> Optional[Sequence[_builtins.str]]:
        """
        Contains a list of workload links that are using this volume set.
        """
        return pulumi.get(self, "workload_links")


@pulumi.output_type
class WorkloadContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gpuCustom":
            suggest = "gpu_custom"
        elif key == "gpuNvidia":
            suggest = "gpu_nvidia"
        elif key == "inheritEnv":
            suggest = "inherit_env"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "minCpu":
            suggest = "min_cpu"
        elif key == "minMemory":
            suggest = "min_memory"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: _builtins.str,
                 name: _builtins.str,
                 args: Optional[Sequence[_builtins.str]] = None,
                 command: Optional[_builtins.str] = None,
                 cpu: Optional[_builtins.str] = None,
                 env: Optional[Mapping[str, _builtins.str]] = None,
                 gpu_custom: Optional['outputs.WorkloadContainerGpuCustom'] = None,
                 gpu_nvidia: Optional['outputs.WorkloadContainerGpuNvidia'] = None,
                 inherit_env: Optional[_builtins.bool] = None,
                 lifecycle: Optional['outputs.WorkloadContainerLifecycle'] = None,
                 liveness_probe: Optional['outputs.WorkloadContainerLivenessProbe'] = None,
                 memory: Optional[_builtins.str] = None,
                 metrics: Optional['outputs.WorkloadContainerMetrics'] = None,
                 min_cpu: Optional[_builtins.str] = None,
                 min_memory: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 ports: Optional[Sequence['outputs.WorkloadContainerPort']] = None,
                 readiness_probe: Optional['outputs.WorkloadContainerReadinessProbe'] = None,
                 volumes: Optional[Sequence['outputs.WorkloadContainerVolume']] = None,
                 working_directory: Optional[_builtins.str] = None):
        """
        :param _builtins.str image: The full image and tag path.
        :param _builtins.str name: Name of the container.
        :param Sequence[_builtins.str] args: Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        :param _builtins.str command: Override the entry point.
        :param _builtins.str cpu: Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        :param Mapping[str, _builtins.str] env: Name-Value list of environment variables.
        :param 'WorkloadContainerGpuNvidiaArgs' gpu_nvidia: GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        :param _builtins.bool inherit_env: Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        :param 'WorkloadContainerLifecycleArgs' lifecycle: Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        :param 'WorkloadContainerLivenessProbeArgs' liveness_probe: Liveness Probe
        :param _builtins.str memory: Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        :param 'WorkloadContainerMetricsArgs' metrics: [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        :param _builtins.str min_cpu: Minimum CPU when capacity AI is enabled.
        :param _builtins.str min_memory: Minimum memory when capacity AI is enabled.
        :param _builtins.int port: The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        :param Sequence['WorkloadContainerPortArgs'] ports: Communication endpoints used by the workload to send and receive network traffic.
        :param 'WorkloadContainerReadinessProbeArgs' readiness_probe: Readiness Probe
        :param Sequence['WorkloadContainerVolumeArgs'] volumes: Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        :param _builtins.str working_directory: Override the working directory. Must be an absolute path.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if gpu_custom is not None:
            pulumi.set(__self__, "gpu_custom", gpu_custom)
        if gpu_nvidia is not None:
            pulumi.set(__self__, "gpu_nvidia", gpu_nvidia)
        if inherit_env is not None:
            pulumi.set(__self__, "inherit_env", inherit_env)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        """
        The full image and tag path.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[Sequence[_builtins.str]]:
        """
        Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[_builtins.str]:
        """
        Override the entry point.
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Name-Value list of environment variables.
        """
        return pulumi.get(self, "env")

    @_builtins.property
    @pulumi.getter(name="gpuCustom")
    def gpu_custom(self) -> Optional['outputs.WorkloadContainerGpuCustom']:
        return pulumi.get(self, "gpu_custom")

    @_builtins.property
    @pulumi.getter(name="gpuNvidia")
    def gpu_nvidia(self) -> Optional['outputs.WorkloadContainerGpuNvidia']:
        """
        GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        """
        return pulumi.get(self, "gpu_nvidia")

    @_builtins.property
    @pulumi.getter(name="inheritEnv")
    def inherit_env(self) -> Optional[_builtins.bool]:
        """
        Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        """
        return pulumi.get(self, "inherit_env")

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.WorkloadContainerLifecycle']:
        """
        Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        """
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.WorkloadContainerLivenessProbe']:
        """
        Liveness Probe
        """
        return pulumi.get(self, "liveness_probe")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional['outputs.WorkloadContainerMetrics']:
        """
        [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[_builtins.str]:
        """
        Minimum CPU when capacity AI is enabled.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[_builtins.str]:
        """
        Minimum memory when capacity AI is enabled.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""")
    def port(self) -> Optional[_builtins.int]:
        """
        The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.WorkloadContainerPort']]:
        """
        Communication endpoints used by the workload to send and receive network traffic.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.WorkloadContainerReadinessProbe']:
        """
        Readiness Probe
        """
        return pulumi.get(self, "readiness_probe")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.WorkloadContainerVolume']]:
        """
        Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        """
        return pulumi.get(self, "volumes")

    @_builtins.property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[_builtins.str]:
        """
        Override the working directory. Must be an absolute path.
        """
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class WorkloadContainerGpuCustom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runtimeClass":
            suggest = "runtime_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerGpuCustom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerGpuCustom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerGpuCustom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity: _builtins.int,
                 resource: _builtins.str,
                 runtime_class: Optional[_builtins.str] = None):
        """
        :param _builtins.int quantity: Number of GPUs.
        """
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "resource", resource)
        if runtime_class is not None:
            pulumi.set(__self__, "runtime_class", runtime_class)

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.int:
        """
        Number of GPUs.
        """
        return pulumi.get(self, "quantity")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter(name="runtimeClass")
    def runtime_class(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "runtime_class")


@pulumi.output_type
class WorkloadContainerGpuNvidia(dict):
    def __init__(__self__, *,
                 model: _builtins.str,
                 quantity: _builtins.int):
        """
        :param _builtins.str model: GPU Model (i.e.: t4)
        :param _builtins.int quantity: Number of GPUs.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "quantity", quantity)

    @_builtins.property
    @pulumi.getter
    def model(self) -> _builtins.str:
        """
        GPU Model (i.e.: t4)
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.int:
        """
        Number of GPUs.
        """
        return pulumi.get(self, "quantity")


@pulumi.output_type
class WorkloadContainerLifecycle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postStart":
            suggest = "post_start"
        elif key == "preStop":
            suggest = "pre_stop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLifecycle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLifecycle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLifecycle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_start: Optional['outputs.WorkloadContainerLifecyclePostStart'] = None,
                 pre_stop: Optional['outputs.WorkloadContainerLifecyclePreStop'] = None):
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)

    @_builtins.property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional['outputs.WorkloadContainerLifecyclePostStart']:
        return pulumi.get(self, "post_start")

    @_builtins.property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional['outputs.WorkloadContainerLifecyclePreStop']:
        return pulumi.get(self, "pre_stop")


@pulumi.output_type
class WorkloadContainerLifecyclePostStart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLifecyclePostStart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLifecyclePostStart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLifecyclePostStart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.WorkloadContainerLifecyclePostStartExec'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.WorkloadContainerLifecyclePostStartExec']:
        return pulumi.get(self, "exec_")


@pulumi.output_type
class WorkloadContainerLifecyclePostStartExec(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] commands: Command and arguments executed immediately after the container is created.
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Command and arguments executed immediately after the container is created.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class WorkloadContainerLifecyclePreStop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLifecyclePreStop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLifecyclePreStop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLifecyclePreStop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.WorkloadContainerLifecyclePreStopExec'] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.WorkloadContainerLifecyclePreStopExec']:
        return pulumi.get(self, "exec_")


@pulumi.output_type
class WorkloadContainerLifecyclePreStopExec(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] commands: Command and arguments executed immediately before the container is stopped.
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Command and arguments executed immediately before the container is stopped.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class WorkloadContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.WorkloadContainerLivenessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 grpc: Optional['outputs.WorkloadContainerLivenessProbeGrpc'] = None,
                 http_get: Optional['outputs.WorkloadContainerLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 tcp_socket: Optional['outputs.WorkloadContainerLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[_builtins.int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.WorkloadContainerLivenessProbeExec']:
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter
    def grpc(self) -> Optional['outputs.WorkloadContainerLivenessProbeGrpc']:
        return pulumi.get(self, "grpc")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadContainerLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadContainerLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadContainerLivenessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class WorkloadContainerLivenessProbeGrpc(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_headers: Optional[Mapping[str, _builtins.str]] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadContainerLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadContainerMetrics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dropMetrics":
            suggest = "drop_metrics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerMetrics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerMetrics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerMetrics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 port: _builtins.int,
                 drop_metrics: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str path: Path from container emitting custom metrics.
        :param _builtins.int port: Port from container emitting custom metrics.
        :param Sequence[_builtins.str] drop_metrics: Drop metrics that match given patterns.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        if drop_metrics is not None:
            pulumi.set(__self__, "drop_metrics", drop_metrics)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Path from container emitting custom metrics.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port from container emitting custom metrics.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="dropMetrics")
    def drop_metrics(self) -> Optional[Sequence[_builtins.str]]:
        """
        Drop metrics that match given patterns.
        """
        return pulumi.get(self, "drop_metrics")


@pulumi.output_type
class WorkloadContainerPort(dict):
    def __init__(__self__, *,
                 number: _builtins.int,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.int number: Port to expose.
        :param _builtins.str protocol: Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
        pulumi.set(__self__, "number", number)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.int:
        """
        Port to expose.
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WorkloadContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.WorkloadContainerReadinessProbeExec'] = None,
                 failure_threshold: Optional[_builtins.int] = None,
                 grpc: Optional['outputs.WorkloadContainerReadinessProbeGrpc'] = None,
                 http_get: Optional['outputs.WorkloadContainerReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[_builtins.int] = None,
                 period_seconds: Optional[_builtins.int] = None,
                 success_threshold: Optional[_builtins.int] = None,
                 tcp_socket: Optional['outputs.WorkloadContainerReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[_builtins.int] = None):
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.WorkloadContainerReadinessProbeExec']:
        return pulumi.get(self, "exec_")

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter
    def grpc(self) -> Optional['outputs.WorkloadContainerReadinessProbeGrpc']:
        return pulumi.get(self, "grpc")

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadContainerReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadContainerReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadContainerReadinessProbeExec(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class WorkloadContainerReadinessProbeGrpc(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_headers: Optional[Mapping[str, _builtins.str]] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadContainerReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadContainerVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoveryPolicy":
            suggest = "recovery_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 uri: _builtins.str,
                 recovery_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: File path added to workload pointing to the volume.
        :param _builtins.str uri: URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        :param _builtins.str recovery_policy: Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)
        if recovery_policy is not None:
            pulumi.set(__self__, "recovery_policy", recovery_policy)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        File path added to workload pointing to the volume.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        """
        return pulumi.get(self, "uri")

    @_builtins.property
    @pulumi.getter(name="recoveryPolicy")
    def recovery_policy(self) -> Optional[_builtins.str]:
        """
        Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        """
        return pulumi.get(self, "recovery_policy")


@pulumi.output_type
class WorkloadFirewallSpec(dict):
    def __init__(__self__, *,
                 external: Optional['outputs.WorkloadFirewallSpecExternal'] = None,
                 internal: Optional['outputs.WorkloadFirewallSpecInternal'] = None):
        """
        :param 'WorkloadFirewallSpecExternalArgs' external: The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        :param 'WorkloadFirewallSpecInternalArgs' internal: The internal firewall is used to control access between workloads.
        """
        if external is not None:
            pulumi.set(__self__, "external", external)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)

    @_builtins.property
    @pulumi.getter
    def external(self) -> Optional['outputs.WorkloadFirewallSpecExternal']:
        """
        The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        """
        return pulumi.get(self, "external")

    @_builtins.property
    @pulumi.getter
    def internal(self) -> Optional['outputs.WorkloadFirewallSpecInternal']:
        """
        The internal firewall is used to control access between workloads.
        """
        return pulumi.get(self, "internal")


@pulumi.output_type
class WorkloadFirewallSpecExternal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inboundAllowCidrs":
            suggest = "inbound_allow_cidrs"
        elif key == "inboundBlockedCidrs":
            suggest = "inbound_blocked_cidrs"
        elif key == "outboundAllowCidrs":
            suggest = "outbound_allow_cidrs"
        elif key == "outboundAllowHostnames":
            suggest = "outbound_allow_hostnames"
        elif key == "outboundAllowPorts":
            suggest = "outbound_allow_ports"
        elif key == "outboundBlockedCidrs":
            suggest = "outbound_blocked_cidrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadFirewallSpecExternal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadFirewallSpecExternal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadFirewallSpecExternal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http: Optional['outputs.WorkloadFirewallSpecExternalHttp'] = None,
                 inbound_allow_cidrs: Optional[Sequence[_builtins.str]] = None,
                 inbound_blocked_cidrs: Optional[Sequence[_builtins.str]] = None,
                 outbound_allow_cidrs: Optional[Sequence[_builtins.str]] = None,
                 outbound_allow_hostnames: Optional[Sequence[_builtins.str]] = None,
                 outbound_allow_ports: Optional[Sequence['outputs.WorkloadFirewallSpecExternalOutboundAllowPort']] = None,
                 outbound_blocked_cidrs: Optional[Sequence[_builtins.str]] = None):
        """
        :param 'WorkloadFirewallSpecExternalHttpArgs' http: Firewall options for HTTP workloads.
        :param Sequence[_builtins.str] inbound_allow_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        :param Sequence[_builtins.str] inbound_blocked_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        :param Sequence[_builtins.str] outbound_allow_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        :param Sequence[_builtins.str] outbound_allow_hostnames: The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        :param Sequence['WorkloadFirewallSpecExternalOutboundAllowPortArgs'] outbound_allow_ports: Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        :param Sequence[_builtins.str] outbound_blocked_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if inbound_allow_cidrs is not None:
            pulumi.set(__self__, "inbound_allow_cidrs", inbound_allow_cidrs)
        if inbound_blocked_cidrs is not None:
            pulumi.set(__self__, "inbound_blocked_cidrs", inbound_blocked_cidrs)
        if outbound_allow_cidrs is not None:
            pulumi.set(__self__, "outbound_allow_cidrs", outbound_allow_cidrs)
        if outbound_allow_hostnames is not None:
            pulumi.set(__self__, "outbound_allow_hostnames", outbound_allow_hostnames)
        if outbound_allow_ports is not None:
            pulumi.set(__self__, "outbound_allow_ports", outbound_allow_ports)
        if outbound_blocked_cidrs is not None:
            pulumi.set(__self__, "outbound_blocked_cidrs", outbound_blocked_cidrs)

    @_builtins.property
    @pulumi.getter
    def http(self) -> Optional['outputs.WorkloadFirewallSpecExternalHttp']:
        """
        Firewall options for HTTP workloads.
        """
        return pulumi.get(self, "http")

    @_builtins.property
    @pulumi.getter(name="inboundAllowCidrs")
    def inbound_allow_cidrs(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        """
        return pulumi.get(self, "inbound_allow_cidrs")

    @_builtins.property
    @pulumi.getter(name="inboundBlockedCidrs")
    def inbound_blocked_cidrs(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        return pulumi.get(self, "inbound_blocked_cidrs")

    @_builtins.property
    @pulumi.getter(name="outboundAllowCidrs")
    def outbound_allow_cidrs(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        """
        return pulumi.get(self, "outbound_allow_cidrs")

    @_builtins.property
    @pulumi.getter(name="outboundAllowHostnames")
    def outbound_allow_hostnames(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        """
        return pulumi.get(self, "outbound_allow_hostnames")

    @_builtins.property
    @pulumi.getter(name="outboundAllowPorts")
    def outbound_allow_ports(self) -> Optional[Sequence['outputs.WorkloadFirewallSpecExternalOutboundAllowPort']]:
        """
        Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        """
        return pulumi.get(self, "outbound_allow_ports")

    @_builtins.property
    @pulumi.getter(name="outboundBlockedCidrs")
    def outbound_blocked_cidrs(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        return pulumi.get(self, "outbound_blocked_cidrs")


@pulumi.output_type
class WorkloadFirewallSpecExternalHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inboundHeaderFilters":
            suggest = "inbound_header_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadFirewallSpecExternalHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadFirewallSpecExternalHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadFirewallSpecExternalHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inbound_header_filters: Optional[Sequence['outputs.WorkloadFirewallSpecExternalHttpInboundHeaderFilter']] = None):
        """
        :param Sequence['WorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs'] inbound_header_filters: A list of header filters for HTTP workloads.
        """
        if inbound_header_filters is not None:
            pulumi.set(__self__, "inbound_header_filters", inbound_header_filters)

    @_builtins.property
    @pulumi.getter(name="inboundHeaderFilters")
    def inbound_header_filters(self) -> Optional[Sequence['outputs.WorkloadFirewallSpecExternalHttpInboundHeaderFilter']]:
        """
        A list of header filters for HTTP workloads.
        """
        return pulumi.get(self, "inbound_header_filters")


@pulumi.output_type
class WorkloadFirewallSpecExternalHttpInboundHeaderFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedValues":
            suggest = "allowed_values"
        elif key == "blockedValues":
            suggest = "blocked_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadFirewallSpecExternalHttpInboundHeaderFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadFirewallSpecExternalHttpInboundHeaderFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadFirewallSpecExternalHttpInboundHeaderFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 allowed_values: Optional[Sequence[_builtins.str]] = None,
                 blocked_values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: The header to match for.
        :param Sequence[_builtins.str] allowed_values: A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        :param Sequence[_builtins.str] blocked_values: A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        """
        pulumi.set(__self__, "key", key)
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if blocked_values is not None:
            pulumi.set(__self__, "blocked_values", blocked_values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The header to match for.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        """
        return pulumi.get(self, "allowed_values")

    @_builtins.property
    @pulumi.getter(name="blockedValues")
    def blocked_values(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        """
        return pulumi.get(self, "blocked_values")


@pulumi.output_type
class WorkloadFirewallSpecExternalOutboundAllowPort(dict):
    def __init__(__self__, *,
                 number: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.int number: Port number. Max: 65000
        :param _builtins.str protocol: Either `http`, `https` or `tcp`.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.int:
        """
        Port number. Max: 65000
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Either `http`, `https` or `tcp`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WorkloadFirewallSpecInternal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inboundAllowType":
            suggest = "inbound_allow_type"
        elif key == "inboundAllowWorkloads":
            suggest = "inbound_allow_workloads"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadFirewallSpecInternal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadFirewallSpecInternal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadFirewallSpecInternal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inbound_allow_type: Optional[_builtins.str] = None,
                 inbound_allow_workloads: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str inbound_allow_type: Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        :param Sequence[_builtins.str] inbound_allow_workloads: A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
        if inbound_allow_type is not None:
            pulumi.set(__self__, "inbound_allow_type", inbound_allow_type)
        if inbound_allow_workloads is not None:
            pulumi.set(__self__, "inbound_allow_workloads", inbound_allow_workloads)

    @_builtins.property
    @pulumi.getter(name="inboundAllowType")
    def inbound_allow_type(self) -> Optional[_builtins.str]:
        """
        Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        """
        return pulumi.get(self, "inbound_allow_type")

    @_builtins.property
    @pulumi.getter(name="inboundAllowWorkloads")
    def inbound_allow_workloads(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
        return pulumi.get(self, "inbound_allow_workloads")


@pulumi.output_type
class WorkloadJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeDeadlineSeconds":
            suggest = "active_deadline_seconds"
        elif key == "concurrencyPolicy":
            suggest = "concurrency_policy"
        elif key == "historyLimit":
            suggest = "history_limit"
        elif key == "restartPolicy":
            suggest = "restart_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule: _builtins.str,
                 active_deadline_seconds: Optional[_builtins.int] = None,
                 concurrency_policy: Optional[_builtins.str] = None,
                 history_limit: Optional[_builtins.int] = None,
                 restart_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.str schedule: A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        :param _builtins.int active_deadline_seconds: The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        :param _builtins.str concurrency_policy: Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        :param _builtins.int history_limit: The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        :param _builtins.str restart_policy: Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        """
        pulumi.set(__self__, "schedule", schedule)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if concurrency_policy is not None:
            pulumi.set(__self__, "concurrency_policy", concurrency_policy)
        if history_limit is not None:
            pulumi.set(__self__, "history_limit", history_limit)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[_builtins.int]:
        """
        The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter(name="concurrencyPolicy")
    def concurrency_policy(self) -> Optional[_builtins.str]:
        """
        Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        """
        return pulumi.get(self, "concurrency_policy")

    @_builtins.property
    @pulumi.getter(name="historyLimit")
    def history_limit(self) -> Optional[_builtins.int]:
        """
        The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        """
        return pulumi.get(self, "history_limit")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[_builtins.str]:
        """
        Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        """
        return pulumi.get(self, "restart_policy")


@pulumi.output_type
class WorkloadLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoLocation":
            suggest = "geo_location"
        elif key == "replicaDirect":
            suggest = "replica_direct"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direct: Optional['outputs.WorkloadLoadBalancerDirect'] = None,
                 geo_location: Optional['outputs.WorkloadLoadBalancerGeoLocation'] = None,
                 replica_direct: Optional[_builtins.bool] = None):
        """
        :param 'WorkloadLoadBalancerDirectArgs' direct: Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        :param _builtins.bool replica_direct: When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        """
        if direct is not None:
            pulumi.set(__self__, "direct", direct)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if replica_direct is not None:
            pulumi.set(__self__, "replica_direct", replica_direct)

    @_builtins.property
    @pulumi.getter
    def direct(self) -> Optional['outputs.WorkloadLoadBalancerDirect']:
        """
        Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        """
        return pulumi.get(self, "direct")

    @_builtins.property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional['outputs.WorkloadLoadBalancerGeoLocation']:
        return pulumi.get(self, "geo_location")

    @_builtins.property
    @pulumi.getter(name="replicaDirect")
    def replica_direct(self) -> Optional[_builtins.bool]:
        """
        When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        """
        return pulumi.get(self, "replica_direct")


@pulumi.output_type
class WorkloadLoadBalancerDirect(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 ipset: Optional[_builtins.str] = None,
                 ports: Optional[Sequence['outputs.WorkloadLoadBalancerDirectPort']] = None):
        """
        :param _builtins.bool enabled: When disabled, this load balancer will be stopped.
        :param Sequence['WorkloadLoadBalancerDirectPortArgs'] ports: List of ports that will be exposed by this load balancer.
        """
        pulumi.set(__self__, "enabled", enabled)
        if ipset is not None:
            pulumi.set(__self__, "ipset", ipset)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        When disabled, this load balancer will be stopped.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def ipset(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipset")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.WorkloadLoadBalancerDirectPort']]:
        """
        List of ports that will be exposed by this load balancer.
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class WorkloadLoadBalancerDirectPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalPort":
            suggest = "external_port"
        elif key == "containerPort":
            suggest = "container_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLoadBalancerDirectPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLoadBalancerDirectPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLoadBalancerDirectPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_port: _builtins.int,
                 protocol: _builtins.str,
                 container_port: Optional[_builtins.int] = None,
                 scheme: Optional[_builtins.str] = None):
        """
        :param _builtins.int external_port: The port that is available publicly.
        :param _builtins.str protocol: The protocol that is exposed publicly.
        :param _builtins.int container_port: The port on the container tha will receive this traffic.
        :param _builtins.str scheme: Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
        pulumi.set(__self__, "external_port", external_port)
        pulumi.set(__self__, "protocol", protocol)
        if container_port is not None:
            pulumi.set(__self__, "container_port", container_port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> _builtins.int:
        """
        The port that is available publicly.
        """
        return pulumi.get(self, "external_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol that is exposed publicly.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[_builtins.int]:
        """
        The port on the container tha will receive this traffic.
        """
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[_builtins.str]:
        """
        Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadLoadBalancerGeoLocation(dict):
    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None,
                 headers: Optional['outputs.WorkloadLoadBalancerGeoLocationHeaders'] = None):
        """
        :param _builtins.bool enabled: When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional['outputs.WorkloadLoadBalancerGeoLocationHeaders']:
        return pulumi.get(self, "headers")


@pulumi.output_type
class WorkloadLoadBalancerGeoLocationHeaders(dict):
    def __init__(__self__, *,
                 asn: Optional[_builtins.str] = None,
                 city: Optional[_builtins.str] = None,
                 country: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None):
        """
        :param _builtins.str asn: The geo asn header.
        :param _builtins.str city: The geo city header.
        :param _builtins.str country: The geo country header.
        :param _builtins.str region: The geo region header.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[_builtins.str]:
        """
        The geo asn header.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def city(self) -> Optional[_builtins.str]:
        """
        The geo city header.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        The geo country header.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The geo region header.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkloadLocalOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityAi":
            suggest = "capacity_ai"
        elif key == "capacityAiUpdateMinutes":
            suggest = "capacity_ai_update_minutes"
        elif key == "multiZone":
            suggest = "multi_zone"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLocalOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLocalOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLocalOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: _builtins.str,
                 autoscaling: Optional['outputs.WorkloadLocalOptionAutoscaling'] = None,
                 capacity_ai: Optional[_builtins.bool] = None,
                 capacity_ai_update_minutes: Optional[_builtins.int] = None,
                 debug: Optional[_builtins.bool] = None,
                 multi_zone: Optional['outputs.WorkloadLocalOptionMultiZone'] = None,
                 suspend: Optional[_builtins.bool] = None,
                 timeout_seconds: Optional[_builtins.int] = None):
        """
        :param _builtins.str location: Valid only for `local_options`. Override options for a specific location.
        :param 'WorkloadLocalOptionAutoscalingArgs' autoscaling: Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        :param _builtins.bool capacity_ai: Capacity AI. Default: `true`.
        :param _builtins.int capacity_ai_update_minutes: The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        :param _builtins.bool debug: Debug mode. Default: `false`.
        :param _builtins.bool suspend: Workload suspend. Default: `false`.
        :param _builtins.int timeout_seconds: Timeout in seconds. Default: `5`.
        """
        pulumi.set(__self__, "location", location)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if capacity_ai is not None:
            pulumi.set(__self__, "capacity_ai", capacity_ai)
        if capacity_ai_update_minutes is not None:
            pulumi.set(__self__, "capacity_ai_update_minutes", capacity_ai_update_minutes)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Valid only for `local_options`. Override options for a specific location.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.WorkloadLocalOptionAutoscaling']:
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        return pulumi.get(self, "autoscaling")

    @_builtins.property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> Optional[_builtins.bool]:
        """
        Capacity AI. Default: `true`.
        """
        return pulumi.get(self, "capacity_ai")

    @_builtins.property
    @pulumi.getter(name="capacityAiUpdateMinutes")
    def capacity_ai_update_minutes(self) -> Optional[_builtins.int]:
        """
        The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        """
        return pulumi.get(self, "capacity_ai_update_minutes")

    @_builtins.property
    @pulumi.getter
    def debug(self) -> Optional[_builtins.bool]:
        """
        Debug mode. Default: `false`.
        """
        return pulumi.get(self, "debug")

    @_builtins.property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional['outputs.WorkloadLocalOptionMultiZone']:
        return pulumi.get(self, "multi_zone")

    @_builtins.property
    @pulumi.getter
    def suspend(self) -> Optional[_builtins.bool]:
        """
        Workload suspend. Default: `false`.
        """
        return pulumi.get(self, "suspend")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[_builtins.int]:
        """
        Timeout in seconds. Default: `5`.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadLocalOptionAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrency":
            suggest = "max_concurrency"
        elif key == "maxScale":
            suggest = "max_scale"
        elif key == "metricPercentile":
            suggest = "metric_percentile"
        elif key == "minScale":
            suggest = "min_scale"
        elif key == "scaleToZeroDelay":
            suggest = "scale_to_zero_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLocalOptionAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLocalOptionAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLocalOptionAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keda: Optional['outputs.WorkloadLocalOptionAutoscalingKeda'] = None,
                 max_concurrency: Optional[_builtins.int] = None,
                 max_scale: Optional[_builtins.int] = None,
                 metric: Optional[_builtins.str] = None,
                 metric_percentile: Optional[_builtins.str] = None,
                 min_scale: Optional[_builtins.int] = None,
                 multis: Optional[Sequence['outputs.WorkloadLocalOptionAutoscalingMulti']] = None,
                 scale_to_zero_delay: Optional[_builtins.int] = None,
                 target: Optional[_builtins.int] = None):
        """
        :param 'WorkloadLocalOptionAutoscalingKedaArgs' keda: KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        :param _builtins.int max_concurrency: A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        :param _builtins.int max_scale: The maximum allowed number of replicas. Min: `0`. Default `5`.
        :param _builtins.str metric: Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        :param _builtins.str metric_percentile: For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        :param _builtins.int min_scale: The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        :param _builtins.int scale_to_zero_delay: The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        if keda is not None:
            pulumi.set(__self__, "keda", keda)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if max_scale is not None:
            pulumi.set(__self__, "max_scale", max_scale)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_percentile is not None:
            pulumi.set(__self__, "metric_percentile", metric_percentile)
        if min_scale is not None:
            pulumi.set(__self__, "min_scale", min_scale)
        if multis is not None:
            pulumi.set(__self__, "multis", multis)
        if scale_to_zero_delay is not None:
            pulumi.set(__self__, "scale_to_zero_delay", scale_to_zero_delay)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def keda(self) -> Optional['outputs.WorkloadLocalOptionAutoscalingKeda']:
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        return pulumi.get(self, "keda")

    @_builtins.property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[_builtins.int]:
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        return pulumi.get(self, "max_concurrency")

    @_builtins.property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> Optional[_builtins.int]:
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        return pulumi.get(self, "max_scale")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.str]:
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> Optional[_builtins.str]:
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        return pulumi.get(self, "metric_percentile")

    @_builtins.property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> Optional[_builtins.int]:
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        return pulumi.get(self, "min_scale")

    @_builtins.property
    @pulumi.getter
    def multis(self) -> Optional[Sequence['outputs.WorkloadLocalOptionAutoscalingMulti']]:
        return pulumi.get(self, "multis")

    @_builtins.property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> Optional[_builtins.int]:
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        return pulumi.get(self, "scale_to_zero_delay")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.int]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkloadLocalOptionAutoscalingKeda(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cooldownPeriod":
            suggest = "cooldown_period"
        elif key == "initialCooldownPeriod":
            suggest = "initial_cooldown_period"
        elif key == "pollingInterval":
            suggest = "polling_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLocalOptionAutoscalingKeda. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLocalOptionAutoscalingKeda.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLocalOptionAutoscalingKeda.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced: Optional['outputs.WorkloadLocalOptionAutoscalingKedaAdvanced'] = None,
                 cooldown_period: Optional[_builtins.int] = None,
                 initial_cooldown_period: Optional[_builtins.int] = None,
                 polling_interval: Optional[_builtins.int] = None,
                 triggers: Optional[Sequence['outputs.WorkloadLocalOptionAutoscalingKedaTrigger']] = None):
        """
        :param 'WorkloadLocalOptionAutoscalingKedaAdvancedArgs' advanced: Advanced configuration options for KEDA.
        :param _builtins.int cooldown_period: The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int initial_cooldown_period: The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int polling_interval: The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        :param Sequence['WorkloadLocalOptionAutoscalingKedaTriggerArgs'] triggers: An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cooldown_period is not None:
            pulumi.set(__self__, "cooldown_period", cooldown_period)
        if initial_cooldown_period is not None:
            pulumi.set(__self__, "initial_cooldown_period", initial_cooldown_period)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.WorkloadLocalOptionAutoscalingKedaAdvanced']:
        """
        Advanced configuration options for KEDA.
        """
        return pulumi.get(self, "advanced")

    @_builtins.property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[_builtins.int]:
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "cooldown_period")

    @_builtins.property
    @pulumi.getter(name="initialCooldownPeriod")
    def initial_cooldown_period(self) -> Optional[_builtins.int]:
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "initial_cooldown_period")

    @_builtins.property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[_builtins.int]:
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        return pulumi.get(self, "polling_interval")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.WorkloadLocalOptionAutoscalingKedaTrigger']]:
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        return pulumi.get(self, "triggers")


@pulumi.output_type
class WorkloadLocalOptionAutoscalingKedaAdvanced(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scalingModifiers":
            suggest = "scaling_modifiers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLocalOptionAutoscalingKedaAdvanced. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLocalOptionAutoscalingKedaAdvanced.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLocalOptionAutoscalingKedaAdvanced.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scaling_modifiers: Optional['outputs.WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers'] = None):
        """
        :param 'WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiersArgs' scaling_modifiers: Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        if scaling_modifiers is not None:
            pulumi.set(__self__, "scaling_modifiers", scaling_modifiers)

    @_builtins.property
    @pulumi.getter(name="scalingModifiers")
    def scaling_modifiers(self) -> Optional['outputs.WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers']:
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        return pulumi.get(self, "scaling_modifiers")


@pulumi.output_type
class WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationTarget":
            suggest = "activation_target"
        elif key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLocalOptionAutoscalingKedaAdvancedScalingModifiers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_target: Optional[_builtins.str] = None,
                 formula: Optional[_builtins.str] = None,
                 metric_type: Optional[_builtins.str] = None,
                 target: Optional[_builtins.str] = None):
        """
        :param _builtins.str activation_target: Defines the new activation target value to scale on for the composed metric.
        :param _builtins.str formula: Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        :param _builtins.str metric_type: Defines metric type used for this new composite-metric.
        :param _builtins.str target: Defines new target value to scale on for the composed metric.
        """
        if activation_target is not None:
            pulumi.set(__self__, "activation_target", activation_target)
        if formula is not None:
            pulumi.set(__self__, "formula", formula)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="activationTarget")
    def activation_target(self) -> Optional[_builtins.str]:
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        return pulumi.get(self, "activation_target")

    @_builtins.property
    @pulumi.getter
    def formula(self) -> Optional[_builtins.str]:
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        return pulumi.get(self, "formula")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        Defines metric type used for this new composite-metric.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        """
        Defines new target value to scale on for the composed metric.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkloadLocalOptionAutoscalingKedaTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationRef":
            suggest = "authentication_ref"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "useCachedMetrics":
            suggest = "use_cached_metrics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadLocalOptionAutoscalingKedaTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadLocalOptionAutoscalingKedaTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadLocalOptionAutoscalingKedaTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 authentication_ref: Optional['outputs.WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRef'] = None,
                 metadata: Optional[Mapping[str, _builtins.str]] = None,
                 metric_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 use_cached_metrics: Optional[_builtins.bool] = None):
        """
        :param _builtins.str type: The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        :param 'WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs' authentication_ref: Reference to a KEDA authentication object for secure access to external systems.
        :param Mapping[str, _builtins.str] metadata: The configuration parameters that the trigger requires.
        :param _builtins.str metric_type: The type of metric to be used for scaling.
        :param _builtins.str name: An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        :param _builtins.bool use_cached_metrics: Enables caching of metric values during polling interval.
        """
        pulumi.set(__self__, "type", type)
        if authentication_ref is not None:
            pulumi.set(__self__, "authentication_ref", authentication_ref)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_cached_metrics is not None:
            pulumi.set(__self__, "use_cached_metrics", use_cached_metrics)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="authenticationRef")
    def authentication_ref(self) -> Optional['outputs.WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRef']:
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        return pulumi.get(self, "authentication_ref")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The configuration parameters that the trigger requires.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        The type of metric to be used for scaling.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="useCachedMetrics")
    def use_cached_metrics(self) -> Optional[_builtins.bool]:
        """
        Enables caching of metric values during polling interval.
        """
        return pulumi.get(self, "use_cached_metrics")


@pulumi.output_type
class WorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRef(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The name of secret listed in the GVC spec.keda.secrets.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkloadLocalOptionAutoscalingMulti(dict):
    def __init__(__self__, *,
                 metric: Optional[_builtins.str] = None,
                 target: Optional[_builtins.int] = None):
        """
        :param _builtins.str metric: Valid values: `cpu` or `memory`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.str]:
        """
        Valid values: `cpu` or `memory`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.int]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkloadLocalOptionMultiZone(dict):
    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkloadOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityAi":
            suggest = "capacity_ai"
        elif key == "capacityAiUpdateMinutes":
            suggest = "capacity_ai_update_minutes"
        elif key == "multiZone":
            suggest = "multi_zone"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscaling: Optional['outputs.WorkloadOptionsAutoscaling'] = None,
                 capacity_ai: Optional[_builtins.bool] = None,
                 capacity_ai_update_minutes: Optional[_builtins.int] = None,
                 debug: Optional[_builtins.bool] = None,
                 multi_zone: Optional['outputs.WorkloadOptionsMultiZone'] = None,
                 suspend: Optional[_builtins.bool] = None,
                 timeout_seconds: Optional[_builtins.int] = None):
        """
        :param 'WorkloadOptionsAutoscalingArgs' autoscaling: Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        :param _builtins.bool capacity_ai: Capacity AI. Default: `true`.
        :param _builtins.int capacity_ai_update_minutes: The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        :param _builtins.bool debug: Debug mode. Default: `false`.
        :param _builtins.bool suspend: Workload suspend. Default: `false`.
        :param _builtins.int timeout_seconds: Timeout in seconds. Default: `5`.
        """
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if capacity_ai is not None:
            pulumi.set(__self__, "capacity_ai", capacity_ai)
        if capacity_ai_update_minutes is not None:
            pulumi.set(__self__, "capacity_ai_update_minutes", capacity_ai_update_minutes)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.WorkloadOptionsAutoscaling']:
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        return pulumi.get(self, "autoscaling")

    @_builtins.property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> Optional[_builtins.bool]:
        """
        Capacity AI. Default: `true`.
        """
        return pulumi.get(self, "capacity_ai")

    @_builtins.property
    @pulumi.getter(name="capacityAiUpdateMinutes")
    def capacity_ai_update_minutes(self) -> Optional[_builtins.int]:
        """
        The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        """
        return pulumi.get(self, "capacity_ai_update_minutes")

    @_builtins.property
    @pulumi.getter
    def debug(self) -> Optional[_builtins.bool]:
        """
        Debug mode. Default: `false`.
        """
        return pulumi.get(self, "debug")

    @_builtins.property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional['outputs.WorkloadOptionsMultiZone']:
        return pulumi.get(self, "multi_zone")

    @_builtins.property
    @pulumi.getter
    def suspend(self) -> Optional[_builtins.bool]:
        """
        Workload suspend. Default: `false`.
        """
        return pulumi.get(self, "suspend")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[_builtins.int]:
        """
        Timeout in seconds. Default: `5`.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadOptionsAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrency":
            suggest = "max_concurrency"
        elif key == "maxScale":
            suggest = "max_scale"
        elif key == "metricPercentile":
            suggest = "metric_percentile"
        elif key == "minScale":
            suggest = "min_scale"
        elif key == "scaleToZeroDelay":
            suggest = "scale_to_zero_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadOptionsAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadOptionsAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadOptionsAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keda: Optional['outputs.WorkloadOptionsAutoscalingKeda'] = None,
                 max_concurrency: Optional[_builtins.int] = None,
                 max_scale: Optional[_builtins.int] = None,
                 metric: Optional[_builtins.str] = None,
                 metric_percentile: Optional[_builtins.str] = None,
                 min_scale: Optional[_builtins.int] = None,
                 multis: Optional[Sequence['outputs.WorkloadOptionsAutoscalingMulti']] = None,
                 scale_to_zero_delay: Optional[_builtins.int] = None,
                 target: Optional[_builtins.int] = None):
        """
        :param 'WorkloadOptionsAutoscalingKedaArgs' keda: KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        :param _builtins.int max_concurrency: A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        :param _builtins.int max_scale: The maximum allowed number of replicas. Min: `0`. Default `5`.
        :param _builtins.str metric: Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        :param _builtins.str metric_percentile: For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        :param _builtins.int min_scale: The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        :param _builtins.int scale_to_zero_delay: The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        if keda is not None:
            pulumi.set(__self__, "keda", keda)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if max_scale is not None:
            pulumi.set(__self__, "max_scale", max_scale)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_percentile is not None:
            pulumi.set(__self__, "metric_percentile", metric_percentile)
        if min_scale is not None:
            pulumi.set(__self__, "min_scale", min_scale)
        if multis is not None:
            pulumi.set(__self__, "multis", multis)
        if scale_to_zero_delay is not None:
            pulumi.set(__self__, "scale_to_zero_delay", scale_to_zero_delay)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def keda(self) -> Optional['outputs.WorkloadOptionsAutoscalingKeda']:
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        return pulumi.get(self, "keda")

    @_builtins.property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[_builtins.int]:
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        return pulumi.get(self, "max_concurrency")

    @_builtins.property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> Optional[_builtins.int]:
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        return pulumi.get(self, "max_scale")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.str]:
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> Optional[_builtins.str]:
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        return pulumi.get(self, "metric_percentile")

    @_builtins.property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> Optional[_builtins.int]:
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        return pulumi.get(self, "min_scale")

    @_builtins.property
    @pulumi.getter
    def multis(self) -> Optional[Sequence['outputs.WorkloadOptionsAutoscalingMulti']]:
        return pulumi.get(self, "multis")

    @_builtins.property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> Optional[_builtins.int]:
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        return pulumi.get(self, "scale_to_zero_delay")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.int]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkloadOptionsAutoscalingKeda(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cooldownPeriod":
            suggest = "cooldown_period"
        elif key == "initialCooldownPeriod":
            suggest = "initial_cooldown_period"
        elif key == "pollingInterval":
            suggest = "polling_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadOptionsAutoscalingKeda. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadOptionsAutoscalingKeda.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadOptionsAutoscalingKeda.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced: Optional['outputs.WorkloadOptionsAutoscalingKedaAdvanced'] = None,
                 cooldown_period: Optional[_builtins.int] = None,
                 initial_cooldown_period: Optional[_builtins.int] = None,
                 polling_interval: Optional[_builtins.int] = None,
                 triggers: Optional[Sequence['outputs.WorkloadOptionsAutoscalingKedaTrigger']] = None):
        """
        :param 'WorkloadOptionsAutoscalingKedaAdvancedArgs' advanced: Advanced configuration options for KEDA.
        :param _builtins.int cooldown_period: The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int initial_cooldown_period: The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int polling_interval: The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        :param Sequence['WorkloadOptionsAutoscalingKedaTriggerArgs'] triggers: An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cooldown_period is not None:
            pulumi.set(__self__, "cooldown_period", cooldown_period)
        if initial_cooldown_period is not None:
            pulumi.set(__self__, "initial_cooldown_period", initial_cooldown_period)
        if polling_interval is not None:
            pulumi.set(__self__, "polling_interval", polling_interval)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.WorkloadOptionsAutoscalingKedaAdvanced']:
        """
        Advanced configuration options for KEDA.
        """
        return pulumi.get(self, "advanced")

    @_builtins.property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[_builtins.int]:
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "cooldown_period")

    @_builtins.property
    @pulumi.getter(name="initialCooldownPeriod")
    def initial_cooldown_period(self) -> Optional[_builtins.int]:
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "initial_cooldown_period")

    @_builtins.property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[_builtins.int]:
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        return pulumi.get(self, "polling_interval")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.WorkloadOptionsAutoscalingKedaTrigger']]:
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        return pulumi.get(self, "triggers")


@pulumi.output_type
class WorkloadOptionsAutoscalingKedaAdvanced(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scalingModifiers":
            suggest = "scaling_modifiers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadOptionsAutoscalingKedaAdvanced. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadOptionsAutoscalingKedaAdvanced.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadOptionsAutoscalingKedaAdvanced.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scaling_modifiers: Optional['outputs.WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers'] = None):
        """
        :param 'WorkloadOptionsAutoscalingKedaAdvancedScalingModifiersArgs' scaling_modifiers: Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        if scaling_modifiers is not None:
            pulumi.set(__self__, "scaling_modifiers", scaling_modifiers)

    @_builtins.property
    @pulumi.getter(name="scalingModifiers")
    def scaling_modifiers(self) -> Optional['outputs.WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers']:
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        return pulumi.get(self, "scaling_modifiers")


@pulumi.output_type
class WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationTarget":
            suggest = "activation_target"
        elif key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadOptionsAutoscalingKedaAdvancedScalingModifiers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_target: Optional[_builtins.str] = None,
                 formula: Optional[_builtins.str] = None,
                 metric_type: Optional[_builtins.str] = None,
                 target: Optional[_builtins.str] = None):
        """
        :param _builtins.str activation_target: Defines the new activation target value to scale on for the composed metric.
        :param _builtins.str formula: Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        :param _builtins.str metric_type: Defines metric type used for this new composite-metric.
        :param _builtins.str target: Defines new target value to scale on for the composed metric.
        """
        if activation_target is not None:
            pulumi.set(__self__, "activation_target", activation_target)
        if formula is not None:
            pulumi.set(__self__, "formula", formula)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="activationTarget")
    def activation_target(self) -> Optional[_builtins.str]:
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        return pulumi.get(self, "activation_target")

    @_builtins.property
    @pulumi.getter
    def formula(self) -> Optional[_builtins.str]:
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        return pulumi.get(self, "formula")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        Defines metric type used for this new composite-metric.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        """
        Defines new target value to scale on for the composed metric.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkloadOptionsAutoscalingKedaTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationRef":
            suggest = "authentication_ref"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "useCachedMetrics":
            suggest = "use_cached_metrics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadOptionsAutoscalingKedaTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadOptionsAutoscalingKedaTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadOptionsAutoscalingKedaTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 authentication_ref: Optional['outputs.WorkloadOptionsAutoscalingKedaTriggerAuthenticationRef'] = None,
                 metadata: Optional[Mapping[str, _builtins.str]] = None,
                 metric_type: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 use_cached_metrics: Optional[_builtins.bool] = None):
        """
        :param _builtins.str type: The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        :param 'WorkloadOptionsAutoscalingKedaTriggerAuthenticationRefArgs' authentication_ref: Reference to a KEDA authentication object for secure access to external systems.
        :param Mapping[str, _builtins.str] metadata: The configuration parameters that the trigger requires.
        :param _builtins.str metric_type: The type of metric to be used for scaling.
        :param _builtins.str name: An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        :param _builtins.bool use_cached_metrics: Enables caching of metric values during polling interval.
        """
        pulumi.set(__self__, "type", type)
        if authentication_ref is not None:
            pulumi.set(__self__, "authentication_ref", authentication_ref)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_cached_metrics is not None:
            pulumi.set(__self__, "use_cached_metrics", use_cached_metrics)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="authenticationRef")
    def authentication_ref(self) -> Optional['outputs.WorkloadOptionsAutoscalingKedaTriggerAuthenticationRef']:
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        return pulumi.get(self, "authentication_ref")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The configuration parameters that the trigger requires.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        The type of metric to be used for scaling.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="useCachedMetrics")
    def use_cached_metrics(self) -> Optional[_builtins.bool]:
        """
        Enables caching of metric values during polling interval.
        """
        return pulumi.get(self, "use_cached_metrics")


@pulumi.output_type
class WorkloadOptionsAutoscalingKedaTriggerAuthenticationRef(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The name of secret listed in the GVC spec.keda.secrets.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkloadOptionsAutoscalingMulti(dict):
    def __init__(__self__, *,
                 metric: Optional[_builtins.str] = None,
                 target: Optional[_builtins.int] = None):
        """
        :param _builtins.str metric: Valid values: `cpu` or `memory`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.str]:
        """
        Valid values: `cpu` or `memory`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.int]:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class WorkloadOptionsMultiZone(dict):
    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkloadRequestRetryPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retryOns":
            suggest = "retry_ons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadRequestRetryPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadRequestRetryPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadRequestRetryPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attempts: Optional[_builtins.int] = None,
                 retry_ons: Optional[Sequence[_builtins.str]] = None):
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)
        if retry_ons is not None:
            pulumi.set(__self__, "retry_ons", retry_ons)

    @_builtins.property
    @pulumi.getter
    def attempts(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "attempts")

    @_builtins.property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "retry_ons")


@pulumi.output_type
class WorkloadRolloutOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSurgeReplicas":
            suggest = "max_surge_replicas"
        elif key == "maxUnavailableReplicas":
            suggest = "max_unavailable_replicas"
        elif key == "minReadySeconds":
            suggest = "min_ready_seconds"
        elif key == "scalingPolicy":
            suggest = "scaling_policy"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadRolloutOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadRolloutOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadRolloutOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_surge_replicas: Optional[_builtins.str] = None,
                 max_unavailable_replicas: Optional[_builtins.str] = None,
                 min_ready_seconds: Optional[_builtins.int] = None,
                 scaling_policy: Optional[_builtins.str] = None,
                 termination_grace_period_seconds: Optional[_builtins.int] = None):
        """
        :param _builtins.str max_surge_replicas: The number of replicas that can be created above the desired amount of replicas during an update.
        :param _builtins.str max_unavailable_replicas: The number of replicas that can be unavailable during the update process.
        :param _builtins.int min_ready_seconds: The minimum number of seconds a container must run without crashing to be considered available.
        :param _builtins.str scaling_policy: The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        :param _builtins.int termination_grace_period_seconds: The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
        if max_surge_replicas is not None:
            pulumi.set(__self__, "max_surge_replicas", max_surge_replicas)
        if max_unavailable_replicas is not None:
            pulumi.set(__self__, "max_unavailable_replicas", max_unavailable_replicas)
        if min_ready_seconds is not None:
            pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="maxSurgeReplicas")
    def max_surge_replicas(self) -> Optional[_builtins.str]:
        """
        The number of replicas that can be created above the desired amount of replicas during an update.
        """
        return pulumi.get(self, "max_surge_replicas")

    @_builtins.property
    @pulumi.getter(name="maxUnavailableReplicas")
    def max_unavailable_replicas(self) -> Optional[_builtins.str]:
        """
        The number of replicas that can be unavailable during the update process.
        """
        return pulumi.get(self, "max_unavailable_replicas")

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[_builtins.int]:
        """
        The minimum number of seconds a container must run without crashing to be considered available.
        """
        return pulumi.get(self, "min_ready_seconds")

    @_builtins.property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional[_builtins.str]:
        """
        The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        """
        return pulumi.get(self, "scaling_policy")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[_builtins.int]:
        """
        The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class WorkloadSecurityOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileSystemGroupId":
            suggest = "file_system_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadSecurityOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadSecurityOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadSecurityOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_system_group_id: Optional[_builtins.int] = None):
        """
        :param _builtins.int file_system_group_id: The group id assigned to any mounted volume.
        """
        if file_system_group_id is not None:
            pulumi.set(__self__, "file_system_group_id", file_system_group_id)

    @_builtins.property
    @pulumi.getter(name="fileSystemGroupId")
    def file_system_group_id(self) -> Optional[_builtins.int]:
        """
        The group id assigned to any mounted volume.
        """
        return pulumi.get(self, "file_system_group_id")


@pulumi.output_type
class WorkloadSidecar(dict):
    def __init__(__self__, *,
                 envoy: _builtins.str):
        pulumi.set(__self__, "envoy", envoy)

    @_builtins.property
    @pulumi.getter
    def envoy(self) -> _builtins.str:
        return pulumi.get(self, "envoy")


@pulumi.output_type
class WorkloadStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canonicalEndpoint":
            suggest = "canonical_endpoint"
        elif key == "currentReplicaCount":
            suggest = "current_replica_count"
        elif key == "healthChecks":
            suggest = "health_checks"
        elif key == "internalName":
            suggest = "internal_name"
        elif key == "loadBalancers":
            suggest = "load_balancers"
        elif key == "parentId":
            suggest = "parent_id"
        elif key == "replicaInternalNames":
            suggest = "replica_internal_names"
        elif key == "resolvedImages":
            suggest = "resolved_images"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canonical_endpoint: Optional[_builtins.str] = None,
                 current_replica_count: Optional[_builtins.int] = None,
                 endpoint: Optional[_builtins.str] = None,
                 health_checks: Optional[Sequence['outputs.WorkloadStatusHealthCheck']] = None,
                 internal_name: Optional[_builtins.str] = None,
                 load_balancers: Optional[Sequence['outputs.WorkloadStatusLoadBalancer']] = None,
                 parent_id: Optional[_builtins.str] = None,
                 replica_internal_names: Optional[Sequence[_builtins.str]] = None,
                 resolved_images: Optional[Sequence['outputs.WorkloadStatusResolvedImage']] = None):
        """
        :param _builtins.str canonical_endpoint: Canonical endpoint for the workload.
        :param _builtins.int current_replica_count: Current amount of replicas deployed.
        :param _builtins.str endpoint: Endpoint for the workload.
        :param Sequence['WorkloadStatusHealthCheckArgs'] health_checks: Current health status.
        :param _builtins.str internal_name: Internal hostname for the workload. Used for service-to-service requests.
        :param _builtins.str parent_id: ID of the parent object.
        :param Sequence['WorkloadStatusResolvedImageArgs'] resolved_images: Resolved images for workloads with dynamic tags enabled.
        """
        if canonical_endpoint is not None:
            pulumi.set(__self__, "canonical_endpoint", canonical_endpoint)
        if current_replica_count is not None:
            pulumi.set(__self__, "current_replica_count", current_replica_count)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if internal_name is not None:
            pulumi.set(__self__, "internal_name", internal_name)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if replica_internal_names is not None:
            pulumi.set(__self__, "replica_internal_names", replica_internal_names)
        if resolved_images is not None:
            pulumi.set(__self__, "resolved_images", resolved_images)

    @_builtins.property
    @pulumi.getter(name="canonicalEndpoint")
    def canonical_endpoint(self) -> Optional[_builtins.str]:
        """
        Canonical endpoint for the workload.
        """
        return pulumi.get(self, "canonical_endpoint")

    @_builtins.property
    @pulumi.getter(name="currentReplicaCount")
    def current_replica_count(self) -> Optional[_builtins.int]:
        """
        Current amount of replicas deployed.
        """
        return pulumi.get(self, "current_replica_count")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[_builtins.str]:
        """
        Endpoint for the workload.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[Sequence['outputs.WorkloadStatusHealthCheck']]:
        """
        Current health status.
        """
        return pulumi.get(self, "health_checks")

    @_builtins.property
    @pulumi.getter(name="internalName")
    def internal_name(self) -> Optional[_builtins.str]:
        """
        Internal hostname for the workload. Used for service-to-service requests.
        """
        return pulumi.get(self, "internal_name")

    @_builtins.property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[Sequence['outputs.WorkloadStatusLoadBalancer']]:
        return pulumi.get(self, "load_balancers")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[_builtins.str]:
        """
        ID of the parent object.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="replicaInternalNames")
    def replica_internal_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "replica_internal_names")

    @_builtins.property
    @pulumi.getter(name="resolvedImages")
    def resolved_images(self) -> Optional[Sequence['outputs.WorkloadStatusResolvedImage']]:
        """
        Resolved images for workloads with dynamic tags enabled.
        """
        return pulumi.get(self, "resolved_images")


@pulumi.output_type
class WorkloadStatusHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastChecked":
            suggest = "last_checked"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadStatusHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadStatusHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadStatusHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: Optional[_builtins.bool] = None,
                 code: Optional[_builtins.int] = None,
                 failures: Optional[_builtins.int] = None,
                 last_checked: Optional[_builtins.str] = None,
                 message: Optional[_builtins.str] = None,
                 success: Optional[_builtins.bool] = None,
                 successes: Optional[_builtins.int] = None):
        """
        :param _builtins.bool active: Active boolean for the associated workload.
        :param _builtins.int code: Current output code for the associated workload.
        :param _builtins.int failures: Failure integer for the associated workload.
        :param _builtins.str last_checked: Timestamp in UTC of the last health check.
        :param _builtins.str message: Current health status for the associated workload.
        :param _builtins.bool success: Success boolean for the associated workload.
        :param _builtins.int successes: Success integer for the associated workload.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if failures is not None:
            pulumi.set(__self__, "failures", failures)
        if last_checked is not None:
            pulumi.set(__self__, "last_checked", last_checked)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if success is not None:
            pulumi.set(__self__, "success", success)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[_builtins.bool]:
        """
        Active boolean for the associated workload.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.int]:
        """
        Current output code for the associated workload.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def failures(self) -> Optional[_builtins.int]:
        """
        Failure integer for the associated workload.
        """
        return pulumi.get(self, "failures")

    @_builtins.property
    @pulumi.getter(name="lastChecked")
    def last_checked(self) -> Optional[_builtins.str]:
        """
        Timestamp in UTC of the last health check.
        """
        return pulumi.get(self, "last_checked")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        Current health status for the associated workload.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def success(self) -> Optional[_builtins.bool]:
        """
        Success boolean for the associated workload.
        """
        return pulumi.get(self, "success")

    @_builtins.property
    @pulumi.getter
    def successes(self) -> Optional[_builtins.int]:
        """
        Success integer for the associated workload.
        """
        return pulumi.get(self, "successes")


@pulumi.output_type
class WorkloadStatusLoadBalancer(dict):
    def __init__(__self__, *,
                 origin: Optional[_builtins.str] = None,
                 url: Optional[_builtins.str] = None):
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkloadStatusResolvedImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessages":
            suggest = "error_messages"
        elif key == "nextRetryAt":
            suggest = "next_retry_at"
        elif key == "resolvedAt":
            suggest = "resolved_at"
        elif key == "resolvedForVersion":
            suggest = "resolved_for_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadStatusResolvedImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadStatusResolvedImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadStatusResolvedImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_messages: Optional[Sequence[_builtins.str]] = None,
                 images: Optional[Sequence['outputs.WorkloadStatusResolvedImageImage']] = None,
                 next_retry_at: Optional[_builtins.str] = None,
                 resolved_at: Optional[_builtins.str] = None,
                 resolved_for_version: Optional[_builtins.int] = None):
        """
        :param Sequence['WorkloadStatusResolvedImageImageArgs'] images: A list of images that were resolved.
        :param _builtins.str resolved_at: UTC Time when the images were resolved.
        :param _builtins.int resolved_for_version: Workload version the images were resolved for.
        """
        if error_messages is not None:
            pulumi.set(__self__, "error_messages", error_messages)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if next_retry_at is not None:
            pulumi.set(__self__, "next_retry_at", next_retry_at)
        if resolved_at is not None:
            pulumi.set(__self__, "resolved_at", resolved_at)
        if resolved_for_version is not None:
            pulumi.set(__self__, "resolved_for_version", resolved_for_version)

    @_builtins.property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "error_messages")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.WorkloadStatusResolvedImageImage']]:
        """
        A list of images that were resolved.
        """
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter(name="nextRetryAt")
    def next_retry_at(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "next_retry_at")

    @_builtins.property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> Optional[_builtins.str]:
        """
        UTC Time when the images were resolved.
        """
        return pulumi.get(self, "resolved_at")

    @_builtins.property
    @pulumi.getter(name="resolvedForVersion")
    def resolved_for_version(self) -> Optional[_builtins.int]:
        """
        Workload version the images were resolved for.
        """
        return pulumi.get(self, "resolved_for_version")


@pulumi.output_type
class WorkloadStatusResolvedImageImage(dict):
    def __init__(__self__, *,
                 digest: Optional[_builtins.str] = None,
                 manifests: Optional[Sequence['outputs.WorkloadStatusResolvedImageImageManifest']] = None):
        """
        :param _builtins.str digest: A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        """
        A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def manifests(self) -> Optional[Sequence['outputs.WorkloadStatusResolvedImageImageManifest']]:
        return pulumi.get(self, "manifests")


@pulumi.output_type
class WorkloadStatusResolvedImageImageManifest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mediaType":
            suggest = "media_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadStatusResolvedImageImageManifest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadStatusResolvedImageImageManifest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadStatusResolvedImageImageManifest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 digest: Optional[_builtins.str] = None,
                 image: Optional[_builtins.str] = None,
                 media_type: Optional[_builtins.str] = None,
                 platform: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str digest: A SHA256 hash that uniquely identifies the specific image manifest.
        :param _builtins.str image: The name and tag of the resolved image.
        :param _builtins.str media_type: The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        :param Mapping[str, _builtins.str] platform: Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        """
        A SHA256 hash that uniquely identifies the specific image manifest.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[_builtins.str]:
        """
        The name and tag of the resolved image.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[_builtins.str]:
        """
        The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
        return pulumi.get(self, "platform")


@pulumi.output_type
class GetGvcControlplaneTracingResult(dict):
    def __init__(__self__, *,
                 sampling: _builtins.float,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GetGvcKedaResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 identity_link: Optional[_builtins.str] = None,
                 secrets: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.bool enabled: Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        :param _builtins.str identity_link: A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        :param Sequence[_builtins.str] secrets: A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        pulumi.set(__self__, "enabled", enabled)
        if identity_link is not None:
            pulumi.set(__self__, "identity_link", identity_link)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Enable KEDA for this GVC. KEDA is a Kubernetes-based event-driven autoscaler that allows you to scale workloads based on external events. When enabled, a keda operator will be deployed in the GVC and workloads in the GVC can use KEDA to scale based on external metrics.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="identityLink")
    def identity_link(self) -> Optional[_builtins.str]:
        """
        A link to an Identity resource that will be used for KEDA. This will allow the keda operator to access cloud and network resources.
        """
        return pulumi.get(self, "identity_link")

    @_builtins.property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of secrets to be used as TriggerAuthentication objects. The TriggerAuthentication object will be named after the secret and can be used by triggers on workloads in this GVC.
        """
        return pulumi.get(self, "secrets")


@pulumi.output_type
class GetGvcLightstepTracingResult(dict):
    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 sampling: _builtins.float,
                 credentials: Optional[_builtins.str] = None,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param _builtins.str credentials: Full link to referenced Opaque Secret.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[_builtins.str]:
        """
        Full link to referenced Opaque Secret.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GetGvcLoadBalancerResult(dict):
    def __init__(__self__, *,
                 trusted_proxies: _builtins.int,
                 dedicated: Optional[_builtins.bool] = None,
                 ipset: Optional[_builtins.str] = None,
                 multi_zone: Optional['outputs.GetGvcLoadBalancerMultiZoneResult'] = None,
                 redirect: Optional['outputs.GetGvcLoadBalancerRedirectResult'] = None):
        """
        :param _builtins.int trusted_proxies: Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        :param _builtins.bool dedicated: Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        :param _builtins.str ipset: The link or the name of the IP Set that will be used for this load balancer.
        :param 'GetGvcLoadBalancerRedirectArgs' redirect: Specify the url to be redirected to for different http status codes.
        """
        pulumi.set(__self__, "trusted_proxies", trusted_proxies)
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if ipset is not None:
            pulumi.set(__self__, "ipset", ipset)
        if multi_zone is not None:
            pulumi.set(__self__, "multi_zone", multi_zone)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)

    @_builtins.property
    @pulumi.getter(name="trustedProxies")
    def trusted_proxies(self) -> _builtins.int:
        """
        Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.
        """
        return pulumi.get(self, "trusted_proxies")

    @_builtins.property
    @pulumi.getter
    def dedicated(self) -> Optional[_builtins.bool]:
        """
        Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.
        """
        return pulumi.get(self, "dedicated")

    @_builtins.property
    @pulumi.getter
    def ipset(self) -> Optional[_builtins.str]:
        """
        The link or the name of the IP Set that will be used for this load balancer.
        """
        return pulumi.get(self, "ipset")

    @_builtins.property
    @pulumi.getter(name="multiZone")
    def multi_zone(self) -> Optional['outputs.GetGvcLoadBalancerMultiZoneResult']:
        return pulumi.get(self, "multi_zone")

    @_builtins.property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.GetGvcLoadBalancerRedirectResult']:
        """
        Specify the url to be redirected to for different http status codes.
        """
        return pulumi.get(self, "redirect")


@pulumi.output_type
class GetGvcLoadBalancerMultiZoneResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetGvcLoadBalancerRedirectResult(dict):
    def __init__(__self__, *,
                 class_: Optional['outputs.GetGvcLoadBalancerRedirectClassResult'] = None):
        """
        :param 'GetGvcLoadBalancerRedirectClassArgs' class_: Specify the redirect url for all status codes in a class.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)

    @_builtins.property
    @pulumi.getter(name="class")
    def class_(self) -> Optional['outputs.GetGvcLoadBalancerRedirectClassResult']:
        """
        Specify the redirect url for all status codes in a class.
        """
        return pulumi.get(self, "class_")


@pulumi.output_type
class GetGvcLoadBalancerRedirectClassResult(dict):
    def __init__(__self__, *,
                 status401: Optional[_builtins.str] = None,
                 status5xx: Optional[_builtins.str] = None):
        """
        :param _builtins.str status401: An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        :param _builtins.str status5xx: Specify the redirect url for any 500 level status code.
        """
        if status401 is not None:
            pulumi.set(__self__, "status401", status401)
        if status5xx is not None:
            pulumi.set(__self__, "status5xx", status5xx)

    @_builtins.property
    @pulumi.getter
    def status401(self) -> Optional[_builtins.str]:
        """
        An optional url redirect for 401 responses. Supports envoy format strings to include request information. E.g. https://your-oauth-server/oauth2/authorize?return_to=%REQ(:path)%&client_id=your-client-id
        """
        return pulumi.get(self, "status401")

    @_builtins.property
    @pulumi.getter
    def status5xx(self) -> Optional[_builtins.str]:
        """
        Specify the redirect url for any 500 level status code.
        """
        return pulumi.get(self, "status5xx")


@pulumi.output_type
class GetGvcOtelTracingResult(dict):
    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 sampling: _builtins.float,
                 custom_tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str endpoint: Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        :param _builtins.float sampling: Determines what percentage of requests should be traced.
        :param Mapping[str, _builtins.str] custom_tags: Key-value map of custom tags.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "sampling", sampling)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def sampling(self) -> _builtins.float:
        """
        Determines what percentage of requests should be traced.
        """
        return pulumi.get(self, "sampling")

    @_builtins.property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key-value map of custom tags.
        """
        return pulumi.get(self, "custom_tags")


@pulumi.output_type
class GetGvcSidecarResult(dict):
    def __init__(__self__, *,
                 envoy: _builtins.str):
        pulumi.set(__self__, "envoy", envoy)

    @_builtins.property
    @pulumi.getter
    def envoy(self) -> _builtins.str:
        return pulumi.get(self, "envoy")


@pulumi.output_type
class GetImageManifestResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetImageManifestConfigResult'],
                 layers: Sequence['outputs.GetImageManifestLayerResult'],
                 media_type: _builtins.str,
                 schema_version: _builtins.int):
        """
        :param Sequence['GetImageManifestConfigArgs'] configs: The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.
        :param Sequence['GetImageManifestLayerArgs'] layers: Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.
        :param _builtins.str media_type: Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        :param _builtins.int schema_version: The version of the Docker Image Manifest format.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "layers", layers)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "schema_version", schema_version)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetImageManifestConfigResult']:
        """
        The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def layers(self) -> Sequence['outputs.GetImageManifestLayerResult']:
        """
        Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.
        """
        return pulumi.get(self, "layers")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> _builtins.int:
        """
        The version of the Docker Image Manifest format.
        """
        return pulumi.get(self, "schema_version")


@pulumi.output_type
class GetImageManifestConfigResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 media_type: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str digest: A unique SHA256 hash used to identify a specific image version within the image registry.
        :param _builtins.str media_type: Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        :param _builtins.int size: The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A unique SHA256 hash used to identify a specific image version within the image registry.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetImageManifestLayerResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 media_type: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str digest: A unique SHA256 hash used to identify a specific image version within the image registry.
        :param _builtins.str media_type: Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        :param _builtins.int size: The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A unique SHA256 hash used to identify a specific image version within the image registry.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 cpln_id: _builtins.str,
                 digest: _builtins.str,
                 manifests: Sequence['outputs.GetImagesImageManifestResult'],
                 name: _builtins.str,
                 repository: _builtins.str,
                 self_link: _builtins.str,
                 tag: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str cpln_id: The ID, in GUID format, of the image.
        :param _builtins.str digest: A unique SHA256 hash used to identify a specific image version within the image registry.
        :param Sequence['GetImagesImageManifestArgs'] manifests: The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.
        :param _builtins.str name: Name of the image.
        :param _builtins.str repository: Respository name of the image.
        :param _builtins.str self_link: Full link to this resource. Can be referenced by other resources.
        :param _builtins.str tag: Tag of the image.
        :param Mapping[str, _builtins.str] tags: Key-value map of resource tags.
        """
        pulumi.set(__self__, "cpln_id", cpln_id)
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "manifests", manifests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "self_link", self_link)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> _builtins.str:
        """
        The ID, in GUID format, of the image.
        """
        return pulumi.get(self, "cpln_id")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A unique SHA256 hash used to identify a specific image version within the image registry.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def manifests(self) -> Sequence['outputs.GetImagesImageManifestResult']:
        """
        The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.
        """
        return pulumi.get(self, "manifests")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the image.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def repository(self) -> _builtins.str:
        """
        Respository name of the image.
        """
        return pulumi.get(self, "repository")

    @_builtins.property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> _builtins.str:
        """
        Full link to this resource. Can be referenced by other resources.
        """
        return pulumi.get(self, "self_link")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        Tag of the image.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetImagesImageManifestResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetImagesImageManifestConfigResult'],
                 layers: Sequence['outputs.GetImagesImageManifestLayerResult'],
                 media_type: _builtins.str,
                 schema_version: _builtins.int):
        """
        :param Sequence['GetImagesImageManifestConfigArgs'] configs: The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.
        :param Sequence['GetImagesImageManifestLayerArgs'] layers: Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.
        :param _builtins.str media_type: Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        :param _builtins.int schema_version: The version of the Docker Image Manifest format.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "layers", layers)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "schema_version", schema_version)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetImagesImageManifestConfigResult']:
        """
        The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def layers(self) -> Sequence['outputs.GetImagesImageManifestLayerResult']:
        """
        Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.
        """
        return pulumi.get(self, "layers")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> _builtins.int:
        """
        The version of the Docker Image Manifest format.
        """
        return pulumi.get(self, "schema_version")


@pulumi.output_type
class GetImagesImageManifestConfigResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 media_type: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str digest: A unique SHA256 hash used to identify a specific image version within the image registry.
        :param _builtins.str media_type: Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        :param _builtins.int size: The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A unique SHA256 hash used to identify a specific image version within the image registry.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetImagesImageManifestLayerResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 media_type: _builtins.str,
                 size: _builtins.int):
        """
        :param _builtins.str digest: A unique SHA256 hash used to identify a specific image version within the image registry.
        :param _builtins.str media_type: Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        :param _builtins.int size: The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A unique SHA256 hash used to identify a specific image version within the image registry.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the image or layer in bytes. This helps in estimating the space required and the download time.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetImagesQueryResult(dict):
    def __init__(__self__, *,
                 fetch: _builtins.str,
                 spec: Optional['outputs.GetImagesQuerySpecResult'] = None):
        """
        :param _builtins.str fetch: Type of fetch. Specify either: `links` or `items`. Default: `items`.
        :param 'GetImagesQuerySpecArgs' spec: The specification of the query.
        """
        pulumi.set(__self__, "fetch", fetch)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @_builtins.property
    @pulumi.getter
    def fetch(self) -> _builtins.str:
        """
        Type of fetch. Specify either: `links` or `items`. Default: `items`.
        """
        return pulumi.get(self, "fetch")

    @_builtins.property
    @pulumi.getter
    def spec(self) -> Optional['outputs.GetImagesQuerySpecResult']:
        """
        The specification of the query.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class GetImagesQuerySpecResult(dict):
    def __init__(__self__, *,
                 match: _builtins.str,
                 terms: Optional[Sequence['outputs.GetImagesQuerySpecTermResult']] = None):
        """
        :param _builtins.str match: Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        :param Sequence['GetImagesQuerySpecTermArgs'] terms: Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        pulumi.set(__self__, "match", match)
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @_builtins.property
    @pulumi.getter
    def match(self) -> _builtins.str:
        """
        Type of match. Available values: `all`, `any`, `none`. Default: `all`.
        """
        return pulumi.get(self, "match")

    @_builtins.property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['outputs.GetImagesQuerySpecTermResult']]:
        """
        Terms can only contain one of the following attributes: `property`, `rel`, `tag`.
        """
        return pulumi.get(self, "terms")


@pulumi.output_type
class GetImagesQuerySpecTermResult(dict):
    def __init__(__self__, *,
                 op: _builtins.str,
                 property: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None,
                 tag: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str op: Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        :param _builtins.str property: Property to use for query evaluation.
        :param _builtins.str rel: Relation to use for query evaluation.
        :param _builtins.str tag: Tag key to use for query evaluation.
        :param _builtins.str value: Testing value for query evaluation.
        """
        pulumi.set(__self__, "op", op)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def op(self) -> _builtins.str:
        """
        Type of query operation. Available values: `=`, `>`, `>=`, `<`, `<=`, `!=`, `exists`, `!exists`. Default: `=`.
        """
        return pulumi.get(self, "op")

    @_builtins.property
    @pulumi.getter
    def property(self) -> Optional[_builtins.str]:
        """
        Property to use for query evaluation.
        """
        return pulumi.get(self, "property")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        """
        Relation to use for query evaluation.
        """
        return pulumi.get(self, "rel")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        """
        Tag key to use for query evaluation.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Testing value for query evaluation.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLocationGeoResult(dict):
    def __init__(__self__, *,
                 city: _builtins.str,
                 continent: _builtins.str,
                 country: _builtins.str,
                 lat: _builtins.float,
                 lon: _builtins.float,
                 state: _builtins.str):
        """
        :param _builtins.str city: City of the location.
        :param _builtins.str continent: Continent of the location.
        :param _builtins.str country: Country of the location.
        :param _builtins.float lat: Latitude of the location.
        :param _builtins.float lon: Longitude of the location.
        :param _builtins.str state: State of the location.
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lon", lon)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def city(self) -> _builtins.str:
        """
        City of the location.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def continent(self) -> _builtins.str:
        """
        Continent of the location.
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country of the location.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def lat(self) -> _builtins.float:
        """
        Latitude of the location.
        """
        return pulumi.get(self, "lat")

    @_builtins.property
    @pulumi.getter
    def lon(self) -> _builtins.float:
        """
        Longitude of the location.
        """
        return pulumi.get(self, "lon")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of the location.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetLocationsLocationResult(dict):
    def __init__(__self__, *,
                 cloud_provider: _builtins.str,
                 cpln_id: _builtins.str,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 geos: Sequence['outputs.GetLocationsLocationGeoResult'],
                 ip_ranges: Sequence[_builtins.str],
                 name: _builtins.str,
                 origin: _builtins.str,
                 region: _builtins.str,
                 self_link: _builtins.str,
                 tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str cloud_provider: Cloud Provider of the location.
        :param _builtins.str cpln_id: The ID, in GUID format, of the location.
        :param _builtins.str description: Description of the location.
        :param _builtins.bool enabled: Indication if location is enabled.
        :param Sequence[_builtins.str] ip_ranges: A list of IP ranges of the location.
        :param _builtins.str name: Name of the location.
        :param _builtins.str region: Region of the location.
        :param _builtins.str self_link: Full link to this resource. Can be referenced by other resources.
        :param Mapping[str, _builtins.str] tags: Key-value map of resource tags.
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "cpln_id", cpln_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "geos", geos)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "self_link", self_link)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> _builtins.str:
        """
        Cloud Provider of the location.
        """
        return pulumi.get(self, "cloud_provider")

    @_builtins.property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> _builtins.str:
        """
        The ID, in GUID format, of the location.
        """
        return pulumi.get(self, "cpln_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the location.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indication if location is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def geos(self) -> Sequence['outputs.GetLocationsLocationGeoResult']:
        return pulumi.get(self, "geos")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        A list of IP ranges of the location.
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the location.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region of the location.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> _builtins.str:
        """
        Full link to this resource. Can be referenced by other resources.
        """
        return pulumi.get(self, "self_link")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetLocationsLocationGeoResult(dict):
    def __init__(__self__, *,
                 city: _builtins.str,
                 continent: _builtins.str,
                 country: _builtins.str,
                 lat: _builtins.float,
                 lon: _builtins.float,
                 state: _builtins.str):
        """
        :param _builtins.str city: City of the location.
        :param _builtins.str continent: Continent of the location.
        :param _builtins.str country: Country of the location.
        :param _builtins.float lat: Latitude of the location.
        :param _builtins.float lon: Longitude of the location.
        :param _builtins.str state: State of the location.
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lon", lon)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def city(self) -> _builtins.str:
        """
        City of the location.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def continent(self) -> _builtins.str:
        """
        Continent of the location.
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country of the location.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def lat(self) -> _builtins.float:
        """
        Latitude of the location.
        """
        return pulumi.get(self, "lat")

    @_builtins.property
    @pulumi.getter
    def lon(self) -> _builtins.float:
        """
        Longitude of the location.
        """
        return pulumi.get(self, "lon")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of the location.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetOrgAuthConfigResult(dict):
    def __init__(__self__, *,
                 domain_auto_members: Sequence[_builtins.str],
                 saml_only: _builtins.bool):
        """
        :param Sequence[_builtins.str] domain_auto_members: List of domains which will auto-provision users when authenticating using SAML.
        :param _builtins.bool saml_only: Enforce SAML only authentication.
        """
        pulumi.set(__self__, "domain_auto_members", domain_auto_members)
        pulumi.set(__self__, "saml_only", saml_only)

    @_builtins.property
    @pulumi.getter(name="domainAutoMembers")
    def domain_auto_members(self) -> Sequence[_builtins.str]:
        """
        List of domains which will auto-provision users when authenticating using SAML.
        """
        return pulumi.get(self, "domain_auto_members")

    @_builtins.property
    @pulumi.getter(name="samlOnly")
    def saml_only(self) -> _builtins.bool:
        """
        Enforce SAML only authentication.
        """
        return pulumi.get(self, "saml_only")


@pulumi.output_type
class GetOrgObservabilityResult(dict):
    def __init__(__self__, *,
                 default_alert_emails: Sequence[_builtins.str],
                 logs_retention_days: _builtins.int,
                 metrics_retention_days: _builtins.int,
                 traces_retention_days: _builtins.int):
        """
        :param Sequence[_builtins.str] default_alert_emails: These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        :param _builtins.int logs_retention_days: Log retention days. Default: 30
        :param _builtins.int metrics_retention_days: Metrics retention days. Default: 30
        :param _builtins.int traces_retention_days: Traces retention days. Default: 30
        """
        pulumi.set(__self__, "default_alert_emails", default_alert_emails)
        pulumi.set(__self__, "logs_retention_days", logs_retention_days)
        pulumi.set(__self__, "metrics_retention_days", metrics_retention_days)
        pulumi.set(__self__, "traces_retention_days", traces_retention_days)

    @_builtins.property
    @pulumi.getter(name="defaultAlertEmails")
    def default_alert_emails(self) -> Sequence[_builtins.str]:
        """
        These emails are configured as alert recipients in Grafana when the 'grafana-default-email' contact delivery type is 'Email'.
        """
        return pulumi.get(self, "default_alert_emails")

    @_builtins.property
    @pulumi.getter(name="logsRetentionDays")
    def logs_retention_days(self) -> _builtins.int:
        """
        Log retention days. Default: 30
        """
        return pulumi.get(self, "logs_retention_days")

    @_builtins.property
    @pulumi.getter(name="metricsRetentionDays")
    def metrics_retention_days(self) -> _builtins.int:
        """
        Metrics retention days. Default: 30
        """
        return pulumi.get(self, "metrics_retention_days")

    @_builtins.property
    @pulumi.getter(name="tracesRetentionDays")
    def traces_retention_days(self) -> _builtins.int:
        """
        Traces retention days. Default: 30
        """
        return pulumi.get(self, "traces_retention_days")


@pulumi.output_type
class GetOrgSecurityResult(dict):
    def __init__(__self__, *,
                 threat_detection: Optional['outputs.GetOrgSecurityThreatDetectionResult'] = None):
        if threat_detection is not None:
            pulumi.set(__self__, "threat_detection", threat_detection)

    @_builtins.property
    @pulumi.getter(name="threatDetection")
    def threat_detection(self) -> Optional['outputs.GetOrgSecurityThreatDetectionResult']:
        return pulumi.get(self, "threat_detection")


@pulumi.output_type
class GetOrgSecurityThreatDetectionResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 minimum_severity: Optional[_builtins.str] = None,
                 syslog: Optional['outputs.GetOrgSecurityThreatDetectionSyslogResult'] = None):
        """
        :param _builtins.bool enabled: Indicates whether threat detection should be forwarded or not.
        :param _builtins.str minimum_severity: Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        :param 'GetOrgSecurityThreatDetectionSyslogArgs' syslog: Configuration for syslog forwarding.
        """
        pulumi.set(__self__, "enabled", enabled)
        if minimum_severity is not None:
            pulumi.set(__self__, "minimum_severity", minimum_severity)
        if syslog is not None:
            pulumi.set(__self__, "syslog", syslog)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Indicates whether threat detection should be forwarded or not.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="minimumSeverity")
    def minimum_severity(self) -> Optional[_builtins.str]:
        """
        Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.
        """
        return pulumi.get(self, "minimum_severity")

    @_builtins.property
    @pulumi.getter
    def syslog(self) -> Optional['outputs.GetOrgSecurityThreatDetectionSyslogResult']:
        """
        Configuration for syslog forwarding.
        """
        return pulumi.get(self, "syslog")


@pulumi.output_type
class GetOrgSecurityThreatDetectionSyslogResult(dict):
    def __init__(__self__, *,
                 host: _builtins.str,
                 port: _builtins.int,
                 transport: _builtins.str):
        """
        :param _builtins.str host: The hostname to send syslog messages to.
        :param _builtins.int port: The port to send syslog messages to.
        :param _builtins.str transport: The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "transport", transport)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        The hostname to send syslog messages to.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port to send syslog messages to.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def transport(self) -> _builtins.str:
        """
        The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.
        """
        return pulumi.get(self, "transport")


@pulumi.output_type
class GetOrgStatusResult(dict):
    def __init__(__self__, *,
                 account_link: _builtins.str,
                 active: _builtins.bool,
                 endpoint_prefix: _builtins.str):
        """
        :param _builtins.str account_link: The link of the account the org belongs to.
        :param _builtins.bool active: Indicates whether the org is active or not.
        """
        pulumi.set(__self__, "account_link", account_link)
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "endpoint_prefix", endpoint_prefix)

    @_builtins.property
    @pulumi.getter(name="accountLink")
    def account_link(self) -> _builtins.str:
        """
        The link of the account the org belongs to.
        """
        return pulumi.get(self, "account_link")

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        """
        Indicates whether the org is active or not.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="endpointPrefix")
    def endpoint_prefix(self) -> _builtins.str:
        return pulumi.get(self, "endpoint_prefix")


@pulumi.output_type
class GetSecretAwResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 external_id: _builtins.str,
                 role_arn: _builtins.str,
                 secret_key: _builtins.str):
        """
        :param _builtins.str access_key: Access Key provided by AWS.
        :param _builtins.str external_id: AWS IAM Role External ID.
        :param _builtins.str role_arn: Role ARN provided by AWS.
        :param _builtins.str secret_key: Secret Key provided by AWS.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> _builtins.str:
        """
        AWS IAM Role External ID.
        """
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> _builtins.str:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class GetSecretAzureConnectorResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 url: _builtins.str):
        """
        :param _builtins.str code: Code/Key to authenticate to deployment URL.
        :param _builtins.str url: Deployment URL.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Code/Key to authenticate to deployment URL.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        Deployment URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSecretEcrResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 repos: Sequence[_builtins.str],
                 role_arn: _builtins.str,
                 secret_key: _builtins.str,
                 external_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_key: Access Key provided by AWS.
        :param Sequence[_builtins.str] repos: List of ECR repositories.
        :param _builtins.str role_arn: Role ARN provided by AWS.
        :param _builtins.str secret_key: Secret Key provided by AWS.
        :param _builtins.str external_id: AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "repos", repos)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_key", secret_key)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Access Key provided by AWS.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter
    def repos(self) -> Sequence[_builtins.str]:
        """
        List of ECR repositories.
        """
        return pulumi.get(self, "repos")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> _builtins.str:
        """
        Role ARN provided by AWS.
        """
        return pulumi.get(self, "role_arn")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Secret Key provided by AWS.
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[_builtins.str]:
        """
        AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.
        """
        return pulumi.get(self, "external_id")


@pulumi.output_type
class GetSecretKeypairResult(dict):
    def __init__(__self__, *,
                 passphrase: _builtins.str,
                 public_key: _builtins.str,
                 secret_key: _builtins.str):
        """
        :param _builtins.str passphrase: Passphrase for private key.
        :param _builtins.str public_key: Public Key.
        :param _builtins.str secret_key: Secret/Private Key.
        """
        pulumi.set(__self__, "passphrase", passphrase)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> _builtins.str:
        """
        Passphrase for private key.
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> _builtins.str:
        """
        Public Key.
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Secret/Private Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class GetSecretNatsAccountResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 private_key: _builtins.str):
        """
        :param _builtins.str account_id: Account ID.
        :param _builtins.str private_key: Private Key.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "private_key", private_key)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        Private Key.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class GetSecretOpaqueResult(dict):
    def __init__(__self__, *,
                 encoding: _builtins.str,
                 payload: _builtins.str):
        """
        :param _builtins.str encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        :param _builtins.str payload: Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "payload", payload)

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> _builtins.str:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")

    @_builtins.property
    @pulumi.getter
    def payload(self) -> _builtins.str:
        """
        Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class GetSecretTlResult(dict):
    def __init__(__self__, *,
                 cert: _builtins.str,
                 chain: _builtins.str,
                 key: _builtins.str):
        """
        :param _builtins.str cert: Public Certificate.
        :param _builtins.str chain: Chain Certificate.
        :param _builtins.str key: Private Certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def cert(self) -> _builtins.str:
        """
        Public Certificate.
        """
        return pulumi.get(self, "cert")

    @_builtins.property
    @pulumi.getter
    def chain(self) -> _builtins.str:
        """
        Chain Certificate.
        """
        return pulumi.get(self, "chain")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Private Certificate.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetSecretUserpassResult(dict):
    def __init__(__self__, *,
                 encoding: _builtins.str,
                 password: _builtins.str,
                 username: _builtins.str):
        """
        :param _builtins.str encoding: Available encodings: `plain`, `base64`. Default: `plain`.
        :param _builtins.str password: Password.
        :param _builtins.str username: Username.
        """
        pulumi.set(__self__, "encoding", encoding)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def encoding(self) -> _builtins.str:
        """
        Available encodings: `plain`, `base64`. Default: `plain`.
        """
        return pulumi.get(self, "encoding")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetWorkloadContainerResult(dict):
    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 command: _builtins.str,
                 cpu: _builtins.str,
                 env: Mapping[str, _builtins.str],
                 image: _builtins.str,
                 inherit_env: _builtins.bool,
                 memory: _builtins.str,
                 min_cpu: _builtins.str,
                 min_memory: _builtins.str,
                 name: _builtins.str,
                 port: _builtins.int,
                 working_directory: _builtins.str,
                 gpu_customs: Optional[Sequence['outputs.GetWorkloadContainerGpuCustomResult']] = None,
                 gpu_nvidias: Optional[Sequence['outputs.GetWorkloadContainerGpuNvidiaResult']] = None,
                 lifecycles: Optional[Sequence['outputs.GetWorkloadContainerLifecycleResult']] = None,
                 liveness_probes: Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeResult']] = None,
                 metrics: Optional[Sequence['outputs.GetWorkloadContainerMetricResult']] = None,
                 ports: Optional[Sequence['outputs.GetWorkloadContainerPortResult']] = None,
                 readiness_probes: Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeResult']] = None,
                 volumes: Optional[Sequence['outputs.GetWorkloadContainerVolumeResult']] = None):
        """
        :param Sequence[_builtins.str] args: Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        :param _builtins.str command: Override the entry point.
        :param _builtins.str cpu: Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        :param Mapping[str, _builtins.str] env: Name-Value list of environment variables.
        :param _builtins.str image: The full image and tag path.
        :param _builtins.bool inherit_env: Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        :param _builtins.str memory: Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        :param _builtins.str min_cpu: Minimum CPU when capacity AI is enabled.
        :param _builtins.str min_memory: Minimum memory when capacity AI is enabled.
        :param _builtins.str name: Name of the container.
        :param _builtins.int port: The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        :param _builtins.str working_directory: Override the working directory. Must be an absolute path.
        :param Sequence['GetWorkloadContainerGpuNvidiaArgs'] gpu_nvidias: GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        :param Sequence['GetWorkloadContainerLifecycleArgs'] lifecycles: Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        :param Sequence['GetWorkloadContainerLivenessProbeArgs'] liveness_probes: Liveness Probe
        :param Sequence['GetWorkloadContainerMetricArgs'] metrics: [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        :param Sequence['GetWorkloadContainerPortArgs'] ports: Communication endpoints used by the workload to send and receive network traffic.
        :param Sequence['GetWorkloadContainerReadinessProbeArgs'] readiness_probes: Readiness Probe
        :param Sequence['GetWorkloadContainerVolumeArgs'] volumes: Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "inherit_env", inherit_env)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_cpu", min_cpu)
        pulumi.set(__self__, "min_memory", min_memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "working_directory", working_directory)
        if gpu_customs is not None:
            pulumi.set(__self__, "gpu_customs", gpu_customs)
        if gpu_nvidias is not None:
            pulumi.set(__self__, "gpu_nvidias", gpu_nvidias)
        if lifecycles is not None:
            pulumi.set(__self__, "lifecycles", lifecycles)
        if liveness_probes is not None:
            pulumi.set(__self__, "liveness_probes", liveness_probes)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probes is not None:
            pulumi.set(__self__, "readiness_probes", readiness_probes)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        """
        Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        """
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def command(self) -> _builtins.str:
        """
        Override the entry point.
        """
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def env(self) -> Mapping[str, _builtins.str]:
        """
        Name-Value list of environment variables.
        """
        return pulumi.get(self, "env")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        """
        The full image and tag path.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="inheritEnv")
    def inherit_env(self) -> _builtins.bool:
        """
        Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        """
        return pulumi.get(self, "inherit_env")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> _builtins.str:
        """
        Minimum CPU when capacity AI is enabled.
        """
        return pulumi.get(self, "min_cpu")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> _builtins.str:
        """
        Minimum memory when capacity AI is enabled.
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the container.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""")
    def port(self) -> _builtins.int:
        """
        The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> _builtins.str:
        """
        Override the working directory. Must be an absolute path.
        """
        return pulumi.get(self, "working_directory")

    @_builtins.property
    @pulumi.getter(name="gpuCustoms")
    def gpu_customs(self) -> Optional[Sequence['outputs.GetWorkloadContainerGpuCustomResult']]:
        return pulumi.get(self, "gpu_customs")

    @_builtins.property
    @pulumi.getter(name="gpuNvidias")
    def gpu_nvidias(self) -> Optional[Sequence['outputs.GetWorkloadContainerGpuNvidiaResult']]:
        """
        GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        """
        return pulumi.get(self, "gpu_nvidias")

    @_builtins.property
    @pulumi.getter
    def lifecycles(self) -> Optional[Sequence['outputs.GetWorkloadContainerLifecycleResult']]:
        """
        Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        """
        return pulumi.get(self, "lifecycles")

    @_builtins.property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeResult']]:
        """
        Liveness Probe
        """
        return pulumi.get(self, "liveness_probes")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetWorkloadContainerMetricResult']]:
        """
        [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.GetWorkloadContainerPortResult']]:
        """
        Communication endpoints used by the workload to send and receive network traffic.
        """
        return pulumi.get(self, "ports")

    @_builtins.property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeResult']]:
        """
        Readiness Probe
        """
        return pulumi.get(self, "readiness_probes")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.GetWorkloadContainerVolumeResult']]:
        """
        Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetWorkloadContainerGpuCustomResult(dict):
    def __init__(__self__, *,
                 quantity: _builtins.int,
                 resource: _builtins.str,
                 runtime_class: _builtins.str):
        """
        :param _builtins.int quantity: Number of GPUs.
        """
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "runtime_class", runtime_class)

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.int:
        """
        Number of GPUs.
        """
        return pulumi.get(self, "quantity")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter(name="runtimeClass")
    def runtime_class(self) -> _builtins.str:
        return pulumi.get(self, "runtime_class")


@pulumi.output_type
class GetWorkloadContainerGpuNvidiaResult(dict):
    def __init__(__self__, *,
                 model: _builtins.str,
                 quantity: _builtins.int):
        """
        :param _builtins.str model: GPU Model (i.e.: t4)
        :param _builtins.int quantity: Number of GPUs.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "quantity", quantity)

    @_builtins.property
    @pulumi.getter
    def model(self) -> _builtins.str:
        """
        GPU Model (i.e.: t4)
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.int:
        """
        Number of GPUs.
        """
        return pulumi.get(self, "quantity")


@pulumi.output_type
class GetWorkloadContainerLifecycleResult(dict):
    def __init__(__self__, *,
                 post_starts: Optional[Sequence['outputs.GetWorkloadContainerLifecyclePostStartResult']] = None,
                 pre_stops: Optional[Sequence['outputs.GetWorkloadContainerLifecyclePreStopResult']] = None):
        if post_starts is not None:
            pulumi.set(__self__, "post_starts", post_starts)
        if pre_stops is not None:
            pulumi.set(__self__, "pre_stops", pre_stops)

    @_builtins.property
    @pulumi.getter(name="postStarts")
    def post_starts(self) -> Optional[Sequence['outputs.GetWorkloadContainerLifecyclePostStartResult']]:
        return pulumi.get(self, "post_starts")

    @_builtins.property
    @pulumi.getter(name="preStops")
    def pre_stops(self) -> Optional[Sequence['outputs.GetWorkloadContainerLifecyclePreStopResult']]:
        return pulumi.get(self, "pre_stops")


@pulumi.output_type
class GetWorkloadContainerLifecyclePostStartResult(dict):
    def __init__(__self__, *,
                 execs: Optional[Sequence['outputs.GetWorkloadContainerLifecyclePostStartExecResult']] = None):
        if execs is not None:
            pulumi.set(__self__, "execs", execs)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Optional[Sequence['outputs.GetWorkloadContainerLifecyclePostStartExecResult']]:
        return pulumi.get(self, "execs")


@pulumi.output_type
class GetWorkloadContainerLifecyclePostStartExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] commands: Command and arguments executed immediately after the container is created.
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Command and arguments executed immediately after the container is created.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetWorkloadContainerLifecyclePreStopResult(dict):
    def __init__(__self__, *,
                 execs: Optional[Sequence['outputs.GetWorkloadContainerLifecyclePreStopExecResult']] = None):
        if execs is not None:
            pulumi.set(__self__, "execs", execs)

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Optional[Sequence['outputs.GetWorkloadContainerLifecyclePreStopExecResult']]:
        return pulumi.get(self, "execs")


@pulumi.output_type
class GetWorkloadContainerLifecyclePreStopExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] commands: Command and arguments executed immediately before the container is stopped.
        """
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        """
        Command and arguments executed immediately before the container is stopped.
        """
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetWorkloadContainerLivenessProbeResult(dict):
    def __init__(__self__, *,
                 failure_threshold: _builtins.int,
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 timeout_seconds: _builtins.int,
                 execs: Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeExecResult']] = None,
                 grpcs: Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeGrpcResult']] = None,
                 http_gets: Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeHttpGetResult']] = None,
                 tcp_sockets: Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeTcpSocketResult']] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if execs is not None:
            pulumi.set(__self__, "execs", execs)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> _builtins.int:
        return pulumi.get(self, "timeout_seconds")

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeExecResult']]:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter
    def grpcs(self) -> Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeGrpcResult']]:
        return pulumi.get(self, "grpcs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeHttpGetResult']]:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[Sequence['outputs.GetWorkloadContainerLivenessProbeTcpSocketResult']]:
        return pulumi.get(self, "tcp_sockets")


@pulumi.output_type
class GetWorkloadContainerLivenessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetWorkloadContainerLivenessProbeGrpcResult(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetWorkloadContainerLivenessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 http_headers: Mapping[str, _builtins.str],
                 path: _builtins.str,
                 port: _builtins.int,
                 scheme: _builtins.str):
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetWorkloadContainerLivenessProbeTcpSocketResult(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetWorkloadContainerMetricResult(dict):
    def __init__(__self__, *,
                 drop_metrics: Sequence[_builtins.str],
                 path: _builtins.str,
                 port: _builtins.int):
        """
        :param Sequence[_builtins.str] drop_metrics: Drop metrics that match given patterns.
        :param _builtins.str path: Path from container emitting custom metrics.
        :param _builtins.int port: Port from container emitting custom metrics.
        """
        pulumi.set(__self__, "drop_metrics", drop_metrics)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter(name="dropMetrics")
    def drop_metrics(self) -> Sequence[_builtins.str]:
        """
        Drop metrics that match given patterns.
        """
        return pulumi.get(self, "drop_metrics")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        Path from container emitting custom metrics.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port from container emitting custom metrics.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetWorkloadContainerPortResult(dict):
    def __init__(__self__, *,
                 number: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.int number: Port to expose.
        :param _builtins.str protocol: Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.int:
        """
        Port to expose.
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetWorkloadContainerReadinessProbeResult(dict):
    def __init__(__self__, *,
                 failure_threshold: _builtins.int,
                 initial_delay_seconds: _builtins.int,
                 period_seconds: _builtins.int,
                 success_threshold: _builtins.int,
                 timeout_seconds: _builtins.int,
                 execs: Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeExecResult']] = None,
                 grpcs: Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeGrpcResult']] = None,
                 http_gets: Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeHttpGetResult']] = None,
                 tcp_sockets: Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeTcpSocketResult']] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        pulumi.set(__self__, "period_seconds", period_seconds)
        pulumi.set(__self__, "success_threshold", success_threshold)
        pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if execs is not None:
            pulumi.set(__self__, "execs", execs)
        if grpcs is not None:
            pulumi.set(__self__, "grpcs", grpcs)
        if http_gets is not None:
            pulumi.set(__self__, "http_gets", http_gets)
        if tcp_sockets is not None:
            pulumi.set(__self__, "tcp_sockets", tcp_sockets)

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> _builtins.int:
        return pulumi.get(self, "failure_threshold")

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> _builtins.int:
        return pulumi.get(self, "initial_delay_seconds")

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> _builtins.int:
        return pulumi.get(self, "period_seconds")

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> _builtins.int:
        return pulumi.get(self, "success_threshold")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> _builtins.int:
        return pulumi.get(self, "timeout_seconds")

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeExecResult']]:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter
    def grpcs(self) -> Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeGrpcResult']]:
        return pulumi.get(self, "grpcs")

    @_builtins.property
    @pulumi.getter(name="httpGets")
    def http_gets(self) -> Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeHttpGetResult']]:
        return pulumi.get(self, "http_gets")

    @_builtins.property
    @pulumi.getter(name="tcpSockets")
    def tcp_sockets(self) -> Optional[Sequence['outputs.GetWorkloadContainerReadinessProbeTcpSocketResult']]:
        return pulumi.get(self, "tcp_sockets")


@pulumi.output_type
class GetWorkloadContainerReadinessProbeExecResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[_builtins.str]):
        pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "commands")


@pulumi.output_type
class GetWorkloadContainerReadinessProbeGrpcResult(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetWorkloadContainerReadinessProbeHttpGetResult(dict):
    def __init__(__self__, *,
                 http_headers: Mapping[str, _builtins.str],
                 path: _builtins.str,
                 port: _builtins.int,
                 scheme: _builtins.str):
        pulumi.set(__self__, "http_headers", http_headers)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "http_headers")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetWorkloadContainerReadinessProbeTcpSocketResult(dict):
    def __init__(__self__, *,
                 port: _builtins.int):
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetWorkloadContainerVolumeResult(dict):
    def __init__(__self__, *,
                 path: _builtins.str,
                 recovery_policy: _builtins.str,
                 uri: _builtins.str):
        """
        :param _builtins.str path: File path added to workload pointing to the volume.
        :param _builtins.str recovery_policy: Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        :param _builtins.str uri: URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "recovery_policy", recovery_policy)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        File path added to workload pointing to the volume.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="recoveryPolicy")
    def recovery_policy(self) -> _builtins.str:
        """
        Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**
        """
        return pulumi.get(self, "recovery_policy")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        """
        URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetWorkloadFirewallSpecResult(dict):
    def __init__(__self__, *,
                 externals: Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalResult']] = None,
                 internals: Optional[Sequence['outputs.GetWorkloadFirewallSpecInternalResult']] = None):
        """
        :param Sequence['GetWorkloadFirewallSpecExternalArgs'] externals: The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        :param Sequence['GetWorkloadFirewallSpecInternalArgs'] internals: The internal firewall is used to control access between workloads.
        """
        if externals is not None:
            pulumi.set(__self__, "externals", externals)
        if internals is not None:
            pulumi.set(__self__, "internals", internals)

    @_builtins.property
    @pulumi.getter
    def externals(self) -> Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalResult']]:
        """
        The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.
        """
        return pulumi.get(self, "externals")

    @_builtins.property
    @pulumi.getter
    def internals(self) -> Optional[Sequence['outputs.GetWorkloadFirewallSpecInternalResult']]:
        """
        The internal firewall is used to control access between workloads.
        """
        return pulumi.get(self, "internals")


@pulumi.output_type
class GetWorkloadFirewallSpecExternalResult(dict):
    def __init__(__self__, *,
                 inbound_allow_cidrs: Sequence[_builtins.str],
                 inbound_blocked_cidrs: Sequence[_builtins.str],
                 outbound_allow_cidrs: Sequence[_builtins.str],
                 outbound_allow_hostnames: Sequence[_builtins.str],
                 outbound_blocked_cidrs: Sequence[_builtins.str],
                 https: Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalHttpResult']] = None,
                 outbound_allow_ports: Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalOutboundAllowPortResult']] = None):
        """
        :param Sequence[_builtins.str] inbound_allow_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        :param Sequence[_builtins.str] inbound_blocked_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        :param Sequence[_builtins.str] outbound_allow_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        :param Sequence[_builtins.str] outbound_allow_hostnames: The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        :param Sequence[_builtins.str] outbound_blocked_cidrs: The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        :param Sequence['GetWorkloadFirewallSpecExternalHttpArgs'] https: Firewall options for HTTP workloads.
        :param Sequence['GetWorkloadFirewallSpecExternalOutboundAllowPortArgs'] outbound_allow_ports: Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        """
        pulumi.set(__self__, "inbound_allow_cidrs", inbound_allow_cidrs)
        pulumi.set(__self__, "inbound_blocked_cidrs", inbound_blocked_cidrs)
        pulumi.set(__self__, "outbound_allow_cidrs", outbound_allow_cidrs)
        pulumi.set(__self__, "outbound_allow_hostnames", outbound_allow_hostnames)
        pulumi.set(__self__, "outbound_blocked_cidrs", outbound_blocked_cidrs)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if outbound_allow_ports is not None:
            pulumi.set(__self__, "outbound_allow_ports", outbound_allow_ports)

    @_builtins.property
    @pulumi.getter(name="inboundAllowCidrs")
    def inbound_allow_cidrs(self) -> Sequence[_builtins.str]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.
        """
        return pulumi.get(self, "inbound_allow_cidrs")

    @_builtins.property
    @pulumi.getter(name="inboundBlockedCidrs")
    def inbound_blocked_cidrs(self) -> Sequence[_builtins.str]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that are NOT allowed to access this workload. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        return pulumi.get(self, "inbound_blocked_cidrs")

    @_builtins.property
    @pulumi.getter(name="outboundAllowCidrs")
    def outbound_allow_cidrs(self) -> Sequence[_builtins.str]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.
        """
        return pulumi.get(self, "outbound_allow_cidrs")

    @_builtins.property
    @pulumi.getter(name="outboundAllowHostnames")
    def outbound_allow_hostnames(self) -> Sequence[_builtins.str]:
        """
        The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.
        """
        return pulumi.get(self, "outbound_allow_hostnames")

    @_builtins.property
    @pulumi.getter(name="outboundBlockedCidrs")
    def outbound_blocked_cidrs(self) -> Sequence[_builtins.str]:
        """
        The list of ipv4/ipv6 addresses or cidr blocks that this workload is NOT allowed to reach. Addresses in the allow list will only be allowed if they do not exist in this list.
        """
        return pulumi.get(self, "outbound_blocked_cidrs")

    @_builtins.property
    @pulumi.getter
    def https(self) -> Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalHttpResult']]:
        """
        Firewall options for HTTP workloads.
        """
        return pulumi.get(self, "https")

    @_builtins.property
    @pulumi.getter(name="outboundAllowPorts")
    def outbound_allow_ports(self) -> Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalOutboundAllowPortResult']]:
        """
        Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.
        """
        return pulumi.get(self, "outbound_allow_ports")


@pulumi.output_type
class GetWorkloadFirewallSpecExternalHttpResult(dict):
    def __init__(__self__, *,
                 inbound_header_filters: Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalHttpInboundHeaderFilterResult']] = None):
        """
        :param Sequence['GetWorkloadFirewallSpecExternalHttpInboundHeaderFilterArgs'] inbound_header_filters: A list of header filters for HTTP workloads.
        """
        if inbound_header_filters is not None:
            pulumi.set(__self__, "inbound_header_filters", inbound_header_filters)

    @_builtins.property
    @pulumi.getter(name="inboundHeaderFilters")
    def inbound_header_filters(self) -> Optional[Sequence['outputs.GetWorkloadFirewallSpecExternalHttpInboundHeaderFilterResult']]:
        """
        A list of header filters for HTTP workloads.
        """
        return pulumi.get(self, "inbound_header_filters")


@pulumi.output_type
class GetWorkloadFirewallSpecExternalHttpInboundHeaderFilterResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence[_builtins.str],
                 blocked_values: Sequence[_builtins.str],
                 key: _builtins.str):
        """
        :param Sequence[_builtins.str] allowed_values: A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        :param Sequence[_builtins.str] blocked_values: A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        :param _builtins.str key: The header to match for.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "blocked_values", blocked_values)
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence[_builtins.str]:
        """
        A list of regular expressions to match for allowed header values. Headers that do not match ANY of these values will be filtered and will not reach the workload.
        """
        return pulumi.get(self, "allowed_values")

    @_builtins.property
    @pulumi.getter(name="blockedValues")
    def blocked_values(self) -> Sequence[_builtins.str]:
        """
        A list of regular expressions to match for blocked header values. Headers that match ANY of these values will be filtered and will not reach the workload.
        """
        return pulumi.get(self, "blocked_values")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The header to match for.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetWorkloadFirewallSpecExternalOutboundAllowPortResult(dict):
    def __init__(__self__, *,
                 number: _builtins.int,
                 protocol: _builtins.str):
        """
        :param _builtins.int number: Port number. Max: 65000
        :param _builtins.str protocol: Either `http`, `https` or `tcp`.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.int:
        """
        Port number. Max: 65000
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Either `http`, `https` or `tcp`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetWorkloadFirewallSpecInternalResult(dict):
    def __init__(__self__, *,
                 inbound_allow_type: _builtins.str,
                 inbound_allow_workloads: Sequence[_builtins.str]):
        """
        :param _builtins.str inbound_allow_type: Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        :param Sequence[_builtins.str] inbound_allow_workloads: A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
        pulumi.set(__self__, "inbound_allow_type", inbound_allow_type)
        pulumi.set(__self__, "inbound_allow_workloads", inbound_allow_workloads)

    @_builtins.property
    @pulumi.getter(name="inboundAllowType")
    def inbound_allow_type(self) -> _builtins.str:
        """
        Used to control the internal firewall configuration and mutual tls. Allowed Values: "none", "same-gvc", "same-org", "workload-list".
        """
        return pulumi.get(self, "inbound_allow_type")

    @_builtins.property
    @pulumi.getter(name="inboundAllowWorkloads")
    def inbound_allow_workloads(self) -> Sequence[_builtins.str]:
        """
        A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.
        """
        return pulumi.get(self, "inbound_allow_workloads")


@pulumi.output_type
class GetWorkloadJobResult(dict):
    def __init__(__self__, *,
                 active_deadline_seconds: _builtins.int,
                 concurrency_policy: _builtins.str,
                 history_limit: _builtins.int,
                 restart_policy: _builtins.str,
                 schedule: _builtins.str):
        """
        :param _builtins.int active_deadline_seconds: The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        :param _builtins.str concurrency_policy: Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        :param _builtins.int history_limit: The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        :param _builtins.str restart_policy: Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        :param _builtins.str schedule: A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        """
        pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        pulumi.set(__self__, "concurrency_policy", concurrency_policy)
        pulumi.set(__self__, "history_limit", history_limit)
        pulumi.set(__self__, "restart_policy", restart_policy)
        pulumi.set(__self__, "schedule", schedule)

    @_builtins.property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> _builtins.int:
        """
        The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        """
        return pulumi.get(self, "active_deadline_seconds")

    @_builtins.property
    @pulumi.getter(name="concurrencyPolicy")
    def concurrency_policy(self) -> _builtins.str:
        """
        Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        """
        return pulumi.get(self, "concurrency_policy")

    @_builtins.property
    @pulumi.getter(name="historyLimit")
    def history_limit(self) -> _builtins.int:
        """
        The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        """
        return pulumi.get(self, "history_limit")

    @_builtins.property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> _builtins.str:
        """
        Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        """
        return pulumi.get(self, "restart_policy")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        """
        return pulumi.get(self, "schedule")


@pulumi.output_type
class GetWorkloadLoadBalancerResult(dict):
    def __init__(__self__, *,
                 replica_direct: _builtins.bool,
                 directs: Optional[Sequence['outputs.GetWorkloadLoadBalancerDirectResult']] = None,
                 geo_locations: Optional[Sequence['outputs.GetWorkloadLoadBalancerGeoLocationResult']] = None):
        """
        :param _builtins.bool replica_direct: When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        :param Sequence['GetWorkloadLoadBalancerDirectArgs'] directs: Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        """
        pulumi.set(__self__, "replica_direct", replica_direct)
        if directs is not None:
            pulumi.set(__self__, "directs", directs)
        if geo_locations is not None:
            pulumi.set(__self__, "geo_locations", geo_locations)

    @_builtins.property
    @pulumi.getter(name="replicaDirect")
    def replica_direct(self) -> _builtins.bool:
        """
        When enabled, individual replicas of the workload can be reached directly using the subdomain prefix replica-<index>. For example, replica-0.my-workload.my-gvc.cpln.local or replica-0.my-workload-<gvc-alias>.cpln.app - Can only be used with stateful workloads.
        """
        return pulumi.get(self, "replica_direct")

    @_builtins.property
    @pulumi.getter
    def directs(self) -> Optional[Sequence['outputs.GetWorkloadLoadBalancerDirectResult']]:
        """
        Direct load balancers are created in each location that a workload is running in and are configured for the standard endpoints of the workload. Customers are responsible for configuring the workload with certificates if TLS is required.
        """
        return pulumi.get(self, "directs")

    @_builtins.property
    @pulumi.getter(name="geoLocations")
    def geo_locations(self) -> Optional[Sequence['outputs.GetWorkloadLoadBalancerGeoLocationResult']]:
        return pulumi.get(self, "geo_locations")


@pulumi.output_type
class GetWorkloadLoadBalancerDirectResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 ipset: _builtins.str,
                 ports: Optional[Sequence['outputs.GetWorkloadLoadBalancerDirectPortResult']] = None):
        """
        :param _builtins.bool enabled: When disabled, this load balancer will be stopped.
        :param Sequence['GetWorkloadLoadBalancerDirectPortArgs'] ports: List of ports that will be exposed by this load balancer.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ipset", ipset)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        When disabled, this load balancer will be stopped.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def ipset(self) -> _builtins.str:
        return pulumi.get(self, "ipset")

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.GetWorkloadLoadBalancerDirectPortResult']]:
        """
        List of ports that will be exposed by this load balancer.
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetWorkloadLoadBalancerDirectPortResult(dict):
    def __init__(__self__, *,
                 container_port: _builtins.int,
                 external_port: _builtins.int,
                 protocol: _builtins.str,
                 scheme: _builtins.str):
        """
        :param _builtins.int container_port: The port on the container tha will receive this traffic.
        :param _builtins.int external_port: The port that is available publicly.
        :param _builtins.str protocol: The protocol that is exposed publicly.
        :param _builtins.str scheme: Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "external_port", external_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> _builtins.int:
        """
        The port on the container tha will receive this traffic.
        """
        return pulumi.get(self, "container_port")

    @_builtins.property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> _builtins.int:
        """
        The port that is available publicly.
        """
        return pulumi.get(self, "external_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol that is exposed publicly.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        """
        Overrides the default `https` url scheme that will be used for links in the UI and status.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class GetWorkloadLoadBalancerGeoLocationResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 headers: Optional[Sequence['outputs.GetWorkloadLoadBalancerGeoLocationHeaderResult']] = None):
        """
        :param _builtins.bool enabled: When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        pulumi.set(__self__, "enabled", enabled)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetWorkloadLoadBalancerGeoLocationHeaderResult']]:
        return pulumi.get(self, "headers")


@pulumi.output_type
class GetWorkloadLoadBalancerGeoLocationHeaderResult(dict):
    def __init__(__self__, *,
                 asn: _builtins.str,
                 city: _builtins.str,
                 country: _builtins.str,
                 region: _builtins.str):
        """
        :param _builtins.str asn: The geo asn header.
        :param _builtins.str city: The geo city header.
        :param _builtins.str country: The geo country header.
        :param _builtins.str region: The geo region header.
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> _builtins.str:
        """
        The geo asn header.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def city(self) -> _builtins.str:
        """
        The geo city header.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        The geo country header.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The geo region header.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetWorkloadLocalOptionResult(dict):
    def __init__(__self__, *,
                 capacity_ai: _builtins.bool,
                 capacity_ai_update_minutes: _builtins.int,
                 debug: _builtins.bool,
                 location: _builtins.str,
                 suspend: _builtins.bool,
                 timeout_seconds: _builtins.int,
                 autoscalings: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingResult']] = None,
                 multi_zones: Optional[Sequence['outputs.GetWorkloadLocalOptionMultiZoneResult']] = None):
        """
        :param _builtins.bool capacity_ai: Capacity AI. Default: `true`.
        :param _builtins.int capacity_ai_update_minutes: The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        :param _builtins.bool debug: Debug mode. Default: `false`.
        :param _builtins.str location: Valid only for `local_options`. Override options for a specific location.
        :param _builtins.bool suspend: Workload suspend. Default: `false`.
        :param _builtins.int timeout_seconds: Timeout in seconds. Default: `5`.
        :param Sequence['GetWorkloadLocalOptionAutoscalingArgs'] autoscalings: Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        pulumi.set(__self__, "capacity_ai", capacity_ai)
        pulumi.set(__self__, "capacity_ai_update_minutes", capacity_ai_update_minutes)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "suspend", suspend)
        pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if autoscalings is not None:
            pulumi.set(__self__, "autoscalings", autoscalings)
        if multi_zones is not None:
            pulumi.set(__self__, "multi_zones", multi_zones)

    @_builtins.property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> _builtins.bool:
        """
        Capacity AI. Default: `true`.
        """
        return pulumi.get(self, "capacity_ai")

    @_builtins.property
    @pulumi.getter(name="capacityAiUpdateMinutes")
    def capacity_ai_update_minutes(self) -> _builtins.int:
        """
        The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        """
        return pulumi.get(self, "capacity_ai_update_minutes")

    @_builtins.property
    @pulumi.getter
    def debug(self) -> _builtins.bool:
        """
        Debug mode. Default: `false`.
        """
        return pulumi.get(self, "debug")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Valid only for `local_options`. Override options for a specific location.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def suspend(self) -> _builtins.bool:
        """
        Workload suspend. Default: `false`.
        """
        return pulumi.get(self, "suspend")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> _builtins.int:
        """
        Timeout in seconds. Default: `5`.
        """
        return pulumi.get(self, "timeout_seconds")

    @_builtins.property
    @pulumi.getter
    def autoscalings(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingResult']]:
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        return pulumi.get(self, "autoscalings")

    @_builtins.property
    @pulumi.getter(name="multiZones")
    def multi_zones(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionMultiZoneResult']]:
        return pulumi.get(self, "multi_zones")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingResult(dict):
    def __init__(__self__, *,
                 max_concurrency: _builtins.int,
                 max_scale: _builtins.int,
                 metric: _builtins.str,
                 metric_percentile: _builtins.str,
                 min_scale: _builtins.int,
                 scale_to_zero_delay: _builtins.int,
                 target: _builtins.int,
                 kedas: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaResult']] = None,
                 multis: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingMultiResult']] = None):
        """
        :param _builtins.int max_concurrency: A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        :param _builtins.int max_scale: The maximum allowed number of replicas. Min: `0`. Default `5`.
        :param _builtins.str metric: Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        :param _builtins.str metric_percentile: For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        :param _builtins.int min_scale: The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        :param _builtins.int scale_to_zero_delay: The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        :param Sequence['GetWorkloadLocalOptionAutoscalingKedaArgs'] kedas: KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "max_scale", max_scale)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_percentile", metric_percentile)
        pulumi.set(__self__, "min_scale", min_scale)
        pulumi.set(__self__, "scale_to_zero_delay", scale_to_zero_delay)
        pulumi.set(__self__, "target", target)
        if kedas is not None:
            pulumi.set(__self__, "kedas", kedas)
        if multis is not None:
            pulumi.set(__self__, "multis", multis)

    @_builtins.property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> _builtins.int:
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        return pulumi.get(self, "max_concurrency")

    @_builtins.property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> _builtins.int:
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        return pulumi.get(self, "max_scale")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.str:
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> _builtins.str:
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        return pulumi.get(self, "metric_percentile")

    @_builtins.property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> _builtins.int:
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        return pulumi.get(self, "min_scale")

    @_builtins.property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> _builtins.int:
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        return pulumi.get(self, "scale_to_zero_delay")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.int:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def kedas(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaResult']]:
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        return pulumi.get(self, "kedas")

    @_builtins.property
    @pulumi.getter
    def multis(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingMultiResult']]:
        return pulumi.get(self, "multis")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingKedaResult(dict):
    def __init__(__self__, *,
                 cooldown_period: _builtins.int,
                 initial_cooldown_period: _builtins.int,
                 polling_interval: _builtins.int,
                 advanceds: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaAdvancedResult']] = None,
                 triggers: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaTriggerResult']] = None):
        """
        :param _builtins.int cooldown_period: The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int initial_cooldown_period: The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int polling_interval: The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        :param Sequence['GetWorkloadLocalOptionAutoscalingKedaAdvancedArgs'] advanceds: Advanced configuration options for KEDA.
        :param Sequence['GetWorkloadLocalOptionAutoscalingKedaTriggerArgs'] triggers: An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        pulumi.set(__self__, "cooldown_period", cooldown_period)
        pulumi.set(__self__, "initial_cooldown_period", initial_cooldown_period)
        pulumi.set(__self__, "polling_interval", polling_interval)
        if advanceds is not None:
            pulumi.set(__self__, "advanceds", advanceds)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> _builtins.int:
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "cooldown_period")

    @_builtins.property
    @pulumi.getter(name="initialCooldownPeriod")
    def initial_cooldown_period(self) -> _builtins.int:
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "initial_cooldown_period")

    @_builtins.property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> _builtins.int:
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        return pulumi.get(self, "polling_interval")

    @_builtins.property
    @pulumi.getter
    def advanceds(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaAdvancedResult']]:
        """
        Advanced configuration options for KEDA.
        """
        return pulumi.get(self, "advanceds")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaTriggerResult']]:
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingKedaAdvancedResult(dict):
    def __init__(__self__, *,
                 scaling_modifiers: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaAdvancedScalingModifierResult']] = None):
        """
        :param Sequence['GetWorkloadLocalOptionAutoscalingKedaAdvancedScalingModifierArgs'] scaling_modifiers: Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        if scaling_modifiers is not None:
            pulumi.set(__self__, "scaling_modifiers", scaling_modifiers)

    @_builtins.property
    @pulumi.getter(name="scalingModifiers")
    def scaling_modifiers(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaAdvancedScalingModifierResult']]:
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        return pulumi.get(self, "scaling_modifiers")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingKedaAdvancedScalingModifierResult(dict):
    def __init__(__self__, *,
                 activation_target: _builtins.str,
                 formula: _builtins.str,
                 metric_type: _builtins.str,
                 target: _builtins.str):
        """
        :param _builtins.str activation_target: Defines the new activation target value to scale on for the composed metric.
        :param _builtins.str formula: Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        :param _builtins.str metric_type: Defines metric type used for this new composite-metric.
        :param _builtins.str target: Defines new target value to scale on for the composed metric.
        """
        pulumi.set(__self__, "activation_target", activation_target)
        pulumi.set(__self__, "formula", formula)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="activationTarget")
    def activation_target(self) -> _builtins.str:
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        return pulumi.get(self, "activation_target")

    @_builtins.property
    @pulumi.getter
    def formula(self) -> _builtins.str:
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        return pulumi.get(self, "formula")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        Defines metric type used for this new composite-metric.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        Defines new target value to scale on for the composed metric.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingKedaTriggerResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, _builtins.str],
                 metric_type: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 use_cached_metrics: _builtins.bool,
                 authentication_reves: Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefResult']] = None):
        """
        :param Mapping[str, _builtins.str] metadata: The configuration parameters that the trigger requires.
        :param _builtins.str metric_type: The type of metric to be used for scaling.
        :param _builtins.str name: An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        :param _builtins.str type: The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        :param _builtins.bool use_cached_metrics: Enables caching of metric values during polling interval.
        :param Sequence['GetWorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefArgs'] authentication_reves: Reference to a KEDA authentication object for secure access to external systems.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "use_cached_metrics", use_cached_metrics)
        if authentication_reves is not None:
            pulumi.set(__self__, "authentication_reves", authentication_reves)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The configuration parameters that the trigger requires.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        The type of metric to be used for scaling.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="useCachedMetrics")
    def use_cached_metrics(self) -> _builtins.bool:
        """
        Enables caching of metric values during polling interval.
        """
        return pulumi.get(self, "use_cached_metrics")

    @_builtins.property
    @pulumi.getter(name="authenticationReves")
    def authentication_reves(self) -> Optional[Sequence['outputs.GetWorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefResult']]:
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        return pulumi.get(self, "authentication_reves")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingKedaTriggerAuthenticationRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The name of secret listed in the GVC spec.keda.secrets.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkloadLocalOptionAutoscalingMultiResult(dict):
    def __init__(__self__, *,
                 metric: _builtins.str,
                 target: _builtins.int):
        """
        :param _builtins.str metric: Valid values: `cpu` or `memory`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.str:
        """
        Valid values: `cpu` or `memory`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.int:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWorkloadLocalOptionMultiZoneResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetWorkloadOptionResult(dict):
    def __init__(__self__, *,
                 capacity_ai: _builtins.bool,
                 capacity_ai_update_minutes: _builtins.int,
                 debug: _builtins.bool,
                 suspend: _builtins.bool,
                 timeout_seconds: _builtins.int,
                 autoscalings: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingResult']] = None,
                 multi_zones: Optional[Sequence['outputs.GetWorkloadOptionMultiZoneResult']] = None):
        """
        :param _builtins.bool capacity_ai: Capacity AI. Default: `true`.
        :param _builtins.int capacity_ai_update_minutes: The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        :param _builtins.bool debug: Debug mode. Default: `false`.
        :param _builtins.bool suspend: Workload suspend. Default: `false`.
        :param _builtins.int timeout_seconds: Timeout in seconds. Default: `5`.
        :param Sequence['GetWorkloadOptionAutoscalingArgs'] autoscalings: Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        pulumi.set(__self__, "capacity_ai", capacity_ai)
        pulumi.set(__self__, "capacity_ai_update_minutes", capacity_ai_update_minutes)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "suspend", suspend)
        pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if autoscalings is not None:
            pulumi.set(__self__, "autoscalings", autoscalings)
        if multi_zones is not None:
            pulumi.set(__self__, "multi_zones", multi_zones)

    @_builtins.property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> _builtins.bool:
        """
        Capacity AI. Default: `true`.
        """
        return pulumi.get(self, "capacity_ai")

    @_builtins.property
    @pulumi.getter(name="capacityAiUpdateMinutes")
    def capacity_ai_update_minutes(self) -> _builtins.int:
        """
        The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        """
        return pulumi.get(self, "capacity_ai_update_minutes")

    @_builtins.property
    @pulumi.getter
    def debug(self) -> _builtins.bool:
        """
        Debug mode. Default: `false`.
        """
        return pulumi.get(self, "debug")

    @_builtins.property
    @pulumi.getter
    def suspend(self) -> _builtins.bool:
        """
        Workload suspend. Default: `false`.
        """
        return pulumi.get(self, "suspend")

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> _builtins.int:
        """
        Timeout in seconds. Default: `5`.
        """
        return pulumi.get(self, "timeout_seconds")

    @_builtins.property
    @pulumi.getter
    def autoscalings(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingResult']]:
        """
        Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        """
        return pulumi.get(self, "autoscalings")

    @_builtins.property
    @pulumi.getter(name="multiZones")
    def multi_zones(self) -> Optional[Sequence['outputs.GetWorkloadOptionMultiZoneResult']]:
        return pulumi.get(self, "multi_zones")


@pulumi.output_type
class GetWorkloadOptionAutoscalingResult(dict):
    def __init__(__self__, *,
                 max_concurrency: _builtins.int,
                 max_scale: _builtins.int,
                 metric: _builtins.str,
                 metric_percentile: _builtins.str,
                 min_scale: _builtins.int,
                 scale_to_zero_delay: _builtins.int,
                 target: _builtins.int,
                 kedas: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaResult']] = None,
                 multis: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingMultiResult']] = None):
        """
        :param _builtins.int max_concurrency: A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        :param _builtins.int max_scale: The maximum allowed number of replicas. Min: `0`. Default `5`.
        :param _builtins.str metric: Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        :param _builtins.str metric_percentile: For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        :param _builtins.int min_scale: The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        :param _builtins.int scale_to_zero_delay: The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        :param Sequence['GetWorkloadOptionAutoscalingKedaArgs'] kedas: KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "max_scale", max_scale)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_percentile", metric_percentile)
        pulumi.set(__self__, "min_scale", min_scale)
        pulumi.set(__self__, "scale_to_zero_delay", scale_to_zero_delay)
        pulumi.set(__self__, "target", target)
        if kedas is not None:
            pulumi.set(__self__, "kedas", kedas)
        if multis is not None:
            pulumi.set(__self__, "multis", multis)

    @_builtins.property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> _builtins.int:
        """
        A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.
        """
        return pulumi.get(self, "max_concurrency")

    @_builtins.property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> _builtins.int:
        """
        The maximum allowed number of replicas. Min: `0`. Default `5`.
        """
        return pulumi.get(self, "max_scale")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.str:
        """
        Valid values: `concurrency`, `cpu`, `memory`, `rps`, `latency`, `keda` or `disabled`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> _builtins.str:
        """
        For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.
        """
        return pulumi.get(self, "metric_percentile")

    @_builtins.property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> _builtins.int:
        """
        The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.
        """
        return pulumi.get(self, "min_scale")

    @_builtins.property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> _builtins.int:
        """
        The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.
        """
        return pulumi.get(self, "scale_to_zero_delay")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.int:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def kedas(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaResult']]:
        """
        KEDA (Kubernetes-based Event Driven Autoscaling) allows for advanced autoscaling based on external metrics and triggers.
        """
        return pulumi.get(self, "kedas")

    @_builtins.property
    @pulumi.getter
    def multis(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingMultiResult']]:
        return pulumi.get(self, "multis")


@pulumi.output_type
class GetWorkloadOptionAutoscalingKedaResult(dict):
    def __init__(__self__, *,
                 cooldown_period: _builtins.int,
                 initial_cooldown_period: _builtins.int,
                 polling_interval: _builtins.int,
                 advanceds: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaAdvancedResult']] = None,
                 triggers: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaTriggerResult']] = None):
        """
        :param _builtins.int cooldown_period: The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int initial_cooldown_period: The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        :param _builtins.int polling_interval: The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        :param Sequence['GetWorkloadOptionAutoscalingKedaAdvancedArgs'] advanceds: Advanced configuration options for KEDA.
        :param Sequence['GetWorkloadOptionAutoscalingKedaTriggerArgs'] triggers: An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        pulumi.set(__self__, "cooldown_period", cooldown_period)
        pulumi.set(__self__, "initial_cooldown_period", initial_cooldown_period)
        pulumi.set(__self__, "polling_interval", polling_interval)
        if advanceds is not None:
            pulumi.set(__self__, "advanceds", advanceds)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> _builtins.int:
        """
        The cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "cooldown_period")

    @_builtins.property
    @pulumi.getter(name="initialCooldownPeriod")
    def initial_cooldown_period(self) -> _builtins.int:
        """
        The initial cooldown period in seconds after scaling down to 0 replicas before KEDA will allow scaling up again.
        """
        return pulumi.get(self, "initial_cooldown_period")

    @_builtins.property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> _builtins.int:
        """
        The interval in seconds at which KEDA will poll the external metrics to determine if scaling is required.
        """
        return pulumi.get(self, "polling_interval")

    @_builtins.property
    @pulumi.getter
    def advanceds(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaAdvancedResult']]:
        """
        Advanced configuration options for KEDA.
        """
        return pulumi.get(self, "advanceds")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaTriggerResult']]:
        """
        An array of KEDA triggers to be used for scaling workloads in this GVC. This is used to define how KEDA will scale workloads in the GVC based on external metrics or events. Each trigger type may have its own specific configuration options.
        """
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetWorkloadOptionAutoscalingKedaAdvancedResult(dict):
    def __init__(__self__, *,
                 scaling_modifiers: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaAdvancedScalingModifierResult']] = None):
        """
        :param Sequence['GetWorkloadOptionAutoscalingKedaAdvancedScalingModifierArgs'] scaling_modifiers: Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        if scaling_modifiers is not None:
            pulumi.set(__self__, "scaling_modifiers", scaling_modifiers)

    @_builtins.property
    @pulumi.getter(name="scalingModifiers")
    def scaling_modifiers(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaAdvancedScalingModifierResult']]:
        """
        Scaling modifiers allow for fine-tuning the scaling behavior of KEDA.
        """
        return pulumi.get(self, "scaling_modifiers")


@pulumi.output_type
class GetWorkloadOptionAutoscalingKedaAdvancedScalingModifierResult(dict):
    def __init__(__self__, *,
                 activation_target: _builtins.str,
                 formula: _builtins.str,
                 metric_type: _builtins.str,
                 target: _builtins.str):
        """
        :param _builtins.str activation_target: Defines the new activation target value to scale on for the composed metric.
        :param _builtins.str formula: Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        :param _builtins.str metric_type: Defines metric type used for this new composite-metric.
        :param _builtins.str target: Defines new target value to scale on for the composed metric.
        """
        pulumi.set(__self__, "activation_target", activation_target)
        pulumi.set(__self__, "formula", formula)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="activationTarget")
    def activation_target(self) -> _builtins.str:
        """
        Defines the new activation target value to scale on for the composed metric.
        """
        return pulumi.get(self, "activation_target")

    @_builtins.property
    @pulumi.getter
    def formula(self) -> _builtins.str:
        """
        Composes metrics together and allows them to be modified/manipulated. It accepts mathematical/conditional statements.
        """
        return pulumi.get(self, "formula")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        Defines metric type used for this new composite-metric.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        """
        Defines new target value to scale on for the composed metric.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWorkloadOptionAutoscalingKedaTriggerResult(dict):
    def __init__(__self__, *,
                 metadata: Mapping[str, _builtins.str],
                 metric_type: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 use_cached_metrics: _builtins.bool,
                 authentication_reves: Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaTriggerAuthenticationRefResult']] = None):
        """
        :param Mapping[str, _builtins.str] metadata: The configuration parameters that the trigger requires.
        :param _builtins.str metric_type: The type of metric to be used for scaling.
        :param _builtins.str name: An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        :param _builtins.str type: The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        :param _builtins.bool use_cached_metrics: Enables caching of metric values during polling interval.
        :param Sequence['GetWorkloadOptionAutoscalingKedaTriggerAuthenticationRefArgs'] authentication_reves: Reference to a KEDA authentication object for secure access to external systems.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "use_cached_metrics", use_cached_metrics)
        if authentication_reves is not None:
            pulumi.set(__self__, "authentication_reves", authentication_reves)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        """
        The configuration parameters that the trigger requires.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        The type of metric to be used for scaling.
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="useCachedMetrics")
    def use_cached_metrics(self) -> _builtins.bool:
        """
        Enables caching of metric values during polling interval.
        """
        return pulumi.get(self, "use_cached_metrics")

    @_builtins.property
    @pulumi.getter(name="authenticationReves")
    def authentication_reves(self) -> Optional[Sequence['outputs.GetWorkloadOptionAutoscalingKedaTriggerAuthenticationRefResult']]:
        """
        Reference to a KEDA authentication object for secure access to external systems.
        """
        return pulumi.get(self, "authentication_reves")


@pulumi.output_type
class GetWorkloadOptionAutoscalingKedaTriggerAuthenticationRefResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: The name of secret listed in the GVC spec.keda.secrets.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of secret listed in the GVC spec.keda.secrets.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkloadOptionAutoscalingMultiResult(dict):
    def __init__(__self__, *,
                 metric: _builtins.str,
                 target: _builtins.int):
        """
        :param _builtins.str metric: Valid values: `cpu` or `memory`.
        :param _builtins.int target: Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.str:
        """
        Valid values: `cpu` or `memory`.
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.int:
        """
        Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWorkloadOptionMultiZoneResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetWorkloadRequestRetryPolicyResult(dict):
    def __init__(__self__, *,
                 attempts: _builtins.int,
                 retry_ons: Sequence[_builtins.str]):
        pulumi.set(__self__, "attempts", attempts)
        pulumi.set(__self__, "retry_ons", retry_ons)

    @_builtins.property
    @pulumi.getter
    def attempts(self) -> _builtins.int:
        return pulumi.get(self, "attempts")

    @_builtins.property
    @pulumi.getter(name="retryOns")
    def retry_ons(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "retry_ons")


@pulumi.output_type
class GetWorkloadRolloutOptionResult(dict):
    def __init__(__self__, *,
                 max_surge_replicas: _builtins.str,
                 max_unavailable_replicas: _builtins.str,
                 min_ready_seconds: _builtins.int,
                 scaling_policy: _builtins.str,
                 termination_grace_period_seconds: _builtins.int):
        """
        :param _builtins.str max_surge_replicas: The number of replicas that can be created above the desired amount of replicas during an update.
        :param _builtins.str max_unavailable_replicas: The number of replicas that can be unavailable during the update process.
        :param _builtins.int min_ready_seconds: The minimum number of seconds a container must run without crashing to be considered available.
        :param _builtins.str scaling_policy: The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        :param _builtins.int termination_grace_period_seconds: The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
        pulumi.set(__self__, "max_surge_replicas", max_surge_replicas)
        pulumi.set(__self__, "max_unavailable_replicas", max_unavailable_replicas)
        pulumi.set(__self__, "min_ready_seconds", min_ready_seconds)
        pulumi.set(__self__, "scaling_policy", scaling_policy)
        pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @_builtins.property
    @pulumi.getter(name="maxSurgeReplicas")
    def max_surge_replicas(self) -> _builtins.str:
        """
        The number of replicas that can be created above the desired amount of replicas during an update.
        """
        return pulumi.get(self, "max_surge_replicas")

    @_builtins.property
    @pulumi.getter(name="maxUnavailableReplicas")
    def max_unavailable_replicas(self) -> _builtins.str:
        """
        The number of replicas that can be unavailable during the update process.
        """
        return pulumi.get(self, "max_unavailable_replicas")

    @_builtins.property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> _builtins.int:
        """
        The minimum number of seconds a container must run without crashing to be considered available.
        """
        return pulumi.get(self, "min_ready_seconds")

    @_builtins.property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> _builtins.str:
        """
        The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        """
        return pulumi.get(self, "scaling_policy")

    @_builtins.property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> _builtins.int:
        """
        The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        """
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class GetWorkloadSecurityOptionResult(dict):
    def __init__(__self__, *,
                 file_system_group_id: _builtins.int):
        """
        :param _builtins.int file_system_group_id: The group id assigned to any mounted volume.
        """
        pulumi.set(__self__, "file_system_group_id", file_system_group_id)

    @_builtins.property
    @pulumi.getter(name="fileSystemGroupId")
    def file_system_group_id(self) -> _builtins.int:
        """
        The group id assigned to any mounted volume.
        """
        return pulumi.get(self, "file_system_group_id")


@pulumi.output_type
class GetWorkloadSidecarResult(dict):
    def __init__(__self__, *,
                 envoy: _builtins.str):
        pulumi.set(__self__, "envoy", envoy)

    @_builtins.property
    @pulumi.getter
    def envoy(self) -> _builtins.str:
        return pulumi.get(self, "envoy")


@pulumi.output_type
class GetWorkloadStatusResult(dict):
    def __init__(__self__, *,
                 canonical_endpoint: _builtins.str,
                 current_replica_count: _builtins.int,
                 endpoint: _builtins.str,
                 health_checks: Sequence['outputs.GetWorkloadStatusHealthCheckResult'],
                 internal_name: _builtins.str,
                 load_balancers: Sequence['outputs.GetWorkloadStatusLoadBalancerResult'],
                 parent_id: _builtins.str,
                 replica_internal_names: Sequence[_builtins.str],
                 resolved_images: Sequence['outputs.GetWorkloadStatusResolvedImageResult']):
        """
        :param _builtins.str canonical_endpoint: Canonical endpoint for the workload.
        :param _builtins.int current_replica_count: Current amount of replicas deployed.
        :param _builtins.str endpoint: Endpoint for the workload.
        :param Sequence['GetWorkloadStatusHealthCheckArgs'] health_checks: Current health status.
        :param _builtins.str internal_name: Internal hostname for the workload. Used for service-to-service requests.
        :param _builtins.str parent_id: ID of the parent object.
        :param Sequence['GetWorkloadStatusResolvedImageArgs'] resolved_images: Resolved images for workloads with dynamic tags enabled.
        """
        pulumi.set(__self__, "canonical_endpoint", canonical_endpoint)
        pulumi.set(__self__, "current_replica_count", current_replica_count)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "health_checks", health_checks)
        pulumi.set(__self__, "internal_name", internal_name)
        pulumi.set(__self__, "load_balancers", load_balancers)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "replica_internal_names", replica_internal_names)
        pulumi.set(__self__, "resolved_images", resolved_images)

    @_builtins.property
    @pulumi.getter(name="canonicalEndpoint")
    def canonical_endpoint(self) -> _builtins.str:
        """
        Canonical endpoint for the workload.
        """
        return pulumi.get(self, "canonical_endpoint")

    @_builtins.property
    @pulumi.getter(name="currentReplicaCount")
    def current_replica_count(self) -> _builtins.int:
        """
        Current amount of replicas deployed.
        """
        return pulumi.get(self, "current_replica_count")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        Endpoint for the workload.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetWorkloadStatusHealthCheckResult']:
        """
        Current health status.
        """
        return pulumi.get(self, "health_checks")

    @_builtins.property
    @pulumi.getter(name="internalName")
    def internal_name(self) -> _builtins.str:
        """
        Internal hostname for the workload. Used for service-to-service requests.
        """
        return pulumi.get(self, "internal_name")

    @_builtins.property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Sequence['outputs.GetWorkloadStatusLoadBalancerResult']:
        return pulumi.get(self, "load_balancers")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        ID of the parent object.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="replicaInternalNames")
    def replica_internal_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "replica_internal_names")

    @_builtins.property
    @pulumi.getter(name="resolvedImages")
    def resolved_images(self) -> Sequence['outputs.GetWorkloadStatusResolvedImageResult']:
        """
        Resolved images for workloads with dynamic tags enabled.
        """
        return pulumi.get(self, "resolved_images")


@pulumi.output_type
class GetWorkloadStatusHealthCheckResult(dict):
    def __init__(__self__, *,
                 active: _builtins.bool,
                 code: _builtins.int,
                 failures: _builtins.int,
                 last_checked: _builtins.str,
                 message: _builtins.str,
                 success: _builtins.bool,
                 successes: _builtins.int):
        """
        :param _builtins.bool active: Active boolean for the associated workload.
        :param _builtins.int code: Current output code for the associated workload.
        :param _builtins.int failures: Failure integer for the associated workload.
        :param _builtins.str last_checked: Timestamp in UTC of the last health check.
        :param _builtins.str message: Current health status for the associated workload.
        :param _builtins.bool success: Success boolean for the associated workload.
        :param _builtins.int successes: Success integer for the associated workload.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "failures", failures)
        pulumi.set(__self__, "last_checked", last_checked)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "success", success)
        pulumi.set(__self__, "successes", successes)

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        """
        Active boolean for the associated workload.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.int:
        """
        Current output code for the associated workload.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def failures(self) -> _builtins.int:
        """
        Failure integer for the associated workload.
        """
        return pulumi.get(self, "failures")

    @_builtins.property
    @pulumi.getter(name="lastChecked")
    def last_checked(self) -> _builtins.str:
        """
        Timestamp in UTC of the last health check.
        """
        return pulumi.get(self, "last_checked")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Current health status for the associated workload.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def success(self) -> _builtins.bool:
        """
        Success boolean for the associated workload.
        """
        return pulumi.get(self, "success")

    @_builtins.property
    @pulumi.getter
    def successes(self) -> _builtins.int:
        """
        Success integer for the associated workload.
        """
        return pulumi.get(self, "successes")


@pulumi.output_type
class GetWorkloadStatusLoadBalancerResult(dict):
    def __init__(__self__, *,
                 origin: _builtins.str,
                 url: _builtins.str):
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetWorkloadStatusResolvedImageResult(dict):
    def __init__(__self__, *,
                 error_messages: Sequence[_builtins.str],
                 images: Sequence['outputs.GetWorkloadStatusResolvedImageImageResult'],
                 next_retry_at: _builtins.str,
                 resolved_at: _builtins.str,
                 resolved_for_version: _builtins.int):
        """
        :param Sequence['GetWorkloadStatusResolvedImageImageArgs'] images: A list of images that were resolved.
        :param _builtins.str resolved_at: UTC Time when the images were resolved.
        :param _builtins.int resolved_for_version: Workload version the images were resolved for.
        """
        pulumi.set(__self__, "error_messages", error_messages)
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "next_retry_at", next_retry_at)
        pulumi.set(__self__, "resolved_at", resolved_at)
        pulumi.set(__self__, "resolved_for_version", resolved_for_version)

    @_builtins.property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "error_messages")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetWorkloadStatusResolvedImageImageResult']:
        """
        A list of images that were resolved.
        """
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter(name="nextRetryAt")
    def next_retry_at(self) -> _builtins.str:
        return pulumi.get(self, "next_retry_at")

    @_builtins.property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> _builtins.str:
        """
        UTC Time when the images were resolved.
        """
        return pulumi.get(self, "resolved_at")

    @_builtins.property
    @pulumi.getter(name="resolvedForVersion")
    def resolved_for_version(self) -> _builtins.int:
        """
        Workload version the images were resolved for.
        """
        return pulumi.get(self, "resolved_for_version")


@pulumi.output_type
class GetWorkloadStatusResolvedImageImageResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 manifests: Sequence['outputs.GetWorkloadStatusResolvedImageImageManifestResult']):
        """
        :param _builtins.str digest: A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "manifests", manifests)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def manifests(self) -> Sequence['outputs.GetWorkloadStatusResolvedImageImageManifestResult']:
        return pulumi.get(self, "manifests")


@pulumi.output_type
class GetWorkloadStatusResolvedImageImageManifestResult(dict):
    def __init__(__self__, *,
                 digest: _builtins.str,
                 image: _builtins.str,
                 media_type: _builtins.str,
                 platform: Mapping[str, _builtins.str]):
        """
        :param _builtins.str digest: A SHA256 hash that uniquely identifies the specific image manifest.
        :param _builtins.str image: The name and tag of the resolved image.
        :param _builtins.str media_type: The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        :param Mapping[str, _builtins.str] platform: Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "platform", platform)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        """
        A SHA256 hash that uniquely identifies the specific image manifest.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        """
        The name and tag of the resolved image.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> Mapping[str, _builtins.str]:
        """
        Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        """
        return pulumi.get(self, "platform")


