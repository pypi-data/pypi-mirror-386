# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetOrgResult',
    'AwaitableGetOrgResult',
    'get_org',
    'get_org_output',
]

@pulumi.output_type
class GetOrgResult:
    """
    A collection of values returned by getOrg.
    """
    def __init__(__self__, account_id=None, auth_config=None, cpln_id=None, description=None, id=None, invitees=None, name=None, observability=None, security=None, self_link=None, session_timeout_seconds=None, statuses=None, tags=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if auth_config and not isinstance(auth_config, dict):
            raise TypeError("Expected argument 'auth_config' to be a dict")
        pulumi.set(__self__, "auth_config", auth_config)
        if cpln_id and not isinstance(cpln_id, str):
            raise TypeError("Expected argument 'cpln_id' to be a str")
        pulumi.set(__self__, "cpln_id", cpln_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if invitees and not isinstance(invitees, list):
            raise TypeError("Expected argument 'invitees' to be a list")
        pulumi.set(__self__, "invitees", invitees)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if observability and not isinstance(observability, dict):
            raise TypeError("Expected argument 'observability' to be a dict")
        pulumi.set(__self__, "observability", observability)
        if security and not isinstance(security, dict):
            raise TypeError("Expected argument 'security' to be a dict")
        pulumi.set(__self__, "security", security)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if session_timeout_seconds and not isinstance(session_timeout_seconds, int):
            raise TypeError("Expected argument 'session_timeout_seconds' to be a int")
        pulumi.set(__self__, "session_timeout_seconds", session_timeout_seconds)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional['outputs.GetOrgAuthConfigResult']:
        return pulumi.get(self, "auth_config")

    @_builtins.property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> _builtins.str:
        return pulumi.get(self, "cpln_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def invitees(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "invitees")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def observability(self) -> Optional['outputs.GetOrgObservabilityResult']:
        return pulumi.get(self, "observability")

    @_builtins.property
    @pulumi.getter
    def security(self) -> Optional['outputs.GetOrgSecurityResult']:
        return pulumi.get(self, "security")

    @_builtins.property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> _builtins.str:
        return pulumi.get(self, "self_link")

    @_builtins.property
    @pulumi.getter(name="sessionTimeoutSeconds")
    def session_timeout_seconds(self) -> _builtins.int:
        return pulumi.get(self, "session_timeout_seconds")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetOrgStatusResult']:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetOrgResult(GetOrgResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgResult(
            account_id=self.account_id,
            auth_config=self.auth_config,
            cpln_id=self.cpln_id,
            description=self.description,
            id=self.id,
            invitees=self.invitees,
            name=self.name,
            observability=self.observability,
            security=self.security,
            self_link=self.self_link,
            session_timeout_seconds=self.session_timeout_seconds,
            statuses=self.statuses,
            tags=self.tags)


def get_org(auth_config: Optional[Union['GetOrgAuthConfigArgs', 'GetOrgAuthConfigArgsDict']] = None,
            observability: Optional[Union['GetOrgObservabilityArgs', 'GetOrgObservabilityArgsDict']] = None,
            security: Optional[Union['GetOrgSecurityArgs', 'GetOrgSecurityArgsDict']] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgResult:
    """
    Use this data source to access details about the current [org](https://docs.controlplane.com/reference/org) targeted by the provider configuration.

    ## Outputs

    The following attributes are exported:

    - **id** (String) The unique identifier for this org.
    - **cpln_id** (String) The ID, in GUID format, of the org.
    - **name** (String) The name of org.
    - **description** (String) Description of the org.
    - **tags** (Map of String) Key-value map of resource tags.
    - **self_link** (String) Full link to this resource. Can be referenced by other resources.
    - **observability** (Block List, Max: 1) (see below).
    - **account_id** (String) The associated account ID that was used when creating the org.
    - **invitees** (Set of String) Email addresses that received invitations to join the org and were assigned to the `superusers` group.
    - **session_timeout_seconds** (Int) The idle time (in seconds) after which the console UI signs out the user. Default: `900`.
    - **auth_config** (Block List, Max: 1) (see below).
    - **security** (Block List, Max: 1) (see below).
    - **status** (List of Object) (see below).

    <a id="nestedblock--observability"></a>

    ### `observability`

    The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.

    Read-Only:

    - **logs_retention_days** (Number) Log retention days. Default: `30`.
    - **metrics_retention_days** (Number) Metrics retention days. Default: `30`.
    - **traces_retention_days** (Number) Traces retention days. Default: `30`.
    - **default_alert_emails** (Set of String) These emails are configured as alert recipients in Grafana when the `grafana-default-email` contact delivery type is `Email`.

    <a id="nestedblock--auth_config"></a>

    ### `auth_config`

    Configuration settings related to authentication within the org.

    Read-Only:

    - **domain_auto_members** (Set of String) List of domains that auto-provision users when authenticating using SAML.
    - **saml_only** (Boolean) Enforces SAML-only authentication.

    <a id="nestedblock--security"></a>

    ### `security`

    Read-Only:

    - **threat_detection** (Block List, Max: 1) (see below).

    <a id="nestedblock--security--threat_detection"></a>

    ### `security.threat_detection`

    Read-Only:

    - **enabled** (Boolean) Indicates whether threat detection information is forwarded.
    - **minimum_severity** (String) Any threats with this severity and more severe are sent. Others are ignored. Valid values: `warning`, `error`, or `critical`.
    - **syslog** (Block List, Max: 1) (see below).

    <a id="nestedblock--security--threat_detection--syslog"></a>

    ### `security.threat_detection.syslog`

    Read-Only:

    - **port** (Number) The port to send syslog messages to.
    - **transport** (String) The transport-layer protocol used for syslog messages. If `tcp` is chosen, messages are sent with TLS. Default: `tcp`.
    - **host** (String) The hostname to send syslog messages to.

    <a id="nestedblock--status"></a>

    ### `status`

    Status of the org.

    Read-Only:

    - **account_link** (String) The link of the account the org belongs to.
    - **active** (Boolean) Indicates whether the org is active or not.
    - **endpoint_prefix** (String)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cpln as cpln

    org = cpln.get_org()
    pulumi.export("orgSummary", {
        "name": org.name,
        "cplnId": org.cpln_id,
        "accountId": org.account_id,
        "sessionTimeoutSec": org.session_timeout_seconds,
        "observability": org.observability,
    })
    ```
    """
    __args__ = dict()
    __args__['authConfig'] = auth_config
    __args__['observability'] = observability
    __args__['security'] = security
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cpln:index/getOrg:getOrg', __args__, opts=opts, typ=GetOrgResult).value

    return AwaitableGetOrgResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        auth_config=pulumi.get(__ret__, 'auth_config'),
        cpln_id=pulumi.get(__ret__, 'cpln_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        invitees=pulumi.get(__ret__, 'invitees'),
        name=pulumi.get(__ret__, 'name'),
        observability=pulumi.get(__ret__, 'observability'),
        security=pulumi.get(__ret__, 'security'),
        self_link=pulumi.get(__ret__, 'self_link'),
        session_timeout_seconds=pulumi.get(__ret__, 'session_timeout_seconds'),
        statuses=pulumi.get(__ret__, 'statuses'),
        tags=pulumi.get(__ret__, 'tags'))
def get_org_output(auth_config: Optional[pulumi.Input[Optional[Union['GetOrgAuthConfigArgs', 'GetOrgAuthConfigArgsDict']]]] = None,
                   observability: Optional[pulumi.Input[Optional[Union['GetOrgObservabilityArgs', 'GetOrgObservabilityArgsDict']]]] = None,
                   security: Optional[pulumi.Input[Optional[Union['GetOrgSecurityArgs', 'GetOrgSecurityArgsDict']]]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrgResult]:
    """
    Use this data source to access details about the current [org](https://docs.controlplane.com/reference/org) targeted by the provider configuration.

    ## Outputs

    The following attributes are exported:

    - **id** (String) The unique identifier for this org.
    - **cpln_id** (String) The ID, in GUID format, of the org.
    - **name** (String) The name of org.
    - **description** (String) Description of the org.
    - **tags** (Map of String) Key-value map of resource tags.
    - **self_link** (String) Full link to this resource. Can be referenced by other resources.
    - **observability** (Block List, Max: 1) (see below).
    - **account_id** (String) The associated account ID that was used when creating the org.
    - **invitees** (Set of String) Email addresses that received invitations to join the org and were assigned to the `superusers` group.
    - **session_timeout_seconds** (Int) The idle time (in seconds) after which the console UI signs out the user. Default: `900`.
    - **auth_config** (Block List, Max: 1) (see below).
    - **security** (Block List, Max: 1) (see below).
    - **status** (List of Object) (see below).

    <a id="nestedblock--observability"></a>

    ### `observability`

    The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.

    Read-Only:

    - **logs_retention_days** (Number) Log retention days. Default: `30`.
    - **metrics_retention_days** (Number) Metrics retention days. Default: `30`.
    - **traces_retention_days** (Number) Traces retention days. Default: `30`.
    - **default_alert_emails** (Set of String) These emails are configured as alert recipients in Grafana when the `grafana-default-email` contact delivery type is `Email`.

    <a id="nestedblock--auth_config"></a>

    ### `auth_config`

    Configuration settings related to authentication within the org.

    Read-Only:

    - **domain_auto_members** (Set of String) List of domains that auto-provision users when authenticating using SAML.
    - **saml_only** (Boolean) Enforces SAML-only authentication.

    <a id="nestedblock--security"></a>

    ### `security`

    Read-Only:

    - **threat_detection** (Block List, Max: 1) (see below).

    <a id="nestedblock--security--threat_detection"></a>

    ### `security.threat_detection`

    Read-Only:

    - **enabled** (Boolean) Indicates whether threat detection information is forwarded.
    - **minimum_severity** (String) Any threats with this severity and more severe are sent. Others are ignored. Valid values: `warning`, `error`, or `critical`.
    - **syslog** (Block List, Max: 1) (see below).

    <a id="nestedblock--security--threat_detection--syslog"></a>

    ### `security.threat_detection.syslog`

    Read-Only:

    - **port** (Number) The port to send syslog messages to.
    - **transport** (String) The transport-layer protocol used for syslog messages. If `tcp` is chosen, messages are sent with TLS. Default: `tcp`.
    - **host** (String) The hostname to send syslog messages to.

    <a id="nestedblock--status"></a>

    ### `status`

    Status of the org.

    Read-Only:

    - **account_link** (String) The link of the account the org belongs to.
    - **active** (Boolean) Indicates whether the org is active or not.
    - **endpoint_prefix** (String)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cpln as cpln

    org = cpln.get_org()
    pulumi.export("orgSummary", {
        "name": org.name,
        "cplnId": org.cpln_id,
        "accountId": org.account_id,
        "sessionTimeoutSec": org.session_timeout_seconds,
        "observability": org.observability,
    })
    ```
    """
    __args__ = dict()
    __args__['authConfig'] = auth_config
    __args__['observability'] = observability
    __args__['security'] = security
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cpln:index/getOrg:getOrg', __args__, opts=opts, typ=GetOrgResult)
    return __ret__.apply(lambda __response__: GetOrgResult(
        account_id=pulumi.get(__response__, 'account_id'),
        auth_config=pulumi.get(__response__, 'auth_config'),
        cpln_id=pulumi.get(__response__, 'cpln_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        invitees=pulumi.get(__response__, 'invitees'),
        name=pulumi.get(__response__, 'name'),
        observability=pulumi.get(__response__, 'observability'),
        security=pulumi.get(__response__, 'security'),
        self_link=pulumi.get(__response__, 'self_link'),
        session_timeout_seconds=pulumi.get(__response__, 'session_timeout_seconds'),
        statuses=pulumi.get(__response__, 'statuses'),
        tags=pulumi.get(__response__, 'tags')))
