[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dhenara-ai"
dynamic = ["version"]
description = "Dhenara Package for Multi Provider AI-Model API calls"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    {name = "Dhenara Inc", email = "support@dhenara.com"},
]
keywords = ["ai", "llm", "machine learning", "language models"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "httpx>=0.28.0",
    "requests>=2.32.1",
    "asgiref>=3.8.0",
    "cryptography>=44.0.0",
    "aiohttp>=3.11.0",
    "pydantic>=2.10.0",
    "pyyaml>=6.0",
    "Pillow>=11.1.0",
    "openai>=2.3.0",
    "google-genai>=1.43.0",
    "anthropic>=0.69.0",
    "azure-ai-inference>=1.0.0b9",
    "boto3>=1.40.51",
    "botocore>=1.40.51",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "ruff",
    "add-trailing-comma",
]

[project.urls]
Homepage = "https://dhenara.com"
Documentation = "https://docs.dhenara.com/"
"Bug Reports" = "https://github.com/dhenara/dhenara-ai/issues"
"Source Code" = "https://github.com/dhenara/dhenara-ai"

[tool.hatch.version]
path = "src/dhenara/ai/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/dhenara"]

[tool.hatch.build.targets.sdist]
include = [
    "src/dhenara",
    "README.md",
]

[tool.ruff]
target-version = "py310"
line-length = 120
src = ["src"]
force-exclude = true
exclude = []

[tool.ruff.lint]
select = [
    "I",  # automatically sort imports
    "E",  # find errors
    "B",  # Bugbear
    "F",  # linting
    "W",  # find warnings
    "N",  # naming errors
    "UP",  # PyUpgrade; update for newer syntax of the language.  Eg: Use list in favor of List from 3.10
    "YTT",  # checks for misuse of sys.version or sys.version_info
    "ASYNC",  # checks for bad async / asyncio practices
    "FLY",  # Avoid unneccessary join: Use f"{a}_{b}_{c}" instead of "_".join([a, b, c])
    "RUF",  # ruff-specific rules
    "PERF",  # A Linter for performance anti-patterns
    "S101",  # checks for use of asserts instead of if cond: raise AssertionError
    "FBT",  # Disallow boolean traps
    "A",  # check if shadow built-ins
    "COM",  # Check if commas are missing
    "CPY",  # Check if copyright header is missing
    "C4",  # Comprehension linter
]
ignore = [
    "RUF012",  # mutable-class-default: Will fail with all Modelclass Meta def
    "E722",    # TODO_FUTURE: Ignoring the exception rule for the time being
    "B904",    # Chained exceptions
    "COM812",  # This rules may cause conflicts when used with the formatter.
    "FBT001",  # Prevents boolean-default-value-positional-argument
    "FBT002",  # Prevents boolean-default-value-positional-argument
    "A005",    # Module name shadows a Python standard-library module
    "UP038",   # Use `X | Y` in isinstance
]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "I",     # Innore sorting order in init files else will compail fail
    "F403",  # Enable "import *" in init files
]
"tests/test_*.py" = ["S101"]
"*/tests/test_*.py" = ["S101"]


[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.isort]
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
