"question","answer","category","tags"
"How do I enable HTTPS in production?","Use a reverse proxy (nginx or traefik) with Let's Encrypt. Automate certificate renewals and reload the proxy; enforce HSTS after verifying HTTPS works.","Operations","security,https,beginner"
"How do I rotate server logs?","Prefer OS logrotate with a weekly schedule and compression. Example: uv run python scripts/rotate_logs.py --compress --keep=8. Validate journald retention if applicable.","Operations","logs,rotation,maintenance,beginner"
"How do I clear the application cache?","Use the maintenance CLI to clear cache safely. Example: uv run python scripts/clear_cache.py. Restart the app only if CLI is unavailable.","Operations","maintenance,cache,beginner"
"How do I create a new agent in Automagik Hive?","Copy the template agent directory and customize the configuration. Steps: 1) Copy ai/agents/template-agent/ to ai/agents/your-agent/ 2) Edit config.yaml to change agent_id and name 3) Customize instructions and tools 4) Update version number\n\nExample commands:\ncp -r ai/agents/template-agent ai/agents/my-agent\n# Edit config.yaml:\nagent:\n  name: ""My Custom Agent""\n  agent_id: ""my-agent""\n  version: 1\n\nReference: ai/agents/template-agent/config.yaml","Development","agent-creation,template,yaml,beginner"
"What is the structure of an agent config.yaml file?","Agent configuration includes: agent metadata (name, agent_id, version), model settings (provider, id, temperature), storage configuration, memory settings, MCP servers, tools, and instructions. All agents require these core sections.\n\nExample structure:\nagent:\n  name: ""ðŸ”§ Template Agent""\n  agent_id: ""template-agent""\n  version: 1\nmodel:\n  provider: anthropic\n  id: claude-sonnet-4-20250514\nstorage:\n  type: postgres\n  table_name: template_agent\n\nReference: ai/agents/template-agent/config.yaml","Reference","yaml,configuration,schema,beginner"
"How do I add MCP servers to my agent?","Add MCP servers in the mcp_servers list in config.yaml. Available servers include automagik-forge, postgres, ask-repo-agent, search-repo-docs, send_whatsapp_message, and claude-mcp. Use wildcards (*) for all tools.\n\nExample configuration:\nmcp_servers:\n  - ""automagik-forge:*""\n  - ""postgres:query""\n  - ""ask-repo-agent:*""\n  - ""search-repo-docs:*""\n  - ""claude-mcp:*""\n\nReference: ai/agents/template-agent/config.yaml","Integration","mcp,tools,configuration,intermediate"
"What tools are available for agents?","Built-in tools include ShellTools for system commands. Custom tools can be added in ai/tools/. MCP servers provide additional tools like postgres queries, repository documentation, and WhatsApp messaging.\n\nExample configuration:\ntools:\n- name: ShellTools\n\ntool_choice: auto\ntool_call_limit: 15\n\nReference: ai/agents/template-agent/config.yaml","Reference","tools,shell,mcp,intermediate"
"How do I configure memory settings for agents?","Memory configuration includes num_history_runs (conversation history), enable_user_memories (user-specific), enable_agentic_memory (agent learning), memory_retention_days (cleanup), and various context flags.\n\nExample configuration:\nmemory:\n  num_history_runs: 30\n  enable_user_memories: true\n  enable_agentic_memory: true\n  memory_retention_days: 180\n  add_memory_references: true\n\nReference: ai/agents/template-agent/config.yaml","Configuration","memory,history,retention,intermediate"
"How do I create a team configuration?","Copy ai/teams/template-team/ and modify config.yaml. Teams use mode: route to direct requests to member agents. Configure team metadata, model settings, members list, and routing instructions.\n\nExample configuration:\nteam:\n  mode: route\n  name: Template Team\n  team_id: template-team\n  version: 1\nmembers:\n- template-agent\n\nReference: ai/teams/template-team/config.yaml","Development","teams,routing,collaboration,intermediate"
"What is the difference between agents, teams, and workflows?","Agents are individual AI entities with specific capabilities. Teams route requests between multiple agents for collaborative work. Workflows orchestrate complex multi-step business processes with background execution support.\n\nExample concepts:\n# Agent: Single specialized AI\n# Team: Routes to multiple agents\n# Workflow: Multi-step processes\n\nworkflow:\n  background_execution: true\n\nReference: ai/agents/, ai/teams/, ai/workflows/","Architecture","architecture,concepts,overview,beginner"
"How do I set up the development environment?","Install dependencies with 'make install' (includes PostgreSQL) or 'make install-local' (local only). Start development server with 'make dev'. Always use UV for Python: 'uv run python', 'uv add package'. Never use pip directly.\n\nExample commands:\nmake install  # Full PostgreSQL setup\nmake dev      # Start development\nuv add package  # Add dependency\nuv run pytest  # Run tests\n\nReference: Makefile, pyproject.toml, .env.example","Environment","environment,setup,uv,makefile,beginner"
"How do I configure the database connection?","Set HIVE_DATABASE_URL in .env file with PostgreSQL connection string. Use agno schema for framework tables. Each agent gets its own table_name in storage config. Auto schema upgrade is supported.\n\nExample configuration:\nHIVE_DATABASE_URL=postgresql+psycopg://user:pass@localhost:5532/hive\n\nstorage:\n  type: postgres\n  table_name: template_agent\n  auto_upgrade_schema: true\n\nReference: lib/config/settings.py, .env.example","Configuration","database,postgresql,connection,intermediate"
"What are the essential commands for development?","Key commands: make install (setup), make dev (start server), uv run pytest (tests), uv run ruff check --fix (format), uv run mypy . (type check), make logs (view logs).\n\nExample commands:\nmake install     # Setup environment\nmake dev        # Start development\nuv run pytest  # Run tests\nuv run ruff check --fix  # Format code\nmake logs       # View logs\n\nReference: Makefile","Reference","commands,development,makefile,beginner"
"How do I run tests in the framework?","Use 'uv run pytest' for all tests, 'uv run pytest tests/ai/agents/' for agent tests specifically. Create test files following the pattern in tests/. Include test coverage with --cov flag for quality assurance.\n\nExample commands:\nuv run pytest tests/ai/agents/\nuv run pytest --cov=ai --cov=api --cov=lib\n# Create tests/ai/agents/test_your_agent.py\n\nReference: tests/, pyproject.toml","Testing","testing,pytest,coverage,intermediate"
"How does agent registry and discovery work?","Agents are auto-discovered from ai/agents/ directories. Each needs config.yaml with agent_id. Use AgentRegistry.get_agent(agent_id) for programmatic access. Registry loads all agents automatically at startup.\n\nExample code:\nfrom ai.agents.registry import AgentRegistry\n\n# Get specific agent\nagent = AgentRegistry.get_agent(""template-agent"")\n\n# All agents discovered from ai/agents/\n\nReference: ai/agents/registry.py","Architecture","registry,discovery,automation,advanced"
"What are the streaming capabilities?","Enable streaming in config.yaml with stream: true and stream_intermediate_steps: true. Supports real-time agent responses, intermediate step visibility, and team member event streaming for collaborative workflows.\n\nExample configuration:\nstreaming:\n  stream: true\n  stream_intermediate_steps: true\n  stream_member_events: true\n  show_members_responses: true\n\nReference: ai/agents/template-agent/config.yaml","Features","streaming,realtime,events,advanced"
"How do I manage versions in YAML configs?","All YAML configs require a version field. Increment when making changes (version: 1, version: 2). Version tracks component evolution, enables rollback, and is used for deployment management.\n\nExample versioning:\nagent:\n  version: 1  # Increment when updating\n\nteam:\n  version: 2  # Track changes\n\nworkflow:\n  version: 1  # Enable rollback\n\nReference: ai/agents/, ai/teams/, ai/workflows/","Standards","versioning,yaml,deployment,beginner"
"What is the knowledge base CSV format?","CSV structure: question,answer,category,tags. Used for RAG system with hot reload. Add knowledge by editing knowledge_rag.csv file with proper schema. The simplified 4-column format supports flexible metadata via tags.\n\nExample structure:\n""question"",""answer"",""category"",""tags""\n""How to..."",""Step by step..."",""Development"",""tag1,tag2,beginner""\n\nReference: lib/knowledge/knowledge_rag.csv","Knowledge","knowledge,rag,csv,schema,intermediate"
"How do I configure environment variables?","Copy .env.example to .env and update values. Required: ANTHROPIC_API_KEY, HIVE_DATABASE_URL, HIVE_API_KEY. Optional: OPENAI_API_KEY, LANGWATCH_API_KEY. Use load_dotenv() pattern in code.\n\nExample .env file:\nANTHROPIC_API_KEY=your_key\nHIVE_DATABASE_URL=postgresql://...\nHIVE_API_KEY=your_api_key\n\n# In Python\nfrom dotenv import load_dotenv\nload_dotenv()\n\nReference: .env.example, lib/config/settings.py","Configuration","environment,env,secrets,beginner"
"What is the project structure and file organization?","Project uses small focused files (<350 lines), single responsibility per file, separation of utilities/constants/types. Structure: ai/ (agents/teams/workflows), api/ (FastAPI), lib/ (shared services), tests/ (testing).\n\nProject structure:\nai/\nâ”œâ”€â”€ agents/registry.py\nâ”œâ”€â”€ teams/registry.py\nâ””â”€â”€ workflows/registry.py\napi/\nâ”œâ”€â”€ serve.py  # Production\nâ””â”€â”€ main.py   # Development\nlib/\nâ”œâ”€â”€ config/settings.py\nâ””â”€â”€ knowledge/csv_hot_reload.py\n\nReference: ai/, api/, lib/, tests/","Architecture","structure,organization,architecture,beginner"
"What are the API endpoints and structure?","Main API routes in api/routes/v1_router.py. Includes health check (/health), version info (/version), MCP integration (/mcp). Production server in api/serve.py, development playground in api/main.py.\n\nExample endpoints:\n# FastAPI endpoints\n@router.get(""/health"")\n@router.get(""/version"")\n@router.post(""/mcp"")\n\n# Start production\napi/serve.py\n# Start development\napi/main.py\n\nReference: api/routes/v1_router.py, api/serve.py, api/main.py","API","api,fastapi,routes,intermediate"
"How do I implement error handling patterns?","Use proper exception hierarchy, comprehensive error logging, input validation, graceful failure handling. Log errors with context using structured logging. Include error recovery strategies and user-friendly messages.\n\nExample error handling:\ntry:\n    result = process_request(data)\nexcept ValidationError as e:\n    logger.error(f""Validation failed: {e}"")\n    raise HTTPException(400, detail=str(e))\nexcept Exception as e:\n    logger.exception(""Unexpected error"")\n    raise HTTPException(500)\n\nReference: lib/, api/","Patterns","error-handling,logging,exceptions,advanced"
"What is the clean architecture implementation pattern?","Structure: Controller (presentation) â†’ Service (application logic) â†’ Repository (domain) â†’ Models (entities). Separate concerns, use dependency injection, implement interfaces for loose coupling between layers.\n\nExample structure:\n# Controller layer\nclass UserController:\n    def __init__(self, service: IUserService):\n        self._service = service\n\n# Service layer\nclass UserService:\n    def __init__(self, repo: IUserRepository):\n        self._repo = repo\n\nReference: api/, lib/","Architecture","clean-architecture,patterns,separation,advanced"
"How do I configure Docker deployment?","Production: 'make prod' (full stack), Development: 'make dev' (local). Check status: 'make status', logs: 'make logs', stop: 'make stop-all'.\n\nExample commands:\nmake prod      # Production stack\nmake dev       # Development\nmake status    # Check all\nmake logs      # View logs\nmake stop-all  # Stop everything\n\nReference: Makefile, docker/","Deployment","docker,deployment,production,advanced"
"What are the Git commit requirements?","MANDATORY: Always co-author commits with 'Co-Authored-By: Automagik Genie <genie@namastex.ai>'. Use conventional commit format. Include context and reasoning in commit messages for better tracking.\n\nExample commit:\ngit commit -m ""feat: add new agent capability\n\nImplements specialized routing logic for team coordination\n\nCo-Authored-By: Automagik Genie <genie@namastex.ai>""\n\nReference: CLAUDE.md","Standards","git,commits,requirements,beginner"
"How do I debug and troubleshoot issues?","Check logs: 'make logs'. Check status: 'make status'. Health check: 'make health'. Enable debug mode in agent config. Use structured logging with context for better diagnostics.\n\nExample debugging:\nmake logs        # System logs\nmake health      # Health check\nmake status      # All status\n\n# In config.yaml\ndisplay:\n  show_tool_calls: true\n\nReference: Makefile","Debugging","debugging,logs,health-check,intermediate"
"What is the TDD workflow integration?","Follow Red-Green-Refactor cycle: 1) Write failing tests first 2) Implement minimal code to pass 3) Refactor while keeping tests green. Use pytest for testing, ensure comprehensive test coverage for new features.\n\nExample TDD cycle:\n# 1. RED: Write failing test\ndef test_new_feature():\n    assert new_feature() == expected\n\n# 2. GREEN: Minimal implementation\ndef new_feature():\n    return expected\n\n# 3. REFACTOR: Improve while tests pass\n\nReference: tests/","Testing","tdd,testing,red-green-refactor,advanced"
"How do I use UV package management?","UV is the exclusive package manager. Use 'uv add <package>' for dependencies, 'uv run python' for execution, 'uv sync' for installation. Never use pip directly. UV ensures reproducible environments.\n\nExample UV commands:\nuv add fastapi      # Add dependency\nuv run python main.py  # Execute\nuv run pytest       # Run tests\nuv sync             # Install deps\n# Never: pip install\n\nReference: pyproject.toml","Tools","uv,packages,dependencies,beginner"
"What are the memory and context management features?","Configure memory retention, user-specific memories, agentic learning, session summaries, and context sharing. Memory settings control conversation history, learning capabilities, and cross-session continuity.\n\nExample configuration:\nmemory:\n  num_history_runs: 30\n  enable_user_memories: true\n  enable_agentic_memory: true\n  enable_session_summaries: true\n  memory_retention_days: 180\ncontext:\n  add_state_in_messages: true\n  enable_agentic_context: true\n\nReference: ai/agents/template-agent/config.yaml","Features","memory,context,learning,advanced"
"How do I implement workflow background execution?","Set background_execution: true in workflow config.yaml. Workflows can run long-running processes, handle async operations, and manage complex multi-step business logic independently of user interaction.\n\nExample configuration:\nworkflow:\n  name: Background Processor\n  workflow_id: bg-processor\n  background_execution: true\n  description: Long-running workflow\n\n# Handles async operations automatically\n\nReference: ai/workflows/template-workflow/config.yaml","Workflows","workflows,background,async,advanced"
"What is the component versioning strategy?","Each component (agent/team/workflow) has independent versioning. Increment version numbers for changes. Use hive.component_versions table to track evolution. Enables rollback and deployment management.\n\nExample usage:\n# Query component versions\nSELECT * FROM hive.component_versions\nWHERE component_type = 'agent';\n\n# YAML config\nagent:\n  version: 2  # Increment for changes\n\nReference: lib/, ai/","Architecture","versioning,components,tracking,advanced"
"How do I access the knowledge base programmatically?","Use lib/knowledge/csv_hot_reload.py for dynamic CSV loading. Knowledge base supports hot reload, filtering by category/tags, and vector embeddings for semantic search capabilities.\n\nExample code:\nfrom lib.knowledge.csv_hot_reload import KnowledgeBase\n\nkb = KnowledgeBase()\nresults = kb.search_by_category('Development')\n# Hot reload on file changes\n\nReference: lib/knowledge/csv_hot_reload.py, lib/knowledge/knowledge_rag.csv","Knowledge","knowledge,csv,hot-reload,programming,advanced"
