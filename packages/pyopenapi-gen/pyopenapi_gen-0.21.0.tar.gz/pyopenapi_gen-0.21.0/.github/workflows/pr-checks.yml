name: Pull Request Checks

on:
  pull_request:
    branches: [develop, staging, main]
  workflow_dispatch:

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install --extras dev

    - name: Run code formatting check (Black)
      run: |
        poetry run black --check --diff src/ tests/

    - name: Run linting (Ruff)
      run: |
        poetry run ruff check src/ tests/

    - name: Run type checking (mypy)
      run: |
        poetry run mypy src/ --strict --no-warn-no-return

    - name: Run tests with coverage
      run: |
        poetry run pytest -n 2 --timeout=120 --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=85

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
    
    - name: Install dependencies
      run: |
        poetry install --extras dev

    - name: Run safety check for known vulnerabilities
      run: |
        poetry run safety check --json || echo "Safety check completed with warnings"

    - name: Run bandit security linter
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json -c .bandit || true
        poetry run bandit -r src/ -f txt -c .bandit

  integration-tests:
    runs-on: ubuntu-latest
    needs: [quality-checks]
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
    
    - name: Install dependencies
      run: |
        poetry install --extras dev

    - name: Run integration tests
      run: |
        poetry run pytest tests/integrations/ tests/generation/ -v --tb=short

    - name: Test CLI functionality
      run: |
        poetry run pyopenapi-gen --help
        # Test basic generation
        poetry run pyopenapi-gen input/minimal_swagger.json --project-root ./test_output --output-package test_client --force --no-postprocess

    - name: Verify generated client structure
      run: |
        test -f ./test_output/test_client/__init__.py
        test -f ./test_output/test_client/client.py
        test -d ./test_output/test_client/models
        test -d ./test_output/test_client/endpoints
        test -d ./test_output/test_client/core