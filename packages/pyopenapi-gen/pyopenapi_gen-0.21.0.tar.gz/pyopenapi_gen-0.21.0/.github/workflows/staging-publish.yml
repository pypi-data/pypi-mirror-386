name: Staging Release (TestPyPI)
# This workflow handles development releases to TestPyPI
# Production releases are handled by semantic-release.yml

on:
  push:
    branches: [staging]
  workflow_dispatch:

jobs:
  publish-staging:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv

    - name: Install dependencies
      run: |
        poetry install --extras dev

    - name: Run quality checks
      run: |
        poetry run black --check src/ tests/
        poetry run ruff check src/ tests/
        poetry run mypy src/ --strict --no-warn-no-return

    - name: Run tests
      run: |
        poetry run pytest -n 2 --timeout=120 --cov=src --cov-report=term-missing --cov-fail-under=85

    - name: Get current version
      id: current_version
      run: |
        VERSION=$(poetry version --short)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate staging version with timestamp
      id: staging_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        BUILD_NUMBER=${GITHUB_RUN_NUMBER:-1}
        STAGING_VERSION="${CURRENT_VERSION}.dev${BUILD_NUMBER}"
        echo "staging_version=$STAGING_VERSION" >> $GITHUB_OUTPUT
        poetry version $STAGING_VERSION

    - name: Build package
      run: |
        poetry build

    - name: Verify build
      run: |
        poetry run pip install twine
        poetry run twine check dist/*

    - name: Publish to TestPyPI
      env:
        POETRY_REPOSITORIES_TESTPYPI_URL: https://test.pypi.org/legacy/
        POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
        POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi

    - name: Create staging release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.staging_version.outputs.staging_version }}
        release_name: Staging Release v${{ steps.staging_version.outputs.staging_version }}
        body: |
          Staging release for testing purposes.
          
          **This is a development release - do not use in production!**
          
          - **Version**: ${{ steps.staging_version.outputs.staging_version }}
          - **Commit**: ${{ github.sha }}
          - **Build**: #${{ github.run_number }}
          
          ## Install from TestPyPI
          
          ```bash
          pip install --index-url https://test.pypi.org/simple/ pyopenapi-gen==${{ steps.staging_version.outputs.staging_version }}
          ```
          
          ## Verify Installation
          
          ```bash
          python -c "import pyopenapi_gen; print(f'Installed version: {pyopenapi_gen.__version__}')"
          ```
        draft: false
        prerelease: true