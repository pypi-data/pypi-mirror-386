---
description: >-
  Python Coding Conventions — enforce Design-by-Contract without
  external libraries, ensure Separation of Concerns, Test-Driven
  Development, high coverage & first-class documentation.
globs: ["**/*.py"]
alwaysApply: true
---

# Python Coding Conventions

> **Purpose**  
> Guarantee that every line of Python in this repository is **clear,
> maintainable, testable and rigorously specified by contract & tests**.

---

## 1. Core Principles

1. **Design by Contract (DbC)** — every public function/method *must*
   declare and enforce **pre-conditions**, **post-conditions** &
   **invariants**.
2. **Separation of Concerns** — single responsibility per module, class
   and function; avoid God classes & long functions.
3. **Clarity & Readability** — code is read far more than written;
   prefer explicitness over cleverness.
4. **Maintainability & Extensibility** — design for change; prefer
   composition to inheritance; follow SOLID (esp. SRP, OCP, LSP, DIP).
5. **Test-Driven Development** — write the failing test first; tests are
   executable specifications; aim for ≥ 90 % **branch** coverage.
6. **Comprehensive Documentation** — docstrings & type hints are
   mandatory; docs express the contract.

---

## 2. Design by Contract Without External Libraries

### 2.1 Contract Enforcement

* Use **plain `assert` statements** to guard pre-conditions at the top
  of the function and post-conditions at the end. Use
  `__post_init__` (dataclasses) or property setters to maintain
  invariants.
* Never disable contract `assert`s in production; they are part of
  behaviour. Configure the runtime to **never run with `-O`/`PYTHONOPTIMIZE`**.
* Assertions must be **side-effect-free** and cheap.

```python
from dataclasses import dataclass

@dataclass
class Account:
    total: int

    def __post_init__(self) -> None:
        # Class invariant
        assert self.total >= 0, "total must be non-negative"

    def deposit(self, amount: int) -> None:
        """Deposit money.

        Contracts:
            Pre-conditions:
                - ``amount`` > 0
            Post-conditions:
                - ``self.total`` increased by exactly ``amount``
        """
        # Pre-condition
        assert amount > 0, "amount must be positive"

        old_total = self.total
        self.total += amount

        # Post-condition
        assert self.total == old_total + amount, "balance unchanged"
```

### 2.2 Contract Documentation

Extend docstrings with a **Contracts** section using the following
markers (Google style or reST is accepted):

```
Contracts:
    Preconditions:
        - <condition>
    Postconditions:
        - <condition>
    Invariants:
        - <condition>
```

Write conditions in **business vocabulary**, not implementation detail.

### 2.3 Contract Testing

* Unit tests **duplicate the contract** so failures show friendly
  messages rather than bare AssertionErrors.
* When a contract fails, the test should describe the violated
  assumption in its name.

---

## 3. Separation of Concerns & Structure

* **Modules**: logically cohesive; avoid mixed concerns.
* **Functions**: ≤ 40 logical lines; prefer pure functions.
* **Classes**: ≤ 400 logical lines & ≤ 7 public methods.
* **Layers**: domain → application/service → infrastructure. Enforce via
  package structure: `domain/*`, `services/*`, `infra/*`.
* **Dependency Direction**: higher layers must not import lower layers.

---

## 4. Code Style & Readability

| Aspect         | Rule                                                   |
| -------------- | ------------------------------------------------------ |
| **Formatting** | `black` (line length 120) + `ruff format`               |
| **Linting**    | `ruff check` for linting and import sorting             |
| **Typing**     | `mypy --strict` is CI-blocking                         |
| **Naming**     | PEP 8: classes `PascalCase`, funcs `snake_case`        |
| **Patterns**   | Prefer **dataclasses** & **enums** over raw tuples/str |
| **Globals**    | No mutable module-level state                          |

---

## 5. Testing Conventions

* Use **pytest** with `pytest-cov` & **hypothesis** for property tests.
* Directory: mirror package structure under `tests/`.
* Every bug fix requires a *regression test*.
* **Coverage gate**: branches ≥ 90 % enforced by CI.
* Tests are *specifications* — structure names as
  **Given\_When\_Then**.
* Keep tests **fast & deterministic** (< 200 ms each).

```python
def test_deposit_increases_balance():
    # Given
    acc = Account(total=0)
    # When
    acc.deposit(50)
    # Then
    assert acc.total == 50
```

---

## 6. Documentation Standards

* **Docstrings**: PEP 257; include **Contracts** block where relevant.
* Use **reST** or **Google style**, but be consistent project-wide.
* Provide runnable examples (`doctest`).
* Generate API docs with **Sphinx + autodoc**; CI fails on warnings.

---

## 7. Tooling & Continuous Integration

1. **Pre-commit hooks**: `black`, `isort`, `flake8`, `mypy`.
2. **CI stages** (GitHub Actions):

   1. *Static Analysis* – format, lint, type checks.
   2. *Unit Tests* – `pytest -q --cov`.
   3. *Docs* – `sphinx-build -n -W . ./_build`.
3. **Fail-fast** – pipeline stops on first violation.

---

## 8. Prohibited / Discouraged Patterns

* Catching broad `Exception` or using bare `except`.
* Hidden side-effects or implicit I/O in domain logic.
* Monolithic script files; always package code.
* Circular imports — resolve with adapter modules.
* Premature optimisation; measure before optimising.

---

## 9. AI / Agent Instructions

* Generated code **should include asserts and Contracts docstrings** where appropriate.
* When editing legacy code lacking contracts/tests, suggest refactor + tests as a separate task.
* Prefer clear names & explicit types over brevity.
* **Note**: The current codebase is transitioning to full Design by Contract compliance. Focus on critical business logic for contract enforcement.

---

### End of Rule
