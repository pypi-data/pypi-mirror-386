[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyopenapi-gen"
version = "0.21.1"
description = "Modern, async-first Python client generator for OpenAPI specifications with advanced cycle detection and unified type resolution"
authors = [{ name = "Mindhive Oy", email = "contact@mindhive.fi" }]
maintainers = [{ name = "Ville Venäläinen | Mindhive Oy", email = "ville@mindhive.fi" }]
readme = "README.md"
requires-python = ">=3.12,<4.0.0"
dependencies = [
  "openapi-spec-validator>=0.7",
  "openapi-core>=0.19",
  "PyYAML>=6.0",
  "typer>=0.14.0",
  "click>=8.0.0",
  "httpx>=0.24.0",
  "dataclass-wizard>=0.22.0",
]
license = { text = "MIT" }
keywords = [
  "openapi",
  "swagger", 
  "client",
  "generator",
  "async",
  "python",
  "api",
  "http",
  "rest",
  "type-safe",
  "code-generation",
  "enterprise"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Networking",
  "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/your-org/pyopenapi-gen"
Documentation = "https://github.com/your-org/pyopenapi-gen/blob/main/README.md"
Repository = "https://github.com/your-org/pyopenapi-gen"
Issues = "https://github.com/your-org/pyopenapi-gen/issues"
Changelog = "https://github.com/your-org/pyopenapi-gen/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/your-org/pyopenapi-gen/issues"
"Source Code" = "https://github.com/your-org/pyopenapi-gen"

[project.optional-dependencies]
dev = [
  "black>=23.0",
  "ruff>=0.4",
  "mypy>=1.7",
  "pytest>=7.0",
  "pytest-cov>=4.0",
  "pytest-timeout>=2.1.0",
  "pytest-xdist>=3.0.0",
  "types-toml>=0.10.8",
  "pytest-asyncio>=0.20.0",
  "safety>=2.0.0",
  "bandit[toml]>=1.7.0",
  "types-pyyaml>=6.0.12",
  "httpx>=0.24.0",
  "dataclass-wizard>=0.22.0",
]

[tool.black]
line-length = 120
target-version = ["py312"]
include = "\\.py$"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
select = ["F401", "E", "W", "I"]
ignore = ["E501"]  # Ignore line length for test files - focus on logic errors

[tool.mypy]
python_version = "3.12"
strict = true
show_error_codes = true
namespace_packages = true
implicit_optional = false
# Disable overly strict return checking for match statements
warn_no_return = false

[tool.pytest.ini_options]
addopts = "-ra"
testpaths = ["tests"]
pythonpath = "src"
python_files = ["test_*.py"]
python_functions = ["test_"]
log_cli = false
log_cli_level = "WARNING"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
# For details on registering custom marks, see:
# https://docs.pytest.org/en/stable/how-to/mark.html
markers = [
    "timeout: specify a timeout for a test function (integration with pytest-timeout).",
]


[tool.poetry.group.dev.dependencies]
types-pyyaml = "^6.0.12.20250516"
bandit = {extras = ["toml"], version = "^1.8.6"}
pytest-timeout = "^2.4.0"
pytest-asyncio = "^1.1.0"
black = "^25.1.0"
ruff = "^0.12.3"
mypy = "^1.17.0"
commitizen = "^3.29.0"
python-semantic-release = "^9.12.0"
pytest-xdist = "^3.8.0"
pytest-cov = "^6.2.1"
build = "^1.2.0"
twine = "^6.0.1"

[project.scripts]
pyopenapi-gen = "pyopenapi_gen.cli:app"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.21.1"
version_files = [
    "pyproject.toml:version",
    "src/pyopenapi_gen/__init__.py:__version__"
]
tag_format = "v$version"
major_version_zero = false
changelog_file = "CHANGELOG.md"
changelog_format = "## [$version] - $date\\n\\n$changes"
commit_parser = "^(?P<change_type>feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(?:\\((?P<scope>[^)]+)\\))?!?:\\s(?P<message>.+)$"
bump_message = "bump: version $current_version → $new_version"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version", "pyproject.toml:tool.commitizen.version"]
version_variables = [
    "src/pyopenapi_gen/__init__.py:__version__"
]
branch = "main"
upload_to_pypi = false
upload_to_repository = false
commit_message = "chore(release): {version}"
tag_commit = true
changelog_file = "CHANGELOG.md"
changelog_format = "# Changelog\\n\\n{changelog}"
hvcs = "github"
commit_parser = "conventional"
major_on_zero = false
# Allow bot actors (dependabot, renovate, etc.) to trigger releases
allowed_bots = ["dependabot", "renovate"]

[tool.coverage.run]
# Store coverage data files under coverage_reports/ instead of project root
data_file = "coverage_reports/.coverage"
