[tool.poetry]
name = "rmcp"
version = "0.7.0"
description = "Comprehensive Model Context Protocol server with 52 statistical analysis tools for Claude Desktop and Claude web, featuring HTTP transport, interactive documentation, and production deployment"
authors = ["Gaurav Sood <gsood07@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["mcp", "r", "statistics", "econometrics", "model-context-protocol", "data-analysis", "http", "fastapi", "sse", "configuration", "claude-web", "connector", "anthropic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: R",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
packages = [{include = "rmcp"}]
include = ["CITATION.cff"]

[tool.poetry.dependencies]
python = ">=3.11"
click = ">=8.1.0"
jsonschema = ">=4.0.0"
# R integration dependencies  
# subprocess module is built-in for Python 3.8+

# Optional dependencies for HTTP transport
fastapi = {version = ">=0.100.0", optional = true}
uvicorn = {version = ">=0.20.0", optional = true}
sse-starlette = {version = ">=1.6.0", optional = true}

[tool.poetry.extras]
http = ["fastapi", "uvicorn", "sse-starlette"]
all = ["fastapi", "uvicorn", "sse-starlette"]

# Hybrid approach: Docker for R integration, Poetry for cross-platform Python testing
[tool.poetry.group.dev.dependencies]
# Essential dependencies for cross-platform Python testing
pytest = ">=8.2.0"
pytest-asyncio = ">=0.21.0"
black = ">=23.0.0"
isort = ">=5.12.0"
flake8 = ">=6.0.0"
# Workflow test dependencies (Excel file creation)
pandas = ">=1.5.0"
openpyxl = ">=3.0.0"
# Note: R integration tests run in Docker, not via Poetry

[tool.poetry.group.docs.dependencies]
# Documentation build dependencies
sphinx = ">=5.0.0"
sphinx-rtd-theme = ">=1.0.0"
myst-parser = ">=0.18.0"
# Additional Sphinx extensions used in conf.py
sphinx-copybutton = {version = ">=0.5.0", optional = true}

[tool.poetry.scripts]
rmcp = "rmcp.cli:cli"

[tool.poetry.urls]
Homepage = "https://github.com/finite-sample/rmcp"
Repository = "https://github.com/finite-sample/rmcp"
Documentation = "https://github.com/finite-sample/rmcp#readme"
Issues = "https://github.com/finite-sample/rmcp/issues"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"] 
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
]
asyncio_mode = "auto"
# asyncio_default_fixture_loop_scope removed for backwards compatibility with older pytest-asyncio versions
markers = [
    "asyncio: marks tests as async",
    "local: marks tests that require local IDE setup (not run in CI)",
]

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg  
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["rmcp", "tests", "docs", "streamlit"]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
packages = ["rmcp"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "streamlit.*",
]
ignore_errors = true

[tool.coverage.run]
source = ["rmcp"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]