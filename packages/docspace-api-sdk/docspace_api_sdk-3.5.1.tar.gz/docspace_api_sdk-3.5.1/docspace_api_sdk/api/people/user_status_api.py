#
# (c) Copyright Ascensio System SIA 2025
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#



import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from docspace_api_sdk.models.employee_activation_status import EmployeeActivationStatus
from docspace_api_sdk.models.employee_full_array_wrapper import EmployeeFullArrayWrapper
from docspace_api_sdk.models.employee_status import EmployeeStatus
from docspace_api_sdk.models.sort_order import SortOrder
from docspace_api_sdk.models.update_members_request_dto import UpdateMembersRequestDto

from docspace_api_sdk.api_client import ApiClient, RequestSerialized
from docspace_api_sdk.api_response import ApiResponse
from docspace_api_sdk.rest import RESTResponseType


class UserStatusApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client



    @validate_call
    def get_by_status(
        self,
        status: Annotated[EmployeeStatus, Field(description="The user status.")],
        filter_by: Annotated[Optional[StrictStr], Field(description="Specifies the criteria used to filter the profiles in the request.")] = None,
        count: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of user profiles to retrieve.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index for retrieving data in a paginated request.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Specifies the property or field name by which the results should be sorted.")] = None,
        sort_order: Annotated[Optional[SortOrder], Field(description="The order in which the results are sorted.")] = None,
        filter_separator: Annotated[Optional[StrictStr], Field(description="Represents the separator used to split multiple filter criteria in a query string.")] = None,
        filter_value: Annotated[Optional[StrictStr], Field(description="A string value representing additional filter criteria used in query parameters.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmployeeFullArrayWrapper:
        """Get profiles by status

        Returns a list of profiles filtered by the user status.

        :param status: The user status. (required)
        :type status: EmployeeStatus
        :param filter_by: Specifies the criteria used to filter the profiles in the request.
        :type filter_by: str
        :param count: The maximum number of user profiles to retrieve.
        :type count: int
        :param start_index: The starting index for retrieving data in a paginated request.
        :type start_index: int
        :param sort_by: Specifies the property or field name by which the results should be sorted.
        :type sort_by: str
        :param sort_order: The order in which the results are sorted.
        :type sort_order: SortOrder
        :param filter_separator: Represents the separator used to split multiple filter criteria in a query string.
        :type filter_separator: str
        :param filter_value: A string value representing additional filter criteria used in query parameters.
        :type filter_value: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_status_serialize(
            status=status,
            filter_by=filter_by,
            count=count,
            start_index=start_index,
            sort_by=sort_by,
            sort_order=sort_order,
            filter_separator=filter_separator,
            filter_value=filter_value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_by_status_with_http_info(
        self,
        status: Annotated[EmployeeStatus, Field(description="The user status.")],
        filter_by: Annotated[Optional[StrictStr], Field(description="Specifies the criteria used to filter the profiles in the request.")] = None,
        count: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of user profiles to retrieve.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index for retrieving data in a paginated request.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Specifies the property or field name by which the results should be sorted.")] = None,
        sort_order: Annotated[Optional[SortOrder], Field(description="The order in which the results are sorted.")] = None,
        filter_separator: Annotated[Optional[StrictStr], Field(description="Represents the separator used to split multiple filter criteria in a query string.")] = None,
        filter_value: Annotated[Optional[StrictStr], Field(description="A string value representing additional filter criteria used in query parameters.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmployeeFullArrayWrapper]:
        """Get profiles by status

        Returns a list of profiles filtered by the user status.

        :param status: The user status. (required)
        :type status: EmployeeStatus
        :param filter_by: Specifies the criteria used to filter the profiles in the request.
        :type filter_by: str
        :param count: The maximum number of user profiles to retrieve.
        :type count: int
        :param start_index: The starting index for retrieving data in a paginated request.
        :type start_index: int
        :param sort_by: Specifies the property or field name by which the results should be sorted.
        :type sort_by: str
        :param sort_order: The order in which the results are sorted.
        :type sort_order: SortOrder
        :param filter_separator: Represents the separator used to split multiple filter criteria in a query string.
        :type filter_separator: str
        :param filter_value: A string value representing additional filter criteria used in query parameters.
        :type filter_value: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_status_serialize(
            status=status,
            filter_by=filter_by,
            count=count,
            start_index=start_index,
            sort_by=sort_by,
            sort_order=sort_order,
            filter_separator=filter_separator,
            filter_value=filter_value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_by_status_without_preload_content(
        self,
        status: Annotated[EmployeeStatus, Field(description="The user status.")],
        filter_by: Annotated[Optional[StrictStr], Field(description="Specifies the criteria used to filter the profiles in the request.")] = None,
        count: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of user profiles to retrieve.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index for retrieving data in a paginated request.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Specifies the property or field name by which the results should be sorted.")] = None,
        sort_order: Annotated[Optional[SortOrder], Field(description="The order in which the results are sorted.")] = None,
        filter_separator: Annotated[Optional[StrictStr], Field(description="Represents the separator used to split multiple filter criteria in a query string.")] = None,
        filter_value: Annotated[Optional[StrictStr], Field(description="A string value representing additional filter criteria used in query parameters.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get profiles by status

        Returns a list of profiles filtered by the user status.

        :param status: The user status. (required)
        :type status: EmployeeStatus
        :param filter_by: Specifies the criteria used to filter the profiles in the request.
        :type filter_by: str
        :param count: The maximum number of user profiles to retrieve.
        :type count: int
        :param start_index: The starting index for retrieving data in a paginated request.
        :type start_index: int
        :param sort_by: Specifies the property or field name by which the results should be sorted.
        :type sort_by: str
        :param sort_order: The order in which the results are sorted.
        :type sort_order: SortOrder
        :param filter_separator: Represents the separator used to split multiple filter criteria in a query string.
        :type filter_separator: str
        :param filter_value: A string value representing additional filter criteria used in query parameters.
        :type filter_value: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_status_serialize(
            status=status,
            filter_by=filter_by,
            count=count,
            start_index=start_index,
            sort_by=sort_by,
            sort_order=sort_order,
            filter_separator=filter_separator,
            filter_value=filter_value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_by_status_serialize(
        self,
        status,
        filter_by,
        count,
        start_index,
        sort_by,
        sort_order,
        filter_separator,
        filter_value,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if status is not None:
            _path_params['status'] = status.value
        # process the query parameters
        if filter_by is not None:
            
            _query_params.append(('filterBy', filter_by))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if start_index is not None:
            
            _query_params.append(('startIndex', start_index))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order.value))
            
        if filter_separator is not None:
            
            _query_params.append(('filterSeparator', filter_separator))
            
        if filter_value is not None:
            
            _query_params.append(('filterValue', filter_value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'OAuth2', 
            'ApiKeyBearer', 
            'asc_auth_key', 
            'Bearer', 
            'OpenId'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/2.0/people/status/{status}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_user_activation_status(
        self,
        activationstatus: Annotated[EmployeeActivationStatus, Field(description="The new user activation status.")],
        update_members_request_dto: Annotated[UpdateMembersRequestDto, Field(description="The request parameters for updating the user information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmployeeFullArrayWrapper:
        """Set an activation status to the users

        Sets the required activation status to the list of users with the IDs specified in the request.

        :param activationstatus: The new user activation status. (required)
        :type activationstatus: EmployeeActivationStatus
        :param update_members_request_dto: The request parameters for updating the user information. (required)
        :type update_members_request_dto: UpdateMembersRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_user_activation_status_serialize(
            activationstatus=activationstatus,
            update_members_request_dto=update_members_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_user_activation_status_with_http_info(
        self,
        activationstatus: Annotated[EmployeeActivationStatus, Field(description="The new user activation status.")],
        update_members_request_dto: Annotated[UpdateMembersRequestDto, Field(description="The request parameters for updating the user information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmployeeFullArrayWrapper]:
        """Set an activation status to the users

        Sets the required activation status to the list of users with the IDs specified in the request.

        :param activationstatus: The new user activation status. (required)
        :type activationstatus: EmployeeActivationStatus
        :param update_members_request_dto: The request parameters for updating the user information. (required)
        :type update_members_request_dto: UpdateMembersRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_user_activation_status_serialize(
            activationstatus=activationstatus,
            update_members_request_dto=update_members_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_user_activation_status_without_preload_content(
        self,
        activationstatus: Annotated[EmployeeActivationStatus, Field(description="The new user activation status.")],
        update_members_request_dto: Annotated[UpdateMembersRequestDto, Field(description="The request parameters for updating the user information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Set an activation status to the users

        Sets the required activation status to the list of users with the IDs specified in the request.

        :param activationstatus: The new user activation status. (required)
        :type activationstatus: EmployeeActivationStatus
        :param update_members_request_dto: The request parameters for updating the user information. (required)
        :type update_members_request_dto: UpdateMembersRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_user_activation_status_serialize(
            activationstatus=activationstatus,
            update_members_request_dto=update_members_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_user_activation_status_serialize(
        self,
        activationstatus,
        update_members_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if activationstatus is not None:
            _path_params['activationstatus'] = activationstatus.value
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_members_request_dto is not None:
            _body_params = update_members_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'OAuth2', 
            'ApiKeyBearer', 
            'asc_auth_key', 
            'Bearer', 
            'OpenId'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/2.0/people/activationstatus/{activationstatus}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_user_status(
        self,
        status: Annotated[EmployeeStatus, Field(description="The new user status.")],
        update_members_request_dto: Annotated[UpdateMembersRequestDto, Field(description="The request parameters for updating the user information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmployeeFullArrayWrapper:
        """Change a user status

        Changes a status of the users with the IDs specified in the request.

        :param status: The new user status. (required)
        :type status: EmployeeStatus
        :param update_members_request_dto: The request parameters for updating the user information. (required)
        :type update_members_request_dto: UpdateMembersRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_user_status_serialize(
            status=status,
            update_members_request_dto=update_members_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_user_status_with_http_info(
        self,
        status: Annotated[EmployeeStatus, Field(description="The new user status.")],
        update_members_request_dto: Annotated[UpdateMembersRequestDto, Field(description="The request parameters for updating the user information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmployeeFullArrayWrapper]:
        """Change a user status

        Changes a status of the users with the IDs specified in the request.

        :param status: The new user status. (required)
        :type status: EmployeeStatus
        :param update_members_request_dto: The request parameters for updating the user information. (required)
        :type update_members_request_dto: UpdateMembersRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_user_status_serialize(
            status=status,
            update_members_request_dto=update_members_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_user_status_without_preload_content(
        self,
        status: Annotated[EmployeeStatus, Field(description="The new user status.")],
        update_members_request_dto: Annotated[UpdateMembersRequestDto, Field(description="The request parameters for updating the user information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Change a user status

        Changes a status of the users with the IDs specified in the request.

        :param status: The new user status. (required)
        :type status: EmployeeStatus
        :param update_members_request_dto: The request parameters for updating the user information. (required)
        :type update_members_request_dto: UpdateMembersRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_user_status_serialize(
            status=status,
            update_members_request_dto=update_members_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmployeeFullArrayWrapper",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_user_status_serialize(
        self,
        status,
        update_members_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if status is not None:
            _path_params['status'] = status.value
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_members_request_dto is not None:
            _body_params = update_members_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'OAuth2', 
            'ApiKeyBearer', 
            'asc_auth_key', 
            'Bearer', 
            'OpenId'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/2.0/people/status/{status}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


