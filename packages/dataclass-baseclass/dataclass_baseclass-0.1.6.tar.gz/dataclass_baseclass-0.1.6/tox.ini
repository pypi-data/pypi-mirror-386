[pytest]
addopts = -ra

[tox]
requires =
    tox>=4
    virtualenv-pyenv
#   tox-envlist

env_list = clean, lint, type-mypy, py3.12

[var]
dist_dir = {work_dir}/.pkg/dist
identity = sledge@djenka.net

[envlists]
py = py3.{11,12,13}

[testenv]
package = wheel
wheel_build_env = .pkg
extras =
    apischema
set_env =
    VIRTUALENV_DISCOVERY = pyenv-fallback
deps =
    pytest>=8
    pytest-cov
    apischema
    typedload
    dataclasses-json
depends =
    py3.12: clean
    pkg: py3.12
    doc: py3.12
commands =
    pytest \
        --cov --no-cov-on-fail --cov-append --cov-report=term-missing \
        {posargs:tests}

[testenv:pkg]
description = create package dist
package = sdist
deps =
    twine
commands =
    twine check --strict {[var]dist_dir}/*

[testenv:pkg-upload]
description = upload package dist to PyPI
skip_install = true
deps =
    twine
commands =
    twine upload --non-interactive --sign --identity {[var]identity} \
        {[var]dist_dir}/*

[testenv:pkg-upload-test]
description = upload package dist to TestPyPI
skip_install = true
deps =
    twine
commands =
    twine upload --help
    twine upload --non-interactive --repository testpypi \
        {[var]dist_dir}/*

[testenv:lint]
description = run linters
skip_install = true
deps =
    ruff
commands =
    ruff check
    ruff format

[testenv:lint-flake]
description = run linters - flake and black
skip_install = true
deps =
    black>=22
    flake8
    flake8-black
commands =
    black {posargs:.}
#   black .
    flake8

[testenv:ruff]
description = run linters
skip_install = true
deps =
    ruff
commands =
    ruff {posargs:.}

[testenv:type-mypy]
labels = type
description = run type checks - mypy
deps =
    mypy>=1.7
commands =
    mypy {posargs:dataclass_baseclass.py tests}

[testenv:type-basedpyright]
labels = type
description = run type checks - basedpyright
deps =
    basedpyright>=1.19
commands =
    basedpyright {posargs:dataclass_baseclass.py tests}

[testenv:doc]
description = create docs
deps =
    coverage
    pandoc-include
    pdoc3
allowlist_externals =
    ./generate_md_report.sh
    pandoc
    pdoc3
commands =
    ./generate_md_report.sh {tox_root}/doc/coverage.md
    # coverage json

    pdoc --force --html --output-dir {tox_root} dataclass_baseclass
    pdoc --force --filter module --output-dir {tox_root}/doc dataclass_baseclass

    pandoc -f markdown README.in --strip-comments --filter pandoc-include -o README.md

[testenv:clean]
description = clean up (coverage)
deps = coverage
skip_install = true
allowlist_externals = rm
commands =
    coverage erase
    rm -rf {[var]dist_dir}
