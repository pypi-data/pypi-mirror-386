"""
QuantumEqualizer - 4-–∫–∞–Ω–∞–ª—å–Ω—ã–π —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä –¥–ª—è AI –º–æ–¥–µ–ª–µ–π

–ê–Ω–∞–ª–æ–≥–∏—è —Å –∞—É–¥–∏–æ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–æ–º:
- 4 –∫–∞–Ω–∞–ª–∞ = 4 –º–æ–¥–µ–ª–∏
- –ß–∞—Å—Ç–æ—Ç—ã = attention –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- –£—Å–∏–ª–µ–Ω–∏–µ/–æ—Å–ª–∞–±–ª–µ–Ω–∏–µ = —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

–ö–æ–Ω—Ü–µ–ø—Ü–∏—è "–Ω–∞–æ–±–æ—Ä–æ—Ç –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ":
- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä: —É—Å–∏–ª–∏–≤–∞–µ—Ç/–æ—Å–ª–∞–±–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—ã
- –ö–≤–∞–Ω—Ç–æ–≤—ã–π —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏

¬© 2025 NativeMind
"""

import torch
import numpy as np
from typing import Dict, List, Optional, Union
from dataclasses import dataclass
from pathlib import Path


@dataclass
class ModelChannel:
    """
    –ö–∞–Ω–∞–ª –º–æ–¥–µ–ª–∏ –≤ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–µ
    
    –ê–Ω–∞–ª–æ–≥–∏—è —Å –∞—É–¥–∏–æ:
    - name = –∏–º—è –∫–∞–Ω–∞–ª–∞ (Bass, Treble, Mid, etc.)
    - frequency = —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –º–æ–¥–µ–ª–∏
    - amplitude = —Å–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è (0.0-1.0)
    """
    name: str
    model_path: str
    frequency: float = 440.0  # –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    amplitude: float = 1.0     # –°–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è (0.0-1.0)
    phase: float = 0.0         # –§–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ (—Ä–∞–¥–∏–∞–Ω—ã)
    face: int = 0              # –ì—Ä–∞–Ω—å –ø–∏—Ä–∞–º–∏–¥—ã (0-3)


class QuantumEqualizer:
    """
    4-–∫–∞–Ω–∞–ª—å–Ω—ã–π –∫–≤–∞–Ω—Ç–æ–≤—ã–π —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–µ–π
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ```python
    equalizer = QuantumEqualizer(
        channels=[
            ModelChannel("Mozgach108-Maximal", path1, face=0),
            ModelChannel("Braindler-–Æ—Ä–∏—Å—Ç", path2, face=1),
            ModelChannel("Braindler-–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", path3, face=2),
            ModelChannel("Sridhar-multimodal", path4, face=3)
        ]
    )
    
    # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π
    result = equalizer.balance(
        target_model="Sridhar-multimodal",
        learning_rate=0.05
    )
    ```
    """
    
    def __init__(
        self,
        channels: List[ModelChannel],
        resonance_freq: float = 440.0,
        num_faces: int = 4
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
        
        Args:
            channels: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
            resonance_freq: –ë–∞–∑–æ–≤–∞—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
            num_faces: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4)
        """
        if len(channels) > num_faces:
            raise ValueError(f"–ú–∞–∫—Å–∏–º—É–º {num_faces} –∫–∞–Ω–∞–ª–æ–≤ (–≥—Ä–∞–Ω–µ–π –ø–∏—Ä–∞–º–∏–¥—ã)")
        
        self.channels = channels
        self.resonance_freq = resonance_freq
        self.num_faces = num_faces
        self.signatures = {}
        
        print("üéöÔ∏è  –ö–≤–∞–Ω—Ç–æ–≤—ã–π –≠–∫–≤–∞–ª–∞–π–∑–µ—Ä (4 –∫–∞–Ω–∞–ª–∞)")
        print("=" * 80)
        print(f"–ë–∞–∑–æ–≤–∞—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {resonance_freq} Hz")
        print(f"–ö–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        print()
        
        for i, channel in enumerate(channels):
            print(f"  –ö–∞–Ω–∞–ª {i}: {channel.name}")
            print(f"    –ì—Ä–∞–Ω—å: {channel.face} (–∞–∑–∏–º—É—Ç {channel.face * 90}¬∞)")
            print(f"    –ß–∞—Å—Ç–æ—Ç–∞: {channel.frequency} Hz")
            print(f"    –ê–º–ø–ª–∏—Ç—É–¥–∞: {channel.amplitude:.1%}")
            print()
    
    def extract_all_signatures(self):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        –ê–Ω–∞–ª–æ–≥–∏—è: –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        """
        print("üî¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        print()
        
        from .signature import SignatureExtractor
        
        for channel in self.channels:
            print(f"üìä –ö–∞–Ω–∞–ª: {channel.name}")
            
            try:
                extractor = SignatureExtractor(channel.model_path)
                signature = extractor.extract_full_signature()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                signature['channel'] = {
                    'name': channel.name,
                    'frequency': channel.frequency,
                    'amplitude': channel.amplitude,
                    'phase': channel.phase,
                    'face': channel.face
                }
                
                self.signatures[channel.name] = signature
                print(f"   ‚úÖ –ü–æ–¥–ø–∏—Å—å –∏–∑–≤–ª–µ—á–µ–Ω–∞")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
                print(f"   –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å...")
                
                # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                self.signatures[channel.name] = {
                    'metadata': {
                        'name': channel.name,
                        'frequency': channel.frequency,
                        'amplitude': channel.amplitude
                    },
                    'channel': {
                        'name': channel.name,
                        'frequency': channel.frequency,
                        'amplitude': channel.amplitude,
                        'phase': channel.phase,
                        'face': channel.face
                    }
                }
            
            print()
        
        print(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π: {len(self.signatures)}")
        return self.signatures
    
    def calculate_interference_pattern(
        self,
        target_channel: str,
        sources: Optional[List[str]] = None
    ) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        
        –ê–Ω–∞–ª–æ–≥–∏—è —Å FreeDome:
        - –ö–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª = –≥—Ä–∞–Ω—å –ø–∏—Ä–∞–º–∏–¥—ã
        - –ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è = –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        - –†–µ–∑—É–ª—å—Ç–∞—Ç = —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        
        Args:
            target_channel: –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª (—É—á–µ–Ω–∏–∫)
            sources: –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (—É—á–∏—Ç–µ–ª—è), –µ—Å–ª–∏ None - –≤—Å–µ –∫—Ä–æ–º–µ target
        
        Returns:
            –ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        """
        print(f"\nüåä –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {target_channel}")
        print("=" * 80)
        
        if sources is None:
            sources = [ch.name for ch in self.channels if ch.name != target_channel]
        
        if not self.signatures:
            print("‚ö†Ô∏è  –ü–æ–¥–ø–∏—Å–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã. –ò–∑–≤–ª–µ–∫–∞—é...")
            self.extract_all_signatures()
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è
        interference = {
            'target': target_channel,
            'sources': sources,
            'patterns': []
        }
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        for source_name in sources:
            if source_name not in self.signatures:
                print(f"‚ö†Ô∏è  –ü–æ–¥–ø–∏—Å—å {source_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                continue
            
            source_sig = self.signatures[source_name]
            source_channel = next(ch for ch in self.channels if ch.name == source_name)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∫–ª–∞–¥ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            contribution = {
                'source': source_name,
                'frequency': source_channel.frequency,
                'amplitude': source_channel.amplitude,
                'phase': source_channel.phase,
                'face': source_channel.face,
                'weight': source_channel.amplitude  # –í–µ—Å = –∞–º–ø–ª–∏—Ç—É–¥–∞
            }
            
            interference['patterns'].append(contribution)
            
            print(f"  üì° {source_name}:")
            print(f"     –ì—Ä–∞–Ω—å: {source_channel.face} (–∞–∑–∏–º—É—Ç {source_channel.face * 90}¬∞)")
            print(f"     –í–µ—Å: {source_channel.amplitude:.1%}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        total_weight = sum(p['weight'] for p in interference['patterns'])
        if total_weight > 0:
            for pattern in interference['patterns']:
                pattern['normalized_weight'] = pattern['weight'] / total_weight
        
        print(f"\n‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏–∑ {len(interference['patterns'])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        return interference
    
    def balance(
        self,
        target_model: str,
        learning_rate: float = 0.05,
        cycles: int = 20,
        sync_target: float = 0.90
    ) -> Dict:
        """
        –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        
        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ò–∑–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—é
        3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
        4. –î–æ—Å—Ç–∏—á—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            target_model: –¶–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å (—É—á–µ–Ω–∏–∫)
            learning_rate: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (0.05 = 5% –∑–∞ —Ü–∏–∫–ª)
            cycles: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
            sync_target: –¶–µ–ª–µ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (0.90 = 90%)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        """
        print("\n‚öñÔ∏è  –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π")
        print("=" * 80)
        print(f"–¶–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: {target_model}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {learning_rate:.1%} –∑–∞ —Ü–∏–∫–ª")
        print(f"–ú–∞–∫—Å–∏–º—É–º —Ü–∏–∫–ª–æ–≤: {cycles}")
        print(f"–¶–µ–ª–µ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {sync_target:.1%}")
        print()
        
        # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        if not self.signatures:
            self.extract_all_signatures()
        
        # 2. –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        interference = self.calculate_interference_pattern(target_model)
        
        # 3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        results = {
            'target': target_model,
            'cycles': [],
            'final_sync': 0.0,
            'success': False
        }
        
        print("\nüîÑ –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏...")
        print()
        
        for cycle in range(cycles):
            print(f"–¶–∏–∫–ª {cycle + 1}/{cycles}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤)
            cycle_result = self._apply_cycle(
                target_model,
                interference,
                learning_rate,
                cycle
            )
            
            results['cycles'].append(cycle_result)
            
            sync = cycle_result['synchronization']
            print(f"  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {sync:.1%}")
            
            # –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if sync >= sync_target:
                print(f"\n‚úÖ –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {sync:.1%}")
                results['final_sync'] = sync
                results['success'] = True
                break
        
        if not results['success']:
            results['final_sync'] = results['cycles'][-1]['synchronization']
            results['success'] = results['final_sync'] >= sync_target
        
        print()
        print("=" * 80)
        if results['success']:
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞: {results['final_sync']:.1%}")
        else:
            print(f"‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {results['final_sync']:.1%}")
        print("=" * 80)
        
        return results
    
    def _apply_cycle(
        self,
        target: str,
        interference: Dict,
        learning_rate: float,
        cycle: int
    ) -> Dict:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ü–∏–∫–ª–∞
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–∏–º–∏—Ç–∞—Ü–∏—è)
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
        
        base_sync = 0.4  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        progress = min(1.0, (cycle + 1) * learning_rate)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–∫–ª–∞–¥ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        weighted_sync = base_sync
        for pattern in interference['patterns']:
            weighted_sync += pattern['normalized_weight'] * progress * 0.5
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        noise = np.random.uniform(-0.02, 0.02)
        sync = min(1.0, weighted_sync + noise)
        
        return {
            'cycle': cycle + 1,
            'synchronization': sync,
            'progress': progress,
            'learning_rate': learning_rate
        }
    
    def visualize_channels(self) -> str:
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
        
        Returns:
            ASCII –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        """
        viz = []
        viz.append("\n" + "=" * 80)
        viz.append("üéöÔ∏è  –ö–≤–∞–Ω—Ç–æ–≤—ã–π –≠–∫–≤–∞–ª–∞–π–∑–µ—Ä - 4 –ö–∞–Ω–∞–ª–∞")
        viz.append("=" * 80)
        viz.append("")
        viz.append("              FreeDome –ü–∏—Ä–∞–º–∏–¥–∞")
        viz.append("                     ‚ñ≥")
        viz.append("                    ‚ï± ‚ï≤")
        viz.append("           –ì—Ä–∞–Ω—å 0 ‚ï±   ‚ï≤ –ì—Ä–∞–Ω—å 1")
        viz.append("                  ‚ï±     ‚ï≤")
        viz.append("                 ‚ï±   ‚óè   ‚ï≤")
        viz.append("                ‚ï±    ‚îÇ    ‚ï≤")
        viz.append("        –ì—Ä–∞–Ω—å 3 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì—Ä–∞–Ω—å 2")
        viz.append("")
        
        for i, channel in enumerate(self.channels):
            viz.append(f"–ì—Ä–∞–Ω—å {channel.face} (–ê–∑–∏–º—É—Ç {channel.face * 90}¬∞):")
            viz.append(f"  üì° {channel.name}")
            viz.append(f"  üìä –ß–∞—Å—Ç–æ—Ç–∞: {channel.frequency} Hz")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥—ã
            bar_length = int(channel.amplitude * 40)
            bar = "‚ñà" * bar_length + "‚ñë" * (40 - bar_length)
            viz.append(f"  üéöÔ∏è  –ê–º–ø–ª–∏—Ç—É–¥–∞: {bar} {channel.amplitude:.1%}")
            viz.append("")
        
        viz.append("=" * 80)
        
        return "\n".join(viz)
    
    def get_channel(self, name: str) -> Optional[ModelChannel]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏"""
        return next((ch for ch in self.channels if ch.name == name), None)
    
    def set_amplitude(self, channel_name: str, amplitude: float):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–º–ø–ª–∏—Ç—É–¥—É –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_name: –ò–º—è –∫–∞–Ω–∞–ª–∞
            amplitude: –ù–æ–≤–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ (0.0-1.0)
        """
        channel = self.get_channel(channel_name)
        if channel:
            channel.amplitude = max(0.0, min(1.0, amplitude))
            print(f"üéöÔ∏è  {channel_name}: –∞–º–ø–ª–∏—Ç—É–¥–∞ ‚Üí {channel.amplitude:.1%}")
        else:
            print(f"‚ö†Ô∏è  –ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def set_frequency(self, channel_name: str, frequency: float):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_name: –ò–º—è –∫–∞–Ω–∞–ª–∞
            frequency: –ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ (Hz)
        """
        channel = self.get_channel(channel_name)
        if channel:
            channel.frequency = frequency
            print(f"üì° {channel_name}: —á–∞—Å—Ç–æ—Ç–∞ ‚Üí {channel.frequency} Hz")
        else:
            print(f"‚ö†Ô∏è  –ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def save_configuration(self, path: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞"""
        import json
        
        config = {
            'resonance_freq': self.resonance_freq,
            'num_faces': self.num_faces,
            'channels': [
                {
                    'name': ch.name,
                    'model_path': ch.model_path,
                    'frequency': ch.frequency,
                    'amplitude': ch.amplitude,
                    'phase': ch.phase,
                    'face': ch.face
                }
                for ch in self.channels
            ]
        }
        
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path}")
    
    @classmethod
    def load_configuration(cls, path: str) -> 'QuantumEqualizer':
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞"""
        import json
        
        with open(path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        channels = [
            ModelChannel(**ch_config)
            for ch_config in config['channels']
        ]
        
        return cls(
            channels=channels,
            resonance_freq=config['resonance_freq'],
            num_faces=config['num_faces']
        )

