#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- NativeMind AI/ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
- –£–†–ê–ë–ò –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
- –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def demo_nativemind():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π NativeMind"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è NativeMind AI/ML –±–∏–±–ª–∏–æ—Ç–µ–∫")
    print("=" * 50)
    
    try:
        from nativemind.ai import PyTorchReplacement, get_module_info
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
        info = get_module_info()
        print(f"–ú–æ–¥—É–ª—å: {info['name']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        print(f"–í–µ—Ä—Å–∏—è: {info['version']}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ PyTorch Replacement
        torch_repl = PyTorchReplacement(quantum_enabled=True)
        print(f"\nPyTorch Replacement —Å–æ–∑–¥–∞–Ω:")
        print(f"  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {torch_repl.device}")
        print(f"  - –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if torch_repl.quantum_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
        print(f"  - –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if torch_repl.russian_optimizations else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–æ–≤
        tensor1 = torch_repl.tensor([1, 2, 3, 4, 5])
        tensor2 = torch_repl.tensor([10, 20, 30, 40, 50])
        
        print(f"\n–°–æ–∑–¥–∞–Ω—ã —Ç–µ–Ω–∑–æ—Ä—ã:")
        print(f"  - Tensor 1: {tensor1}")
        print(f"  - Tensor 2: {tensor2}")
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏
        result = tensor1 + tensor2
        print(f"  - –°–ª–æ–∂–µ–Ω–∏–µ: {result}")
        
        result = tensor1 * tensor2
        print(f"  - –£–º–Ω–æ–∂–µ–Ω–∏–µ: {result}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device_info = torch_repl.get_device_info()
        print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:")
        for key, value in device_info.items():
            print(f"  - {key}: {value}")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ NativeMind: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ NativeMind: {e}")

def demo_urabi():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –£–†–ê–ë–ò"""
    print("\nüîê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –£–†–ê–ë–ò –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π")
    print("=" * 50)
    
    try:
        from urabi.crypto import GOSTCrypto, get_module_info
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
        info = get_module_info()
        print(f"–ú–æ–¥—É–ª—å: {info['name']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        print(f"–í–µ—Ä—Å–∏—è: {info['version']}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ì–û–°–¢ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        gost = GOSTCrypto(quantum_enabled=True, russian_optimizations=True)
        print(f"\n–ì–û–°–¢ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"  - –ö–≤–∞–Ω—Ç–æ–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if gost.quantum_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        print(f"  - –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if gost.russian_optimizations else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        standards = gost.get_standards_info()
        print(f"\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:")
        for standard, description in standards.items():
            print(f"  - {standard}: {description}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
        private_key, public_key = gost.generate_key_pair(256)
        print(f"\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏:")
        print(f"  - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key.hex()[:32]}...")
        print(f"  - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {public_key.hex()[:32]}...")
        
        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        test_data = b"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏"
        signature = gost.sign_data(test_data, private_key)
        print(f"\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –î–∞–Ω–Ω—ã–µ: {test_data.decode('utf-8')}")
        print(f"  - –ü–æ–¥–ø–∏—Å—å: {signature.hex()[:32]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        is_valid = gost.verify_signature(test_data, signature, public_key)
        print(f"  - –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞: {'–î–∞' if is_valid else '–ù–µ—Ç'}")
        
        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        hash_result = gost.hash_data(test_data)
        print(f"\n–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –•–µ—à: {hash_result.hex()}")
        
        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        encryption_key = gost.generate_random_bytes(32)
        encrypted = gost.encrypt_data(test_data, encryption_key, "ECB")
        decrypted = gost.decrypt_data(encrypted, encryption_key, "ECB")
        
        print(f"\n–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data.decode('utf-8')}")
        print(f"  - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {encrypted.hex()[:32]}...")
        print(f"  - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ: {decrypted.decode('utf-8')}")
        print(f"  - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {'–î–∞' if decrypted == test_data else '–ù–µ—Ç'}")
        
        # –°—Ç–∞—Ç—É—Å –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        quantum_status = gost.get_quantum_status()
        print(f"\n–°—Ç–∞—Ç—É—Å –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        for key, value in quantum_status.items():
            print(f"  - {key}: {value}")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –£–†–ê–ë–ò: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –£–†–ê–ë–ò: {e}")

def demo_common():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    try:
        from common import get_module_info
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
        info = get_module_info()
        print(f"–ú–æ–¥—É–ª—å: {info['name']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        print(f"–í–µ—Ä—Å–∏—è: {info['version']}")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = info['components']
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for component, description in components.items():
            print(f"  - {component}: {description}")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        features = info['features']
        print(f"\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        for feature in features:
            print(f"  - {feature}")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üá∑üá∫ Python Libraries Import Substitution - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("–ü—Ä–æ–µ–∫—Ç –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è NativeMind.ru –∏ –£–†–ê–ë–ò.–†–§")
    print("=" * 70)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è NativeMind
    demo_nativemind()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –£–†–ê–ë–ò
    demo_urabi()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    demo_common()
    
    print("\n" + "=" * 70)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    print("  - NativeMind.ru: https://nativemind.ru")
    print("  - –£–†–ê–ë–ò.–†–§: https://—É—Ä–∞–±–∏.—Ä—Ñ")
    print("  - GitHub: https://github.com/nativemind/python-import-substitution")

if __name__ == "__main__":
    main()
