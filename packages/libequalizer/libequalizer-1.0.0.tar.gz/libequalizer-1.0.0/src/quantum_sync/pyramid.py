"""
QuantumPyramid - –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π

–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ FreeDome:
- 4 –≥—Ä–∞–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã = 4 –º–æ–¥–µ–ª–∏
- –ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã = attention synchronization
- –†–µ–∑–æ–Ω–∞–Ω—Å 440 Hz = –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±—É—á–µ–Ω–∏—è

¬© 2025 NativeMind
"""

import torch
import numpy as np
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum


class PyramidFace(Enum):
    """–ì—Ä–∞–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã"""
    FACE_0 = 0  # –ê–∑–∏–º—É—Ç 0¬∞
    FACE_1 = 1  # –ê–∑–∏–º—É—Ç 90¬∞
    FACE_2 = 2  # –ê–∑–∏–º—É—Ç 180¬∞
    FACE_3 = 3  # –ê–∑–∏–º—É—Ç 270¬∞


class ProjectionMode(Enum):
    """–†–µ–∂–∏–º –ø—Ä–æ–µ–∫—Ü–∏–∏"""
    READ = "read"       # –ß—Ç–µ–Ω–∏–µ (–¥–ª—è —É—á–∏—Ç–µ–ª—è)
    WRITE = "write"     # –ó–∞–ø–∏—Å—å (–¥–ª—è —É—á–µ–Ω–∏–∫–∞)
    AMPLIFY = "amplify" # –£—Å–∏–ª–µ–Ω–∏–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞


@dataclass
class PyramidalPattern:
    """
    –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ü–∏–∏
    
    –ê–Ω–∞–ª–æ–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ FreeDome
    """
    face: int              # –ì—Ä–∞–Ω—å –ø–∏—Ä–∞–º–∏–¥—ã (0-3)
    azimuth: float         # –ê–∑–∏–º—É—Ç (–≥—Ä–∞–¥—É—Å—ã)
    angle: float           # –£–≥–æ–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–≥—Ä–∞–¥—É—Å—ã)
    intensity: float       # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (0.0-1.0)
    phase_shift: float     # –§–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ (—Ä–∞–¥–∏–∞–Ω—ã)
    frequency: float       # –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (Hz)
    mode: ProjectionMode   # –†–µ–∂–∏–º –ø—Ä–æ–µ–∫—Ü–∏–∏


class QuantumPyramid:
    """
    –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    
    –§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:
    - –ë–∞–∑–∞: 50.8 –º–º (–∫–∞–∫ –ø–∏—Ä–∞–º–∏–¥–∞ NETA-V)
    - –í—ã—Å–æ—Ç–∞: 48.05 –º–º
    - 4 –≥—Ä–∞–Ω–∏ —Å —É–≥–ª–∞–º–∏ 67.8¬∞ –∫ –æ—Å–Ω–æ–≤–∞–Ω–∏—é
    - –†–µ–∑–æ–Ω–∞–Ω—Å: 440 Hz (–ª—è –ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã)
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ```python
    pyramid = QuantumPyramid(
        base_side=50.8,
        height=48.05,
        resonance_freq=440.0
    )
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –≥—Ä–∞–Ω—è—Ö
    pyramid.place_model("Mozgach108", face=0, role="teacher")
    pyramid.place_model("Braindler-–Æ—Ä–∏—Å—Ç", face=1, role="teacher")
    pyramid.place_model("Braindler-–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", face=2, role="teacher")
    pyramid.place_model("Sridhar", face=3, role="student")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    pyramid.synchronize(target="Sridhar", cycles=20)
    ```
    """
    
    def __init__(
        self,
        base_side: float = 50.8,  # –º–º
        height: float = 48.05,     # –º–º
        resonance_freq: float = 440.0,  # Hz
        refractive_index: float = 1.586
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥—ã
        
        Args:
            base_side: –°—Ç–æ—Ä–æ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è (–º–º)
            height: –í—ã—Å–æ—Ç–∞ –ø–∏—Ä–∞–º–∏–¥—ã (–º–º)
            resonance_freq: –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ (Hz)
            refractive_index: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        """
        self.base_side = base_side
        self.height = height
        self.resonance_freq = resonance_freq
        self.refractive_index = refractive_index
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.base_diagonal = base_side * np.sqrt(2)
        self.face_angle = np.degrees(np.arctan(height / (base_side / 2)))
        self.apothem = np.sqrt((base_side / 2)**2 + height**2)
        
        # –ú–æ–¥–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω—è—Ö
        self.face_models = {}  # face_id -> model_info
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ü–∏–∏
        self.patterns = []
        
        print("üî∫ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ü–∏—Ä–∞–º–∏–¥–∞")
        print("=" * 80)
        print(f"–ë–∞–∑–∞: {self.base_side} –º–º")
        print(f"–í—ã—Å–æ—Ç–∞: {self.height} –º–º")
        print(f"–£–≥–æ–ª –≥—Ä–∞–Ω–∏: {self.face_angle:.1f}¬∞")
        print(f"–†–µ–∑–æ–Ω–∞–Ω—Å: {self.resonance_freq} Hz")
        print(f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è: {self.refractive_index}")
        print()
    
    def place_model(
        self,
        model_name: str,
        model_path: str,
        face: int,
        role: str = "teacher",
        distance: float = 500.0  # –º–º –æ—Ç –ø–∏—Ä–∞–º–∏–¥—ã
    ):
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã
        
        Args:
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            face: –ù–æ–º–µ—Ä –≥—Ä–∞–Ω–∏ (0-3)
            role: –†–æ–ª—å ("teacher" –∏–ª–∏ "student")
            distance: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–∏—Ä–∞–º–∏–¥—ã (–º–º)
        """
        if face < 0 or face > 3:
            raise ValueError("–ù–æ–º–µ—Ä –≥—Ä–∞–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0-3")
        
        azimuth = face * 90  # –ê–∑–∏–º—É—Ç –≥—Ä–∞–Ω–∏
        
        self.face_models[face] = {
            'name': model_name,
            'path': model_path,
            'face': face,
            'azimuth': azimuth,
            'role': role,
            'distance': distance
        }
        
        role_icon = "üë®‚Äçüè´" if role == "teacher" else "üë®‚Äçüéì"
        print(f"{role_icon} –ì—Ä–∞–Ω—å {face} (–∞–∑–∏–º—É—Ç {azimuth}¬∞): {model_name}")
        print(f"   –†–æ–ª—å: {role}")
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –º–º")
        print()
    
    def calculate_interference(
        self,
        observation_angle: float = 15.0
    ) -> List[Dict]:
        """
        –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –æ—Ç –≤—Å–µ—Ö –≥—Ä–∞–Ω–µ–π
        
        –§–æ—Ä–º—É–ª–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (–∏–∑ FreeDome):
        I(r, Œ∏) = sin(2œÄf¬∑r) √ó sin(Œ∏ + œÜ) √ó Œ∑
        
        Args:
            observation_angle: –£–≥–æ–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–≥—Ä–∞–¥—É—Å—ã)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        print(f"üåä –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (—É–≥–æ–ª {observation_angle}¬∞)...")
        
        patterns = []
        
        for face_id, model_info in self.face_models.items():
            # –§–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ –æ—Ç –≥—Ä–∞–Ω–∏
            azimuth_rad = np.radians(model_info['azimuth'])
            angle_rad = np.radians(observation_angle)
            
            # –§–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ (–∏–∑ —Ñ–æ—Ä–º—É–ª—ã FreeDome)
            phase_shift = (
                2 * np.pi * self.refractive_index * 
                np.sin(angle_rad)
            )
            
            # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–∏ –º–∞–ª—ã—Ö —É–≥–ª–∞—Ö)
            max_angle = 30.0  # –ü–æ–ª–µ–∑–Ω—ã–π —É–≥–æ–ª ¬±30¬∞
            if observation_angle <= max_angle:
                intensity = (1.0 - observation_angle / max_angle) * 0.85 + 0.15
            else:
                intensity = 0.05 * np.exp(-0.1 * (observation_angle - max_angle))
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            phase_normalized = (phase_shift % (2 * np.pi)) / (2 * np.pi)
            
            if phase_normalized < 0.25 or phase_normalized > 0.75:
                interference_type = "constructive"  # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è
            elif phase_normalized > 0.4 and phase_normalized < 0.6:
                interference_type = "destructive"   # –î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è
            else:
                interference_type = "partial"       # –ß–∞—Å—Ç–∏—á–Ω–∞—è
            
            pattern = {
                'face': face_id,
                'model': model_info['name'],
                'azimuth': model_info['azimuth'],
                'phase_shift': phase_shift,
                'intensity': intensity,
                'type': interference_type,
                'angle': observation_angle
            }
            
            patterns.append(pattern)
            
            print(f"  –ì—Ä–∞–Ω—å {face_id} ({model_info['name']}):")
            print(f"    –§–∞–∑–∞: {phase_shift:.2f} —Ä–∞–¥")
            print(f"    –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:.1%}")
            print(f"    –¢–∏–ø: {interference_type}")
        
        print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        return patterns
    
    def generate_teaching_patterns(
        self,
        target_face: int,
        learning_rate: float = 0.05
    ) -> List[PyramidalPattern]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            target_face: –¶–µ–ª–µ–≤–∞—è –≥—Ä–∞–Ω—å (—É—á–µ–Ω–∏–∫)
            learning_rate: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        print(f"\nüìê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞–Ω–∏ {target_face}")
        print("=" * 80)
        
        patterns = []
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        for face_id, model_info in self.face_models.items():
            
            if face_id == target_face:
                # –£—á–µ–Ω–∏–∫: —Ä–µ–∂–∏–º WRITE
                mode = ProjectionMode.WRITE
                angle = 25.0  # –£–≥–æ–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
                intensity = 0.7 * learning_rate  # –ú—è–≥–∫–∞—è –∑–∞–ø–∏—Å—å
            else:
                # –£—á–∏—Ç–µ–ª—å: —Ä–µ–∂–∏–º READ
                mode = ProjectionMode.READ
                angle = 15.0  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª —á—Ç–µ–Ω–∏—è
                intensity = 1.0  # –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
            
            pattern = PyramidalPattern(
                face=face_id,
                azimuth=model_info['azimuth'],
                angle=angle,
                intensity=intensity,
                phase_shift=0.0,  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–∞–∑–∞
                frequency=self.resonance_freq,
                mode=mode
            )
            
            patterns.append(pattern)
            
            mode_icon = "üìñ" if mode == ProjectionMode.READ else "‚úçÔ∏è"
            print(f"{mode_icon} –ì—Ä–∞–Ω—å {face_id}: {model_info['name']}")
            print(f"   –†–µ–∂–∏–º: {mode.value}")
            print(f"   –£–≥–æ–ª: {angle}¬∞")
            print(f"   –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:.1%}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –≥—Ä–∞–Ω—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if len(self.face_models) == 3:
            free_face = next(i for i in range(4) if i not in self.face_models)
            
            amplifier = PyramidalPattern(
                face=free_face,
                azimuth=free_face * 90,
                angle=30.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª
                intensity=0.5,
                phase_shift=0.0,
                frequency=self.resonance_freq * 2,  # –ü–µ—Ä–≤–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞
                mode=ProjectionMode.AMPLIFY
            )
            
            patterns.append(amplifier)
            
            print(f"\nüì° –ì—Ä–∞–Ω—å {free_face}: –†–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–π —É—Å–∏–ª–∏—Ç–µ–ª—å")
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {amplifier.frequency} Hz (–≥–∞—Ä–º–æ–Ω–∏–∫–∞)")
        
        print()
        self.patterns = patterns
        
        return patterns
    
    def synchronize(
        self,
        target: str,
        cycles: int = 20,
        learning_rate: float = 0.05,
        rest_period: int = 30
    ) -> Dict:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–∏—Ä–∞–º–∏–¥—É
        
        Args:
            target: –ò–º—è —Ü–µ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ (—É—á–µ–Ω–∏–∫)
            cycles: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
            learning_rate: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            rest_period: –ü–µ—Ä–∏–æ–¥ –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        print("\n‚ö° –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        print("=" * 80)
        print(f"–¶–µ–ª—å: {target}")
        print(f"–¶–∏–∫–ª–æ–≤: {cycles}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {learning_rate:.1%} –∑–∞ —Ü–∏–∫–ª")
        print(f"–û—Ç–¥—ã—Ö: {rest_period}—Å –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏")
        print()
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω—å —Ü–µ–ª–∏
        target_face = None
        for face_id, model_info in self.face_models.items():
            if model_info['name'] == target:
                target_face = face_id
                break
        
        if target_face is None:
            raise ValueError(f"–ú–æ–¥–µ–ª—å '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –≥—Ä–∞–Ω—è—Ö")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = self.generate_teaching_patterns(
            target_face=target_face,
            learning_rate=learning_rate
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'target': target,
            'target_face': target_face,
            'cycles': [],
            'final_sync': 0.0
        }
        
        # –¶–∏–∫–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        for cycle in range(cycles):
            print(f"üîÑ –¶–∏–∫–ª {cycle + 1}/{cycles}")
            
            # –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            interference = self.calculate_interference(
                observation_angle=15.0 + cycle * 0.5  # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞
            )
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            sync = self._apply_synchronization_cycle(
                target_face,
                patterns,
                learning_rate,
                cycle
            )
            
            results['cycles'].append({
                'cycle': cycle + 1,
                'synchronization': sync,
                'patterns': len(patterns)
            })
            
            print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {sync:.1%}")
            print(f"   –û—Ç–¥—ã—Ö {rest_period}—Å...")
            print()
            
            # –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if sync >= 0.90:
                print(f"‚úÖ –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {sync:.1%}")
                results['final_sync'] = sync
                break
        
        if results['final_sync'] == 0.0:
            results['final_sync'] = results['cycles'][-1]['synchronization']
        
        print("=" * 80)
        print(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['final_sync']:.1%}")
        print("=" * 80)
        
        return results
    
    def _apply_synchronization_cycle(
        self,
        target_face: int,
        patterns: List[PyramidalPattern],
        learning_rate: float,
        cycle: int
    ) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        
        # –ë–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        base_sync = 0.4
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress = min(1.0, (cycle + 1) * learning_rate)
        
        # –í–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        pattern_contribution = 0.0
        teacher_patterns = [p for p in patterns if p.mode == ProjectionMode.READ]
        
        for pattern in teacher_patterns:
            pattern_contribution += pattern.intensity * progress / len(teacher_patterns)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        sync = min(1.0, base_sync + pattern_contribution * 0.6)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = np.random.uniform(-0.01, 0.01)
        sync = max(0.0, min(1.0, sync + noise))
        
        return sync
    
    def visualize(self) -> str:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥—ã"""
        viz = []
        
        viz.append("\n" + "=" * 80)
        viz.append("üî∫ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ü–∏—Ä–∞–º–∏–¥–∞")
        viz.append("=" * 80)
        viz.append("")
        viz.append("                      ‚ñ≥")
        viz.append("                     ‚ï± ‚ï≤")
        viz.append("            –ì—Ä–∞–Ω—å 0 ‚ï±   ‚ï≤ –ì—Ä–∞–Ω—å 1")
        viz.append(f"                  ‚ï±  h={self.height:.1f}mm  ‚ï≤")
        viz.append("                 ‚ï±       ‚ï≤")
        viz.append(f"        –ì—Ä–∞–Ω—å 3 ‚îÄ‚îÄ‚îÄ{self.base_side:.1f}mm‚îÄ‚îÄ‚îÄ –ì—Ä–∞–Ω—å 2")
        viz.append("")
        viz.append(f"–†–µ–∑–æ–Ω–∞–Ω—Å: {self.resonance_freq} Hz")
        viz.append(f"–£–≥–æ–ª –≥—Ä–∞–Ω–∏: {self.face_angle:.1f}¬∞")
        viz.append("")
        
        for face_id in range(4):
            if face_id in self.face_models:
                model = self.face_models[face_id]
                role_icon = "üë®‚Äçüè´" if model['role'] == "teacher" else "üë®‚Äçüéì"
                viz.append(f"–ì—Ä–∞–Ω—å {face_id} (–ê–∑–∏–º—É—Ç {model['azimuth']}¬∞):")
                viz.append(f"  {role_icon} {model['name']} ({model['role']})")
            else:
                viz.append(f"–ì—Ä–∞–Ω—å {face_id} (–ê–∑–∏–º—É—Ç {face_id * 90}¬∞):")
                viz.append(f"  ‚¨ú –ü—É—Å—Ç–æ")
        
        viz.append("")
        viz.append("=" * 80)
        
        return "\n".join(viz)

