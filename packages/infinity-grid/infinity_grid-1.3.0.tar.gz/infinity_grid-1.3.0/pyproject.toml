# -*- coding: utf-8 -*-
#
# Copyright (C) 2023 Benjamin Thomas Schwertfeger
# All rights reserved.
# https://github.com/btschwertfeger
#

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "infinity-grid"
dynamic = ["version"]
authors = [
  { name = "Benjamin Thomas Schwertfeger", email = "contact@b-schwertfeger.de" },
]
description = "Multi-exchange Infinity Grid Trading Algorithm"
readme = "README.md"
license = "LicenseRef-Infinity-Grid-2.0"
license-files = ["LICENSE"]

requires-python = ">=3.11"
dependencies = [
  "aiohttp~=3.12",
  "click~=8.1",
  "cloup~=3.0",
  "requests~=2.32",
  "psycopg2-binary~=2.9",
  "sqlalchemy~=2.0",
  "pydantic~=2.11"
]

keywords = ["crypto", "trading", "trading bot", "grid trading", "exchange"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Framework :: AsyncIO",
  "Framework :: Pytest",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: Unix",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Office/Business :: Financial :: Investment",
  "Topic :: Office/Business :: Financial",
  "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/btschwertfeger/infinity-grid"
Documentation = "https://infinity-grid.readthedocs.io/en/stable/"
Changelog = "https://github.com/btschwertfeger/infinity-grid/releases"
"Bug Tracker" = "https://github.com/btschwertfeger/infinity-grid/issues"

[project.optional-dependencies]
kraken = ["python-kraken-sdk>=3.2.6,<4.0.0"]

[project.scripts]
infinity-grid = "infinity_grid.core.cli:cli"

[tool.setuptools]
include-package-data = false
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["infinity_grid*"]
exclude = [".env", "tests", ".venv", "tools", ".github", ".cache"]

[tool.setuptools_scm]
version_file = "src/infinity_grid/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"

# ========= T E S T I N G ======================================================
#
[tool.pytest]
junit_family = "xunit2"
testpaths = ["tests"]

[tool.pytest.ini_options]
cache_dir = ".cache/pytest"
markers = [
  "asyncio: used for async tests.",
  "integration: used for integration tests.",
  "wip: used for wip tests.",
  "acceptance: marks tests as acceptance tests",
]
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
  "ignore:The .*async_close.* function is deprecated:DeprecationWarning:",
  "ignore:The .*stop.* function is deprecated:DeprecationWarning:",
]

[tool.coverage.run]
source = ["."]
omit = ["*tests*", "_version.py"]

[tool.coverage.report]
exclude_lines = ["coverage: disable", "if TYPE_CHECKING:"]
skip_empty = true

[tool.codespell]
check-filenames = true

# ========= T Y P I N G ========================================================
#
[tool.mypy]
python_version = "3.11"

# junit_xml = "mypy.xml"
files = ["src/infinity_grid/*.py"]
exclude = ["tests/*"]

cache_dir = ".cache/mypy"
sqlite_cache = true
cache_fine_grained = true

# Disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

# Untyped definitions and calls
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false

# None and Optional handling
implicit_optional = true
strict_optional = false

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

# Suppressing errors
ignore_errors = false

# Configuring error messages
show_error_context = true
show_column_numbers = true
hide_error_codes = false
pretty = true
color_output = true
show_absolute_path = true
ignore_missing_imports = true

# Miscellaneous strictness flags
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
# disable_error_code = xxx,xxx
implicit_reexport = true
strict_concatenate = false
strict_equality = true
strict = true

# ========= L I N T I N G ======================================================
#
[tool.ruff]
cache-dir = ".cache/ruff"

respect-gitignore = true
exclude = []
line-length = 130

[tool.ruff.lint]
select = [
  "A",      # flake8-builtins
  "AIR",    # Airflow
  "ANN",    # flake8-annotations
  "ARG",    # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "ASYNC1", # flake8-trio
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C",      # pylint convention
  "C4",     # flake8-comprehensions
  "COM",    # flake8-commas
  "CPY",    # flake8-copyright
  "E",      # pylint error
  "F",      # pyflakes
  "FA",     # flake8-future-annotations
  # "FBT",    # flake8-boolean-trap
  "FLY",  # flynt
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-string-concat
  "LOG",  # flake8-logging
  "N",    # PEP8 naming
  "PERF", # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # PyLint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "R",    # pylint refactor
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T20",  # flake8-print
  "TCH",  # flake8-type-checking
  "TID",  # flake8-tidy-imports
  # "W",    # pylint warning
  # "D",    # pydocstyle | sphinx format not supported
  # "ERA",  # eradicate - commented-out code
  # "FIX",  # flake8-fixme
  # "TD",   # flake8-todos
  # "TRY",  # tryceratops # specify exception messages in class; not important
]
fixable = ["ALL"]

ignore = [
  "PLR2004", # magic value in comparison
  "PLR6301", # Method `â€¦` could be a function or static method # false positive for no-self-use
]

task-tags = ["todo", "TODO", "fixme", "FIXME"]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "E501",   # line to long
  "F841",   # unused variable
  "N802",   # PEP8 naming
  "S101",   # assert use
  "S106",   # hardcoded password
  "S110",   # try-except-pass without logging
  "S311",   # pseudo-random-generator
  "SLF001", # private member access
  "TID252", # ban relative imports
  "N999",   # Invalid module name
  "PLR0915", # Too many statements
  "PLC0415", # Import outside top-level
]
"tools/*.py" = [
  "T201", # `print` found
  "E501", # Line too long
]
"tools/generate_ws_messages.py" = [
  "S311", # pseudo-random-generator
]
"tools/backtesting/Backtesting.ipynb" = [
  "CPY001", # Copyright
]

[tool.ruff.lint.flake8-copyright]
author = "Benjamin Thomas Schwertfeger"
notice-rgx = "(?i)Copyright \\(C\\) \\d{4}"
min-file-size = 1024

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pep8-naming]
ignore-names = ["i", "j", "k", "_"]

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 6
max-statements = 50
allow-magic-value-types = ["int"]
