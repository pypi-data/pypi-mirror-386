# coding: utf-8

"""
    OpenAPI

    OpenAPI

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from hubsante_model.sas.models.organization import Organization
from hubsante_model.sas.models.practitioner import Practitioner
from typing import Optional, Set
from typing_extensions import Self

class Appointment(BaseModel):
    """
    Appointment
    """ # noqa: E501
    appointment_id: StrictStr = Field(description="Un identifiant technique unique par RDV est transmis.   Cet identifiant est défini par la plateforme numérique SAS et peut prendre la forme d’un UUID par exemple.  La solution éditeur devra s’appuyer sur cet ID pour la gestion des requêtes de mises à jour.", alias="appointmentId")
    method: StrictStr = Field(description="Indique un message de création ou de modification du rendez-vous")
    created: str = Field(description="Indique la date et l’heure de la prise de RDV")
    start: str = Field(description="Indique la date et l’horaire de début du rendez-vous")
    end: Optional[str] = Field(default=None, description="Indique la date et l’horaire de fin du rendez-vous")
    status: StrictStr = Field(description="Indique le statut du rendez-vous")
    orientation_category: Optional[StrictStr] = Field(default=None, description="Indique la catégorie de l’orientation de rendez-vous", alias="orientationCategory")
    practitioner: Optional[Practitioner] = None
    organization: Optional[Organization] = None
    __properties: ClassVar[List[str]] = ["appointmentId", "method", "created", "start", "end", "status", "orientationCategory", "practitioner", "organization"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CreateAppointment', 'UpdateAppointment']):
            raise ValueError("must be one of enum values ('CreateAppointment', 'UpdateAppointment')")
        return value

    @field_validator('created')
    def created_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/")
        return value

    @field_validator('start')
    def start_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/")
        return value

    @field_validator('end')
    def end_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\-+]\d{2}:\d{2}$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'booked', 'fulfilled', 'noshow', 'cancelled']):
            raise ValueError("must be one of enum values ('pending', 'booked', 'fulfilled', 'noshow', 'cancelled')")
        return value

    @field_validator('orientation_category')
    def orientation_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CPTS', 'MSP', 'CDS', 'SOS', 'PS', 'PDM']):
            raise ValueError("must be one of enum values ('CPTS', 'MSP', 'CDS', 'SOS', 'PS', 'PDM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Appointment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of practitioner
        if self.practitioner:
            _dict['practitioner'] = self.practitioner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Appointment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appointmentId": obj.get("appointmentId"),
            "method": obj.get("method"),
            "created": obj.get("created"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "status": obj.get("status"),
            "orientationCategory": obj.get("orientationCategory"),
            "practitioner": Practitioner.from_dict(obj["practitioner"]) if obj.get("practitioner") is not None else None,
            "organization": Organization.from_dict(obj["organization"]) if obj.get("organization") is not None else None
        })
        return _obj


