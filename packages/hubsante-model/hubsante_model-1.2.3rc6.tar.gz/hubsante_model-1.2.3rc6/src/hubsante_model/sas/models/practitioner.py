# coding: utf-8

"""
    OpenAPI

    OpenAPI

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Practitioner(BaseModel):
    """
    Practitioner
    """ # noqa: E501
    rpps_id: Annotated[str, Field(strict=True)] = Field(description="Identifiant national (RPPS) du PS", alias="rppsId")
    last_name: StrictStr = Field(description="Nom du professionnel de santé", alias="lastName")
    first_name: StrictStr = Field(description="Prénom du professionnel de santé", alias="firstName")
    speciality_code: Optional[StrictStr] = Field(default=None, description="Code de la spécialité du professionnel de santé", alias="specialityCode")
    speciality_url: Optional[StrictStr] = Field(default=None, description="Url de la terminologie utilisée pour la spécialité", alias="specialityUrl")
    profession_code: Optional[StrictStr] = Field(default=None, description="Code de la profession du professionnel de santé", alias="professionCode")
    profession_url: Optional[StrictStr] = Field(default=None, description="Url de la terminologie utilisée pour la profession", alias="professionUrl")
    __properties: ClassVar[List[str]] = ["rppsId", "lastName", "firstName", "specialityCode", "specialityUrl", "professionCode", "professionUrl"]

    @field_validator('rpps_id')
    def rpps_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^81[0-9]{10}$", value):
            raise ValueError(r"must validate the regular expression /^81[0-9]{10}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Practitioner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Practitioner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rppsId": obj.get("rppsId"),
            "lastName": obj.get("lastName"),
            "firstName": obj.get("firstName"),
            "specialityCode": obj.get("specialityCode"),
            "specialityUrl": obj.get("specialityUrl"),
            "professionCode": obj.get("professionCode"),
            "professionUrl": obj.get("professionUrl")
        })
        return _obj


