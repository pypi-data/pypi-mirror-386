# Configuration file for Sphinx documentation
# AUTO-GENERATED by Introligo from {{ config_file_name }}
#
# WARNING: This file is AUTO-GENERATED and should NOT be edited manually.
# Any manual changes will be OVERWRITTEN when regenerated.
#
# To modify Sphinx configuration:
# 1. Edit your introligo YAML configuration file
# 2. Regenerate using: python -m introligo <config.yaml> -o <output_dir>

from __future__ import annotations
{%- if sphinx.version_from_git %}

import subprocess
{%- endif %}

import sys
{%- if sphinx.version_from_git or not sphinx.copyright_year %}
from datetime import datetime
{%- endif %}
from pathlib import Path
{% if has_breathe %}

# Import Breathe configuration if available
try:
    from generated.breathe_config import *  # noqa: F403
except ImportError:
    pass
{% endif %}

{% if sphinx.version_from_git %}


def read_version():
    """Read version from git tags, fallback to '{{ sphinx.fallback_version }}'.
    Uses `git describe --tags --exact-match` to get the exact tag if HEAD is on a tag,
    otherwise `git describe --tags --abbrev=0` to get the latest tag.
    Strips leading 'v' if present.

    Returns:
        str: The version string.
    """
    try:
        # prefer exact tag if HEAD is on a tag
        exact = (
            subprocess.check_output(
                ["git", "describe", "--tags", "--exact-match"],
                stderr=subprocess.DEVNULL,
                text=True
            )
            .lstrip("v")
            .strip()
        )
        if exact:
            return exact
    except Exception:
        pass
    try:
        # otherwise â€“ last tag (e.g. v{{ sphinx.fallback_version }})
        last = (
            subprocess.check_output(
                ["git", "describe", "--tags", "--abbrev=0"],
                stderr=subprocess.DEVNULL,
                text=True
            )
            .lstrip("v")
            .strip()
        )
        return last
    except Exception:
        return "{{ sphinx.fallback_version }}"

{% endif %}
# -- Paths --------------------------------------------------------------------
DOCS_DIR = Path(__file__).resolve().parent
{% if sphinx.project_root %}
PROJECT_ROOT = DOCS_DIR.parent{{ '/' + sphinx.project_root if sphinx.project_root != '.' else '' }}
{% else %}
PROJECT_ROOT = DOCS_DIR.parent
{% endif %}
{% if sphinx.add_project_to_path %}
sys.path.insert(0, str(PROJECT_ROOT))
{% endif %}

# -- Project information -------------------------------------------------------
project = "{{ sphinx.project }}"
author = "{{ sphinx.author }}"
{% if sphinx.copyright_year %}
copyright = "{{ sphinx.copyright_year }}, {{ sphinx.author }}"
{% else %}
copyright = f"{datetime.now().year}, {{ sphinx.author }}"
{% endif %}
{% if sphinx.version_from_git %}
release = read_version()
{% else %}
release = "{{ sphinx.release }}"
{% endif %}
{% if sphinx.version %}
version = "{{ sphinx.version }}"
{% endif %}

# -- General configuration -----------------------------------------------------
extensions = [
{% for ext in sphinx.extensions %}
    "{{ ext }}",
{% endfor %}
]

templates_path = {{ sphinx.templates_path if sphinx.templates_path is defined else '[]' }}
exclude_patterns = {{ sphinx.exclude_patterns if sphinx.exclude_patterns is defined else '[]' }}
{% if sphinx.language %}

language = "{{ sphinx.language }}"
{% endif %}
{% if sphinx.intersphinx_mapping %}

# -- Intersphinx configuration -------------------------------------------------
intersphinx_mapping = {
{% for name, mapping in sphinx.intersphinx_mapping.items() %}
    "{{ name }}": ("{{ mapping[0] }}", {{ 'None' if mapping[1] is none else '"' + mapping[1] + '"' }}),
{% endfor %}
}
{% endif %}

# -- HTML output options -------------------------------------------------------
html_theme = "{{ sphinx.html_theme }}"
{% if sphinx.html_static_path %}
html_static_path = {{ sphinx.html_static_path }}
{% endif %}
{% if sphinx.html_title %}
html_title = "{{ sphinx.html_title }}"
{% endif %}
{% if sphinx.html_logo %}
html_logo = {{ sphinx.html_logo }}
{% endif %}
{% if sphinx.html_favicon %}
html_favicon = {{ sphinx.html_favicon }}
{% endif %}
{% if has_theme_options %}

html_theme_options = {
{% if sphinx.html_theme_options and sphinx.html_theme_options.sidebar_hide_name is defined %}
    "sidebar_hide_name": {{ 'True' if sphinx.html_theme_options.sidebar_hide_name else 'False' }},
{% endif %}
{% if has_light_palette %}
    # LIGHT MODE{% if palette_name %} - {{ palette_name }} palette{% endif %}

    "light_css_variables": {
{% if palette_raw_colors %}
        # Color palette definitions
{% for color_name, color_value in palette_raw_colors.items() %}
        "--{{ color_name|replace('_', '-') }}": "{{ color_value }}",
{% endfor %}
{% endif %}
        # Theme variable mappings
{% for var_name, var_value in light_palette.items() %}
        "{{ var_name }}": "{{ var_value }}",
{% endfor %}
    },
{% endif %}
{% if has_dark_palette %}
    # DARK MODE{% if palette_name %} - {{ palette_name }} palette{% endif %}

    "dark_css_variables": {
{% if palette_raw_colors %}
        # Color palette definitions
{% for color_name, color_value in palette_raw_colors.items() %}
        "--{{ color_name|replace('_', '-') }}": "{{ color_value }}",
{% endfor %}
{% endif %}
        # Theme variable mappings
{% for var_name, var_value in dark_palette.items() %}
        "{{ var_name }}": "{{ var_value }}",
{% endfor %}
    },
{% endif %}
{% if sphinx.html_theme_options %}
{% for key, value in sphinx.html_theme_options.items() %}
{% if key not in ['sidebar_hide_name'] %}
    "{{ key }}": {{ value|tojson }},
{% endif %}
{% endfor %}
{% endif %}
}
{% endif %}
{% if sphinx.autodoc_default_options %}

# -- Options for autodoc extension -------------------------------------------
autodoc_default_options = {
{% for key, value in sphinx.autodoc_default_options.items() %}
    "{{ key }}": {{ 'True' if value is sameas true else ('False' if value is sameas false else (value|tojson)) }},
{% endfor %}
}
{% endif %}
{% if sphinx.napoleon_settings %}

# -- Napoleon settings for better docstring rendering -----------------------
{% for key, value in sphinx.napoleon_settings.items() %}
{{ key }} = {{ 'True' if value is sameas true else ('False' if value is sameas false else (value|tojson)) }}
{% endfor %}
{% endif %}
{% if sphinx.breathe_settings %}

# -- Breathe configuration for Doxygen integration ---------------------------
{% for key, value in sphinx.breathe_settings.items() %}
{{ key }} = {{ value|tojson }}
{% endfor %}
{% endif %}
{% if sphinx.custom_settings %}

# -- Custom settings ---------------------------------------------------------
{% for key, value in sphinx.custom_settings.items() %}
{{ key }} = {{ value|tojson }}
{% endfor %}
{% endif %}
