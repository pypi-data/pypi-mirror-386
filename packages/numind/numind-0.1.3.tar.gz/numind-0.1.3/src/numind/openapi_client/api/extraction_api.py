"""
NuExtract Platform

 NB: you can also interact with this API via the [Python SDK](https://github.com/numindai/nuextract-platform-sdk).  ## Extracting Information from Documents  Once your project is ready, you can use it to extract information from documents in real time via this RESTful API.  Each project has its own extraction endpoint:  `https://nuextract.ai/api/projects/{projectId}/extract`  You provide it a document and it returns the extracted information according to the task defined in the project. To use it, you need:  - To create an API key in the [Account section](https://nuextract.ai/app/user?content=api) - To replace `{projectId}` by the project ID found in the API tab of the project  You can test your extraction endpoint in your terminal using this command-line example with curl (make sure that you replace values of `PROJECT_ID` and `NUEXTRACT_API_KEY`):  ```bash NUEXTRACT_API_KEY=\"_your_api_key_here_\"; \\ PROJECT_ID=\"a24fd84a-44ab-4fd4-95a9-bebd46e4768b\"; \\ curl \"https://nuextract.ai/api/projects/${PROJECT_ID}/extract\" \\   -X POST \\   -H \"Authorization: Bearer ${NUEXTRACT_API_KEY}\" \\   -H \"Content-Type: application/octet-stream\" \\   --data-binary @\"${FILE_NAME}\" ```  You can also use the [Python SDK](https://github.com/numindai/nuextract-platform-sdk#documentation), by replacing the `project_id`, `api_key` and `file_path` variables in the following code:  ```python from numind import NuMind from pathlib import Path  client = NuMind(api_key=api_key) file_path = Path(\"path\", \"to\", \"document.odt\") with file_path.open(\"rb\") as file:     input_file = file.read() output_schema = client.post_api_projects_projectid_extract(project_id, input_file) ```  ## Using the Platform via API  Everything you can do on the web platform can be done via API -  check the [user guide](https://www.notion.so/User-Guide-17c16b1df8c580d3a579ebfb24ddbea7?pvs=21) to learn about how the platform works.  This can be useful to create projects automatically, or to make your production more robust for example.  ### Main resources  - **Project** - user project, identified by `projectId` - **File** - uploaded file,  identified by `fileId`, stored up to two weeks if not tied to an **Example** - **Document** - internal representation of a document, identified by `documentId`, created from a File or a text, stored up to two weeks if not tied to an Example - **Example** - document-extraction pair given to teach NuExtract, identified by `exampleId`, created from a Document  ### Most common API operations  - Creating a **Project** via `POST /api/projects` - Changing the template of a **Project** via `PATCH /api/projects/{projectId}` - Uploading a file to a **File** via `POST /api/files` (up to 2 weeks storage) - Creating a **Document** via `POST /api/documents/text` and `POST /api/files/{fileID}/convert-to-document` from a text or a **File** - Adding an **Example** to a **Project** via `POST /api/projects/{projectId}/examples` - Changing Project settings via `POST /api/projects/{projectId}/settings` - Locking a **Project** via `POST /api/projects/{projectId}/lock`  ## Testing with a temporary authorization  This documentation allows to directly test the API. You first need to select `oauth2uth` in the \"Authentication\" box, set the `Client ID` value to `user`, and click on \"Authorize\". You can then go to an API endpoint, e.g.  `POST /api/{projectID}/extract`, press “Test Request”, fill out the body (you can upload a document in this case), and press “Send” to get the output.

The version of the OpenAPI document:
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Annotated, Any, Dict, List, Optional, Tuple, Union

from pydantic import (
    Field,
    StrictBytes,
    StrictFloat,
    StrictInt,
    StrictStr,
    validate_call,
)

from numind.api_response import ApiResponse
from numind.models.extraction_response import ExtractionResponse
from numind.models.job_id_response import JobIdResponse
from numind.openapi_client.api_client import ApiClient, RequestSerialized
from numind.openapi_client.rest import RESTResponseType


class ExtractionApi:
    """
    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def post_api_projects_projectid_extract(
        self,
        project_id: Annotated[
            StrictStr, Field(description="Unique project identifier.")
        ],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        temperature: Annotated[
            Optional[
                Union[
                    Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
                    Annotated[int, Field(le=1, strict=True, ge=0)],
                ]
            ],
            Field(
                description="Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1."
            ),
        ] = None,
        rasterization_dpi: Annotated[
            Optional[Annotated[int, Field(le=300, strict=True)]],
            Field(
                description="Resolution used to convert formatted documents (PDFs, etc.) to images, in dot per inch (optional).   Ranges between 1 and 300."
            ),
        ] = None,
        max_output_tokens: Annotated[
            Optional[StrictInt],
            Field(
                description="Maximum number of output tokens (optional). Must be positive. Set to 0 for no limit."
            ),
        ] = None,
        degraded_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Controls whether a response is returned when smart example is not functionning. Rejects by default."
            ),
        ] = None,
        max_tokens_smart_example: Annotated[
            Optional[Annotated[int, Field(le=32000, strict=True, ge=0)]],
            Field(
                description="Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ExtractionResponse:
        """
        post_api_projects_projectid_extract

          Extract information from the provided text or file. Some files are converted to images -  the **rasterizationDPI** parameter controls their resolution. When **temperature**, **rasterizationDPI**,  **maxOutputTokens**, **degradedMode** and **maxTokensSmartExample** parameters are not specified,  they are set to their project-setting values.  #### Response: Returns a JSON representing the extracted information.  The ***result*** field is guaranteed to conform to the template via post-processing  of the raw model output. In the event that the raw model output did not conform to the template,  it is included in the ***rawResponse*** field, together with the corresponding error message,  and an HTTP code 206 is returned.  #### Error Responses: `404 Not Found` - If a **Project** with the specified `projectId` does not exist.  `403 Forbidden` - If the user does not have permission to run inference on this **Project**.

        :param project_id: Unique project identifier. (required)
        :type project_id: str
        :param body: (required)
        :type body: bytearray
        :param temperature: Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1.
        :type temperature: float
        :param rasterization_dpi: Resolution used to convert formatted documents (PDFs, etc.) to images, in dot per inch (optional).   Ranges between 1 and 300.
        :type rasterization_dpi: int
        :param max_output_tokens: Maximum number of output tokens (optional). Must be positive. Set to 0 for no limit.
        :type max_output_tokens: int
        :param degraded_mode: Controls whether a response is returned when smart example is not functionning. Rejects by default.
        :type degraded_mode: str
        :param max_tokens_smart_example: Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model.
        :type max_tokens_smart_example: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._post_api_projects_projectid_extract_serialize(
            project_id=project_id,
            body=body,
            temperature=temperature,
            rasterization_dpi=rasterization_dpi,
            max_output_tokens=max_output_tokens,
            degraded_mode=degraded_mode,
            max_tokens_smart_example=max_tokens_smart_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ExtractionResponse",
            "400": "str",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_api_projects_projectid_extract_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="Unique project identifier.")
        ],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        temperature: Annotated[
            Optional[
                Union[
                    Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
                    Annotated[int, Field(le=1, strict=True, ge=0)],
                ]
            ],
            Field(
                description="Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1."
            ),
        ] = None,
        rasterization_dpi: Annotated[
            Optional[Annotated[int, Field(le=300, strict=True)]],
            Field(
                description="Resolution used to convert formatted documents (PDFs, etc.) to images, in dot per inch (optional).   Ranges between 1 and 300."
            ),
        ] = None,
        max_output_tokens: Annotated[
            Optional[StrictInt],
            Field(
                description="Maximum number of output tokens (optional). Must be positive. Set to 0 for no limit."
            ),
        ] = None,
        degraded_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Controls whether a response is returned when smart example is not functionning. Rejects by default."
            ),
        ] = None,
        max_tokens_smart_example: Annotated[
            Optional[Annotated[int, Field(le=32000, strict=True, ge=0)]],
            Field(
                description="Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ExtractionResponse]:
        """
        post_api_projects_projectid_extract

          Extract information from the provided text or file. Some files are converted to images -  the **rasterizationDPI** parameter controls their resolution. When **temperature**, **rasterizationDPI**,  **maxOutputTokens**, **degradedMode** and **maxTokensSmartExample** parameters are not specified,  they are set to their project-setting values.  #### Response: Returns a JSON representing the extracted information.  The ***result*** field is guaranteed to conform to the template via post-processing  of the raw model output. In the event that the raw model output did not conform to the template,  it is included in the ***rawResponse*** field, together with the corresponding error message,  and an HTTP code 206 is returned.  #### Error Responses: `404 Not Found` - If a **Project** with the specified `projectId` does not exist.  `403 Forbidden` - If the user does not have permission to run inference on this **Project**.

        :param project_id: Unique project identifier. (required)
        :type project_id: str
        :param body: (required)
        :type body: bytearray
        :param temperature: Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1.
        :type temperature: float
        :param rasterization_dpi: Resolution used to convert formatted documents (PDFs, etc.) to images, in dot per inch (optional).   Ranges between 1 and 300.
        :type rasterization_dpi: int
        :param max_output_tokens: Maximum number of output tokens (optional). Must be positive. Set to 0 for no limit.
        :type max_output_tokens: int
        :param degraded_mode: Controls whether a response is returned when smart example is not functionning. Rejects by default.
        :type degraded_mode: str
        :param max_tokens_smart_example: Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model.
        :type max_tokens_smart_example: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._post_api_projects_projectid_extract_serialize(
            project_id=project_id,
            body=body,
            temperature=temperature,
            rasterization_dpi=rasterization_dpi,
            max_output_tokens=max_output_tokens,
            degraded_mode=degraded_mode,
            max_tokens_smart_example=max_tokens_smart_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ExtractionResponse",
            "400": "str",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_api_projects_projectid_extract_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="Unique project identifier.")
        ],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        temperature: Annotated[
            Optional[
                Union[
                    Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
                    Annotated[int, Field(le=1, strict=True, ge=0)],
                ]
            ],
            Field(
                description="Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1."
            ),
        ] = None,
        rasterization_dpi: Annotated[
            Optional[Annotated[int, Field(le=300, strict=True)]],
            Field(
                description="Resolution used to convert formatted documents (PDFs, etc.) to images, in dot per inch (optional).   Ranges between 1 and 300."
            ),
        ] = None,
        max_output_tokens: Annotated[
            Optional[StrictInt],
            Field(
                description="Maximum number of output tokens (optional). Must be positive. Set to 0 for no limit."
            ),
        ] = None,
        degraded_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Controls whether a response is returned when smart example is not functionning. Rejects by default."
            ),
        ] = None,
        max_tokens_smart_example: Annotated[
            Optional[Annotated[int, Field(le=32000, strict=True, ge=0)]],
            Field(
                description="Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """
        post_api_projects_projectid_extract

          Extract information from the provided text or file. Some files are converted to images -  the **rasterizationDPI** parameter controls their resolution. When **temperature**, **rasterizationDPI**,  **maxOutputTokens**, **degradedMode** and **maxTokensSmartExample** parameters are not specified,  they are set to their project-setting values.  #### Response: Returns a JSON representing the extracted information.  The ***result*** field is guaranteed to conform to the template via post-processing  of the raw model output. In the event that the raw model output did not conform to the template,  it is included in the ***rawResponse*** field, together with the corresponding error message,  and an HTTP code 206 is returned.  #### Error Responses: `404 Not Found` - If a **Project** with the specified `projectId` does not exist.  `403 Forbidden` - If the user does not have permission to run inference on this **Project**.

        :param project_id: Unique project identifier. (required)
        :type project_id: str
        :param body: (required)
        :type body: bytearray
        :param temperature: Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1.
        :type temperature: float
        :param rasterization_dpi: Resolution used to convert formatted documents (PDFs, etc.) to images, in dot per inch (optional).   Ranges between 1 and 300.
        :type rasterization_dpi: int
        :param max_output_tokens: Maximum number of output tokens (optional). Must be positive. Set to 0 for no limit.
        :type max_output_tokens: int
        :param degraded_mode: Controls whether a response is returned when smart example is not functionning. Rejects by default.
        :type degraded_mode: str
        :param max_tokens_smart_example: Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model.
        :type max_tokens_smart_example: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._post_api_projects_projectid_extract_serialize(
            project_id=project_id,
            body=body,
            temperature=temperature,
            rasterization_dpi=rasterization_dpi,
            max_output_tokens=max_output_tokens,
            degraded_mode=degraded_mode,
            max_tokens_smart_example=max_tokens_smart_example,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ExtractionResponse",
            "400": "str",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_api_projects_projectid_extract_serialize(
        self,
        project_id,
        body,
        temperature,
        rasterization_dpi,
        max_output_tokens,
        degraded_mode,
        max_tokens_smart_example,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        # process the query parameters
        if temperature is not None:
            _query_params.append(("temperature", temperature))

        if rasterization_dpi is not None:
            _query_params.append(("rasterizationDPI", rasterization_dpi))

        if max_output_tokens is not None:
            _query_params.append(("maxOutputTokens", max_output_tokens))

        if degraded_mode is not None:
            _query_params.append(("degradedMode", degraded_mode))

        if max_tokens_smart_example is not None:
            _query_params.append(("maxTokensSmartExample", max_tokens_smart_example))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "text/plain"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/octet-stream"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["oauth2Auth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/api/projects/{projectId}/extract",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_api_projects_projectid_extract_async(
        self,
        project_id: Annotated[
            StrictStr, Field(description="Unique project identifier.")
        ],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        temperature: Annotated[
            Optional[
                Union[
                    Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
                    Annotated[int, Field(le=1, strict=True, ge=0)],
                ]
            ],
            Field(
                description="Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1."
            ),
        ] = None,
        dpi: Annotated[
            Optional[Annotated[int, Field(le=300, strict=True)]],
            Field(
                description="DPI for file rasterization (optional).  When not specified, the project value is used.   If the file is already an image or a text, this parameter is ignored."
            ),
        ] = None,
        max_output_tokens: Annotated[
            Optional[StrictInt],
            Field(
                description="Maximum number of output tokens (optional).  When not specified, the project value is used.   Use 0 to indicate no limit."
            ),
        ] = None,
        degraded_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Controls whether a response is returned when smart example is not functionning. Rejects by default."
            ),
        ] = None,
        max_tokens_smart_example: Annotated[
            Optional[Annotated[int, Field(le=32000, strict=True, ge=0)]],
            Field(
                description="Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model."
            ),
        ] = None,
        timeout: Annotated[
            Optional[StrictStr],
            Field(description="max time to wait for the processing completion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> JobIdResponse:
        """
        post_api_projects_projectid_extract_async

        Start file extraction as async job

        :param project_id: Unique project identifier. (required)
        :type project_id: str
        :param body: (required)
        :type body: bytearray
        :param temperature: Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1.
        :type temperature: float
        :param dpi: DPI for file rasterization (optional).  When not specified, the project value is used.   If the file is already an image or a text, this parameter is ignored.
        :type dpi: int
        :param max_output_tokens: Maximum number of output tokens (optional).  When not specified, the project value is used.   Use 0 to indicate no limit.
        :type max_output_tokens: int
        :param degraded_mode: Controls whether a response is returned when smart example is not functionning. Rejects by default.
        :type degraded_mode: str
        :param max_tokens_smart_example: Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model.
        :type max_tokens_smart_example: int
        :param timeout: max time to wait for the processing completion
        :type timeout: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._post_api_projects_projectid_extract_async_serialize(
            project_id=project_id,
            body=body,
            temperature=temperature,
            dpi=dpi,
            max_output_tokens=max_output_tokens,
            degraded_mode=degraded_mode,
            max_tokens_smart_example=max_tokens_smart_example,
            timeout=timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "JobIdResponse",
            "400": "str",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_api_projects_projectid_extract_async_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="Unique project identifier.")
        ],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        temperature: Annotated[
            Optional[
                Union[
                    Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
                    Annotated[int, Field(le=1, strict=True, ge=0)],
                ]
            ],
            Field(
                description="Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1."
            ),
        ] = None,
        dpi: Annotated[
            Optional[Annotated[int, Field(le=300, strict=True)]],
            Field(
                description="DPI for file rasterization (optional).  When not specified, the project value is used.   If the file is already an image or a text, this parameter is ignored."
            ),
        ] = None,
        max_output_tokens: Annotated[
            Optional[StrictInt],
            Field(
                description="Maximum number of output tokens (optional).  When not specified, the project value is used.   Use 0 to indicate no limit."
            ),
        ] = None,
        degraded_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Controls whether a response is returned when smart example is not functionning. Rejects by default."
            ),
        ] = None,
        max_tokens_smart_example: Annotated[
            Optional[Annotated[int, Field(le=32000, strict=True, ge=0)]],
            Field(
                description="Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model."
            ),
        ] = None,
        timeout: Annotated[
            Optional[StrictStr],
            Field(description="max time to wait for the processing completion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[JobIdResponse]:
        """
        post_api_projects_projectid_extract_async

        Start file extraction as async job

        :param project_id: Unique project identifier. (required)
        :type project_id: str
        :param body: (required)
        :type body: bytearray
        :param temperature: Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1.
        :type temperature: float
        :param dpi: DPI for file rasterization (optional).  When not specified, the project value is used.   If the file is already an image or a text, this parameter is ignored.
        :type dpi: int
        :param max_output_tokens: Maximum number of output tokens (optional).  When not specified, the project value is used.   Use 0 to indicate no limit.
        :type max_output_tokens: int
        :param degraded_mode: Controls whether a response is returned when smart example is not functionning. Rejects by default.
        :type degraded_mode: str
        :param max_tokens_smart_example: Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model.
        :type max_tokens_smart_example: int
        :param timeout: max time to wait for the processing completion
        :type timeout: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._post_api_projects_projectid_extract_async_serialize(
            project_id=project_id,
            body=body,
            temperature=temperature,
            dpi=dpi,
            max_output_tokens=max_output_tokens,
            degraded_mode=degraded_mode,
            max_tokens_smart_example=max_tokens_smart_example,
            timeout=timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "JobIdResponse",
            "400": "str",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_api_projects_projectid_extract_async_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="Unique project identifier.")
        ],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        temperature: Annotated[
            Optional[
                Union[
                    Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
                    Annotated[int, Field(le=1, strict=True, ge=0)],
                ]
            ],
            Field(
                description="Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1."
            ),
        ] = None,
        dpi: Annotated[
            Optional[Annotated[int, Field(le=300, strict=True)]],
            Field(
                description="DPI for file rasterization (optional).  When not specified, the project value is used.   If the file is already an image or a text, this parameter is ignored."
            ),
        ] = None,
        max_output_tokens: Annotated[
            Optional[StrictInt],
            Field(
                description="Maximum number of output tokens (optional).  When not specified, the project value is used.   Use 0 to indicate no limit."
            ),
        ] = None,
        degraded_mode: Annotated[
            Optional[StrictStr],
            Field(
                description="Controls whether a response is returned when smart example is not functionning. Rejects by default."
            ),
        ] = None,
        max_tokens_smart_example: Annotated[
            Optional[Annotated[int, Field(le=32000, strict=True, ge=0)]],
            Field(
                description="Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model."
            ),
        ] = None,
        timeout: Annotated[
            Optional[StrictStr],
            Field(description="max time to wait for the processing completion"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """
        post_api_projects_projectid_extract_async

        Start file extraction as async job

        :param project_id: Unique project identifier. (required)
        :type project_id: str
        :param body: (required)
        :type body: bytearray
        :param temperature: Model temperature (optional). Controls output diversity.  When not specified, the project value is used.   Ranges between 0 and 1.
        :type temperature: float
        :param dpi: DPI for file rasterization (optional).  When not specified, the project value is used.   If the file is already an image or a text, this parameter is ignored.
        :type dpi: int
        :param max_output_tokens: Maximum number of output tokens (optional).  When not specified, the project value is used.   Use 0 to indicate no limit.
        :type max_output_tokens: int
        :param degraded_mode: Controls whether a response is returned when smart example is not functionning. Rejects by default.
        :type degraded_mode: str
        :param max_tokens_smart_example: Controls the maximum number of tokens that can be allocated to the examples.  Must be positive. Ranges in the context window of the model.
        :type max_tokens_smart_example: int
        :param timeout: max time to wait for the processing completion
        :type timeout: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501
        _param = self._post_api_projects_projectid_extract_async_serialize(
            project_id=project_id,
            body=body,
            temperature=temperature,
            dpi=dpi,
            max_output_tokens=max_output_tokens,
            degraded_mode=degraded_mode,
            max_tokens_smart_example=max_tokens_smart_example,
            timeout=timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "JobIdResponse",
            "400": "str",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _post_api_projects_projectid_extract_async_serialize(
        self,
        project_id,
        body,
        temperature,
        dpi,
        max_output_tokens,
        degraded_mode,
        max_tokens_smart_example,
        timeout,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        # process the query parameters
        if temperature is not None:
            _query_params.append(("temperature", temperature))

        if dpi is not None:
            _query_params.append(("dpi", dpi))

        if max_output_tokens is not None:
            _query_params.append(("maxOutputTokens", max_output_tokens))

        if degraded_mode is not None:
            _query_params.append(("degradedMode", degraded_mode))

        if max_tokens_smart_example is not None:
            _query_params.append(("maxTokensSmartExample", max_tokens_smart_example))

        if timeout is not None:
            _query_params.append(("timeout", timeout))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "text/plain"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/octet-stream"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["oauth2Auth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/api/projects/{projectId}/extract-async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
