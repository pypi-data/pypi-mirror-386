[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project]
name = "numind"
version = "0.1.3"
description = "SDK to interact with the NuMind models API."
requires-python = ">=3.9"
keywords = [ "artificial intelligence", "deep learning", "structured",]
classifiers = [ "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Topic :: Scientific/Engineering :: Artificial Intelligence", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Programming Language :: Python :: 3.13", "Operating System :: OS Independent",]
dependencies = [ "urllib3 >= 2.1.0, < 3.0.0", "python_dateutil >= 2.8.2", "aiohttp >= 3.8.4", "aiohttp-retry >= 2.8.3", "pydantic >= 2", "typing-extensions >= 4.7.1",]
[[project.authors]]
name = "Nathan Fradet"
email = "nathan@numind.ai"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
file = "LICENSE"

[project.optional-dependencies]
build = [ "openapi-generator-cli", "uv", "PyYAML", "toml",]
tests = [ "pytest-asyncio", "pytest-cov", "pytest-rerunfailures", "pytest-dependency",]

[project.urls]
Homepage = "https://github.com/numindai/nuextract-platform-sdk"
Repository = "https://github.com/numindai/nuextract-platform-sdk.git"
Documentation = "https://github.com/numindai/nuextract-platform-sdk#documentation"
Issues = "https://github.com/numindai/nuextract-platform-sdk/issues"

[tool.ruff]
target-version = "py39"

[tool.mypy]
files = [ "numind.openapi_client_async", "tests",]
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
extra_checks = true
check_untyped_defs = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true
[[tool.mypy.overrides]]
module = [ "numind.openapi_client_async.configuration",]
warn_unused_ignores = true
strict_equality = true
extra_checks = true
check_untyped_defs = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_reexport = true
warn_return_any = true

[tool.pytest.ini_options]
pythonpath = "src"
addopts = [ "--import-mode=importlib",]

[tool.coverage.report]
exclude_also = [ "def __repr__",]

[tool.ruff.lint]
extend-select = [ "ARG", "A", "ANN", "B", "BLE", "C4", "COM", "D", "E", "EM", "EXE", "F", "FA", "FBT", "G", "I", "ICN", "INP", "INT", "ISC", "N", "NPY", "PERF", "PGH", "PTH", "PIE", "PT", "Q", "RET", "RSE", "RUF", "S", "SIM", "T", "TCH", "TID", "UP", "W",]
ignore = [ "ANN003", "ANN101", "ANN102", "B905", "COM812", "D107", "D203", "D212", "FBT001", "FBT002", "UP038",]

[tool.pylint."MESSAGES CONTROL"]
extension-pkg-whitelist = "pydantic"

[tool.hatch.envs.test]
features = [ "tests",]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [ "ANN201", "D103", "S101", "T201",]

[tool.hatch.build.targets.wheel]
packages = [ "src/numind",]

[tool.hatch.envs.test.scripts]
test = "pytest"
