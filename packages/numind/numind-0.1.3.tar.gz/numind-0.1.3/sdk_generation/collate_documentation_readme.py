"""Script removing problematic models from an OpenAPI specification file."""  # noqa:INP001

from pathlib import Path

HEADER_SCALAR = "## Testing with a temporary authorization"
OPENAPI_GEN_MENTION = (
    "This Python package is automatically generated by the [OpenAPI Generator]"
)


def read_readme(readme_path: Path) -> str:
    """Read the README file."""
    with readme_path.open() as file:
        readme = file.read().splitlines()
    for idx, line in enumerate(readme):
        if line == "# Documentation":
            readme = readme[: idx + 1]
            break
    return "\n".join(readme)


def read_and_preprocess_generated_readme(readme_gen_path: Path) -> str:
    """Read and preprocess the generated README file."""
    with readme_gen_path.open() as file:
        doc_readme = file.read().splitlines()

    # Exclude OpenAPI top header + mention of SDK
    idx_start = 0
    for idx_line, line in enumerate(doc_readme):
        if line.startswith("## "):
            idx_start = idx_line
            break
    doc_readme = doc_readme[idx_start:]
    # Exclude Scalar doc which is at the end of the OpenAPI main doc.
    idx_line_to_skip_start = None
    idx_line_to_skip_end = None
    for idx_line, line in enumerate(doc_readme):
        if line == HEADER_SCALAR:
            idx_line_to_skip_start = idx_line
        elif line.startswith(OPENAPI_GEN_MENTION):
            idx_line_to_skip_end = idx_line
            break
    doc_readme = doc_readme[:idx_line_to_skip_start] + doc_readme[idx_line_to_skip_end:]

    idx_line_to_skip_start = None
    idx_line_to_skip_end = None
    for idx, line in enumerate(doc_readme):
        if line == "## Author":
            doc_readme = doc_readme[:idx]
            break
        if line == "## Requirements.":
            idx_line_to_skip_start = idx
        elif line == "## Documentation for API Endpoints":
            idx_line_to_skip_end = idx
        if line.startswith("#"):
            doc_readme[idx] = f"#{line}"
    doc_readme = doc_readme[:idx_line_to_skip_start] + doc_readme[idx_line_to_skip_end:]
    return "\n".join(doc_readme)


def main() -> None:
    """Edit an OpenAPI file to remove the models to delete."""
    readme_gen_path = Path("src", "README.md")
    preprocessed_generated_readme = read_and_preprocess_generated_readme(
        readme_gen_path
    )
    readme = read_readme(Path("README.md")) + f"\n\n{preprocessed_generated_readme}"

    with Path("README.md").open("w") as file:
        file.write(readme)


if __name__ == "__main__":
    main()
