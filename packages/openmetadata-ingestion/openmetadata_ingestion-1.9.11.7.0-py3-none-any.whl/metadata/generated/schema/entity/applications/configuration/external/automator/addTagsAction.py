# generated by datamodel-codegen:
#   filename:  entity/applications/configuration/external/automator/addTagsAction.json
#   timestamp: 2025-10-22T06:46:32+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ......type import basic, tagLabel


class AddTagsActionType(Enum):
    AddTagsAction = 'AddTagsAction'


class AddTagsAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Annotated[
        AddTagsActionType,
        Field(description='Application Type', title='Application Type'),
    ]
    tags: Annotated[
        List[tagLabel.TagLabel],
        Field(
            description="Classification Tags to apply (source must be 'Classification')"
        ),
    ]
    applyToChildren: Annotated[
        Optional[List[basic.EntityName]],
        Field(
            None,
            description='Apply tags to the children of the selected assets that match the criteria. E.g., columns, tasks, topic fields,...',
            title='Apply to Children',
        ),
    ]
    overwriteMetadata: Annotated[
        Optional[bool],
        Field(
            False,
            description='Update tags even if they are already defined in the asset. By default, incoming tags are merged with the existing ones.',
            title='Overwrite Metadata',
        ),
    ]
