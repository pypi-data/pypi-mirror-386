# generated by datamodel-codegen:
#   filename:  events/api/eventSubscriptionDiagnosticInfo.json
#   timestamp: 2025-10-22T06:46:32+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ...type import changeEvent


class EventSubscriptionDiagnosticInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    latestOffset: Annotated[
        Optional[Any],
        Field(None, description='The latest offset of the event in the system.'),
    ]
    currentOffset: Annotated[
        Optional[Any],
        Field(None, description='The current offset of the event subscription.'),
    ]
    startingOffset: Annotated[
        Optional[Any],
        Field(
            None,
            description='The initial offset of the event subscription when it started processing.',
        ),
    ]
    hasProcessedAllEvents: Annotated[
        Optional[bool],
        Field(None, description='Indicates whether all events have been processed.'),
    ]
    successfulEventsCount: Annotated[
        Optional[Any],
        Field(None, description='Count of successful events for specific alert.'),
    ]
    failedEventsCount: Annotated[
        Optional[Any],
        Field(None, description='Count of failed events for specific alert.'),
    ]
    relevantUnprocessedEventsCount: Annotated[
        Optional[Any],
        Field(
            None,
            description="The number of relevant unprocessed events based on the alert's filtering rules for specific alert.",
        ),
    ]
    totalUnprocessedEventsCount: Annotated[
        Optional[Any],
        Field(None, description='The total number of unprocessed events.'),
    ]
    relevantUnprocessedEventsList: Annotated[
        Optional[List[changeEvent.ChangeEvent]],
        Field(
            None,
            description="A list of relevant unprocessed events based on the alert's filtering criteria.",
        ),
    ]
    totalUnprocessedEventsList: Annotated[
        Optional[List[changeEvent.ChangeEvent]],
        Field(None, description='A list of all unprocessed events.'),
    ]
