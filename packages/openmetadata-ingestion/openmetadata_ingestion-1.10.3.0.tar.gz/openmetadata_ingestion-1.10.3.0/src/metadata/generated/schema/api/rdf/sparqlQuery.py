# generated by datamodel-codegen:
#   filename:  api/rdf/sparqlQuery.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel


class Format(Enum):
    json = 'json'
    xml = 'xml'
    csv = 'csv'
    tsv = 'tsv'
    turtle = 'turtle'
    rdfxml = 'rdfxml'
    ntriples = 'ntriples'
    jsonld = 'jsonld'


class Inference(Enum):
    none = 'none'
    rdfs = 'rdfs'
    owl = 'owl'
    custom = 'custom'


class SparqlQuery(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    query: Annotated[str, Field(description='The SPARQL query string')]
    format: Annotated[
        Optional[Format],
        Field(Format.json, description='Response format for the query results'),
    ]
    timeout: Annotated[
        Optional[int],
        Field(30000, description='Query timeout in milliseconds', ge=0, le=300000),
    ]
    defaultGraphUri: Annotated[
        Optional[AnyUrl], Field(None, description='Default graph URI for the query')
    ]
    namedGraphUri: Annotated[
        Optional[List[AnyUrl]],
        Field(None, description='Named graph URIs for the query'),
    ]
    inference: Annotated[
        Optional[Inference],
        Field(Inference.none, description='Inference/reasoning level to apply'),
    ]
