# generated by datamodel-codegen:
#   filename:  api/rdf/sparqlResponse.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import AnyUrl, ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel


class Head(BaseModel):
    vars: Annotated[
        Optional[List[str]],
        Field(None, description='List of variable names in the results'),
    ]
    link: Annotated[
        Optional[List[str]], Field(None, description='Links to additional resources')
    ]


class Type(Enum):
    uri = 'uri'
    literal = 'literal'
    bnode = 'bnode'


class Bindings(BaseModel):
    type: Type
    value: str
    datatype: Optional[AnyUrl] = None
    xml_lang: Annotated[Optional[str], Field(None, alias='xml:lang')]


class Results(BaseModel):
    bindings: Annotated[
        Optional[List[Dict[str, Bindings]]], Field(None, description='Result bindings')
    ]


class SparqlResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    head: Annotated[
        Optional[Head],
        Field(None, description='Header information about the query results'),
    ]
    results: Annotated[Optional[Results], Field(None, description='Query results')]
    boolean: Annotated[
        Optional[bool], Field(None, description='Boolean result for ASK queries')
    ]
