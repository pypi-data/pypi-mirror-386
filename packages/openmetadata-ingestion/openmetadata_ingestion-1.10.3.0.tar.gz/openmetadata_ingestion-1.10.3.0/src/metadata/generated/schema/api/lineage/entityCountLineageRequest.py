# generated by datamodel-codegen:
#   filename:  api/lineage/entityCountLineageRequest.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from . import lineageDirection


class EntityCountLineageRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fqn: Annotated[str, Field(description='Entity Fqn to search lineage')]
    from_: Annotated[
        Optional[int],
        Field(
            0,
            alias='from',
            description='Starting offset for pagination (0-based)',
            ge=0,
        ),
    ]
    size: Annotated[
        Optional[int],
        Field(
            50, description='Number of entities to return in this page', ge=1, le=1000
        ),
    ]
    nodeDepth: Annotated[
        Optional[int],
        Field(
            None,
            description='Filter entities by specific node depth level. Negative values for upstream (e.g., -1, -2), positive for downstream (1, 2), 0 for root entity',
            ge=-10,
            le=10,
        ),
    ]
    direction: Annotated[
        lineageDirection.LineageDirection,
        Field(description='Direction of lineage traversal (upstream or downstream)'),
    ]
    maxDepth: Annotated[
        Optional[int],
        Field(
            3,
            description='Maximum depth to traverse in the specified direction',
            ge=1,
            le=10,
        ),
    ]
    isConnectedVia: Annotated[Optional[bool], Field(None, description='Connected Via')]
    queryFilter: Annotated[Optional[str], Field(None, description='Query Filter')]
    includeDeleted: Annotated[
        Optional[bool], Field(False, description='Include deleted entities')
    ]
    includeSourceFields: Annotated[
        Optional[List[str]], Field(None, description='Include source fields')
    ]
