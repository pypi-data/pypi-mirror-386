# generated by datamodel-codegen:
#   filename:  entity/services/connections/dashboard/hexConnection.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import AnyUrl, ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel, CustomSecretStr

from .....type import filterPattern
from .. import connectionBasicType


class TokenType(Enum):
    personal = 'personal'
    workspace = 'workspace'


class HexType(Enum):
    Hex = 'Hex'


class HexConnection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Annotated[
        Optional[HexType],
        Field(HexType.Hex, description='Service Type', title='Service Type'),
    ]
    hostPort: Annotated[
        AnyUrl,
        Field(
            description='Hex API URL. For Hex.tech cloud, use https://app.hex.tech',
            title='Host and Port',
        ),
    ]
    tokenType: Annotated[
        Optional[TokenType],
        Field(
            TokenType.personal,
            description='Type of token to use for authentication',
            title='Token Type',
        ),
    ]
    token: Annotated[
        CustomSecretStr,
        Field(
            description='Hex API token for authentication. Can be personal or workspace token.',
            title='API Token',
        ),
    ]
    includeTags: Annotated[
        Optional[bool],
        Field(
            True,
            description='Whether to import Hex project categories as OpenMetadata tags',
            title='Include Categories and status as Tags',
        ),
    ]
    dashboardFilterPattern: Annotated[
        Optional[filterPattern.FilterPattern],
        Field(
            None,
            description='Regex to exclude or include dashboards that matches the pattern.',
            title='Default Dashboard Filter Pattern',
        ),
    ]
    supportsMetadataExtraction: Optional[
        connectionBasicType.SupportsMetadataExtraction
    ] = None
