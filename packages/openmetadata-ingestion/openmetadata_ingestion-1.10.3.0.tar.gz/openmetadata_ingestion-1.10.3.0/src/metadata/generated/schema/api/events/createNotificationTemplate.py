# generated by datamodel-codegen:
#   filename:  api/events/createNotificationTemplate.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ...type import basic, entityReferenceList


class CreateNotificationTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        basic.EntityName,
        Field(
            description="Name that uniquely identifies this notification template (e.g., 'entity_change', 'test_change')"
        ),
    ]
    displayName: Annotated[
        Optional[str],
        Field(None, description='Display name for this notification template'),
    ]
    description: Annotated[
        Optional[basic.Markdown],
        Field(None, description='Description of this notification template'),
    ]
    templateSubject: Annotated[
        str,
        Field(
            description='Handlebars template for notification subject line',
            max_length=255,
            min_length=1,
        ),
    ]
    templateBody: Annotated[
        str,
        Field(
            description='Handlebars template content for rendering notifications',
            max_length=10240,
            min_length=1,
        ),
    ]
    owners: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='Owners of this template'),
    ]
    domains: Annotated[
        Optional[List[str]],
        Field(
            None,
            description='Fully qualified names of the domains the template belongs to',
        ),
    ]
