# generated by datamodel-codegen:
#   filename:  type/patternRecognizer.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from typing import List

from pydantic import ConfigDict, Field
from typing_extensions import Annotated, Literal

from metadata.ingestion.models.custom_pydantic import BaseModel

from . import piiEntity
from .recognizers import patterns, regexFlags


class PatternRecognizer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['pattern']
    patterns: Annotated[List[patterns.Pattern], Field(description='List of patterns')]
    regexFlags: regexFlags.RegexFlags
    context: Annotated[
        List[str],
        Field(description='List of context words that can help boost confidence score'),
    ]
    supportedEntity: Annotated[
        piiEntity.PIIEntity,
        Field(description='The entity type this recognizer detects'),
    ]
    supportedLanguage: Annotated[
        str,
        Field(
            description='Language supported by this recognizer (ISO 639-1 code)',
            pattern='^[a-z]{2}(-[A-Z]{2})?$',
        ),
    ]
