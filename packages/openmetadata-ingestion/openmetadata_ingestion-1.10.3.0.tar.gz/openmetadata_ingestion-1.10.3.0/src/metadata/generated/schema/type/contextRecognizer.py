# generated by datamodel-codegen:
#   filename:  type/contextRecognizer.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated, Literal

from metadata.ingestion.models.custom_pydantic import BaseModel

from . import piiEntity


class ContextRecognizer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['context']
    contextWords: Annotated[
        List[str],
        Field(
            description='Words that indicate the presence of the entity', min_length=1
        ),
    ]
    supportedEntity: Annotated[
        piiEntity.PIIEntity,
        Field(description='The entity type this recognizer detects'),
    ]
    supportedLanguage: Annotated[
        str,
        Field(
            description='Language supported by this recognizer (ISO 639-1 code)',
            pattern='^[a-z]{2}(-[A-Z]{2})?$',
        ),
    ]
    minScore: Annotated[
        Optional[float],
        Field(0.4, description='Minimum confidence score', ge=0.0, le=1.0),
    ]
    maxScore: Annotated[
        Optional[float],
        Field(0.8, description='Maximum confidence score', ge=0.0, le=1.0),
    ]
    increaseFactorByCharLength: Annotated[
        Optional[float],
        Field(0.05, description='Factor to increase score based on entity length'),
    ]
