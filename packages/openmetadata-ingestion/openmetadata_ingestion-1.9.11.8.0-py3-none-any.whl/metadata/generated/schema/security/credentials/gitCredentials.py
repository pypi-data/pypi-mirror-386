# generated by datamodel-codegen:
#   filename:  security/credentials/gitCredentials.json
#   timestamp: 2025-10-23T04:50:45+00:00

from __future__ import annotations

from pydantic import Field, RootModel
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel, CustomSecretStr


class GitCredentials(BaseModel):
    pass


class RepositoryOwner(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description='The owner (user or organization) of a Git repository. For example, in https://github.com/open-metadata/OpenMetadata, the owner is `open-metadata`.',
            title='Repository Owner',
        ),
    ]


class RepositoryName(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description='The name of a Git repository. For example, in https://github.com/open-metadata/OpenMetadata, the name is `OpenMetadata`.',
            title='Repository Name',
        ),
    ]


class Token(RootModel[CustomSecretStr]):
    root: Annotated[
        CustomSecretStr,
        Field(
            description="Token to use the API. This is required for private repositories and to ensure we don't hit API limits.",
            title='API Token',
        ),
    ]
