# generated by datamodel-codegen:
#   filename:  api/analytics/createWebAnalyticEvent.json
#   timestamp: 2025-10-23T04:50:45+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ...analytics import basic as basic_1
from ...type import basic, entityReferenceList


class CreateWebAnalyticEvent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        basic.EntityName,
        Field(description='Name that identifies this report definition.'),
    ]
    displayName: Annotated[
        Optional[str], Field(None, description='Display Name the report definition.')
    ]
    description: Annotated[
        Optional[basic.Markdown],
        Field(None, description='Description of the report definition.'),
    ]
    eventType: Annotated[
        basic_1.WebAnalyticEventType,
        Field(description='dimension(s) and metric(s) for a report'),
    ]
    owners: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='Owners of this report definition'),
    ]
    domains: Annotated[
        Optional[List[str]],
        Field(
            None,
            description='Fully qualified names of the domains the Web Analytic Event belongs to.',
        ),
    ]
