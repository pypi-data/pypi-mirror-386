# generated by datamodel-codegen:
#   filename:  events/statusContext.json
#   timestamp: 2025-10-23T04:50:45+00:00

from __future__ import annotations

from typing import Any, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ..type import basic


class FailedEvents(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    statusCode: Annotated[
        Optional[int], Field(None, description='HTTP status code of the response')
    ]
    statusInfo: Annotated[
        Optional[str],
        Field(None, description='Reason phrase associated with the status code'),
    ]
    headers: Annotated[
        Optional[Any], Field(None, description='Response headers as a map')
    ]
    entity: Annotated[
        Optional[str], Field(None, description='Response entity, if available')
    ]
    mediaType: Annotated[
        Optional[str], Field(None, description='Media type of the response')
    ]
    location: Annotated[
        Optional[str], Field(None, description='Location URI from the response')
    ]
    timestamp: Annotated[
        Optional[basic.Timestamp],
        Field(None, description='Time in milliseconds since epoch'),
    ]
