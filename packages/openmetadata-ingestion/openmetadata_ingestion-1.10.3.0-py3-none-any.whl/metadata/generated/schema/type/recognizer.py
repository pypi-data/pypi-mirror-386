# generated by datamodel-codegen:
#   filename:  type/recognizer.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import ConfigDict, Field, RootModel
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from . import (
    basic,
    contextRecognizer,
    customRecognizer,
    denyListRecognizer,
    entityHistory,
    entityReference,
    patternRecognizer,
    predefinedRecognizer,
)


class Target(Enum):
    content = 'content'
    column_name = 'column_name'


class RecognizerException(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    entityLink: Annotated[
        basic.EntityLink, Field(description='Entity link to exclude from recognition')
    ]
    reason: Annotated[Optional[str], Field(None, description='Reason for exclusion')]
    addedBy: Annotated[
        Optional[entityReference.EntityReference],
        Field(None, description='User who added this exception'),
    ]
    addedAt: Optional[basic.Timestamp] = None
    feedbackId: Annotated[
        Optional[basic.Uuid],
        Field(None, description='ID of the feedback that triggered this exception'),
    ]


class RecognizerType(Enum):
    pattern = 'pattern'
    deny_list = 'deny_list'
    context = 'context'
    predefined = 'predefined'
    custom = 'custom'


class PredefinedRecognizerType(RootModel[predefinedRecognizer.PredefinedRecognizer]):
    root: predefinedRecognizer.PredefinedRecognizer


class RecognizerConfig(
    RootModel[
        Union[
            patternRecognizer.PatternRecognizer,
            denyListRecognizer.DenyListRecognizer,
            contextRecognizer.ContextRecognizer,
            customRecognizer.CustomRecognizer,
            predefinedRecognizer.PredefinedRecognizer,
        ]
    ]
):
    root: Annotated[
        Union[
            patternRecognizer.PatternRecognizer,
            denyListRecognizer.DenyListRecognizer,
            contextRecognizer.ContextRecognizer,
            customRecognizer.CustomRecognizer,
            predefinedRecognizer.PredefinedRecognizer,
        ],
        Field(description='Complete recognizer configuration'),
    ]


class PatternRecognizerType(RootModel[patternRecognizer.PatternRecognizer]):
    root: patternRecognizer.PatternRecognizer


class DenyListRecognizerType(RootModel[denyListRecognizer.DenyListRecognizer]):
    root: denyListRecognizer.DenyListRecognizer


class ContextRecognizerType(RootModel[contextRecognizer.ContextRecognizer]):
    root: contextRecognizer.ContextRecognizer


class CustomRecognizerType(RootModel[customRecognizer.CustomRecognizer]):
    root: customRecognizer.CustomRecognizer


class Recognizer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Annotated[
        Optional[basic.Uuid],
        Field(None, description='Unique identifier of the recognizer'),
    ]
    name: Annotated[basic.EntityName, Field(description='Name of the recognizer')]
    displayName: Annotated[
        Optional[str], Field(None, description='Display name for the recognizer')
    ]
    description: Annotated[
        Optional[basic.Markdown],
        Field(None, description='Description of what this recognizer detects'),
    ]
    enabled: Annotated[
        Optional[bool], Field(True, description='Whether this recognizer is enabled')
    ]
    isSystemDefault: Annotated[
        Optional[bool],
        Field(False, description='Whether this is a system default recognizer'),
    ]
    recognizerConfig: RecognizerConfig
    confidenceThreshold: Annotated[
        Optional[float],
        Field(
            0.6,
            description='Minimum confidence score required for detection',
            ge=0.0,
            le=1.0,
        ),
    ]
    exceptionList: Annotated[
        Optional[List[RecognizerException]],
        Field(
            [],
            description='Entity links where this recognizer should NOT run (based on user feedback)',
        ),
    ]
    version: Annotated[
        Optional[entityHistory.EntityVersion],
        Field(None, description='Version of the recognizer configuration'),
    ]
    updatedAt: Annotated[
        Optional[basic.Timestamp],
        Field(None, description='Last update time in Unix epoch time milliseconds'),
    ]
    updatedBy: Annotated[
        Optional[str], Field(None, description='User who made the update')
    ]
    target: Annotated[
        Optional[Target],
        Field(
            Target.content,
            description="What the recognizer will analyze for classification. `column_name` means it classifies based on the column's name, `content` uses sample data from the column instead.",
        ),
    ]
