# generated by datamodel-codegen:
#   filename:  api/feed/threadCount.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from typing import Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ...type import basic


class CountOfThreadsRelatedToAnEntity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conversationCount: Annotated[
        Optional[int],
        Field(
            None,
            description='Total count of all the threads of type Conversation.',
            ge=0,
        ),
    ]
    openTaskCount: Annotated[
        Optional[int],
        Field(None, description='Total count of all the open tasks.', ge=0),
    ]
    closedTaskCount: Annotated[
        Optional[int], Field(None, description='Total count of all the tasks.', ge=0)
    ]
    totalTaskCount: Annotated[
        Optional[int], Field(None, description='Total count of all the tasks.', ge=0)
    ]
    mentionCount: Annotated[
        Optional[int],
        Field(None, description='Total count of all the mentions of a user.', ge=0),
    ]
    totalAnnouncementCount: Annotated[
        Optional[int],
        Field(
            None,
            description='Total count of all the announcements associated with the entity.',
            ge=0,
        ),
    ]
    activeAnnouncementCount: Annotated[
        Optional[int],
        Field(
            None,
            description='Total count of all the active announcements associated with the entity.',
            ge=0,
        ),
    ]
    inactiveAnnouncementCount: Annotated[
        Optional[int],
        Field(
            None,
            description='Total count of all the inactive announcements associated with the entity.',
            ge=0,
        ),
    ]
    entityLink: Optional[basic.EntityLink] = None
