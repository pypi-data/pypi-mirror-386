# generated by datamodel-codegen:
#   filename:  system/securityValidationResponse.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel


class Status(Enum):
    success = 'success'
    failed = 'failed'


class ValidationResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    component: Annotated[
        str, Field(description='Component being validated (e.g., oidc, ldap, saml)')
    ]
    status: Annotated[
        str, Field(description='Status of the validation (success/failed)')
    ]
    message: Annotated[str, Field(description='Validation message or error details')]


class FieldError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: Annotated[
        str,
        Field(
            description="Field path that has the error (e.g., 'authenticationConfiguration.oidcConfiguration.clientId')"
        ),
    ]
    error: Annotated[
        str, Field(description='Concise error message for display under form field')
    ]


class SecurityValidationResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    status: Annotated[
        Status, Field(description='Overall validation status (success/failed)')
    ]
    errors: Annotated[
        Optional[List[FieldError]],
        Field(
            None,
            description="List of field errors (only present when status is 'failed')",
        ),
    ]
