# generated by datamodel-codegen:
#   filename:  entity/services/databaseService.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel

from ...type import basic, entityHistory, entityReference, entityReferenceList, tagLabel
from .connections import testConnectionResult
from .connections.database import (
    athenaConnection,
    azureSQLConnection,
    bigQueryConnection,
    bigTableConnection,
    cassandraConnection,
    clickhouseConnection,
    cockroachConnection,
    couchbaseConnection,
    customDatabaseConnection,
    databricksConnection,
    datalakeConnection,
    db2Connection,
    deltaLakeConnection,
    domoDatabaseConnection,
    dorisConnection,
    druidConnection,
    dynamoDBConnection,
    epicConnection,
    exasolConnection,
    glueConnection,
    greenplumConnection,
    hiveConnection,
    icebergConnection,
    impalaConnection,
    mariaDBConnection,
    mongoDBConnection,
    mssqlConnection,
    mysqlConnection,
    oracleConnection,
    pinotDBConnection,
    postgresConnection,
    prestoConnection,
    redshiftConnection,
    salesforceConnection,
    sapErpConnection,
    sapHanaConnection,
    sasConnection,
    serviceNowConnection,
    singleStoreConnection,
    snowflakeConnection,
    sqliteConnection,
    ssasConnection,
    synapseConnection,
    teradataConnection,
    timescaleConnection,
    trinoConnection,
    unityCatalogConnection,
    verticaConnection,
)


class DatabaseServiceType(Enum):
    BigQuery = 'BigQuery'
    BigTable = 'BigTable'
    Mysql = 'Mysql'
    Redshift = 'Redshift'
    Snowflake = 'Snowflake'
    Postgres = 'Postgres'
    Timescale = 'Timescale'
    Mssql = 'Mssql'
    Oracle = 'Oracle'
    Athena = 'Athena'
    Hive = 'Hive'
    Impala = 'Impala'
    Presto = 'Presto'
    Trino = 'Trino'
    Vertica = 'Vertica'
    Glue = 'Glue'
    MariaDB = 'MariaDB'
    Druid = 'Druid'
    Db2 = 'Db2'
    Clickhouse = 'Clickhouse'
    Databricks = 'Databricks'
    AzureSQL = 'AzureSQL'
    DynamoDB = 'DynamoDB'
    SingleStore = 'SingleStore'
    SQLite = 'SQLite'
    DeltaLake = 'DeltaLake'
    Salesforce = 'Salesforce'
    PinotDB = 'PinotDB'
    Datalake = 'Datalake'
    DomoDatabase = 'DomoDatabase'
    QueryLog = 'QueryLog'
    CustomDatabase = 'CustomDatabase'
    Dbt = 'Dbt'
    SapHana = 'SapHana'
    MongoDB = 'MongoDB'
    Cassandra = 'Cassandra'
    Couchbase = 'Couchbase'
    Greenplum = 'Greenplum'
    Doris = 'Doris'
    UnityCatalog = 'UnityCatalog'
    SAS = 'SAS'
    Iceberg = 'Iceberg'
    Teradata = 'Teradata'
    SapErp = 'SapErp'
    Synapse = 'Synapse'
    Exasol = 'Exasol'
    Cockroach = 'Cockroach'
    SSAS = 'SSAS'
    Epic = 'Epic'
    ServiceNow = 'ServiceNow'


class DatabaseConnection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[
        Union[
            bigQueryConnection.BigQueryConnection,
            bigTableConnection.BigTableConnection,
            athenaConnection.AthenaConnection,
            azureSQLConnection.AzureSQLConnection,
            clickhouseConnection.ClickhouseConnection,
            databricksConnection.DatabricksConnection,
            db2Connection.Db2Connection,
            deltaLakeConnection.DeltaLakeConnection,
            druidConnection.DruidConnection,
            dynamoDBConnection.DynamoDBConnection,
            glueConnection.GlueConnection,
            hiveConnection.HiveConnection,
            impalaConnection.ImpalaConnection,
            mariaDBConnection.MariaDBConnection,
            mssqlConnection.MssqlConnection,
            mysqlConnection.MysqlConnection,
            sqliteConnection.SQLiteConnection,
            oracleConnection.OracleConnection,
            postgresConnection.PostgresConnection,
            timescaleConnection.TimescaleConnection,
            prestoConnection.PrestoConnection,
            redshiftConnection.RedshiftConnection,
            salesforceConnection.SalesforceConnection,
            singleStoreConnection.SingleStoreConnection,
            snowflakeConnection.SnowflakeConnection,
            trinoConnection.TrinoConnection,
            verticaConnection.VerticaConnection,
            pinotDBConnection.PinotDBConnection,
            datalakeConnection.DatalakeConnection,
            domoDatabaseConnection.DomoDatabaseConnection,
            customDatabaseConnection.CustomDatabaseConnection,
            sapHanaConnection.SapHanaConnection,
            mongoDBConnection.MongoDBConnection,
            cassandraConnection.CassandraConnection,
            couchbaseConnection.CouchbaseConnection,
            greenplumConnection.GreenplumConnection,
            dorisConnection.DorisConnection,
            unityCatalogConnection.UnityCatalogConnection,
            sasConnection.SASConnection,
            icebergConnection.IcebergConnection,
            teradataConnection.TeradataConnection,
            sapErpConnection.SapErpConnection,
            synapseConnection.SynapseConnection,
            exasolConnection.ExasolConnection,
            cockroachConnection.CockroachConnection,
            ssasConnection.SSASConnection,
            epicConnection.EpicConnection,
            serviceNowConnection.ServiceNowConnection,
        ]
    ] = None


class DatabaseService(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Annotated[
        basic.Uuid,
        Field(description='Unique identifier of this database service instance.'),
    ]
    name: Annotated[
        basic.EntityName,
        Field(description='Name that identifies this database service.'),
    ]
    fullyQualifiedName: Annotated[
        Optional[basic.FullyQualifiedEntityName],
        Field(None, description='FullyQualifiedName same as `name`.'),
    ]
    displayName: Annotated[
        Optional[str],
        Field(None, description='Display Name that identifies this database service.'),
    ]
    serviceType: Annotated[
        DatabaseServiceType,
        Field(
            description='Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...'
        ),
    ]
    description: Annotated[
        Optional[basic.Markdown],
        Field(None, description='Description of a database service instance.'),
    ]
    connection: Optional[DatabaseConnection] = None
    pipelines: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(
            None,
            description='References to pipelines deployed for this database service to extract metadata, usage, lineage etc..',
        ),
    ]
    testConnectionResult: Annotated[
        Optional[testConnectionResult.TestConnectionResult],
        Field(None, description='Last test connection results for this service'),
    ]
    tags: Annotated[
        Optional[List[tagLabel.TagLabel]],
        Field([], description='Tags for this Database Service.'),
    ]
    version: Annotated[
        Optional[entityHistory.EntityVersion],
        Field(None, description='Metadata version of the entity.'),
    ]
    updatedAt: Annotated[
        Optional[basic.Timestamp],
        Field(
            None,
            description='Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.',
        ),
    ]
    updatedBy: Annotated[
        Optional[str], Field(None, description='User who made the update.')
    ]
    owners: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='Owners of this database service.'),
    ]
    href: Annotated[
        Optional[basic.Href],
        Field(
            None,
            description='Link to the resource corresponding to this database service.',
        ),
    ]
    followers: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='Followers of this entity.'),
    ]
    changeDescription: Annotated[
        Optional[entityHistory.ChangeDescription],
        Field(None, description='Change that lead to this version of the entity.'),
    ]
    incrementalChangeDescription: Annotated[
        Optional[entityHistory.ChangeDescription],
        Field(None, description='Change that lead to this version of the entity.'),
    ]
    deleted: Annotated[
        Optional[bool],
        Field(
            False, description='When `true` indicates the entity has been soft deleted.'
        ),
    ]
    dataProducts: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='List of data products this entity is part of.'),
    ]
    domains: Annotated[
        Optional[entityReferenceList.EntityReferenceList],
        Field(None, description='Domains the Database service belongs to.'),
    ]
    ingestionRunner: Annotated[
        Optional[entityReference.EntityReference],
        Field(
            None,
            description='The ingestion agent responsible for executing the ingestion pipeline.',
        ),
    ]
