# generated by datamodel-codegen:
#   filename:  entity/services/connections/pipeline/snowplowConnection.json
#   timestamp: 2025-10-22T04:03:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import AnyUrl, ConfigDict, Field
from typing_extensions import Annotated

from metadata.ingestion.models.custom_pydantic import BaseModel, CustomSecretStr

from .....type import filterPattern
from .. import connectionBasicType


class CloudProvider(Enum):
    AWS = 'AWS'
    GCP = 'GCP'
    Azure = 'Azure'


class SnowplowType(Enum):
    Snowplow = 'Snowplow'


class SnowplowDeployment(Enum):
    BDP = 'BDP'
    Community = 'Community'


class SnowplowConnection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Annotated[
        SnowplowType, Field(description='Service Type', title='Service Type')
    ]
    deployment: Annotated[
        SnowplowDeployment,
        Field(
            description='Snowplow deployment type (BDP for managed or Community for self-hosted)',
            title='Deployment Type',
        ),
    ]
    consoleUrl: Annotated[
        Optional[AnyUrl],
        Field(
            None,
            description='Snowplow Console URL for BDP deployment',
            title='Console URL',
        ),
    ]
    apiKey: Annotated[
        Optional[CustomSecretStr],
        Field(None, description='API Key for Snowplow Console API', title='API Key'),
    ]
    organizationId: Annotated[
        Optional[str],
        Field(
            None, description='Snowplow BDP Organization ID', title='Organization ID'
        ),
    ]
    configPath: Annotated[
        Optional[str],
        Field(
            None,
            description='Path to pipeline configuration files for Community deployment',
            title='Configuration Path',
        ),
    ]
    cloudProvider: Annotated[
        Optional[CloudProvider],
        Field(
            CloudProvider.AWS,
            description='Cloud provider where Snowplow is deployed',
            title='Cloud Provider',
        ),
    ]
    pipelineFilterPattern: Annotated[
        Optional[filterPattern.FilterPattern],
        Field(
            None,
            description='Regex exclude pipelines.',
            title='Pipeline Filter Pattern',
        ),
    ]
    supportsMetadataExtraction: Annotated[
        Optional[connectionBasicType.SupportsMetadataExtraction],
        Field(None, title='Supports Metadata Extraction'),
    ]
