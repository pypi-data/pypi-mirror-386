create or replace procedure PLUGIN.RETRIEVE_SECRETS(OAUTH_SECRET_NAME VARCHAR,OTHER_SECRETS_NAME VARCHAR)
returns object
language python
RUNTIME_VERSION = '3.10'
PACKAGES = ({{packages}})
IMPORTS = ('/app.zip')
HANDLER = 'run'
COMMENT = $$
Used by plugin developers to retrieve secrets from the plugin as part of development sessions.
$$
execute as owner
as
$$
from logging import getLogger
from omnata_plugin_runtime.logging import log_exception
from pydantic_core import to_jsonable_python
import json
logger = getLogger(__name__)
def run(session,oauth_secrets_name,other_secrets_name):
   try:
      logger.info('plugin entrypoint wrapper')
      from omnata_plugin_runtime.configuration import get_secrets
      result = get_secrets(oauth_secrets_name,other_secrets_name)
      return {
         "success": True,
         "data": json.loads(json.dumps(to_jsonable_python(result)))
      }
   except Exception as exception:
      log_exception(exception,logger)
      return {
         "success": False,
         "error": str(exception)
      }
$$
;
   
-- we don't grant this to OMNATA_MANAGEMENT because we'd rather the sync engine couldn't read secrets back once created

-- we didn't end up doing this because developers should generally be running in debug mode anyway
--grant usage on procedure PLUGIN.RETRIEVE_SECRETS(VARCHAR,VARCHAR)
--to application role PLUGIN_DEVELOPER;
