create or replace procedure PLUGIN.UPDATE_GENERIC_SECRET_OBJECT(SECRET_NAME VARCHAR,SECRET_CONTENTS VARCHAR,MERGE_WITH_OTHER_SECRET VARCHAR)
returns object
language python
RUNTIME_VERSION = '3.10'
PACKAGES = ({{packages}})
IMPORTS = ('/app.zip')
HANDLER = 'run'
COMMENT = $$
Updates the contents of a generic secrets object, optionally using an existing secret as a starting point.
$$
execute as owner
as
$$
from logging import getLogger
from omnata_plugin_runtime.logging import log_exception
from pydantic_core import to_jsonable_python
import json
logger = getLogger(__name__)
def run(session,secret_name,secret_contents,merge_with_other_secret):
   try:
      logger.info('plugin entrypoint wrapper')
      from omnata_plugin_runtime.configuration import get_secrets
      from omnata_plugin_runtime.plugin_entrypoints import normalise_nulls
      merge_with_other_secret = normalise_nulls(merge_with_other_secret)
      secret_contents_parsed = json.loads(secret_contents)
      if merge_with_other_secret is not None:
         existing_secrets = get_secrets(None,merge_with_other_secret)
         secret_contents_parsed = {
            **existing_secrets,
            **secret_contents_parsed
         }
      secret_contents_string = json.dumps(to_jsonable_python(secret_contents_parsed))
      two_dollars = "$" + "$"
      session.sql(f"""alter secret {secret_name} set SECRET_STRING = {two_dollars}{secret_contents_string}{two_dollars}""",[]).collect()
      return {
         "success": True,
         "data": None
      }
   except Exception as exception:
      log_exception(exception,logger)
      return {
         "success": False,
         "error": str(exception)
      }
$$
;

grant usage on procedure PLUGIN.UPDATE_GENERIC_SECRET_OBJECT(VARCHAR,VARCHAR,VARCHAR)
to application role OMNATA_MANAGEMENT;