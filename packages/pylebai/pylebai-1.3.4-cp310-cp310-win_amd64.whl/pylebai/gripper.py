# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gripper
else:
    import _gripper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Gripper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, port_name):
        _gripper.Gripper_swiginit(self, _gripper.new_Gripper(port_name))
    __swig_destroy__ = _gripper.delete_Gripper

    def SetPosition(self, position):
        return _gripper.Gripper_SetPosition(self, position)

    def GetCurrentPosition(self):
        return _gripper.Gripper_GetCurrentPosition(self)

    def SetForce(self, force):
        return _gripper.Gripper_SetForce(self, force)

    def GetCurrentForce(self):
        return _gripper.Gripper_GetCurrentForce(self)

    def SetVelocity(self, velocity, persistent):
        return _gripper.Gripper_SetVelocity(self, velocity, persistent)

    def GetCurrentVelocity(self, persistent):
        return _gripper.Gripper_GetCurrentVelocity(self, persistent)

    def DoCalibration(self):
        return _gripper.Gripper_DoCalibration(self)

    def IsCalibrated(self):
        return _gripper.Gripper_IsCalibrated(self)

    def TurnOnAutoCalibration(self):
        return _gripper.Gripper_TurnOnAutoCalibration(self)

    def TurnOffAutoCalibration(self):
        return _gripper.Gripper_TurnOffAutoCalibration(self)

    def __repr__(self):
        return _gripper.Gripper___repr__(self)

    def __str__(self):
        return _gripper.Gripper___str__(self)

# Register Gripper in _gripper:
_gripper.Gripper_swigregister(Gripper)

