# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _l_master
else:
    import _l_master

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _l_master.delete_SwigPyIterator

    def value(self):
        return _l_master.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _l_master.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _l_master.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _l_master.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _l_master.SwigPyIterator_equal(self, x)

    def copy(self):
        return _l_master.SwigPyIterator_copy(self)

    def next(self):
        return _l_master.SwigPyIterator_next(self)

    def __next__(self):
        return _l_master.SwigPyIterator___next__(self)

    def previous(self):
        return _l_master.SwigPyIterator_previous(self)

    def advance(self, n):
        return _l_master.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _l_master.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _l_master.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _l_master.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _l_master.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _l_master.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _l_master.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _l_master:
_l_master.SwigPyIterator_swigregister(SwigPyIterator)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _l_master.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _l_master.DoubleVector___bool__(self)

    def __len__(self):
        return _l_master.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _l_master.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _l_master.DoubleVector_pop(self)

    def append(self, x):
        return _l_master.DoubleVector_append(self, x)

    def empty(self):
        return _l_master.DoubleVector_empty(self)

    def size(self):
        return _l_master.DoubleVector_size(self)

    def swap(self, v):
        return _l_master.DoubleVector_swap(self, v)

    def begin(self):
        return _l_master.DoubleVector_begin(self)

    def end(self):
        return _l_master.DoubleVector_end(self)

    def rbegin(self):
        return _l_master.DoubleVector_rbegin(self)

    def rend(self):
        return _l_master.DoubleVector_rend(self)

    def clear(self):
        return _l_master.DoubleVector_clear(self)

    def get_allocator(self):
        return _l_master.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _l_master.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _l_master.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _l_master.DoubleVector_swiginit(self, _l_master.new_DoubleVector(*args))

    def push_back(self, x):
        return _l_master.DoubleVector_push_back(self, x)

    def front(self):
        return _l_master.DoubleVector_front(self)

    def back(self):
        return _l_master.DoubleVector_back(self)

    def assign(self, n, x):
        return _l_master.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _l_master.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _l_master.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _l_master.DoubleVector_reserve(self, n)

    def capacity(self):
        return _l_master.DoubleVector_capacity(self)
    __swig_destroy__ = _l_master.delete_DoubleVector

# Register DoubleVector in _l_master:
_l_master.DoubleVector_swigregister(DoubleVector)
class CartArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        return _l_master.CartArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.CartArray___nonzero__(self)

    def __bool__(self):
        return _l_master.CartArray___bool__(self)

    def __len__(self):
        return _l_master.CartArray___len__(self)

    def __getslice__(self, i, j):
        return _l_master.CartArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.CartArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.CartArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.CartArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.CartArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.CartArray___setitem__(self, *args)

    def __init__(self, *args):
        _l_master.CartArray_swiginit(self, _l_master.new_CartArray(*args))

    def empty(self):
        return _l_master.CartArray_empty(self)

    def size(self):
        return _l_master.CartArray_size(self)

    def swap(self, v):
        return _l_master.CartArray_swap(self, v)

    def begin(self):
        return _l_master.CartArray_begin(self)

    def end(self):
        return _l_master.CartArray_end(self)

    def rbegin(self):
        return _l_master.CartArray_rbegin(self)

    def rend(self):
        return _l_master.CartArray_rend(self)

    def front(self):
        return _l_master.CartArray_front(self)

    def back(self):
        return _l_master.CartArray_back(self)

    def fill(self, u):
        return _l_master.CartArray_fill(self, u)

    def __repr__(self):
        return _l_master.CartArray___repr__(self)
    __swig_destroy__ = _l_master.delete_CartArray

# Register CartArray in _l_master:
_l_master.CartArray_swigregister(CartArray)
class CartesianPose(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        return _l_master.CartesianPose_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.CartesianPose___nonzero__(self)

    def __bool__(self):
        return _l_master.CartesianPose___bool__(self)

    def __len__(self):
        return _l_master.CartesianPose___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _l_master.CartesianPose___getitem__(self, key)

    def __delitem__(self, key):
        return _l_master.CartesianPose___delitem__(self, key)

    def has_key(self, key):
        return _l_master.CartesianPose_has_key(self, key)

    def keys(self):
        return _l_master.CartesianPose_keys(self)

    def values(self):
        return _l_master.CartesianPose_values(self)

    def items(self):
        return _l_master.CartesianPose_items(self)

    def __contains__(self, key):
        return _l_master.CartesianPose___contains__(self, key)

    def key_iterator(self):
        return _l_master.CartesianPose_key_iterator(self)

    def value_iterator(self):
        return _l_master.CartesianPose_value_iterator(self)

    def __setitem__(self, *args):
        return _l_master.CartesianPose___setitem__(self, *args)

    def asdict(self):
        return _l_master.CartesianPose_asdict(self)

    def __init__(self, *args):
        _l_master.CartesianPose_swiginit(self, _l_master.new_CartesianPose(*args))

    def empty(self):
        return _l_master.CartesianPose_empty(self)

    def size(self):
        return _l_master.CartesianPose_size(self)

    def swap(self, v):
        return _l_master.CartesianPose_swap(self, v)

    def begin(self):
        return _l_master.CartesianPose_begin(self)

    def end(self):
        return _l_master.CartesianPose_end(self)

    def rbegin(self):
        return _l_master.CartesianPose_rbegin(self)

    def rend(self):
        return _l_master.CartesianPose_rend(self)

    def clear(self):
        return _l_master.CartesianPose_clear(self)

    def get_allocator(self):
        return _l_master.CartesianPose_get_allocator(self)

    def count(self, x):
        return _l_master.CartesianPose_count(self, x)

    def erase(self, *args):
        return _l_master.CartesianPose_erase(self, *args)

    def find(self, x):
        return _l_master.CartesianPose_find(self, x)

    def lower_bound(self, x):
        return _l_master.CartesianPose_lower_bound(self, x)

    def upper_bound(self, x):
        return _l_master.CartesianPose_upper_bound(self, x)

    def __repr__(self):
        return _l_master.CartesianPose___repr__(self)
    __swig_destroy__ = _l_master.delete_CartesianPose

# Register CartesianPose in _l_master:
_l_master.CartesianPose_swigregister(CartesianPose)
class UintVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _l_master.UintVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.UintVector___nonzero__(self)

    def __bool__(self):
        return _l_master.UintVector___bool__(self)

    def __len__(self):
        return _l_master.UintVector___len__(self)

    def __getslice__(self, i, j):
        return _l_master.UintVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.UintVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.UintVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.UintVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.UintVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.UintVector___setitem__(self, *args)

    def pop(self):
        return _l_master.UintVector_pop(self)

    def append(self, x):
        return _l_master.UintVector_append(self, x)

    def empty(self):
        return _l_master.UintVector_empty(self)

    def size(self):
        return _l_master.UintVector_size(self)

    def swap(self, v):
        return _l_master.UintVector_swap(self, v)

    def begin(self):
        return _l_master.UintVector_begin(self)

    def end(self):
        return _l_master.UintVector_end(self)

    def rbegin(self):
        return _l_master.UintVector_rbegin(self)

    def rend(self):
        return _l_master.UintVector_rend(self)

    def clear(self):
        return _l_master.UintVector_clear(self)

    def get_allocator(self):
        return _l_master.UintVector_get_allocator(self)

    def pop_back(self):
        return _l_master.UintVector_pop_back(self)

    def erase(self, *args):
        return _l_master.UintVector_erase(self, *args)

    def __init__(self, *args):
        _l_master.UintVector_swiginit(self, _l_master.new_UintVector(*args))

    def push_back(self, x):
        return _l_master.UintVector_push_back(self, x)

    def front(self):
        return _l_master.UintVector_front(self)

    def back(self):
        return _l_master.UintVector_back(self)

    def assign(self, n, x):
        return _l_master.UintVector_assign(self, n, x)

    def resize(self, *args):
        return _l_master.UintVector_resize(self, *args)

    def insert(self, *args):
        return _l_master.UintVector_insert(self, *args)

    def reserve(self, n):
        return _l_master.UintVector_reserve(self, n)

    def capacity(self):
        return _l_master.UintVector_capacity(self)
    __swig_destroy__ = _l_master.delete_UintVector

# Register UintVector in _l_master:
_l_master.UintVector_swigregister(UintVector)
class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _l_master.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.StrVector___nonzero__(self)

    def __bool__(self):
        return _l_master.StrVector___bool__(self)

    def __len__(self):
        return _l_master.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _l_master.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.StrVector___setitem__(self, *args)

    def pop(self):
        return _l_master.StrVector_pop(self)

    def append(self, x):
        return _l_master.StrVector_append(self, x)

    def empty(self):
        return _l_master.StrVector_empty(self)

    def size(self):
        return _l_master.StrVector_size(self)

    def swap(self, v):
        return _l_master.StrVector_swap(self, v)

    def begin(self):
        return _l_master.StrVector_begin(self)

    def end(self):
        return _l_master.StrVector_end(self)

    def rbegin(self):
        return _l_master.StrVector_rbegin(self)

    def rend(self):
        return _l_master.StrVector_rend(self)

    def clear(self):
        return _l_master.StrVector_clear(self)

    def get_allocator(self):
        return _l_master.StrVector_get_allocator(self)

    def pop_back(self):
        return _l_master.StrVector_pop_back(self)

    def erase(self, *args):
        return _l_master.StrVector_erase(self, *args)

    def __init__(self, *args):
        _l_master.StrVector_swiginit(self, _l_master.new_StrVector(*args))

    def push_back(self, x):
        return _l_master.StrVector_push_back(self, x)

    def front(self):
        return _l_master.StrVector_front(self)

    def back(self):
        return _l_master.StrVector_back(self)

    def assign(self, n, x):
        return _l_master.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _l_master.StrVector_resize(self, *args)

    def insert(self, *args):
        return _l_master.StrVector_insert(self, *args)

    def reserve(self, n):
        return _l_master.StrVector_reserve(self, n)

    def capacity(self):
        return _l_master.StrVector_capacity(self)
    __swig_destroy__ = _l_master.delete_StrVector

# Register StrVector in _l_master:
_l_master.StrVector_swigregister(StrVector)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _l_master.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.IntVector___nonzero__(self)

    def __bool__(self):
        return _l_master.IntVector___bool__(self)

    def __len__(self):
        return _l_master.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _l_master.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.IntVector___setitem__(self, *args)

    def pop(self):
        return _l_master.IntVector_pop(self)

    def append(self, x):
        return _l_master.IntVector_append(self, x)

    def empty(self):
        return _l_master.IntVector_empty(self)

    def size(self):
        return _l_master.IntVector_size(self)

    def swap(self, v):
        return _l_master.IntVector_swap(self, v)

    def begin(self):
        return _l_master.IntVector_begin(self)

    def end(self):
        return _l_master.IntVector_end(self)

    def rbegin(self):
        return _l_master.IntVector_rbegin(self)

    def rend(self):
        return _l_master.IntVector_rend(self)

    def clear(self):
        return _l_master.IntVector_clear(self)

    def get_allocator(self):
        return _l_master.IntVector_get_allocator(self)

    def pop_back(self):
        return _l_master.IntVector_pop_back(self)

    def erase(self, *args):
        return _l_master.IntVector_erase(self, *args)

    def __init__(self, *args):
        _l_master.IntVector_swiginit(self, _l_master.new_IntVector(*args))

    def push_back(self, x):
        return _l_master.IntVector_push_back(self, x)

    def front(self):
        return _l_master.IntVector_front(self)

    def back(self):
        return _l_master.IntVector_back(self)

    def assign(self, n, x):
        return _l_master.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _l_master.IntVector_resize(self, *args)

    def insert(self, *args):
        return _l_master.IntVector_insert(self, *args)

    def reserve(self, n):
        return _l_master.IntVector_reserve(self, n)

    def capacity(self):
        return _l_master.IntVector_capacity(self)
    __swig_destroy__ = _l_master.delete_IntVector

# Register IntVector in _l_master:
_l_master.IntVector_swigregister(IntVector)
class BVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _l_master.BVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.BVector___nonzero__(self)

    def __bool__(self):
        return _l_master.BVector___bool__(self)

    def __len__(self):
        return _l_master.BVector___len__(self)

    def __getslice__(self, i, j):
        return _l_master.BVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.BVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.BVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.BVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.BVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.BVector___setitem__(self, *args)

    def pop(self):
        return _l_master.BVector_pop(self)

    def append(self, x):
        return _l_master.BVector_append(self, x)

    def empty(self):
        return _l_master.BVector_empty(self)

    def size(self):
        return _l_master.BVector_size(self)

    def swap(self, v):
        return _l_master.BVector_swap(self, v)

    def begin(self):
        return _l_master.BVector_begin(self)

    def end(self):
        return _l_master.BVector_end(self)

    def rbegin(self):
        return _l_master.BVector_rbegin(self)

    def rend(self):
        return _l_master.BVector_rend(self)

    def clear(self):
        return _l_master.BVector_clear(self)

    def get_allocator(self):
        return _l_master.BVector_get_allocator(self)

    def pop_back(self):
        return _l_master.BVector_pop_back(self)

    def erase(self, *args):
        return _l_master.BVector_erase(self, *args)

    def __init__(self, *args):
        _l_master.BVector_swiginit(self, _l_master.new_BVector(*args))

    def push_back(self, x):
        return _l_master.BVector_push_back(self, x)

    def front(self):
        return _l_master.BVector_front(self)

    def back(self):
        return _l_master.BVector_back(self)

    def assign(self, n, x):
        return _l_master.BVector_assign(self, n, x)

    def resize(self, *args):
        return _l_master.BVector_resize(self, *args)

    def insert(self, *args):
        return _l_master.BVector_insert(self, *args)

    def reserve(self, n):
        return _l_master.BVector_reserve(self, n)

    def capacity(self):
        return _l_master.BVector_capacity(self)
    __swig_destroy__ = _l_master.delete_BVector

# Register BVector in _l_master:
_l_master.BVector_swigregister(BVector)
class BSVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _l_master.BSVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _l_master.BSVector___nonzero__(self)

    def __bool__(self):
        return _l_master.BSVector___bool__(self)

    def __len__(self):
        return _l_master.BSVector___len__(self)

    def __getslice__(self, i, j):
        return _l_master.BSVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _l_master.BSVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _l_master.BSVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _l_master.BSVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _l_master.BSVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _l_master.BSVector___setitem__(self, *args)

    def pop(self):
        return _l_master.BSVector_pop(self)

    def append(self, x):
        return _l_master.BSVector_append(self, x)

    def empty(self):
        return _l_master.BSVector_empty(self)

    def size(self):
        return _l_master.BSVector_size(self)

    def swap(self, v):
        return _l_master.BSVector_swap(self, v)

    def begin(self):
        return _l_master.BSVector_begin(self)

    def end(self):
        return _l_master.BSVector_end(self)

    def rbegin(self):
        return _l_master.BSVector_rbegin(self)

    def rend(self):
        return _l_master.BSVector_rend(self)

    def clear(self):
        return _l_master.BSVector_clear(self)

    def get_allocator(self):
        return _l_master.BSVector_get_allocator(self)

    def pop_back(self):
        return _l_master.BSVector_pop_back(self)

    def erase(self, *args):
        return _l_master.BSVector_erase(self, *args)

    def __init__(self, *args):
        _l_master.BSVector_swiginit(self, _l_master.new_BSVector(*args))

    def push_back(self, x):
        return _l_master.BSVector_push_back(self, x)

    def front(self):
        return _l_master.BSVector_front(self)

    def back(self):
        return _l_master.BSVector_back(self)

    def assign(self, n, x):
        return _l_master.BSVector_assign(self, n, x)

    def resize(self, *args):
        return _l_master.BSVector_resize(self, *args)

    def insert(self, *args):
        return _l_master.BSVector_insert(self, *args)

    def reserve(self, n):
        return _l_master.BSVector_reserve(self, n)

    def capacity(self):
        return _l_master.BSVector_capacity(self)
    __swig_destroy__ = _l_master.delete_BSVector

# Register BSVector in _l_master:
_l_master.BSVector_swigregister(BSVector)
class TupleDDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, arg2, arg3, v1):
        _l_master.TupleDDB_swiginit(self, _l_master.new_TupleDDB(arg2, arg3, v1))

    def get0(self):
        return _l_master.TupleDDB_get0(self)

    def get1(self):
        return _l_master.TupleDDB_get1(self)

    def get2(self):
        return _l_master.TupleDDB_get2(self)

    def set0(self, val):
        return _l_master.TupleDDB_set0(self, val)

    def set1(self, val):
        return _l_master.TupleDDB_set1(self, val)

    def set2(self, val):
        return _l_master.TupleDDB_set2(self, val)

    def __len__(self):
        return _l_master.TupleDDB___len__(self)

    #[7]
    def __getitem__(self, n):
        if n >= len(self): raise IndexError()
        return getattr(self, 'get%d' % n)()
    def __setitem__(self, n, val):
        if n >= len(self): raise IndexError()
        getattr(self, 'set%d' % n)(val)


    def __repr__(self):
        return _l_master.TupleDDB___repr__(self)
    __swig_destroy__ = _l_master.delete_TupleDDB

# Register TupleDDB in _l_master:
_l_master.TupleDDB_swigregister(TupleDDB)
class TupleIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        _l_master.TupleIntStr_swiginit(self, _l_master.new_TupleIntStr(arg2, arg3))

    def get0(self):
        return _l_master.TupleIntStr_get0(self)

    def get1(self):
        return _l_master.TupleIntStr_get1(self)

    def set0(self, val):
        return _l_master.TupleIntStr_set0(self, val)

    def set1(self, val):
        return _l_master.TupleIntStr_set1(self, val)

    def __len__(self):
        return _l_master.TupleIntStr___len__(self)

    #[7]
    def __getitem__(self, n):
        if n >= len(self): raise IndexError()
        return getattr(self, 'get%d' % n)()
    def __setitem__(self, n, val):
        if n >= len(self): raise IndexError()
        getattr(self, 'set%d' % n)(val)

    __swig_destroy__ = _l_master.delete_TupleIntStr

# Register TupleIntStr in _l_master:
_l_master.TupleIntStr_swigregister(TupleIntStr)
class TupleBS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        _l_master.TupleBS_swiginit(self, _l_master.new_TupleBS(arg2, arg3))

    def get0(self):
        return _l_master.TupleBS_get0(self)

    def get1(self):
        return _l_master.TupleBS_get1(self)

    def set0(self, val):
        return _l_master.TupleBS_set0(self, val)

    def set1(self, val):
        return _l_master.TupleBS_set1(self, val)

    def __len__(self):
        return _l_master.TupleBS___len__(self)

    #[7]
    def __getitem__(self, n):
        if n >= len(self): raise IndexError()
        return getattr(self, 'get%d' % n)()
    def __setitem__(self, n, val):
        if n >= len(self): raise IndexError()
        getattr(self, 'set%d' % n)(val)

    __swig_destroy__ = _l_master.delete_TupleBS

# Register TupleBS in _l_master:
_l_master.TupleBS_swigregister(TupleBS)

def version():
    return _l_master.version()
class KinematicsForwardResp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    pose = property(_l_master.KinematicsForwardResp_pose_get, _l_master.KinematicsForwardResp_pose_set)
    ok = property(_l_master.KinematicsForwardResp_ok_get, _l_master.KinematicsForwardResp_ok_set)

    def __repr__(self):
        return _l_master.KinematicsForwardResp___repr__(self)

    def __init__(self):
        _l_master.KinematicsForwardResp_swiginit(self, _l_master.new_KinematicsForwardResp())
    __swig_destroy__ = _l_master.delete_KinematicsForwardResp

# Register KinematicsForwardResp in _l_master:
_l_master.KinematicsForwardResp_swigregister(KinematicsForwardResp)
class KinematicsInverseResp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    joint_positions = property(_l_master.KinematicsInverseResp_joint_positions_get, _l_master.KinematicsInverseResp_joint_positions_set)
    ok = property(_l_master.KinematicsInverseResp_ok_get, _l_master.KinematicsInverseResp_ok_set)

    def __repr__(self):
        return _l_master.KinematicsInverseResp___repr__(self)

    def __init__(self):
        _l_master.KinematicsInverseResp_swiginit(self, _l_master.new_KinematicsInverseResp())
    __swig_destroy__ = _l_master.delete_KinematicsInverseResp

# Register KinematicsInverseResp in _l_master:
_l_master.KinematicsInverseResp_swigregister(KinematicsInverseResp)
class ClawData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    force = property(_l_master.ClawData_force_get, _l_master.ClawData_force_set)
    amplitude = property(_l_master.ClawData_amplitude_get, _l_master.ClawData_amplitude_set)
    hold_on = property(_l_master.ClawData_hold_on_get, _l_master.ClawData_hold_on_set)

    def __init__(self):
        _l_master.ClawData_swiginit(self, _l_master.new_ClawData())
    __swig_destroy__ = _l_master.delete_ClawData

# Register ClawData in _l_master:
_l_master.ClawData_swigregister(ClawData)
class StorageItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_l_master.StorageItem_key_get, _l_master.StorageItem_key_set)
    value = property(_l_master.StorageItem_value_get, _l_master.StorageItem_value_set)

    def __init__(self):
        _l_master.StorageItem_swiginit(self, _l_master.new_StorageItem())
    __swig_destroy__ = _l_master.delete_StorageItem

# Register StorageItem in _l_master:
_l_master.StorageItem_swigregister(StorageItem)
class PhysicalData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    joint_temperature = property(_l_master.PhysicalData_joint_temperature_get, _l_master.PhysicalData_joint_temperature_set)
    joint_voltage = property(_l_master.PhysicalData_joint_voltage_get, _l_master.PhysicalData_joint_voltage_set)
    flange_voltage = property(_l_master.PhysicalData_flange_voltage_get, _l_master.PhysicalData_flange_voltage_set)

    def __init__(self):
        _l_master.PhysicalData_swiginit(self, _l_master.new_PhysicalData())
    __swig_destroy__ = _l_master.delete_PhysicalData

# Register PhysicalData in _l_master:
_l_master.PhysicalData_swigregister(PhysicalData)
class JointMotionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    actual_joint_pose = property(_l_master.JointMotionData_actual_joint_pose_get, _l_master.JointMotionData_actual_joint_pose_set)
    actual_joint_speed = property(_l_master.JointMotionData_actual_joint_speed_get, _l_master.JointMotionData_actual_joint_speed_set)
    actual_joint_acc = property(_l_master.JointMotionData_actual_joint_acc_get, _l_master.JointMotionData_actual_joint_acc_set)
    actual_joint_torque = property(_l_master.JointMotionData_actual_joint_torque_get, _l_master.JointMotionData_actual_joint_torque_set)
    target_joint_pose = property(_l_master.JointMotionData_target_joint_pose_get, _l_master.JointMotionData_target_joint_pose_set)
    target_joint_speed = property(_l_master.JointMotionData_target_joint_speed_get, _l_master.JointMotionData_target_joint_speed_set)
    target_joint_acc = property(_l_master.JointMotionData_target_joint_acc_get, _l_master.JointMotionData_target_joint_acc_set)
    target_joint_torque = property(_l_master.JointMotionData_target_joint_torque_get, _l_master.JointMotionData_target_joint_torque_set)
    actual_tcp_pose = property(_l_master.JointMotionData_actual_tcp_pose_get, _l_master.JointMotionData_actual_tcp_pose_set)
    target_tcp_pose = property(_l_master.JointMotionData_target_tcp_pose_get, _l_master.JointMotionData_target_tcp_pose_set)
    actual_flange_pose = property(_l_master.JointMotionData_actual_flange_pose_get, _l_master.JointMotionData_actual_flange_pose_set)

    def __init__(self):
        _l_master.JointMotionData_swiginit(self, _l_master.new_JointMotionData())
    __swig_destroy__ = _l_master.delete_JointMotionData

# Register JointMotionData in _l_master:
_l_master.JointMotionData_swigregister(JointMotionData)
class Robot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ip, simulator=False):
        _l_master.Robot_swiginit(self, _l_master.new_Robot(ip, simulator))
    __swig_destroy__ = _l_master.delete_Robot

    def call(self, method, params):
        return _l_master.Robot_call(self, method, params)

    def is_network_connected(self):
        return _l_master.Robot_is_network_connected(self)

    def start_sys(self):
        return _l_master.Robot_start_sys(self)

    def stop_sys(self):
        return _l_master.Robot_stop_sys(self)

    def powerdown(self):
        return _l_master.Robot_powerdown(self)

    def stop(self):
        return _l_master.Robot_stop(self)

    def estop(self):
        return _l_master.Robot_estop(self)

    def teach_mode(self):
        return _l_master.Robot_teach_mode(self)

    def end_teach_mode(self):
        return _l_master.Robot_end_teach_mode(self)

    def pause(self):
        return _l_master.Robot_pause(self)

    def resume(self):
        return _l_master.Robot_resume(self)

    def reboot(self):
        return _l_master.Robot_reboot(self)

    def movej(self, *args):
        return _l_master.Robot_movej(self, *args)

    def movel(self, *args):
        return _l_master.Robot_movel(self, *args)

    def movec(self, *args):
        return _l_master.Robot_movec(self, *args)

    def speedj(self, a, v, t=0.0):
        return _l_master.Robot_speedj(self, a, v, t)

    def speedl(self, *args):
        return _l_master.Robot_speedl(self, *args)

    def towardj(self, joint_positions, a, v, t, r):
        return _l_master.Robot_towardj(self, joint_positions, a, v, t, r)

    def move_pvat(self, p, v, a, t):
        return _l_master.Robot_move_pvat(self, p, v, a, t)

    def wait_move(self, *args):
        return _l_master.Robot_wait_move(self, *args)

    def get_running_motion(self):
        return _l_master.Robot_get_running_motion(self)

    def get_motion_state(self, id):
        return _l_master.Robot_get_motion_state(self, id)

    def stop_move(self):
        return _l_master.Robot_stop_move(self)

    def get_robot_state(self):
        return _l_master.Robot_get_robot_state(self)

    def get_estop_reason(self):
        return _l_master.Robot_get_estop_reason(self)

    def get_phy_data(self):
        return _l_master.Robot_get_phy_data(self)

    def get_kin_data(self):
        return _l_master.Robot_get_kin_data(self)

    def is_disconnected(self):
        return _l_master.Robot_is_disconnected(self)

    def is_down(self):
        return _l_master.Robot_is_down(self)

    def get_actual_joint_positions(self):
        return _l_master.Robot_get_actual_joint_positions(self)

    def get_target_joint_positions(self):
        return _l_master.Robot_get_target_joint_positions(self)

    def get_actual_joint_speed(self):
        return _l_master.Robot_get_actual_joint_speed(self)

    def get_target_joint_speed(self):
        return _l_master.Robot_get_target_joint_speed(self)

    def get_actual_tcp_pose(self):
        return _l_master.Robot_get_actual_tcp_pose(self)

    def get_target_tcp_pose(self):
        return _l_master.Robot_get_target_tcp_pose(self)

    def get_joint_temp(self, joint_index):
        return _l_master.Robot_get_joint_temp(self, joint_index)

    def get_actual_joint_torques(self):
        return _l_master.Robot_get_actual_joint_torques(self)

    def get_target_joint_torques(self):
        return _l_master.Robot_get_target_joint_torques(self)

    def set_do(self, device, pin, value):
        return _l_master.Robot_set_do(self, device, pin, value)

    def get_do(self, device, pin):
        return _l_master.Robot_get_do(self, device, pin)

    def get_dos(self, device, pin, num):
        return _l_master.Robot_get_dos(self, device, pin, num)

    def get_di(self, device, pin):
        return _l_master.Robot_get_di(self, device, pin)

    def get_dis(self, device, pin, num):
        return _l_master.Robot_get_dis(self, device, pin, num)

    def set_ao(self, device, pin, value):
        return _l_master.Robot_set_ao(self, device, pin, value)

    def get_ao(self, device, pin):
        return _l_master.Robot_get_ao(self, device, pin)

    def get_aos(self, device, pin, num):
        return _l_master.Robot_get_aos(self, device, pin, num)

    def get_ai(self, device, pin):
        return _l_master.Robot_get_ai(self, device, pin)

    def get_ais(self, device, pin, num):
        return _l_master.Robot_get_ais(self, device, pin, num)

    def set_dio_mode(self, device, pin, value):
        return _l_master.Robot_set_dio_mode(self, device, pin, value)

    def get_dios_mode(self, device, pin, count):
        return _l_master.Robot_get_dios_mode(self, device, pin, count)

    def init_claw(self, force_initilization):
        return _l_master.Robot_init_claw(self, force_initilization)

    def set_claw(self, force, amplitude):
        return _l_master.Robot_set_claw(self, force, amplitude)

    def get_claw_data(self):
        return _l_master.Robot_get_claw_data(self)

    def set_led(self, mode, speed, color):
        return _l_master.Robot_set_led(self, mode, speed, color)

    def set_voice(self, voice, volume):
        return _l_master.Robot_set_voice(self, voice, volume)

    def set_fan(self, status):
        return _l_master.Robot_set_fan(self, status)

    def set_signal(self, index, value):
        return _l_master.Robot_set_signal(self, index, value)

    def get_signal(self, index):
        return _l_master.Robot_get_signal(self, index)

    def add_signal(self, index, value):
        return _l_master.Robot_add_signal(self, index, value)

    def start_task(self, *args):
        return _l_master.Robot_start_task(self, *args)

    def get_task_list(self):
        return _l_master.Robot_get_task_list(self)

    def wait_task(self, id):
        return _l_master.Robot_wait_task(self, id)

    def pause_task(self, *args):
        return _l_master.Robot_pause_task(self, *args)

    def resume_task(self, id):
        return _l_master.Robot_resume_task(self, id)

    def cancel_task(self, id):
        return _l_master.Robot_cancel_task(self, id)

    def exec_hook(self, id):
        return _l_master.Robot_exec_hook(self, id)

    def get_task_state(self, *args):
        return _l_master.Robot_get_task_state(self, *args)

    def kinematics_forward(self, joint_positions):
        return _l_master.Robot_kinematics_forward(self, joint_positions)

    def kinematics_inverse(self, *args):
        return _l_master.Robot_kinematics_inverse(self, *args)

    def pose_times(self, a, b):
        return _l_master.Robot_pose_times(self, a, b)

    def pose_inverse(self, _in):
        return _l_master.Robot_pose_inverse(self, _in)

    def save_file(self, dir, name, is_dir, data):
        return _l_master.Robot_save_file(self, dir, name, is_dir, data)

    def rename_file(self, from_dir, from_name, to_dir, to_name):
        return _l_master.Robot_rename_file(self, from_dir, from_name, to_dir, to_name)

    def load_file(self, dir, name):
        return _l_master.Robot_load_file(self, dir, name)

    def load_file_list(self, dir, prefix, suffix):
        return _l_master.Robot_load_file_list(self, dir, prefix, suffix)

    def set_tcp(self, tcp):
        return _l_master.Robot_set_tcp(self, tcp)

    def get_tcp(self):
        return _l_master.Robot_get_tcp(self)

    def set_velocity_factor(self, factor):
        return _l_master.Robot_set_velocity_factor(self, factor)

    def get_velocity_factor(self):
        return _l_master.Robot_get_velocity_factor(self)

    def set_payload(self, mass, cog):
        return _l_master.Robot_set_payload(self, mass, cog)

    def set_payload_mass(self, mass):
        return _l_master.Robot_set_payload_mass(self, mass)

    def set_payload_cog(self, cog):
        return _l_master.Robot_set_payload_cog(self, cog)

    def get_payload(self):
        return _l_master.Robot_get_payload(self)

    def set_gravity(self, gravity):
        return _l_master.Robot_set_gravity(self, gravity)

    def get_gravity(self):
        return _l_master.Robot_get_gravity(self)

    def load_tcp(self, *args):
        return _l_master.Robot_load_tcp(self, *args)

    def write_single_coil(self, device, addr, value):
        return _l_master.Robot_write_single_coil(self, device, addr, value)

    def wirte_multiple_coils(self, device, addr, values):
        return _l_master.Robot_wirte_multiple_coils(self, device, addr, values)

    def read_coils(self, device, addr, num):
        return _l_master.Robot_read_coils(self, device, addr, num)

    def read_discrete_inputs(self, device, addr, num):
        return _l_master.Robot_read_discrete_inputs(self, device, addr, num)

    def write_single_register(self, device, addr, value):
        return _l_master.Robot_write_single_register(self, device, addr, value)

    def write_multiple_registers(self, device, addr, values):
        return _l_master.Robot_write_multiple_registers(self, device, addr, values)

    def read_holding_registers(self, device, addr, num):
        return _l_master.Robot_read_holding_registers(self, device, addr, num)

    def read_input_registers(self, device, addr, num):
        return _l_master.Robot_read_input_registers(self, device, addr, num)

    def set_serial_baud_rate(self, device, baud_rate):
        return _l_master.Robot_set_serial_baud_rate(self, device, baud_rate)

    def set_serial_parity(self, device, parity):
        return _l_master.Robot_set_serial_parity(self, device, parity)

    def set_item(self, item):
        return _l_master.Robot_set_item(self, item)

    def get_item(self, name):
        return _l_master.Robot_get_item(self, name)

    def get_items(self, prefix):
        return _l_master.Robot_get_items(self, prefix)

# Register Robot in _l_master:
_l_master.Robot_swigregister(Robot)
class LuaRobot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ip):
        _l_master.LuaRobot_swiginit(self, _l_master.new_LuaRobot(ip))
    __swig_destroy__ = _l_master.delete_LuaRobot

    def send(self, *args):
        return _l_master.LuaRobot_send(self, *args)

    def call(self, lua_code):
        return _l_master.LuaRobot_call(self, lua_code)

# Register LuaRobot in _l_master:
_l_master.LuaRobot_swigregister(LuaRobot)

