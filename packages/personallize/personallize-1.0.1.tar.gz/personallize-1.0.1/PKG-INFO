Metadata-Version: 2.4
Name: personallize
Version: 1.0.1
Summary: Biblioteca Python com ferramentas essenciais para desenvolvimento de RPA e ML, oferecendo recursos para conex√£o com bancos de dados, logging, ORM e monitoramento de performance.
Project-URL: Homepage, https://github.com/MiguelTenorio42/personallize
Project-URL: Bug Reports, https://github.com/MiguelTenorio42/personallize/issues
Project-URL: Source, https://github.com/MiguelTenorio42/personallize
Project-URL: Documentation, https://github.com/MiguelTenorio42/personallize#readme
Author-email: Miguel Ten√≥rio <deepydev42@gmail.com>
Maintainer-email: Miguel Ten√≥rio <deepydev42@gmail.com>
License: MIT
License-File: LICENSE
Keywords: database,logging,ml,orm,performance,rpa,selenium,webdriver
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Database
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Logging
Requires-Python: >=3.13
Requires-Dist: build>=1.3.0
Requires-Dist: colorama>=0.4.4
Requires-Dist: psutil>=5.8.0
Requires-Dist: psycopg2-binary>=2.9.0
Requires-Dist: pymysql>=1.0.0
Requires-Dist: pyodbc>=4.0.0
Requires-Dist: rich>=12.0.0
Requires-Dist: selenium>=4.0.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: twine>=6.2.0
Requires-Dist: tzdata>=2021.1
Requires-Dist: webdriver-manager>=3.8.0
Provides-Extra: dev
Requires-Dist: mypy>=0.800; extra == 'dev'
Requires-Dist: ruff>=0.1.0; extra == 'dev'
Description-Content-Type: text/markdown

# Personallize

Uma biblioteca Python com ferramentas essenciais para desenvolvimento de RPA (Robotic Process Automation) e/ou ML (Machine Learning), oferecendo recursos para conex√£o com bancos de dados, logging, estrutura√ß√£o de projetos, ORM e monitoramento de performance.

## üìã Requisitos

- Python >= 3.13
- Selenium >= 4.0.0
- SQLAlchemy >= 2.0.0
- Rich >= 12.0.0

## üì¶ Instala√ß√£o

### Com pip

```bash
pip install personallize
```

### Com uv (recomendado)

```bash
uv add personallize
```

### Para desenvolvimento

```bash
# Com pip
pip install personallize[dev]

# Com uv
uv add personallize --optional dev
```

## üöÄ Uso B√°sico

```python
from personallize import Connection, Credentials, LogManager

# Exemplo de uso da conex√£o com banco de dados
credentials = Credentials(
    host='localhost',
    database='exemplo.db',
    username='user',
    password='password'
)
conn = Connection('sqlite', credentials)

# Exemplo de uso do sistema de logging simples
log_manager = LogManager()
logger, exception_decorator = log_manager.get_simple_logger(__name__)
logger.info("Aplica√ß√£o iniciada")

# Exemplo de uso do sistema de logging avan√ßado (complex_log)
from personallize.complex_log import LogManager as ComplexLogManager, LogConfig

# Configura√ß√£o simples (apenas console)
config = LogConfig.simple()
complex_manager = ComplexLogManager(config)
logger, decorator = complex_manager.get_simple_logger("my_app")
logger.info("Sistema iniciado com logging avan√ßado")

# Usando get_logger (com nomea√ß√£o autom√°tica de arquivos por data/hora)
logger, decorator = complex_manager.get_logger("my_app", "custom_logs")
logger.info("Log com estrutura autom√°tica de diret√≥rios")

# Configura√ß√£o para produ√ß√£o (com arquivo e queue)
prod_config = LogConfig.production()
prod_manager = ComplexLogManager(prod_config)
logger, decorator = prod_manager.get_simple_logger("prod_app", "app.log")
logger.info("Sistema em produ√ß√£o")
```

## üöÄ Recursos

### üìä Connection

M√≥dulo flex√≠vel para conex√£o com diversos bancos de dados:

- SQLite
- MySQL
- PostgreSQL
- SQL Server

### üìù Logs

Sistema de logging com duas op√ß√µes:

**Simple Log (`simple_log`):**
- Logging b√°sico e direto
- Ideal para projetos simples

**Complex Log (`complex_log`):**
- Sistema avan√ßado com configura√ß√µes flex√≠veis
- Presets: `simple()`, `development()`, `production()`
- Suporte a queue para logging ass√≠ncrono
- Gerar logs em arquivo
- Personaliza√ß√£o completa de formatos e n√≠veis de log
- Decorators para captura de exce√ß√µes
- **M√©todos dispon√≠veis:**
  - `get_simple_logger()`: Logging direto com nome de arquivo espec√≠fico
  - `get_logger()`: Logging com estrutura autom√°tica de diret√≥rios por data/hora
  - `get_logger_with_config()`: Logging com configura√ß√£o expl√≠cita

### üèóÔ∏è Make Structure

Gerador de estruturas de projeto:

- MVC simplificado
- Estrutura para projetos ML
- Estruturas personalizadas via configura√ß√£o

*Nota: Este m√≥dulo est√° temporariamente desabilitado na vers√£o atual.*

### üîÑ ORM

Mapeamento Objeto-Relacional simplificado:

- Cria√ß√£o de entidades a partir de DataFrames
- Mapeamento de tabelas existentes

*Nota: Este m√≥dulo est√° temporariamente desabilitado na vers√£o atual.*

### ‚ö° Performance

Decorators para monitoramento de performance:

- Medi√ß√£o de tempo de execu√ß√£o
- Monitoramento de uso de mem√≥ria RAM

*Nota: Este m√≥dulo est√° temporariamente desabilitado na vers√£o atual.*

### üåê WebDriver

Ferramentas para automa√ß√£o web:

- Gerenciamento customizado do ChromeDriver
- Manipula√ß√£o avan√ßada de WebDriver
- Integra√ß√£o com Selenium

*Nota: Este m√≥dulo est√° temporariamente desabilitado na vers√£o atual.*

## üìã Requisitos

- Python >= 3.13
- Selenium >= 4.0.0
- SQLAlchemy >= 2.0.0
- Rich >= 12.0.0

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.

## üë®‚Äçüíª Autor

**Miguel Ten√≥rio**

- Email: `deepydev42@gmail.com`
- GitHub: [@MiguelTenorio42](https://github.com/MiguelTenorio42)

## ü§ù Contribuindo

Contribui√ß√µes s√£o bem-vindas! Por favor, sinta-se √† vontade para submeter um Pull Request.
