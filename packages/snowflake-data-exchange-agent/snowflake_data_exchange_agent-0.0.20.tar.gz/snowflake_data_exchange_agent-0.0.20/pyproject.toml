[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
    {name = "Snowflake, Inc.", email = "snowflake-python-libraries-dl@snowflake.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: SQL",
    "Topic :: Database",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "snowflake-connector-python>=3.0.0",
    "pyspark",
    "Flask",
    "waitress",
    "sqlparse",
    "psycopg2-binary",
    "requests>=2.28.0",
    "urllib3>=2.5.0",
    "toml",
    "dependency-injector",
    "psutil",
    "boto3",
    "azure-storage-blob",
    "azure-identity",
]
description = "Data exchange agent for migrations and validation"
dynamic = ["version"]
keywords = [
    "Snowflake",
    "analytics",
    "cloud",
    "database",
    "data",
    "data-warehouse",
    "data-analysis",
    "data-science",
    "data-engineering",
    "data-analytics",
    "data-visualization",
    "data-processing",
    "data-management",
]
license = {text = "Apache License, Version 2.0"}
name = "snowflake-data-exchange-agent"
readme = "README.md"
requires-python = ">=3.10,<3.13"

[project.scripts]
data-exchange-agent = "data_exchange_agent.main:main"

[project.optional-dependencies]
all = ["snowflake-data-exchange-agent[development]"]
development = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/snowflakedb/migrations-data-validation/issues"
"Source code" = "https://github.com/snowflakedb/migrations-data-validation/"
homepage = "https://www.snowflake.com/"

[tool.hatch.version]
path = "src/data_exchange_agent/__version__.py"
pattern = '^__version__ = "(?P<version>.*)"'
source = "regex"

[tool.setuptools.packages.find]
include = ["data_exchange_agent"]
where = ["src/"]

[tool.hatch.build]
dev-mode-dirs = ["src"]
directory = "data-exchange-agent"

[[tool.hatch.sources]]
dir = "src/data_exchange_agent"
name = "data-exchange-agent"
type = "package"

[tool.hatch.build.targets.wheel]
directory = "dist"
packages = [
    "src/data_exchange_agent",
]

[tool.hatch.build.targets.sdist]
directory = "dist"
exclude = ["/.github", "/.idea"]
include = [
    "src/**",
    "README.md",
    "LICENSE",
    "tests/**",
    "pyproject.toml",
]

[tool.hatch.envs.default]
features = ["development"]
python = "3.10"

[tool.hatch.envs.test]
features = ["development"]

[tool.hatch.envs.test_all]
template = "test"

[[tool.hatch.envs.test_all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.coverage.paths]
src = ["src"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
]

[tool.hatch.envs.linter.scripts]
check = [
    "echo 'Running linting checks...' && ruff check --config=./ruff.toml --statistics --verbose . --fix || (echo '‚ùå LINTING FAILED: Please fix the above linting issues before proceeding. Use \"ruff check --config=./ruff.toml --fix .\" to auto-fix some issues, or fix them manually.' && exit 1)",
]

[tool.hatch.envs.test.scripts]
setup = [
    "python -m pip install --upgrade pip -q && pip list",
]

unit = [
    'pytest -vvv -m "unit and not slow" --junitxml=tests/outcome/unit-test-results.xml --cov=src/data_exchange_agent --cov-branch --cov-config=.coveragerc --cov-report=term-missing:skip-covered --cov-report=xml:tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.xml --cov-report=term --cov-report=html:tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.html --cov-report=json:tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json tests',
]

fast = [
    'pytest -vvv -m "not integration" --junitxml=tests/outcome/fast-test-results.xml --cov=src/data_exchange_agent --cov-branch --cov-config=.coveragerc --cov-report=term-missing:skip-covered --cov-report=xml:tests/outcome/fast-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.xml --cov-report=term --cov-report=html:tests/outcome/fast-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.html --cov-report=json:tests/outcome/fast-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json tests',
]

all = [
    "pytest -vvv --junitxml=tests/outcome/all-test-results.xml --cov=src/data_exchange_agent --cov-branch --cov-config=.coveragerc --cov-report=term-missing:skip-covered --cov-report=xml:tests/outcome/all-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.xml --cov-report=term --cov-report=html:tests/outcome/all-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.html --cov-report=json:tests/outcome/all-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json tests",
]

check = [
    'python -m pip install --upgrade pip -q && pip list',
    'pytest -vvv -m "unit and not slow" --junitxml=tests/outcome/unit-test-results.xml --cov=src/data_exchange_agent --cov-branch --cov-config=.coveragerc --cov-report=term-missing:skip-covered --cov-report=xml:tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.xml --cov-report=term --cov-report=html:tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.html --cov-report=json:tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json tests',
]

coverage = [
    "pwd && ls -la tests/outcome",
    "python ../.github/scripts/test_get_coverage.py tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json --threshold={env:COVERAGE_THRESHOLD_DATA_EXCHANGE_AGENT:70}",
]

coverage-unit = [
    "python ../.github/scripts/test_get_coverage.py tests/outcome/unit-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json --threshold={env:COVERAGE_THRESHOLD_DATA_EXCHANGE_AGENT:70}",
]

coverage-fast = [
    "python ../.github/scripts/test_get_coverage.py tests/outcome/fast-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json --threshold={env:COVERAGE_THRESHOLD_DATA_EXCHANGE_AGENT:70}",
]

coverage-all = [
    "python ../.github/scripts/test_get_coverage.py tests/outcome/all-coverage-{matrix:python:{env:PYTHON_VERSION:unset}}.json --threshold={env:COVERAGE_THRESHOLD_DATA_EXCHANGE_AGENT:70}",
]

[tool.black]
line-length = 120
target-version = ["py310"]
