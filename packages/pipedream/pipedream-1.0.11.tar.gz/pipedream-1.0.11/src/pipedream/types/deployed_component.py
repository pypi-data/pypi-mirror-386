# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .configurable_prop import ConfigurableProp
from .configured_props import ConfiguredProps


class DeployedComponent(UniversalBaseModel):
    """
    A deployed component instance
    """

    id: str = pydantic.Field()
    """
    The unique ID of the deployed component
    """

    owner_id: str = pydantic.Field()
    """
    The ID of the owner
    """

    component_id: str = pydantic.Field()
    """
    The ID of the component that was deployed
    """

    component_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    The component key (name) that was deployed
    """

    configurable_props: typing.List[ConfigurableProp] = pydantic.Field()
    """
    The configurable properties of the component
    """

    configured_props: ConfiguredProps
    active: bool = pydantic.Field()
    """
    Whether the deployed component is active
    """

    created_at: int = pydantic.Field()
    """
    The timestamp when the component was deployed (epoch milliseconds)
    """

    updated_at: int = pydantic.Field()
    """
    The timestamp when the component was last updated (epoch milliseconds)
    """

    name: str = pydantic.Field()
    """
    The name of the deployed component
    """

    name_slug: str = pydantic.Field()
    """
    The name slug of the deployed component
    """

    callback_observations: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Callback observations for the deployed component
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
