# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class EmittedEvent(UniversalBaseModel):
    """
    An event emitted by a trigger
    """

    e: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    The event's payload
    """

    k: str = pydantic.Field()
    """
    The event's type (set to 'emit' currently)
    """

    ts: int = pydantic.Field()
    """
    The event's timestamp in epoch milliseconds
    """

    id: str = pydantic.Field()
    """
    The event's unique ID
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
