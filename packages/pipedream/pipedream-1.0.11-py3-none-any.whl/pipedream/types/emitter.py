# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .configurable_prop import ConfigurableProp
from .configured_props import ConfiguredProps


class Emitter_DeployedComponent(UniversalBaseModel):
    """
    A component/interface that emits events
    """

    type: typing.Literal["DeployedComponent"] = "DeployedComponent"
    id: str
    owner_id: str
    component_id: str
    component_key: typing.Optional[str] = None
    configurable_props: typing.List[ConfigurableProp]
    configured_props: ConfiguredProps
    active: bool
    created_at: int
    updated_at: int
    name: str
    name_slug: str
    callback_observations: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Emitter_HttpInterface(UniversalBaseModel):
    """
    A component/interface that emits events
    """

    type: typing.Literal["HttpInterface"] = "HttpInterface"
    id: str
    key: str
    endpoint_url: str
    custom_response: bool
    created_at: int
    updated_at: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Emitter_TimerInterface(UniversalBaseModel):
    """
    A component/interface that emits events
    """

    type: typing.Literal["TimerInterface"] = "TimerInterface"
    id: str
    interval_seconds: typing.Optional[float] = None
    cron: typing.Optional[str] = None
    timezone: str
    schedule_changed_at: int
    created_at: int
    updated_at: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Emitter = typing.Union[Emitter_DeployedComponent, Emitter_HttpInterface, Emitter_TimerInterface]
