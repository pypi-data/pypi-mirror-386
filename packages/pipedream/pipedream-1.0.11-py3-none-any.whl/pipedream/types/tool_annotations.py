# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class ToolAnnotations(UniversalBaseModel):
    """
    Optional properties describing component behavior
    """

    destructive_hint: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="destructiveHint")] = (
        pydantic.Field(default=None)
    )
    """
    If true, the component may perform destructive updates to its environment. If false, the component performs only additive updates.
    """

    idempotent_hint: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="idempotentHint")] = (
        pydantic.Field(default=None)
    )
    """
    If true, calling the component repeatedly with the same arguments will have no additional effect on the its environment.
    """

    open_world_hint: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="openWorldHint")] = (
        pydantic.Field(default=None)
    )
    """
    If true, this component may interact with an “open world” of external entities. If false, the component's domain of interaction is closed. For example, the world of a web search component is open, whereas that of a memory component is not.
    """

    read_only_hint: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="readOnlyHint")] = (
        pydantic.Field(default=None)
    )
    """
    If true, the component does not modify its environment.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    A human-readable title for the component.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
