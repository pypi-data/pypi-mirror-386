# coding: utf-8

"""
    Match Predicting Application Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from match_predicting_pub.api.models.import_type import ImportType

class ImportDTO(BaseModel):
    """
    ImportDTO
    """
    import_type: Optional[ImportType] = Field(default=None, alias="importType")
    target_id: Optional[StrictInt] = Field(default=None, alias="targetId")
    target_name: Optional[StrictStr] = Field(default=None, alias="targetName")
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    __properties = ["importType", "targetId", "targetName", "startTime"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImportDTO:
        """Create an instance of ImportDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImportDTO:
        """Create an instance of ImportDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImportDTO.parse_obj(obj)

        _obj = ImportDTO.parse_obj({
            "import_type": obj.get("importType"),
            "target_id": obj.get("targetId"),
            "target_name": obj.get("targetName"),
            "start_time": obj.get("startTime")
        })
        return _obj


