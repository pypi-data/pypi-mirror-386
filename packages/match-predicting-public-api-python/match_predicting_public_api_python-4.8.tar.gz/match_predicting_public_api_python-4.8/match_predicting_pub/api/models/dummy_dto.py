# coding: utf-8

"""
    Match Predicting Application Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from match_predicting_pub.api.models.fcm_topic import FCMTopic
from match_predicting_pub.api.models.import_progress_dto import ImportProgressDTO
from match_predicting_pub.api.models.progress_dto import ProgressDTO
from match_predicting_pub.api.models.training_progress_dto import TrainingProgressDTO
from match_predicting_pub.api.models.user_role_enum import UserRoleEnum

class DummyDTO(BaseModel):
    """
    DummyDTO
    """
    user_role: Optional[UserRoleEnum] = Field(default=None, alias="userRole")
    fcm_topic: Optional[FCMTopic] = Field(default=None, alias="fcmTopic")
    progress: Optional[ProgressDTO] = None
    import_progress: Optional[ImportProgressDTO] = Field(default=None, alias="importProgress")
    training_progress: Optional[TrainingProgressDTO] = Field(default=None, alias="trainingProgress")
    __properties = ["userRole", "fcmTopic", "progress", "importProgress", "trainingProgress"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DummyDTO:
        """Create an instance of DummyDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of import_progress
        if self.import_progress:
            _dict['importProgress'] = self.import_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_progress
        if self.training_progress:
            _dict['trainingProgress'] = self.training_progress.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DummyDTO:
        """Create an instance of DummyDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DummyDTO.parse_obj(obj)

        _obj = DummyDTO.parse_obj({
            "user_role": obj.get("userRole"),
            "fcm_topic": obj.get("fcmTopic"),
            "progress": ProgressDTO.from_dict(obj.get("progress")) if obj.get("progress") is not None else None,
            "import_progress": ImportProgressDTO.from_dict(obj.get("importProgress")) if obj.get("importProgress") is not None else None,
            "training_progress": TrainingProgressDTO.from_dict(obj.get("trainingProgress")) if obj.get("trainingProgress") is not None else None
        })
        return _obj


