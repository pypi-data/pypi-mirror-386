# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details. 

    The version of the OpenAPI document: 0.16.1
    Contact: help@hubmapconsortium.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from hra_api_client.models.spatial_search import SpatialSearch
from typing import Optional, Set
from typing_extensions import Self

class Filter(BaseModel):
    """
    Filter object
    """ # noqa: E501
    sex: Optional[StrictStr] = None
    age_range: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=2, max_length=2)]] = Field(default=None, description="Represents a range of numbers using a minimum and maximum. First element should be less than or equal to the second element. ", alias="ageRange")
    bmi_range: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=2, max_length=2)]] = Field(default=None, description="Represents a range of numbers using a minimum and maximum. First element should be less than or equal to the second element. ", alias="bmiRange")
    consortiums: Optional[List[StrictStr]] = None
    tmc: Optional[List[StrictStr]] = None
    technologies: Optional[List[StrictStr]] = None
    ontology_terms: Optional[List[StrictStr]] = Field(default=None, alias="ontologyTerms")
    cell_type_terms: Optional[List[StrictStr]] = Field(default=None, alias="cellTypeTerms")
    biomarker_terms: Optional[List[StrictStr]] = Field(default=None, alias="biomarkerTerms")
    spatial_searches: Optional[List[SpatialSearch]] = Field(default=None, alias="spatialSearches")
    __properties: ClassVar[List[str]] = ["sex", "ageRange", "bmiRange", "consortiums", "tmc", "technologies", "ontologyTerms", "cellTypeTerms", "biomarkerTerms", "spatialSearches"]

    @field_validator('sex')
    def sex_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Both', 'Male', 'Female']):
            raise ValueError("must be one of enum values ('Both', 'Male', 'Female')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Filter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in spatial_searches (list)
        _items = []
        if self.spatial_searches:
            for _item_spatial_searches in self.spatial_searches:
                if _item_spatial_searches:
                    _items.append(_item_spatial_searches.to_dict())
            _dict['spatialSearches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Filter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sex": obj.get("sex"),
            "ageRange": obj.get("ageRange"),
            "bmiRange": obj.get("bmiRange"),
            "consortiums": obj.get("consortiums"),
            "tmc": obj.get("tmc"),
            "technologies": obj.get("technologies"),
            "ontologyTerms": obj.get("ontologyTerms"),
            "cellTypeTerms": obj.get("cellTypeTerms"),
            "biomarkerTerms": obj.get("biomarkerTerms"),
            "spatialSearches": [SpatialSearch.from_dict(_item) for _item in obj["spatialSearches"]] if obj.get("spatialSearches") is not None else None
        })
        return _obj


