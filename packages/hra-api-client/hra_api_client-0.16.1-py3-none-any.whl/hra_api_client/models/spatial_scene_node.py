# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details. 

    The version of the OpenAPI document: 0.16.1
    Contact: help@hubmapconsortium.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SpatialSceneNode(BaseModel):
    """
    
    """ # noqa: E501
    name: Optional[StrictStr] = None
    tooltip: Optional[StrictStr] = None
    unpickable: Optional[StrictBool] = Field(default=None, description="Whether the node should selectable by the user in interfaces.")
    geometry: Optional[StrictStr] = Field(default=None, description="Geometry to draw, if it is not using a GLTF file.")
    lighting: Optional[StrictStr] = Field(default=None, alias="_lighting")
    zoom_based_opacity: Optional[StrictBool] = Field(default=None, description="Whether the opacity of the node changes based on the zoom level.", alias="zoomBasedOpacity")
    zoom_to_on_load: Optional[StrictBool] = Field(default=None, description="Focus this node when loaded in an interface.", alias="zoomToOnLoad")
    scenegraph: Optional[StrictStr] = None
    scenegraph_node: Optional[StrictStr] = Field(default=None, alias="scenegraphNode")
    color: Optional[Annotated[List[Union[Annotated[float, Field(le=255, strict=True, ge=0)], Annotated[int, Field(le=255, strict=True, ge=0)]]], Field(min_length=4, max_length=4)]] = None
    opacity: Optional[Union[StrictFloat, StrictInt]] = None
    transform_matrix: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=16, max_length=16)]] = Field(default=None, description="Additional transformations to be applied.", alias="transformMatrix")
    priority: Optional[Union[StrictFloat, StrictInt]] = None
    entity_id: Optional[StrictStr] = Field(default=None, description="Identifier of the entity the spatial object represents.", alias="entityId")
    ccf_annotations: Optional[List[StrictStr]] = Field(default=None, description="Annotations attached to the entity.")
    representation_of: Optional[StrictStr] = Field(default=None, description="Identifier for the item the spatial object represents.")
    reference_organ: Optional[StrictStr] = Field(default=None, description="Identifier for the organ the spatial object represents.")
    sex: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["entityId", "ccf_annotations", "representation_of", "reference_organ", "sex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpatialSceneNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpatialSceneNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityId": obj.get("entityId"),
            "ccf_annotations": obj.get("ccf_annotations"),
            "representation_of": obj.get("representation_of"),
            "reference_organ": obj.get("reference_organ"),
            "sex": obj.get("sex")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


