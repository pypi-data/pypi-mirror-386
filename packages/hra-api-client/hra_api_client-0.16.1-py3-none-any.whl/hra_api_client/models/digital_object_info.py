# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details. 

    The version of the OpenAPI document: 0.16.1
    Contact: help@hubmapconsortium.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DigitalObjectInfo(BaseModel):
    """
    DigitalObjectInfo
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of the digital object dataset", alias="@id")
    type: StrictStr = Field(alias="@type")
    title: StrictStr
    do_type: StrictStr = Field(description="Digital object type (e.g., “2d-ftu”)", alias="doType")
    do_name: StrictStr = Field(description="Name of the digital object", alias="doName")
    do_version: StrictStr = Field(description="Current version of the digital object", alias="doVersion")
    last_updated: date = Field(description="Date the object was last updated", alias="lastUpdated")
    hra_versions: List[StrictStr] = Field(description="All versions of the HRA this digital object was published in", alias="hraVersions")
    versions: List[StrictStr] = Field(description="All available versions of the digital object")
    purl: StrictStr = Field(description="Persistent URL for the digital object")
    datasets: List[StrictStr] = Field(description="Dataset URLs for each version")
    lod: StrictStr = Field(description="Unique identifier of the digital object dataset (same as @id)")
    cell_count: Optional[StrictInt] = Field(default=None, description="Number of cells in the DO (if applicable)")
    biomarker_count: Optional[StrictInt] = Field(default=None, description="Number of biomarkers in the DO (if applicable)")
    organs: Optional[List[StrictStr]] = Field(default=None, description="Organs in the DO (if applicable)")
    organ_ids: Optional[List[StrictStr]] = Field(default=None, description="Ontology IDs for associated organs (if applicable)", alias="organIds")
    __properties: ClassVar[List[str]] = ["@id", "@type", "title", "doType", "doName", "doVersion", "lastUpdated", "hraVersions", "versions", "purl", "datasets", "lod", "cell_count", "biomarker_count", "organs", "organIds"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['dcat:Catalog']):
            raise ValueError("must be one of enum values ('dcat:Catalog')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DigitalObjectInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DigitalObjectInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "title": obj.get("title"),
            "doType": obj.get("doType"),
            "doName": obj.get("doName"),
            "doVersion": obj.get("doVersion"),
            "lastUpdated": obj.get("lastUpdated"),
            "hraVersions": obj.get("hraVersions"),
            "versions": obj.get("versions"),
            "purl": obj.get("purl"),
            "datasets": obj.get("datasets"),
            "lod": obj.get("lod"),
            "cell_count": obj.get("cell_count"),
            "biomarker_count": obj.get("biomarker_count"),
            "organs": obj.get("organs"),
            "organIds": obj.get("organIds")
        })
        return _obj


