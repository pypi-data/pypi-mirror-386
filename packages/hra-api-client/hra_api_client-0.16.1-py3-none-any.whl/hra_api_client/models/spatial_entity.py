# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details. 

    The version of the OpenAPI document: 0.16.1
    Contact: help@hubmapconsortium.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from hra_api_client.models.spatial_object_reference import SpatialObjectReference
from typing import Optional, Set
from typing_extensions import Self

class SpatialEntity(BaseModel):
    """
    A Spatial Entity defines a bounded cartesian space and the units it is measured in. It typically represents a real world thing, e.g., a human body, a human kidney, a tissue section, or an individual cell.
    """ # noqa: E501
    label: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    rui_rank: Optional[StrictInt] = Field(default=None, description="Ranking used to order lists in the RUI.")
    sex: Optional[StrictStr] = None
    side: Optional[StrictStr] = Field(default=None, description="Used for organs that come in pairs to distinguish between them, i.e. kidneys, etc.")
    slice_count: Optional[StrictInt] = None
    slice_thickness: Optional[Union[StrictFloat, StrictInt]] = None
    placement: Optional[Any] = None
    object: Optional[SpatialObjectReference] = None
    color: Optional[Annotated[List[Union[Annotated[float, Field(le=255, strict=True, ge=0)], Annotated[int, Field(le=255, strict=True, ge=0)]]], Field(min_length=4, max_length=4)]] = None
    entity_id: Optional[StrictStr] = Field(default=None, description="Identifier of the entity the spatial object represents.", alias="entityId")
    ccf_annotations: Optional[List[StrictStr]] = Field(default=None, description="Annotations attached to the entity.")
    representation_of: Optional[StrictStr] = Field(default=None, description="Identifier for the item the spatial object represents.")
    reference_organ: Optional[StrictStr] = Field(default=None, description="Identifier for the organ the spatial object represents.")
    creator: Optional[StrictStr] = None
    creator_first_name: Optional[StrictStr] = None
    creator_last_name: Optional[StrictStr] = None
    creator_orcid: Optional[StrictStr] = None
    creation_date: Optional[date] = None
    x_dimension: Union[StrictFloat, StrictInt]
    y_dimension: Union[StrictFloat, StrictInt]
    z_dimension: Union[StrictFloat, StrictInt]
    dimension_units: StrictStr = Field(description="Length units of dimensional values.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["entityId", "ccf_annotations", "representation_of", "reference_organ", "sex", "creator", "creator_first_name", "creator_last_name", "creator_orcid", "creation_date", "x_dimension", "y_dimension", "z_dimension", "dimension_units"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpatialEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpatialEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityId": obj.get("entityId"),
            "ccf_annotations": obj.get("ccf_annotations"),
            "representation_of": obj.get("representation_of"),
            "reference_organ": obj.get("reference_organ"),
            "sex": obj.get("sex"),
            "creator": obj.get("creator"),
            "creator_first_name": obj.get("creator_first_name"),
            "creator_last_name": obj.get("creator_last_name"),
            "creator_orcid": obj.get("creator_orcid"),
            "creation_date": obj.get("creation_date"),
            "x_dimension": obj.get("x_dimension"),
            "y_dimension": obj.get("y_dimension"),
            "z_dimension": obj.get("z_dimension"),
            "dimension_units": obj.get("dimension_units") if obj.get("dimension_units") is not None else 'millimeter'
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


