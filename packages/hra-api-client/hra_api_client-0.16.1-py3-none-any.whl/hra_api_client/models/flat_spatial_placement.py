# coding: utf-8

"""
    HRA-API

    This API provides programmatic access to data registered to the Human Reference Atlas (HRA). See the [HuBMAP HRA Portal](https://humanatlas.io/) for details. 

    The version of the OpenAPI document: 0.16.1
    Contact: help@hubmapconsortium.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FlatSpatialPlacement(BaseModel):
    """
    A Spatial Placement defines how to place a Spatial Entity or Spatial Object Reference relative to another Spatial Entity. It says how to scale, rotate, and translate (in that order) a Spatial Entity or Spatial Object Reference so that it is placed relative to another Spatial Entity.
    """ # noqa: E501
    source: Optional[StrictStr] = None
    target: Optional[StrictStr] = None
    placement_date: Optional[date] = None
    x_translation: Union[StrictFloat, StrictInt]
    y_translation: Union[StrictFloat, StrictInt]
    z_translation: Union[StrictFloat, StrictInt]
    translation_units: StrictStr = Field(description="Length units of translation values.")
    x_rotation: Union[StrictFloat, StrictInt]
    y_rotation: Union[StrictFloat, StrictInt]
    z_rotation: Union[StrictFloat, StrictInt]
    rotation_units: StrictStr = Field(description="Units of rotation values.")
    x_scaling: Union[StrictFloat, StrictInt]
    y_scaling: Union[StrictFloat, StrictInt]
    z_scaling: Optional[Union[StrictFloat, StrictInt]] = None
    scaling_units: StrictStr = Field(description="Units of scaling values.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["placement_date", "x_translation", "y_translation", "z_translation", "translation_units", "x_rotation", "y_rotation", "z_rotation", "rotation_units", "x_scaling", "y_scaling", "z_scaling", "scaling_units"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlatSpatialPlacement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlatSpatialPlacement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placement_date": obj.get("placement_date"),
            "x_translation": obj.get("x_translation"),
            "y_translation": obj.get("y_translation"),
            "z_translation": obj.get("z_translation"),
            "translation_units": obj.get("translation_units") if obj.get("translation_units") is not None else 'millimeter',
            "x_rotation": obj.get("x_rotation"),
            "y_rotation": obj.get("y_rotation"),
            "z_rotation": obj.get("z_rotation"),
            "rotation_units": obj.get("rotation_units") if obj.get("rotation_units") is not None else 'degree',
            "x_scaling": obj.get("x_scaling"),
            "y_scaling": obj.get("y_scaling"),
            "z_scaling": obj.get("z_scaling"),
            "scaling_units": obj.get("scaling_units") if obj.get("scaling_units") is not None else 'ratio'
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


