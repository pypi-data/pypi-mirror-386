[testing]
azure.skip = yes
gcs.skip = yes
s3.skip = yes
sftp.skip = no


[extensions]
csvpath_files = csvpath, csvpaths
csv_files = csv, tsv, dat, tab, psv, ssv

[errors]
csvpath = raise, collect, stop, fail, print
csvpaths = raise, collect
use_format = full
pattern = {time}:{file}:{line}:{paths}:{instance}:{chain}:  {message}

[logging]
csvpath = info
csvpaths = debug
log_file = logs\csvpath.log
log_files_to_keep = 100
log_file_size = 52428800
# file or rotating
handler = file

[config]
path = assets\config\jenkins-windows-sftp.ini
allow_var_sub=True
var_sub_source = env

[cache]
path = cache
use_cache = no

[functions]
imports = config\functions.imports

[results]
archive = tmp\sftp\archive

[inputs]
files = sftp://192.168.1.152:2022/windows/inputs\named_files
csvpaths = tmp\sftp\inputs\named_paths
on_unmatched_file_fingerprints = halt
allow_http_files=True
allow_local_files=True

#
# integrations activation
#

[listeners]
groups =
#slack, marquez, ckan, sftp, sftpplus, otlp, default, sqlite

# add sqlite to capture staging, loads, and results in a local sqlite db
sqlite.result = from csvpath.managers.integrations.sqlite.sqlite_result_listener import SqliteResultListener
sqlite.results = from csvpath.managers.integrations.sqlite.sqlite_results_listener import SqliteResultsListener

# these simple default listeners track all files staged and all paths loaded in
# central manifests. unlike other manifest writers, if they have multiple
# concurrent users they have potential a race condition. users that do not
# share inputs directories do not need to worry about this. you should vet
# using them against your use case; potential utility vs. the modest but non-0
# risk of lost updates. they can be disabled with little loss of function.
# alternatively a database-backed version may be more suitable.
default.file = from csvpath.managers.files.files_listener import FilesListener
default.paths = from csvpath.managers.paths.paths_listener import PathsListener

# add otlp to support any OpenTelemetry backend
otlp.result = from csvpath.managers.integrations.otlp.otlp_result_listener import OpenTelemetryResultListener
otlp.results = from csvpath.managers.integrations.otlp.otlp_results_listener import OpenTelemetryResultsListener
otlp.errors = from csvpath.managers.integrations.otlp.otlp_error_listener import OpenTelemetryErrorListener

# add sftpplus to the list of groups above to automate registration and named-paths group runs on file arrival at an SFTPPlus server
sftpplus.paths = from csvpath.managers.integrations.sftpplus.sftpplus_listener import SftpPlusListener

# add sftp to the list of groups above to push results to an sftp account
sftp.results = from csvpath.managers.integrations.sftp.sftp_listener import SftpListener

# add ckan to the list of groups above for alerts to slack webhooks
ckan.results = from csvpath.managers.integrations.ckan.ckan_listener import CkanListener

#add openlineage to the list of groups above for OpenLineage events to a Marquez server
openlineage.file = from csvpath.managers.integrations.ol.file_listener_ol import OpenLineageFileListener
openlineage.paths = from csvpath.managers.integrations.ol.paths_listener_ol import OpenLineagePathsListener
openlineage.result = from csvpath.managers.integrations.ol.result_listener_ol import OpenLineageResultListener
openlineage.results = from csvpath.managers.integrations.ol.results_listener_ol import OpenLineageResultsListener

# add slack to the list of groups above for alerts to slack webhooks
slack.file = from csvpath.managers.integrations.slack.sender import SlackSender
slack.paths = from csvpath.managers.integrations.slack.sender import SlackSender
slack.result = from csvpath.managers.integrations.slack.sender import SlackSender
slack.results = from csvpath.managers.integrations.slack.sender import SlackSender
scripts.results = from csvpath.managers.integrations.scripts.scripts_results_listener import ScriptsResultsListener

#
# integrations setup
#

[otlp]
# add OTLP config here if not relying directly on the env vars

[aws]
#

[azure]
#

[gcs]
#

[sftp]
server = 192.168.1.152
port = 2022
username = python
password = hangzhou


[sqlite]
db = archive\csvpath.db

[sftpplus]
# these are only needed by the csvpath writer
mailbox_user = MAILBOX_USER
mailbox_password = MAILBOX_PASSWORD
server = SFTPPLUS_SERVER
port = SFTPPLUS_PORT
# these are only needed on the server
admin_username = SFTPPLUS_ADMIN_USERNAME
admin_password = SFTPPLUS_ADMIN_PASSWORD
api_url = https://. . . :10020/json
scripts_dir =
execute_timeout = 300

[ckan]
server = http://. . . :80
api_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3akJwc1ZuSkVrZm1aNnBtVTJfTW5CNlJXZ211YjdOOHVXZ1l1cUFDa0Q4IiwiaWF0IjoxNzM0NzE4NDQ3fQ.QXWXoJoSxVES4NwXYBteYUD7enX9D5T2htmETLGFzrs

[scripts]
run_scripts=yes

[openlineage]
base_url = http://. . . :5000
endpoint = api/v1/lineage
api_key = "none"
timeout = 5
verify = False

[slack]
# add your main webhook here. to set webhooks on a csvpath-by-csvpath basis add
# on-valid-slack: webhook-minus-'https://' and/or
# on-invalid-slack: webhook-minus-'https://'
webhook_url =


