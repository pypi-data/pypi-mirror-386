{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "788d3bb9",
   "metadata": {},
   "source": [
    "# Physics-Informed Neural Network (PINN)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "341afde2",
   "metadata": {},
   "source": [
    "[PINNs](https://www.sciencedirect.com/science/article/abs/pii/S0021999118307125) are is a NNs trained on data and a loss that penalises violations of the governing differential equations and boundary/initial conditions, so its predictions obey the underlying physics.\\\n",
    "They can be useful in predicting behviour of physical systems, provided that obey known DEs, if we have a small amount of data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c77b25f4",
   "metadata": {},
   "source": [
    "As an example, let's try to find the general solution of the 1D heat equation:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n",
    "$$\n",
    "\n",
    "where $u$ is the temperature, $t$ is time, $x$ is the 1D spatial coordinate and $\\alpha$ is a constant that determines how quickly the heat conducts through the material."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc843954",
   "metadata": {},
   "source": [
    "The initial condition (IC) is $u(x,0)=\\sin(\\pi x)$ and the boundary conditions (BCs) are $u(0,t)=u(1,t)=0$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a419a2c1",
   "metadata": {},
   "source": [
    "Let's train a NN and a PINN on only 10 data points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a422f6a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "np.random.seed(290402)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0f2d09e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha = 0.2 # Set alpha\n",
    "\n",
    "# Heat equation\n",
    "def temp(x,t):\n",
    "    return np.exp(-np.pi**2 * alpha * t) * np.sin(np.pi * x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "01f6027d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create 10 random points\n",
    "N = 10\n",
    "x = np.random.rand(N)\n",
    "t = np.random.rand(N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1895a84e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the data points for training\n",
    "xt = torch.tensor(np.stack([x, t], axis=1), dtype=torch.float32) \n",
    "u = torch.tensor(temp(x,t).reshape(-1,1), dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "215e7595",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a regular NN\n",
    "\n",
    "class RegularNN(nn.Module):\n",
    "    def __init__(self, in_dim=2, out_dim=1, hidden_dim=32):\n",
    "        super(RegularNN, self).__init__()\n",
    "        self.net = nn.Sequential(\n",
    "            nn.Linear(in_dim, hidden_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(hidden_dim, hidden_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(hidden_dim, hidden_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(hidden_dim, out_dim)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.net(x)\n",
    "    \n",
    "    def predict(self, x):\n",
    "        self.eval()\n",
    "        return self.net(x)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18286210",
   "metadata": {},
   "source": [
    "The PINN has the same architecture as the previous NN but we can use PyTorch's autodifferentiation to find $u_{xx}$ and $u_t$ and add regularisation terms to the loss:\n",
    "\n",
    "$$\n",
    "\\mathcal{L}_{\\mathrm{PDE}} = \\lambda_{\\mathrm{pde}}\\,\\frac{1}{N}\\sum_{i=1}^{N} \\left( u_t(x_i,t_i) - \\alpha\\,u_{xx}(x_i,t_i) \\right)^2\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\mathcal{L}_{\\mathrm{BC}} = \\lambda_{\\mathrm{BC}}\\,\\frac{1}{N}\\sum_{i=1}^{N} \\left( u(0,t_i)^2 + u(1,t_i)^2 \\right)\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\mathcal{L}_{\\mathrm{IC}} = \\lambda_{\\mathrm{IC}}\\,\\frac{1}{N}\\sum_{i=1}^{N} \\left( u(x_i,0) - \\sin(\\pi x_i) \\right)^2\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eea121f",
   "metadata": {},
   "source": [
    "Another advantage of using a PINN is that we can set constants of the PDE (in this case $\\alpha$) to be differentiable constants and we can extract their values from the trained PINN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9f7c2441",
   "metadata": {},
   "outputs": [],
   "source": [
    "class PINN(RegularNN):\n",
    "    def __init__(self, in_dim=2, out_dim=1, hidden_dim=32):\n",
    "        super().__init__(in_dim=in_dim, out_dim=out_dim, hidden_dim=hidden_dim)\n",
    "\n",
    "        self.type = 'pinn'\n",
    "        self.alpha = nn.Parameter(data=torch.tensor([0.])) # Differentiable constant\n",
    "\n",
    "    def pde_residual(self, xt):\n",
    "\n",
    "        xt = xt.requires_grad_(True)              \n",
    "        u  = self.forward(xt)                   \n",
    "\n",
    "        grads = torch.autograd.grad(\n",
    "            u, xt, torch.ones_like(u), create_graph=True\n",
    "        )[0]                                     \n",
    "        u_x = grads[:, 0:1]\n",
    "        u_t = grads[:, 1:2]\n",
    "\n",
    "        u_xx = torch.autograd.grad(\n",
    "            u_x, xt, torch.ones_like(u_x), create_graph=True\n",
    "        )[0][:, 0:1]\n",
    "\n",
    "        res = u_t - self.alpha * u_xx\n",
    "        return res\n",
    "    \n",
    "    def bc_residual(self, xt):\n",
    "            t  = xt[:, 1:2].detach()                    \n",
    "            x0 = torch.zeros_like(t)\n",
    "            x1 = torch.ones_like(t)\n",
    "\n",
    "            u0 = self.forward(torch.cat([x0, t], dim=1))  \n",
    "            u1 = self.forward(torch.cat([x1, t], dim=1))  \n",
    "\n",
    "            return torch.cat([u0, u1], dim=0)           \n",
    "\n",
    "    def ic_residual(self, xt):\n",
    "\n",
    "        x  = xt[:, 0:1].detach()                   \n",
    "        t0 = torch.zeros_like(x)\n",
    "\n",
    "        u_init = self.forward(torch.cat([x, t0], dim=1))\n",
    "        target = torch.sin(torch.pi * x)\n",
    "\n",
    "        return u_init - target                   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae50e4f7",
   "metadata": {},
   "source": [
    "Let's train the models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9dc800b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.optim as optim\n",
    "\n",
    "def train(model, xt, u, epochs=3000, lr=1e-3, weight_decay=0.0, device=\"mps\", verbose=False):\n",
    "    reg_pde = 1\n",
    "    reg_ic = 5\n",
    "    reg_bc = 5\n",
    "\n",
    "    model = model.to(device)\n",
    "    xt = xt.to(device)\n",
    "    u = u.to(device)\n",
    "\n",
    "    model.train()\n",
    "    opt = optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    loss_fn = nn.MSELoss()\n",
    "\n",
    "    loss_hist = []\n",
    "    for ep in range(1, epochs+1):\n",
    "        opt.zero_grad()\n",
    "        pred = model(xt)\n",
    "        loss = loss_fn(pred, u)\n",
    "\n",
    "        if model.type == 'pinn':\n",
    "            pde_res = model.pde_residual(xt)\n",
    "            bc_res = model.bc_residual(xt)\n",
    "            ic_res = model.ic_residual(xt)\n",
    "            loss += reg_pde * (pde_res**2).mean() + reg_ic * (ic_res**2).mean() + reg_bc * (bc_res**2).mean()\n",
    "\n",
    "        loss.backward()\n",
    "        opt.step()\n",
    "        loss_hist.append(loss.item())\n",
    "        if verbose and ep % 500 == 0:\n",
    "            print(f\"[sup10] ep={ep} loss={loss.item():.3e}\")\n",
    "\n",
    "    return model, loss_hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e78ca1da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train the regular NN\n",
    "regular_NN = RegularNN()\n",
    "regular_NN, _ = train(regular_NN, xt, u)\n",
    "\n",
    "# Save the mode weights|\n",
    "torch.save(regular_NN.state_dict(), 'regular_NN.pth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "127422db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the PINN\n",
    "pinn = PINN()\n",
    "pinn, _ = train(pinn, xt, u)\n",
    "\n",
    "# Save the mode weights\n",
    "torch.save(pinn.state_dict(), 'pinn.pth')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ce6a4c",
   "metadata": {},
   "source": [
    "Let's plot the predicted data from the regular NN and the PINN and compare them with the true form."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "72ae365e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def make_2d_hists(nn_model, pinn_model, alpha=1.0, Nx=100, Nt=100):\n",
    "    # spaceâ€“time grid\n",
    "    x = np.linspace(0.0, 1.0, Nx)\n",
    "    t = np.linspace(0.0, 1.0, Nt)\n",
    "    X, T = np.meshgrid(x, t, indexing=\"ij\")  # X: (Nx,Nt), T: (Nx,Nt)\n",
    "\n",
    "    # True solution\n",
    "    U_exact = np.exp(-np.pi**2 * alpha * T) * np.sin(np.pi * X)\n",
    "\n",
    "    def predict_grid(model):\n",
    "        model.eval()\n",
    "        device = next(model.parameters()).device\n",
    "        XT = np.stack([X.ravel(), T.ravel()], axis=1)  # (Nx*Nt, 2) with [x,t]\n",
    "        xt = torch.tensor(XT, dtype=torch.float32, device=device)\n",
    "        with torch.no_grad():\n",
    "            U = model(xt).reshape(Nx, Nt).detach().cpu().numpy()\n",
    "        return U\n",
    "\n",
    "    U_nn   = predict_grid(nn_model)\n",
    "    U_pinn = predict_grid(pinn_model)\n",
    "\n",
    "    # plot side by side (1x3)\n",
    "    fig, axes = plt.subplots(1, 3, figsize=(15, 4))\n",
    "    data_plots = [(\"True\", U_exact), (\"Regular NN\", U_nn), (\"PINN\", U_pinn)]\n",
    "\n",
    "    for ax, (title, U) in zip(axes, data_plots):\n",
    "        im = ax.imshow(U, origin=\"lower\", extent=[0, 1, 0, 1], aspect=\"auto\")\n",
    "        ax.set_xlabel(\"t\")\n",
    "        ax.set_ylabel(\"x\")\n",
    "        ax.set_title(title)\n",
    "        plt.colorbar(im, ax=ax, label=\"$u(x,t)$\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "599098e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x400 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "make_2d_hists(regular_NN, pinn, alpha=alpha)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd056f55",
   "metadata": {},
   "source": [
    "The PINN was much better at predicting the true temperatures than the regular NN with the same architecture."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed375e45",
   "metadata": {},
   "source": [
    "Let's see what the PINN predicts $\\alpha$ to be:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "89a45541",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predicted alpha = 0.198\n"
     ]
    }
   ],
   "source": [
    "print(f\"predicted alpha = {float(pinn.alpha):.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "befec8e2",
   "metadata": {},
   "source": [
    "This is a pretty good estimate from the true $\\alpha=0.2$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18771b15",
   "metadata": {},
   "source": [
    "Now let's see if we are able to distill the solution to the 1-D heat equation from the PINN."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e7996f1",
   "metadata": {},
   "source": [
    "## Use PyTorch to approximate the behaviour of the PINN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6475c815",
   "metadata": {},
   "outputs": [],
   "source": [
    "from symtorch import SymbolicMLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b00f1ba4",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_data = 5000 # Create 5000 different data points\n",
    "sample_data = torch.tensor(np.random.rand(num_data, 2), dtype=torch.float32) \n",
    "pinn.net = SymbolicMLP(pinn.net, 'pinn')\n",
    "\n",
    "sr_params = {'niterations': 1000,\n",
    "             'constraints': {'sin':3, 'exp':3}, \n",
    "             'complexity_of_operators': {'sin':3, 'exp':3},\n",
    "             \"unary_operators\": [\"inv(x) = 1/x\", \"sin\", \"exp\"],\n",
    "             'parsimony': 0.01,\n",
    "             'nested_constraints':{'sin':{'sin':0, 'exp':0}, 'exp':{'exp':0, 'sin':0}},\n",
    "             'verbose': 0\n",
    "             }\n",
    "\n",
    "variable_names = ['x', 't']\n",
    "fit_params = {'variable_names': variable_names}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "166da776",
   "metadata": {},
   "outputs": [],
   "source": [
    "pinn.net.distill(sample_data.to(torch.device('mps')), sr_params = sr_params,\n",
    "                 fit_params=fit_params\n",
    "                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3e43581e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'(sin(x * -3.1387317) * (exp(t * -1.9645759) * -1.0069613)) + -0.003304621'"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pinn.net.pysr_regressor[0].get_best().equation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "848d5cde",
   "metadata": {},
   "source": [
    "The correct equation is of the form\n",
    "\n",
    "$$\n",
    "u(x,t) = e^{-\\pi^2 \\alpha t} \\sin(\\pi x) \\approx e^{-1.97} \\sin (3.14 x)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1331e222",
   "metadata": {},
   "source": [
    "PySR's best equation returns correct form of the equation! \\\n",
    "(For more reliable SR performance, you should increase `niterations` until the Pareto front stablises, which may be >1000)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "37682d78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "âœ… Successfully switched pinn to symbolic equations for all 1 dimensions:\n",
      "   Dimension 0: (sin(x * -3.1387317) * (exp(t * -1.9645759) * -1.0069613)) + -0.003304621\n",
      "   Variables: ['t', 'x']\n",
      "ðŸŽ¯ All 1 output dimensions now using symbolic equations.\n"
     ]
    }
   ],
   "source": [
    "pinn.net.switch_to_equation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f92d209f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import shutil\n",
    "import os\n",
    "if os.path.exists('SR_output'):\n",
    "    shutil.rmtree('SR_output')\n",
    "    os.remove('pinn.pth')\n",
    "    os.remove('regular_NN.pth')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "symtorch_venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
