{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2f935234",
   "metadata": {},
   "source": [
    "# Pruning MLPs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c079a023",
   "metadata": {},
   "source": [
    "In this demo we will show you how to: \n",
    "* Wrap a PyTorch model with the `PruningMLP` class\n",
    "* Set up a pruning schedule and train the pruning MLP\n",
    "* Perform symbolic regression on a pruned MLP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "127b5f78",
   "metadata": {},
   "source": [
    "## Pruning Background"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17f29635",
   "metadata": {},
   "source": [
    "For interpretability purposes, it is good to reduce the dimensionality of deep learning models. High-dimensional representations often entangle multiple features, making it difficult to extract clear, human-understandable relationships. By encouraging a sparse representation, we encourage the network to compress information into a smaller set of meaningful components. This may also make symbolic regression possible on these models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6d849f2",
   "metadata": {},
   "source": [
    "The SymTorch pruning class allows you to dynamically reduce the output dimensionality of MLPs by zero-masking the unimportant dimensions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f18ba6a",
   "metadata": {},
   "source": [
    "**Important dimensions**: The dimensions that the model uses the most in predicting the output. These would vary most with differences in the input. Hence we choose the important dimensions as the ones with the highest standard deviation across the datapoints. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "725b0f14",
   "metadata": {},
   "source": [
    "We pass some input data through the model (usually a subset of the validation set) and analyse the outputs of the MLP. We choose the output dimensions that have the highest standard deviation across the datapoints, as shown below. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36902e01",
   "metadata": {},
   "source": [
    "<img src=\"../_static/choosing_important_dims.png\" width=\"450\" height=\"300\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a92f4a7a",
   "metadata": {},
   "source": [
    "## Wrapping a PyTorch model\n",
    "Create a simple PyTorch model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "adc61e0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import torch.nn as nn\n",
    "\n",
    "class MLP(nn.Module):\n",
    "    \"\"\"\n",
    "    Simple MLP.\n",
    "    \"\"\"\n",
    "    def __init__(self, input_dim, output_dim, hidden_dim):\n",
    "        super(MLP, self).__init__()\n",
    "        self.mlp = nn.Sequential(\n",
    "            nn.Linear(input_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(hidden_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(hidden_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(hidden_dim, output_dim)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.mlp(x)\n",
    "\n",
    "class SimpleModel(nn.Module):\n",
    "    \"\"\"\n",
    "    Model with MLP f_net and linear g_net.\n",
    "    \"\"\"\n",
    "    def __init__(self, input_dim, output_dim, output_dim_f=32, hidden_dim=128):\n",
    "        super(SimpleModel, self).__init__()\n",
    "\n",
    "        self.f_net = MLP(input_dim, output_dim_f, hidden_dim)\n",
    "        # g is linear - only learns to combine the 2 pruned outputs from f\n",
    "        self.g_net = nn.Linear(output_dim_f, output_dim)  # Will use first 2 dims of f after pruning\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.f_net(x)\n",
    "        x = self.g_net(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6941215c",
   "metadata": {},
   "source": [
    "Train the model on some data. We have a composite function $y=g(f(\\mathbf{x}))$.\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "& f_0 = x_0^2\\\\\n",
    "& f_1 = \\sin{x_4}\n",
    "\\end{aligned}\n",
    "$$\n",
    "and $g$ is just a linear transformation of $f_0$ and $f_1$\n",
    "\n",
    "$$\n",
    "g(\\mathbf{f}) = 2.5f_0 -1.3f_1\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5f363579",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Make the dataset \n",
    "x = np.array([np.random.uniform(0, 1, 10_000) for _ in range(5)]).T\n",
    "\n",
    "def f_func(x):\n",
    "    f0 = x[:, 0]**2 \n",
    "    f1 = np.sin(x[:, 4])  \n",
    "    return np.stack([f0, f1], axis=1)\n",
    "\n",
    "def g_func(f_output):\n",
    "    a, b = 2.5, -1.3  \n",
    "    return a * f_output[:, 0] + b * f_output[:, 1]\n",
    "\n",
    "# Generate ground truth data\n",
    "f_true = f_func(x)\n",
    "y = g_func(f_true)\n",
    "\n",
    "noise = np.array([np.random.normal(0, 0.05*np.std(y)) for _ in range(len(y))])\n",
    "y = y + noise "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24d25b3e",
   "metadata": {},
   "source": [
    "We need to set up the pruning model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8028b74a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected IPython. Loading juliacall extension. See https://juliapy.github.io/PythonCall.jl/stable/compat/#IPython\n"
     ]
    }
   ],
   "source": [
    "from symtorch import PruningMLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2023b11b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create model with pruning for f, linear g_net\n",
    "model = SimpleModel(input_dim=x.shape[1], output_dim=1, output_dim_f=32)\n",
    "model.f_net = PruningMLP(model.f_net,\n",
    "                      initial_dim=32, # Initial dimensionality of the MLP\n",
    "                      target_dim=2, # Target dimensionality - final output dim after pruning\n",
    "                      mlp_name=\"f_net\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213f5b8b",
   "metadata": {},
   "source": [
    "## Training our model and dynamically reducing dimensionality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9c0007a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the pruning schedule\n",
    "epochs = 100\n",
    "model.f_net.set_schedule(total_epochs=epochs, \n",
    "                     end_epoch_frac=0.7 # End pruning after 70% of epochs\n",
    "                     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f495823a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up training\n",
    "\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "def train_model(model, dataloader, X_val, opt, criterion, epochs=100):\n",
    "    \"\"\"\n",
    "    Train model with MLP f (with pruning) and linear g_net.\n",
    "    \n",
    "    Args:\n",
    "        model: PyTorch model to train\n",
    "        dataloader: DataLoader for training data\n",
    "        X_val, y_val: Validation data for pruning\n",
    "        opt: Optimizer\n",
    "        criterion: Loss function\n",
    "        epochs: Number of training epochs\n",
    "        \n",
    "    Returns:\n",
    "        tuple: (trained_model, loss_tracker, active_dims_tracker)\n",
    "    \"\"\"\n",
    "    loss_tracker = []\n",
    "    active_dims_tracker = []\n",
    "    \n",
    "    for epoch in range(epochs):\n",
    "        epoch_loss = 0.0\n",
    "        \n",
    "        for batch_x, batch_y in dataloader:\n",
    "            # Forward pass\n",
    "            pred = model(batch_x)\n",
    "            loss = criterion(pred, batch_y)\n",
    "            # Backward pass\n",
    "            opt.zero_grad()\n",
    "            loss.backward()\n",
    "            opt.step()\n",
    "            \n",
    "            epoch_loss += loss.item()\n",
    "        \n",
    "        loss_tracker.append(epoch_loss)\n",
    "        active_dims_tracker.append(model.f_net.pruning_mask.sum().item())\n",
    "\n",
    "        model.f_net.prune(epoch, sample_data = X_val, # Pass in the validation set (or a subset of) to the model\n",
    "                          parent_model = model) # Pass in the parent model to get the correct inputs to the layer\n",
    "\n",
    "        if (epoch + 1) % 10 == 0:\n",
    "            avg_loss = epoch_loss / len(dataloader)\n",
    "            active_dims = model.f_net.pruning_mask.sum().item()\n",
    "            print(f'Epoch [{epoch+1}/{epochs}], Avg Loss: {avg_loss:.6f}, Active dims: {active_dims}')\n",
    "            \n",
    "    return model, loss_tracker, active_dims_tracker\n",
    "\n",
    "# Set up training\n",
    "criterion = nn.MSELoss()\n",
    "opt = optim.Adam(model.parameters(), lr=0.001)\n",
    "# Split data\n",
    "X_train, X_val, y_train, y_val = train_test_split(\n",
    "    x, y.reshape(-1,1), test_size=0.1, random_state=290402)\n",
    "\n",
    "# Set up dataset - only x as input now\n",
    "dataset = TensorDataset(torch.FloatTensor(X_train), torch.FloatTensor(y_train))\n",
    "dataloader = DataLoader(dataset, batch_size=32, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "add838bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting training...\n",
      "Epoch [10/100], Avg Loss: 0.002634, Active dims: 30\n",
      "Epoch [20/100], Avg Loss: 0.002262, Active dims: 26\n",
      "Epoch [30/100], Avg Loss: 0.002287, Active dims: 20\n",
      "Epoch [40/100], Avg Loss: 0.002101, Active dims: 14\n",
      "Epoch [50/100], Avg Loss: 0.001869, Active dims: 8\n",
      "Epoch [60/100], Avg Loss: 0.001745, Active dims: 3\n",
      "Epoch [70/100], Avg Loss: 0.001758, Active dims: 2\n",
      "Epoch [80/100], Avg Loss: 0.001797, Active dims: 2\n",
      "Epoch [90/100], Avg Loss: 0.001820, Active dims: 2\n",
      "Epoch [100/100], Avg Loss: 0.001689, Active dims: 2\n",
      "Training completed!\n"
     ]
    }
   ],
   "source": [
    "# Train the model and save the weights\n",
    "print(\"Starting training...\")\n",
    "model, losses, active_dims = train_model(model, dataloader, torch.FloatTensor(X_val), opt, criterion, 100)\n",
    "print(\"Training completed!\")\n",
    "torch.save(model.state_dict(), 'model_weights.pth')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e21b32eb",
   "metadata": {},
   "source": [
    "Let's see how the number of active dimensions decrease as training progesses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "63359981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(active_dims)\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Number of active dimensions for the f MLP output')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "396c9804",
   "metadata": {},
   "source": [
    "You can pass a `decay_rate` parameter into the `.set_schedule` method of a `Pruning_MLP`. The default is a cosine decay (as shown above). The other options are `exp` and `linear`. \n",
    "\n",
    "<img src=\"../_static/pruning_decay_schedules.png\">\n",
    "In the above image, the pruning finishes at epoch 75 and we prune 100 dimensions to 2 dimensions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1db5df8",
   "metadata": {},
   "source": [
    "## Interpret the MLP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05200922",
   "metadata": {},
   "source": [
    "The `.distill` function only takes into account the active (non-masked) dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d637d376",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Running symbolic regression on pruned f...\n",
      "🛠️ Running SR on active dimension 6 (1/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/liz/PhD/SymTorch_project/symtorch_venv/lib/python3.11/site-packages/pysr/sr.py:2811: UserWarning: Note: it looks like you are running in Jupyter. The progress bar will be turned off.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💡Best equation for active dimension 6: (x0 * ((x0 * 7.7608647) + 0.2976528)) + ((sin(x4) * -4.277788) + 0.08879602)\n",
      "🛠️ Running SR on active dimension 30 (2/2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/liz/PhD/SymTorch_project/symtorch_venv/lib/python3.11/site-packages/pysr/sr.py:2811: UserWarning: Note: it looks like you are running in Jupyter. The progress bar will be turned off.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💡Best equation for active dimension 30: ((sin(x4) * 3.9845026) + -0.17296898) + (x0 * ((x0 * -8.416115) + (x4 * 0.458543)))\n",
      "❤️ SR on f_net active dimensions complete.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{6: PySRRegressor.equations_ = [\n",
       " \t    pick         score                                           equation  \\\n",
       " \t0         0.000000e+00                                                 x0   \n",
       " \t1         1.148194e-01                                            x0 + x0   \n",
       " \t2         1.271427e-01                                     x0 * 3.2849653   \n",
       " \t3         2.345212e-01                          inv(inv(x0) + -0.8688543)   \n",
       " \t4         5.343127e-01                       (x0 * 8.063941) + -3.1791587   \n",
       " \t5         4.663378e-01                (x0 * 6.900445) + (x4 * -4.8166494)   \n",
       " \t6         2.113907e+00          (x4 * -3.653175) + ((x0 * x0) * 8.049369)   \n",
       " \t7         8.123289e-02      (sin(x4) * -4.088221) + ((x0 * 8.13758) * x0)   \n",
       " \t8         2.161893e-01  x0 + (((x0 * 7.092151) * x0) + (x4 * (x4 + -4....   \n",
       " \t9         5.076185e-01  (((x0 * x0) * 8.042379) + ((x4 + -4.6605554) *...   \n",
       " \t10        4.154584e-02  ((x0 * x0) * 8.0415535) + ((sin(x4) + -0.03354...   \n",
       " \t11        6.472069e-08  (((x0 * inv(inv(x0))) * 8.041551) + (sin(x4) *...   \n",
       " \t12  >>>>  1.648806e-01  (x0 * ((x0 * 7.7608647) + 0.2976528)) + ((sin(...   \n",
       " \t13        8.078139e-02  ((sin(x4) * -4.25507) + (x3 * 0.10091582)) + (...   \n",
       " \t14        1.518269e-03  (sin(x4) * -4.2544355) + ((((x0 + -0.07688601)...   \n",
       " \t15        6.710315e-02  (((sin(x4) * -4.2783914) + (x3 * 0.07972249)) ...   \n",
       " \t\n",
       " \t        loss  complexity  \n",
       " \t0   5.755526           1  \n",
       " \t1   4.574611           3  \n",
       " \t2   4.028439           4  \n",
       " \t3   2.520196           6  \n",
       " \t4   1.477016           7  \n",
       " \t5   0.581205           9  \n",
       " \t6   0.008476          11  \n",
       " \t7   0.006643          14  \n",
       " \t8   0.005352          15  \n",
       " \t9   0.003221          16  \n",
       " \t10  0.003090          17  \n",
       " \t11  0.003090          19  \n",
       " \t12  0.002620          20  \n",
       " \t13  0.002230          22  \n",
       " \t14  0.002223          24  \n",
       " \t15  0.002079          25  \n",
       " ],\n",
       " 30: PySRRegressor.equations_ = [\n",
       " \t    pick     score                                           equation  \\\n",
       " \t0         0.000000                                                 x4   \n",
       " \t1         0.216649                                         -1.0053014   \n",
       " \t2         0.301529                                    x0 * -3.5791383   \n",
       " \t3         0.023528                               inv(x0 + -1.1379426)   \n",
       " \t4         0.442987                             x0 * (x0 * -5.3691025)   \n",
       " \t5         0.473870                        (x0 * -8.190969) + 3.067833   \n",
       " \t6         0.192947                       ((x0 * -6.202196) * x0) + x4   \n",
       " \t7         0.732085               ((x0 * -1.5106912) + x4) * 4.7091055   \n",
       " \t8         0.269098               (x4 + x4) + (x0 * (x0 * -7.0352945))   \n",
       " \t9         3.592479         ((x0 * x0) * -8.289148) + (x4 * 3.5051167)   \n",
       " \t10        0.067453  ((x0 * x0) * -8.643189) + (x4 * (x0 + 3.1848803))   \n",
       " \t11        0.092275  (x4 * 3.6391747) + ((x0 * (x0 * -8.2041645)) +...   \n",
       " \t12        0.229331  (x0 * (x0 * (x4 + -8.746835))) + (sin(x4) * 3....   \n",
       " \t13        0.257579  ((sin(x4) * 4.2511096) + ((x0 * x0) * -8.20132...   \n",
       " \t14        0.065088  (x0 * ((x0 * -8.23074) + -0.44418868)) + (sin(...   \n",
       " \t15  >>>>  0.108796  ((sin(x4) * 3.9845026) + -0.17296898) + (x0 * ...   \n",
       " \t16        0.000002  (((x0 * (x0 * -8.416535)) + ((x0 * 0.45921513)...   \n",
       " \t17        0.004325  (x0 * ((x0 * -8.431358) + (sin(x4) * 0.5344693...   \n",
       " \t18        0.040500  (((x0 * ((((x4 * -1.8388528) + x3) * -0.224555...   \n",
       " \t19        0.005379  ((x0 * x0) * ((((x4 * -1.8433444) + sin(x3)) *...   \n",
       " \t\n",
       " \t        loss  complexity  \n",
       " \t0   8.849294           1  \n",
       " \t1   7.125564           2  \n",
       " \t2   3.898655           4  \n",
       " \t3   3.807996           5  \n",
       " \t4   2.445173           6  \n",
       " \t5   1.522336           7  \n",
       " \t6   1.255205           8  \n",
       " \t7   0.603635           9  \n",
       " \t8   0.461218          10  \n",
       " \t9   0.012697          11  \n",
       " \t10  0.011095          13  \n",
       " \t11  0.010117          14  \n",
       " \t12  0.006395          16  \n",
       " \t13  0.004943          17  \n",
       " \t14  0.004340          19  \n",
       " \t15  0.003131          22  \n",
       " \t16  0.003131          24  \n",
       " \t17  0.003118          25  \n",
       " \t18  0.002875          27  \n",
       " \t19  0.002829          30  \n",
       " ]}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"\\nRunning symbolic regression on pruned f...\")\n",
    "\n",
    "sr_params = {'complexity_of_operators':  {\"sin\":3, \"exp\":3},\n",
    "             'complexity_of_constants': 2, \n",
    "             'constraints': {\"sin\": 3, \"exp\":3},\n",
    "             'parsimony': 0.01,\n",
    "             'verbosity': 0, \n",
    "             'niterations': 100}\n",
    "\n",
    "model.f_net.distill(torch.FloatTensor(X_train), \n",
    "                       sr_params=sr_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718de0df",
   "metadata": {},
   "source": [
    "You can see that the outputs of the `f_net` NN are linear combinations of the f function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0952d48",
   "metadata": {},
   "source": [
    "We can even perform SR on the `g_net` to show that this layer is just a linear transformation of the inputs.\\\n",
    "Because `g_net` is an intermediate layer of the MLP, we need to pass in the `parent_model` (the whole model) to get the correct inputs to `g_net` for symbolic regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f36f3941",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🛠️ Running SR on output dimension 0 of 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/liz/PhD/SymTorch_project/symtorch_venv/lib/python3.11/site-packages/pysr/sr.py:2811: UserWarning: Note: it looks like you are running in Jupyter. The progress bar will be turned off.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "💡Best equation for output 0 found to be ((x6 * 0.15878753) + ((x4 + -0.1508674) * x30)) + -0.054746866.\n",
      "❤️ SR on g_net complete.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{0: PySRRegressor.equations_ = [\n",
       " \t   pick         score                                           equation  \\\n",
       " \t0        0.000000e+00                                                x13   \n",
       " \t1        7.502494e-02                                          0.2288776   \n",
       " \t2        3.282677e+00                                    x6 * 0.30864543   \n",
       " \t3        5.280330e-08                              (x6 * 0.3086454) + x8   \n",
       " \t4        2.166498e+00                   (x6 * 0.31196678) + -0.030368205   \n",
       " \t5        2.765098e-08            ((x6 + -0.09734457) * 0.31196684) + x17   \n",
       " \t6        8.271199e+00  ((x30 * -0.15086766) + -0.054746903) + (x6 * 0...   \n",
       " \t7  >>>>  3.989052e-01  ((x6 * 0.15878753) + ((x4 + -0.1508674) * x30)...   \n",
       " \t\n",
       " \t           loss  complexity  \n",
       " \t0  7.247515e-01           1  \n",
       " \t1  6.723667e-01           2  \n",
       " \t2  9.469105e-04           4  \n",
       " \t3  9.469104e-04           6  \n",
       " \t4  1.084952e-04           7  \n",
       " \t5  1.084952e-04           9  \n",
       " \t6  1.815527e-15          12  \n",
       " \t7  8.175571e-16          14  \n",
       " ]}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from symtorch import SymbolicMLP\n",
    "\n",
    "model.g_net = SymbolicMLP(model.g_net, mlp_name='g_net')\n",
    "model.g_net.distill(torch.FloatTensor(X_train), \n",
    "                     parent_model=model, # Pass in the parent_model because g_net is an intermediate layer\n",
    "                     sr_params = sr_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16a5805a",
   "metadata": {},
   "source": [
    "The variables used in this NN are just the active dimensions of the `f_net` NN."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db788500",
   "metadata": {},
   "source": [
    "## Switch to Using the Equation Instead in the Forwards Pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "abef72c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Successfully switched f_net to symbolic equations for 2 active dimensions:\n",
      "   Dimension 6: (x0 * ((x0 * 7.7608647) + 0.2976528)) + ((sin(x4) * -4.277788) + 0.08879602)\n",
      "   Variables: ['x0', 'x4']\n",
      "   Dimension 30: ((sin(x4) * 3.9845026) + -0.17296898) + (x0 * ((x0 * -8.416115) + (x4 * 0.458543)))\n",
      "   Variables: ['x0', 'x4']\n",
      "🎯 Active dimensions [6, 30] now using symbolic equations.\n",
      "🔒 Inactive dimensions will output zeros.\n"
     ]
    }
   ],
   "source": [
    "model.f_net.switch_to_equation() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "49460cc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Successfully switched g_net to symbolic equations for all 1 dimensions:\n",
      "   Dimension 0: ((x6 * 0.15878753) + ((x4 + -0.1508674) * x30)) + -0.054746866\n",
      "   Variables: ['x30', 'x4', 'x6']\n",
      "🎯 All 1 output dimensions now using symbolic equations.\n"
     ]
    }
   ],
   "source": [
    "model.g_net.switch_to_equation()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8e7cfd0",
   "metadata": {},
   "source": [
    "Now when running the forwards pass through the model, it uses the symbolic equation instead of the MLP. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e526154f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8045],\n",
       "        [ 1.6867],\n",
       "        [-0.6418],\n",
       "        ...,\n",
       "        [ 1.1081],\n",
       "        [ 2.4498],\n",
       "        [-0.1047]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interpretable_outputs = model(torch.tensor(X_train, dtype=torch.float32))\n",
    "interpretable_outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5835dd8e",
   "metadata": {},
   "source": [
    "## Switch to Using the MLP in the Forwards Pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "34291a48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Switched f_net back to MLP\n",
      "✅ Switched g_net back to MLP\n"
     ]
    }
   ],
   "source": [
    "model.f_net.switch_to_mlp()\n",
    "model.g_net.switch_to_mlp()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "79e43dc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-0.8138],\n",
       "        [ 1.6825],\n",
       "        [-0.6388],\n",
       "        ...,\n",
       "        [ 1.1276],\n",
       "        [ 2.4231],\n",
       "        [-0.0940]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    model_outputs = model(torch.tensor(X_train, dtype=torch.float32))\n",
    "model_outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e258b2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clean up \n",
    "import os\n",
    "import shutil\n",
    "if os.path.exists('SR_output'):\n",
    "    shutil.rmtree('SR_output')\n",
    "os.remove('model_weights.pth')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "symtorch_venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
