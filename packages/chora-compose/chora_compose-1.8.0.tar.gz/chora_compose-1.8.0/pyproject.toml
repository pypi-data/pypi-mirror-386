[tool.poetry]
name = "chora-compose"
version = "1.8.0"
description = "Chora Compose - Configuration-driven framework for composing artifacts from structured content"
authors = ["Victor <vlct0r@protonmail.com>"]
readme = "README.md"
packages = [{include = "chora_compose", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
pydantic = ">=2.0.0,<3.0.0"
jsonschema = ">=4.20.0,<5.0.0"
jinja2 = ">=3.1.0,<4.0.0"
jsonpath-ng = "^1.7.0"
anthropic = "^0.69.0"
fastmcp = "^2.12.4"
typer = "^0.19.2"
mcp = "^1.18.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.5"
mypy = "^1.15.0"
pytest = "^8.3.5"
pre-commit = "^4.2.0"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Enable Pyflakes, pycodestyle, and isort rules by default.
select = ["E", "F", "I"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is used.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.isort]
# Compatible with black formatter
profile = "black"
line_length = 88

[tool.mypy]
# Default settings
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Often needed for libraries without stubs
disallow_untyped_defs = true
exclude = ["examples/"]  # Exclude examples to avoid duplicate module names

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
    "integration",
]
asyncio_default_fixture_loop_scope = "function"
