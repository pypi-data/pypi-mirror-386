[project]
name = "canify"
version = "0.1.0"
description = "下一代知识密集型项目的协作基石，将文档即代码的理念推广到所有行业"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Canify Team", email = "team@canify.dev"}
]
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "typer>=0.9.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "gitpython>=3.1.0",
    "rich>=13.0.0",
    "watchdog",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
canify = "src.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
# 启用核心规则集，适合 Canify 项目
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "RUF", # ruff-specific rules
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FBT", # flake8-boolean-trap
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "S",   # flake8-bandit
    "SLF", # flake8-self
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
]
ignore = [
    # 允许未使用的导入，因为有些是类型提示
    "F401",  # `module` imported but unused
    # 允许长行，因为有些错误消息很长
    "E501",  # Line too long
    # 允许未使用的变量，因为有些是占位符
    "F841",  # Local variable `name` is assigned to but never used
    # 允许空的类型忽略
    "PYI046",  # Empty type annotation comment
    # 允许魔术方法中的 self 参数
    "N805",  # First argument of a method should be named 'self'
]

# 行长度
line-length = 88

# Python 版本
target-version = "py313"

# 排除的文件
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
]

# 每个文件的规则
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",  # Use of `assert` detected
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["canify"]

[tool.ruff.pylint]
allow-magic-value-types = ["int", "float", "str"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=canify",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["canify"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
