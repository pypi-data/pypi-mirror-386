issue_id: "code-organization-v0.2"
title: "v0.2.0 代码组织规范与目录结构"
status: "resolved"
priority: "high"
created_at: "2025-10-19"
updated_at: "2025-10-19"

participants:
  - "Claude Code"
  - "用户"

background: |
  随着 Canify 演进到 v0.2.0 的 daemon-cli-server 架构，需要一套清晰、可扩展的代码组织规范。
  此规范旨在明确各组件（cli, server, daemon）的代码边界，并定义共享库与私有实现细节的存放方式。

key_decisions:
  - decision: "采用统一的 `canify` 包结构"
    rationale: "所有代码都位于单一的可安装、可分发的 `canify` Python 包中，符合最佳实践。"
  
  - decision: "组件作为独立的子包存在"
    rationale: "cli, server, watchdog 作为 `canify` 的子包，明确了各自的代码所有权和边界，便于独立开发和测试。"

  - decision: "建立共享的核心领域模型目录"
    rationale: "`src/canify/models` 作为“事实来源”，存放纯粹的、与基础设施无关的 Pydantic 领域模型，作为系统内各组件通信的数据契约。"

  - decision: "严格分离领域模型与持久化模型"
    rationale: "避免用数据库等基础设施细节“污染”核心领域模型，确保领域模型的纯粹性和稳定性。"

  - decision: "在组件内部建立私有的持久化层"
    rationale: "每个需要数据库的组件（server, watchdog）都在其内部拥有一个 `persistence` 目录，用于存放私有的数据库模型（如 SQLAlchemy 模型）和数据仓库（Repository）逻辑。这实现了基础设施细节的内部化和隔离。"

final_directory_structure: |
  ```
  src/
  └── canify/
      ├── __init__.py
      │
      ├── models/         # [共享] 核心领域模型 (Pydantic)
      │   ├── __init__.py
      │   └── ...
      │
      ├── types.py        # [共享] 增强的类型定义
      ├── parsers/        # [共享] 解析器
      ├── exceptions.py   # [共享] 自定义异常
      │
      ├── cli/            # [组件] CLI 应用程序
      │   ├── __init__.py
      │   ├── main.py
      │   └── ...
      │
      ├── server/         # [组件] Server 应用程序
      │   ├── __init__.py
      │   ├── main.py
      │   ├── api/
      │   ├── services/
      │   └── persistence/  # [私有] Server 的持久化层
      │       ├── __init__.py
      │       ├── db_models.py
      │       └── repository.py
      │
      └── daemon/         # [组件] Daemon 应用程序
          ├── __init__.py
          ├── main.py
          ├── core.py
          └── persistence/  # [私有] Daemon 的持久化层
              ├── __init__.py
              ├── db_models.py
              └── repository.py
  ```

model_responsibilities:
  - model_type: "领域模型 (Domain Models)"
    location: "`src/canify/models/`"
    technology: "Pydantic"
    purpose: "定义“是什么”。作为业务逻辑和 API 通信的核心数据契约，与基础设施无关。"

  - model_type: "持久化模型 (Persistence Models)"
    location: "`src/canify/*/persistence/db_models.py`"
    technology: "SQLAlchemy (或其他 ORM)"
    purpose: "定义“怎么存”。直接映射数据库表结构，是组件的内部实现细节。"

next_steps:
  - "根据此规范创建新的目录结构。"
  - "将现有代码（如 cli, commands, core/parsers 等）迁移到新结构中。"
  - "开始按照 `docs/ROADMAP_V0.2.md` 中的计划实现各组件功能。"
