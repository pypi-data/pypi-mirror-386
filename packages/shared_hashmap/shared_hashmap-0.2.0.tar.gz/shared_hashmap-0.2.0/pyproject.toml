[project]
name = "shared_hashmap"
version = "0.2.0"
description = "High-performance cross-process shared memory hashmap for Python multiprocessing"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Raymond Chastain", email = "RaymondLC92@protonmail.com"}
]
license = {text = "MIT"}
keywords = ["multiprocessing", "shared-memory", "hashmap", "concurrent", "atomic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "atomics>=1.0.3",
]

[tool.uv]
dev-dependencies = [
    "pytest-check>=2.4.1",
    "pytest-timeout>=2.3.1",
    "pytest>=8.3.3",
    "twine>=6.0.1",
    "vulture>=2.13",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-benchmark>=5.1.0",
    "mypy>=1.18.2",
]

[tool.uv.sources]
shared_hashmap = { workspace = true }

[tool.ruff]
line-length = 144
# Exclude markdown files from linting
exclude = ["*.md"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.ruff.lint.isort]
known-first-party = ["shared_hashmap"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.mypy]
python_version = "3.13"
packages = ["shared_hashmap"]
strict = true

[[tool.mypy.overrides]]
module = ["cloudpickle", "fnvhash"]
ignore_missing_imports = true
