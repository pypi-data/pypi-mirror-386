mainprogram: header ";" [statement*]
?header: openqasm | kirin
openqasm: "OPENQASM" version
kirin: "KIRIN" "{" dialect ("," dialect)* "}"
dialect: IDENTIFIER ("." IDENTIFIER)*
version: INT "." INT
?statement: regdecl | gate | opaque | qop | ifstmt | barrier | include
?regdecl: qreg | creg
// stmts
include: "include" STRING ";"
ifstmt: "if" "(" expr "==" expr ")" ifbody
ifbody: qop
opaque: "opaque" IDENTIFIER ["(" [params] ")"] qubits ";"
barrier: "barrier" qubits ";"
qreg: "qreg" IDENTIFIER "[" INT "]" ";"
creg: "creg" IDENTIFIER "[" INT "]" ";"
gate: "gate" IDENTIFIER ["(" cparams? ")"] qparams "{" (uop | barrier)* "}"
cparams: IDENTIFIER ("," IDENTIFIER)*
qparams: IDENTIFIER ("," IDENTIFIER)*

// quantum ops
?qop: uop | measure | extension | reset
reset: "reset" bit ";"
measure: "measure" bit "->" bit ";"

?uop: inst | ugate | cx_gate
inst: IDENTIFIER ["(" [params] ")"] qubits ";"
ugate: "U" "(" expr "," expr "," expr ")" bit ";"
cx_gate: "CX" bit "," bit ";"
params: expr ("," expr)*

?extension: parallel | glob | noise
?glob: glob_u_gate
glob_u_gate: "glob" "." "U" "(" expr "," expr "," expr ")" global_body
global_body: "{" IDENTIFIER ("," IDENTIFIER)* "}"
?noise: noise_pauli1
noise_pauli1: "noise" "." "PAULI1" "(" expr "," expr "," expr ")" bit ";"
?parallel: para_u_gate | para_rz_gate | para_cz_gate
para_u_gate: "parallel" "." "U" "(" expr "," expr "," expr ")" parallel_body
para_rz_gate: "parallel" "." "RZ" "(" expr ")" parallel_body
para_cz_gate: "parallel" "." "CZ" parallel_body
parallel_body: "{" task_args* "}"
task_args: bit ("," bit)* ";"

?bit: IDENTIFIER ("[" INT "]")?
qubits: bit ("," bit)*

?expr: term ((PLUS|MINUS) term)*
?term: factor ((TIMES|DIVIDE) factor)*
?factor: (PLUS|MINUS) factor | power
?power: molecule (POW factor)?
?molecule: molecule "(" [arglist] ")" -> call
         | atom
?atom: "(" expr ")" | IDENTIFIER | NUMBER | PI
arglist: argument ("," argument)*
?argument: expr

VERSION: "2.0"
PI: "pi"
PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDE: "/"
POW: "^"
COMMENT: "//" /[^\n]*/ NEWLINE
NEWLINE: "\n"

%import common.INT
%import common.FLOAT
%import common.CNAME -> IDENTIFIER
%import common.NUMBER
%import common.ESCAPED_STRING -> STRING
%import common.WS
%ignore WS
%ignore COMMENT
