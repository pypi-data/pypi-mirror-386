name: CI

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
  - cron: '00 01 * * *'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          # Install a specific version of uv.
          version: "0.8.4"
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install the project
        run: uv sync --dev --all-extras --no-extra pyqrack-cuda --no-extra pyqrack-opencl
      - name: Run tests
        # For example, using `pytest`
        run: uv run just coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }} # required
      - name: Archive code coverage results
        if: matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.xml
          retention-days: 2
  post:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request
    steps:
        - uses: actions/checkout@v5
        - name: download covearge
          uses: actions/download-artifact@v5
          with:
            name: code-coverage-report
        - name: check coverage
          run: |
            if [ -f coverage.xml ]; then
              echo "Coverage file exists"
            else
              echo "Coverage file does not exist"
              exit 1
            fi
        - name: post covearge
          uses: orgoro/coverage@v3.2
          with:
            coverageFile: coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}
