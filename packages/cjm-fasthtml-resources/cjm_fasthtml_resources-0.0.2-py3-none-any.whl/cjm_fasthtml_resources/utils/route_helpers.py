"""Helper utilities for resource monitoring route handlers"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/route_helpers.ipynb.

# %% auto 0
__all__ = ['wrap_card_in_container', 'create_card_update']

# %% ../../nbs/utils/route_helpers.ipynb 3
from typing import Callable, Dict, Any

# %% ../../nbs/utils/route_helpers.ipynb 5
def wrap_card_in_container(content, html_id, card_cls=None, bg_cls=None, shadow_cls=None, **kwargs):
    """
    Wrap card content in a Div container with standard styling.
    
    This consolidates the common pattern of wrapping monitoring cards
    in styled containers.
    
    Args:
        content: Card content to wrap
        html_id: HTML ID for the container
        card_cls: Card class (optional, can be provided via DaisyUI)
        bg_cls: Background class (optional, can be provided via DaisyUI)
        shadow_cls: Shadow class (optional, can be provided via Tailwind)
        **kwargs: Additional attributes for the Div
    
    Returns:
        Div: Wrapped card container
    """
    # This function provides a reusable pattern but remains flexible
    # Applications can provide their own styling classes
    
    try:
        from fasthtml.common import Div
        from cjm_fasthtml_tailwind.core.base import combine_classes
        
        # Build class list
        classes = []
        if card_cls:
            classes.append(card_cls)
        if bg_cls:
            classes.append(bg_cls)
        if shadow_cls:
            classes.append(shadow_cls)
        
        cls = combine_classes(*classes) if classes else None
        
        return Div(
            content,
            cls=cls,
            id=html_id,
            **kwargs
        )
    except ImportError:
        # Fallback if dependencies not available
        return content

# %% ../../nbs/utils/route_helpers.ipynb 8
def create_card_update(
    render_fn: Callable, 
    info: Dict[str, Any], 
    target_id: str, 
    swap_type: str = "outerHTML"
):
    """
    Create an OOB swap update for a card.
    
    This consolidates the pattern of creating OOB swaps for card updates
    in SSE streaming.
    
    Args:
        render_fn: Function to render the card
        info: Info dictionary to pass to render function
        target_id: Target HTML ID for the swap
        swap_type: Type of swap (default "outerHTML")
    
    Returns:
        OOB swap element
    """
    try:
        from cjm_fasthtml_sse.helpers import oob_swap
        
        return oob_swap(
            render_fn(info),
            target_id=target_id,
            swap_type=swap_type
        )
    except ImportError:
        # Fallback if SSE library not available
        return render_fn(info)
