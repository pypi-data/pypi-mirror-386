"""Utilities for analyzing plugin configurations and resource requirements"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/plugin_utils.ipynb.

# %% auto 0
__all__ = ['is_local_plugin', 'uses_gpu_device', 'get_plugin_resource_identifier', 'compare_plugin_resources',
           'get_plugin_resource_requirements']

# %% ../../nbs/utils/plugin_utils.ipynb 3
from typing import Dict, Any, Optional

from ..core.manager import PLUGIN_RESOURCE_CONFIG_KEYS

# %% ../../nbs/utils/plugin_utils.ipynb 5
def is_local_plugin(
    plugin_meta # Plugin metadata with config_schema attribute
) -> bool: # True if plugin is local, False if API-based
    """Check if a plugin is local (vs API-based)."""
    if not hasattr(plugin_meta, 'config_schema') or not plugin_meta.config_schema:
        return False

    # Check if schema has an api_key property
    properties = plugin_meta.config_schema.get('properties', {})
    return 'api_key' not in properties

# %% ../../nbs/utils/plugin_utils.ipynb 8
def uses_gpu_device(
    plugin_config:Dict[str, Any] # The plugin's current configuration
) -> bool: # True if plugin will use GPU, False otherwise
    """Check if a plugin is configured to use GPU."""
    device = plugin_config.get('device', '').lower()

    # Check for explicit GPU indicators
    if device and device != 'cpu':
        # Could be 'cuda', 'gpu', 'cuda:0', 'auto', etc.
        if 'cuda' in device or 'gpu' in device or device.startswith('mps') or device == 'auto':
            return True

    return False

# %% ../../nbs/utils/plugin_utils.ipynb 11
def get_plugin_resource_identifier(
    plugin_config:Dict[str, Any] # The plugin's configuration
) -> Optional[str]: # Plugin resource identifier string, or None if not found
    """Extract the plugin resource identifier from plugin configuration. Checks common plugin resource configuration keys like 'resource_id', 'model_id', 'model', 'model_name', etc."""
    for key in PLUGIN_RESOURCE_CONFIG_KEYS:
        if key in plugin_config:
            value = plugin_config[key]
            if value:
                return str(value)

    return None

# %% ../../nbs/utils/plugin_utils.ipynb 14
def compare_plugin_resources(
    config1:Dict[str, Any], # First plugin configuration
    config2:Dict[str, Any] # Second plugin configuration
) -> bool: # True if both configs specify the same plugin resource, False otherwise
    """Compare two plugin configurations to see if they use the same plugin resource."""
    resource1 = get_plugin_resource_identifier(config1)
    resource2 = get_plugin_resource_identifier(config2)

    # Both must have resource identifiers to compare
    if resource1 is None or resource2 is None:
        return False

    return resource1 == resource2

# %% ../../nbs/utils/plugin_utils.ipynb 17
def get_plugin_resource_requirements(
    plugin_id:str, # Unique plugin ID
    plugin_registry, # Plugin registry instance with get_plugin, load_plugin_config methods
    plugin_config:Optional[Dict[str, Any]]=None # Optional plugin configuration
) -> Dict[str, Any]: # Dictionary with resource requirement information (is_local, uses_gpu, plugin_resource, device)
    """Get resource requirements for a plugin."""
    plugin_meta = plugin_registry.get_plugin(plugin_id)

    if not plugin_meta:
        return {
            'is_local': False,
            'uses_gpu': False,
            'plugin_resource': None
        }

    is_local = is_local_plugin(plugin_meta)

    if not is_local:
        return {
            'is_local': False,
            'uses_gpu': False,
            'plugin_resource': None
        }

    # Load config if not provided
    if plugin_config is None:
        plugin_config = plugin_registry.load_plugin_config(plugin_id)

    uses_gpu = uses_gpu_device(plugin_config)
    resource = get_plugin_resource_identifier(plugin_config)

    return {
        'is_local': is_local,
        'uses_gpu': uses_gpu,
        'plugin_resource': resource,
        'device': plugin_config.get('device', 'unknown')
    }
