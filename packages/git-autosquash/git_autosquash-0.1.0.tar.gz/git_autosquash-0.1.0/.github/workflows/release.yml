name: Release to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: read

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools-scm
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Build package
      run: uv build
      
    - name: Check build artifacts
      run: |
        ls -la dist/
        uv run twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/git-autosquash/
    permissions:
      id-token: write  # For trusted publishing
      
    steps:
    - name: Download build artifacts  
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Uses OIDC trusted publishing - no API token needed
        # Alternative: uncomment below and add PYPI_API_TOKEN secret
        # password: ${{ secrets.PYPI_API_TOKEN }}
        print-hash: true
        
  create-release:
    name: Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: release-notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > release_notes.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "First release of git-autosquash" >> release_notes.md
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.release-notes.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false